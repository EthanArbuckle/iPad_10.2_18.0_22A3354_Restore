void sub_100A7A30C(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(_QWORD);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(_QWORD);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t (*v92)(char *, char *, uint64_t);
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;

  v3 = v2;
  v76 = a2;
  v75 = a1;
  v4 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v4);
  v98 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DirectorySequence(0);
  v85 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v83 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_101111430);
  v14 = __chkstk_darwin(v13);
  v89 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v95 = (uint64_t)&v69 - v16;
  v84 = sub_10001A9A8(&qword_10110B460);
  v94 = *(_QWORD *)(v84 - 8);
  v17 = __chkstk_darwin(v84);
  v90 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v87 = (uint64_t)&v69 - v19;
  v20 = sub_10001A9A8(&qword_101105800);
  __chkstk_darwin(v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v86 = (uint64_t)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v26);
  v78 = (uint64_t)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for MemberSharingCircle(0);
  v79 = *(_QWORD *)(v77 - 8);
  v28 = __chkstk_darwin(v77);
  v73 = (uint64_t)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v74 = (uint64_t)&v69 - v30;
  v31 = sub_10001A9A8(&qword_1010FB1F0);
  __chkstk_darwin(v31);
  v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = _swiftEmptyArrayStorage;
  sub_100005CF0(v97, (uint64_t)v33, &qword_1010FB1F0);
  v81 = v33;
  sub_10000F9B8((uint64_t)v33, (uint64_t)v22, &qword_101105800);
  v70 = v24;
  v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v72(v22, 1, v23) == 1)
  {
LABEL_2:
    sub_100004048((uint64_t)v22, &qword_101105800);
    v34 = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v78, 1, 1, v77);
LABEL_3:
    sub_100004048((uint64_t)v81, &qword_1010FB1F0);
    sub_100004048(v34, (uint64_t *)&unk_101111440);
    return;
  }
  v88 = v6;
  v35 = v94;
  v82 = (void (*)(_QWORD))v8;
  v71 = v22;
  v80 = v23;
  while (1)
  {
    v96 = v3;
    v36 = v86;
    sub_100005CF0((uint64_t)v22, v86, (uint64_t *)&unk_1011057F0);
    v97 = v36 + *(int *)(v23 + 40);
    sub_10000F9B8(v97, (uint64_t)v11, (uint64_t *)&unk_1010F77A0);
    v37 = v85;
    v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
    if (v93(v11, 1, v99) != 1)
      break;
    v38 = v84;
LABEL_17:
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F77A0);
    v60 = v95;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v95, 1, 1, v38);
    v3 = v96;
LABEL_19:
    v22 = v71;
    sub_100004048(v86, (uint64_t *)&unk_1011057F0);
    sub_100004048(v60, (uint64_t *)&unk_101111430);
    v61 = (uint64_t)v81;
    sub_100004048((uint64_t)v81, &qword_101105800);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v61, 1, 1, v80);
LABEL_20:
    v62 = v79;
    v34 = v78;
    v63 = v77;
    (*(void (**)(void))(v79 + 56))();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v34, 1, v63) == 1)
      goto LABEL_3;
    v64 = v74;
    sub_1000126EC(v34, v74, type metadata accessor for MemberSharingCircle);
    v65 = v75(v64);
    if (v3)
    {
      sub_1000126B0(v64, type metadata accessor for MemberSharingCircle);
      sub_100004048((uint64_t)v81, &qword_1010FB1F0);
      swift_release(v100);
      return;
    }
    if ((v65 & 1) != 0)
    {
      sub_1000126EC(v64, v73, type metadata accessor for MemberSharingCircle);
      v66 = v100;
      if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
      {
        sub_10009A4D0(0, v66[2] + 1, 1);
        v66 = v100;
      }
      v68 = v66[2];
      v67 = v66[3];
      if (v68 >= v67 >> 1)
      {
        sub_10009A4D0(v67 > 1, v68 + 1, 1);
        v66 = v100;
      }
      v66[2] = v68 + 1;
      sub_1000126EC(v73, (uint64_t)v66+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v68, type metadata accessor for MemberSharingCircle);
      v35 = v94;
    }
    else
    {
      sub_1000126B0(v64, type metadata accessor for MemberSharingCircle);
    }
    sub_10000F9B8((uint64_t)v81, (uint64_t)v22, &qword_101105800);
    v23 = v80;
    if (v72(v22, 1, v80) == 1)
      goto LABEL_2;
  }
  v92 = *(uint64_t (**)(char *, char *, uint64_t))(v37 + 32);
  v39 = v83;
  v38 = v84;
  while (1)
  {
    v40 = (uint64_t)v89;
    v41 = v92(v39, v11, v99);
    DirectorySequence.next()(v41);
    v42 = (uint64_t)v98;
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    v44 = v6;
    v45 = v91;
    if (v43(v98, 1, v91) == 1)
    {
      v46 = v99;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v99);
      sub_100004048(v42, &qword_1010FBA40);
      v47 = v97;
      sub_100004048(v97, (uint64_t *)&unk_1010F77A0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v47, 1, 1, v46);
      v35 = v94;
      v48 = v95;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v95, 1, 1, v38);
      goto LABEL_14;
    }
    v49 = v99;
    v50 = v11;
    v51 = v82;
    (*(void (**)(void (*)(_QWORD), uint64_t, uint64_t))(v44 + 32))(v82, v42, v45);
    v52 = objc_autoreleasePoolPush();
    v53 = v96;
    sub_100A7F310(v51, v86, (uint64_t *)&unk_101111440, type metadata accessor for MemberSharingCircle, (uint64_t *)&unk_1011057F0, &qword_10110B4A0, (uint64_t)sub_100A83C7C, &qword_10110B460, v40);
    v96 = v53;
    if (v53)
      break;
    objc_autoreleasePoolPop(v52);
    v54 = v85;
    v39 = v83;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v49);
    (*(void (**)(void (*)(_QWORD), uint64_t))(v44 + 8))(v51, v45);
    v48 = v95;
    sub_100005CF0(v40, v95, (uint64_t *)&unk_101111430);
    v11 = v50;
    v37 = v54;
    v38 = v84;
    v35 = v94;
LABEL_14:
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v48, 1, v38);
    v56 = (uint64_t)v90;
    if (v55 == 1)
    {
      v3 = v96;
      v60 = v48;
      v6 = v88;
      goto LABEL_19;
    }
    v57 = v48;
    v58 = v87;
    sub_100005CF0(v57, v87, &qword_10110B460);
    sub_100005CF0(v58, v56, &qword_10110B460);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v56, v38);
    v6 = v88;
    if (EnumCaseMultiPayload != 1)
    {
      sub_100004048(v86, (uint64_t *)&unk_1011057F0);
      sub_1000126EC(v56, v78, type metadata accessor for MemberSharingCircle);
      v3 = v96;
      v22 = v71;
      goto LABEL_20;
    }
    sub_100004048(v56, &qword_10110B460);
    sub_10000F9B8(v97, (uint64_t)v11, (uint64_t *)&unk_1010F77A0);
    if (v93(v11, 1, v99) == 1)
      goto LABEL_17;
  }
  objc_autoreleasePoolPop(v52);
  __break(1u);
}

uint64_t sub_100A7AC84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_1010A7F90, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7FA8, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010EE180, (uint64_t (*)(void))sub_100AA543C, (uint64_t *)&unk_101111C30);
}

uint64_t sub_100A7ACF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for MemberSharingCircle, (uint64_t)&unk_1010A78D8, (uint64_t)sub_100A9A800, a5, sub_10001D850, byte_1010A78F0, (uint64_t)sub_100A9A818, (uint64_t *)&unk_101111440, (uint64_t (*)(void))sub_100A9A834, &qword_101111470);
}

uint64_t sub_100A7AD64@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_1010A7A18, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7A30, (uint64_t)sub_100AA56F0, &qword_1010EE0E0, (uint64_t (*)(void))sub_100AA46B0, &qword_1011115E8);
}

uint64_t sub_100A7ADD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_1010A7A68, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7A80, (uint64_t)sub_100AA56F0, &qword_10110EEB0, (uint64_t (*)(void))sub_100AA4758, &qword_101111708);
}

uint64_t sub_100A7AE44@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1010A7BD0, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7BE8, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010FF7F0, (uint64_t (*)(void))sub_100AA4D54, (uint64_t *)&unk_101111AB8);
}

uint64_t sub_100A7AEB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_1010A7EA0, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7EB8, (uint64_t)sub_100AA56F0, &qword_10110AB60, (uint64_t (*)(void))sub_100AA528C, (uint64_t *)&unk_101111BD0);
}

uint64_t sub_100A7AF24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for LostModeRecord, (uint64_t)&unk_1010A7DB0, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7DC8, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010F47F0, (uint64_t (*)(void))sub_100AA50DC, &qword_101111B78);
}

uint64_t sub_100A7AF94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for LocationProvider, (uint64_t)&unk_1010A79C8, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A79E0, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010F47E0, (uint64_t (*)(void))sub_100AA3ABC, &qword_101111548);
}

uint64_t sub_100A7B004@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for KeySyncRecord, (uint64_t)&unk_1010A7E50, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7E68, (uint64_t)sub_100AA56F0, &qword_1010F7AE0, (uint64_t (*)(void))sub_100AA51FC, (uint64_t *)&unk_101111BB0);
}

uint64_t sub_100A7B074@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1010A7EF0, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7F08, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010F47D0, (uint64_t (*)(void))sub_100AA531C, (uint64_t *)&unk_101111BF0);
}

uint64_t sub_100A7B0E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for ShareRecord, (uint64_t)&unk_1010A7B80, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7B98, (uint64_t)sub_100AA56F0, &qword_1010FA070, (uint64_t (*)(void))sub_100AA4CC4, &qword_101111AA0);
}

uint64_t sub_100A7B154@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for SafeLocation, (uint64_t)&unk_1010A7F40, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7F58, (uint64_t)sub_100AA56F0, &qword_101106E40, (uint64_t (*)(void))sub_100AA53AC, (uint64_t *)&unk_101111C10);
}

uint64_t sub_100A7B1C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for LeashRecord, (uint64_t)&unk_1010A7E00, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7E18, (uint64_t)sub_100AA56F0, &qword_101111B80, (uint64_t (*)(void))sub_100AA516C, &qword_101111B98);
}

uint64_t sub_100A7B234@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_1010A7B30, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7B48, (uint64_t)sub_100AA56F0, &qword_1010F33A8, (uint64_t (*)(void))sub_100AA4BB4, &qword_101111A60);
}

uint64_t sub_100A7B2A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_1010A7C20, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7C38, (uint64_t)sub_100AA56F0, &qword_101102FB0, (uint64_t (*)(void))sub_100AA4DE4, &qword_101111AD8);
}

uint64_t sub_100A7B314@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_1010A7978, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7990, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010F7810, (uint64_t (*)(void))sub_100AA3A2C, &qword_101111508);
}

uint64_t sub_100A7B384@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  os_log_type_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(char *, uint64_t);
  char *v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  __int128 aBlock;
  uint64_t (*v109)(uint64_t);
  void *v110;
  uint64_t (*v111)();
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v101 = a5;
  v100 = a4;
  v105 = a3;
  v104 = a2;
  v102 = a1;
  v106 = a6;
  v99 = type metadata accessor for CryptoError(0);
  v97 = *(_QWORD *)(v99 - 8);
  v6 = __chkstk_darwin(v99);
  v95 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v96 = (char *)&v90 - v9;
  __chkstk_darwin(v8);
  v98 = (char *)&v90 - v10;
  v11 = type metadata accessor for URL(0);
  v103 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v90 - v15;
  v17 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v90 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v17);
  v25 = sub_100006C64((unint64_t *)&unk_1010F4700, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v113, v17, v25);
  v26 = aBlock;
  v27 = v113;
  v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    v30 = static os_log_type_t.default.getter(v29);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7D38, "record(for uuid:) call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
    sub_1009968D0(&aBlock);
    return sub_100005CF0((uint64_t)&aBlock, v106, &qword_1010FC1C0);
  }
  v32 = objc_autoreleasePoolPush();
  v33 = UUID.uuidString.getter(v32);
  URL.appendingPathComponent(_:)(v33, v34);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v35 = *(void (**)(char *, uint64_t))(v103 + 8);
  v35(v14, v11);
  objc_autoreleasePoolPop(v32);
  v36 = (uint64_t)v107;
  v37 = Data.init(contentsOf:options:)(v16, 0);
  if (v36)
  {
    swift_errorRelease(v36);
    v35(v16, v11);
    sub_1009968D0(&aBlock);
    return sub_100005CF0((uint64_t)&aBlock, v106, &qword_1010FC1C0);
  }
  v105 = v37;
  v104 = v38;
  v93 = v35;
  v39 = static os_log_type_t.debug.getter(v37);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v40 = qword_1011B7D38;
  v91 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v41 = swift_allocObject(v91, 72, 7);
  v90 = xmmword_100E22B00;
  *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
  v42 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v94 = v16;
  v103 = v11;
  v43 = dispatch thunk of CustomStringConvertible.description.getter(v11, v42);
  v45 = v44;
  *(_QWORD *)(v41 + 56) = &type metadata for String;
  v92 = sub_10001AA00();
  *(_QWORD *)(v41 + 64) = v92;
  *(_QWORD *)(v41 + 32) = v43;
  *(_QWORD *)(v41 + 40) = v45;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Reading from LocalStorageBacked file: %@", 40, 2, v41);
  swift_bridgeObjectRelease();
  v46 = v102;
  v47 = v102 + 9;
  swift_beginAccess(v102 + 9, &aBlock, 33, 0);
  isEscapingClosureAtFileLocation = v101;
  swift_bridgeObjectRetain(v101);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46[9]);
  v113 = v46[9];
  v50 = v113;
  v46[9] = 0x8000000000000000;
  v51 = v100;
  v53 = sub_100518DA0(v100, isEscapingClosureAtFileLocation);
  v54 = *(_QWORD *)(v50 + 16);
  v55 = (v52 & 1) == 0;
  v56 = v54 + v55;
  if (__OFADD__(v54, v55))
  {
    __break(1u);
    goto LABEL_33;
  }
  LOBYTE(v11) = v52;
  if (*(_QWORD *)(v50 + 24) >= v56)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_36;
    while (1)
    {
LABEL_14:
      *v47 = v50;
      swift_bridgeObjectRelease();
      v59 = (_QWORD *)*v47;
      v60 = (_QWORD *)*v47;
      if ((v11 & 1) == 0)
      {
        v59[(v53 >> 6) + 8] |= 1 << v53;
        v61 = (uint64_t *)(v59[6] + 16 * v53);
        *v61 = v51;
        v61[1] = isEscapingClosureAtFileLocation;
        *(_QWORD *)(v59[7] + 8 * v53) = 0;
        v62 = v59[2];
        swift_bridgeObjectRetain(v59);
        if (__OFADD__(v62, 1))
        {
          __break(1u);
LABEL_38:
          swift_once(&qword_1010E9F80, sub_1007FA778);
LABEL_23:
          v74 = type metadata accessor for Logger(0);
          sub_10001A9E8(v74, (uint64_t)qword_1011B77E8);
          swift_bridgeObjectRetain(v51);
          v76 = Logger.logObject.getter(v75);
          v77 = static os_log_type_t.error.getter(v76);
          goto LABEL_27;
        }
        v59[2] = v62 + 1;
        v60 = (_QWORD *)isEscapingClosureAtFileLocation;
      }
      swift_bridgeObjectRetain(v60);
      v63 = v59[7];
      v64 = *(_QWORD *)(v63 + 8 * v53);
      v65 = __OFADD__(v64, 1);
      v66 = v64 + 1;
      if (v65)
      {
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      *(_QWORD *)(v63 + 8 * v53) = v66;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = v46[8];
      v65 = __OFADD__(v67, 1);
      v68 = v67 + 1;
      if (v65)
        goto LABEL_34;
      v46[8] = v68;
      v53 = v104;
      if (__ROR8__(0x1CAC083126E978D5 * v68 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
      {
        v47 = (_QWORD *)sub_100888F00((uint64_t)v46);
        v51 = v69;
        swift_bridgeObjectRetain(v46[9]);
        v71 = sub_100A795F0(v70);
        v73 = v72;
        swift_bridgeObjectRelease();
        if ((v73 & 1) == 0 && v71 >= 10001)
        {
          if (qword_1010E9F80 == -1)
            goto LABEL_23;
          goto LABEL_38;
        }
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v78 = type metadata accessor for Logger(0);
        sub_10001A9E8(v78, (uint64_t)qword_1011B77E8);
        swift_bridgeObjectRetain(v51);
        v76 = Logger.logObject.getter(v79);
        v77 = static os_log_type_t.info.getter(v76);
LABEL_27:
        v80 = v77;
        if (os_log_type_enabled(v76, v77))
        {
          v81 = swift_slowAlloc(12, -1);
          v107 = v47;
          v82 = (uint8_t *)v81;
          v83 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v83;
          *(_DWORD *)v82 = 136446210;
          LOBYTE(v11) = (_BYTE)v82 + 4;
          swift_bridgeObjectRetain(v51);
          v113 = sub_100016940((uint64_t)v107, v51, (uint64_t *)&aBlock);
          v53 = v104;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114, v82 + 4, v82 + 12);
          swift_bridgeObjectRelease_n(v51, 3);
          _os_log_impl((void *)&_mh_execute_header, v76, v80, "readStatistics:\n%{public}s", v82, 0xCu);
          swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v82, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v51, 2);
        }
      }
      v51 = v46[3];
      v84 = *(NSObject **)(v51 + 72);
      v85 = swift_allocObject(&unk_1010A8030, 32, 7);
      *(_QWORD *)(v85 + 16) = sub_100A9A800;
      *(_QWORD *)(v85 + 24) = v51;
      v111 = sub_10005CBA4;
      v112 = v85;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v109 = sub_10001D8B8;
      v110 = &unk_1010A8048;
      v47 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v84, v47);
      _Block_release(v47);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v85, "", 98, 71, 26, 1);
      swift_release();
      v86 = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        __chkstk_darwin(v86);
        v87 = v105;
        *((_QWORD *)&v90 - 4) = v51;
        *((_QWORD *)&v90 - 3) = v87;
        *((_QWORD *)&v90 - 2) = v53;
        OS_dispatch_queue.sync<A>(execute:)(sub_100AA56F0, &v90 - 3, &type metadata for Data);
        v88 = aBlock;
        v89 = objc_autoreleasePoolPush();
        sub_100A7EB7C((uint64_t)v46, v88, *((uint64_t *)&v88 + 1));
        objc_autoreleasePoolPop(v89);
        v93(v94, v103);
        sub_10001BC14(v88, *((unint64_t *)&v88 + 1));
        return sub_10001BC14(v105, v53);
      }
LABEL_35:
      __break(1u);
LABEL_36:
      sub_100A9A654();
      v50 = v113;
    }
  }
  sub_100A865D4(v56, isUniquelyReferenced_nonNull_native);
  v50 = v113;
  v57 = sub_100518DA0(v51, isEscapingClosureAtFileLocation);
  if ((v11 & 1) == (v58 & 1))
  {
    v53 = v57;
    goto LABEL_14;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100A7C194@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_1010A7D10, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7D28, (uint64_t)sub_100AA56F0, &qword_101111B20, (uint64_t (*)(void))sub_100AA4FBC, &qword_101111B38);
}

uint64_t sub_100A7C204@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_1010A7C70, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7C88, (uint64_t)sub_100AA56F0, &qword_101111AE0, (uint64_t (*)(void))sub_100AA4E74, &qword_101111AF8);
}

uint64_t sub_100A7C274@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void **v26;
  void **v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void **v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t *v49;
  unint64_t v50;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  uint8_t *v82;
  void **v83;
  NSObject *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t);
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  __int128 v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void **v133;
  void **aBlock;
  uint64_t v135;
  uint64_t (*v136)(uint64_t);
  void *v137;
  uint64_t (*v138)();
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;

  v132 = a6;
  v124 = a5;
  v127 = a4;
  v128 = a1;
  v130 = a2;
  v131 = a3;
  v123 = type metadata accessor for CryptoError(0);
  v125 = *(_QWORD *)(v123 - 8);
  v6 = __chkstk_darwin(v123);
  v121 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v126 = (char *)&v118 - v9;
  __chkstk_darwin(v8);
  v122 = (char *)&v118 - v10;
  v11 = type metadata accessor for URL(0);
  v129 = *(char **)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v118 - v15;
  v17 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v118 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v17);
  v25 = sub_100006C64((unint64_t *)&unk_1010F4700, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v140, v17, v25);
  v26 = aBlock;
  v27 = (void **)v140;
  v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    v30 = static os_log_type_t.default.getter(v29);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    result = os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7D38, "record(for uuid:) call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
    goto LABEL_7;
  }
  v32 = objc_autoreleasePoolPush();
  v33 = UUID.uuidString.getter(v32);
  URL.appendingPathComponent(_:)(v33, v34);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v35 = (void (*)(char *, uint64_t))*((_QWORD *)v129 + 1);
  v35(v14, v11);
  objc_autoreleasePoolPop(v32);
  v36 = v133;
  v37 = Data.init(contentsOf:options:)(v16, 0);
  v39 = v11;
  if (v36)
  {
    swift_errorRelease(v36);
    result = ((uint64_t (*)(char *, uint64_t))v35)(v16, v11);
    goto LABEL_7;
  }
  v133 = 0;
  v130 = v37;
  v131 = v38;
  v41 = static os_log_type_t.debug.getter(v37);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v42 = qword_1011B7D38;
  v119 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v43 = swift_allocObject(v119, 72, 7);
  v118 = xmmword_100E22B00;
  *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
  v44 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v129 = v16;
  v45 = dispatch thunk of CustomStringConvertible.description.getter(v11, v44);
  v47 = v46;
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  v120 = sub_10001AA00();
  *(_QWORD *)(v43 + 64) = v120;
  *(_QWORD *)(v43 + 32) = v45;
  *(_QWORD *)(v43 + 40) = v47;
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Reading from LocalStorageBacked file: %@", 40, 2, v43);
  swift_bridgeObjectRelease();
  isEscapingClosureAtFileLocation = v128;
  v49 = (uint64_t *)(v128 + 72);
  swift_beginAccess(v128 + 72, &aBlock, 33, 0);
  v50 = v124;
  swift_bridgeObjectRetain(v124);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(isEscapingClosureAtFileLocation
                                                                                            + 72));
  v140 = *(_QWORD *)(isEscapingClosureAtFileLocation + 72);
  v52 = v140;
  *(_QWORD *)(isEscapingClosureAtFileLocation + 72) = 0x8000000000000000;
  v54 = sub_100518DA0(v127, v50);
  v55 = *(_QWORD *)(v52 + 16);
  v56 = (v53 & 1) == 0;
  v57 = v55 + v56;
  if (__OFADD__(v55, v56))
  {
    __break(1u);
    goto LABEL_42;
  }
  v11 = v53;
  if (*(_QWORD *)(v52 + 24) >= v57)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_45;
    while (1)
    {
LABEL_15:
      *v49 = v52;
      swift_bridgeObjectRelease();
      v60 = (_QWORD *)*v49;
      v61 = (_QWORD *)*v49;
      if ((v11 & 1) == 0)
      {
        v60[(v54 >> 6) + 8] |= 1 << v54;
        v62 = (_QWORD *)(v60[6] + 16 * v54);
        *v62 = v127;
        v62[1] = v50;
        *(_QWORD *)(v60[7] + 8 * v54) = 0;
        v63 = v60[2];
        swift_bridgeObjectRetain(v60);
        if (__OFADD__(v63, 1))
        {
          __break(1u);
LABEL_47:
          swift_once(&qword_1010E9F80, sub_1007FA778);
LABEL_24:
          v75 = type metadata accessor for Logger(0);
          sub_10001A9E8(v75, (uint64_t)qword_1011B77E8);
          swift_bridgeObjectRetain(v50);
          v77 = Logger.logObject.getter(v76);
          v78 = static os_log_type_t.error.getter(v77);
          goto LABEL_28;
        }
        v60[2] = v63 + 1;
        v61 = (_QWORD *)v50;
      }
      swift_bridgeObjectRetain(v61);
      v64 = v60[7];
      v65 = *(_QWORD *)(v64 + 8 * v54);
      v66 = __OFADD__(v65, 1);
      v67 = v65 + 1;
      if (v66)
      {
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      *(_QWORD *)(v64 + 8 * v54) = v67;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v68 = *(_QWORD *)(isEscapingClosureAtFileLocation + 64);
      v66 = __OFADD__(v68, 1);
      v69 = v68 + 1;
      v11 = (uint64_t)v126;
      if (v66)
        goto LABEL_43;
      *(_QWORD *)(isEscapingClosureAtFileLocation + 64) = v69;
      v54 = v125;
      if (__ROR8__(0x1CAC083126E978D5 * v69 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
      {
        v127 = sub_100888F00(isEscapingClosureAtFileLocation);
        v50 = v70;
        swift_bridgeObjectRetain(*(_QWORD *)(isEscapingClosureAtFileLocation + 72));
        v72 = sub_100A795F0(v71);
        v74 = v73;
        swift_bridgeObjectRelease();
        if ((v74 & 1) == 0 && v72 >= 10001)
        {
          if (qword_1010E9F80 == -1)
            goto LABEL_24;
          goto LABEL_47;
        }
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v79 = type metadata accessor for Logger(0);
        sub_10001A9E8(v79, (uint64_t)qword_1011B77E8);
        swift_bridgeObjectRetain(v50);
        v77 = Logger.logObject.getter(v80);
        v78 = static os_log_type_t.info.getter(v77);
LABEL_28:
        v81 = v78;
        if (os_log_type_enabled(v77, v78))
        {
          v82 = (uint8_t *)swift_slowAlloc(12, -1);
          v83 = (void **)swift_slowAlloc(32, -1);
          aBlock = v83;
          *(_DWORD *)v82 = 136446210;
          swift_bridgeObjectRetain(v50);
          v140 = sub_100016940(v127, v50, (uint64_t *)&aBlock);
          v54 = v125;
          v11 = (uint64_t)v126;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v82 + 4, v82 + 12);
          swift_bridgeObjectRelease_n(v50, 3);
          _os_log_impl((void *)&_mh_execute_header, v77, v81, "readStatistics:\n%{public}s", v82, 0xCu);
          swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v83, -1, -1);
          swift_slowDealloc(v82, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v50, 2);
        }
        isEscapingClosureAtFileLocation = v128;
      }
      v50 = *(_QWORD *)(isEscapingClosureAtFileLocation + 24);
      v84 = *(NSObject **)(v50 + 72);
      v49 = (uint64_t *)swift_allocObject(&unk_1010A7CC0, 32, 7);
      v49[2] = (uint64_t)sub_100A9A800;
      v49[3] = v50;
      v138 = sub_10005CBA4;
      v139 = v49;
      aBlock = _NSConcreteStackBlock;
      v135 = 1107296256;
      v136 = sub_10001D8B8;
      v137 = &unk_1010A7CD8;
      v85 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v84, v85);
      _Block_release(v85);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v49, "", 98, 71, 26, 1);
      swift_release();
      v86 = swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        __chkstk_darwin(v86);
        v87 = v130;
        *((_QWORD *)&v118 - 4) = v50;
        *((_QWORD *)&v118 - 3) = v87;
        *((_QWORD *)&v118 - 2) = v131;
        v88 = v133;
        OS_dispatch_queue.sync<A>(execute:)(sub_100AA56F0, &v118 - 3, &type metadata for Data);
        if (!v88)
        {
          v107 = (uint64_t)aBlock;
          v108 = v135;
          v109 = objc_autoreleasePoolPush();
          sub_100A7ED28(v128, v107, v108);
          objc_autoreleasePoolPop(v109);
          v35(v129, v39);
          sub_10001BC14(v107, v108);
          return sub_10001BC14(v130, v131);
        }
        v127 = v39;
        v89 = v11;
        v90 = v54;
        aBlock = v88;
        swift_errorRetain(v88);
        v91 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v92 = v122;
        v93 = v123;
        if ((swift_dynamicCast(v122, &aBlock, v91, v123, 0) & 1) != 0)
        {
          v133 = 0;
          swift_errorRelease(v88);
          v94 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v89, v92, v93);
          v95 = static os_log_type_t.error.getter(v94);
          v96 = qword_1011B7D38;
          v97 = swift_allocObject(v119, 72, 7);
          *(_OWORD *)(v97 + 16) = v118;
          v98 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
          v99 = v121;
          v98(v121, v89, v93);
          v100 = String.init<A>(describing:)(v99, v93);
          v101 = v120;
          *(_QWORD *)(v97 + 56) = &type metadata for String;
          *(_QWORD *)(v97 + 64) = v101;
          *(_QWORD *)(v97 + 32) = v100;
          *(_QWORD *)(v97 + 40) = v102;
          os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Error decrypting record: %@", 27, 2, v97);
          swift_bridgeObjectRelease();
          v103 = v129;
          if (*(_QWORD *)(v128 + 32))
          {
            v104 = sub_100006C64((unint64_t *)&qword_101111450, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
            v105 = swift_allocError(v93, v104, 0, 0);
            v98(v106, v89, v93);
            swift_retain();
            sub_100BE85C0(v105);
            sub_10001BC14(v130, v131);
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v93);
            v35(v103, v127);
            swift_errorRelease(v105);
          }
          else
          {
            sub_10001BC14(v130, v131);
            (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v93);
            v35(v103, v127);
          }
          v117 = (_OWORD *)v132;
          *(_QWORD *)(v132 + 80) = 0;
          v117[3] = 0u;
          v117[4] = 0u;
          v117[1] = 0u;
          v117[2] = 0u;
          *v117 = 0u;
          return swift_errorRelease(aBlock);
        }
        v110 = swift_errorRelease(aBlock);
        v111 = static os_log_type_t.error.getter(v110);
        v112 = qword_1011B7D38;
        v113 = swift_allocObject(v119, 72, 7);
        *(_OWORD *)(v113 + 16) = v118;
        aBlock = v88;
        swift_errorRetain(v88);
        v114 = String.init<A>(describing:)(&aBlock, v91);
        v115 = v120;
        *(_QWORD *)(v113 + 56) = &type metadata for String;
        *(_QWORD *)(v113 + 64) = v115;
        *(_QWORD *)(v113 + 32) = v114;
        *(_QWORD *)(v113 + 40) = v116;
        os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, v112, "Error reading record: %@", 24, 2, v113);
        sub_10001BC14(v130, v131);
        swift_bridgeObjectRelease();
        swift_errorRelease(v88);
        result = ((uint64_t (*)(char *, uint64_t))v35)(v129, v127);
LABEL_7:
        v40 = (_OWORD *)v132;
        *(_QWORD *)(v132 + 80) = 0;
        v40[3] = 0u;
        v40[4] = 0u;
        v40[1] = 0u;
        v40[2] = 0u;
        *v40 = 0u;
        return result;
      }
LABEL_44:
      __break(1u);
LABEL_45:
      sub_100A9A654();
      v52 = v140;
    }
  }
  sub_100A865D4(v57, isUniquelyReferenced_nonNull_native);
  v52 = v140;
  v58 = sub_100518DA0(v127, v50);
  if ((v11 & 1) == (v59 & 1))
  {
    v54 = v58;
    goto LABEL_15;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100A7CEE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7CF58(a1, a2, a3, a4, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_1010A7D60, (uint64_t)sub_100A9A800, a5, sub_10005CBA4, byte_1010A7D78, (uint64_t)sub_100AA56F0, &qword_101111B40, (uint64_t (*)(void))sub_100AA504C, (uint64_t *)&unk_101111B58);
}

uint64_t sub_100A7CF58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, uint64_t (*a5)(_QWORD)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, _QWORD *a9, char *a10, uint64_t a11, uint64_t *a12, uint64_t (*a13)(void), uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void **v33;
  void **v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  unint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  _QWORD *v59;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t v91;
  os_log_type_t v92;
  uint8_t *v93;
  void **v94;
  NSObject *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  void (*v106)(char *, uint64_t);
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(_QWORD);
  uint64_t v122;
  uint8_t *v123;
  void **aBlock;
  uint64_t v125;
  uint64_t (*v126)(uint64_t);
  char *v127;
  void *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;

  v113 = a6;
  v114 = a7;
  v121 = a5;
  v122 = a8;
  v115 = a4;
  v116 = a1;
  v117 = a3;
  v119 = a2;
  v112 = type metadata accessor for CryptoError(0);
  v110 = *(_QWORD *)(v112 - 8);
  v14 = __chkstk_darwin(v112);
  v108 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v109 = (char *)&v103 - v17;
  __chkstk_darwin(v16);
  v111 = (char *)&v103 - v18;
  v120 = type metadata accessor for URL(0);
  v118 = *(_QWORD *)(v120 - 8);
  v19 = __chkstk_darwin(v120);
  v21 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v23 = (char *)&v103 - v22;
  v24 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v103 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v103 - v30;
  static SystemInfo.lockState.getter(v29);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v28, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v24);
  v32 = sub_100006C64((unint64_t *)&unk_1010F4700, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&aBlock, v24, v32);
  dispatch thunk of RawRepresentable.rawValue.getter(&v130, v24, v32);
  v33 = aBlock;
  v34 = (void **)v130;
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v28, v24);
  v36 = ((uint64_t (*)(char *, uint64_t))v35)(v31, v24);
  if (v33 == v34)
  {
    v37 = static os_log_type_t.default.getter(v36);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7D38, "record(for uuid:) call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
    v38 = v121(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v122, 1, 1, v38);
  }
  v40 = objc_autoreleasePoolPush();
  v41 = UUID.uuidString.getter(v40);
  v43 = v42;
  URL.appendingPathComponent(_:)(v41, v42);
  swift_bridgeObjectRelease(v43);
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v44 = *(void (**)(char *, uint64_t))(v118 + 8);
  v45 = v120;
  v44(v21, v120);
  objc_autoreleasePoolPop(v40);
  v46 = v123;
  v47 = Data.init(contentsOf:options:)(v23, 0);
  if (v46)
  {
    swift_errorRelease(v46);
    v44(v23, v45);
    v49 = v121(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v122, 1, 1, v49);
  }
  v118 = v48;
  v119 = v47;
  v106 = v44;
  v50 = static os_log_type_t.debug.getter(v47);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v51 = qword_1011B7D38;
  v104 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v52 = swift_allocObject(v104, 72, 7);
  v103 = xmmword_100E22B00;
  *(_OWORD *)(v52 + 16) = xmmword_100E22B00;
  v53 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v107 = v23;
  v54 = dispatch thunk of CustomStringConvertible.description.getter(v45, v53);
  v56 = v55;
  *(_QWORD *)(v52 + 56) = &type metadata for String;
  v105 = sub_10001AA00();
  *(_QWORD *)(v52 + 64) = v105;
  *(_QWORD *)(v52 + 32) = v54;
  *(_QWORD *)(v52 + 40) = v56;
  os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, v51, "Reading from LocalStorageBacked file: %@", 40, 2, v52);
  swift_bridgeObjectRelease(v52);
  v57 = v116;
  v58 = v116 + 9;
  swift_beginAccess(v116 + 9, &aBlock, 33, 0);
  v59 = v115;
  swift_bridgeObjectRetain(v115);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57[9]);
  v130 = v57[9];
  v61 = v130;
  v57[9] = 0x8000000000000000;
  v63 = sub_100518DA0(v117, (uint64_t)v59);
  v64 = *(_QWORD *)(v61 + 16);
  v65 = (v62 & 1) == 0;
  v66 = v64 + v65;
  if (__OFADD__(v64, v65))
  {
    __break(1u);
    goto LABEL_34;
  }
  v21 = v62;
  if (*(_QWORD *)(v61 + 24) >= v66)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_37;
    while (1)
    {
LABEL_14:
      v69 = (_QWORD *)*v58;
      *v58 = v61;
      swift_bridgeObjectRelease(v69);
      v70 = (_QWORD *)*v58;
      v71 = (_QWORD *)*v58;
      if ((v21 & 1) == 0)
      {
        v70[(v63 >> 6) + 8] |= 1 << v63;
        v72 = (_QWORD *)(v70[6] + 16 * v63);
        *v72 = v117;
        v72[1] = v59;
        *(_QWORD *)(v70[7] + 8 * v63) = 0;
        v73 = v70[2];
        swift_bridgeObjectRetain(v70);
        if (__OFADD__(v73, 1))
        {
          __break(1u);
LABEL_39:
          swift_once(&qword_1010E9F80, sub_1007FA778);
LABEL_23:
          v86 = type metadata accessor for Logger(0);
          sub_10001A9E8(v86, (uint64_t)qword_1011B77E8);
          v87 = swift_bridgeObjectRetain(v45);
          v88 = Logger.logObject.getter(v87);
          v89 = static os_log_type_t.error.getter(v88);
          goto LABEL_27;
        }
        v70[2] = v73 + 1;
        v71 = v59;
      }
      swift_bridgeObjectRetain(v71);
      v74 = v70[7];
      v75 = *(_QWORD *)(v74 + 8 * v63);
      v76 = __OFADD__(v75, 1);
      v77 = v75 + 1;
      if (v76)
      {
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      *(_QWORD *)(v74 + 8 * v63) = v77;
      swift_endAccess(&aBlock);
      swift_bridgeObjectRelease(v59);
      swift_bridgeObjectRelease(v70);
      v78 = v57[8];
      v76 = __OFADD__(v78, 1);
      v79 = v78 + 1;
      if (v76)
        goto LABEL_35;
      v59 = a9;
      v21 = a10;
      v57[8] = v79;
      if (__ROR8__(0x1CAC083126E978D5 * v79 + 0x10624DD2F1A9FB8, 3) < 0x4189374BC6A7EFuLL)
      {
        v63 = sub_100888F00((uint64_t)v57);
        v45 = v80;
        v81 = v57[9];
        v82 = swift_bridgeObjectRetain(v81);
        v83 = sub_100A795F0(v82);
        v85 = v84;
        swift_bridgeObjectRelease(v81);
        if ((v85 & 1) == 0 && v83 >= 10001)
        {
          if (qword_1010E9F80 == -1)
            goto LABEL_23;
          goto LABEL_39;
        }
        if (qword_1010E9F80 != -1)
          swift_once(&qword_1010E9F80, sub_1007FA778);
        v90 = type metadata accessor for Logger(0);
        sub_10001A9E8(v90, (uint64_t)qword_1011B77E8);
        v91 = swift_bridgeObjectRetain(v45);
        v88 = Logger.logObject.getter(v91);
        v89 = static os_log_type_t.info.getter(v88);
LABEL_27:
        v92 = v89;
        if (os_log_type_enabled(v88, v89))
        {
          v93 = (uint8_t *)swift_slowAlloc(12, -1);
          v94 = (void **)swift_slowAlloc(32, -1);
          *(_DWORD *)v93 = 136446210;
          v123 = v93 + 4;
          aBlock = v94;
          swift_bridgeObjectRetain(v45);
          v130 = sub_100016940(v63, v45, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, &v131, v123, v93 + 12);
          swift_bridgeObjectRelease_n(v45, 3);
          _os_log_impl((void *)&_mh_execute_header, v88, v92, "readStatistics:\n%{public}s", v93, 0xCu);
          swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v93, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v45, 2);
        }
        v45 = v120;
        v57 = v116;
      }
      v63 = v57[3];
      v95 = *(NSObject **)(v63 + 72);
      v58 = (uint64_t *)swift_allocObject(v113, 32, 7);
      v58[2] = v114;
      v58[3] = v63;
      v128 = v59;
      v129 = v58;
      aBlock = _NSConcreteStackBlock;
      v125 = 1107296256;
      v126 = sub_10001D8B8;
      v127 = v21;
      v59 = _Block_copy(&aBlock);
      v96 = v129;
      swift_retain();
      swift_retain();
      swift_release(v96);
      dispatch_sync(v95, v59);
      _Block_release(v59);
      LOBYTE(v95) = swift_isEscapingClosureAtFileLocation(v58, "", 98, 71, 26, 1);
      swift_release(v63);
      swift_release(v58);
      if ((v95 & 1) == 0)
      {
        v97 = __chkstk_darwin(a11);
        v99 = v118;
        v98 = v119;
        *((_QWORD *)&v103 - 4) = v63;
        *((_QWORD *)&v103 - 3) = v98;
        *((_QWORD *)&v103 - 2) = v99;
        OS_dispatch_queue.sync<A>(execute:)(v97, &v103 - 3, &type metadata for Data);
        v100 = (uint64_t)aBlock;
        v101 = v125;
        v102 = objc_autoreleasePoolPush();
        sub_100A7E9E8((uint64_t)v57, v100, v101, a12, a13, a14);
        objc_autoreleasePoolPop(v102);
        v106(v107, v120);
        sub_10001BC14(v100, v101);
        return sub_10001BC14(v119, v118);
      }
LABEL_36:
      __break(1u);
LABEL_37:
      sub_100A9A654();
      v61 = v130;
    }
  }
  sub_100A865D4(v66, isUniquelyReferenced_nonNull_native);
  v61 = v130;
  v67 = sub_100518DA0(v117, (uint64_t)v59);
  if ((v21 & 1) == (v68 & 1))
  {
    v63 = v67;
    goto LABEL_14;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100A7DCA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7DDE8(a1, a2, a3, a4, type metadata accessor for OwnerPeerTrust, (uint64_t *)&unk_1010EE160, (uint64_t (*)(void))sub_100AA48FC, a5, &qword_1011117C0);
}

uint64_t sub_100A7DCE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7DDE8(a1, a2, a3, a4, type metadata accessor for MemberPeerTrust, &qword_1010EC868, (uint64_t (*)(void))sub_100AA49EC, a5, (uint64_t *)&unk_1011119B0);
}

uint64_t sub_100A7DD28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7DDE8(a1, a2, a3, a4, type metadata accessor for SharingCircleSecret, (uint64_t *)&unk_101111620, (uint64_t (*)(void))sub_100AA4848, a5, &qword_101111778);
}

uint64_t sub_100A7DD68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7DDE8(a1, a2, a3, a4, type metadata accessor for BeaconNamingRecord, (uint64_t *)&unk_101105880, (uint64_t (*)(void))sub_100AA4C34, a5, (uint64_t *)&unk_101111A80);
}

uint64_t sub_100A7DDA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return sub_100A7DDE8(a1, a2, a3, a4, type metadata accessor for SecureLocationsCachedSharingKey, &qword_10110BDD8, (uint64_t (*)(void))sub_100AA4B24, a5, (uint64_t *)&unk_101111A40);
}

uint64_t sub_100A7DDE8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t (*a5)(_QWORD)@<X5>, uint64_t *a6@<X6>, uint64_t (*a7)(void)@<X7>, uint64_t a8@<X8>, uint64_t *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, unint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  void (*v99)(char *, unint64_t);
  char *v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t (*v105)(void);
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t (*v114)(_QWORD);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117[4];
  uint64_t v118;
  uint64_t v119;

  v104 = a6;
  v105 = a7;
  v113 = a2;
  v114 = a5;
  v115 = a8;
  v108 = a4;
  v109 = a1;
  v110 = a3;
  v107 = type metadata accessor for CryptoError(0);
  v103 = *(_QWORD *)(v107 - 8);
  v9 = __chkstk_darwin(v107);
  v101 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v102 = (char *)&v96 - v12;
  __chkstk_darwin(v11);
  v106 = (char *)&v96 - v13;
  v14 = type metadata accessor for URL(0);
  v111 = *(_QWORD *)(v14 - 8);
  v112 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v96 - v18;
  v20 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v96 - v26;
  static SystemInfo.lockState.getter(v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v24, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v20);
  v28 = sub_100006C64((unint64_t *)&unk_1010F4700, 255, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v117, v20, v28);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v20, v28);
  v29 = v117[0];
  v30 = v118;
  v31 = *(void (**)(char *, uint64_t))(v21 + 8);
  v31(v24, v20);
  v32 = ((uint64_t (*)(char *, uint64_t))v31)(v27, v20);
  if (v29 == v30)
  {
    v33 = static os_log_type_t.default.getter(v32);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, qword_1011B7D38, "record(for uuid:) call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
    v34 = v114(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v115, 1, 1, v34);
  }
  v36 = objc_autoreleasePoolPush();
  v37 = UUID.uuidString.getter(v36);
  v39 = v38;
  URL.appendingPathComponent(_:)(v37, v38);
  swift_bridgeObjectRelease(v39);
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v40 = v112;
  v41 = *(void (**)(char *, unint64_t))(v111 + 8);
  v41(v17, v112);
  objc_autoreleasePoolPop(v36);
  v42 = v116;
  v43 = Data.init(contentsOf:options:)(v19, 0);
  if (v42)
  {
    swift_errorRelease(v42);
    v41(v19, v40);
    v45 = v114(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v115, 1, 1, v45);
  }
  v111 = v43;
  v113 = v44;
  v99 = v41;
  v46 = static os_log_type_t.debug.getter(v43);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v47 = qword_1011B7D38;
  v97 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v48 = swift_allocObject(v97, 72, 7);
  v96 = xmmword_100E22B00;
  *(_OWORD *)(v48 + 16) = xmmword_100E22B00;
  v49 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v100 = v19;
  v50 = dispatch thunk of CustomStringConvertible.description.getter(v40, v49);
  v52 = v51;
  *(_QWORD *)(v48 + 56) = &type metadata for String;
  v98 = sub_10001AA00();
  *(_QWORD *)(v48 + 64) = v98;
  *(_QWORD *)(v48 + 32) = v50;
  *(_QWORD *)(v48 + 40) = v52;
  os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "Reading from LocalStorageBacked file: %@", 40, 2, v48);
  swift_bridgeObjectRelease(v48);
  v53 = v109;
  v54 = (uint64_t *)(v109 + 72);
  swift_beginAccess(v109 + 72, v117, 33, 0);
  v55 = v108;
  swift_bridgeObjectRetain(v108);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v53 + 72));
  v118 = *(_QWORD *)(v53 + 72);
  v57 = v118;
  *(_QWORD *)(v53 + 72) = 0x8000000000000000;
  v59 = sub_100518DA0(v110, v55);
  v60 = *(_QWORD *)(v57 + 16);
  v61 = (v58 & 1) == 0;
  v62 = v60 + v61;
  if (__OFADD__(v60, v61))
  {
    __break(1u);
    goto LABEL_33;
  }
  LOBYTE(v17) = v58;
  if (*(_QWORD *)(v57 + 24) < v62)
  {
    sub_100A865D4(v62, isUniquelyReferenced_nonNull_native);
    v57 = v118;
    v63 = sub_100518DA0(v110, v55);
    if ((v17 & 1) == (v64 & 1))
    {
      v59 = v63;
      goto LABEL_14;
    }
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_35;
  while (1)
  {
LABEL_14:
    v65 = (_QWORD *)*v54;
    *v54 = v57;
    swift_bridgeObjectRelease(v65);
    v66 = (_QWORD *)*v54;
    v67 = *v54;
    if ((v17 & 1) == 0)
    {
      v66[(v59 >> 6) + 8] |= 1 << v59;
      v68 = (_QWORD *)(v66[6] + 16 * v59);
      *v68 = v110;
      v68[1] = v55;
      *(_QWORD *)(v66[7] + 8 * v59) = 0;
      v69 = v66[2];
      swift_bridgeObjectRetain(v66);
      if (__OFADD__(v69, 1))
      {
        __break(1u);
        goto LABEL_37;
      }
      v66[2] = v69 + 1;
      v67 = v55;
    }
    swift_bridgeObjectRetain(v67);
    v70 = v66[7];
    v71 = *(_QWORD *)(v70 + 8 * v59);
    v72 = __OFADD__(v71, 1);
    v73 = v71 + 1;
    if (v72)
    {
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    *(_QWORD *)(v70 + 8 * v59) = v73;
    swift_endAccess(v117);
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v66);
    v74 = *(_QWORD *)(v53 + 64);
    v72 = __OFADD__(v74, 1);
    v75 = v74 + 1;
    LOBYTE(v17) = v115;
    if (!v72)
      break;
LABEL_34:
    __break(1u);
LABEL_35:
    sub_100A9A654();
    v57 = v118;
  }
  *(_QWORD *)(v53 + 64) = v75;
  if (__ROR8__(0x1CAC083126E978D5 * v75 + 0x10624DD2F1A9FB8, 3) >= 0x4189374BC6A7EFuLL)
    goto LABEL_31;
  v55 = v40;
  v59 = sub_100888F00(v53);
  v40 = v76;
  v77 = *(_QWORD *)(v53 + 72);
  v78 = swift_bridgeObjectRetain(v77);
  v79 = sub_100A795F0(v78);
  v81 = v80;
  swift_bridgeObjectRelease(v77);
  if ((v81 & 1) == 0 && v79 >= 10001)
  {
    if (qword_1010E9F80 == -1)
    {
LABEL_23:
      v82 = type metadata accessor for Logger(0);
      sub_10001A9E8(v82, (uint64_t)qword_1011B77E8);
      v83 = swift_bridgeObjectRetain(v40);
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.error.getter(v84);
      goto LABEL_27;
    }
LABEL_37:
    swift_once(&qword_1010E9F80, sub_1007FA778);
    goto LABEL_23;
  }
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v86 = type metadata accessor for Logger(0);
  sub_10001A9E8(v86, (uint64_t)qword_1011B77E8);
  v87 = swift_bridgeObjectRetain(v40);
  v84 = Logger.logObject.getter(v87);
  v85 = static os_log_type_t.info.getter(v84);
LABEL_27:
  v88 = v85;
  if (os_log_type_enabled(v84, v85))
  {
    v89 = (uint8_t *)swift_slowAlloc(12, -1);
    v90 = swift_slowAlloc(32, -1);
    v117[0] = v90;
    *(_DWORD *)v89 = 136446210;
    swift_bridgeObjectRetain(v40);
    v118 = sub_100016940(v59, v40, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v89 + 4, v89 + 12);
    swift_bridgeObjectRelease_n(v40, 3);
    _os_log_impl((void *)&_mh_execute_header, v84, v88, "readStatistics:\n%{public}s", v89, 0xCu);
    swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
    v91 = v90;
    v53 = v109;
    swift_slowDealloc(v91, -1, -1);
    swift_slowDealloc(v89, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v40, 2);
  }
  v40 = v55;
LABEL_31:
  v92 = sub_100C5471C(v111, v113);
  v94 = v93;
  v95 = objc_autoreleasePoolPush();
  sub_100A7E9E8(v53, v92, v94, v104, v105, a9);
  objc_autoreleasePoolPop(v95);
  v99(v100, v40);
  sub_10001BC14(v92, v94);
  return sub_10001BC14(v111, v113);
}

uint64_t sub_100A7E9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t *a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v11 = sub_10001A9A8(a4);
  v12 = a5();
  result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v11, a2, a3, v11, v12);
  if (v6)
  {
    v14 = static os_log_type_t.error.getter(result);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v15 = qword_1011B7D38;
    v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v17 = swift_allocObject(v16, 112, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
    v27 = v11;
    v18 = sub_10001A9A8(a6);
    v19 = String.init<A>(describing:)(&v27, v18);
    v21 = v20;
    *(_QWORD *)(v17 + 56) = &type metadata for String;
    v22 = sub_10001AA00();
    *(_QWORD *)(v17 + 64) = v22;
    *(_QWORD *)(v17 + 32) = v19;
    *(_QWORD *)(v17 + 40) = v21;
    v27 = v6;
    swift_errorRetain(v6);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v24 = String.init<A>(describing:)(&v27, v23);
    *(_QWORD *)(v17 + 96) = &type metadata for String;
    *(_QWORD *)(v17 + 104) = v22;
    *(_QWORD *)(v17 + 72) = v24;
    *(_QWORD *)(v17 + 80) = v25;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Error decoding %@: %@", 21, 2, v17);
    v26 = swift_bridgeObjectRelease(v17);
    return swift_willThrow(v26);
  }
  return result;
}

uint64_t sub_100A7EB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_10001A9A8(&qword_1010FC1C0);
  v7 = sub_100AA4F04((unint64_t *)&unk_101111D60, &qword_1010FC1C0, (uint64_t (*)(void))sub_1004F10A8);
  result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a2, a3, v6, v7);
  if (v3)
  {
    v9 = static os_log_type_t.error.getter(result);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v10 = qword_1011B7D38;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
    v22 = v6;
    v13 = sub_10001A9A8(&qword_101111D70);
    v14 = String.init<A>(describing:)(&v22, v13);
    v16 = v15;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    v17 = sub_10001AA00();
    *(_QWORD *)(v12 + 64) = v17;
    *(_QWORD *)(v12 + 32) = v14;
    *(_QWORD *)(v12 + 40) = v16;
    v22 = v3;
    swift_errorRetain(v3);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v19 = String.init<A>(describing:)(&v22, v18);
    *(_QWORD *)(v12 + 96) = &type metadata for String;
    *(_QWORD *)(v12 + 104) = v17;
    *(_QWORD *)(v12 + 72) = v19;
    *(_QWORD *)(v12 + 80) = v20;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Error decoding %@: %@", 21, 2, v12);
    v21 = swift_bridgeObjectRelease();
    return swift_willThrow(v21);
  }
  return result;
}

uint64_t sub_100A7ED28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = sub_10001A9A8(&qword_101111B00);
  v7 = sub_100AA4F04(&qword_101111B08, &qword_101111B00, (uint64_t (*)(void))sub_100AA4F68);
  result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v6, a2, a3, v6, v7);
  if (v3)
  {
    v9 = static os_log_type_t.error.getter(result);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v10 = qword_1011B7D38;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 112, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B10;
    v22 = v6;
    v13 = sub_10001A9A8(&qword_101111B18);
    v14 = String.init<A>(describing:)(&v22, v13);
    v16 = v15;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    v17 = sub_10001AA00();
    *(_QWORD *)(v12 + 64) = v17;
    *(_QWORD *)(v12 + 32) = v14;
    *(_QWORD *)(v12 + 40) = v16;
    v22 = v3;
    swift_errorRetain(v3);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v19 = String.init<A>(describing:)(&v22, v18);
    *(_QWORD *)(v12 + 96) = &type metadata for String;
    *(_QWORD *)(v12 + 104) = v17;
    *(_QWORD *)(v12 + 72) = v19;
    *(_QWORD *)(v12 + 80) = v20;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Error decoding %@: %@", 21, 2, v12);
    v21 = swift_bridgeObjectRelease();
    return swift_willThrow(v21);
  }
  return result;
}

uint64_t sub_100A7EED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100A7EF3C(a1, a2, a3, type metadata accessor for SharedBeaconRecord, &qword_1010FA8A0, (uint64_t)&unk_100E6F504, &qword_1010ECA78);
}

uint64_t sub_100A7EF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100A7EF3C(a1, a2, a3, type metadata accessor for OwnedBeaconRecord, (unint64_t *)&unk_10110EE50, (uint64_t)&unk_100E57A50, (uint64_t *)&unk_101111C40);
}

uint64_t sub_100A7EF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v13 = a4(0);
  v14 = sub_100006C64(a5, 255, a4, a6);
  result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v13, a2, a3, v13, v14);
  if (v7)
  {
    v16 = static os_log_type_t.error.getter(result);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v17 = qword_1011B7D38;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 112, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B10;
    v30 = v13;
    v20 = sub_10001A9A8(a7);
    v21 = String.init<A>(describing:)(&v30, v20);
    v23 = v22;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    v24 = sub_10001AA00();
    *(_QWORD *)(v19 + 64) = v24;
    *(_QWORD *)(v19 + 32) = v21;
    *(_QWORD *)(v19 + 40) = v23;
    v30 = v7;
    swift_errorRetain(v7);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v26 = String.init<A>(describing:)(&v30, v25);
    *(_QWORD *)(v19 + 96) = &type metadata for String;
    *(_QWORD *)(v19 + 104) = v24;
    *(_QWORD *)(v19 + 72) = v26;
    *(_QWORD *)(v19 + 80) = v27;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Error decoding %@: %@", 21, 2, v19);
    v28 = swift_bridgeObjectRelease();
    return swift_willThrow(v28);
  }
  return result;
}

uint64_t sub_100A7F0F0@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, (uint64_t *)&unk_1010F47C0, type metadata accessor for OwnedBeaconRecord, &qword_101111C70, (uint64_t *)&unk_101111C40, (uint64_t)sub_100AA5538, &qword_10110AC18, a3);
}

uint64_t sub_100A7F134@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, (uint64_t *)&unk_1010EE180, type metadata accessor for SharedBeaconRecord, (uint64_t *)&unk_101111C60, &qword_1010ECA78, (uint64_t)sub_100AA54BC, &qword_10110B4B0, a3);
}

uint64_t sub_100A7F178@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, (uint64_t *)&unk_101111440, type metadata accessor for MemberSharingCircle, (uint64_t *)&unk_1011057F0, &qword_10110B4A0, (uint64_t)sub_100A83C7C, &qword_10110B460, a3);
}

uint64_t sub_100A7F1BC@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, &qword_1010F7608, type metadata accessor for OwnedDeviceKeyRecord, &qword_1010FD140, &qword_1011114D0, (uint64_t)sub_100AA08E8, (uint64_t *)&unk_1011114C0, a3);
}

uint64_t sub_100A7F200@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, &qword_1010EE0E0, type metadata accessor for OwnerSharingCircle, (uint64_t *)&unk_1011115B0, &qword_1011115D0, (uint64_t)sub_100AA4624, (uint64_t *)&unk_1011115C0, a3);
}

uint64_t sub_100A7F244@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, (uint64_t *)&unk_1010EE160, type metadata accessor for OwnerPeerTrust, (uint64_t *)&unk_101111780, &qword_1010ECA60, (uint64_t)sub_100AA48C8, (uint64_t *)&unk_1011117A0, a3);
}

uint64_t sub_100A7F288@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, &qword_1010EC868, type metadata accessor for MemberPeerTrust, (uint64_t *)&unk_101111970, &qword_1010ECA68, (uint64_t)sub_100AA49B8, (uint64_t *)&unk_101111990, a3);
}

uint64_t sub_100A7F2CC@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100A7F310(a1, a2, (uint64_t *)&unk_101111620, type metadata accessor for SharingCircleSecret, &qword_10110ABA8, &qword_101111760, (uint64_t)sub_100AA47D8, &qword_10110B478, a3);
}

uint64_t sub_100A7F310@<X0>(void (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t (*v51)(char *, void (*)(_QWORD), void *);
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, void *);
  void *v107;
  void (*v108)(char *, void *);
  void (*v109)(char *, uint64_t, void *);
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(_QWORD);
  uint64_t v144;
  uint64_t *v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  void (*v153)(char *, void *);
  uint64_t v154;
  void *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(char *, void *);
  char *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t (*v170)(_QWORD);
  char *v171;
  char *v172;
  char *v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  void (*v188)(_QWORD);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;

  v183 = a8;
  v184 = (char *)a9;
  v177 = a7;
  v174 = a5;
  v175 = a6;
  v179 = a2;
  v12 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v12);
  v14 = (char *)&v165 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = a3;
  v176 = sub_10001A9A8(a3);
  __chkstk_darwin(v176);
  v178 = (char *)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = a4;
  v16 = a4(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v168 = (uint64_t)&v165 - v18;
  v19 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v19);
  v21 = (char *)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UUID(0);
  v180 = *(_QWORD *)(v22 - 8);
  v181 = v22;
  v23 = __chkstk_darwin(v22);
  v171 = (char *)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v182 = (char *)&v165 - v25;
  v26 = (_QWORD *)type metadata accessor for URL(0);
  v186 = *(v26 - 1);
  v187 = v26;
  v27 = __chkstk_darwin(v26);
  v172 = (char *)&v165 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  v173 = (char *)&v165 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v165 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v165 - v35;
  v37 = __chkstk_darwin(v34);
  v39 = (char *)&v165 - v38;
  v40 = __chkstk_darwin(v37);
  v42 = (char *)&v165 - v41;
  v188 = a1;
  v43 = URL.pathExtension.getter(v40);
  v45 = v44;
  if (v43 == 0xD000000000000010 && v44 == 0x8000000100ECC9E0)
  {
    swift_bridgeObjectRelease(0x8000000100ECC9E0);
LABEL_5:
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v48 = type metadata accessor for Logger(0);
    sub_10001A9E8(v48, (uint64_t)qword_1011B77E8);
    v49 = v186;
    v50 = v187;
    v51 = *(uint64_t (**)(char *, void (*)(_QWORD), void *))(v186 + 16);
    v52 = v51(v42, v188, v187);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.default.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc(22, -1);
      v56 = swift_slowAlloc(32, -1);
      v191 = v56;
      *(_DWORD *)v55 = 141558275;
      v189 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2081;
      v57 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v187, v57);
      v60 = v59;
      v189 = sub_100016940(v58, v59, &v191);
      v49 = v186;
      v50 = v187;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease(v60);
      (*(void (**)(char *, void *))(v49 + 8))(v42, v50);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Tombstoned file extension. Skipping file %{private,mask.hash}s", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      (*(void (**)(char *, void *))(v49 + 8))(v42, v50);
    }

    v61 = (uint64_t)v184;
    v62 = v188;
    v51(v184, v188, v50);
    v63 = v61 + *(int *)(type metadata accessor for BeaconStoreFileRecord(0) + 20);
    v51((char *)v63, v62, v50);
    (*(void (**)(uint64_t, _QWORD, uint64_t, void *))(v49 + 56))(v63, 0, 1, v50);
    v64 = sub_10001A9A8(v183);
    v65 = v61;
    v66 = v64;
    v67 = 1;
    goto LABEL_11;
  }
  v167 = v14;
  v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, 0xD000000000000010, 0x8000000100ECC9E0, 0);
  v47 = swift_bridgeObjectRelease(v45);
  if ((v46 & 1) != 0)
    goto LABEL_5;
  v73 = URL.pathExtension.getter(v47);
  v75 = v74;
  if (v73 == 0x64726F636572 && v74 == 0xE600000000000000)
  {
    v76 = swift_bridgeObjectRelease(0xE600000000000000);
  }
  else
  {
    v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v74, 0x64726F636572, 0xE600000000000000, 0);
    v76 = swift_bridgeObjectRelease(v75);
    if ((v77 & 1) == 0)
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v129 = type metadata accessor for Logger(0);
      sub_10001A9E8(v129, (uint64_t)qword_1011B77E8);
      v130 = v186;
      v131 = v187;
      v132 = (*(uint64_t (**)(char *, void (*)(_QWORD), void *))(v186 + 16))(v36, v188, v187);
      v133 = Logger.logObject.getter(v132);
      v134 = static os_log_type_t.error.getter(v133);
      if (os_log_type_enabled(v133, v134))
      {
        v135 = swift_slowAlloc(22, -1);
        v136 = swift_slowAlloc(32, -1);
        v191 = v136;
        *(_DWORD *)v135 = 141558275;
        v189 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v135 + 4, v135 + 12);
        *(_WORD *)(v135 + 12) = 2081;
        v137 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v138 = dispatch thunk of CustomStringConvertible.description.getter(v131, v137);
        v140 = v139;
        v189 = sub_100016940(v138, v139, &v191);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v135 + 14, v135 + 22);
        swift_bridgeObjectRelease(v140);
        (*(void (**)(char *, void *))(v186 + 8))(v36, v131);
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Invalid extension. Skipping file %{private,mask.hash}s", (uint8_t *)v135, 0x16u);
        swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
        v141 = (uint64_t)v184;
        swift_slowDealloc(v136, -1, -1);
        swift_slowDealloc(v135, -1, -1);

      }
      else
      {
        (*(void (**)(char *, void *))(v130 + 8))(v36, v131);

        v141 = (uint64_t)v184;
      }
      v71 = sub_10001A9A8(v183);
      v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56);
      v69 = v141;
      goto LABEL_36;
    }
  }
  v78 = URL.deletingPathExtension()(v76);
  v79 = URL.lastPathComponent.getter(v78);
  v81 = v80;
  v82 = v186;
  v83 = v187;
  v166 = *(void (**)(char *, void *))(v186 + 8);
  v166(v39, v187);
  UUID.init(uuidString:)(v79, v81);
  swift_bridgeObjectRelease(v81);
  v85 = v180;
  v84 = v181;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v180 + 48))(v21, 1, v181) == 1)
  {
    sub_100004048((uint64_t)v21, &qword_1010ED860);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v86 = type metadata accessor for Logger(0);
    sub_10001A9E8(v86, (uint64_t)qword_1011B77E8);
    v87 = v187;
    v88 = (*(uint64_t (**)(char *, void (*)(_QWORD), void *))(v186 + 16))(v33, v188, v187);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.error.getter(v89);
    if (os_log_type_enabled(v89, v90))
    {
      v91 = swift_slowAlloc(22, -1);
      v92 = swift_slowAlloc(32, -1);
      v191 = v92;
      *(_DWORD *)v91 = 141558275;
      v189 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v91 + 4, v91 + 12);
      *(_WORD *)(v91 + 12) = 2081;
      v93 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v87, v93);
      v96 = v95;
      v189 = sub_100016940(v94, v95, &v191);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v91 + 14, v91 + 22);
      swift_bridgeObjectRelease(v96);
      v166(v33, v87);
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "Invalid file identifier at URL: %{private,mask.hash}s", (uint8_t *)v91, 0x16u);
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v91, -1, -1);
    }
    else
    {
      v166(v33, v87);
    }

    v71 = sub_10001A9A8(v183);
    v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56);
    v69 = (uint64_t)v184;
LABEL_36:
    v70 = 1;
    return v68(v69, v70, 1, v71);
  }
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v182, v21, v84);
  v174 = (uint64_t *)*(int *)(sub_10001A9A8(v174) + 36);
  v97 = *(uint64_t *)((char *)v174 + v179);
  v188 = *(void (**)(_QWORD))(v82 + 16);
  v188(v39);
  swift_retain();
  v98._countAndFlagsBits = 0xD000000000000014;
  v98._object = (void *)0x8000000100ED68C0;
  prohibitAsyncContext(functionName:)(v98);
  v191 = v16;
  v99 = sub_10001A9A8(v175);
  v100 = String.init<A>(describing:)(&v191, v99);
  v102 = v101;
  v175 = (uint64_t *)objc_autoreleasePoolPush();
  __chkstk_darwin(v175);
  v103 = v182;
  *(&v165 - 6) = v97;
  *(&v165 - 5) = (uint64_t)v103;
  *(&v165 - 4) = (uint64_t)v39;
  *(&v165 - 3) = v100;
  *(&v165 - 2) = v102;
  v104 = (uint64_t)v178;
  v105 = v185;
  OS_dispatch_queue.sync<A>(execute:)(v177, &v165 - 8, v176);
  objc_autoreleasePoolPop(v175);
  swift_release(v97);
  swift_bridgeObjectRelease(v102);
  v106 = v166;
  v166(v39, v83);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v104, 1, v16) != 1)
  {
    (*(void (**)(char *, uint64_t))(v180 + 8))(v182, v181);
    v142 = v168;
    v143 = v170;
    sub_1000126EC(v104, v168, v170);
    v144 = v142;
    v61 = (uint64_t)v184;
    sub_1000126EC(v144, (uint64_t)v184, v143);
    v64 = sub_10001A9A8(v183);
    v65 = v61;
    v66 = v64;
    v67 = 0;
LABEL_11:
    swift_storeEnumTagMultiPayload(v65, v66, v67);
    v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
    v69 = v61;
    v70 = 0;
    v71 = v64;
    return v68(v69, v70, 1, v71);
  }
  v107 = v83;
  v108 = v106;
  v185 = v105;
  sub_100004048(v104, v169);
  v109 = (void (*)(char *, uint64_t, void *))v188;
  v110 = ((uint64_t (*)(char *, uint64_t, void *))v188)(v39, v179, v83);
  v111 = (uint64_t *)URL.description.getter(v110);
  v113 = v112;
  v108(v39, v83);
  v178 = v39;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v114 = type metadata accessor for Logger(0);
  sub_10001A9E8(v114, (uint64_t)qword_1011B77E8);
  v116 = v180;
  v115 = v181;
  v117 = v171;
  (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v171, v182, v181);
  v118 = swift_bridgeObjectRetain(v113);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.error.getter(v119);
  v121 = v120;
  if (os_log_type_enabled(v119, v120))
  {
    v122 = swift_slowAlloc(42, -1);
    v177 = swift_slowAlloc(64, -1);
    v191 = v177;
    *(_DWORD *)v122 = 141558787;
    v189 = 1752392040;
    v123 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v122 + 4, v122 + 12);
    *(_WORD *)(v122 + 12) = 2081;
    v175 = v111;
    LODWORD(v176) = v121;
    v124 = UUID.uuidString.getter(v123);
    v126 = v125;
    v189 = sub_100016940(v124, v125, &v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v122 + 14, v122 + 22);
    swift_bridgeObjectRelease(v126);
    v180 = *(_QWORD *)(v116 + 8);
    ((void (*)(char *, uint64_t))v180)(v117, v115);
    *(_WORD *)(v122 + 22) = 2160;
    v189 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v122 + 24, v122 + 32);
    *(_WORD *)(v122 + 32) = 2081;
    swift_bridgeObjectRetain(v113);
    v189 = sub_100016940((uint64_t)v175, v113, &v191);
    v107 = v187;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v122 + 34, v122 + 42);
    swift_bridgeObjectRelease_n(v113, 3);
    _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v176, "Could not read item %{private,mask.hash}s for records at: %{private,mask.hash}s", (uint8_t *)v122, 0x2Au);
    v127 = v177;
    swift_arrayDestroy(v177, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v127, -1, -1);
    v128 = v122;
    v109 = (void (*)(char *, uint64_t, void *))v188;
    swift_slowDealloc(v128, -1, -1);

  }
  else
  {
    v180 = *(_QWORD *)(v116 + 8);
    ((void (*)(char *, uint64_t))v180)(v117, v115);

    swift_bridgeObjectRelease_n(v113, 2);
  }
  v146 = v173;
  v145 = v174;
  v147 = v179;
  v148 = *(uint64_t *)((char *)v174 + v179);
  v109(v173, v179, v107);
  swift_retain();
  v187 = objc_autoreleasePoolPush();
  v149 = UUID.uuidString.getter(v187);
  v151 = v150;
  v152 = v172;
  URL.appendingPathComponent(_:)(v149, v150);
  swift_bridgeObjectRelease(v151);
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v153 = v166;
  v166(v152, v107);
  objc_autoreleasePoolPop(v187);
  swift_release(v148);
  v153(v146, v107);
  v154 = *(uint64_t *)((char *)v145 + v147);
  ((void (*)(char *, uint64_t, void *))v188)(v146, v147, v107);
  swift_retain();
  v155 = objc_autoreleasePoolPush();
  v156 = v182;
  v157 = UUID.uuidString.getter(v155);
  v159 = v158;
  URL.appendingPathComponent(_:)(v157, v158);
  swift_bridgeObjectRelease(v159);
  v160 = (uint64_t)v167;
  URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
  v153(v152, v107);
  objc_autoreleasePoolPop(v155);
  swift_release(v154);
  v153(v146, v107);
  ((void (*)(char *, uint64_t))v180)(v156, v181);
  v161 = v186;
  (*(void (**)(uint64_t, _QWORD, uint64_t, void *))(v186 + 56))(v160, 0, 1, v107);
  v162 = (uint64_t)v184;
  (*(void (**)(char *, char *, void *))(v161 + 32))(v184, v178, v107);
  v163 = type metadata accessor for BeaconStoreFileRecord(0);
  sub_100005CF0(v160, v162 + *(int *)(v163 + 20), &qword_1010FBA40);
  v164 = sub_10001A9A8(v183);
  swift_storeEnumTagMultiPayload(v162, v164, 1);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(v162, 0, 1, v164);
}

uint64_t sub_100A802E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  return swift_task_switch(sub_100A80300, v0, 0);
}

uint64_t sub_100A80300()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 32) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100A80378;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10007C6FC, *(_QWORD *)(v0 + 24), v3);
}

uint64_t sub_100A80378()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 32));
  swift_release();
  return swift_task_switch(sub_100A803D4, v1, 0);
}

uint64_t sub_100A803D4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100A803DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v5 = type metadata accessor for BeaconKeyManager(0);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v3, v4, (char *)&type metadata for () + 8, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_100A80454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_100A8046C, v1, 0);
}

uint64_t sub_100A8046C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 128);
  return swift_task_switch(sub_100A8048C, 0, 0);
}

uint64_t sub_100A8048C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[4];
  v2 = v0[2];
  v3 = swift_task_alloc(32);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v4;
  *v4 = v0;
  v4[1] = sub_100A80530;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, &type metadata for () + 1);
}

uint64_t sub_100A80530()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002176D8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_10055AA5C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100A8059C(uint64_t a1, uint64_t a2)
{
  return sub_1007EEF64(a2);
}

uint64_t sub_100A805C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10080FABC();
  *a1 = result;
  return result;
}

uint64_t sub_100A805E8@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  size_t *v51;

  v51 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v3);
  v50 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_101111780);
  v49 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v48 = (uint64_t)&v42 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v45 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v42 - v17;
  v19 = sub_10001A9A8(&qword_10110ABB8);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v47 = (uint64_t)&v42 - v23;
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010E9A10 != -1)
    swift_once(&qword_1010E9A10, sub_1001EB610);
  v24 = sub_10001A9E8(v10, (uint64_t)qword_1011B6A90);
  v25 = v11;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v18, v24, v10);
  v26(v16, (uint64_t)v18, v10);
  v27 = *(int *)(v5 + 40);
  v46 = v18;
  v28 = &v8[v27];
  v42 = &v8[v27];
  v29 = type metadata accessor for DirectorySequence(0);
  v30 = v5;
  v43 = v5;
  v31 = v29;
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v32(v28, 1, 1, v29);
  v26(v8, (uint64_t)v16, v10);
  v33 = v45;
  *(_QWORD *)&v8[*(int *)(v30 + 36)] = v44;
  v26(v33, (uint64_t)v16, v10);
  swift_retain();
  v34 = (uint64_t)v50;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v33, 0, 0);
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v16, v10);
  v32((char *)v34, 0, 1, v31);
  sub_10000C778(v34, (uint64_t)v42);
  v36 = v48;
  sub_100005CF0((uint64_t)v8, v48, (uint64_t *)&unk_101111780);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v38 = v43;
  v37(v22, 1, 1, v43);
  sub_100004048((uint64_t)v22, (uint64_t *)&unk_101111790);
  sub_100005CF0(v36, (uint64_t)v22, (uint64_t *)&unk_101111780);
  v37(v22, 0, 1, v38);
  v39 = v47;
  sub_100005CF0((uint64_t)v22, v47, &qword_10110ABB8);
  v35(v46, v10);
  v40 = sub_100890DE0(v39);
  result = sub_100004048(v39, &qword_10110ABB8);
  *v51 = v40;
  return result;
}

uint64_t sub_100A80978@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  size_t *v51;

  v51 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v3);
  v50 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_101111970);
  v49 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v48 = (uint64_t)&v42 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v45 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v42 - v17;
  v19 = sub_10001A9A8(&qword_10110ABC0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v47 = (uint64_t)&v42 - v23;
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010EA170 != -1)
    swift_once(&qword_1010EA170, sub_100AB843C);
  v24 = sub_10001A9E8(v10, (uint64_t)qword_1011B7BC0);
  v25 = v11;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v18, v24, v10);
  v26(v16, (uint64_t)v18, v10);
  v27 = *(int *)(v5 + 40);
  v46 = v18;
  v28 = &v8[v27];
  v42 = &v8[v27];
  v29 = type metadata accessor for DirectorySequence(0);
  v30 = v5;
  v43 = v5;
  v31 = v29;
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v32(v28, 1, 1, v29);
  v26(v8, (uint64_t)v16, v10);
  v33 = v45;
  *(_QWORD *)&v8[*(int *)(v30 + 36)] = v44;
  v26(v33, (uint64_t)v16, v10);
  swift_retain();
  v34 = (uint64_t)v50;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v33, 0, 0);
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v16, v10);
  v32((char *)v34, 0, 1, v31);
  sub_10000C778(v34, (uint64_t)v42);
  v36 = v48;
  sub_100005CF0((uint64_t)v8, v48, (uint64_t *)&unk_101111970);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v38 = v43;
  v37(v22, 1, 1, v43);
  sub_100004048((uint64_t)v22, (uint64_t *)&unk_101111980);
  sub_100005CF0(v36, (uint64_t)v22, (uint64_t *)&unk_101111970);
  v37(v22, 0, 1, v38);
  v39 = v47;
  sub_100005CF0((uint64_t)v22, v47, &qword_10110ABC0);
  v35(v46, v10);
  v40 = sub_100891788(v39);
  result = sub_100004048(v39, &qword_10110ABC0);
  *v51 = v40;
  return result;
}

uint64_t sub_100A80D08@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1008898AC(a1, a2);
}

uint64_t sub_100A80D30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100889A50(a1, a2);
}

uint64_t sub_100A80D58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10081026C();
  *a1 = result;
  return result;
}

uint64_t sub_100A80D80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10081114C();
  *a1 = result;
  return result;
}

uint64_t sub_100A80DA8@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  size_t *v51;

  v51 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v3);
  v50 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v49 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v48 = (uint64_t)&v42 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v45 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v42 - v17;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v47 = (uint64_t)&v42 - v23;
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010EA118 != -1)
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  v24 = sub_10001A9E8(v10, (uint64_t)qword_1011B7B10);
  v25 = v11;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v18, v24, v10);
  v26(v16, (uint64_t)v18, v10);
  v27 = *(int *)(v5 + 40);
  v46 = v18;
  v28 = &v8[v27];
  v42 = &v8[v27];
  v29 = type metadata accessor for DirectorySequence(0);
  v30 = v5;
  v43 = v5;
  v31 = v29;
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v32(v28, 1, 1, v29);
  v26(v8, (uint64_t)v16, v10);
  v33 = v45;
  *(_QWORD *)&v8[*(int *)(v30 + 36)] = v44;
  v26(v33, (uint64_t)v16, v10);
  swift_retain();
  v34 = (uint64_t)v50;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v33, 0, 0);
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v16, v10);
  v32((char *)v34, 0, 1, v31);
  sub_10000C778(v34, (uint64_t)v42);
  v36 = v48;
  sub_100005CF0((uint64_t)v8, v48, (uint64_t *)&unk_1011115B0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v38 = v43;
  v37(v22, 1, 1, v43);
  sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F77C0);
  sub_100005CF0(v36, (uint64_t)v22, (uint64_t *)&unk_1011115B0);
  v37(v22, 0, 1, v38);
  v39 = v47;
  sub_100005CF0((uint64_t)v22, v47, (uint64_t *)&unk_1010F77B0);
  v35(v46, v10);
  v40 = sub_100892130(v39);
  result = sub_100004048(v39, (uint64_t *)&unk_1010F77B0);
  *v51 = v40;
  return result;
}

void sub_100A81138(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v53 = a3;
  v54 = a2;
  v55 = a4;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v52 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v51 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v50 = (uint64_t)&v43 - v11;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v48 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v43 - v19;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v49 = (uint64_t)&v43 - v25;
  v26 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010EA118 != -1)
    swift_once(&qword_1010EA118, sub_100A2ECA4);
  v27 = sub_10001A9E8(v12, (uint64_t)qword_1011B7B10);
  v46 = v13;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v28(v20, v27, v12);
  v28(v18, (uint64_t)v20, v12);
  v44 = &v10[*(int *)(v7 + 40)];
  v29 = (uint64_t)v44;
  v30 = type metadata accessor for DirectorySequence(0);
  v47 = v20;
  v31 = v7;
  v45 = v7;
  v32 = v30;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v33(v29, 1, 1, v30);
  v28(v10, (uint64_t)v18, v12);
  *(_QWORD *)&v10[*(int *)(v31 + 36)] = v26;
  v34 = v48;
  v28(v48, (uint64_t)v18, v12);
  swift_retain();
  v35 = (uint64_t)v52;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v34, 0, 0);
  v36 = *(void (**)(char *, uint64_t))(v46 + 8);
  v36(v18, v12);
  v33(v35, 0, 1, v32);
  sub_10000C778(v35, (uint64_t)v44);
  v37 = v50;
  sub_100005CF0((uint64_t)v10, v50, (uint64_t *)&unk_1011115B0);
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  v39 = v45;
  v38(v24, 1, 1, v45);
  sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010F77C0);
  sub_100005CF0(v37, (uint64_t)v24, (uint64_t *)&unk_1011115B0);
  v38(v24, 0, 1, v39);
  sub_100005CF0((uint64_t)v24, v49, (uint64_t *)&unk_1010F77B0);
  v40 = ((uint64_t (*)(char *, uint64_t))v36)(v47, v12);
  __chkstk_darwin(v40);
  v41 = v54;
  *(&v43 - 2) = v53;
  *(&v43 - 1) = v41;
  sub_100A79994(sub_100330A84, (uint64_t)(&v43 - 4));
  *v55 = v42;
}

uint64_t sub_100A814F0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100889BF4(a1, a2);
}

uint64_t sub_100A81518@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100889D98(a1, a2);
}

uint64_t sub_100A81540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a2;
  v53 = a3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v4);
  v51 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v50 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v49 = (uint64_t)&v43 - v10;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v46 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v43 - v18;
  v20 = sub_10001A9A8(&qword_1010FB1F0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v48 = (uint64_t)&v43 - v24;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010E9A98 != -1)
    swift_once(&qword_1010E9A98, sub_1001FFA50);
  v26 = sub_10001A9E8(v11, (uint64_t)qword_1011B6C00);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v19, v26, v11);
  v27(v17, (uint64_t)v19, v11);
  v28 = *(int *)(v6 + 40);
  v47 = v19;
  v29 = (uint64_t)&v9[v28];
  v30 = type metadata accessor for DirectorySequence(0);
  v44 = v12;
  v45 = v6;
  v31 = v6;
  v32 = v30;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v33(v29, 1, 1, v30);
  v27(v9, (uint64_t)v17, v11);
  *(_QWORD *)&v9[*(int *)(v31 + 36)] = v25;
  v34 = v46;
  v27(v46, (uint64_t)v17, v11);
  swift_retain();
  v35 = (uint64_t)v51;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v34, 0, 0);
  v36 = *(void (**)(char *, uint64_t))(v44 + 8);
  v36(v17, v11);
  v33(v35, 0, 1, v32);
  sub_10000C778(v35, v29);
  v37 = v49;
  sub_100005CF0((uint64_t)v9, v49, (uint64_t *)&unk_1011057F0);
  v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56);
  v39 = v45;
  v38(v23, 1, 1, v45);
  sub_100004048((uint64_t)v23, &qword_101105800);
  sub_100005CF0(v37, (uint64_t)v23, (uint64_t *)&unk_1011057F0);
  v38(v23, 0, 1, v39);
  v40 = v48;
  sub_100005CF0((uint64_t)v23, v48, &qword_1010FB1F0);
  v41 = ((uint64_t (*)(char *, uint64_t))v36)(v47, v11);
  __chkstk_darwin(v41);
  *(&v43 - 2) = v52;
  sub_100A78800(sub_100A83B8C, (uint64_t)(&v43 - 4), v53);
  return sub_100004048(v40, &qword_1010FB1F0);
}

void sub_100A818F8(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;

  v50 = a2;
  v51 = a3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v4);
  v49 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v48 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v47 = (uint64_t)&v41 - v10;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v45 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v41 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v41 - v18;
  v20 = sub_10001A9A8(&qword_1010FB1F0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v46 = (uint64_t)&v41 - v24;
  v25 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010E9A98 != -1)
    swift_once(&qword_1010E9A98, sub_1001FFA50);
  v26 = sub_10001A9E8(v11, (uint64_t)qword_1011B6C00);
  v43 = v12;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v27(v19, v26, v11);
  v27(v17, (uint64_t)v19, v11);
  v41 = &v9[*(int *)(v6 + 40)];
  v28 = (uint64_t)v41;
  v29 = type metadata accessor for DirectorySequence(0);
  v44 = v19;
  v30 = v6;
  v42 = v6;
  v31 = v29;
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v32(v28, 1, 1, v29);
  v27(v9, (uint64_t)v17, v11);
  *(_QWORD *)&v9[*(int *)(v30 + 36)] = v25;
  v33 = v45;
  v27(v45, (uint64_t)v17, v11);
  swift_retain();
  v34 = (uint64_t)v49;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v33, 0, 0);
  v35 = *(void (**)(char *, uint64_t))(v43 + 8);
  v35(v17, v11);
  v32(v34, 0, 1, v31);
  sub_10000C778(v34, (uint64_t)v41);
  v36 = v47;
  sub_100005CF0((uint64_t)v9, v47, (uint64_t *)&unk_1011057F0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
  v38 = v42;
  v37(v23, 1, 1, v42);
  sub_100004048((uint64_t)v23, &qword_101105800);
  sub_100005CF0(v36, (uint64_t)v23, (uint64_t *)&unk_1011057F0);
  v37(v23, 0, 1, v38);
  sub_100005CF0((uint64_t)v23, v46, &qword_1010FB1F0);
  v39 = ((uint64_t (*)(char *, uint64_t))v35)(v44, v11);
  __chkstk_darwin(v39);
  *(&v41 - 2) = (char *)v50;
  sub_100A7A30C(sub_100425B14, (uint64_t)(&v41 - 4));
  *v51 = v40;
}

void sub_100A81CA8(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  sub_100816EA4(a1, a2, a3, a4);
}

uint64_t sub_100A81CDC@<X0>(uint64_t a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  uint64_t result;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  size_t *v53;

  v53 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v3);
  v52 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_10110ABA8);
  v51 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v50 = (uint64_t)&v44 - v9;
  v10 = type metadata accessor for URL(0);
  v48 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v46 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v44 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v44 - v16;
  v18 = sub_10001A9A8((uint64_t *)&unk_101111600);
  v19 = __chkstk_darwin(v18);
  v47 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v49 = (uint64_t)&v44 - v21;
  v22 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010EA0F0 != -1)
    swift_once(&qword_1010EA0F0, sub_1009AC81C);
  v23 = sub_10001A9E8(v10, (uint64_t)qword_1011B7AC8);
  v24 = UUID.uuidString.getter(v23);
  URL.appendingPathComponent(_:isDirectory:)(v24, v25, 1);
  swift_bridgeObjectRelease();
  v26 = v48;
  v27 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v27(v15, v17, v10);
  v44 = &v8[*(int *)(v5 + 40)];
  v28 = (uint64_t)v44;
  v29 = type metadata accessor for DirectorySequence(0);
  v30 = *(_QWORD *)(v29 - 8);
  v45 = v17;
  v31 = v5;
  v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
  v32(v28, 1, 1, v29);
  v27(v8, v15, v10);
  *(_QWORD *)&v8[*(int *)(v31 + 36)] = v22;
  v33 = v46;
  v27(v46, v15, v10);
  swift_retain();
  v34 = (uint64_t)v52;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v33, 0, 0);
  v35 = *(void (**)(char *, uint64_t))(v26 + 8);
  v35(v15, v10);
  v32(v34, 0, 1, v29);
  sub_10000C778(v34, (uint64_t)v44);
  v36 = v50;
  sub_100005CF0((uint64_t)v8, v50, &qword_10110ABA8);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56);
  v38 = (uint64_t)v47;
  v37(v47, 1, 1, v31);
  sub_100004048(v38, &qword_10110ABB0);
  sub_100005CF0(v36, v38, &qword_10110ABA8);
  v37((char *)v38, 0, 1, v31);
  v39 = v49;
  sub_100005CF0(v38, v49, (uint64_t *)&unk_101111600);
  v35(v45, v10);
  v40 = sub_10001A9A8((uint64_t *)&unk_101111610);
  v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  sub_100005CF0(v39, v41 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v41 + 16), (uint64_t *)&unk_101111600);
  v42 = sub_100892AD8(v41 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v41 + 16));
  swift_setDeallocating(v41);
  sub_100004048(v41 + *(_QWORD *)(class metadata base offset for _SequenceBox + *(_QWORD *)v41 + 16), (uint64_t *)&unk_101111600);
  result = swift_deallocClassInstance(v41, *(unsigned int *)(*(_QWORD *)v41 + 48), *(unsigned __int16 *)(*(_QWORD *)v41 + 52));
  *v53 = v42;
  return result;
}

uint64_t sub_100A82108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;

  v60 = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v59 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_10110ABA8);
  v58 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v57 = (uint64_t)&v48 - v11;
  v12 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v52 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v48 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v48 - v18;
  v20 = sub_10001A9A8((uint64_t *)&unk_101111600);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v56 = (uint64_t)&v48 - v24;
  v51 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010EA0F0 != -1)
    swift_once(&qword_1010EA0F0, sub_1009AC81C);
  v25 = sub_10001A9E8(v12, (uint64_t)qword_1011B7AC8);
  v26 = UUID.uuidString.getter(v25);
  v55 = a2;
  URL.appendingPathComponent(_:isDirectory:)(v26, v27, 1);
  swift_bridgeObjectRelease();
  v28 = v12;
  v29 = v54;
  v30 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v30(v17, v19, v28);
  v49 = &v10[*(int *)(v7 + 40)];
  v31 = (uint64_t)v49;
  v32 = type metadata accessor for DirectorySequence(0);
  v33 = *(_QWORD *)(v32 - 8);
  v53 = v19;
  v34 = v7;
  v50 = v7;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56);
  v35(v31, 1, 1, v32);
  v30(v10, v17, v28);
  v36 = v52;
  *(_QWORD *)&v10[*(int *)(v34 + 36)] = v51;
  v30(v36, v17, v28);
  swift_retain();
  v37 = (uint64_t)v59;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v36, 0, 0);
  v38 = *(void (**)(char *, uint64_t))(v29 + 8);
  v38(v17, v28);
  v35(v37, 0, 1, v32);
  sub_10000C778(v37, (uint64_t)v49);
  v39 = v57;
  sub_100005CF0((uint64_t)v10, v57, &qword_10110ABA8);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
  v41 = v50;
  v40(v23, 1, 1, v50);
  sub_100004048((uint64_t)v23, &qword_10110ABB0);
  sub_100005CF0(v39, (uint64_t)v23, &qword_10110ABA8);
  v40(v23, 0, 1, v41);
  v42 = v56;
  sub_100005CF0((uint64_t)v23, v56, (uint64_t *)&unk_101111600);
  v38(v53, v28);
  v43 = sub_10001A9A8((uint64_t *)&unk_101111610);
  v44 = (_QWORD *)swift_allocObject(v43, *(unsigned int *)(v43 + 48), *(unsigned __int16 *)(v43 + 52));
  v45 = sub_100005CF0(v42, (uint64_t)v44 + *(_QWORD *)(class metadata base offset for _SequenceBox + *v44 + 16), (uint64_t *)&unk_101111600);
  __chkstk_darwin(v45);
  *(&v48 - 2) = v55;
  v46 = sub_100A773E4((void (*)(char *))sub_100AA4730, (uint64_t)(&v48 - 4));
  result = swift_release();
  *v60 = v46;
  return result;
}

_QWORD *sub_100A8253C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_100889F3C();
  *a1 = result;
  return result;
}

uint64_t sub_100A82568@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10081234C(a1, a2);
}

size_t sub_100A8258C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  size_t result;
  uint64_t v8;

  v4 = (int *)sub_10001A9A8((uint64_t *)&unk_101109120);
  v5 = v4[20];
  v6 = v4[24];
  result = sub_1008135AC(a2, a2 + v4[12], a2 + v4[16], a1);
  *(_QWORD *)(a2 + v5) = result;
  *(_QWORD *)(a2 + v6) = v8;
  return result;
}

size_t sub_100A825FC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t result;
  uint64_t v10;

  v6 = sub_10001A9A8((uint64_t *)&unk_1011117D0);
  v7 = *(int *)(v6 + 48);
  v8 = *(int *)(v6 + 64);
  result = sub_100814198(a3, a1, a2);
  *(_QWORD *)(a3 + v7) = result;
  *(_QWORD *)(a3 + v8) = v10;
  return result;
}

char *sub_100A8266C@<X0>(uint64_t a1@<X1>, char **a2@<X8>)
{
  char *result;

  result = sub_100814F80(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100A82698(uint64_t a1, _QWORD *a2)
{
  return sub_100815DC4(a2);
}

uint64_t sub_100A826BC()
{
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
}

_QWORD *sub_100A82710@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_10081CEB8();
  *a1 = result;
  return result;
}

char *sub_100A82738@<X0>(char **a1@<X8>)
{
  char *result;

  result = sub_1000181C8();
  *a1 = result;
  return result;
}

uint64_t sub_100A82760@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10080B648(a1, a2);
}

uint64_t sub_100A82784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100A827EC, v2, 0);
}

uint64_t sub_100A827EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010A7B08, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  *v10 = v0;
  v10[1] = sub_10072881C;
  return unsafeBlocking<A>(_:)(v0[2], sub_100AA4AB8, v8, v11);
}

uint64_t sub_100A828D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10080B950(a1, a2);
}

uint64_t sub_100A828F4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10080CD54(a1, a2);
}

uint64_t sub_100A82918@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_100A83A84(a1, (uint64_t (*)(uint64_t))sub_10088A6EC, a2);
}

uint64_t sub_100A82924(uint64_t a1, uint64_t a2)
{
  return sub_100A8354C(a1, a2, (uint64_t *)&unk_101105880, (uint64_t)sub_10029183C);
}

_QWORD *sub_100A82938@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_10088AE30();
  *a1 = result;
  return result;
}

uint64_t sub_100A82964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100A829CC, v2, 0);
}

uint64_t sub_100A829CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010A7AE0, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  v11 = sub_10001A9A8(&qword_1010F7AE0);
  *v10 = v0;
  v10[1] = sub_10072881C;
  return unsafeBlocking<A>(_:)(v0[2], sub_100AA4A98, v8, v11);
}

uint64_t sub_100A82AB0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10081AECC(a1, a2);
}

_QWORD *sub_100A82AD4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_100889864();
  *a1 = result;
  return result;
}

uint64_t sub_100A82B00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v4 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1008202EC(a1, (uint64_t)v6);
  v7 = sub_10001A9A8(&qword_101102F80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_101102F70);
    v8 = type metadata accessor for BeaconStatus(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a2, 1, 1, v8);
  }
  else
  {
    sub_1000126EC((uint64_t)v6, a2, type metadata accessor for BeaconStatus);
    v10 = type metadata accessor for BeaconStatus(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a2, 0, 1, v10);
  }
}

uint64_t sub_100A82C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  _BYTE v15[16];

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010EA1B8 != -1)
    swift_once(&qword_1010EA1B8, sub_100AFC4C0);
  v11 = sub_10001A9E8(v6, (uint64_t)qword_1011B7C40);
  v12 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  __chkstk_darwin(v12);
  *(_QWORD *)&v15[-32] = v10;
  *(_QWORD *)&v15[-24] = a2;
  *(_QWORD *)&v15[-16] = v9;
  OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v15[-48], &type metadata for Bool);
  v13 = v15[15];
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v13;
  return result;
}

uint64_t sub_100A82D48(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(a1 + 128);
  v7 = a4[3];
  v8 = a4[4];
  v9 = sub_10001AA44(a4, v7);
  return sub_100858570(a2, a3, (uint64_t)v9, (uint64_t)_swiftEmptyArrayStorage, v6, v7, v8);
}

uint64_t sub_100A82DAC(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  type metadata accessor for Transaction(0);
  swift_retain(v1);
  static Transaction.asyncTask(name:block:)("UpdateBeaconStatusFromObservationStore", 38, 2, &unk_10110AC30, v1);
  return swift_release(v1);
}

uint64_t sub_100A82E00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1008259D0(a1, a2);
}

uint64_t sub_100A82E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100801BA0(a2, a3, a4);
}

_QWORD *sub_100A82E50@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_10080D208();
  *a1 = result;
  return result;
}

_QWORD *sub_100A82E78@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_10081BF2C();
  *a1 = result;
  return result;
}

uint64_t sub_100A82EA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1008188D4(a1, a2);
}

uint64_t sub_100A82EC4@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_10081CA20(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100A82EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[15];

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010E99F8 != -1)
    swift_once(&qword_1010E99F8, sub_1001D7F04);
  v9 = sub_10001A9E8(v4, (uint64_t)qword_1011B6A48);
  v10 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  __chkstk_darwin(v10);
  *(_QWORD *)&v12[-32] = v8;
  *(_QWORD *)&v12[-24] = a2;
  *(_QWORD *)&v12[-16] = v7;
  OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v12[-48], &type metadata for Bool);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100A83018(uint64_t a1, uint64_t a2, int a3, __int16 a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE v19[12];
  int v20;
  _BYTE v21[16];
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  char v26;
  char v27;
  __int16 v28;

  v20 = a3;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *(_QWORD *)(a1 + 128);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v16 = type metadata accessor for BeaconStatus(0);
  v17 = *(_BYTE *)(a2 + *(int *)(v16 + 20));
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, a2 + *(int *)(v16 + 24), v7);
  type metadata accessor for Transaction(0);
  v22 = v15;
  v23 = v14;
  v24 = v10;
  v25 = a2;
  v26 = v20;
  v27 = v17;
  v28 = a4 & 0x1FF;
  static Transaction.named<A>(_:with:)("searchpartyd.beaconstore.updateType18Status", 43, 2, sub_10042540C, v21);
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100A83194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100820620(a2, a3);
}

uint64_t sub_100A831BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 128);
  swift_retain();
  v11 = sub_10001A9A8(&qword_101103678);
  unsafeFromAsyncTask<A>(_:)(&v18, &unk_101111CE0, v10, v11);
  swift_release();
  v12 = *(_QWORD *)(v18 + 16);
  if (v12)
  {
    v13 = v18 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v14 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(v18);
    while (1)
    {
      sub_10005972C(v13, (uint64_t)v9, type metadata accessor for LocalFindableAccessoryRecord);
      if ((static UUID.== infix(_:_:)(v9, a2) & 1) != 0)
        break;
      sub_1000126B0((uint64_t)v9, type metadata accessor for LocalFindableAccessoryRecord);
      v13 += v14;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000126EC((uint64_t)v9, a3, type metadata accessor for LocalFindableAccessoryRecord);
    v15 = 0;
  }
  else
  {
LABEL_6:
    v15 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, v15, 1, v6);
  return swift_bridgeObjectRelease();
}

unint64_t sub_100A8332C@<X0>(_QWORD *a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t result;

  v4 = sub_10001A9A8(&qword_1010FD558);
  result = sub_100834594((uint64_t)a2 + *(int *)(v4 + 48), a1);
  *a2 = result;
  return result;
}

uint64_t sub_100A8337C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t result;

  v12 = *(_QWORD *)(a1 + 128);
  v13 = *(_QWORD *)(v12 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v14 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v12, v13, (char *)&type metadata for () + 8, v14);
  v15 = sub_1004DDE38(a2, a3, a4, a5);
  v17 = v16;
  v19 = v18;
  result = swift_release();
  if (!v6)
  {
    *(_QWORD *)a6 = v15;
    *(_QWORD *)(a6 + 8) = v17;
    *(_BYTE *)(a6 + 16) = v19;
  }
  return result;
}

uint64_t sub_100A83454@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;

  v13 = *(_QWORD *)(a1 + 128);
  v14 = *(_QWORD *)(v13 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v15 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v13, v14, (char *)&type metadata for () + 8, v15);
  v16 = a2[3];
  v17 = a2[4];
  v18 = sub_10001AA44(a2, v16);
  v19 = sub_1004E1BAC((uint64_t)v18, a3, a4, a5, a6, v23, v16, v17);
  v21 = v20;
  result = swift_release();
  *a7 = v19;
  a7[1] = v21;
  return result;
}

uint64_t sub_100A83538(uint64_t a1, uint64_t a2)
{
  return sub_100A8354C(a1, a2, &qword_1010ED860, (uint64_t)sub_100330B58);
}

uint64_t sub_100A8354C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  sub_10001A9A8(a3);
  return QueueSynchronizer.conditionalSync<A>(_:)(a4);
}

uint64_t sub_100A835B0()
{
  sub_1000181C8();
  swift_bridgeObjectRelease();
  sub_10001A9A8(&qword_1010ED860);
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100330B8C);
}

uint64_t sub_100A83628@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_100889F60(a1);
  v4 = v3[2];
  v5 = type metadata accessor for LostModeRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (v4)
  {
    sub_10005972C((uint64_t)v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2, type metadata accessor for LostModeRecord);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v7, 1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100A836C4@<X0>(uint64_t a1@<X1>, char a2@<W2>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;

  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v6 = qword_1011B7160;
  v7 = objc_autoreleasePoolPush();
  sub_10058DC14(v6, a1, 0, 0, &v11);
  v8 = (uint64_t)&a3[*(int *)(sub_10001A9A8((uint64_t *)&unk_1011002E0) + 48)];
  objc_autoreleasePoolPop(v7);
  v9 = sub_10082B1AC(v8, a1, v11, a2 & 1);
  result = swift_bridgeObjectRelease();
  *a3 = v9 & 1;
  return result;
}

uint64_t sub_100A837B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10081EDA8(a1, a2);
}

uint64_t sub_100A837D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for MACAddress(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100A8383C, v2, 0);
}

uint64_t sub_100A8383C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010A7AB8, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  *v10 = v0;
  v10[1] = sub_100726E28;
  return unsafeBlocking<A>(_:)(v0[2], sub_100AA4A78, v8, v11);
}

uint64_t sub_100A83920@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10081F5CC(a1, a2);
}

uint64_t sub_100A83944@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10081BB64(a1, a2);
}

_QWORD *sub_100A83968@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = sub_10001E350();
  *a1 = result;
  return result;
}

uint64_t sub_100A83994@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100711020(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100A839C0@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = sub_10085DA88(a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_100A839E8@<X0>(uint64_t a1@<X8>)
{
  return sub_1008892B4(a1);
}

unint64_t sub_100A83A10@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v8;
  unint64_t result;

  v8 = sub_10001A9A8(&qword_1010FD568);
  result = sub_100826274((uint64_t)a4 + *(int *)(v8 + 48), a1, a2, a3);
  *a4 = result;
  return result;
}

uint64_t sub_100A83A78@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  return sub_100A83A84(a1, (uint64_t (*)(uint64_t))sub_10088AA6C, a2);
}

uint64_t sub_100A83A84@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = a2(a1);
  *a3 = result;
  return result;
}

void sub_100A83AB4(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_10081BD08(a1);
  *a2 = v3;
}

uint64_t *sub_100A83AE0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *result;

  v4 = *(_QWORD *)(a1 + 128);
  v5 = a2[3];
  v6 = a2[4];
  v7 = sub_10001AA44(a2, v5);
  result = sub_100854C8C((uint64_t)v7, v4, v5, v6);
  *a3 = result;
  return result;
}

uint64_t sub_100A83B2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_10082AD34(a1, a2);
}

uint64_t sub_100A83B50(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64((unint64_t *)&unk_101111420, a2, (uint64_t (*)(uint64_t))type metadata accessor for BeaconStoreActor, (uint64_t)&unk_100E5A250);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100A83B8C(uint64_t a1)
{
  uint64_t v1;

  return sub_100812120(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_100A83BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1008E20AC(a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_100A83BE4@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X2>, uint64_t a3@<X3>, void (*a4)(_QWORD, _QWORD, _QWORD)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;

  v14 = sub_10001A9A8(&qword_101111E00);
  return sub_1008E2C44(a7, a7 + *(int *)(v14 + 48), a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100A83C7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7CF58(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), type metadata accessor for MemberSharingCircle, (uint64_t)&unk_1010A78D8, (uint64_t)sub_100A9A800, a1, sub_10001D850, byte_1010A78F0, (uint64_t)sub_100A9A818, (uint64_t *)&unk_101111440, (uint64_t (*)(void))sub_100A9A834, &qword_101111470);
}

uint64_t sub_100A83CF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111710);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v34 = 1 << *(_BYTE *)(v5 + 32);
    v35 = v3;
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_43;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v36);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v36)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = 8 * v21;
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v29);
      v31 = *(void **)(*(_QWORD *)(v5 + 56) + v29);
      if ((a2 & 1) == 0)
        v32 = v31;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v30);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 8 * v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v19) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v19) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A83FA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111E08);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain();
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((a2 & 1) == 0)
      swift_retain();
    Hasher.init(_seed:)(v20);
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x100A843B0);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_100A843D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  _BYTE v40[56];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111490);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v5 + 56) + 48 * v18;
    if ((v38 & 1) != 0)
    {
      sub_1006C92F8(v26, (uint64_t)v40);
    }
    else
    {
      sub_100AA08AC(v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_1006C92F8((uint64_t)v40, *(_QWORD *)(v8 + 56) + 48 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100A846F8(uint64_t a1, uint64_t a2)
{
  return sub_100A8B724(a1, a2, (uint64_t *)&unk_1011117F0);
}

uint64_t sub_100A84704(uint64_t a1, uint64_t a2)
{
  return sub_100A8510C(a1, a2, type metadata accessor for MultipartAccessoryPairingInfo, &qword_1011119C8);
}

uint64_t sub_100A84718(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  _QWORD v46[9];

  v3 = v2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(&qword_1011119E0);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v41)
              goto LABEL_36;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v43 + 72);
    v28 = *(_QWORD *)(v9 + 56) + v27 * v22;
    v29 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v22 + 8);
    v45 = *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    if ((v44 & 1) != 0)
    {
      sub_100005CF0(v28, (uint64_t)v8, (uint64_t *)&unk_1010F9890);
    }
    else
    {
      sub_10000F9B8(v28, (uint64_t)v8, (uint64_t *)&unk_1010F9890);
      sub_10001BBBC(v45, v29);
    }
    Hasher.init(_seed:)(v46);
    v30 = v45;
    sub_10001BBBC(v45, v29);
    Data.hash(into:)(v46, v30, v29);
    sub_10001BC14(v30, v29);
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v11 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      v20 = v45;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      v20 = v45;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19) = v20;
    result = sub_100005CF0((uint64_t)v8, *(_QWORD *)(v11 + 56) + v27 * v19, (uint64_t *)&unk_1010F9890);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v9 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

uint64_t sub_100A84AC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111D80);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release();
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_10010F90C((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_10010F9DC(v26, (uint64_t)&v39);
      sub_100016A30(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_10010F90C(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A84DD4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101104168);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100A850F8(uint64_t a1, uint64_t a2)
{
  return sub_100A8510C(a1, a2, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t *)&unk_1011118D0);
}

uint64_t sub_100A8510C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  _QWORD v50[9];

  v7 = v4;
  v10 = a3(0);
  v47 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A9A8(a4);
  v48 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v46 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v44 = v7;
  v45 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v22 << 6);
      goto LABEL_24;
    }
    v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v27 >= v45)
      break;
    v28 = v46;
    v29 = v46[v27];
    ++v22;
    if (!v29)
    {
      v22 = v27 + 1;
      if (v27 + 1 >= v45)
        goto LABEL_36;
      v29 = v46[v22];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v45)
        {
LABEL_36:
          swift_release(v13);
          v7 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v29 = v46[v30];
        if (!v29)
        {
          while (1)
          {
            v22 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v22 >= v45)
              goto LABEL_36;
            v29 = v46[v22];
            ++v30;
            if (v29)
              goto LABEL_23;
          }
        }
        v22 = v30;
      }
    }
LABEL_23:
    v19 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v47 + 72);
    v32 = *(_QWORD *)(v13 + 56) + v31 * v26;
    v33 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 16 * v26 + 8);
    v49 = *(_OWORD *)(*(_QWORD *)(v13 + 48) + 16 * v26);
    if ((v48 & 1) != 0)
    {
      sub_1000126EC(v32, (uint64_t)v12, a3);
    }
    else
    {
      sub_10005972C(v32, (uint64_t)v12, a3);
      sub_10001BBBC(v49, v33);
    }
    Hasher.init(_seed:)(v50);
    v34 = v49;
    sub_10001BBBC(v49, v33);
    Data.hash(into:)(v50, v34, v33);
    sub_10001BC14(v34, v33);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v15 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v20 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      v24 = v49;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      v24 = v49;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v20 + 8 * v37);
      }
      while (v41 == -1);
      v23 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_OWORD *)(*(_QWORD *)(v15 + 48) + 16 * v23) = v24;
    result = sub_1000126EC((uint64_t)v12, *(_QWORD *)(v15 + 56) + v31 * v23, a3);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release(v13);
  v7 = v44;
  v28 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v13 + 32);
  if (v42 >= 64)
    bzero(v28, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v42;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  result = swift_release(v13);
  *v7 = v15;
  return result;
}

uint64_t sub_100A854A8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  __int128 v20;
  uint64_t v21[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011115F0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_retain();
  if (v10)
  {
    v12 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v11 <= 1)
  {
    swift_release();
    v13 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v13 = (_QWORD *)(v5 + 64);
  v14 = *(_QWORD *)(v5 + 72);
  v15 = 1;
  if (v14)
    goto LABEL_20;
  v15 = 2;
  if (v11 <= 2)
    goto LABEL_24;
  v14 = *(_QWORD *)(v5 + 80);
  if (v14)
  {
LABEL_20:
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_21:
    v17 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v12);
    if ((a2 & 1) == 0)
    {
      v20 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v12);
      sub_10001BBBC(v20, *((unint64_t *)&v20 + 1));
    }
    Hasher.init(_seed:)(v21);
    __asm { BR              X8 }
  }
  v16 = 3;
  if (v11 > 3)
  {
    v14 = *(_QWORD *)(v5 + 88);
    if (v14)
    {
      v15 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v15 = v16 + 1;
      if (__OFADD__(v16, 1))
      {
        __break(1u);
        JUMPOUT(0x100A85974);
      }
      if (v15 >= v11)
        break;
      v14 = *(_QWORD *)(v5 + 64 + 8 * v15);
      ++v16;
      if (v14)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release();
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v18 = 1 << *(_BYTE *)(v5 + 32);
  if (v18 >= 64)
    bzero(v13, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v13 = -1 << v18;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_100A859AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  _QWORD v24[8];
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  int v28;
  _QWORD v29[10];

  v3 = v2;
  v6 = type metadata accessor for BookmarkMetaData(0);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(&qword_101111A00);
  v28 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  if (*(_QWORD *)(v9 + 16))
  {
    v24[0] = v3;
    v11 = 1 << *(_BYTE *)(v9 + 32);
    v12 = *(_QWORD *)(v9 + 64);
    v26 = (_QWORD *)(v9 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v25 = (unint64_t)(v11 + 63) >> 6;
    swift_retain();
    v24[6] = "primaryLocationDecryption";
    v24[7] = "rimary";
    v24[4] = "ude";
    v24[5] = "Bundle";
    v24[2] = "";
    v24[3] = "circleSharedSecret";
    v24[1] = "beaconAttributes";
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      goto LABEL_20;
    }
    if (v25 <= 1)
    {
      swift_release();
      v3 = (uint64_t *)v24[0];
      v16 = v26;
      if ((v28 & 1) == 0)
        goto LABEL_31;
      goto LABEL_27;
    }
    v16 = v26;
    v17 = v26[1];
    v18 = 1;
    if (!v17)
    {
      v18 = 2;
      if (v25 <= 2)
        goto LABEL_24;
      v17 = v26[2];
      if (!v17)
      {
        v19 = 3;
        if (v25 > 3)
        {
          v17 = v26[3];
          if (v17)
          {
            v18 = 3;
            goto LABEL_19;
          }
          while (1)
          {
            v18 = v19 + 1;
            if (__OFADD__(v19, 1))
            {
              __break(1u);
              JUMPOUT(0x100A85EF0);
            }
            if (v18 >= v25)
              break;
            v17 = v26[v18];
            ++v19;
            if (v17)
              goto LABEL_19;
          }
        }
LABEL_24:
        swift_release();
        v3 = (uint64_t *)v24[0];
        if ((v28 & 1) == 0)
          goto LABEL_31;
LABEL_27:
        v22 = 1 << *(_BYTE *)(v9 + 32);
        if (v22 >= 64)
          bzero(v16, ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v16 = -1 << v22;
        *(_QWORD *)(v9 + 16) = 0;
        goto LABEL_31;
      }
    }
LABEL_19:
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_20:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v15);
    v21 = *(_QWORD *)(v9 + 56) + *(_QWORD *)(v27 + 72) * v15;
    if ((v28 & 1) != 0)
      sub_1000126EC(v21, (uint64_t)v8, type metadata accessor for BookmarkMetaData);
    else
      sub_10005972C(v21, (uint64_t)v8, type metadata accessor for BookmarkMetaData);
    Hasher.init(_seed:)(v29);
    __asm { BR              X8 }
  }
LABEL_31:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_100A85F28(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  int v40;
  _OWORD v41[2];

  v3 = v2;
  v6 = type metadata accessor for CodingUserInfoKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(&qword_101111D18);
  v40 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v39 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v37 = v3;
  v38 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = v39;
    v25 = v39[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = v39[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v39[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v38)
              goto LABEL_36;
            v25 = v39[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v40 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      sub_10010F90C((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v22), v41);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      sub_100016A30(*(_QWORD *)(v10 + 56) + 32 * v22, (uint64_t)v41);
    }
    result = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v12 + 40), v6, &protocol witness table for CodingUserInfoKey);
    v29 = -1 << *(_BYTE *)(v12 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v17 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v17 + 8 * v31);
      }
      while (v35 == -1);
      v20 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    result = (uint64_t)sub_10010F90C(v41, (_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v20));
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = v39;
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v10 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_100A862AC(uint64_t a1, uint64_t a2)
{
  return sub_100A88E58(a1, a2, &qword_1010FB320);
}

uint64_t sub_100A862B8(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t *)&unk_101111920, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A862DC(uint64_t a1, uint64_t a2)
{
  return sub_100A95B7C(a1, a2, &qword_101111648);
}

uint64_t sub_100A862E8(uint64_t a1, uint64_t a2)
{
  return sub_100A936F8(a1, a2, type metadata accessor for CloudKitChangeSet.TombstoneInfo, &qword_101111730);
}

Swift::Int sub_100A862FC(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111520);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = v3;
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(char *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34);
      Hasher._combine(_:)(qword_100E5A2B0[v28]);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A865D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101104120);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100A868DC(uint64_t a1, uint64_t a2)
{
  return sub_100A8CE94(a1, a2, &qword_101104180);
}

uint64_t sub_100A868E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011042D8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      swift_errorRetain(v33);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A86BBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, _BYTE *, uint64_t);
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(_BYTE *, unint64_t, uint64_t);
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[4];
  int v52;
  uint64_t *v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = &v51[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v51[-v10];
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011116C0);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  if (!*(_QWORD *)(v12 + 16))
  {
    v48 = v12;
LABEL_44:
    result = swift_release(v48);
    *v3 = v13;
    return result;
  }
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = *(_QWORD *)(v12 + 64);
  v55 = (_QWORD *)(v12 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v53 = v2;
  v54 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12;
  v19 = v13 + 64;
  v58 = v18;
  result = swift_retain();
  v21 = 0;
  v52 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v56 = v22;
  v57 = v9;
  while (1)
  {
    if (v17)
    {
      v27 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v28 = v27 | (v21 << 6);
      goto LABEL_26;
    }
    v29 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v29 >= v54)
    {
      v49 = v58;
      swift_release(v58);
      v3 = v53;
      v30 = v55;
      if ((v52 & 1) != 0)
      {
LABEL_39:
        v50 = 1 << *(_BYTE *)(v49 + 32);
        if (v50 >= 64)
          bzero(v30, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v30 = -1 << v50;
        *(_QWORD *)(v49 + 16) = 0;
      }
LABEL_43:
      v48 = v49;
      goto LABEL_44;
    }
    v30 = v55;
    v31 = v55[v29];
    ++v21;
    if (!v31)
    {
      v21 = v29 + 1;
      if (v29 + 1 >= v54)
        goto LABEL_36;
      v31 = v55[v21];
      if (!v31)
        break;
    }
LABEL_25:
    v17 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v21 << 6);
LABEL_26:
    v33 = v58;
    v34 = *(_QWORD *)(v59 + 72);
    v35 = v34 * v28;
    v36 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v59 + v56);
    v36(v11, *(_QWORD *)(v58 + 48) + v34 * v28, v6);
    v37 = *(_QWORD *)(v33 + 56) + v35;
    v38 = v57;
    v36(v57, v37, v6);
    v39 = *(_QWORD *)(v13 + 40);
    v40 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v39, v6, v40);
    v41 = -1 << *(_BYTE *)(v13 + 32);
    v42 = result & ~v41;
    v43 = v42 >> 6;
    if (((-1 << v42) & ~*(_QWORD *)(v19 + 8 * (v42 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v42) & ~*(_QWORD *)(v19 + 8 * (v42 >> 6)))) | v42 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v44 = 0;
      v45 = (unint64_t)(63 - v41) >> 6;
      do
      {
        if (++v43 == v45 && (v44 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v46 = v43 == v45;
        if (v43 == v45)
          v43 = 0;
        v44 |= v46;
        v47 = *(_QWORD *)(v19 + 8 * v43);
      }
      while (v47 == -1);
      v23 = __clz(__rbit64(~v47)) + (v43 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v24 = v34 * v23;
    v25 = *(_QWORD *)(v13 + 48) + v34 * v23;
    v26 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v59 + 32);
    v26(v25, v11, v6);
    result = ((uint64_t (*)(unint64_t, _BYTE *, uint64_t))v26)(*(_QWORD *)(v13 + 56) + v24, v38, v6);
    ++*(_QWORD *)(v13 + 16);
  }
  v32 = v29 + 2;
  if (v32 >= v54)
  {
LABEL_36:
    v49 = v58;
    swift_release(v58);
    v3 = v53;
    if ((v52 & 1) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v31 = v55[v32];
  if (v31)
  {
    v21 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v21 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v21 >= v54)
      goto LABEL_36;
    v31 = v55[v21];
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_100A86F98(uint64_t a1, uint64_t a2)
{
  return sub_100A93A50(a1, a2, (uint64_t *)&unk_101111CC0);
}

uint64_t sub_100A86FA4(uint64_t a1, uint64_t a2)
{
  return sub_100A89618(a1, a2, &qword_1010F9F80, (void (*)(uint64_t, _BYTE *))sub_10010F90C, (void (*)(uint64_t, _BYTE *))sub_100016A30);
}

uint64_t sub_100A86FC0(uint64_t a1, uint64_t a2)
{
  return sub_100A943C8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111750, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A86FE4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1010F1AE8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v22 >= v14)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v14)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v14)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v21);
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
        sub_10001BBBC(v32, *((unint64_t *)&v32 + 1));
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v29, 1);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A872AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD v50[9];

  v3 = v2;
  v6 = type metadata accessor for ObservedAdvertisement(0);
  v45 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v49 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111DE8);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v43 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v41 = v2;
  v42 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v44 = v11;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v42)
      break;
    v25 = v43;
    v26 = v43[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v42)
        goto LABEL_36;
      v26 = v43[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v42)
        {
LABEL_36:
          swift_release();
          v3 = v41;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v43[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v20 >= v42)
              goto LABEL_36;
            v26 = v43[v20];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v20 = v27;
      }
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v46 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v48 & 1) != 0)
    {
      sub_1000126EC(v29, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      v30 = *(_QWORD *)(v45 + 72);
      sub_1000126EC(*(_QWORD *)(v11 + 56) + v30 * v23, v49, type metadata accessor for ObservedAdvertisement);
    }
    else
    {
      sub_10005972C(v29, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      v30 = *(_QWORD *)(v45 + 72);
      sub_10005972C(*(_QWORD *)(v11 + 56) + v30 * v23, v49, type metadata accessor for ObservedAdvertisement);
    }
    Hasher.init(_seed:)(v50);
    v31 = type metadata accessor for UUID(0);
    v32 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v50, v31, v32);
    dispatch thunk of Hashable.hash(into:)(v50, v31, v32);
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v13 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      v11 = v44;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      v11 = v44;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v18 + 8 * v35);
      }
      while (v39 == -1);
      v21 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    sub_1000126EC((uint64_t)v10, *(_QWORD *)(v13 + 48) + v28 * v21, type metadata accessor for BeaconIdentifier);
    result = sub_1000126EC(v49, *(_QWORD *)(v13 + 56) + v30 * v21, type metadata accessor for ObservedAdvertisement);
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release();
  v3 = v41;
  v25 = v43;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v11 + 32);
  if (v40 >= 64)
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v40;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v13;
  return result;
}

uint64_t sub_100A87708(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  _OWORD *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011115A0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v16 << 6);
      }
      else
      {
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v20 >= v13)
          goto LABEL_37;
        v21 = v10[v20];
        ++v16;
        if (!v21)
        {
          v16 = v20 + 1;
          if (v20 + 1 >= v13)
            goto LABEL_37;
          v21 = v10[v16];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v13)
            {
LABEL_37:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v34;
                goto LABEL_44;
              }
              v33 = 1 << *(_BYTE *)(v5 + 32);
              if (v33 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v33;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v16 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_46;
                if (v16 >= v13)
                  goto LABEL_37;
                v21 = v10[v16];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v16 = v22;
          }
        }
LABEL_24:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v23 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v19);
      if ((a2 & 1) != 0)
      {
        sub_10010F90C(v24, v35);
      }
      else
      {
        sub_100016A30((uint64_t)v24, (uint64_t)v35);
        v25 = v23;
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        v17 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v23;
      result = (uint64_t)sub_10010F90C(v35, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v17));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_44:
  *v3 = v8;
  return result;
}

uint64_t sub_100A879D8(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_1010FB240);
}

Swift::Int sub_100A879E4(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111488);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = v3;
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34);
      Hasher._combine(_:)(v28 + 1);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A87CB0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111C88);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_41;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v24);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_100A87F54(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111DE0);
}

uint64_t sub_100A87F60(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_10001A9A8(a3);
  v47 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v45 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v5;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release(v12);
          v5 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v31 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v24);
      swift_bridgeObjectRetain(v31);
    }
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v5 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v5 = v14;
  return result;
}

uint64_t sub_100A882FC(uint64_t a1, uint64_t a2)
{
  return sub_100A93A50(a1, a2, (uint64_t *)&unk_101111C90);
}

uint64_t sub_100A88308(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  char v42;
  _QWORD v43[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101104130);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v39 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v40)
          goto LABEL_36;
        v25 = v41[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v40)
            goto LABEL_36;
          v25 = v41[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v40)
            {
LABEL_36:
              swift_release();
              v3 = v39;
              if ((v42 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v41[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v40)
                  goto LABEL_36;
                v25 = v41[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v35 = *(_QWORD *)(v5 + 56) + v31;
      v36 = *(void **)v35;
      v37 = *(_BYTE *)(v35 + 8);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32[1]);
        sub_1006C92E8(v36, v37);
      }
      Hasher.init(_seed:)(v43);
      String.hash(into:)(v43, v34, v33);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v17 == v28;
          if (v17 == v28)
            v17 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v30 == -1);
        v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v34;
      v20[1] = v33;
      v21 = *(_QWORD *)(v8 + 56) + v19;
      *(_QWORD *)v21 = v36;
      *(_BYTE *)(v21 + 8) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A88624(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  int64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[9];

  v3 = v2;
  v30 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111800);
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  if (*(_QWORD *)(v9 + 16))
  {
    v26 = v3;
    v11 = 1 << *(_BYTE *)(v9 + 32);
    v12 = *(_QWORD *)(v9 + 64);
    v28 = (_QWORD *)(v9 + 64);
    if (v11 < 64)
      v13 = ~(-1 << v11);
    else
      v13 = -1;
    v14 = v13 & v12;
    v27 = (unint64_t)(v11 + 63) >> 6;
    swift_retain();
    v25 = a2;
    v15 = 16;
    if ((a2 & 1) != 0)
      v15 = 32;
    v29 = v15;
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      goto LABEL_22;
    }
    if (v27 <= 1)
    {
      swift_release();
      v3 = v26;
      v17 = v28;
      if ((v25 & 1) == 0)
        goto LABEL_30;
      goto LABEL_26;
    }
    v17 = v28;
    v18 = v28[1];
    v19 = 1;
    if (!v18)
    {
      v19 = 2;
      if (v27 <= 2)
        goto LABEL_23;
      v18 = v28[2];
      if (!v18)
      {
        v20 = 3;
        if (v27 > 3)
        {
          v18 = v28[3];
          if (v18)
          {
            v19 = 3;
            goto LABEL_21;
          }
          while (1)
          {
            v19 = v20 + 1;
            if (__OFADD__(v20, 1))
            {
              __break(1u);
              JUMPOUT(0x100A88A58);
            }
            if (v19 >= v27)
              break;
            v18 = v28[v19];
            ++v20;
            if (v18)
              goto LABEL_21;
          }
        }
LABEL_23:
        swift_release();
        v3 = v26;
        if ((v25 & 1) == 0)
          goto LABEL_30;
LABEL_26:
        v22 = 1 << *(_BYTE *)(v9 + 32);
        if (v22 >= 64)
          bzero(v17, ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v17 = -1 << v22;
        *(_QWORD *)(v9 + 16) = 0;
        goto LABEL_30;
      }
    }
LABEL_21:
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_22:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 48) + v16);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + v29))(v8, *(_QWORD *)(v9 + 56) + *(_QWORD *)(v6 + 72) * v16, v30);
    Hasher.init(_seed:)(v31);
    __asm { BR              X8 }
  }
LABEL_30:
  result = swift_release();
  *v3 = v10;
  return result;
}

uint64_t sub_100A88A78(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111A68);
}

uint64_t sub_100A88A84(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, &qword_101111DD8, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress);
}

uint64_t sub_100A88AA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  uint64_t (*v49)(uint64_t);
  unint64_t *v50;
  uint64_t v51;
  int v52;

  v50 = a5;
  v51 = a6;
  v8 = v6;
  v49 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v45 - v13;
  v15 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_10001A9A8(a4);
  v52 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v47 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v45 = v8;
  v46 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v28 >= v46)
      break;
    v29 = v47;
    v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v46)
        goto LABEL_36;
      v30 = v47[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_36:
          swift_release();
          v8 = v45;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v46)
              goto LABEL_36;
            v30 = v47[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      v34 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      v34 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
      swift_retain();
    }
    v35 = *(_QWORD *)(v17 + 40);
    v36 = sub_100006C64(v50, 255, v49, v51);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v11, v36);
    v37 = -1 << *(_BYTE *)(v17 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v34;
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release();
  v8 = v45;
  v29 = v47;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v44 = 1 << *(_BYTE *)(v15 + 32);
  if (v44 >= 64)
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v44;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v8 = v17;
  return result;
}

uint64_t sub_100A88E38(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, &qword_101111CE8);
}

uint64_t sub_100A88E4C(uint64_t a1, uint64_t a2)
{
  return sub_100A88E58(a1, a2, &qword_1010FB398);
}

uint64_t sub_100A88E58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v7 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v3;
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v11 = a1;
  else
    v11 = *(_QWORD *)(*v3 + 24);
  v12 = v10;
  sub_10001A9A8(a3);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, v11, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
  {
    result = swift_release();
    v42 = v45;
LABEL_45:
    *v42 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v47 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v46 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  HIDWORD(v44) = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v48 = v22;
  while (1)
  {
    if (v18)
    {
      v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v25 = v24 | (v21 << 6);
      goto LABEL_27;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v26 >= v46)
    {
      swift_release();
      v42 = v45;
      v27 = v47;
      if ((v44 & 0x100000000) != 0)
      {
LABEL_40:
        v43 = 1 << *(_BYTE *)(v12 + 32);
        if (v43 >= 64)
          bzero(v27, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v27 = -1 << v43;
        *(_QWORD *)(v12 + 16) = 0;
      }
LABEL_44:
      result = swift_release();
      goto LABEL_45;
    }
    v27 = v47;
    v28 = v47[v26];
    ++v21;
    if (!v28)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v46)
        goto LABEL_37;
      v28 = v47[v21];
      if (!v28)
        break;
    }
LABEL_26:
    v18 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_27:
    v30 = *(_QWORD *)(v49 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v49 + v48))(v9, *(_QWORD *)(v12 + 48) + v30 * v25, v7);
    v31 = v12;
    v32 = *(_BYTE *)(*(_QWORD *)(v12 + 56) + v25);
    v33 = *(_QWORD *)(v14 + 40);
    v34 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v7, v34);
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v23 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v49 + 32))(*(_QWORD *)(v14 + 48) + v30 * v23, v9, v7);
    *(_BYTE *)(*(_QWORD *)(v14 + 56) + v23) = v32;
    ++*(_QWORD *)(v14 + 16);
    v12 = v31;
  }
  v29 = v26 + 2;
  if (v29 >= v46)
  {
LABEL_37:
    swift_release();
    v42 = v45;
    if ((v44 & 0x100000000) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v28 = v47[v29];
  if (v28)
  {
    v21 = v29;
    goto LABEL_26;
  }
  while (1)
  {
    v21 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v21 >= v46)
      goto LABEL_37;
    v28 = v47[v21];
    ++v29;
    if (v28)
      goto LABEL_26;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100A89200(uint64_t a1, uint64_t a2)
{
  return sub_100A89E64(a1, a2, &qword_101111DD0, (void (*)(unint64_t, _BYTE *))sub_10000F9FC);
}

uint64_t sub_100A89214(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1011118A8, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A89238(uint64_t a1, uint64_t a2)
{
  return sub_100A93A50(a1, a2, (uint64_t *)&unk_1011118C0);
}

uint64_t sub_100A89244(uint64_t a1, uint64_t a2)
{
  return sub_100A8F264(a1, a2, &qword_1010EF178, (uint64_t *)&unk_101111720);
}

uint64_t sub_100A89258(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  _OWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];
  _OWORD v41[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111758);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v18 >= v37)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v38 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v37)
        goto LABEL_37;
      v20 = *(_QWORD *)(v38 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v37)
        {
LABEL_37:
          swift_release();
          if ((v39 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v38 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v14 >= v37)
              goto LABEL_37;
            v20 = *(_QWORD *)(v38 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v23 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
    if ((v39 & 1) != 0)
    {
      sub_10010F90C(v23, v41);
    }
    else
    {
      sub_100016A30((uint64_t)v23, (uint64_t)v41);
      v24 = v22;
    }
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v27 = v26;
    Hasher.init(_seed:)(v40);
    String.hash(into:)(v40, v25, v27);
    v28 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = v28 & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
    result = (uint64_t)sub_10010F90C(v41, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v19 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v19, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A89590(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111DB8, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A895B4(uint64_t a1, uint64_t a2)
{
  return sub_100A8A244(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t *)&unk_101111DC0, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress);
}

uint64_t sub_100A895D8(uint64_t a1, uint64_t a2)
{
  return sub_100A8D8D8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, &qword_1011042B8, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress);
}

uint64_t sub_100A895FC(uint64_t a1, uint64_t a2)
{
  return sub_100A89618(a1, a2, (uint64_t *)&unk_1010F6370, (void (*)(uint64_t, _BYTE *))sub_10010F90C, (void (*)(uint64_t, _BYTE *))sub_100016A30);
}

uint64_t sub_100A89618(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *), void (*a5)(uint64_t, _BYTE *))
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v43;
  _QWORD v44[9];
  _BYTE v45[32];

  v7 = v5;
  v9 = *v5;
  if (*(_QWORD *)(*v5 + 24) <= a1)
    v10 = a1;
  else
    v10 = *(_QWORD *)(*v5 + 24);
  sub_10001A9A8(a3);
  v43 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v9, v10, a2);
  v12 = v11;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_44;
  v13 = 1 << *(_BYTE *)(v9 + 32);
  v41 = v9 + 64;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  else
    v14 = -1;
  v15 = v14 & *(_QWORD *)(v9 + 64);
  v39 = v7;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v16 = v11 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_25;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v9 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_37;
      v25 = *(_QWORD *)(v41 + 8 * v18);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_37:
          swift_release(v9);
          v7 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_46;
            if (v18 >= v40)
              goto LABEL_37;
            v25 = *(_QWORD *)(v41 + 8 * v18);
            ++v26;
            if (v25)
              goto LABEL_24;
          }
        }
        v18 = v26;
      }
    }
LABEL_24:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_25:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v9 + 56) + 32 * v22;
    if ((v43 & 1) != 0)
    {
      a4(v30, v45);
    }
    else
    {
      a5(v30, v45);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v29, v28);
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = ((uint64_t (*)(_BYTE *, unint64_t))a4)(v45, *(_QWORD *)(v12 + 56) + 32 * v19);
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v9);
  v7 = v39;
  v24 = (_QWORD *)(v9 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v38 = 1 << *(_BYTE *)(v9 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_44:
  result = swift_release(v9);
  *v7 = v12;
  return result;
}

uint64_t sub_100A89940(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_1011117E0);
}

uint64_t sub_100A8994C(uint64_t a1, uint64_t a2)
{
  return sub_100A8EE84(a1, a2, &qword_1011116B0);
}

uint64_t sub_100A89958(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  int64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int64_t v82;
  char *v83;
  uint64_t v84;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011116A8);
  v70 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v83 = v9;
  v84 = v6;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v65 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v63 = v2;
  v64 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  v68 = v10;
  v69 = v7;
  v66 = v12;
  while (1)
  {
    if (v16)
    {
      v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v25 = v24 | (v19 << 6);
      goto LABEL_24;
    }
    v26 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v64)
      break;
    v27 = v65;
    v28 = v65[v26];
    ++v19;
    if (!v28)
    {
      v19 = v26 + 1;
      if (v26 + 1 >= v64)
        goto LABEL_36;
      v28 = v65[v19];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v64)
        {
LABEL_36:
          swift_release();
          v3 = v63;
          if ((v70 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v65[v29];
        if (!v28)
        {
          while (1)
          {
            v19 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v19 >= v64)
              goto LABEL_36;
            v28 = v65[v19];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v19 = v29;
      }
    }
LABEL_23:
    v16 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v19 << 6);
LABEL_24:
    v30 = v7[9];
    v31 = *(_QWORD *)(v10 + 48) + v30 * v25;
    v32 = 104 * v25;
    v82 = v19;
    if ((v70 & 1) != 0)
    {
      v33 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      v34 = v84;
      v33(v83, v31, v84);
      v35 = *(_QWORD *)(v10 + 56) + v32;
      v81 = *(_QWORD *)v35;
      v80 = *(unsigned __int8 *)(v35 + 8);
      v36 = *(_QWORD *)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      v38 = *(_QWORD *)(v35 + 32);
      v39 = *(_QWORD *)(v35 + 40);
      v78 = *(_QWORD *)(v35 + 48);
      v79 = v36;
      v77 = *(_QWORD *)(v35 + 56);
      LODWORD(v36) = *(unsigned __int8 *)(v35 + 64);
      v75 = *(unsigned __int8 *)(v35 + 65);
      v76 = v36;
      v40 = *(_QWORD *)(v35 + 72);
      v73 = *(_QWORD *)(v35 + 80);
      v74 = v40;
      v72 = *(_QWORD *)(v35 + 88);
      v71 = *(unsigned __int8 *)(v35 + 96);
    }
    else
    {
      v41 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v34 = v84;
      v41(v83, v31, v84);
      v42 = *(_QWORD *)(v10 + 56) + v32;
      v43 = *(_QWORD *)v42;
      v80 = *(unsigned __int8 *)(v42 + 8);
      v67 = v16;
      v44 = v30;
      v46 = *(_QWORD *)(v42 + 16);
      v45 = *(_QWORD *)(v42 + 24);
      v38 = *(_QWORD *)(v42 + 32);
      v39 = *(_QWORD *)(v42 + 40);
      v47 = *(_QWORD *)(v42 + 48);
      v77 = *(_QWORD *)(v42 + 56);
      v78 = v47;
      v48 = *(unsigned __int8 *)(v42 + 64);
      v75 = *(unsigned __int8 *)(v42 + 65);
      v76 = v48;
      v50 = *(_QWORD *)(v42 + 72);
      v49 = *(_QWORD *)(v42 + 80);
      v72 = *(_QWORD *)(v42 + 88);
      v73 = v49;
      v71 = *(unsigned __int8 *)(v42 + 96);
      swift_bridgeObjectRetain(v77);
      v74 = v50;
      swift_bridgeObjectRetain(v50);
      v81 = v43;
      swift_retain();
      v79 = v46;
      v51 = v46;
      v37 = v45;
      v30 = v44;
      v12 = v66;
      v16 = v67;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
    }
    v52 = *(_QWORD *)(v12 + 40);
    v53 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v52, v34, v53);
    v54 = -1 << *(_BYTE *)(v12 + 32);
    v55 = result & ~v54;
    v56 = v55 >> 6;
    if (((-1 << v55) & ~*(_QWORD *)(v17 + 8 * (v55 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v55) & ~*(_QWORD *)(v17 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
      v7 = v69;
    }
    else
    {
      v57 = 0;
      v58 = (unint64_t)(63 - v54) >> 6;
      v7 = v69;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v59 = v56 == v58;
        if (v56 == v58)
          v56 = 0;
        v57 |= v59;
        v60 = *(_QWORD *)(v17 + 8 * v56);
      }
      while (v60 == -1);
      v20 = __clz(__rbit64(~v60)) + (v56 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])(*(_QWORD *)(v12 + 48) + v30 * v20, v83, v84);
    v21 = *(_QWORD *)(v12 + 56) + 104 * v20;
    *(_QWORD *)v21 = v81;
    *(_BYTE *)(v21 + 8) = v80;
    *(_QWORD *)(v21 + 16) = v79;
    *(_QWORD *)(v21 + 24) = v37;
    *(_QWORD *)(v21 + 32) = v38;
    *(_QWORD *)(v21 + 40) = v39;
    v22 = v77;
    *(_QWORD *)(v21 + 48) = v78;
    *(_QWORD *)(v21 + 56) = v22;
    *(_BYTE *)(v21 + 64) = v76;
    *(_BYTE *)(v21 + 65) = v75;
    v23 = v73;
    *(_QWORD *)(v21 + 72) = v74;
    *(_QWORD *)(v21 + 80) = v23;
    *(_QWORD *)(v21 + 88) = v72;
    *(_BYTE *)(v21 + 96) = v71;
    ++*(_QWORD *)(v12 + 16);
    v10 = v68;
    v19 = v82;
  }
  swift_release();
  v3 = v63;
  v27 = v65;
  if ((v70 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v61 = 1 << *(_BYTE *)(v10 + 32);
  if (v61 >= 64)
    bzero(v27, ((unint64_t)(v61 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v61;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_100A89E44(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111510);
}

uint64_t sub_100A89E50(uint64_t a1, uint64_t a2)
{
  return sub_100A89E64(a1, a2, &qword_1011116B8, (void (*)(unint64_t, _BYTE *))sub_10000F9FC);
}

uint64_t sub_100A89E64(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(unint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  _QWORD *v44;
  int v45;
  void (*v46)(unint64_t, _BYTE *);
  _BYTE v47[40];

  v46 = a4;
  v6 = v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A9A8(a3);
  v45 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v44 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v42 = v6;
  v43 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v43)
      break;
    v27 = v44;
    v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v43)
        goto LABEL_36;
      v28 = v44[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_36:
          swift_release();
          v6 = v42;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v43)
              goto LABEL_36;
            v28 = v44[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v19 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(_QWORD *)(v10 + 72);
    v31 = *(_QWORD *)(v13 + 48) + v30 * v25;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 32))(v12, v31, v9);
      v46(*(_QWORD *)(v13 + 56) + 40 * v25, v47);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, v31, v9);
      sub_100030784(*(_QWORD *)(v13 + 56) + 40 * v25, (uint64_t)v47);
    }
    v32 = *(_QWORD *)(v15 + 40);
    v33 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v15 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v20 + 8 * v36);
      }
      while (v40 == -1);
      v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v30 * v23, v12, v9);
    result = ((uint64_t (*)(_BYTE *, unint64_t))v46)(v47, *(_QWORD *)(v15 + 56) + 40 * v23);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release();
  v6 = v42;
  v27 = v44;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v13 + 32);
  if (v41 >= 64)
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v41;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v6 = v15;
  return result;
}

uint64_t sub_100A8A220(uint64_t a1, uint64_t a2)
{
  return sub_100A8A244(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111568, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A8A244(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int64_t v32;
  _QWORD *v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[12];
  int v52;
  uint64_t *v53;
  int64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t);
  unint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;

  v58 = a5;
  v59 = a6;
  v9 = v6;
  v12 = type metadata accessor for Date(0);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  __chkstk_darwin(v12);
  v62 = &v51[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = a3;
  v14 = a3(0);
  v61 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = &v51[-v15];
  v17 = *v9;
  if (*(_QWORD *)(*v9 + 24) > a1)
    a1 = *(_QWORD *)(*v9 + 24);
  sub_10001A9A8(a4);
  v18 = static _DictionaryStorage.resize(original:capacity:move:)(v17, a1, a2);
  v19 = v18;
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_43;
  v53 = v9;
  v20 = 1 << *(_BYTE *)(v17 + 32);
  v21 = *(_QWORD *)(v17 + 64);
  v55 = (_QWORD *)(v17 + 64);
  if (v20 < 64)
    v22 = ~(-1 << v20);
  else
    v22 = -1;
  v23 = v22 & v21;
  v54 = (unint64_t)(v20 + 63) >> 6;
  v24 = v18 + 64;
  v60 = v17;
  result = swift_retain();
  v26 = 0;
  v52 = a2;
  v27 = 16;
  if ((a2 & 1) != 0)
    v27 = 32;
  v56 = v27;
  v28 = v27;
  while (1)
  {
    if (v23)
    {
      v30 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v31 = v30 | (v26 << 6);
      goto LABEL_26;
    }
    v32 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v32 >= v54)
      break;
    v33 = v55;
    v34 = v55[v32];
    ++v26;
    if (!v34)
    {
      v26 = v32 + 1;
      if (v32 + 1 >= v54)
        goto LABEL_36;
      v34 = v55[v26];
      if (!v34)
      {
        v35 = v32 + 2;
        if (v35 >= v54)
        {
LABEL_36:
          v49 = v60;
          swift_release();
          v9 = v53;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v34 = v55[v35];
        if (!v34)
        {
          while (1)
          {
            v26 = v35 + 1;
            if (__OFADD__(v35, 1))
              goto LABEL_45;
            if (v26 >= v54)
              goto LABEL_36;
            v34 = v55[v26];
            ++v35;
            if (v34)
              goto LABEL_25;
          }
        }
        v26 = v35;
      }
    }
LABEL_25:
    v23 = (v34 - 1) & v34;
    v31 = __clz(__rbit64(v34)) + (v26 << 6);
LABEL_26:
    v36 = v60;
    v37 = *(_QWORD *)(v61 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v61 + v28))(v16, *(_QWORD *)(v60 + 48) + v37 * v31, v14);
    v38 = *(_QWORD *)(v36 + 56);
    v39 = *(_QWORD *)(v63 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v63 + v28))(v62, v38 + v39 * v31, v64);
    v40 = *(_QWORD *)(v19 + 40);
    v41 = sub_100006C64(v58, 255, v57, v59);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v40, v14, v41);
    v42 = -1 << *(_BYTE *)(v19 + 32);
    v43 = result & ~v42;
    v44 = v43 >> 6;
    if (((-1 << v43) & ~*(_QWORD *)(v24 + 8 * (v43 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v43) & ~*(_QWORD *)(v24 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v45 = 0;
      v46 = (unint64_t)(63 - v42) >> 6;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v47 = v44 == v46;
        if (v44 == v46)
          v44 = 0;
        v45 |= v47;
        v48 = *(_QWORD *)(v24 + 8 * v44);
      }
      while (v48 == -1);
      v29 = __clz(__rbit64(~v48)) + (v44 << 6);
    }
    *(_QWORD *)(v24 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v61 + 32))(*(_QWORD *)(v19 + 48) + v37 * v29, v16, v14);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v63 + 32))(*(_QWORD *)(v19 + 56) + v39 * v29, v62, v64);
    ++*(_QWORD *)(v19 + 16);
  }
  v49 = v60;
  swift_release();
  v9 = v53;
  v33 = v55;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v50 = 1 << *(_BYTE *)(v49 + 32);
  if (v50 >= 64)
    bzero(v33, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v33 = -1 << v50;
  *(_QWORD *)(v49 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v9 = v19;
  return result;
}

uint64_t sub_100A8A640(uint64_t a1, uint64_t a2)
{
  return sub_100A8B724(a1, a2, (uint64_t *)&unk_101111C50);
}

uint64_t sub_100A8A64C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011118B0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v24 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v25 = v24 | (v14 << 6);
      goto LABEL_34;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v41)
      break;
    v27 = (_QWORD *)(v5 + 64);
    v28 = *(_QWORD *)(v42 + 8 * v26);
    ++v14;
    if (!v28)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_36;
      v28 = *(_QWORD *)(v42 + 8 * v14);
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = *(_QWORD *)(v42 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            v14 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v28 = *(_QWORD *)(v42 + 8 * v14);
            ++v29;
            if (v28)
              goto LABEL_33;
          }
        }
        v14 = v29;
      }
    }
LABEL_33:
    v11 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v14 << 6);
LABEL_34:
    v34 = 8 * v25;
    v35 = *(void **)(*(_QWORD *)(v5 + 48) + v34);
    v36 = *(void **)(*(_QWORD *)(v5 + 56) + v34);
    if ((v43 & 1) == 0)
    {
      v37 = v35;
      v38 = v36;
    }
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v17 = v16;
    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v15, v17);
    v18 = Hasher._finalize()();
    result = swift_bridgeObjectRelease();
    v19 = -1 << *(_BYTE *)(v8 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v32 = v21 == v31;
        if (v21 == v31)
          v21 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v33 == -1);
      v22 = __clz(__rbit64(~v33)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = 8 * v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v23) = v35;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v23) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v27 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v27, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100A8A978(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111868, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A8A99C(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111A10, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A8A9C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  __int128 v46;
  _QWORD v47[9];

  v3 = v2;
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(&qword_1011119C0);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_41;
  v41 = v3;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  v44 = v6;
  while (1)
  {
    if (v16)
    {
      v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v23 = v22 | (v19 << 6);
      goto LABEL_24;
    }
    v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v42)
      goto LABEL_36;
    v25 = v43[v24];
    ++v19;
    if (!v25)
    {
      v19 = v24 + 1;
      if (v24 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
        break;
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v10 + 48);
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(_QWORD *)(v10 + 56) + v28 * v23;
    v30 = *(_QWORD *)(v27 + 16 * v23 + 8);
    v46 = *(_OWORD *)(v27 + 16 * v23);
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v29, v6);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v29, v6);
      sub_10001BBBC(v46, v30);
    }
    Hasher.init(_seed:)(v47);
    v31 = v46;
    sub_10001BBBC(v46, v30);
    Data.hash(into:)(v47, v31, v30);
    sub_10001BC14(v31, v30);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      v6 = v44;
      v21 = v46;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      v6 = v44;
      v21 = v46;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_OWORD *)(*(_QWORD *)(v12 + 48) + 16 * v20) = v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 56) + v28 * v20, v9, v6);
    ++*(_QWORD *)(v12 + 16);
  }
  v26 = v24 + 2;
  if (v26 < v42)
  {
    v25 = v43[v26];
    if (!v25)
    {
      while (1)
      {
        v19 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_43;
        if (v19 >= v42)
          goto LABEL_36;
        v25 = v43[v19];
        ++v26;
        if (v25)
          goto LABEL_23;
      }
    }
    v19 = v26;
    goto LABEL_23;
  }
LABEL_36:
  swift_release();
  v3 = v41;
  if ((v45 & 1) != 0)
  {
    v39 = 1 << *(_BYTE *)(v10 + 32);
    if (v39 >= 64)
      bzero(v43, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v39;
    *(_QWORD *)(v10 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_100A8AD64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111860);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v22);
    v33 = *v32;
    v34 = v32[1];
    if ((v39 & 1) == 0)
    {
      v35 = v31;
      swift_bridgeObjectRetain(v34);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v31;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19);
    *v20 = v33;
    v20[1] = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A8B048(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011114B0);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      sub_10039C2A8(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_100A8B3E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 *v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011041B0);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v14 << 6);
      }
      else
      {
        v22 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v36[v22];
        ++v14;
        if (!v23)
        {
          v14 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v36[v14];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              swift_release();
              v3 = v34;
              if ((v37 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v14 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v14 >= v35)
                  goto LABEL_36;
                v23 = v36[v14];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v14 = v24;
          }
        }
LABEL_33:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }
      v29 = (unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 24 * v21);
      v30 = *v29;
      v32 = *((_QWORD *)v29 + 1);
      v31 = *((_QWORD *)v29 + 2);
      v38 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain(v31);
        sub_10001BBBC(v38, *((unint64_t *)&v38 + 1));
      }
      Hasher.init(_seed:)(v39);
      Hasher._combine(_:)(v30);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v39, v32, v31);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = *(_QWORD *)(v8 + 48) + 24 * v18;
      *(_BYTE *)v19 = v30;
      *(_QWORD *)(v19 + 8) = v32;
      *(_QWORD *)(v19 + 16) = v31;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18) = v38;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A8B718(uint64_t a1, uint64_t a2)
{
  return sub_100A8B724(a1, a2, (uint64_t *)&unk_101111580);
}

uint64_t sub_100A8B724(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_100A8BA2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111570);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release();
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain();
    }
    Hasher.init(_seed:)(v38);
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A8BD40(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  _QWORD v36[9];

  v3 = v2;
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(&qword_101111560);
  v35 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (*(_QWORD *)(v9 + 16))
  {
    v31 = v3;
    v12 = 1 << *(_BYTE *)(v9 + 32);
    v13 = *(_QWORD *)(v9 + 64);
    v33 = (_QWORD *)(v9 + 64);
    if (v12 < 64)
      v14 = ~(-1 << v12);
    else
      v14 = -1;
    v15 = v14 & v13;
    v32 = (unint64_t)(v12 + 63) >> 6;
    v16 = v10 + 64;
    result = swift_retain();
    v18 = 0;
    while (1)
    {
      if (v15)
      {
        v22 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v23 = v22 | (v18 << 6);
      }
      else
      {
        v24 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
        v25 = v33;
        if (v24 >= v32)
          goto LABEL_26;
        v26 = v33[v24];
        ++v18;
        if (!v26)
        {
          v18 = v24 + 1;
          if (v24 + 1 >= v32)
            goto LABEL_26;
          v26 = v33[v18];
          if (!v26)
          {
            v27 = v24 + 2;
            if (v27 >= v32)
            {
LABEL_26:
              swift_release();
              if ((v35 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_33;
              }
              v30 = 1 << *(_BYTE *)(v9 + 32);
              if (v30 >= 64)
                bzero(v25, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v25 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v26 = v33[v27];
            if (!v26)
            {
              while (1)
              {
                v18 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_35;
                if (v18 >= v32)
                  goto LABEL_26;
                v26 = v33[v18];
                ++v27;
                if (v26)
                  goto LABEL_23;
              }
            }
            v18 = v27;
          }
        }
LABEL_23:
        v15 = (v26 - 1) & v26;
        v23 = __clz(__rbit64(v26)) + (v18 << 6);
      }
      v28 = *(_QWORD *)(v34 + 72);
      v29 = *(_QWORD *)(v9 + 48) + v28 * v23;
      if ((v35 & 1) != 0)
      {
        sub_1000126EC(v29, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        v19 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v23);
      }
      else
      {
        sub_10005972C(v29, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
        v19 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v23);
        swift_bridgeObjectRetain(v19);
      }
      Hasher.init(_seed:)(v36);
      sub_1009A31E0((uint64_t)v36);
      v20 = Hasher._finalize()();
      v21 = _HashTable.nextHole(atOrAfter:)(v20 & ~(-1 << *(_BYTE *)(v11 + 32)), v11 + 64, ~(-1 << *(_BYTE *)(v11 + 32)));
      *(_QWORD *)(v16 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      result = sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 48) + v28 * v21, type metadata accessor for OwnedBeaconRecord);
      *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v21) = v19;
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release();
LABEL_33:
  *v3 = v11;
  return result;
}

uint64_t sub_100A8C040(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int EnumCaseMultiPayload;
  uint64_t v34;
  Swift::UInt v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  Swift::UInt v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  int64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  _QWORD v68[10];

  v3 = v2;
  v61 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v60 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconSharingSessionContext(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (unsigned __int8 *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v56 - v13;
  v15 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111D90);
  v63 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_47;
  v56 = v3;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v59 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v58 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  v62 = v14;
  v57 = v17;
  while (1)
  {
    if (v21)
    {
      v66 = (v21 - 1) & v21;
      v27 = __clz(__rbit64(v21)) | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    if (v28 >= v58)
      goto LABEL_42;
    v29 = v59[v28];
    ++v24;
    if (!v29)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v58)
        goto LABEL_42;
      v29 = v59[v24];
      if (!v29)
        break;
    }
LABEL_23:
    v66 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v24 << 6);
LABEL_24:
    v31 = *(_QWORD *)(v9 + 72);
    v32 = *(_QWORD *)(v15 + 48) + v31 * v27;
    v67 = v24;
    v65 = v31;
    if ((v63 & 1) != 0)
    {
      sub_1000126EC(v32, (uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
      v64 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
    }
    else
    {
      sub_10005972C(v32, (uint64_t)v14, type metadata accessor for BeaconSharingSessionContext);
      v64 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v27);
      swift_retain();
    }
    Hasher.init(_seed:)(v68);
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for BeaconSharingSessionContext);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v8);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v34 = v6;
        v35 = *v12;
        v36 = v9;
        v37 = v8;
        v38 = v15;
        v40 = *((_QWORD *)v12 + 1);
        v39 = *((_QWORD *)v12 + 2);
        Hasher._combine(_:)(1uLL);
        v41 = v35;
        v6 = v34;
        Hasher._combine(_:)(v41);
        swift_bridgeObjectRetain(v39);
        v42 = v40;
        v8 = v37;
        v9 = v36;
        String.hash(into:)(v68, v42, v39);
        v43 = v39;
        v15 = v38;
        v17 = v57;
        swift_bridgeObjectRelease_n(v43, 2);
        goto LABEL_33;
      }
      v45 = v60;
      v44 = v61;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v6 + 32))(v60, v12, v61);
      v46 = 2;
    }
    else
    {
      v45 = v60;
      v44 = v61;
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v6 + 32))(v60, v12, v61);
      v46 = 0;
    }
    Hasher._combine(_:)(v46);
    v47 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v68, v44, v47);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v45, v44);
LABEL_33:
    result = Hasher._finalize()();
    v48 = -1 << *(_BYTE *)(v17 + 32);
    v49 = result & ~v48;
    v50 = v49 >> 6;
    if (((-1 << v49) & ~*(_QWORD *)(v22 + 8 * (v49 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v49) & ~*(_QWORD *)(v22 + 8 * (v49 >> 6)))) | v49 & 0x7FFFFFFFFFFFFFC0;
      v14 = v62;
    }
    else
    {
      v51 = 0;
      v52 = (unint64_t)(63 - v48) >> 6;
      v14 = v62;
      do
      {
        if (++v50 == v52 && (v51 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }
        v53 = v50 == v52;
        if (v50 == v52)
          v50 = 0;
        v51 |= v53;
        v54 = *(_QWORD *)(v22 + 8 * v50);
      }
      while (v54 == -1);
      v25 = __clz(__rbit64(~v54)) + (v50 << 6);
    }
    v26 = v65;
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    result = sub_1000126EC((uint64_t)v14, *(_QWORD *)(v17 + 48) + v26 * v25, type metadata accessor for BeaconSharingSessionContext);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v25) = v64;
    ++*(_QWORD *)(v17 + 16);
    v21 = v66;
    v24 = v67;
  }
  v30 = v28 + 2;
  if (v30 < v58)
  {
    v29 = v59[v30];
    if (!v29)
    {
      while (1)
      {
        v24 = v30 + 1;
        if (__OFADD__(v30, 1))
          goto LABEL_49;
        if (v24 >= v58)
          goto LABEL_42;
        v29 = v59[v24];
        ++v30;
        if (v29)
          goto LABEL_23;
      }
    }
    v24 = v30;
    goto LABEL_23;
  }
LABEL_42:
  swift_release();
  v3 = v56;
  if ((v63 & 1) != 0)
  {
    v55 = 1 << *(_BYTE *)(v15 + 32);
    if (v55 >= 64)
      bzero(v59, ((unint64_t)(v55 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v59 = -1 << v55;
    *(_QWORD *)(v15 + 16) = 0;
  }
LABEL_47:
  result = swift_release();
  *v3 = v17;
  return result;
}

uint64_t sub_100A8C544(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[9];

  v3 = v2;
  v47 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v46 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111890);
  v44 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v7, a1, a2);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_41;
  v41 = v2;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 64);
  v43 = (_QWORD *)(v7 + 64);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v42 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  v17 = v45;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v21 = v20 | (v16 << 6);
      goto LABEL_24;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      goto LABEL_36;
    v23 = v43[v22];
    ++v16;
    if (!v23)
    {
      v16 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v23 = v43[v16];
      if (!v23)
        break;
    }
LABEL_23:
    v13 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v16 << 6);
LABEL_24:
    v25 = *(_QWORD *)(v7 + 56);
    v26 = v7;
    v27 = (unsigned __int8 *)(*(_QWORD *)(v7 + 48) + 24 * v21);
    v28 = *v27;
    v30 = *((_QWORD *)v27 + 1);
    v29 = *((_QWORD *)v27 + 2);
    v31 = *(_QWORD *)(v17 + 72);
    v32 = v25 + v31 * v21;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v46, v32, v47);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v46, v32, v47);
      swift_bridgeObjectRetain(v29);
    }
    Hasher.init(_seed:)(v48);
    Hasher._combine(_:)(v28);
    swift_bridgeObjectRetain(v29);
    String.hash(into:)(v48, v30, v29);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v9 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v14 + 8 * (v34 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v14 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      v17 = v45;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      v17 = v45;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v14 + 8 * v35);
      }
      while (v39 == -1);
      v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v9 + 48) + 24 * v18;
    *(_BYTE *)v19 = v28;
    *(_QWORD *)(v19 + 8) = v30;
    *(_QWORD *)(v19 + 16) = v29;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v9 + 56) + v31 * v18, v46, v47);
    ++*(_QWORD *)(v9 + 16);
    v7 = v26;
  }
  v24 = v22 + 2;
  if (v24 < v42)
  {
    v23 = v43[v24];
    if (!v23)
    {
      while (1)
      {
        v16 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_43;
        if (v16 >= v42)
          goto LABEL_36;
        v23 = v43[v16];
        ++v24;
        if (v23)
          goto LABEL_23;
      }
    }
    v16 = v24;
    goto LABEL_23;
  }
LABEL_36:
  swift_release();
  v3 = v41;
  if ((v44 & 1) != 0)
  {
    v40 = 1 << *(_BYTE *)(v7 + 32);
    if (v40 >= 64)
      bzero(v43, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v43 = -1 << v40;
    *(_QWORD *)(v7 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t sub_100A8C8E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111DB0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(v5 + 56);
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v31 = *(_QWORD *)(v29 + v28);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v29 + v28));
      Hasher.init(_seed:)(v36);
      Hasher._combine(_:)(v30);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v30;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A8CBB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::UInt v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111950);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v35 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v33 = v3;
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v35 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = 8 * v20;
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v28);
      v30 = *(void **)(*(_QWORD *)(v5 + 56) + v28);
      if ((a2 & 1) == 0)
        v31 = v30;
      Hasher.init(_seed:)(v36);
      Hasher._combine(_:)(v29);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v18) = v29;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v18) = v30;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A8CE88(uint64_t a1, uint64_t a2)
{
  return sub_100A8CE94(a1, a2, &qword_101111840);
}

uint64_t sub_100A8CE94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  __int128 v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(a3);
  v8 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v10 = v9;
  if (*(_QWORD *)(v6 + 16))
  {
    v37 = v4;
    v11 = 1 << *(_BYTE *)(v6 + 32);
    v39 = (_QWORD *)(v6 + 64);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v38 = (unint64_t)(v11 + 63) >> 6;
    v14 = v9 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v23 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v24 = v23 | (v16 << 6);
      }
      else
      {
        v25 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v25 >= v38)
          goto LABEL_36;
        v26 = v39[v25];
        ++v16;
        if (!v26)
        {
          v16 = v25 + 1;
          if (v25 + 1 >= v38)
            goto LABEL_36;
          v26 = v39[v16];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v38)
            {
LABEL_36:
              swift_release();
              v4 = v37;
              if ((v8 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v6 + 32);
                if (v36 >= 64)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v26 = v39[v27];
            if (!v26)
            {
              while (1)
              {
                v16 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_43;
                if (v16 >= v38)
                  goto LABEL_36;
                v26 = v39[v16];
                ++v27;
                if (v26)
                  goto LABEL_33;
              }
            }
            v16 = v27;
          }
        }
LABEL_33:
        v13 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v16 << 6);
      }
      v32 = 16 * v24;
      v33 = (uint64_t *)(*(_QWORD *)(v6 + 48) + v32);
      v35 = *v33;
      v34 = v33[1];
      v40 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v32);
      if ((v8 & 1) == 0)
      {
        swift_bridgeObjectRetain(v34);
        swift_retain();
      }
      Hasher.init(_seed:)(v41);
      String.hash(into:)(v41, v35, v34);
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v10 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v19 == v29;
          if (v19 == v29)
            v19 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v31 == -1);
        v20 = __clz(__rbit64(~v31)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 16 * v20;
      v22 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v21);
      *v22 = v35;
      v22[1] = v34;
      *(_OWORD *)(*(_QWORD *)(v10 + 56) + v21) = v40;
      ++*(_QWORD *)(v10 + 16);
    }
  }
  result = swift_release();
  *v4 = v10;
  return result;
}

uint64_t sub_100A8D198(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD v48[9];

  v3 = v2;
  v6 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111498);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_48;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v43 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v41 = v2;
  v42 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  v44 = v9;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return result;
    }
    if (v22 >= v42)
      break;
    v23 = v43;
    v24 = v43[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_41;
      v24 = v43[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v42)
        {
LABEL_41:
          swift_release();
          v3 = v41;
          if ((v47 & 1) == 0)
            goto LABEL_48;
          goto LABEL_44;
        }
        v24 = v43[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_50;
            if (v18 >= v42)
              goto LABEL_41;
            v24 = v43[v18];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v18 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v45 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v47 & 1) != 0)
    {
      sub_1000126EC(v27, (uint64_t)v8, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      sub_10005972C(v27, (uint64_t)v8, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_retain();
    }
    Hasher.init(_seed:)(v48);
    v29 = type metadata accessor for UUID(0);
    v30 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v48, v29, v30);
    type metadata accessor for BeaconIdentifier(0);
    dispatch thunk of Hashable.hash(into:)(v48, v29, v30);
    if (v8[*(int *)(v46 + 20)])
    {
      if (v8[*(int *)(v46 + 20)] == 1)
      {
        v31 = 0xE900000000000079;
        v32 = 0x7261646E6F636553;
      }
      else
      {
        v31 = 0xEF736E6F69746163;
        v32 = 0x6F4C657275636553;
      }
    }
    else
    {
      v31 = 0xE700000000000000;
      v32 = 0x7972616D697250;
    }
    v9 = v44;
    String.hash(into:)(v48, v32, v31);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v33 = -1 << *(_BYTE *)(v11 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_49;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v41;
  v23 = v43;
  if ((v47 & 1) == 0)
    goto LABEL_48;
LABEL_44:
  v40 = 1 << *(_BYTE *)(v9 + 32);
  if (v40 >= 64)
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v40;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_48:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_100A8D5F8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111690);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_41;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
      v23 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v18);
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v8 + 40), v22, 1);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v22;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_100A8D8A8(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111680);
}

uint64_t sub_100A8D8B4(uint64_t a1, uint64_t a2)
{
  return sub_100A8D8D8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111688, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A8D8D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t result;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD *v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  unint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  v55 = a5;
  v56 = a6;
  v8 = v6;
  v54 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v48 - v13;
  v15 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_10001A9A8(a4);
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v52 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v50 = v8;
  v51 = (unint64_t)(v18 + 63) >> 6;
  v22 = a2;
  v23 = v16 + 64;
  v57 = v15;
  result = swift_retain();
  v25 = 0;
  v49 = v22;
  v26 = 16;
  if ((v22 & 1) != 0)
    v26 = 32;
  v53 = v26;
  while (1)
  {
    if (v21)
    {
      v28 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v29 = v28 | (v25 << 6);
      goto LABEL_26;
    }
    v30 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v30 >= v51)
      break;
    v31 = v52;
    v32 = v52[v30];
    ++v25;
    if (!v32)
    {
      v25 = v30 + 1;
      if (v30 + 1 >= v51)
        goto LABEL_36;
      v32 = v52[v25];
      if (!v32)
      {
        v33 = v30 + 2;
        if (v33 >= v51)
        {
LABEL_36:
          v46 = v57;
          swift_release();
          v8 = v50;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v32 = v52[v33];
        if (!v32)
        {
          while (1)
          {
            v25 = v33 + 1;
            if (__OFADD__(v33, 1))
              goto LABEL_45;
            if (v25 >= v51)
              goto LABEL_36;
            v32 = v52[v25];
            ++v33;
            if (v32)
              goto LABEL_25;
          }
        }
        v25 = v33;
      }
    }
LABEL_25:
    v21 = (v32 - 1) & v32;
    v29 = __clz(__rbit64(v32)) + (v25 << 6);
LABEL_26:
    v34 = v57;
    v35 = *(_QWORD *)(v12 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + v53))(v14, *(_QWORD *)(v57 + 48) + v35 * v29, v11);
    v36 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v29);
    v37 = *(_QWORD *)(v17 + 40);
    v38 = sub_100006C64(v55, 255, v54, v56);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v17 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v23 + 8 * (v40 >> 6))) != 0)
    {
      v27 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v23 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v23 + 8 * v41);
      }
      while (v45 == -1);
      v27 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v23 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v35 * v27, v14, v11);
    *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v27) = v36;
    ++*(_QWORD *)(v17 + 16);
  }
  v46 = v57;
  swift_release();
  v8 = v50;
  v31 = v52;
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v46 + 32);
  if (v47 >= 64)
    bzero(v31, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v31 = -1 << v47;
  *(_QWORD *)(v46 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v8 = v17;
  return result;
}

uint64_t sub_100A8DC68(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for DeviceEvent, (uint64_t *)&unk_101111A20);
}

uint64_t sub_100A8DC7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD);

  v6 = v4;
  v54 = a3;
  v9 = a3(0);
  v51 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v53 = (uint64_t)&v47 - v10;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A9A8(a4);
  v52 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v49 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v47 = v6;
  v48 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v28 >= v48)
      break;
    v29 = v49;
    v30 = v49[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v48)
        goto LABEL_36;
      v30 = v49[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v48)
        {
LABEL_36:
          swift_release(v15);
          v6 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v49[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v48)
              goto LABEL_36;
            v30 = v49[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      v34 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v51 + 72);
      sub_1000126EC(v34 + v35 * v27, v53, v54);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      v36 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v51 + 72);
      sub_10005972C(v36 + v35 * v27, v53, v54);
    }
    v37 = *(_QWORD *)(v17 + 40);
    v38 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v17 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v22 + 8 * v41);
      }
      while (v45 == -1);
      v25 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    result = sub_1000126EC(v53, *(_QWORD *)(v17 + 56) + v35 * v25, v54);
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release(v15);
  v6 = v47;
  v29 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v46 = 1 << *(_BYTE *)(v15 + 32);
  if (v46 >= 64)
    bzero(v29, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v46;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  result = swift_release(v15);
  *v6 = v17;
  return result;
}

uint64_t sub_100A8E074(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v42 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(&qword_101111A18);
  v43 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v39 = v3;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v41 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release();
          v3 = v39;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v40)
              goto LABEL_36;
            v25 = v41[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v42 + 72);
    v28 = *(_QWORD *)(v9 + 56) + v27 * v22;
    v29 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v22 + 8);
    v44 = *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    if ((v43 & 1) != 0)
    {
      sub_1000126EC(v28, (uint64_t)v8, type metadata accessor for LocalFindableAccessoryRecord);
    }
    else
    {
      sub_10005972C(v28, (uint64_t)v8, type metadata accessor for LocalFindableAccessoryRecord);
      sub_10001BBBC(v44, v29);
    }
    Hasher.init(_seed:)(v45);
    Data.hash(into:)(v45, v44, v29);
    result = Hasher._finalize()();
    v30 = -1 << *(_BYTE *)(v11 + 32);
    v31 = result & ~v30;
    v32 = v31 >> 6;
    if (((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v16 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      v20 = v44;
    }
    else
    {
      v33 = 0;
      v34 = (unint64_t)(63 - v30) >> 6;
      v20 = v44;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v35 = v32 == v34;
        if (v32 == v34)
          v32 = 0;
        v33 |= v35;
        v36 = *(_QWORD *)(v16 + 8 * v32);
      }
      while (v36 == -1);
      v19 = __clz(__rbit64(~v36)) + (v32 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19) = v20;
    result = sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 56) + v27 * v19, type metadata accessor for LocalFindableAccessoryRecord);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v9 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_100A8E3FC(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for BeaconEstimatedLocation, &qword_101111650);
}

uint64_t sub_100A8E410(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t i;
  char v42;
  __int128 v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111658);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v39)
      break;
    v24 = v40;
    v25 = v40[v23];
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_36;
      v25 = v40[v14];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release();
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v40[v26];
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v39)
              goto LABEL_36;
            v25 = v40[v14];
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 32 * v22);
    v33 = *v32;
    v34 = v32[1];
    v35 = v32[2];
    v36 = v32[3];
    v43 = v31;
    v37 = *((_QWORD *)&v31 + 1);
    if ((v42 & 1) == 0)
    {
      sub_10001BBBC(v31, *((unint64_t *)&v31 + 1));
      sub_10001BBBC(v33, v34);
      sub_10001BBBC(v35, v36);
    }
    Hasher.init(_seed:)(v44);
    sub_10001BBBC(v43, v37);
    Data.hash(into:)(v44, v43, v37);
    sub_10001BC14(v43, v37);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v43;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      v19 = v43;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18) = v19;
    v20 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 32 * v18);
    *v20 = v33;
    v20[1] = v34;
    v20[2] = v35;
    v20[3] = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v24 = v40;
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A8E77C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111660);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v39 = v3;
  v40 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v40)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v41 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v40)
        goto LABEL_36;
      v26 = *(_QWORD *)(v41 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_36:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v41 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v40)
              goto LABEL_36;
            v26 = *(_QWORD *)(v41 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v32);
    v34 = *(_QWORD *)(v5 + 56) + v32;
    v35 = *(_QWORD *)v34;
    v36 = *(_BYTE *)(v34 + 8);
    v43 = v33;
    v37 = *((_QWORD *)&v33 + 1);
    if ((v42 & 1) == 0)
      sub_10001BBBC(v33, *((unint64_t *)&v33 + 1));
    Hasher.init(_seed:)(v44);
    sub_10001BBBC(v43, v37);
    Data.hash(into:)(v44, v43, v37);
    sub_10001BC14(v43, v37);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v43;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      v19 = v43;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v20 = 16 * v18;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + v20) = v19;
    v21 = *(_QWORD *)(v8 + 56) + v20;
    *(_QWORD *)v21 = v35;
    *(_BYTE *)(v21 + 8) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v39;
  v25 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A8EACC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;

  v5 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v2;
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111668);
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v8, a1, a2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release();
    v38 = v41;
LABEL_44:
    *v38 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 64);
  v43 = (_QWORD *)(v8 + 64);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v42 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  HIDWORD(v40) = a2;
  v18 = 16;
  if ((a2 & 1) != 0)
    v18 = 32;
  v44 = v18;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v21 = v20 | (v17 << 6);
      goto LABEL_26;
    }
    v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v22 >= v42)
    {
      swift_release();
      v38 = v41;
      v23 = v43;
      if ((v40 & 0x100000000) != 0)
      {
LABEL_39:
        v39 = 1 << *(_BYTE *)(v8 + 32);
        if (v39 >= 64)
          bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v23 = -1 << v39;
        *(_QWORD *)(v8 + 16) = 0;
      }
LABEL_43:
      result = swift_release();
      goto LABEL_44;
    }
    v23 = v43;
    v24 = v43[v22];
    ++v17;
    if (!v24)
    {
      v17 = v22 + 1;
      if (v22 + 1 >= v42)
        goto LABEL_36;
      v24 = v43[v17];
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_26:
    v26 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + v44))(v7, *(_QWORD *)(v8 + 48) + v26 * v21, v5);
    v27 = v8;
    v28 = *(_BYTE *)(*(_QWORD *)(v8 + 56) + v21);
    v29 = *(_QWORD *)(v10 + 40);
    v30 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v5, v30);
    v31 = -1 << *(_BYTE *)(v10 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v10 + 48) + v26 * v19, v7, v5);
    *(_BYTE *)(*(_QWORD *)(v10 + 56) + v19) = v28;
    ++*(_QWORD *)(v10 + 16);
    v8 = v27;
  }
  v25 = v22 + 2;
  if (v25 >= v42)
  {
LABEL_36:
    swift_release();
    v38 = v41;
    if ((v40 & 0x100000000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
  v24 = v43[v25];
  if (v24)
  {
    v17 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v17 >= v42)
      goto LABEL_36;
    v24 = v43[v17];
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

uint64_t sub_100A8EE6C(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111678);
}

uint64_t sub_100A8EE78(uint64_t a1, uint64_t a2)
{
  return sub_100A8EE84(a1, a2, &qword_101111D88);
}

uint64_t sub_100A8EE84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_10001A9A8(a3);
  v47 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v45 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v5;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      break;
    v26 = v45;
    v27 = v45[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_36;
      v27 = v45[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v44)
        {
LABEL_36:
          swift_release();
          v5 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v45[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v44)
              goto LABEL_36;
            v27 = v45[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v31 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v31 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v24);
    }
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v8, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v22) = v31;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release();
  v5 = v43;
  v26 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 >= 64)
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v5 = v14;
  return result;
}

uint64_t sub_100A8F220(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111CF8, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A8F244(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111D38);
}

uint64_t sub_100A8F250(uint64_t a1, uint64_t a2)
{
  return sub_100A8F264(a1, a2, &qword_1010EF1F0, (uint64_t *)&unk_101111D50);
}

uint64_t sub_100A8F264(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[4];
  int v49;
  uint64_t *v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;

  v6 = v4;
  v9 = sub_10001A9A8(a3);
  v57 = *(_QWORD *)(v9 - 8);
  v58 = v9;
  __chkstk_darwin(v9);
  v56 = &v48[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = &v48[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A9A8(a4);
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (!*(_QWORD *)(v14 + 16))
    goto LABEL_43;
  v17 = 1 << *(_BYTE *)(v14 + 32);
  v18 = *(_QWORD *)(v14 + 64);
  v52 = (_QWORD *)(v14 + 64);
  if (v17 < 64)
    v19 = ~(-1 << v17);
  else
    v19 = -1;
  v20 = v19 & v18;
  v50 = v6;
  v51 = (unint64_t)(v17 + 63) >> 6;
  v21 = v15 + 64;
  v54 = v14;
  result = swift_retain();
  v23 = 0;
  v49 = a2;
  v24 = 16;
  if ((a2 & 1) != 0)
    v24 = 32;
  v53 = v24;
  v25 = v24;
  while (1)
  {
    if (v20)
    {
      v27 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v28 = v27 | (v23 << 6);
      goto LABEL_26;
    }
    v29 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v29 >= v51)
      break;
    v30 = v52;
    v31 = v52[v29];
    ++v23;
    if (!v31)
    {
      v23 = v29 + 1;
      if (v29 + 1 >= v51)
        goto LABEL_36;
      v31 = v52[v23];
      if (!v31)
      {
        v32 = v29 + 2;
        if (v32 >= v51)
        {
LABEL_36:
          v46 = v54;
          swift_release();
          v6 = v50;
          if ((v49 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v31 = v52[v32];
        if (!v31)
        {
          while (1)
          {
            v23 = v32 + 1;
            if (__OFADD__(v32, 1))
              goto LABEL_45;
            if (v23 >= v51)
              goto LABEL_36;
            v31 = v52[v23];
            ++v32;
            if (v31)
              goto LABEL_25;
          }
        }
        v23 = v32;
      }
    }
LABEL_25:
    v20 = (v31 - 1) & v31;
    v28 = __clz(__rbit64(v31)) + (v23 << 6);
LABEL_26:
    v33 = v54;
    v34 = *(_QWORD *)(v55 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v55 + v25))(v13, *(_QWORD *)(v54 + 48) + v34 * v28, v11);
    v35 = *(_QWORD *)(v33 + 56);
    v36 = *(_QWORD *)(v57 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v57 + v25))(v56, v35 + v36 * v28, v58);
    v37 = *(_QWORD *)(v16 + 40);
    v38 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v16 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v21 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v21 + 8 * v41);
      }
      while (v45 == -1);
      v26 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v21 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v55 + 32))(*(_QWORD *)(v16 + 48) + v34 * v26, v13, v11);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v57 + 32))(*(_QWORD *)(v16 + 56) + v36 * v26, v56, v58);
    ++*(_QWORD *)(v16 + 16);
  }
  v46 = v54;
  swift_release();
  v6 = v50;
  v30 = v52;
  if ((v49 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v47 = 1 << *(_BYTE *)(v46 + 32);
  if (v47 >= 64)
    bzero(v30, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v30 = -1 << v47;
  *(_QWORD *)(v46 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v6 = v16;
  return result;
}

uint64_t sub_100A8F664(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt64 v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  __int128 v32;
  uint64_t v33[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111D30);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v30 = v3;
    v31 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v13)
          goto LABEL_36;
        v22 = v31[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v13)
            goto LABEL_36;
          v22 = v31[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v30;
                goto LABEL_43;
              }
              v29 = 1 << *(_BYTE *)(v5 + 32);
              if (v29 >= 64)
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v31 = -1 << v29;
              v3 = v30;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v31[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v13)
                  goto LABEL_36;
                v22 = v31[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v32 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0)
        sub_10001BBBC(v32, *((unint64_t *)&v32 + 1));
      Hasher.init(_seed:)(v33);
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v17 == v25;
          if (v17 == v25)
            v17 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v28;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18) = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A8F93C(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_1011041C0);
}

uint64_t sub_100A8F948(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_1011041D0);
}

uint64_t sub_100A8F954(uint64_t a1, uint64_t a2)
{
  return sub_100A95B7C(a1, a2, (uint64_t *)&unk_101111DF0);
}

uint64_t sub_100A8F960(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  _BYTE v40[56];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101104148);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v14 << 6);
      goto LABEL_25;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v19 >= v36)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v14;
    if (!v21)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v36)
        goto LABEL_37;
      v21 = *(_QWORD *)(v37 + 8 * v14);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v36)
        {
LABEL_37:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v14 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_46;
            if (v14 >= v36)
              goto LABEL_37;
            v21 = *(_QWORD *)(v37 + 8 * v14);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v14 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_25:
    v23 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = *(_QWORD *)(v5 + 56) + 48 * v18;
    if ((v38 & 1) != 0)
    {
      sub_10050DE28(v26, (uint64_t)v40);
    }
    else
    {
      sub_100AA497C(v26, (uint64_t)v40);
      swift_bridgeObjectRetain(v24);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v25, v24);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v15 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
    *v16 = v25;
    v16[1] = v24;
    result = sub_10050DE28((uint64_t)v40, *(_QWORD *)(v8 + 56) + 48 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v20 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_100A8FC84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111CA0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A8FF8C(uint64_t a1, uint64_t a2)
{
  return sub_100A90364(a1, a2, type metadata accessor for SecureLocation, &qword_101111CB0);
}

uint64_t sub_100A8FFA0(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111518);
}

uint64_t sub_100A8FFAC(uint64_t a1, uint64_t a2)
{
  return sub_100A8EE84(a1, a2, &qword_10110C6F0);
}

uint64_t sub_100A8FFB8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111CB8);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_retain();
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100A90350(uint64_t a1, uint64_t a2)
{
  return sub_100A90364(a1, a2, type metadata accessor for SecureLocationsSubscription, &qword_101111CA8);
}

uint64_t sub_100A90364(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int64_t v45;
  _QWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t (*v49)(_QWORD);
  _QWORD v50[9];

  v6 = v4;
  v49 = a3;
  v9 = a3(0);
  v47 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - v10;
  v12 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A9A8(a4);
  v48 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v46 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v44 = v6;
  v45 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v25 = v24 | (v21 << 6);
      goto LABEL_24;
    }
    v26 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v45)
      break;
    v27 = v46;
    v28 = v46[v26];
    ++v21;
    if (!v28)
    {
      v21 = v26 + 1;
      if (v26 + 1 >= v45)
        goto LABEL_36;
      v28 = v46[v21];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v45)
        {
LABEL_36:
          swift_release();
          v6 = v44;
          if ((v48 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v46[v29];
        if (!v28)
        {
          while (1)
          {
            v21 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v21 >= v45)
              goto LABEL_36;
            v28 = v46[v21];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v21 = v29;
      }
    }
LABEL_23:
    v18 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_24:
    v30 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * v25);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v47 + 72);
    v34 = *(_QWORD *)(v12 + 56) + v33 * v25;
    if ((v48 & 1) != 0)
    {
      sub_1000126EC(v34, (uint64_t)v11, v49);
    }
    else
    {
      sub_10005972C(v34, (uint64_t)v11, v49);
      swift_bridgeObjectRetain(v31);
    }
    Hasher.init(_seed:)(v50);
    String.hash(into:)(v50, v32, v31);
    result = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v14 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v19 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v19 + 8 * v37);
      }
      while (v41 == -1);
      v22 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    v23 = (_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v22);
    *v23 = v32;
    v23[1] = v31;
    result = sub_1000126EC((uint64_t)v11, *(_QWORD *)(v14 + 56) + v33 * v22, v49);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release();
  v6 = v44;
  v27 = v46;
  if ((v48 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v12 + 32);
  if (v42 >= 64)
    bzero(v27, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v42;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v6 = v14;
  return result;
}

uint64_t sub_100A906D8(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111D00, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A906FC(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t *)&unk_101111D08, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A90720(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111CF0, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A90744(uint64_t a1, uint64_t a2)
{
  return sub_100A90364(a1, a2, type metadata accessor for MultipartAccessoryPairingInfo, (uint64_t *)&unk_1011119D0);
}

uint64_t sub_100A90758(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  int64_t v49;
  _QWORD *v50;
  void (**v51)(char *, unint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t (**v57)(unint64_t, char *, uint64_t);
  unint64_t v58;
  int64_t v59;
  char *v60;
  _QWORD v61[10];

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v60 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = v2;
  v11 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011114A0);
  v56 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
  {
    result = swift_release();
    v45 = v48;
LABEL_45:
    *v45 = v13;
    return result;
  }
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v50 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v49 = (unint64_t)(v14 + 63) >> 6;
  v51 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  v57 = (uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32);
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  v52 = v11;
  v53 = v13;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v23 = (v17 - 1) & v17;
      v24 = v22 | (v20 << 6);
      goto LABEL_24;
    }
    v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v25 >= v49)
    {
      swift_release();
      v45 = v48;
      v26 = v50;
      if ((v56 & 1) != 0)
      {
LABEL_40:
        v46 = 1 << *(_BYTE *)(v11 + 32);
        if (v46 >= 64)
          bzero(v26, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v26 = -1 << v46;
        *(_QWORD *)(v11 + 16) = 0;
      }
LABEL_44:
      result = swift_release();
      goto LABEL_45;
    }
    v26 = v50;
    v27 = v50[v25];
    ++v20;
    if (!v27)
    {
      v20 = v25 + 1;
      if (v25 + 1 >= v49)
        goto LABEL_37;
      v27 = v50[v20];
      if (!v27)
        break;
    }
LABEL_23:
    v23 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v54 + 72);
    v30 = *(_QWORD *)(v11 + 48) + v29 * v24;
    v58 = v23;
    v59 = v20;
    if ((v56 & 1) != 0)
    {
      sub_1000126EC(v30, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      v31 = (void (**)(char *, unint64_t, uint64_t))v57;
    }
    else
    {
      sub_10005972C(v30, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
      v31 = v51;
    }
    v32 = *(_QWORD *)(v11 + 56);
    v33 = v6;
    v34 = *(_QWORD *)(v6 + 72);
    v35 = v5;
    (*v31)(v60, v32 + v34 * v24, v5);
    v13 = v53;
    Hasher.init(_seed:)(v61);
    v36 = type metadata accessor for UUID(0);
    v37 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v61, v36, v37);
    dispatch thunk of Hashable.hash(into:)(v61, v36, v37);
    result = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(v13 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v18 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      v5 = v35;
      v6 = v33;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      v5 = v35;
      v6 = v33;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v18 + 8 * v40);
      }
      while (v44 == -1);
      v21 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    sub_1000126EC((uint64_t)v10, *(_QWORD *)(v13 + 48) + v29 * v21, type metadata accessor for BeaconIdentifier);
    result = (*v57)(*(_QWORD *)(v13 + 56) + v34 * v21, v60, v5);
    ++*(_QWORD *)(v13 + 16);
    v11 = v52;
    v17 = v58;
    v20 = v59;
  }
  v28 = v25 + 2;
  if (v28 >= v49)
  {
LABEL_37:
    swift_release();
    v45 = v48;
    if ((v56 & 1) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v27 = v50[v28];
  if (v27)
  {
    v20 = v28;
    goto LABEL_23;
  }
  while (1)
  {
    v20 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v20 >= v49)
      goto LABEL_37;
    v27 = v50[v20];
    ++v28;
    if (v27)
      goto LABEL_23;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_100A90BE4(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t *)&unk_1011116E8, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A90C08(uint64_t a1, uint64_t a2)
{
  return sub_100A92F6C(a1, a2, &qword_1010EF1D0, (uint64_t *)&unk_101111CD0);
}

uint64_t sub_100A90C1C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111DA8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v31 = v3;
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(char *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34);
      Hasher._combine(_:)(qword_100E5A2B0[v28]);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A90EF4(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for BeaconState, &qword_101111DA0);
}

uint64_t sub_100A90F08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  int v51;
  __int128 v52;
  __int128 v53;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011042A0);
  v51 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_44;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v49 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v47 = v2;
  v48 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  v20 = v10;
  for (i = v10; ; v20 = i)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v25 >= v48)
      break;
    v26 = v49;
    v27 = v49[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v48)
        goto LABEL_37;
      v27 = v49[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v48)
        {
LABEL_37:
          swift_release();
          v3 = v47;
          if ((v51 & 1) == 0)
            goto LABEL_44;
          goto LABEL_38;
        }
        v27 = v49[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_46;
            if (v19 >= v48)
              goto LABEL_37;
            v27 = v49[v19];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v19 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v7 + 72);
    v30 = *(_QWORD *)(v20 + 48) + v29 * v24;
    if ((v51 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v30, v6);
      v31 = *(_QWORD *)(v20 + 56) + 40 * v24;
      v32 = *(_QWORD *)v31;
      v33 = *(_OWORD *)(v31 + 8);
      v52 = *(_OWORD *)(v31 + 24);
      v53 = v33;
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v30, v6);
      v34 = *(_QWORD *)(v20 + 56) + 40 * v24;
      v32 = *(_QWORD *)v34;
      v35 = *(_OWORD *)(v34 + 8);
      v52 = *(_OWORD *)(v34 + 24);
      v53 = v35;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(*((_QWORD *)&v53 + 1));
    }
    v36 = *(_QWORD *)(v12 + 40);
    v37 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v36, v6, v37);
    v38 = -1 << *(_BYTE *)(v12 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v17 + 8 * (v39 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v17 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v17 + 8 * v40);
      }
      while (v44 == -1);
      v21 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v29 * v21, v9, v6);
    v22 = *(_QWORD *)(v12 + 56) + 40 * v21;
    *(_QWORD *)v22 = v32;
    *(_OWORD *)(v22 + 8) = v53;
    *(_OWORD *)(v22 + 24) = v52;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v47;
  v26 = v49;
  if ((v51 & 1) == 0)
    goto LABEL_44;
LABEL_38:
  v45 = 1 << *(_BYTE *)(i + 32);
  if (v45 >= 64)
    bzero(v26, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v45;
  *(_QWORD *)(i + 16) = 0;
LABEL_44:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_100A91300(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int64_t v61;
  char *v62;
  uint64_t v63;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD **)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011118F8);
  v57 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v62 = v9;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v54 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v52 = v2;
  v53 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  v55 = v10;
  v56 = v7;
  v63 = v6;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v24 = v23 | (v19 << 6);
      goto LABEL_24;
    }
    v25 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v53)
      break;
    v26 = v54;
    v27 = v54[v25];
    ++v19;
    if (!v27)
    {
      v19 = v25 + 1;
      if (v25 + 1 >= v53)
        goto LABEL_36;
      v27 = v54[v19];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v53)
        {
LABEL_36:
          swift_release(v10);
          v3 = v52;
          if ((v57 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v54[v28];
        if (!v27)
        {
          while (1)
          {
            v19 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v19 >= v53)
              goto LABEL_36;
            v27 = v54[v19];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v19 = v28;
      }
    }
LABEL_23:
    v16 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v19 << 6);
LABEL_24:
    v29 = v7[9];
    v30 = *(_QWORD *)(v10 + 48) + v29 * v24;
    v61 = v19;
    if ((v57 & 1) != 0)
    {
      v31 = (void (*)(char *, unint64_t, uint64_t))v7[4];
      v32 = v63;
      v31(v62, v30, v63);
      v33 = *(_QWORD *)(v10 + 56) + 48 * v24;
      v35 = *(_QWORD *)v33;
      v34 = *(_QWORD *)(v33 + 8);
      v36 = *(_QWORD *)(v33 + 24);
      v59 = *(_QWORD *)(v33 + 16);
      v60 = v34;
      v58 = *(unsigned __int8 *)(v33 + 32);
      v37 = *(_QWORD *)(v33 + 40);
    }
    else
    {
      v38 = (void (*)(char *, unint64_t, uint64_t))v7[2];
      v32 = v63;
      v38(v62, v30, v63);
      v39 = *(_QWORD *)(v10 + 56) + 48 * v24;
      v35 = *(_QWORD *)v39;
      v40 = *(_QWORD *)(v39 + 8);
      v36 = *(_QWORD *)(v39 + 24);
      v59 = *(_QWORD *)(v39 + 16);
      v60 = v40;
      v58 = *(unsigned __int8 *)(v39 + 32);
      v37 = *(_QWORD *)(v39 + 40);
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRetain(v37);
      swift_retain();
    }
    v41 = *(_QWORD *)(v12 + 40);
    v42 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v41, v32, v42);
    v43 = -1 << *(_BYTE *)(v12 + 32);
    v44 = result & ~v43;
    v45 = v44 >> 6;
    if (((-1 << v44) & ~*(_QWORD *)(v17 + 8 * (v44 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v44) & ~*(_QWORD *)(v17 + 8 * (v44 >> 6)))) | v44 & 0x7FFFFFFFFFFFFFC0;
      v7 = v56;
    }
    else
    {
      v46 = 0;
      v47 = (unint64_t)(63 - v43) >> 6;
      v7 = v56;
      do
      {
        if (++v45 == v47 && (v46 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v48 = v45 == v47;
        if (v45 == v47)
          v45 = 0;
        v46 |= v48;
        v49 = *(_QWORD *)(v17 + 8 * v45);
      }
      while (v49 == -1);
      v20 = __clz(__rbit64(~v49)) + (v45 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v7[4])(*(_QWORD *)(v12 + 48) + v29 * v20, v62, v63);
    v21 = *(_QWORD *)(v12 + 56) + 48 * v20;
    v22 = v60;
    v19 = v61;
    *(_QWORD *)v21 = v35;
    *(_QWORD *)(v21 + 8) = v22;
    *(_QWORD *)(v21 + 16) = v59;
    *(_QWORD *)(v21 + 24) = v36;
    *(_BYTE *)(v21 + 32) = v58;
    *(_QWORD *)(v21 + 40) = v37;
    ++*(_QWORD *)(v12 + 16);
    v10 = v55;
  }
  swift_release(v10);
  v3 = v52;
  v26 = v54;
  if ((v57 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v50 = 1 << *(_BYTE *)(v10 + 32);
  if (v50 >= 64)
    bzero(v26, ((unint64_t)(v50 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v50;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_100A91718(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _QWORD v46[9];

  v3 = v2;
  v6 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011116C8);
  v45 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v41 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v39 = v2;
  v40 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  v42 = v9;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v40)
      break;
    v23 = v41;
    v24 = v41[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v40)
        goto LABEL_36;
      v24 = v41[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_36:
          swift_release();
          v3 = v39;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v18 >= v40)
              goto LABEL_36;
            v24 = v41[v18];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v18 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v43 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v45 & 1) != 0)
    {
      sub_1000126EC(v27, (uint64_t)v8, type metadata accessor for ManagedCBPeripheralManager.KeyType);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      sub_10005972C(v27, (uint64_t)v8, type metadata accessor for ManagedCBPeripheralManager.KeyType);
      v28 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    Hasher.init(_seed:)(v46);
    v29 = type metadata accessor for UUID(0);
    v30 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v46, v29, v30);
    dispatch thunk of Hashable.hash(into:)(v46, v29, v30);
    result = Hasher._finalize()();
    v31 = -1 << *(_BYTE *)(v11 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v16 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
      v9 = v42;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      v9 = v42;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v16 + 8 * v33);
      }
      while (v37 == -1);
      v19 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19, type metadata accessor for ManagedCBPeripheralManager.KeyType);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v39;
  v23 = v41;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v9 + 32);
  if (v38 >= 64)
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v38;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_100A91B00(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  _QWORD *v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  _QWORD v70[10];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v58 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v64 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v63 = *((_QWORD *)v11 - 1);
  __chkstk_darwin(v11);
  v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011116E0);
  v65 = a2;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (*(_QWORD *)(v14 + 16))
  {
    v61 = v6;
    v62 = v7;
    v55 = v2;
    v17 = 1 << *(_BYTE *)(v14 + 32);
    v18 = *(_QWORD *)(v14 + 64);
    v57 = (_QWORD *)(v14 + 64);
    if (v17 < 64)
      v19 = ~(-1 << v17);
    else
      v19 = -1;
    v20 = v19 & v18;
    v56 = (unint64_t)(v17 + 63) >> 6;
    v60 = v15 + 64;
    result = swift_retain();
    v22 = 0;
    v59 = v14;
    while (1)
    {
      if (v20)
      {
        v37 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v38 = v37 | (v22 << 6);
      }
      else
      {
        v39 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        v40 = v57;
        if (v39 >= v56)
          goto LABEL_29;
        v41 = v57[v39];
        ++v22;
        if (!v41)
        {
          v22 = v39 + 1;
          if (v39 + 1 >= v56)
            goto LABEL_29;
          v41 = v57[v22];
          if (!v41)
          {
            v42 = v39 + 2;
            if (v42 >= v56)
            {
LABEL_29:
              swift_release();
              if ((v65 & 1) == 0)
              {
                result = swift_release();
                v3 = v55;
                goto LABEL_36;
              }
              v54 = 1 << *(_BYTE *)(v14 + 32);
              if (v54 >= 64)
                bzero(v40, ((unint64_t)(v54 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v40 = -1 << v54;
              v3 = v55;
              *(_QWORD *)(v14 + 16) = 0;
              break;
            }
            v41 = v57[v42];
            if (!v41)
            {
              while (1)
              {
                v22 = v42 + 1;
                if (__OFADD__(v42, 1))
                  goto LABEL_38;
                if (v22 >= v56)
                  goto LABEL_29;
                v41 = v57[v22];
                ++v42;
                if (v41)
                  goto LABEL_23;
              }
            }
            v22 = v42;
          }
        }
LABEL_23:
        v20 = (v41 - 1) & v41;
        v38 = __clz(__rbit64(v41)) + (v22 << 6);
      }
      v43 = *(_QWORD *)(v63 + 72);
      v44 = *(_QWORD *)(v14 + 48) + v43 * v38;
      v45 = 24 * v38;
      v69 = v22;
      if ((v65 & 1) != 0)
      {
        sub_1000126EC(v44, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        v46 = *(_QWORD *)(v14 + 56) + v45;
        v47 = *(_QWORD *)v46;
        v67 = *(_QWORD *)(v46 + 8);
        v68 = v47;
        v66 = *(unsigned __int8 *)(v46 + 16);
      }
      else
      {
        sub_10005972C(v44, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        v48 = *(_QWORD *)(v14 + 56) + v45;
        v49 = *(_QWORD *)v48;
        v67 = *(_QWORD *)(v48 + 8);
        v68 = v49;
        v66 = *(unsigned __int8 *)(v48 + 16);
        swift_bridgeObjectRetain(v67);
      }
      Hasher.init(_seed:)(v70);
      v50 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = v61;
      dispatch thunk of Hashable.hash(into:)(v70, v61, v50);
      dispatch thunk of Hashable.hash(into:)(v70, v51, v50);
      v52 = v64;
      sub_10000F9B8((uint64_t)&v13[v11[6]], v64, &qword_1010ED860);
      v53 = v62;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v52, 1, v51) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v23 = v58;
        (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v58, v52, v51);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)(v70, v51, v50);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v23, v51);
      }
      v14 = v59;
      v24 = type metadata accessor for Date(0);
      v25 = sub_100006C64((unint64_t *)&unk_1010ED800, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(v70, v24, v25);
      v26 = &v13[v11[8]];
      v27 = *(_QWORD *)v26;
      v28 = *((_QWORD *)v26 + 1);
      swift_bridgeObjectRetain(v28);
      String.hash(into:)(v70, v27, v28);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(_DWORD *)&v13[v11[9]]);
      v29 = &v13[v11[10]];
      v30 = *(_QWORD *)v29;
      v31 = *((_QWORD *)v29 + 1);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v70, v30, v31);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v13[v11[11]]);
      Hasher._combine(_:)(v13[v11[12]]);
      v32 = Hasher._finalize()();
      v33 = v60;
      v34 = _HashTable.nextHole(atOrAfter:)(v32 & ~(-1 << *(_BYTE *)(v16 + 32)), v60, ~(-1 << *(_BYTE *)(v16 + 32)));
      *(_QWORD *)(v33 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      result = sub_1000126EC((uint64_t)v13, *(_QWORD *)(v16 + 48) + v43 * v34, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v35 = *(_QWORD *)(v16 + 56) + 24 * v34;
      v22 = v69;
      v36 = v67;
      *(_QWORD *)v35 = v68;
      *(_QWORD *)(v35 + 8) = v36;
      *(_BYTE *)(v35 + 16) = v66;
      ++*(_QWORD *)(v16 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v16;
  return result;
}

uint64_t sub_100A92088(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  int64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  _QWORD *v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int64_t v61;
  _QWORD v62[10];

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v52 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v58 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v57 = *((_QWORD *)v11 - 1);
  __chkstk_darwin(v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011116D8);
  v59 = a2;
  v15 = static _DictionaryStorage.resize(original:capacity:move:)(v14, a1, a2);
  v16 = v15;
  if (*(_QWORD *)(v14 + 16))
  {
    v55 = v6;
    v56 = v7;
    v49 = v2;
    v17 = 1 << *(_BYTE *)(v14 + 32);
    v18 = *(_QWORD *)(v14 + 64);
    v51 = (_QWORD *)(v14 + 64);
    if (v17 < 64)
      v19 = ~(-1 << v17);
    else
      v19 = -1;
    v20 = v19 & v18;
    v50 = (unint64_t)(v17 + 63) >> 6;
    v54 = v15 + 64;
    result = swift_retain();
    v22 = 0;
    v53 = v14;
    while (1)
    {
      if (v20)
      {
        v35 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v36 = v35 | (v22 << 6);
      }
      else
      {
        v37 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        v38 = v51;
        if (v37 >= v50)
          goto LABEL_29;
        v39 = v51[v37];
        ++v22;
        if (!v39)
        {
          v22 = v37 + 1;
          if (v37 + 1 >= v50)
            goto LABEL_29;
          v39 = v51[v22];
          if (!v39)
          {
            v40 = v37 + 2;
            if (v40 >= v50)
            {
LABEL_29:
              swift_release();
              if ((v59 & 1) == 0)
              {
                result = swift_release();
                v3 = v49;
                goto LABEL_36;
              }
              v47 = 1 << *(_BYTE *)(v14 + 32);
              if (v47 >= 64)
                bzero(v38, ((unint64_t)(v47 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v47;
              v3 = v49;
              *(_QWORD *)(v14 + 16) = 0;
              break;
            }
            v39 = v51[v40];
            if (!v39)
            {
              while (1)
              {
                v22 = v40 + 1;
                if (__OFADD__(v40, 1))
                  goto LABEL_38;
                if (v22 >= v50)
                  goto LABEL_29;
                v39 = v51[v22];
                ++v40;
                if (v39)
                  goto LABEL_23;
              }
            }
            v22 = v40;
          }
        }
LABEL_23:
        v20 = (v39 - 1) & v39;
        v36 = __clz(__rbit64(v39)) + (v22 << 6);
      }
      v41 = *(_QWORD *)(v57 + 72);
      v42 = *(_QWORD *)(v14 + 48) + v41 * v36;
      v61 = v22;
      if ((v59 & 1) != 0)
      {
        sub_1000126EC(v42, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        v60 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v36);
      }
      else
      {
        sub_10005972C(v42, (uint64_t)v13, type metadata accessor for ManagedCBPeripheralBeaconInfo);
        v60 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v36);
        swift_bridgeObjectRetain(v60);
      }
      Hasher.init(_seed:)(v62);
      v43 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = v55;
      dispatch thunk of Hashable.hash(into:)(v62, v55, v43);
      dispatch thunk of Hashable.hash(into:)(v62, v44, v43);
      v45 = v58;
      sub_10000F9B8((uint64_t)&v13[v11[6]], v58, &qword_1010ED860);
      v46 = v56;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v45, 1, v44) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v23 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v52, v45, v44);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)(v62, v44, v43);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v23, v44);
      }
      v14 = v53;
      v24 = type metadata accessor for Date(0);
      v25 = sub_100006C64((unint64_t *)&unk_1010ED800, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(v62, v24, v25);
      v26 = &v13[v11[8]];
      v27 = *(_QWORD *)v26;
      v28 = *((_QWORD *)v26 + 1);
      swift_bridgeObjectRetain(v28);
      String.hash(into:)(v62, v27, v28);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(*(_DWORD *)&v13[v11[9]]);
      v29 = &v13[v11[10]];
      v30 = *(_QWORD *)v29;
      v31 = *((_QWORD *)v29 + 1);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v62, v30, v31);
      swift_bridgeObjectRelease();
      Hasher._combine(_:)(v13[v11[11]]);
      Hasher._combine(_:)(v13[v11[12]]);
      v32 = Hasher._finalize()();
      v33 = v54;
      v34 = _HashTable.nextHole(atOrAfter:)(v32 & ~(-1 << *(_BYTE *)(v16 + 32)), v54, ~(-1 << *(_BYTE *)(v16 + 32)));
      *(_QWORD *)(v33 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      result = sub_1000126EC((uint64_t)v13, *(_QWORD *)(v16 + 48) + v41 * v34, type metadata accessor for ManagedCBPeripheralBeaconInfo);
      v22 = v61;
      *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v34) = v60;
      ++*(_QWORD *)(v16 + 16);
    }
  }
  result = swift_release();
LABEL_36:
  *v3 = v16;
  return result;
}

uint64_t sub_100A925CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011116D0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v3;
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v36 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v36 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v22);
    v37 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22 + 8);
    if ((a2 & 1) == 0)
    {
      sub_10001BBBC(v37, v32);
      v33 = v31;
    }
    Hasher.init(_seed:)(v38);
    Data.hash(into:)(v38, v37, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v20 = v37;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      v20 = v37;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19) = v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v31;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v35;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v24, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A928D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011117E8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34);
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A92BA0(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101111550);
}

uint64_t sub_100A92BAC(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for BeaconNamingRecord, (uint64_t *)&unk_101111478);
}

uint64_t sub_100A92BC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011116A0);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release();
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_100A92F58(uint64_t a1, uint64_t a2)
{
  return sub_100A92F6C(a1, a2, &qword_1010EF168, (uint64_t *)&unk_101111590);
}

uint64_t sub_100A92F6C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  _QWORD *v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;

  v6 = v4;
  v54 = a3;
  v9 = sub_10001A9A8(a3);
  v51 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v53 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_10001A9A8(a4);
  v52 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_43;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v49 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v47 = v6;
  v48 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v27 = v26 | (v24 << 6);
      goto LABEL_24;
    }
    v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v28 >= v48)
      break;
    v29 = v49;
    v30 = v49[v28];
    ++v24;
    if (!v30)
    {
      v24 = v28 + 1;
      if (v28 + 1 >= v48)
        goto LABEL_36;
      v30 = v49[v24];
      if (!v30)
      {
        v31 = v28 + 2;
        if (v31 >= v48)
        {
LABEL_36:
          swift_release();
          v6 = v47;
          if ((v52 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v30 = v49[v31];
        if (!v30)
        {
          while (1)
          {
            v24 = v31 + 1;
            if (__OFADD__(v31, 1))
              goto LABEL_45;
            if (v24 >= v48)
              goto LABEL_36;
            v30 = v49[v24];
            ++v31;
            if (v30)
              goto LABEL_23;
          }
        }
        v24 = v31;
      }
    }
LABEL_23:
    v21 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_24:
    v32 = *(_QWORD *)(v12 + 72);
    v33 = *(_QWORD *)(v15 + 48) + v32 * v27;
    if ((v52 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 32))(v14, v33, v11);
      v34 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v51 + 72);
      sub_100005CF0(v34 + v35 * v27, v53, v54);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
      v36 = *(_QWORD *)(v15 + 56);
      v35 = *(_QWORD *)(v51 + 72);
      sub_10000F9B8(v36 + v35 * v27, v53, v54);
    }
    v37 = *(_QWORD *)(v17 + 40);
    v38 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v11, v38);
    v39 = -1 << *(_BYTE *)(v17 + 32);
    v40 = result & ~v39;
    v41 = v40 >> 6;
    if (((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v40) & ~*(_QWORD *)(v22 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v42 = 0;
      v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v44 = v41 == v43;
        if (v41 == v43)
          v41 = 0;
        v42 |= v44;
        v45 = *(_QWORD *)(v22 + 8 * v41);
      }
      while (v45 == -1);
      v25 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(*(_QWORD *)(v17 + 48) + v32 * v25, v14, v11);
    result = sub_100005CF0(v53, *(_QWORD *)(v17 + 56) + v35 * v25, v54);
    ++*(_QWORD *)(v17 + 16);
  }
  swift_release();
  v6 = v47;
  v29 = v49;
  if ((v52 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v46 = 1 << *(_BYTE *)(v15 + 32);
  if (v46 >= 64)
    bzero(v29, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v29 = -1 << v46;
  *(_QWORD *)(v15 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v6 = v17;
  return result;
}

uint64_t sub_100A93368(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42[9];

  v3 = v2;
  v6 = type metadata accessor for StableIdentifier(0);
  v40 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(&qword_10110AB08);
  v41 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v39 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v37 = v3;
  v38 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v21 = v20 | (v18 << 6);
      goto LABEL_24;
    }
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v38)
      break;
    v23 = v39;
    v24 = v39[v22];
    ++v18;
    if (!v24)
    {
      v18 = v22 + 1;
      if (v22 + 1 >= v38)
        goto LABEL_36;
      v24 = v39[v18];
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = v39[v25];
        if (!v24)
        {
          while (1)
          {
            v18 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v18 >= v38)
              goto LABEL_36;
            v24 = v39[v18];
            ++v25;
            if (v24)
              goto LABEL_23;
          }
        }
        v18 = v25;
      }
    }
LABEL_23:
    v15 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v18 << 6);
LABEL_24:
    v26 = *(_QWORD *)(v40 + 72);
    v27 = *(_QWORD *)(v9 + 48) + v26 * v21;
    if ((v41 & 1) != 0)
    {
      sub_1000126EC(v27, (uint64_t)v8, type metadata accessor for StableIdentifier);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    }
    else
    {
      sub_10005972C(v27, (uint64_t)v8, type metadata accessor for StableIdentifier);
      v28 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v42);
    sub_100C70898();
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v11 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v16 + 8 * v31);
      }
      while (v35 == -1);
      v19 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 48) + v26 * v19, type metadata accessor for StableIdentifier);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v19) = v28;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v37;
  v23 = v39;
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v9 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_100A936E4(uint64_t a1, uint64_t a2)
{
  return sub_100A936F8(a1, a2, type metadata accessor for BeaconStoreFileRecord, &qword_101111640);
}

uint64_t sub_100A936F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int v47;

  v7 = v4;
  v10 = a3(0);
  v46 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A9A8(a4);
  v47 = a2;
  v14 = static _DictionaryStorage.resize(original:capacity:move:)(v13, a1, a2);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_43;
  v43 = v7;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 64);
  v45 = (_QWORD *)(v13 + 64);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v44 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 64;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_24;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v26 >= v44)
      break;
    v27 = v45;
    v28 = v45[v26];
    ++v22;
    if (!v28)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v44)
        goto LABEL_36;
      v28 = v45[v22];
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v44)
        {
LABEL_36:
          swift_release();
          v7 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v45[v29];
        if (!v28)
        {
          while (1)
          {
            v22 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_45;
            if (v22 >= v44)
              goto LABEL_36;
            v28 = v45[v22];
            ++v29;
            if (v28)
              goto LABEL_23;
          }
        }
        v22 = v29;
      }
    }
LABEL_23:
    v19 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_24:
    v30 = *(void **)(*(_QWORD *)(v13 + 48) + 8 * v25);
    v31 = *(_QWORD *)(v46 + 72);
    v32 = *(_QWORD *)(v13 + 56) + v31 * v25;
    if ((v47 & 1) != 0)
    {
      sub_1000126EC(v32, (uint64_t)v12, a3);
    }
    else
    {
      sub_10005972C(v32, (uint64_t)v12, a3);
      v33 = v30;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v15 + 40));
    v34 = -1 << *(_BYTE *)(v15 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v20 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v20 + 8 * v36);
      }
      while (v40 == -1);
      v23 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v23) = v30;
    result = sub_1000126EC((uint64_t)v12, *(_QWORD *)(v15 + 56) + v31 * v23, a3);
    ++*(_QWORD *)(v15 + 16);
  }
  swift_release();
  v7 = v43;
  v27 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v41 = 1 << *(_BYTE *)(v13 + 32);
  if (v41 >= 64)
    bzero(v27, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v41;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v7 = v15;
  return result;
}

uint64_t sub_100A93A44(uint64_t a1, uint64_t a2)
{
  return sub_100A93A50(a1, a2, &qword_101104240);
}

uint64_t sub_100A93A50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v33, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v4 = v9;
  return result;
}

uint64_t sub_100A93D60(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111D78);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v23 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v24 = v23 | (v16 << 6);
      }
      else
      {
        v25 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v25 >= v13)
          goto LABEL_36;
        v26 = v10[v25];
        ++v16;
        if (!v26)
        {
          v16 = v25 + 1;
          if (v25 + 1 >= v13)
            goto LABEL_36;
          v26 = v10[v16];
          if (!v26)
          {
            v27 = v25 + 2;
            if (v27 >= v13)
            {
LABEL_36:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v36;
                goto LABEL_43;
              }
              v35 = 1 << *(_BYTE *)(v5 + 32);
              if (v35 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v35;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v26 = v10[v27];
            if (!v26)
            {
              while (1)
              {
                v16 = v27 + 1;
                if (__OFADD__(v27, 1))
                  goto LABEL_45;
                if (v16 >= v13)
                  goto LABEL_36;
                v26 = v10[v16];
                ++v27;
                if (v26)
                  goto LABEL_33;
              }
            }
            v16 = v27;
          }
        }
LABEL_33:
        v12 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v16 << 6);
      }
      v32 = 16 * v24;
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + v32);
      v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v32);
      v38 = v33;
      v34 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v32 + 8);
      if ((a2 & 1) == 0)
      {
        sub_10001BBBC(v33, *((unint64_t *)&v33 + 1));
        sub_10001BBBC(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)(v39);
      Data.hash(into:)(v39, v38, v34);
      result = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
        v21 = v38;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v17) >> 6;
        v21 = v38;
        do
        {
          if (++v19 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v30 = v19 == v29;
          if (v19 == v29)
            v19 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v31 == -1);
        v20 = __clz(__rbit64(~v31)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v22 = 16 * v20;
      *(_OWORD *)(*(_QWORD *)(v8 + 48) + v22) = v21;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + v22) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A94074(uint64_t a1, uint64_t a2)
{
  return sub_100A8F264(a1, a2, &qword_101111940, &qword_101111948);
}

uint64_t sub_100A94088(uint64_t a1, uint64_t a2)
{
  return sub_100A89E64(a1, a2, &qword_1011119F8, (void (*)(unint64_t, _BYTE *))sub_10000F9FC);
}

uint64_t sub_100A9409C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011119F0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A943A4(uint64_t a1, uint64_t a2)
{
  return sub_100A943C8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, &qword_101104208, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress);
}

uint64_t sub_100A943C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t *v6;
  uint64_t *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  int64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t i;
  uint64_t (*v56)(uint64_t);
  unint64_t *v57;
  uint64_t v58;
  int v59;

  v57 = a5;
  v58 = a6;
  v8 = v6;
  v56 = a3;
  v11 = a3(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v50 - v13;
  v15 = *v8;
  if (*(_QWORD *)(*v8 + 24) > a1)
    a1 = *(_QWORD *)(*v8 + 24);
  sub_10001A9A8(a4);
  v59 = a2;
  v16 = static _DictionaryStorage.resize(original:capacity:move:)(v15, a1, a2);
  v17 = v16;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_41;
  v51 = v8;
  v18 = 1 << *(_BYTE *)(v15 + 32);
  v19 = *(_QWORD *)(v15 + 64);
  v53 = (_QWORD *)(v15 + 64);
  if (v18 < 64)
    v20 = ~(-1 << v18);
  else
    v20 = -1;
  v21 = v20 & v19;
  v52 = (unint64_t)(v18 + 63) >> 6;
  v22 = v16 + 64;
  result = swift_retain();
  v24 = 0;
  v54 = v12;
  for (i = v15; ; v15 = i)
  {
    if (v21)
    {
      v28 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      v29 = v28 | (v24 << 6);
      goto LABEL_24;
    }
    v30 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v30 >= v52)
      goto LABEL_36;
    v31 = v53[v30];
    ++v24;
    if (!v31)
    {
      v24 = v30 + 1;
      if (v30 + 1 >= v52)
        goto LABEL_36;
      v31 = v53[v24];
      if (!v31)
        break;
    }
LABEL_23:
    v21 = (v31 - 1) & v31;
    v29 = __clz(__rbit64(v31)) + (v24 << 6);
LABEL_24:
    v33 = v12;
    v34 = *(_QWORD *)(v12 + 72);
    v35 = *(_QWORD *)(v15 + 48) + v34 * v29;
    if ((v59 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v33 + 32))(v14, v35, v11);
      v36 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v29);
      v38 = *v36;
      v37 = v36[1];
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v14, v35, v11);
      v39 = (uint64_t *)(*(_QWORD *)(v15 + 56) + 16 * v29);
      v38 = *v39;
      v37 = v39[1];
      sub_10001BBBC(*v39, v37);
    }
    v40 = *(_QWORD *)(v17 + 40);
    v41 = sub_100006C64(v57, 255, v56, v58);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v40, v11, v41);
    v42 = -1 << *(_BYTE *)(v17 + 32);
    v43 = result & ~v42;
    v44 = v43 >> 6;
    if (((-1 << v43) & ~*(_QWORD *)(v22 + 8 * (v43 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v43) & ~*(_QWORD *)(v22 + 8 * (v43 >> 6)))) | v43 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v45 = 0;
      v46 = (unint64_t)(63 - v42) >> 6;
      do
      {
        if (++v44 == v46 && (v45 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v47 = v44 == v46;
        if (v44 == v46)
          v44 = 0;
        v45 |= v47;
        v48 = *(_QWORD *)(v22 + 8 * v44);
      }
      while (v48 == -1);
      v25 = __clz(__rbit64(~v48)) + (v44 << 6);
    }
    *(_QWORD *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v26 = *(_QWORD *)(v17 + 48) + v34 * v25;
    v12 = v54;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v54 + 32))(v26, v14, v11);
    v27 = (uint64_t *)(*(_QWORD *)(v17 + 56) + 16 * v25);
    *v27 = v38;
    v27[1] = v37;
    ++*(_QWORD *)(v17 + 16);
  }
  v32 = v30 + 2;
  if (v32 < v52)
  {
    v31 = v53[v32];
    if (!v31)
    {
      while (1)
      {
        v24 = v32 + 1;
        if (__OFADD__(v32, 1))
          goto LABEL_43;
        if (v24 >= v52)
          goto LABEL_36;
        v31 = v53[v24];
        ++v32;
        if (v31)
          goto LABEL_23;
      }
    }
    v24 = v32;
    goto LABEL_23;
  }
LABEL_36:
  swift_release();
  v8 = v51;
  if ((v59 & 1) != 0)
  {
    v49 = 1 << *(_BYTE *)(v15 + 32);
    if (v49 >= 64)
      bzero(v53, ((unint64_t)(v49 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v53 = -1 << v49;
    *(_QWORD *)(v15 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v8 = v17;
  return result;
}

uint64_t sub_100A9475C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  __int128 v33;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011041A0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v32 = v3;
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v22 >= v14)
          goto LABEL_36;
        v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v14)
            goto LABEL_36;
          v23 = v10[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v32;
                goto LABEL_43;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v14)
                  goto LABEL_36;
                v23 = v10[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v13 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v33 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0)
        swift_retain();
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v29);
      v16 = -1 << *(_BYTE *)(v8 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v18 == v26;
          if (v18 == v26)
            v18 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v19) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A94A0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011119E8);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v5 + 64);
  v34 = v3;
  v35 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v35)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v35)
        goto LABEL_36;
      v25 = *(_QWORD *)(v36 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v35)
        {
LABEL_36:
          swift_release();
          v3 = v34;
          if ((v7 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v35)
              goto LABEL_36;
            v25 = *(_QWORD *)(v36 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v22);
    v37 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v22 + 8);
    if ((v7 & 1) == 0)
      sub_10001BBBC(v37, v32);
    Hasher.init(_seed:)(v38);
    sub_10001BBBC(v37, v32);
    Data.hash(into:)(v38, v37, v32);
    sub_10001BC14(v37, v32);
    result = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      v20 = v37;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      v20 = v37;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19) = v20;
    *(_BYTE *)(*(_QWORD *)(v9 + 56) + v19) = v31;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v3 = v34;
  v24 = (_QWORD *)(v5 + 64);
  if ((v7 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v9;
  return result;
}

uint64_t sub_100A94D38(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111968, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A94D5C(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for SafeLocation, &qword_101111960);
}

uint64_t sub_100A94D70(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 *v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101104278);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 24 * v21);
    v31 = *v30;
    v33 = *((_QWORD *)v30 + 1);
    v32 = *((_QWORD *)v30 + 2);
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(*((_QWORD *)v30 + 2));
      swift_retain();
    }
    Hasher.init(_seed:)(v40);
    Hasher._combine(_:)(v31);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v40, v33, v32);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v8 + 48) + 24 * v18;
    *(_BYTE *)v19 = v31;
    *(_QWORD *)(v19 + 8) = v33;
    *(_QWORD *)(v19 + 16) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A950B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t i;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v3 = v2;
  v6 = type metadata accessor for BeaconScanner.AISLookupState(0);
  v49 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v51 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111930);
  v50 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v47 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v45 = v3;
  v46 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v46)
      break;
    v26 = v47;
    v27 = v47[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v46)
        goto LABEL_36;
      v27 = v47[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_36:
          swift_release();
          v3 = v45;
          if ((v50 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v46)
              goto LABEL_36;
            v27 = v47[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v31 = *(_QWORD *)(v12 + 56);
      v32 = *(_QWORD *)(v49 + 72);
      sub_1000126EC(v31 + v32 * v24, v51, type metadata accessor for BeaconScanner.AISLookupState);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v33 = *(_QWORD *)(v12 + 56);
      v32 = *(_QWORD *)(v49 + 72);
      sub_10005972C(v33 + v32 * v24, v51, type metadata accessor for BeaconScanner.AISLookupState);
    }
    v34 = *(_QWORD *)(v14 + 40);
    v35 = sub_10010F990();
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v8, v35);
    v36 = -1 << *(_BYTE *)(v14 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v19 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v19 + 8 * v38);
      }
      while (v42 == -1);
      v22 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    result = sub_1000126EC(v51, *(_QWORD *)(v14 + 56) + v32 * v22, type metadata accessor for BeaconScanner.AISLookupState);
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release();
  v3 = v45;
  v26 = v47;
  if ((v50 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v43 = 1 << *(_BYTE *)(v12 + 32);
  if (v43 >= 64)
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v43;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v14;
  return result;
}

uint64_t sub_100A954A8(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for SharedBeaconRecord, (uint64_t *)&unk_101111910);
}

uint64_t sub_100A954BC(uint64_t a1, uint64_t a2)
{
  return sub_100A8F264(a1, a2, &qword_101111900, &qword_101111908);
}

uint64_t sub_100A954D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111888);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v10 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v11 = ~(-1 << v9);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v9 + 63) >> 6;
    v14 = v7 + 64;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v12)
      {
        v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v22 = v21 | (v16 << 6);
      }
      else
      {
        v23 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v23 >= v13)
          goto LABEL_36;
        v24 = v10[v23];
        ++v16;
        if (!v24)
        {
          v16 = v23 + 1;
          if (v23 + 1 >= v13)
            goto LABEL_36;
          v24 = v10[v16];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_36:
              swift_release();
              if ((a2 & 1) == 0)
              {
                result = swift_release();
                v3 = v33;
                goto LABEL_43;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                v16 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_45;
                if (v16 >= v13)
                  goto LABEL_36;
                v24 = v10[v16];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v16 = v25;
          }
        }
LABEL_33:
        v12 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v16 << 6);
      }
      v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v22);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        v31 = v30;
        sub_10001BBBC(v34, *((unint64_t *)&v34 + 1));
      }
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = result & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v19 == v27;
          if (v19 == v27)
            v19 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v19);
        }
        while (v29 == -1);
        v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_100A957A4(uint64_t a1, uint64_t a2)
{
  return sub_100A8EE84(a1, a2, &qword_101111878);
}

uint64_t sub_100A957B0(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111870, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A957D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  int v42;
  __int128 v43;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111880);
  v42 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v41 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v39 = v2;
  v40 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain();
  v19 = 0;
  while (1)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = v41;
    v25 = v41[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_36;
      v25 = v41[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_36:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v41[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v40)
              goto LABEL_36;
            v25 = v41[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v43 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v43 = *(_OWORD *)(*(_QWORD *)(v10 + 56) + 16 * v22);
      swift_retain();
    }
    v29 = *(_QWORD *)(v12 + 40);
    v30 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v6, v30);
    v31 = -1 << *(_BYTE *)(v12 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v17 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v17 + 8 * v33);
      }
      while (v37 == -1);
      v20 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v20) = v43;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = v41;
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v10 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v12;
  return result;
}

uint64_t sub_100A95B70(uint64_t a1, uint64_t a2)
{
  return sub_100A95B7C(a1, a2, (uint64_t *)&unk_101111528);
}

uint64_t sub_100A95B7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10001A9A8(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v38 = v4;
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 64;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v12)
    {
      v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v13)
      break;
    v25 = (_QWORD *)(v6 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v16;
    if (!v26)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v16);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          v4 = v38;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v16 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v16 >= v13)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v16);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v16 = v27;
      }
    }
LABEL_33:
    v12 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v16 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(void **)(*(_QWORD *)(v6 + 48) + v32);
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + v32);
    if ((a2 & 1) == 0)
    {
      v35 = v33;
      v36 = v34;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
    v17 = -1 << *(_BYTE *)(v9 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v14 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v14 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v14 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v38;
  v25 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v6 + 32);
  if (v37 >= 64)
    bzero(v25, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v37;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

uint64_t sub_100A95E48(uint64_t a1, uint64_t a2)
{
  return sub_100A95E70(a1, a2, &qword_101111638, (void (*)(uint64_t, uint64_t))sub_1002437C4);
}

uint64_t sub_100A95E5C(uint64_t a1, uint64_t a2)
{
  return sub_100A95E70(a1, a2, &qword_101111630, (void (*)(uint64_t, uint64_t))sub_1009022B8);
}

uint64_t sub_100A95E70(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  char v41;

  v5 = v4;
  v7 = *v4;
  if (*(_QWORD *)(*v4 + 24) <= a1)
    v8 = a1;
  else
    v8 = *(_QWORD *)(*v4 + 24);
  sub_10001A9A8(a3);
  v41 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v7, v8, a2);
  v10 = v9;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_43;
  v11 = 1 << *(_BYTE *)(v7 + 32);
  v39 = v7 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v7 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 64;
  result = swift_retain();
  v17 = 0;
  while (1)
  {
    if (v13)
    {
      v23 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v24 = v23 | (v17 << 6);
      goto LABEL_34;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v14)
      break;
    v26 = (_QWORD *)(v7 + 64);
    v27 = *(_QWORD *)(v39 + 8 * v25);
    ++v17;
    if (!v27)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v14)
        goto LABEL_36;
      v27 = *(_QWORD *)(v39 + 8 * v17);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v14)
        {
LABEL_36:
          swift_release();
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v39 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v17 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v17 >= v14)
              goto LABEL_36;
            v27 = *(_QWORD *)(v39 + 8 * v17);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v17 = v28;
      }
    }
LABEL_33:
    v13 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v17 << 6);
LABEL_34:
    v33 = *(void **)(*(_QWORD *)(v7 + 48) + 8 * v24);
    v34 = *(_QWORD *)(v7 + 56) + 16 * v24;
    v35 = *(_QWORD *)v34;
    v36 = *(unsigned __int8 *)(v34 + 8);
    if ((v41 & 1) == 0)
    {
      v37 = v33;
      a4(v35, v36);
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
    v18 = -1 << *(_BYTE *)(v10 + 32);
    v19 = result & ~v18;
    v20 = v19 >> 6;
    if (((-1 << v19) & ~*(_QWORD *)(v15 + 8 * (v19 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v18) >> 6;
      do
      {
        if (++v20 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v20 == v30;
        if (v20 == v30)
          v20 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v15 + 8 * v20);
      }
      while (v32 == -1);
      v21 = __clz(__rbit64(~v32)) + (v20 << 6);
    }
    *(_QWORD *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v33;
    v22 = *(_QWORD *)(v10 + 56) + 16 * v21;
    *(_QWORD *)v22 = v35;
    *(_BYTE *)(v22 + 8) = v36;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release();
  v26 = (_QWORD *)(v7 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v7 + 32);
  if (v38 >= 64)
    bzero(v26, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v38;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v5 = v10;
  return result;
}

unint64_t sub_100A96164(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t result;
  int64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD *v29;
  __int128 v30[4];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111558);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v28 = v3;
    v29 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = v7 + 64;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v15 << 6);
      }
      else
      {
        v20 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_33:
          __break(1u);
          return result;
        }
        if (v20 >= v12)
          goto LABEL_26;
        v21 = v29[v20];
        ++v15;
        if (!v21)
        {
          v15 = v20 + 1;
          if (v20 + 1 >= v12)
            goto LABEL_26;
          v21 = v29[v15];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_26:
              swift_release();
              v3 = v28;
              if ((a2 & 1) != 0)
              {
                v27 = 1 << *(_BYTE *)(v5 + 32);
                if (v27 > 63)
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v29 = -1 << v27;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_33;
                if (v15 >= v12)
                  goto LABEL_26;
                v21 = v29[v15];
                ++v22;
                if (v21)
                  goto LABEL_23;
              }
            }
            v15 = v22;
          }
        }
LABEL_23:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v15 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(v5 + 48);
      v25 = *(_QWORD *)(v24 + v23);
      v26 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v24 + v23));
      Hasher.init(_seed:)(v30);
      sub_100AA44BC(v30, v25);
      v16 = Hasher._finalize()();
      result = _HashTable.nextHole(atOrAfter:)(v16 & ~(-1 << *(_BYTE *)(v8 + 32)), v8 + 64, ~(-1 << *(_BYTE *)(v8 + 32)));
      *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v17 = 8 * result;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v25;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v26;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A963C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 *v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_1011118A0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v37 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v14 << 6);
      }
      else
      {
        v22 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v22 >= v36)
          goto LABEL_36;
        v23 = v37[v22];
        ++v14;
        if (!v23)
        {
          v14 = v22 + 1;
          if (v22 + 1 >= v36)
            goto LABEL_36;
          v23 = v37[v14];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              swift_release();
              v3 = v35;
              if ((v38 & 1) != 0)
              {
                v34 = 1 << *(_BYTE *)(v5 + 32);
                if (v34 >= 64)
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v37 = -1 << v34;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                v14 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_43;
                if (v14 >= v36)
                  goto LABEL_36;
                v23 = v37[v14];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v14 = v24;
          }
        }
LABEL_33:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v14 << 6);
      }
      v29 = (unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 24 * v21);
      v30 = *v29;
      v32 = *((_QWORD *)v29 + 1);
      v31 = *((_QWORD *)v29 + 2);
      v33 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v21);
      if ((v38 & 1) == 0)
        swift_bridgeObjectRetain(*((_QWORD *)v29 + 2));
      Hasher.init(_seed:)(v39);
      Hasher._combine(_:)(v30);
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v39, v32, v31);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = result & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = *(_QWORD *)(v8 + 48) + 24 * v18;
      *(_BYTE *)v19 = v30;
      *(_QWORD *)(v19 + 8) = v32;
      *(_QWORD *)(v19 + 16) = v31;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v18) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A966F0(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_101111858, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A96714(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for AccessoryFirmwareUpdateStateInfo, &qword_101111848);
}

uint64_t sub_100A96728(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for AccessoryFirmwareUpdateCommandInfo, &qword_101111850);
}

uint64_t sub_100A9673C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8((uint64_t *)&unk_101111830);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v39)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v40 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_36;
      v25 = *(_QWORD *)(v40 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release();
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v40 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v39)
              goto LABEL_36;
            v25 = *(_QWORD *)(v40 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = (char *)(*(_QWORD *)(v5 + 56) + 2 * v22);
    v35 = *v34;
    v36 = v34[1];
    if ((v41 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v42);
    String.hash(into:)(v42, v33, v32);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = (_BYTE *)(*(_QWORD *)(v8 + 56) + 2 * v18);
    *v20 = v35;
    v20[1] = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v38;
  v24 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A96A58(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111828);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v5 + 56) + 24 * v22;
    v35 = *(_QWORD *)v34;
    v41 = *(_OWORD *)(v34 + 8);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(*((_QWORD *)&v41 + 1));
    }
    Hasher.init(_seed:)(v42);
    String.hash(into:)(v42, v33, v32);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 24 * v18;
    *(_QWORD *)v20 = v35;
    *(_OWORD *)(v20 + 8) = v41;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A96D98(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  void (**v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  void (**v48)(char *, unint64_t, uint64_t);
  uint64_t v49;
  uint64_t i;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t (**v54)(unint64_t, char *, uint64_t);
  unsigned __int8 *v55;
  char *v56;
  _QWORD v57[10];

  v3 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v56 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  v51 = *(_QWORD *)(v9 - 8);
  v52 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111820);
  v53 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_41;
  v45 = v2;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v47 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v46 = (unint64_t)(v15 + 63) >> 6;
  v48 = (void (**)(char *, unint64_t, uint64_t))(v7 + 16);
  v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32);
  v19 = v13 + 64;
  result = swift_retain();
  v21 = 0;
  v55 = (unsigned __int8 *)v11;
  v49 = v7;
  for (i = v12; ; v12 = i)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46)
      goto LABEL_36;
    v26 = v47[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v46)
        goto LABEL_36;
      v26 = v47[v21];
      if (!v26)
        break;
    }
LABEL_23:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v51 + 72);
    v29 = *(_QWORD *)(v12 + 48) + v28 * v24;
    v30 = v55;
    if ((v53 & 1) != 0)
    {
      sub_1000126EC(v29, (uint64_t)v55, type metadata accessor for ShareAttemptTracker.AttemptKey);
      v31 = (void (**)(char *, unint64_t, uint64_t))v54;
    }
    else
    {
      sub_10005972C(v29, (uint64_t)v55, type metadata accessor for ShareAttemptTracker.AttemptKey);
      v31 = v48;
    }
    v32 = *(_QWORD *)(v7 + 72);
    v33 = *(_QWORD *)(v12 + 56) + v32 * v24;
    v34 = v6;
    (*v31)(v56, v33, v6);
    Hasher.init(_seed:)(v57);
    Hasher._combine(_:)(*v30);
    v35 = type metadata accessor for UUID(0);
    v36 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v57, v35, v36);
    result = Hasher._finalize()();
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      v6 = v34;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      v6 = v34;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v39);
      }
      while (v43 == -1);
      v22 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    sub_1000126EC((uint64_t)v55, *(_QWORD *)(v14 + 48) + v28 * v22, type metadata accessor for ShareAttemptTracker.AttemptKey);
    result = (*v54)(*(_QWORD *)(v14 + 56) + v32 * v22, v56, v6);
    ++*(_QWORD *)(v14 + 16);
    v7 = v49;
  }
  v27 = v25 + 2;
  if (v27 < v46)
  {
    v26 = v47[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_43;
        if (v21 >= v46)
          goto LABEL_36;
        v26 = v47[v21];
        ++v27;
        if (v26)
          goto LABEL_23;
      }
    }
    v21 = v27;
    goto LABEL_23;
  }
LABEL_36:
  swift_release();
  v3 = v45;
  if ((v53 & 1) != 0)
  {
    v44 = 1 << *(_BYTE *)(v12 + 32);
    if (v44 >= 64)
      bzero(v47, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v47 = -1 << v44;
    *(_QWORD *)(v12 + 16) = 0;
  }
LABEL_41:
  result = swift_release();
  *v3 = v14;
  return result;
}

uint64_t sub_100A971D4(uint64_t a1, uint64_t a2)
{
  return sub_100A8EE84(a1, a2, &qword_101111818);
}

uint64_t sub_100A971E0(uint64_t a1, uint64_t a2)
{
  return sub_100A87F60(a1, a2, &qword_101104198);
}

uint64_t sub_100A971EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  unsigned __int8 *v30;
  Swift::UInt v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111578);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (unsigned __int8 *)(*(_QWORD *)(v5 + 48) + 24 * v21);
    v31 = *v30;
    v33 = *((_QWORD *)v30 + 1);
    v32 = *((_QWORD *)v30 + 2);
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(*((_QWORD *)v30 + 2));
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v40);
    Hasher._combine(_:)(v31);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v40, v33, v32);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = *(_QWORD *)(v8 + 48) + 24 * v18;
    *(_BYTE *)v19 = v31;
    *(_QWORD *)(v19 + 8) = v33;
    *(_QWORD *)(v19 + 16) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v8;
  return result;
}

uint64_t sub_100A9752C(uint64_t a1, uint64_t a2)
{
  return sub_100A8DC7C(a1, a2, type metadata accessor for OwnerSharingCircle, &qword_1011117C8);
}

uint64_t sub_100A97540(uint64_t a1, uint64_t a2)
{
  return sub_100A97558(a1, a2, &qword_101104230);
}

uint64_t sub_100A9754C(uint64_t a1, uint64_t a2)
{
  return sub_100A97558(a1, a2, &qword_1011114F0);
}

uint64_t sub_100A97558(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD v49[9];

  v5 = v3;
  v8 = type metadata accessor for BeaconKeyManager.FileKey(0);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_10001A9A8(a3);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_46;
  v43 = v5;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  result = swift_retain();
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v24 >= v44)
      goto LABEL_41;
    v25 = v45[v24];
    ++v20;
    if (!v25)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v44)
        goto LABEL_41;
      v25 = v45[v20];
      if (!v25)
        break;
    }
LABEL_23:
    v17 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v20 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v46 + 72);
    v28 = *(_QWORD *)(v11 + 48) + v27 * v23;
    if ((v48 & 1) != 0)
    {
      sub_1000126EC(v28, (uint64_t)v10, type metadata accessor for BeaconKeyManager.FileKey);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
    }
    else
    {
      sub_10005972C(v28, (uint64_t)v10, type metadata accessor for BeaconKeyManager.FileKey);
      v29 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    Hasher.init(_seed:)(v49);
    v30 = type metadata accessor for UUID(0);
    v31 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v49, v30, v31);
    if (v10[*(int *)(v47 + 20)])
    {
      if (v10[*(int *)(v47 + 20)] == 1)
      {
        v32 = 0xE900000000000079;
        v33 = 0x7261646E6F636553;
      }
      else
      {
        v32 = 0xEF736E6F69746163;
        v33 = 0x6F4C657275636553;
      }
    }
    else
    {
      v32 = 0xE700000000000000;
      v33 = 0x7972616D697250;
    }
    String.hash(into:)(v49, v33, v32);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v34 = -1 << *(_BYTE *)(v13 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v18 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v36);
      }
      while (v40 == -1);
      v21 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    result = sub_1000126EC((uint64_t)v10, *(_QWORD *)(v13 + 48) + v27 * v21, type metadata accessor for BeaconKeyManager.FileKey);
    *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v21) = v29;
    ++*(_QWORD *)(v13 + 16);
  }
  v26 = v24 + 2;
  if (v26 < v44)
  {
    v25 = v45[v26];
    if (!v25)
    {
      while (1)
      {
        v20 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_48;
        if (v20 >= v44)
          goto LABEL_41;
        v25 = v45[v20];
        ++v26;
        if (v25)
          goto LABEL_23;
      }
    }
    v20 = v26;
    goto LABEL_23;
  }
LABEL_41:
  swift_release(v11);
  v5 = v43;
  if ((v48 & 1) != 0)
  {
    v41 = 1 << *(_BYTE *)(v11 + 32);
    if (v41 >= 64)
      bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v45 = -1 << v41;
    *(_QWORD *)(v11 + 16) = 0;
  }
LABEL_46:
  result = swift_release(v11);
  *v5 = v13;
  return result;
}

uint64_t sub_100A9797C(uint64_t a1, uint64_t a2)
{
  return sub_100A8EE84(a1, a2, (uint64_t *)&unk_101111740);
}

uint64_t sub_100A97988(uint64_t a1, uint64_t a2)
{
  return sub_100A88AA8(a1, a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t *)&unk_101111D40, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100A979AC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  int v47;
  uint64_t v48;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101111738);
  v47 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v45 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v43 = v2;
  v44 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain();
  v18 = 0;
  for (i = v9; ; v9 = i)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v44)
        goto LABEL_36;
      v25 = v45[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v44)
        {
LABEL_36:
          swift_release();
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v45[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v44)
              goto LABEL_36;
            v25 = v45[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v48 + 72);
    v28 = *(_QWORD *)(v9 + 48) + v27 * v22;
    if ((v47 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v8, v28, v6);
      v29 = *(_QWORD *)(v9 + 56) + 16 * v22;
      v30 = *(_BYTE *)v29;
      v31 = *(_QWORD *)(v29 + 8);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v8, v28, v6);
      v32 = *(_QWORD *)(v9 + 56) + 16 * v22;
      v30 = *(_BYTE *)v32;
      v31 = *(_QWORD *)(v32 + 8);
      swift_retain();
    }
    v33 = *(_QWORD *)(v11 + 40);
    v34 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v6, v34);
    v35 = -1 << *(_BYTE *)(v11 + 32);
    v36 = result & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v16 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v16 + 8 * v37);
      }
      while (v41 == -1);
      v19 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v48 + 32))(*(_QWORD *)(v11 + 48) + v27 * v19, v8, v6);
    v20 = *(_QWORD *)(v11 + 56) + 16 * v19;
    *(_BYTE *)v20 = v30;
    *(_QWORD *)(v20 + 8) = v31;
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release();
  v3 = v43;
  v24 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v9 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release();
  *v3 = v11;
  return result;
}

uint64_t sub_100A97D6C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return sub_100A97EE8(a1, a2, a3, a4, a5, type metadata accessor for MultipartAccessoryPairingInfo);
}

uint64_t sub_100A97D78(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v8 = (_QWORD *)(a5[6] + 16 * a1);
  *v8 = a2;
  v8[1] = a3;
  v9 = a5[7];
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  result = sub_100005CF0(a4, v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, (uint64_t *)&unk_1010F9890);
  v12 = a5[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a5[2] = v14;
  return result;
}

_OWORD *sub_100A97E14(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10010F90C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_100A97E8C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t sub_100A97EDC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return sub_100A97EE8(a1, a2, a3, a4, a5, type metadata accessor for OwnedBeaconGroup.PairingState);
}

uint64_t sub_100A97EE8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t (*a6)(_QWORD))
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = (_QWORD *)(a5[6] + 16 * a1);
  *v10 = a2;
  v10[1] = a3;
  v11 = a5[7];
  v12 = a6(0);
  result = sub_1000126EC(a4, v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a6);
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_100A97F80(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for BookmarkMetaData(0);
  result = sub_1000126EC(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for BookmarkMetaData);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

_OWORD *sub_100A9800C(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for CodingUserInfoKey(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  result = sub_10010F90C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_100A980B0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98B9C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100A980C0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
  result = sub_1000126EC(a3, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, type metadata accessor for CloudKitChangeSet.TombstoneInfo);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

unint64_t sub_100A9814C(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t sub_100A98190(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100A981DC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72) * a1;
  v12 = v8 + v11;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  v13(v12, a2, v9);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a4[7] + v11, a3, v9);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

_OWORD *sub_100A98288(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10010F90C(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t sub_100A982F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for BeaconIdentifier(0);
  sub_1000126EC(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for BeaconIdentifier);
  v10 = a4[7];
  v11 = type metadata accessor for ObservedAdvertisement(0);
  result = sub_1000126EC(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for ObservedAdvertisement);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

_OWORD *sub_100A983A8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_10010F90C(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_100A98410(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 16 * result;
  *(_QWORD *)v7 = a4;
  *(_BYTE *)(v7 + 8) = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t sub_100A98464(unint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  v7 = a4[7];
  v8 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a1, a3, v8);
  v10 = a4[2];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (v11)
    __break(1u);
  else
    a4[2] = v12;
  return result;
}

uint64_t sub_100A984F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98B9C(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

uint64_t sub_100A984FC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98A18(a1, a2, a3, a4, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_100A98508(unint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_BYTE *)(a4[7] + a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_100A985A0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98DD8(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_10000F9FC);
}

uint64_t sub_100A985AC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A986F0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

uint64_t sub_100A985B8(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  v10 = a3[7];
  v25 = a3[6];
  v11 = *((_BYTE *)a3 + 64);
  v12 = *((_BYTE *)a3 + 65);
  v24 = *(_OWORD *)(a3 + 9);
  v23 = a3[11];
  v22 = *((_BYTE *)a3 + 96);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v13 = a4[6];
  v14 = type metadata accessor for UUID(0);
  v20 = *((_OWORD *)a3 + 2);
  v21 = *((_OWORD *)a3 + 1);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * a1, a2, v14);
  v16 = a4[7] + 104 * a1;
  *(_QWORD *)v16 = v8;
  *(_BYTE *)(v16 + 8) = v9;
  *(_OWORD *)(v16 + 16) = v21;
  *(_OWORD *)(v16 + 32) = v20;
  *(_QWORD *)(v16 + 48) = v25;
  *(_QWORD *)(v16 + 56) = v10;
  *(_BYTE *)(v16 + 64) = v11;
  *(_BYTE *)(v16 + 65) = v12;
  *(_OWORD *)(v16 + 72) = v24;
  *(_QWORD *)(v16 + 88) = v23;
  *(_BYTE *)(v16 + 96) = v22;
  v17 = a4[2];
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    a4[2] = v19;
  return result;
}

uint64_t sub_100A986E4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A986F0(a1, a2, a3, a4, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100A986F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a4[6];
  v10 = a5(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  v11 = a4[7];
  v12 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a3, v12);
  v14 = a4[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a4[2] = v16;
  return result;
}

unint64_t sub_100A987A8(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

unint64_t sub_100A987F0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100A98838(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

unint64_t sub_100A988D0(unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = a7[6] + 24 * result;
  *(_BYTE *)v7 = a2;
  *(_QWORD *)(v7 + 8) = a3;
  *(_QWORD *)(v7 + 16) = a4;
  v8 = (_QWORD *)(a7[7] + 16 * result);
  *v8 = a5;
  v8[1] = a6;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

uint64_t sub_100A98924(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  result = sub_1000126EC(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for OwnedBeaconRecord);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v11 = a4[2];
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
    __break(1u);
  else
    a4[2] = v13;
  return result;
}

uint64_t sub_100A989BC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98C64(a1, a2, a3, a4, type metadata accessor for BeaconSharingSessionContext);
}

unint64_t sub_100A989C8(unint64_t result, char a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_100A98A0C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98A18(a1, a2, a3, a4, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100A98A18(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = a5(0);
  result = sub_1000126EC(a3, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a5);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_100A98AD0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A99050(a1, a2, a3, a4, &qword_1010EF1F0);
}

uint64_t sub_100A98ADC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_10050DE28(a4, a5[7] + 48 * a1);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_100A98B48(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_BYTE *)(a5[7] + result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100A98B90(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return sub_100A97EE8(a1, a2, a3, a4, a5, type metadata accessor for SecureLocation);
}

uint64_t sub_100A98B9C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v9 = a4[6];
  v10 = a5(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * a1, a2, v10);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v12 = a4[2];
  v13 = __OFADD__(v12, 1);
  v14 = v12 + 1;
  if (v13)
    __break(1u);
  else
    a4[2] = v14;
  return result;
}

uint64_t sub_100A98C34(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return sub_100A97EE8(a1, a2, a3, a4, a5, type metadata accessor for SecureLocationsSubscription);
}

uint64_t sub_100A98C40(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98D14(a1, a2, a3, a4, &qword_1010EF1D0);
}

uint64_t sub_100A98C4C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98A18(a1, a2, a3, a4, type metadata accessor for BeaconState);
}

uint64_t sub_100A98C58(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98C64(a1, a2, a3, a4, type metadata accessor for ManagedCBPeripheralManager.KeyType);
}

uint64_t sub_100A98C64(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = a5(0);
  result = sub_1000126EC(a2, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a5);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_100A98CFC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98A18(a1, a2, a3, a4, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_100A98D08(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98D14(a1, a2, a3, a4, &qword_1010EF168);
}

uint64_t sub_100A98D14(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = sub_10001A9A8(a5);
  result = sub_100005CF0(a3, v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a5);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_100A98DCC(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A99050(a1, a2, a3, a4, &qword_101111940);
}

uint64_t sub_100A98DD8(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  result = a5(a3, a4[7] + 40 * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_100A98E80(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A99050(a1, a2, a3, a4, &qword_1010EF178);
}

uint64_t sub_100A98E8C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for MACAddress(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_100A98F2C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98A18(a1, a2, a3, a4, type metadata accessor for SafeLocation);
}

unint64_t sub_100A98F38(unint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = a6[6] + 24 * result;
  *(_BYTE *)v6 = a2;
  *(_QWORD *)(v6 + 8) = a3;
  *(_QWORD *)(v6 + 16) = a4;
  *(_QWORD *)(a6[7] + 8 * result) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t sub_100A98F88(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = sub_10001A9A8(&qword_1010EF7C0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for BeaconScanner.AISLookupState(0);
  result = sub_1000126EC(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, type metadata accessor for BeaconScanner.AISLookupState);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_100A99044(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A99050(a1, a2, a3, a4, &qword_101111900);
}

uint64_t sub_100A99050(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a4[6];
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v12 = a4[7];
  v13 = sub_10001A9A8(a5);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12 + *(_QWORD *)(*(_QWORD *)(v13 - 8) + 72) * a1, a3, v13);
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_100A9910C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

unint64_t sub_100A991B0(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = a5[7] + 16 * result;
  *(_QWORD *)v5 = a3;
  *(_BYTE *)(v5 + 8) = a4 & 1;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

uint64_t sub_100A99200(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98A18(a1, a2, a3, a4, type metadata accessor for AccessoryFirmwareUpdateStateInfo);
}

uint64_t sub_100A9920C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98A18(a1, a2, a3, a4, type metadata accessor for AccessoryFirmwareUpdateCommandInfo);
}

unint64_t sub_100A99218(unint64_t result, uint64_t a2, uint64_t a3, __int16 a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_WORD *)(a5[7] + 2 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_100A99260(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a7[(result >> 6) + 8] |= 1 << result;
  v7 = (_QWORD *)(a7[6] + 16 * result);
  *v7 = a2;
  v7[1] = a3;
  v8 = (_QWORD *)(a7[7] + 24 * result);
  *v8 = a4;
  v8[1] = a5;
  v8[2] = a6;
  v9 = a7[2];
  v10 = __OFADD__(v9, 1);
  v11 = v9 + 1;
  if (v10)
    __break(1u);
  else
    a7[2] = v11;
  return result;
}

uint64_t sub_100A992B4(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  sub_1000126EC(a2, v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, type metadata accessor for ShareAttemptTracker.AttemptKey);
  v10 = a4[7];
  v11 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t sub_100A9936C(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_100A98C64(a1, a2, a3, a4, type metadata accessor for BeaconKeyManager.FileKey);
}

uint64_t sub_100A99378(unint64_t a1, uint64_t a2, char a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = a5[7] + 16 * a1;
  *(_BYTE *)v13 = a3;
  *(_QWORD *)(v13 + 8) = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

id sub_100A9941C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_101111710);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A995BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_10001A9A8(&qword_101111E08);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    result = (void *)swift_retain();
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100A9975C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[48];

  v1 = v0;
  sub_10001A9A8(&qword_101111490);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    sub_100AA08AC(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_1006C92F8((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_100A99944()
{
  return sub_100A9D21C((uint64_t *)&unk_1011117F0);
}

void *sub_100A99950()
{
  return sub_100A99F64(type metadata accessor for MultipartAccessoryPairingInfo, &qword_1011119C8);
}

void *sub_100A99964()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  v1 = v0;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v28 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011119E0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_25:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v10 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v11 = 1 << *(_BYTE *)(v5 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v5 + 64);
  v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v27)
        goto LABEL_23;
      v23 = *(_QWORD *)(v26 + 8 * v10);
      if (!v23)
        break;
    }
LABEL_22:
    v13 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = *(_QWORD *)(v28 + 72) * v15;
    sub_10000F9B8(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&unk_1010F9890);
    v21 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v16);
    *v21 = v18;
    v21[1] = v19;
    sub_100005CF0((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, (uint64_t *)&unk_1010F9890);
    result = (void *)sub_10001BBBC(v18, v19);
  }
  v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    result = (void *)swift_release(v5);
    v1 = v25;
    goto LABEL_25;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v27)
      goto LABEL_23;
    v23 = *(_QWORD *)(v26 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100A99BB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_10001A9A8(&qword_101111D80);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10010F9DC(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_100016A30(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_10010F90C(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100A99D98()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_10001A9A8(&qword_101104168);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100A99F50()
{
  return sub_100A99F64(type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t *)&unk_1011118D0);
}

void *sub_100A99F64(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a1(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  sub_10001A9A8(a2);
  v29 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v8);
    *v29 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v22 = *v21;
    v23 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_10005972C(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (uint64_t *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v22;
    v25[1] = v23;
    sub_1000126EC((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    result = (void *)sub_10001BBBC(v22, v23);
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9A198()
{
  return sub_100A9AD0C((uint64_t *)&unk_1011115F0);
}

void *sub_100A9A1A4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for BookmarkMetaData(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_101111A00);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v24 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v15)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v17 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
    v19 = *(_QWORD *)(v26 + 72) * v17;
    sub_10005972C(*(_QWORD *)(v5 + 56) + v19, (uint64_t)v4, type metadata accessor for BookmarkMetaData);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v17) = v18;
    result = (void *)sub_1000126EC((uint64_t)v4, *(_QWORD *)(v7 + 56) + v19, type metadata accessor for BookmarkMetaData);
  }
  v22 = v20 + 2;
  if (v22 >= v15)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A9A3CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _OWORD v26[2];

  v1 = v0;
  v2 = type metadata accessor for CodingUserInfoKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_101111D18);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v24 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v25 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v21 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v12;
    if (!v22)
    {
      v12 = v21 + 1;
      if (v21 + 1 >= v16)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v12);
      if (!v22)
        break;
    }
LABEL_25:
    v15 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 32 * v18;
    sub_100016A30(*(_QWORD *)(v6 + 56) + v20, (uint64_t)v26);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v19, v5, v2);
    result = sub_10010F90C(v26, (_OWORD *)(*(_QWORD *)(v8 + 56) + v20));
  }
  v23 = v21 + 2;
  if (v23 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v12 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v12);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A9A608()
{
  return sub_100A9B8EC(&qword_1010FB320);
}

void *sub_100A9A614()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_101111920);
}

id sub_100A9A628()
{
  return sub_100AA284C(&qword_101111648);
}

id sub_100A9A634()
{
  return sub_100AA0F20(type metadata accessor for CloudKitChangeSet.TombstoneInfo, &qword_101111730);
}

void *sub_100A9A648()
{
  return sub_100AA06F4(&qword_101111520);
}

void *sub_100A9A654()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10001A9A8(&qword_101104120);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100A9A800()
{
  _QWORD *v0;

  return sub_100C53410(v0);
}

uint64_t sub_100A9A808()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100A9A818(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  sub_100C54894(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_100A9A834()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111460;
  if (!qword_101111460)
  {
    v1 = sub_10001F784((uint64_t *)&unk_101111440);
    v2 = sub_100006C64(&qword_1010F3028, 255, type metadata accessor for MemberSharingCircle, (uint64_t)&unk_100E2DFE8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111460);
  }
  return result;
}

void *sub_100A9A8B4()
{
  return sub_100A9DB60(&qword_101104180);
}

void *sub_100A9A8C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8(&qword_1011042D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = (void *)swift_errorRetain(v18);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9AA68()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  void (*v21)(unint64_t, char *, uint64_t);
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD **)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v25 - v6;
  sub_10001A9A8(&qword_1011116C0);
  v26 = v0;
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)(*v0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_23:
    result = (void *)swift_release(v8);
    *v26 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v27 = v8 + 64;
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v22 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_23;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_22:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_9:
    v19 = v2[9] * v18;
    v20 = (void (*)(char *, unint64_t, uint64_t))v2[2];
    v20(v7, *(_QWORD *)(v8 + 48) + v19, v1);
    v20(v5, *(_QWORD *)(v8 + 56) + v19, v1);
    v21 = (void (*)(unint64_t, char *, uint64_t))v2[4];
    v21(*(_QWORD *)(v10 + 48) + v19, v7, v1);
    result = (void *)((uint64_t (*)(unint64_t, char *, uint64_t))v21)(*(_QWORD *)(v10 + 56) + v19, v5, v1);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_23;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_23;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100A9ACC4()
{
  sub_100AA1154((uint64_t *)&unk_101111CC0);
}

void sub_100A9ACD0()
{
  sub_100A9BD70(&qword_1010F9F80, (void (*)(unint64_t, _BYTE *))sub_100016A30, (void (*)(_BYTE *, uint64_t))sub_10010F90C);
}

void *sub_100A9ACEC()
{
  return sub_100AA16A8((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111750);
}

void *sub_100A9AD00()
{
  return sub_100A9AD0C(&qword_1010F1AE8);
}

void *sub_100A9AD0C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + 16 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v16) = v17;
    result = (void *)sub_10001BBBC(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9AEAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for ObservedAdvertisement(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconIdentifier(0);
  v28 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_101111DE8);
  v8 = *v0;
  v9 = static _DictionaryStorage.copy(original:)(*v0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release();
LABEL_25:
    *v1 = v10;
    return result;
  }
  v25 = v1;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v13 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v14 = 1 << *(_BYTE *)(v8 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v8 + 64);
  v26 = v8 + 64;
  v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_9;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_23;
      v22 = *(_QWORD *)(v26 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_22:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v28 + 72) * v18;
    sub_10005972C(*(_QWORD *)(v8 + 48) + v19, (uint64_t)v7, type metadata accessor for BeaconIdentifier);
    v20 = *(_QWORD *)(v29 + 72) * v18;
    sub_10005972C(*(_QWORD *)(v8 + 56) + v20, (uint64_t)v4, type metadata accessor for ObservedAdvertisement);
    sub_1000126EC((uint64_t)v7, *(_QWORD *)(v10 + 48) + v19, type metadata accessor for BeaconIdentifier);
    result = (void *)sub_1000126EC((uint64_t)v4, *(_QWORD *)(v10 + 56) + v20, type metadata accessor for ObservedAdvertisement);
  }
  v23 = v21 + 2;
  if (v23 >= v27)
  {
LABEL_23:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_25;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v27)
      goto LABEL_23;
    v22 = *(_QWORD *)(v26 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100A9B144()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_1011115A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_100016A30(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10010F90C(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9B308()
{
  return sub_100AA35F0(&qword_1010FB240);
}

void *sub_100A9B314()
{
  return sub_100AA06F4(&qword_101111488);
}

void *sub_100A9B320()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_10001A9A8(&qword_101111C88);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9B4AC()
{
  return sub_100AA35F0(&qword_101111DE0);
}

void sub_100A9B4B8()
{
  sub_100AA1154((uint64_t *)&unk_101111C90);
}

void *sub_100A9B4C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_10001A9A8(&qword_101104130);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(void **)v20;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *(_BYTE *)(v20 + 8);
    *v22 = v19;
    v22[1] = v18;
    v24 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v24 = v21;
    *(_BYTE *)(v24 + 8) = v23;
    swift_bridgeObjectRetain(v18);
    result = sub_1006C92E8(v21, v23);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9B690()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8((uint64_t *)&unk_101111800);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16);
    v18 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 56) + v18, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v16) = v17;
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 56) + v18, v4, v1);
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9B8AC()
{
  return sub_100AA35F0(&qword_101111A68);
}

void *sub_100A9B8B8()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress, &qword_101111DD8);
}

void *sub_100A9B8CC()
{
  return sub_100A9E33C(type metadata accessor for SoundPlaybackManager.PlaybackCoordinator, &qword_101111CE8);
}

void *sub_100A9B8E0()
{
  return sub_100A9B8EC(&qword_1010FB398);
}

void *sub_100A9B8EC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(a1);
  v25 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v25 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v26 = v7 + 64;
  v27 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v27)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v13);
      if (!v22)
        break;
    }
LABEL_25:
    v16 = (v22 - 1) & v22;
    v18 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = *(_BYTE *)(*(_QWORD *)(v7 + 56) + v18);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_BYTE *)(*(_QWORD *)(v9 + 56) + v18) = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v27)
    goto LABEL_26;
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v27)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9BB0C()
{
  return sub_100A9C2E4(&qword_101111DD0, (uint64_t (*)(_BYTE *, uint64_t))sub_10000F9FC);
}

void *sub_100A9BB20()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1011118A8);
}

void sub_100A9BB34()
{
  sub_100AA1154((uint64_t *)&unk_1011118C0);
}

char *sub_100A9BB40()
{
  return sub_100AA2148(&qword_1010EF178, (uint64_t *)&unk_101111720);
}

id sub_100A9BB54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_10001A9A8(&qword_101111758);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_100016A30(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_10010F90C(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9BD18()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111DB8);
}

char *sub_100A9BD2C()
{
  return sub_100A9C540((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress, (uint64_t *)&unk_101111DC0);
}

void *sub_100A9BD40()
{
  return sub_100A9E104((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress, &qword_1011042B8);
}

void sub_100A9BD54()
{
  sub_100A9BD70((uint64_t *)&unk_1010F6370, (void (*)(unint64_t, _BYTE *))sub_100016A30, (void (*)(_BYTE *, uint64_t))sub_10010F90C);
}

void sub_100A9BD70(uint64_t *a1, void (*a2)(unint64_t, _BYTE *), void (*a3)(_BYTE *, uint64_t))
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _BYTE v31[32];

  v5 = v3;
  sub_10001A9A8(a1);
  v6 = *v3;
  v7 = static _DictionaryStorage.copy(original:)(*v3);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_release(v6);
LABEL_28:
    *v5 = v8;
    return;
  }
  v28 = v5;
  v9 = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)v9 >= v6 + 64 + 8 * v10)
    memmove(v9, (const void *)(v6 + 64), 8 * v10);
  v29 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v25 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v25);
    ++v12;
    if (!v26)
    {
      v12 = v25 + 1;
      if (v25 + 1 >= v16)
        goto LABEL_26;
      v26 = *(_QWORD *)(v29 + 8 * v12);
      if (!v26)
        break;
    }
LABEL_25:
    v15 = (v26 - 1) & v26;
    v18 = __clz(__rbit64(v26)) + (v12 << 6);
LABEL_12:
    v19 = 16 * v18;
    v20 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v18);
    v21 = *v20;
    v22 = v20[1];
    v23 = 32 * v18;
    a2(*(_QWORD *)(v6 + 56) + 32 * v18, v31);
    v24 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v24 = v21;
    v24[1] = v22;
    a3(v31, *(_QWORD *)(v8 + 56) + v23);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v16)
  {
LABEL_26:
    swift_release(v6);
    v5 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v29 + 8 * v27);
  if (v26)
  {
    v12 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v26 = *(_QWORD *)(v29 + 8 * v12);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_100A9BF60()
{
  return sub_100AA35F0(&qword_1011117E0);
}

id sub_100A9BF6C()
{
  return sub_100AA3B48(&qword_1011116B0);
}

void sub_100A9BF78()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  const void *v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;

  v1 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v1 - 8);
  v47 = v1;
  __chkstk_darwin(v1);
  v45 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011116A8);
  v42 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v49 = v4;
  if (!v5)
  {
    swift_release();
    v41 = v49;
    v40 = v42;
LABEL_28:
    *v40 = v41;
    return;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v43 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v43, 8 * v8);
    v6 = v49;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v48 = v3;
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v44 = (unint64_t)(v11 + 63) >> 6;
  v15 = v45;
  v14 = v46;
  while (1)
  {
    if (v13)
    {
      v50 = (v13 - 1) & v13;
      v51 = v10;
      v16 = __clz(__rbit64(v13)) | (v10 << 6);
      v17 = v48;
      goto LABEL_12;
    }
    v36 = v10 + 1;
    v17 = v48;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v36 >= v44)
      goto LABEL_26;
    v37 = *((_QWORD *)v43 + v36);
    v38 = v10 + 1;
    if (!v37)
    {
      v38 = v36 + 1;
      if (v36 + 1 >= v44)
        goto LABEL_26;
      v37 = *((_QWORD *)v43 + v38);
      if (!v37)
        break;
    }
LABEL_25:
    v50 = (v37 - 1) & v37;
    v51 = v38;
    v16 = __clz(__rbit64(v37)) + (v38 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v14 + 72) * v16;
    v19 = v47;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v17 + 48) + v18, v47);
    v20 = *(_QWORD *)(v17 + 56);
    v21 = 104 * v16;
    v22 = (uint64_t *)(v20 + 104 * v16);
    v23 = *v22;
    v61 = *((unsigned __int8 *)v22 + 8);
    v24 = v22[3];
    v52 = v22[2];
    v53 = v24;
    v25 = v22[5];
    v54 = v22[4];
    v26 = v22[7];
    v60 = v22[6];
    v27 = *((unsigned __int8 *)v22 + 64);
    v58 = *((unsigned __int8 *)v22 + 65);
    v59 = v27;
    v29 = v22[9];
    v28 = v22[10];
    v56 = v22[11];
    v57 = v28;
    v55 = *((unsigned __int8 *)v22 + 96);
    v30 = v49;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v49 + 48) + v18, v15, v19);
    v31 = *(_QWORD *)(v30 + 56) + v21;
    *(_QWORD *)v31 = v23;
    *(_BYTE *)(v31 + 8) = v61;
    v33 = v52;
    v32 = v53;
    *(_QWORD *)(v31 + 16) = v52;
    *(_QWORD *)(v31 + 24) = v32;
    v34 = v54;
    *(_QWORD *)(v31 + 32) = v54;
    *(_QWORD *)(v31 + 40) = v25;
    *(_QWORD *)(v31 + 48) = v60;
    *(_QWORD *)(v31 + 56) = v26;
    *(_BYTE *)(v31 + 64) = v59;
    *(_BYTE *)(v31 + 65) = v58;
    v35 = v57;
    *(_QWORD *)(v31 + 72) = v29;
    *(_QWORD *)(v31 + 80) = v35;
    *(_QWORD *)(v31 + 88) = v56;
    *(_BYTE *)(v31 + 96) = v55;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v29);
    swift_retain();
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v25);
    v13 = v50;
    v10 = v51;
  }
  v39 = v36 + 2;
  if (v39 >= v44)
  {
LABEL_26:
    swift_release();
    v40 = v42;
    v41 = v49;
    goto LABEL_28;
  }
  v37 = *((_QWORD *)v43 + v39);
  if (v37)
  {
    v38 = v39;
    goto LABEL_25;
  }
  while (1)
  {
    v38 = v39 + 1;
    if (__OFADD__(v39, 1))
      break;
    if (v38 >= v44)
      goto LABEL_26;
    v37 = *((_QWORD *)v43 + v38);
    ++v39;
    if (v37)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_100A9C2C4()
{
  return sub_100AA35F0(&qword_101111510);
}

void *sub_100A9C2D0()
{
  return sub_100A9C2E4(&qword_1011116B8, (uint64_t (*)(_BYTE *, uint64_t))sub_10000F9FC);
}

void *sub_100A9C2E4(uint64_t *a1, uint64_t (*a2)(_BYTE *, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(_BYTE *, uint64_t);
  _BYTE v30[40];

  v29 = a2;
  v4 = v2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(a1);
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v4 = v11;
    return result;
  }
  v27 = v4;
  result = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v28 = v9 + 64;
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v19)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v24);
    ++v15;
    if (!v25)
    {
      v15 = v24 + 1;
      if (v24 + 1 >= v19)
        goto LABEL_26;
      v25 = *(_QWORD *)(v28 + 8 * v15);
      if (!v25)
        break;
    }
LABEL_25:
    v18 = (v25 - 1) & v25;
    v21 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v6 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v22, v5);
    v23 = 40 * v21;
    sub_100030784(*(_QWORD *)(v9 + 56) + v23, (uint64_t)v30);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v22, v8, v5);
    result = (void *)v29(v30, *(_QWORD *)(v11 + 56) + v23);
  }
  v26 = v24 + 2;
  if (v26 >= v19)
  {
LABEL_26:
    result = (void *)swift_release();
    v4 = v27;
    goto LABEL_28;
  }
  v25 = *(_QWORD *)(v28 + 8 * v26);
  if (v25)
  {
    v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v15 >= v19)
      goto LABEL_26;
    v25 = *(_QWORD *)(v28 + 8 * v15);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

char *sub_100A9C52C()
{
  return sub_100A9C540((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111568);
}

char *sub_100A9C540(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *result;
  char *v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;

  v45 = type metadata accessor for Date(0);
  v41 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v44 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a1(0);
  v40 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v42 = (char *)&v37 - v6;
  sub_10001A9A8(a2);
  v37 = v2;
  v7 = *v2;
  v8 = static _DictionaryStorage.copy(original:)(*v2);
  v9 = *(_QWORD *)(v7 + 16);
  v47 = v8;
  if (!v9)
  {
    result = (char *)swift_release();
    v36 = v47;
    v35 = v37;
LABEL_25:
    *v35 = v36;
    return result;
  }
  v10 = v8;
  result = (char *)(v8 + 64);
  v12 = (char *)(v7 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  v38 = v7 + 64;
  if (v10 != v7 || result >= &v12[8 * v13])
  {
    result = (char *)memmove(result, v12, 8 * v13);
    v10 = v47;
  }
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v7 + 16);
  v15 = 1 << *(_BYTE *)(v7 + 32);
  v46 = v7;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v7 + 64);
  v39 = (unint64_t)(v15 + 63) >> 6;
  v18 = v40;
  v19 = v41;
  v21 = v42;
  v20 = v43;
  v22 = v45;
  v23 = v47;
  while (1)
  {
    if (v17)
    {
      v24 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v48 = v14;
      v25 = v24 | (v14 << 6);
      v26 = v46;
      goto LABEL_9;
    }
    v31 = v14 + 1;
    v26 = v46;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v39)
      goto LABEL_23;
    v32 = *(_QWORD *)(v38 + 8 * v31);
    v33 = v14 + 1;
    if (!v32)
    {
      v33 = v31 + 1;
      if (v31 + 1 >= v39)
        goto LABEL_23;
      v32 = *(_QWORD *)(v38 + 8 * v33);
      if (!v32)
        break;
    }
LABEL_22:
    v17 = (v32 - 1) & v32;
    v48 = v33;
    v25 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_9:
    v27 = *(_QWORD *)(v18 + 72) * v25;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v21, *(_QWORD *)(v26 + 48) + v27, v20);
    v28 = *(_QWORD *)(v19 + 72) * v25;
    v29 = *(_QWORD *)(v26 + 56) + v28;
    v30 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v44, v29, v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v23 + 48) + v27, v21, v20);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(_QWORD *)(v23 + 56) + v28, v30, v22);
    v14 = v48;
  }
  v34 = v31 + 2;
  if (v34 >= v39)
  {
LABEL_23:
    result = (char *)swift_release();
    v35 = v37;
    v36 = v47;
    goto LABEL_25;
  }
  v32 = *(_QWORD *)(v38 + 8 * v34);
  if (v32)
  {
    v33 = v34;
    goto LABEL_22;
  }
  while (1)
  {
    v33 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v33 >= v39)
      goto LABEL_23;
    v32 = *(_QWORD *)(v38 + 8 * v33);
    ++v34;
    if (v32)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100A9C820()
{
  return sub_100A9D21C((uint64_t *)&unk_101111C50);
}

id sub_100A9C82C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_1011118B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9C9D0()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111868);
}

void *sub_100A9C9E4()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111A10);
}

void *sub_100A9C9F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = type metadata accessor for MACAddress(0);
  v1 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011119C0);
  v31 = v0;
  v4 = *v0;
  v5 = static _DictionaryStorage.copy(original:)(*v0);
  v6 = *(_QWORD *)(v4 + 16);
  v35 = v5;
  if (!v6)
  {
    result = (void *)swift_release();
    v29 = v35;
    v28 = v31;
LABEL_28:
    *v28 = v29;
    return result;
  }
  v7 = v5;
  result = (void *)(v5 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    v7 = v35;
  }
  v32 = v4 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v4 + 16);
  v12 = 1 << *(_BYTE *)(v4 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v4 + 64);
  v33 = (unint64_t)(v12 + 63) >> 6;
  v15 = v34;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      v11 = v25 + 1;
      if (v25 + 1 >= v33)
        goto LABEL_26;
      v26 = *(_QWORD *)(v32 + 8 * v11);
      if (!v26)
        break;
    }
LABEL_25:
    v14 = (v26 - 1) & v26;
    v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    v18 = 16 * v17;
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v17);
    v20 = *v19;
    v21 = v19[1];
    v22 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(_QWORD *)(v4 + 56) + v22, v15);
    v23 = v35;
    v24 = (uint64_t *)(*(_QWORD *)(v35 + 48) + v18);
    *v24 = v20;
    v24[1] = v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v23 + 56) + v22, v3, v15);
    result = (void *)sub_10001BBBC(v20, v21);
  }
  v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v28 = v31;
    v29 = v35;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v32 + 8 * v27);
  if (v26)
  {
    v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v26 = *(_QWORD *)(v32 + 8 * v11);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100A9CC58()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_10001A9A8(&qword_101111860);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    v23 = v17;
    swift_bridgeObjectRetain(v21);
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100A9CE0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8((uint64_t *)&unk_1011114B0);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)sub_10039C2A8(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9D03C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  __int128 v25;

  v1 = v0;
  sub_10001A9A8(&qword_1011041B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v19 = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 16);
    v20 = 16 * v15;
    v21 = *(_QWORD *)(v4 + 48) + v16;
    v25 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v20);
    *(_BYTE *)v21 = *(_BYTE *)v17;
    *(_QWORD *)(v21 + 8) = v19;
    *(_QWORD *)(v21 + 16) = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v20) = v25;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10001BBBC(v25, *((unint64_t *)&v25 + 1));
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100A9D210()
{
  return sub_100A9D21C((uint64_t *)&unk_101111580);
}

id sub_100A9D21C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    result = v21;
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9D3C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001A9A8(&qword_101111570);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100A9D578()
{
  sub_100AA0308(type metadata accessor for OwnedBeaconRecord, &qword_101111560);
}

void *sub_100A9D58C()
{
  return sub_100A9DD2C(type metadata accessor for BeaconSharingSessionContext, (uint64_t *)&unk_101111D90);
}

uint64_t sub_100A9D5A0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  const void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v36 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8((uint64_t *)&unk_101111890);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v39 = v4;
  if (!v5)
  {
    result = swift_release();
    v31 = v39;
    v30 = v33;
LABEL_28:
    *v30 = v31;
    return result;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v35 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, v35, 8 * v8);
    v6 = v39;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v38 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v34 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  while (1)
  {
    if (v13)
    {
      v16 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v17 = v16 | (v10 << 6);
      result = v38;
      goto LABEL_12;
    }
    v27 = v10 + 1;
    result = v38;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v27);
    ++v10;
    if (!v28)
    {
      v10 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_26;
      v28 = *((_QWORD *)v35 + v10);
      if (!v28)
        break;
    }
LABEL_25:
    v13 = (v28 - 1) & v28;
    v17 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    v19 = 24 * v17;
    v20 = *(_QWORD *)(result + 48) + 24 * v17;
    v21 = *(_BYTE *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(_QWORD *)(result + 56) + v24, v15);
    v25 = v39;
    v26 = *(_QWORD *)(v39 + 48) + v19;
    *(_BYTE *)v26 = v21;
    *(_QWORD *)(v26 + 8) = v22;
    *(_QWORD *)(v26 + 16) = v23;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v25 + 56) + v24, v14, v15);
    swift_bridgeObjectRetain(v23);
  }
  v29 = v27 + 2;
  if (v29 >= v34)
  {
LABEL_26:
    result = swift_release();
    v30 = v33;
    v31 = v39;
    goto LABEL_28;
  }
  v28 = *((_QWORD *)v35 + v29);
  if (v28)
  {
    v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v10 >= v34)
      goto LABEL_26;
    v28 = *((_QWORD *)v35 + v10);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100A9D814()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001A9A8(&qword_101111DB0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

id sub_100A9D9B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_101111950);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9DB54()
{
  return sub_100A9DB60(&qword_101111840);
}

void *sub_100A9DB60(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v17);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v17);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = v20;
    v22[1] = v19;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v17) = v21;
    swift_bridgeObjectRetain(v19);
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9DD18()
{
  return sub_100A9DD2C(type metadata accessor for BeaconKeyServiceBuilder.FileKey, &qword_101111498);
}

void *sub_100A9DD2C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = v2;
  v6 = a1(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - v7;
  sub_10001A9A8(a2);
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_28:
    *v5 = v11;
    return result;
  }
  v29 = v5;
  result = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v30 = v9 + 64;
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v25 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v19)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v25);
    ++v15;
    if (!v26)
    {
      v15 = v25 + 1;
      if (v25 + 1 >= v19)
        goto LABEL_26;
      v26 = *(_QWORD *)(v30 + 8 * v15);
      if (!v26)
        break;
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v21 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v31 + 72) * v21;
    sub_10005972C(*(_QWORD *)(v9 + 48) + v22, (uint64_t)v8, a1);
    v23 = 8 * v21;
    v24 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 48) + v22, a1);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v23) = v24;
    result = (void *)swift_retain();
  }
  v27 = v25 + 2;
  if (v27 >= v19)
  {
LABEL_26:
    result = (void *)swift_release(v9);
    v5 = v29;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v30 + 8 * v27);
  if (v26)
  {
    v15 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v15 >= v19)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v15);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A9DF5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_101111690);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9E0E4()
{
  return sub_100AA35F0(&qword_101111680);
}

void *sub_100A9E0F0()
{
  return sub_100A9E104((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111688);
}

void *sub_100A9E104(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - v6;
  sub_10001A9A8(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v28 = v8 + 64;
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v4);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9E328()
{
  return sub_100A9E33C(type metadata accessor for DeviceEvent, (uint64_t *)&unk_101111A20);
}

void *sub_100A9E33C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD);
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v4 = a1(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v39 = (char *)&v34 - v5;
  v38 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(a2);
  v34 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = *(_QWORD *)(v8 + 16);
  v43 = v9;
  if (!v10)
  {
    result = (void *)swift_release(v8);
    v33 = v43;
    v32 = v34;
LABEL_25:
    *v32 = v33;
    return result;
  }
  v11 = v9;
  result = (void *)(v9 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    v11 = v43;
  }
  v14 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v42 = v8;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v35 = v8 + 64;
  v36 = (unint64_t)(v15 + 63) >> 6;
  v19 = v37;
  v18 = v38;
  v20 = (uint64_t)v39;
  for (i = v43; ; result = (void *)sub_1000126EC(v20, *(_QWORD *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v14 << 6);
      v24 = v42;
      goto LABEL_9;
    }
    v29 = v14 + 1;
    v24 = v42;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v36)
        goto LABEL_23;
      v30 = *(_QWORD *)(v35 + 8 * v14);
      if (!v30)
        break;
    }
LABEL_22:
    v17 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(_QWORD *)(v24 + 48) + v25, v18);
    v26 = *(_QWORD *)(v24 + 56);
    v27 = v41;
    v28 = *(_QWORD *)(v40 + 72) * v23;
    sub_10005972C(v26 + v28, v20, v41);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(i + 48) + v25, v19, v18);
  }
  v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    result = (void *)swift_release(v42);
    v32 = v34;
    v33 = v43;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v35 + 8 * v31);
  if (v30)
  {
    v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v14 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v14);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100A9E600()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_101111A18);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_10005972C(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for LocalFindableAccessoryRecord);
    v22 = (uint64_t *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_1000126EC((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for LocalFindableAccessoryRecord);
    result = (void *)sub_10001BBBC(v19, v20);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A9E848()
{
  return sub_100A9E33C(type metadata accessor for BeaconEstimatedLocation, &qword_101111650);
}

void *sub_100A9E85C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;

  sub_10001A9A8(&qword_101111658);
  v27 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v24 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v12)
      goto LABEL_26;
    v25 = *(_QWORD *)(v5 + 8 * v24);
    ++v8;
    if (!v25)
    {
      v8 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_26;
      v25 = *(_QWORD *)(v5 + 8 * v8);
      if (!v25)
        break;
    }
LABEL_25:
    v11 = (v25 - 1) & v25;
    v14 = __clz(__rbit64(v25)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = 32 * v14;
    v17 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v16);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[2];
    v21 = v17[3];
    v22 = *(_OWORD *)(*(_QWORD *)(v1 + 48) + v15);
    *(_OWORD *)(*(_QWORD *)(v3 + 48) + v15) = v22;
    v23 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v16);
    *v23 = v18;
    v23[1] = v19;
    v23[2] = v20;
    v23[3] = v21;
    sub_10001BBBC(v22, *((unint64_t *)&v22 + 1));
    sub_10001BBBC(v18, v19);
    result = (void *)sub_10001BBBC(v20, v21);
  }
  v26 = v24 + 2;
  if (v26 >= v12)
    goto LABEL_26;
  v25 = *(_QWORD *)(v5 + 8 * v26);
  if (v25)
  {
    v8 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v25 = *(_QWORD *)(v5 + 8 * v8);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9EA48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_10001A9A8(&qword_101111660);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_QWORD *)(v2 + 56) + v16;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v19;
    v20 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v20 = v18;
    *(_BYTE *)(v20 + 8) = v17;
    result = (void *)sub_10001BBBC(v19, *((unint64_t *)&v19 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9EC00()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8((uint64_t *)&unk_101111668);
  v23 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v23 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v24 = v5 + 64;
  v25 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v25)
        goto LABEL_26;
      v20 = *(_QWORD *)(v24 + 8 * v11);
      if (!v20)
        break;
    }
LABEL_25:
    v14 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v16);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_BYTE *)(*(_QWORD *)(v7 + 56) + v16) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v25)
    goto LABEL_26;
  v20 = *(_QWORD *)(v24 + 8 * v21);
  if (v20)
  {
    v11 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v11 >= v25)
      goto LABEL_26;
    v20 = *(_QWORD *)(v24 + 8 * v11);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9EE20()
{
  return sub_100AA35F0(&qword_101111678);
}

id sub_100A9EE2C()
{
  return sub_100AA3B48(&qword_101111D88);
}

void *sub_100A9EE38()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111CF8);
}

void *sub_100A9EE4C()
{
  return sub_100AA35F0(&qword_101111D38);
}

char *sub_100A9EE58()
{
  return sub_100AA2148(&qword_1010EF1F0, (uint64_t *)&unk_101111D50);
}

void *sub_100A9EE6C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8(&qword_101111D30);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)sub_10001BBBC(v19, *((unint64_t *)&v19 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100A9F018()
{
  return sub_100AA35F0(&qword_1011041C0);
}

void *sub_100A9F024()
{
  return sub_100AA35F0(&qword_1011041D0);
}

id sub_100A9F030()
{
  return sub_100AA284C((uint64_t *)&unk_101111DF0);
}

void sub_100A9F03C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _BYTE v26[48];

  v1 = v0;
  sub_10001A9A8(&qword_101104148);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 48 * v15;
    sub_100AA497C(*(_QWORD *)(v2 + 56) + 48 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10050DE28((uint64_t)v26, *(_QWORD *)(v4 + 56) + v20);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_100A9F224()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8(&qword_101111CA0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100A9F3CC()
{
  sub_100A9F63C(type metadata accessor for SecureLocation, &qword_101111CB0);
}

void *sub_100A9F3E0()
{
  return sub_100AA35F0(&qword_101111518);
}

id sub_100A9F3EC()
{
  return sub_100AA3B48(&qword_10110C6F0);
}

void *sub_100A9F3F8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_101111CB8);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100A9F628()
{
  sub_100A9F63C(type metadata accessor for SecureLocationsSubscription, &qword_101111CA8);
}

void sub_100A9F63C(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  v5 = a1(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - v6;
  sub_10001A9A8(a2);
  v29 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    swift_release();
    *v29 = v10;
    return;
  }
  v11 = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)v11 >= v8 + 64 + 8 * v12)
    memmove(v11, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v31 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v31)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v19 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v20 = 16 * v19;
    v21 = (uint64_t *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    v23 = *v21;
    v22 = v21[1];
    v24 = *(_QWORD *)(v32 + 72) * v19;
    sub_10005972C(*(_QWORD *)(v8 + 56) + v24, (uint64_t)v7, a1);
    v25 = (_QWORD *)(*(_QWORD *)(v10 + 48) + v20);
    *v25 = v23;
    v25[1] = v22;
    sub_1000126EC((uint64_t)v7, *(_QWORD *)(v10 + 56) + v24, a1);
    swift_bridgeObjectRetain(v22);
  }
  v28 = v26 + 2;
  if (v28 >= v31)
    goto LABEL_26;
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100A9F86C()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111D00);
}

void *sub_100A9F880()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_101111D08);
}

void *sub_100A9F894()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111CF0);
}

void sub_100A9F8A8()
{
  sub_100A9F63C(type metadata accessor for MultipartAccessoryPairingInfo, (uint64_t *)&unk_1011119D0);
}

void *sub_100A9F8BC()
{
  return sub_100AA3310((uint64_t (*)(_QWORD))&type metadata accessor for URL, type metadata accessor for BeaconIdentifier, (uint64_t *)&unk_1011114A0);
}

void *sub_100A9F8D8()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_1011116E8);
}

void *sub_100A9F8EC()
{
  return sub_100AA0C38(&qword_1010EF1D0, (uint64_t *)&unk_101111CD0);
}

void *sub_100A9F900()
{
  return sub_100AA06F4(&qword_101111DA8);
}

void *sub_100A9F90C()
{
  return sub_100A9E33C(type metadata accessor for BeaconState, &qword_101111DA0);
}

void sub_100A9F920()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  __int128 v34;
  __int128 v35;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011042A0);
  v31 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release();
    *v31 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v32 = v5 + 64;
  v33 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v27 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v33)
      goto LABEL_26;
    v28 = *(_QWORD *)(v32 + 8 * v27);
    ++v11;
    if (!v28)
    {
      v11 = v27 + 1;
      if (v27 + 1 >= v33)
        goto LABEL_26;
      v28 = *(_QWORD *)(v32 + 8 * v11);
      if (!v28)
        break;
    }
LABEL_25:
    v14 = (v28 - 1) & v28;
    v16 = __clz(__rbit64(v28)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 40 * v16;
    v19 = *(_QWORD *)(v5 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_QWORD *)(v7 + 48) + v17;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v2 + 32);
    v23 = *(_OWORD *)(v19 + 8);
    v34 = *(_OWORD *)(v19 + 24);
    v35 = v23;
    v22(v21, v4, v1);
    v24 = *(_QWORD *)(v7 + 56) + v18;
    *(_QWORD *)v24 = v20;
    v26 = v34;
    v25 = v35;
    *(_OWORD *)(v24 + 8) = v35;
    *(_OWORD *)(v24 + 24) = v26;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(*((_QWORD *)&v35 + 1));
  }
  v29 = v27 + 2;
  if (v29 >= v33)
    goto LABEL_26;
  v28 = *(_QWORD *)(v32 + 8 * v29);
  if (v28)
  {
    v11 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v11 >= v33)
      goto LABEL_26;
    v28 = *(_QWORD *)(v32 + 8 * v11);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100A9FB7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  const void *v38;
  int64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v1 - 8);
  v42 = v1;
  __chkstk_darwin(v1);
  v40 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011118F8);
  v37 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v44 = v4;
  if (!v5)
  {
    result = (void *)swift_release(v3);
    v36 = v44;
    v35 = v37;
LABEL_28:
    *v35 = v36;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v38 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, v38, 8 * v8);
    v6 = v44;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v43 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v39 = (unint64_t)(v11 + 63) >> 6;
  v15 = v40;
  v14 = v41;
  v16 = v42;
  v17 = v44;
  while (1)
  {
    if (v13)
    {
      v45 = (v13 - 1) & v13;
      v46 = v10;
      v18 = __clz(__rbit64(v13)) | (v10 << 6);
      v19 = v43;
      goto LABEL_12;
    }
    v31 = v10 + 1;
    v19 = v43;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v31 >= v39)
      goto LABEL_26;
    v32 = *((_QWORD *)v38 + v31);
    v33 = v10 + 1;
    if (!v32)
    {
      v33 = v10 + 2;
      if (v10 + 2 >= v39)
        goto LABEL_26;
      v32 = *((_QWORD *)v38 + v33);
      if (!v32)
        break;
    }
LABEL_25:
    v45 = (v32 - 1) & v32;
    v46 = v33;
    v18 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v14 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v16);
    v21 = *(_QWORD *)(v19 + 56);
    v22 = 48 * v18;
    v23 = (uint64_t *)(v21 + 48 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = v23[3];
    v47 = v23[2];
    v48 = v24;
    v27 = *((_BYTE *)v23 + 32);
    v28 = v23[5];
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v17 + 48) + v20, v15, v16);
    v29 = *(_QWORD *)(v17 + 56) + v22;
    v30 = v48;
    *(_QWORD *)v29 = v25;
    *(_QWORD *)(v29 + 8) = v30;
    *(_QWORD *)(v29 + 16) = v47;
    *(_QWORD *)(v29 + 24) = v26;
    *(_BYTE *)(v29 + 32) = v27;
    *(_QWORD *)(v29 + 40) = v28;
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    result = (void *)swift_retain();
    v13 = v45;
    v10 = v46;
  }
  v34 = v10 + 3;
  if (v10 + 3 >= v39)
  {
LABEL_26:
    result = (void *)swift_release(v43);
    v35 = v37;
    v36 = v44;
    goto LABEL_28;
  }
  v32 = *((_QWORD *)v38 + v34);
  if (v32)
  {
    v33 = v10 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    v33 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v33 >= v39)
      goto LABEL_26;
    v32 = *((_QWORD *)v38 + v33);
    ++v34;
    if (v32)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100A9FE40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for ManagedCBPeripheralManager.KeyType(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011116C8);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (id)swift_release();
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (id)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v27 + 72) * v17;
    sub_10005972C(*(_QWORD *)(v5 + 48) + v18, (uint64_t)v4, type metadata accessor for ManagedCBPeripheralManager.KeyType);
    v19 = 8 * v17;
    v20 = *(void **)(*(_QWORD *)(v5 + 56) + v19);
    sub_1000126EC((uint64_t)v4, *(_QWORD *)(v7 + 48) + v18, type metadata accessor for ManagedCBPeripheralManager.KeyType);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v19) = v20;
    result = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (id)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100AA0074()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v36 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011116E0);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    swift_release();
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return;
  }
  v6 = v4;
  v7 = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)v7 >= v3 + 64 + 8 * v8)
  {
    memmove(v7, (const void *)(v3 + 64), 8 * v8);
    v6 = v38;
  }
  v33 = v3 + 64;
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v37 = v3;
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v34 = (unint64_t)(v11 + 63) >> 6;
  v14 = (uint64_t)v35;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      v17 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v17 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v34)
        goto LABEL_26;
      v27 = *(_QWORD *)(v33 + 8 * v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v16 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v18 = *(_QWORD *)(v36 + 72) * v16;
    sub_10005972C(*(_QWORD *)(v17 + 48) + v18, v14, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v19 = 24 * v16;
    v20 = *(_QWORD *)(v17 + 56) + 24 * v16;
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_BYTE *)(v20 + 16);
    v24 = v38;
    sub_1000126EC(v14, *(_QWORD *)(v38 + 48) + v18, type metadata accessor for ManagedCBPeripheralBeaconInfo);
    v25 = *(_QWORD *)(v24 + 56) + v19;
    *(_QWORD *)v25 = v22;
    *(_QWORD *)(v25 + 8) = v21;
    *(_BYTE *)(v25 + 16) = v23;
    swift_bridgeObjectRetain(v21);
  }
  v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_26:
    swift_release();
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v33 + 8 * v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v34)
      goto LABEL_26;
    v27 = *(_QWORD *)(v33 + 8 * v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_100AA02F4()
{
  sub_100AA0308(type metadata accessor for ManagedCBPeripheralBeaconInfo, &qword_1011116D8);
}

void sub_100AA0308(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = v2;
  v6 = a1(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - v7;
  sub_10001A9A8(a2);
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    swift_release();
LABEL_28:
    *v5 = v11;
    return;
  }
  v29 = v5;
  v12 = (void *)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)v12 >= v9 + 64 + 8 * v13)
    memmove(v12, (const void *)(v9 + 64), 8 * v13);
  v30 = v9 + 64;
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v25 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v19)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v25);
    ++v15;
    if (!v26)
    {
      v15 = v25 + 1;
      if (v25 + 1 >= v19)
        goto LABEL_26;
      v26 = *(_QWORD *)(v30 + 8 * v15);
      if (!v26)
        break;
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v21 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_12:
    v22 = *(_QWORD *)(v31 + 72) * v21;
    sub_10005972C(*(_QWORD *)(v9 + 48) + v22, (uint64_t)v8, a1);
    v23 = 8 * v21;
    v24 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v21);
    sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 48) + v22, a1);
    *(_QWORD *)(*(_QWORD *)(v11 + 56) + v23) = v24;
    swift_bridgeObjectRetain(v24);
  }
  v27 = v25 + 2;
  if (v27 >= v19)
  {
LABEL_26:
    swift_release();
    v5 = v29;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v30 + 8 * v27);
  if (v26)
  {
    v15 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v15 >= v19)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v15);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

id sub_100AA0538()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8(&qword_1011116D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v18);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v18) = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
    sub_10001BBBC(v19, *((unint64_t *)&v19 + 1));
    result = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA06E8()
{
  return sub_100AA06F4(&qword_1011117E8);
}

void *sub_100AA06F4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA088C()
{
  return sub_100AA35F0(&qword_101111550);
}

void *sub_100AA0898()
{
  return sub_100A9E33C(type metadata accessor for BeaconNamingRecord, (uint64_t *)&unk_101111478);
}

uint64_t sub_100AA08AC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnalyticsEvent.DiscreteType(a2, a1);
  return a2;
}

uint64_t sub_100AA08E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7CF58(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)&unk_1010A7928, (uint64_t)sub_100A9A800, a1, sub_10005CBA4, byte_1010A7940, (uint64_t)sub_100AA56F0, &qword_1010F7608, (uint64_t (*)(void))sub_100AA0974, &qword_1011114E8);
}

uint64_t sub_100AA0964()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA0974()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1011114D8;
  if (!qword_1011114D8)
  {
    v1 = sub_10001F784(&qword_1010F7608);
    v2 = sub_100006C64(&qword_1011114E0, 255, type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)&unk_100E6C7E4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1011114D8);
  }
  return result;
}

void sub_100AA09F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_1011116A0);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    swift_release();
    *v24 = v7;
    return;
  }
  v8 = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)v8 >= v5 + 64 + 8 * v9)
    memmove(v8, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100AA0C24()
{
  return sub_100AA0C38(&qword_1010EF168, (uint64_t *)&unk_101111590);
}

void *sub_100AA0C38(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v4 = sub_10001A9A8(a1);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v39 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v37 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(a2);
  v34 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = *(_QWORD *)(v8 + 16);
  v43 = v9;
  if (!v10)
  {
    result = (void *)swift_release();
    v33 = v43;
    v32 = v34;
LABEL_25:
    *v32 = v33;
    return result;
  }
  v11 = v9;
  result = (void *)(v9 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    v11 = v43;
  }
  v14 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v42 = v8;
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v35 = v8 + 64;
  v36 = (unint64_t)(v15 + 63) >> 6;
  v19 = v37;
  v18 = v38;
  v20 = (uint64_t)v39;
  for (i = v43; ; result = (void *)sub_100005CF0(v20, *(_QWORD *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v14 << 6);
      v24 = v42;
      goto LABEL_9;
    }
    v29 = v14 + 1;
    v24 = v42;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v36)
        goto LABEL_23;
      v30 = *(_QWORD *)(v35 + 8 * v14);
      if (!v30)
        break;
    }
LABEL_22:
    v17 = (v30 - 1) & v30;
    v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(_QWORD *)(v24 + 48) + v25, v18);
    v26 = *(_QWORD *)(v24 + 56);
    v27 = v41;
    v28 = *(_QWORD *)(v40 + 72) * v23;
    sub_10000F9B8(v26 + v28, v20, v41);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(i + 48) + v25, v19, v18);
  }
  v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    result = (void *)swift_release();
    v32 = v34;
    v33 = v43;
    goto LABEL_25;
  }
  v30 = *(_QWORD *)(v35 + 8 * v31);
  if (v30)
  {
    v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v14 >= v36)
      goto LABEL_23;
    v30 = *(_QWORD *)(v35 + 8 * v14);
    ++v31;
    if (v30)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_100AA0EF8()
{
  sub_100AA0308(type metadata accessor for StableIdentifier, &qword_10110AB08);
}

id sub_100AA0F0C()
{
  return sub_100AA0F20(type metadata accessor for BeaconStoreFileRecord, &qword_101111640);
}

id sub_100AA0F20(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id result;
  unint64_t v13;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = v2;
  v6 = a1(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v28 - v7;
  sub_10001A9A8(a2);
  v9 = *v2;
  v10 = static _DictionaryStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (id)swift_release();
LABEL_28:
    *v5 = v11;
    return result;
  }
  v29 = v5;
  result = (id)(v10 + 64);
  v13 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13)
    result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  v30 = v9 + 64;
  v15 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v16 = 1 << *(_BYTE *)(v9 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(v9 + 64);
  v19 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_12;
    }
    v25 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v19)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v25);
    ++v15;
    if (!v26)
    {
      v15 = v25 + 1;
      if (v25 + 1 >= v19)
        goto LABEL_26;
      v26 = *(_QWORD *)(v30 + 8 * v15);
      if (!v26)
        break;
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v21 = __clz(__rbit64(v26)) + (v15 << 6);
LABEL_12:
    v22 = 8 * v21;
    v23 = *(void **)(*(_QWORD *)(v9 + 48) + 8 * v21);
    v24 = *(_QWORD *)(v31 + 72) * v21;
    sub_10005972C(*(_QWORD *)(v9 + 56) + v24, (uint64_t)v8, a1);
    *(_QWORD *)(*(_QWORD *)(v11 + 48) + v22) = v23;
    sub_1000126EC((uint64_t)v8, *(_QWORD *)(v11 + 56) + v24, a1);
    result = v23;
  }
  v27 = v25 + 2;
  if (v27 >= v19)
  {
LABEL_26:
    result = (id)swift_release();
    v5 = v29;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v30 + 8 * v27);
  if (v26)
  {
    v15 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v15 >= v19)
      goto LABEL_26;
    v26 = *(_QWORD *)(v30 + 8 * v15);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100AA1148()
{
  sub_100AA1154(&qword_101104240);
}

void sub_100AA1154(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100AA1300()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  __int128 v21;

  v1 = v0;
  sub_10001A9A8(&qword_101111D78);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v21 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v21;
    sub_10001BBBC(v17, *((unint64_t *)&v17 + 1));
    result = (void *)sub_10001BBBC(v21, *((unint64_t *)&v21 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_100AA14C4()
{
  return sub_100AA2148(&qword_101111940, &qword_101111948);
}

void *sub_100AA14D8()
{
  return sub_100A9C2E4(&qword_1011119F8, (uint64_t (*)(_BYTE *, uint64_t))sub_10000F9FC);
}

void sub_100AA14EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8(&qword_1011119F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = (_BYTE)v16;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100AA1694()
{
  return sub_100AA16A8((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress, &qword_101104208);
}

void *sub_100AA16A8(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a1(0);
  v4 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (char *)&v35 - v5;
  sub_10001A9A8(a2);
  v36 = v2;
  v6 = *v2;
  v7 = static _DictionaryStorage.copy(original:)(*v2);
  v8 = *(_QWORD *)(v6 + 16);
  v42 = v7;
  if (!v8)
  {
    result = (void *)swift_release();
    v34 = v42;
    v33 = v36;
LABEL_28:
    *v33 = v34;
    return result;
  }
  v9 = v7;
  result = (void *)(v7 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    result = memmove(result, (const void *)(v6 + 64), 8 * v11);
    v9 = v42;
  }
  v37 = v6 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v41 = v6;
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v38 = (unint64_t)(v14 + 63) >> 6;
  v18 = v39;
  v17 = v40;
  v19 = v42;
  while (1)
  {
    if (v16)
    {
      v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v21 = v20 | (v13 << 6);
      v22 = v41;
      goto LABEL_12;
    }
    v30 = v13 + 1;
    v22 = v41;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v30 >= v38)
      goto LABEL_26;
    v31 = *(_QWORD *)(v37 + 8 * v30);
    ++v13;
    if (!v31)
    {
      v13 = v30 + 1;
      if (v30 + 1 >= v38)
        goto LABEL_26;
      v31 = *(_QWORD *)(v37 + 8 * v13);
      if (!v31)
        break;
    }
LABEL_25:
    v16 = (v31 - 1) & v31;
    v21 = __clz(__rbit64(v31)) + (v13 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v4 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v18, *(_QWORD *)(v22 + 48) + v23, v17);
    v24 = *(_QWORD *)(v22 + 56);
    v25 = 16 * v21;
    v26 = (uint64_t *)(v24 + 16 * v21);
    v27 = *v26;
    v28 = v26[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v19 + 48) + v23, v18, v17);
    v29 = (uint64_t *)(*(_QWORD *)(v19 + 56) + v25);
    *v29 = v27;
    v29[1] = v28;
    result = (void *)sub_10001BBBC(v27, v28);
  }
  v32 = v30 + 2;
  if (v32 >= v38)
  {
LABEL_26:
    result = (void *)swift_release();
    v33 = v36;
    v34 = v42;
    goto LABEL_28;
  }
  v31 = *(_QWORD *)(v37 + 8 * v32);
  if (v31)
  {
    v13 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v13 >= v38)
      goto LABEL_26;
    v31 = *(_QWORD *)(v37 + 8 * v13);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100AA191C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8(&qword_1011041A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    result = (void *)swift_retain();
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA1AC4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001A9A8(&qword_1011119E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + 16 * v15) = v17;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
    result = (void *)sub_10001BBBC(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA1C6C()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111968);
}

void *sub_100AA1C80()
{
  return sub_100A9E33C(type metadata accessor for SafeLocation, &qword_101111960);
}

void *sub_100AA1C94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10001A9A8(&qword_101104278);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v19 = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 16);
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_BYTE *)v22 = *(_BYTE *)v17;
    *(_QWORD *)(v22 + 8) = v19;
    *(_QWORD *)(v22 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA1E54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t i;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = type metadata accessor for BeaconScanner.AISLookupState(0);
  v36 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v35 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_10001A9A8(&qword_1010EF7C0);
  v3 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v33 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8((uint64_t *)&unk_101111930);
  v30 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = *(_QWORD *)(v5 + 16);
  v38 = v6;
  if (!v7)
  {
    result = (void *)swift_release();
    v28 = v38;
    v27 = v30;
LABEL_25:
    *v27 = v28;
    return result;
  }
  v8 = v6;
  result = (void *)(v6 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
  {
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
    v8 = v38;
  }
  v11 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v37 = v5;
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v31 = v5 + 64;
  v32 = (unint64_t)(v12 + 63) >> 6;
  v16 = v33;
  v15 = v34;
  v17 = (uint64_t)v35;
  for (i = v38;
        ;
        result = (void *)sub_1000126EC(v17, *(_QWORD *)(i + 56) + v23, type metadata accessor for BeaconScanner.AISLookupState))
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v11 << 6);
      v21 = v37;
      goto LABEL_9;
    }
    v24 = v11 + 1;
    v21 = v37;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v24);
    ++v11;
    if (!v25)
    {
      v11 = v24 + 1;
      if (v24 + 1 >= v32)
        goto LABEL_23;
      v25 = *(_QWORD *)(v31 + 8 * v11);
      if (!v25)
        break;
    }
LABEL_22:
    v14 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    v22 = *(_QWORD *)(v3 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v16, *(_QWORD *)(v21 + 48) + v22, v15);
    v23 = *(_QWORD *)(v36 + 72) * v20;
    sub_10005972C(*(_QWORD *)(v21 + 56) + v23, v17, type metadata accessor for BeaconScanner.AISLookupState);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(i + 48) + v22, v16, v15);
  }
  v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    result = (void *)swift_release();
    v27 = v30;
    v28 = v38;
    goto LABEL_25;
  }
  v25 = *(_QWORD *)(v31 + 8 * v26);
  if (v25)
  {
    v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v11 >= v32)
      goto LABEL_23;
    v25 = *(_QWORD *)(v31 + 8 * v11);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100AA2120()
{
  return sub_100A9E33C(type metadata accessor for SharedBeaconRecord, (uint64_t *)&unk_101111910);
}

char *sub_100AA2134()
{
  return sub_100AA2148(&qword_101111900, &qword_101111908);
}

char *sub_100AA2148(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *result;
  char *v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;

  v44 = sub_10001A9A8(a1);
  v40 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(a2);
  v36 = v2;
  v6 = *v2;
  v7 = static _DictionaryStorage.copy(original:)(*v2);
  v8 = *(_QWORD *)(v6 + 16);
  v46 = v7;
  if (!v8)
  {
    result = (char *)swift_release();
    v35 = v46;
    v34 = v36;
LABEL_25:
    *v34 = v35;
    return result;
  }
  v9 = v7;
  result = (char *)(v7 + 64);
  v11 = (char *)(v6 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  v37 = v6 + 64;
  if (v9 != v6 || result >= &v11[8 * v12])
  {
    result = (char *)memmove(result, v11, 8 * v12);
    v9 = v46;
  }
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v45 = v6;
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 64);
  v38 = (unint64_t)(v14 + 63) >> 6;
  v17 = v39;
  v18 = v40;
  v20 = v41;
  v19 = v42;
  v21 = v44;
  v22 = v46;
  while (1)
  {
    if (v16)
    {
      v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v47 = v13;
      v24 = v23 | (v13 << 6);
      v25 = v45;
      goto LABEL_9;
    }
    v30 = v13 + 1;
    v25 = v45;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v30 >= v38)
      goto LABEL_23;
    v31 = *(_QWORD *)(v37 + 8 * v30);
    v32 = v13 + 1;
    if (!v31)
    {
      v32 = v30 + 1;
      if (v30 + 1 >= v38)
        goto LABEL_23;
      v31 = *(_QWORD *)(v37 + 8 * v32);
      if (!v31)
        break;
    }
LABEL_22:
    v16 = (v31 - 1) & v31;
    v47 = v32;
    v24 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_9:
    v26 = *(_QWORD *)(v17 + 72) * v24;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v20, *(_QWORD *)(v25 + 48) + v26, v19);
    v27 = *(_QWORD *)(v18 + 72) * v24;
    v28 = *(_QWORD *)(v25 + 56) + v27;
    v29 = v43;
    (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v43, v28, v21);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v22 + 48) + v26, v20, v19);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v22 + 56) + v27, v29, v21);
    v13 = v47;
  }
  v33 = v30 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    result = (char *)swift_release();
    v34 = v36;
    v35 = v46;
    goto LABEL_25;
  }
  v31 = *(_QWORD *)(v37 + 8 * v33);
  if (v31)
  {
    v32 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    v32 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v32 >= v38)
      goto LABEL_23;
    v31 = *(_QWORD *)(v37 + 8 * v32);
    ++v33;
    if (v31)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_100AA2424()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23;

  v1 = v0;
  sub_10001A9A8(&qword_101111888);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v23 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v23;
    v19 = v17;
    result = (void *)sub_10001BBBC(v23, *((unint64_t *)&v23 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_100AA25E4()
{
  return sub_100AA3B48(&qword_101111878);
}

void *sub_100AA25F0()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111870);
}

void *sub_100AA2604()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(unint64_t, char *, uint64_t);
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_101111880);
  v6 = *v0;
  v7 = static _DictionaryStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v8;
    return result;
  }
  v26 = v1;
  result = (void *)(v7 + 64);
  v10 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  v27 = v6 + 64;
  v12 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v13 = 1 << *(_BYTE *)(v6 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v6 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v23 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v16)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v12;
    if (!v24)
    {
      v12 = v23 + 1;
      if (v23 + 1 >= v16)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v12);
      if (!v24)
        break;
    }
LABEL_25:
    v15 = (v24 - 1) & v24;
    v18 = __clz(__rbit64(v24)) + (v12 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v3 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v19, v2);
    v20 = 16 * v18;
    v21 = *(_QWORD *)(v8 + 48) + v19;
    v22 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    v28 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + v20);
    v22(v21, v5, v2);
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + v20) = v28;
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v16)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v12 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v12);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100AA2840()
{
  return sub_100AA284C((uint64_t *)&unk_101111528);
}

id sub_100AA284C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA29E8()
{
  return sub_100AA2A10(&qword_101111638, (uint64_t (*)(uint64_t, uint64_t))sub_1002437C4);
}

void *sub_100AA29FC()
{
  return sub_100AA2A10(&qword_101111630, (uint64_t (*)(uint64_t, uint64_t))sub_1009022B8);
}

void *sub_100AA2A10(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v4 = v2;
  sub_10001A9A8(a1);
  v5 = *v2;
  v6 = static _DictionaryStorage.copy(original:)(*v2);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v4 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v16)
      goto LABEL_26;
    v28 = *(_QWORD *)(v9 + 8 * v27);
    ++v12;
    if (!v28)
    {
      v12 = v27 + 1;
      if (v27 + 1 >= v16)
        goto LABEL_26;
      v28 = *(_QWORD *)(v9 + 8 * v12);
      if (!v28)
        break;
    }
LABEL_25:
    v15 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v12 << 6);
LABEL_12:
    v19 = 8 * v18;
    v20 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v18);
    v21 = 16 * v18;
    v22 = *(_QWORD *)(v5 + 56) + v21;
    v23 = *(_QWORD *)v22;
    v24 = *(unsigned __int8 *)(v22 + 8);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v19) = v20;
    v25 = *(_QWORD *)(v7 + 56) + v21;
    *(_QWORD *)v25 = v23;
    *(_BYTE *)(v25 + 8) = v24;
    v26 = v20;
    result = (void *)a2(v23, v24);
  }
  v29 = v27 + 2;
  if (v29 >= v16)
    goto LABEL_26;
  v28 = *(_QWORD *)(v9 + 8 * v29);
  if (v28)
  {
    v12 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v28 = *(_QWORD *)(v9 + 8 * v12);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100AA2BD4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_10001A9A8(&qword_101111558);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    swift_bridgeObjectRetain(v17);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100AA2D74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_10001A9A8(&qword_1011118A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v17 = *(_BYTE *)v16;
    v19 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
    LOBYTE(v16) = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    v20 = *(_QWORD *)(v4 + 48) + 24 * v15;
    *(_BYTE *)v20 = v17;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v20 + 16) = v18;
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
    swift_bridgeObjectRetain(v18);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100AA2F28()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_101111858);
}

void *sub_100AA2F3C()
{
  return sub_100A9E33C(type metadata accessor for AccessoryFirmwareUpdateStateInfo, &qword_101111848);
}

void *sub_100AA2F50()
{
  return sub_100A9E33C(type metadata accessor for AccessoryFirmwareUpdateCommandInfo, &qword_101111850);
}

void sub_100AA2F64()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_101111830);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 2 * v15;
    LOWORD(v17) = *(_WORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_WORD *)(*(_QWORD *)(v4 + 56) + v20) = (_WORD)v17;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_100AA3110()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  __int128 v28;

  v1 = v0;
  sub_10001A9A8(&qword_101111828);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 24 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v28 = *(_OWORD *)(v21 + 8);
    *v23 = v19;
    v23[1] = v18;
    v24 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v24 = v22;
    *(_OWORD *)(v24 + 8) = v28;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(*((_QWORD *)&v28 + 1));
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100AA32F4()
{
  return sub_100AA3310((uint64_t (*)(_QWORD))&type metadata accessor for Date, type metadata accessor for ShareAttemptTracker.AttemptKey, &qword_101111820);
}

void *sub_100AA3310(uint64_t (*a1)(_QWORD), uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t i;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t (*v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;

  v42 = a1(0);
  v6 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v41 = (char *)&v36 - v7;
  v43 = a2;
  v8 = a2(0);
  v40 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v39 = (char *)&v36 - v9;
  sub_10001A9A8(a3);
  v36 = v3;
  v10 = *v3;
  v11 = static _DictionaryStorage.copy(original:)(*v3);
  v12 = *(_QWORD *)(v10 + 16);
  v45 = v11;
  if (!v12)
  {
    result = (void *)swift_release();
    v35 = v45;
    v34 = v36;
LABEL_25:
    *v34 = v35;
    return result;
  }
  v13 = v11;
  result = (void *)(v11 + 64);
  v15 = (unint64_t)((1 << *(_BYTE *)(v13 + 32)) + 63) >> 6;
  if (v13 != v10 || (unint64_t)result >= v10 + 64 + 8 * v15)
  {
    result = memmove(result, (const void *)(v10 + 64), 8 * v15);
    v13 = v45;
  }
  v16 = 0;
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v10 + 16);
  v17 = 1 << *(_BYTE *)(v10 + 32);
  v44 = v10;
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v10 + 64);
  v37 = v10 + 64;
  v38 = (unint64_t)(v17 + 63) >> 6;
  v20 = (uint64_t)v39;
  v22 = v42;
  v21 = v43;
  for (i = v45;
        ;
        result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(i + 56) + v28, v30, v22))
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v16 << 6);
      v26 = v44;
      goto LABEL_9;
    }
    v31 = v16 + 1;
    v26 = v44;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v31 >= v38)
      goto LABEL_23;
    v32 = *(_QWORD *)(v37 + 8 * v31);
    ++v16;
    if (!v32)
    {
      v16 = v31 + 1;
      if (v31 + 1 >= v38)
        goto LABEL_23;
      v32 = *(_QWORD *)(v37 + 8 * v16);
      if (!v32)
        break;
    }
LABEL_22:
    v19 = (v32 - 1) & v32;
    v25 = __clz(__rbit64(v32)) + (v16 << 6);
LABEL_9:
    v27 = *(_QWORD *)(v40 + 72) * v25;
    sub_10005972C(*(_QWORD *)(v26 + 48) + v27, v20, v21);
    v28 = *(_QWORD *)(v6 + 72) * v25;
    v29 = *(_QWORD *)(v26 + 56) + v28;
    v30 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v41, v29, v22);
    sub_1000126EC(v20, *(_QWORD *)(i + 48) + v27, v21);
  }
  v33 = v31 + 2;
  if (v33 >= v38)
  {
LABEL_23:
    result = (void *)swift_release();
    v34 = v36;
    v35 = v45;
    goto LABEL_25;
  }
  v32 = *(_QWORD *)(v37 + 8 * v33);
  if (v32)
  {
    v16 = v33;
    goto LABEL_22;
  }
  while (1)
  {
    v16 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v16 >= v38)
      goto LABEL_23;
    v32 = *(_QWORD *)(v37 + 8 * v16);
    ++v33;
    if (v32)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

id sub_100AA35D8()
{
  return sub_100AA3B48(&qword_101111818);
}

void *sub_100AA35E4()
{
  return sub_100AA35F0(&qword_101104198);
}

void *sub_100AA35F0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v7);
    *v26 = v9;
    return result;
  }
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v27 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain(v21);
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_100AA3820()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_10001A9A8(&qword_101111578);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + 24 * v15;
    v19 = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 16);
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = *(_QWORD *)(v4 + 48) + v16;
    *(_BYTE *)v22 = *(_BYTE *)v17;
    *(_QWORD *)(v22 + 8) = v19;
    *(_QWORD *)(v22 + 16) = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_100AA39E0()
{
  return sub_100A9E33C(type metadata accessor for OwnerSharingCircle, &qword_1011117C8);
}

void *sub_100AA39F4()
{
  return sub_100A9DD2C(type metadata accessor for BeaconKeyManager.FileKey, &qword_101104230);
}

void *sub_100AA3A08()
{
  return sub_100A9DD2C(type metadata accessor for BeaconKeyManager.FileKey, &qword_1011114F0);
}

uint64_t sub_100AA3A1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA3A2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1011114F8;
  if (!qword_1011114F8)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F7810);
    v2 = sub_100006C64(&qword_101111500, 255, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_100E55E48);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1011114F8);
  }
  return result;
}

uint64_t sub_100AA3AAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA3ABC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111538;
  if (!qword_101111538)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F47E0);
    v2 = sub_100006C64(&qword_101111540, 255, type metadata accessor for LocationProvider, (uint64_t)&protocol conformance descriptor for LocationProvider);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111538);
  }
  return result;
}

id sub_100AA3B3C()
{
  return sub_100AA3B48((uint64_t *)&unk_101111740);
}

id sub_100AA3B48(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(a1);
  v26 = v1;
  v7 = *v1;
  v8 = static _DictionaryStorage.copy(original:)(*v1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v26 = v9;
    return result;
  }
  result = (id)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v27 = v7 + 64;
  v28 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v28)
        goto LABEL_26;
      v23 = *(_QWORD *)(v27 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v19 = *(_QWORD *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(_QWORD *)(v7 + 48) + v19, v3);
    v20 = 8 * v18;
    v21 = *(void **)(*(_QWORD *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(_QWORD *)(v9 + 48) + v19, v6, v3);
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v21;
    result = v21;
  }
  v24 = v22 + 2;
  if (v24 >= v28)
    goto LABEL_26;
  v23 = *(_QWORD *)(v27 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v28)
      goto LABEL_26;
    v23 = *(_QWORD *)(v27 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA3D70()
{
  return sub_100AA3D84((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t *)&unk_101111D40);
}

void *sub_100AA3D84(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  int64_t v29;

  v4 = a1(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - v6;
  sub_10001A9A8(a2);
  v27 = v2;
  v8 = *v2;
  v9 = static _DictionaryStorage.copy(original:)(*v2);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v27 = v10;
    return result;
  }
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v28 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v29 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v14 << 6);
      goto LABEL_12;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v23);
    ++v14;
    if (!v24)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v29)
        goto LABEL_26;
      v24 = *(_QWORD *)(v28 + 8 * v14);
      if (!v24)
        break;
    }
LABEL_25:
    v17 = (v24 - 1) & v24;
    v19 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v5 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v20, v4);
    v21 = 8 * v19;
    v22 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19);
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v20, v7, v4);
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + v21) = v22;
    result = (void *)swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v29)
    goto LABEL_26;
  v24 = *(_QWORD *)(v28 + 8 * v25);
  if (v24)
  {
    v14 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v14 >= v29)
      goto LABEL_26;
    v24 = *(_QWORD *)(v28 + 8 * v14);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100AA3FB4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  const void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v35 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001A9A8(&qword_101111738);
  v32 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v38 = v4;
  if (!v5)
  {
    result = (void *)swift_release();
    v30 = v38;
    v29 = v32;
LABEL_28:
    *v29 = v30;
    return result;
  }
  v6 = v4;
  result = (void *)(v4 + 64);
  v8 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = (const void *)(v3 + 64);
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    result = memmove(result, v34, 8 * v8);
    v6 = v38;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v37 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v35;
  v14 = v36;
  v16 = v38;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v10 << 6);
      v19 = v37;
      goto LABEL_12;
    }
    v26 = v10 + 1;
    v19 = v37;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v26);
    ++v10;
    if (!v27)
    {
      v10 = v26 + 1;
      if (v26 + 1 >= v33)
        goto LABEL_26;
      v27 = *((_QWORD *)v34 + v10);
      if (!v27)
        break;
    }
LABEL_25:
    v13 = (v27 - 1) & v27;
    v18 = __clz(__rbit64(v27)) + (v10 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(_QWORD *)(v19 + 48) + v20, v14);
    v21 = 16 * v18;
    v22 = *(_QWORD *)(v19 + 56) + 16 * v18;
    v23 = *(_BYTE *)v22;
    v24 = *(_QWORD *)(v22 + 8);
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(_QWORD *)(v16 + 48) + v20, v15, v14);
    v25 = *(_QWORD *)(v16 + 56) + v21;
    *(_BYTE *)v25 = v23;
    *(_QWORD *)(v25 + 8) = v24;
    result = (void *)swift_retain();
  }
  v28 = v26 + 2;
  if (v28 >= v33)
  {
LABEL_26:
    result = (void *)swift_release();
    v29 = v32;
    v30 = v38;
    goto LABEL_28;
  }
  v27 = *((_QWORD *)v34 + v28);
  if (v27)
  {
    v10 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v10 >= v33)
      goto LABEL_26;
    v27 = *((_QWORD *)v34 + v10);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100AA422C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  __n128 v20;
  Swift::UInt v21;
  int64_t v22;
  unint64_t v23;
  unint64_t i;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  Swift::Int v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *((_QWORD *)a1 + 8);
  v12 = a1[1];
  v33 = *a1;
  v34 = v12;
  v13 = a1[2];
  v14 = a1[3];
  v30[1] = a1;
  v35 = v13;
  v36 = v14;
  v37 = v11;
  v31 = Hasher._finalize()();
  v32 = a2;
  v15 = a2 + 56;
  v16 = 1 << *(_BYTE *)(a2 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & *(_QWORD *)(a2 + 56);
  v19 = (unint64_t)(v16 + 63) >> 6;
  v20 = swift_bridgeObjectRetain(a2);
  v21 = 0;
  v22 = 0;
  if (!v18)
    goto LABEL_5;
LABEL_4:
  v23 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (i = v23 | (v22 << 6); ; i = __clz(__rbit64(v26)) + (v22 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v10, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v5 + 72) * i, v4, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v10, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
      goto LABEL_19;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v28 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v4, v28);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v21 ^= v29;
    if (v18)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v22++, 1))
      goto LABEL_21;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    if (!v26)
      break;
LABEL_14:
    v18 = (v26 - 1) & v26;
  }
  v27 = v22 + 1;
  if (v22 + 1 >= v19)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v10, 1, 1, v4, v20);
LABEL_19:
    swift_release(v32);
    Hasher._combine(_:)(v21);
    return;
  }
  v26 = *(_QWORD *)(v15 + 8 * v27);
  if (v26)
  {
    ++v22;
    goto LABEL_14;
  }
  while (1)
  {
    v22 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v22 >= v19)
      goto LABEL_18;
    v26 = *(_QWORD *)(v15 + 8 * v22);
    ++v27;
    if (v26)
      goto LABEL_14;
  }
  __break(1u);
LABEL_21:
  __break(1u);
}

void sub_100AA44BC(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  Swift::UInt v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::UInt v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19[9];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v20 = *a1;
  v21 = v4;
  v5 = a1[3];
  v22 = a1[2];
  v23 = v5;
  v24 = v3;
  Hasher._finalize()();
  v6 = 0;
  v7 = 0;
  v8 = a2 + 56;
  v9 = 1 << *(_BYTE *)(a2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a2 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v7++, 1))
      goto LABEL_19;
    if (v7 >= v12)
    {
LABEL_17:
      Hasher._combine(_:)(v6);
      return;
    }
    v17 = *(_QWORD *)(v8 + 8 * v7);
    if (!v17)
      break;
LABEL_16:
    v11 = (v17 - 1) & v17;
    v14 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_5:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v14);
    Hasher.init(_seed:)(v19);
    Hasher._combine(_:)(v15);
    v6 ^= Hasher._finalize()();
  }
  v18 = v7 + 1;
  if (v7 + 1 >= v12)
    goto LABEL_17;
  v17 = *(_QWORD *)(v8 + 8 * v18);
  if (v17)
  {
    ++v7;
    goto LABEL_16;
  }
  while (1)
  {
    v7 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v7 >= v12)
      goto LABEL_17;
    v17 = *(_QWORD *)(v8 + 8 * v7);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_100AA4624@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7CF58(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_1010A7A18, (uint64_t)sub_100A9A800, a1, sub_10005CBA4, byte_1010A7A30, (uint64_t)sub_100AA56F0, &qword_1010EE0E0, (uint64_t (*)(void))sub_100AA46B0, &qword_1011115E8);
}

uint64_t sub_100AA46A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA46B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1011115D8;
  if (!qword_1011115D8)
  {
    v1 = sub_10001F784(&qword_1010EE0E0);
    v2 = sub_100006C64(&qword_1011115E0, 255, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_100E59560);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1011115D8);
  }
  return result;
}

uint64_t sub_100AA4730@<X0>(uint64_t *a1@<X8>)
{
  return sub_1008121B8(a1);
}

uint64_t sub_100AA4748()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA4758()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1011116F8;
  if (!qword_1011116F8)
  {
    v1 = sub_10001F784(&qword_10110EEB0);
    v2 = sub_100006C64(&qword_101111700, 255, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_100E45760);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1011116F8);
  }
  return result;
}

uint64_t sub_100AA47D8@<X0>(uint64_t a1@<X8>)
{
  return sub_100AA480C(type metadata accessor for SharingCircleSecret, (uint64_t *)&unk_101111620, (uint64_t (*)(void))sub_100AA4848, &qword_101111778, a1);
}

uint64_t sub_100AA480C@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;

  return sub_100A7DDE8(*(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(_QWORD *)(v5 + 48), a1, a2, a3, a5, a4);
}

unint64_t sub_100AA4848()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111768;
  if (!qword_101111768)
  {
    v1 = sub_10001F784((uint64_t *)&unk_101111620);
    v2 = sub_100006C64((unint64_t *)&unk_10110F110, 255, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57E74);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111768);
  }
  return result;
}

uint64_t sub_100AA48C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100AA480C(type metadata accessor for OwnerPeerTrust, (uint64_t *)&unk_1010EE160, (uint64_t (*)(void))sub_100AA48FC, &qword_1011117C0, a1);
}

unint64_t sub_100AA48FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1011117B0;
  if (!qword_1011117B0)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010EE160);
    v2 = sub_100006C64(&qword_1010F29A0, 255, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D43C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1011117B0);
  }
  return result;
}

uint64_t sub_100AA497C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for AnalyticsEvent.Mode(a2, a1);
  return a2;
}

uint64_t sub_100AA49B8@<X0>(uint64_t a1@<X8>)
{
  return sub_100AA480C(type metadata accessor for MemberPeerTrust, &qword_1010EC868, (uint64_t (*)(void))sub_100AA49EC, (uint64_t *)&unk_1011119B0, a1);
}

unint64_t sub_100AA49EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1011119A0;
  if (!qword_1011119A0)
  {
    v1 = sub_10001F784(&qword_1010EC868);
    v2 = sub_100006C64((unint64_t *)&unk_1011125F0, 255, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B0C8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1011119A0);
  }
  return result;
}

uint64_t sub_100AA4A6C()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

uint64_t sub_100AA4A78()
{
  return sub_100AA4ACC((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress, (uint64_t (*)(uint64_t))sub_10081F5CC);
}

uint64_t sub_100AA4A8C()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100AA4A98()
{
  return sub_100AA4ACC((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t))sub_10081AECC);
}

uint64_t sub_100AA4AAC()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100AA4AB8()
{
  return sub_100AA4ACC((uint64_t (*)(_QWORD))&type metadata accessor for UUID, (uint64_t (*)(uint64_t))sub_10080B950);
}

uint64_t sub_100AA4ACC(uint64_t (*a1)(_QWORD), uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return a2(v2 + ((v4 + 24) & ~v4));
}

unint64_t sub_100AA4B24()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111A30;
  if (!qword_101111A30)
  {
    v1 = sub_10001F784(&qword_10110BDD8);
    v2 = sub_100006C64(&qword_10110BDA8, 255, type metadata accessor for SecureLocationsCachedSharingKey, (uint64_t)&unk_100E52BC0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111A30);
  }
  return result;
}

uint64_t sub_100AA4BA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA4BB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111A50;
  if (!qword_101111A50)
  {
    v1 = sub_10001F784(&qword_1010F33A8);
    v2 = sub_100006C64(&qword_1010F7E60, 255, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_100E3728C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111A50);
  }
  return result;
}

unint64_t sub_100AA4C34()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111A70;
  if (!qword_101111A70)
  {
    v1 = sub_10001F784((uint64_t *)&unk_101105880);
    v2 = sub_100006C64((unint64_t *)&unk_10110FBF8, 255, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E58640);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111A70);
  }
  return result;
}

uint64_t sub_100AA4CB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA4CC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111A90;
  if (!qword_101111A90)
  {
    v1 = sub_10001F784(&qword_1010FA070);
    v2 = sub_100006C64(&qword_1010ED9C8, 255, type metadata accessor for ShareRecord, (uint64_t)&unk_100E25B48);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111A90);
  }
  return result;
}

uint64_t sub_100AA4D44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA4D54()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111AA8;
  if (!qword_101111AA8)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010FF7F0);
    v2 = sub_100006C64(&qword_101111AB0, 255, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3ABC8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111AA8);
  }
  return result;
}

uint64_t sub_100AA4DD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA4DE4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111AC8;
  if (!qword_101111AC8)
  {
    v1 = sub_10001F784(&qword_101102FB0);
    v2 = sub_100006C64(&qword_101111AD0, 255, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_100E2C374);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111AC8);
  }
  return result;
}

uint64_t sub_100AA4E64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA4E74()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111AE8;
  if (!qword_101111AE8)
  {
    v1 = sub_10001F784(&qword_101111AE0);
    v2 = sub_100006C64(&qword_101111AF0, 255, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_100E3E5A0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111AE8);
  }
  return result;
}

uint64_t sub_100AA4EF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AA4F04(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    v7 = a3();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100AA4F68()
{
  unint64_t result;

  result = qword_101111B10;
  if (!qword_101111B10)
  {
    result = swift_getWitnessTable(asc_100E642CC, &type metadata for SecureLocationLabel);
    atomic_store(result, (unint64_t *)&qword_101111B10);
  }
  return result;
}

uint64_t sub_100AA4FAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA4FBC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111B28;
  if (!qword_101111B28)
  {
    v1 = sub_10001F784(&qword_101111B20);
    v2 = sub_100006C64(&qword_101111B30, 255, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_100E52D98);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111B28);
  }
  return result;
}

uint64_t sub_100AA503C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA504C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111B48;
  if (!qword_101111B48)
  {
    v1 = sub_10001F784(&qword_101111B40);
    v2 = sub_100006C64(&qword_101111B50, 255, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_100E2251C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111B48);
  }
  return result;
}

uint64_t sub_100AA50CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA50DC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111B68;
  if (!qword_101111B68)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F47F0);
    v2 = sub_100006C64(&qword_101111B70, 255, type metadata accessor for LostModeRecord, (uint64_t)&unk_100E5A914);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111B68);
  }
  return result;
}

uint64_t sub_100AA515C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA516C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111B88;
  if (!qword_101111B88)
  {
    v1 = sub_10001F784(&qword_101111B80);
    v2 = sub_100006C64(&qword_101111B90, 255, type metadata accessor for LeashRecord, (uint64_t)&unk_100E700F4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111B88);
  }
  return result;
}

uint64_t sub_100AA51EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA51FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111BA0;
  if (!qword_101111BA0)
  {
    v1 = sub_10001F784(&qword_1010F7AE0);
    v2 = sub_100006C64(&qword_101111BA8, 255, type metadata accessor for KeySyncRecord, (uint64_t)&unk_100E5DD60);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111BA0);
  }
  return result;
}

uint64_t sub_100AA527C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA528C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111BC0;
  if (!qword_101111BC0)
  {
    v1 = sub_10001F784(&qword_10110AB60);
    v2 = sub_100006C64(&qword_10110EBE0, 255, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_100E5714C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111BC0);
  }
  return result;
}

uint64_t sub_100AA530C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA531C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111BE0;
  if (!qword_101111BE0)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F47D0);
    v2 = sub_100006C64(&qword_1010ED690, 255, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_100E252E4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111BE0);
  }
  return result;
}

uint64_t sub_100AA539C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA53AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111C00;
  if (!qword_101111C00)
  {
    v1 = sub_10001F784(&qword_101106E40);
    v2 = sub_100006C64((unint64_t *)&unk_1011141A0, 255, type metadata accessor for SafeLocation, (uint64_t)&unk_100E5E354);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111C00);
  }
  return result;
}

uint64_t sub_100AA542C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA543C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111C20;
  if (!qword_101111C20)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010EE180);
    v2 = sub_100006C64(&qword_1010FA8A0, 255, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F504);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111C20);
  }
  return result;
}

uint64_t sub_100AA54BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7CF58(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_1010A7F90, (uint64_t)sub_100A9A800, a1, sub_10005CBA4, byte_1010A7FA8, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010EE180, (uint64_t (*)(void))sub_100AA543C, (uint64_t *)&unk_101111C30);
}

uint64_t sub_100AA5538@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100A7CF58(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD **)(v1 + 48), type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_1010A7FE0, (uint64_t)sub_100A9A800, a1, sub_10005CBA4, byte_1010A7FF8, (uint64_t)sub_100AA56F0, (uint64_t *)&unk_1010F47C0, (uint64_t (*)(void))sub_100AA55C4, &qword_101111C80);
}

uint64_t sub_100AA55B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100AA55C4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101111C78;
  if (!qword_101111C78)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F47C0);
    v2 = sub_100006C64((unint64_t *)&unk_10110EE50, 255, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57A50);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101111C78);
  }
  return result;
}

uint64_t sub_100AA5644()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100AA56F0(uint64_t *a1@<X8>)
{
  sub_100A9A818(a1);
}

uint64_t destroy for MessagingDevice(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  return swift_bridgeObjectRelease(a1[19]);
}

uint64_t initializeWithCopy for MessagingDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v8;
  v9 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v10;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v11 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for MessagingDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t assignWithTake for MessagingDevice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a2 + 120);
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v18;
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  *(_BYTE *)(a1 + 129) = *(_BYTE *)(a2 + 129);
  *(_BYTE *)(a1 + 130) = *(_BYTE *)(a2 + 130);
  *(_BYTE *)(a1 + 131) = *(_BYTE *)(a2 + 131);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 152);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v20;
  swift_bridgeObjectRelease(v21);
  return a1;
}

ValueMetadata *type metadata accessor for MessagingDevice()
{
  return &type metadata for MessagingDevice;
}

uint64_t sub_100AA5AA0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::UInt v21[2];
  uint64_t v22;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease();
  v6 = v2[2];
  v7 = v2[3];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease();
  v8 = v2[4];
  v9 = v2[5];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease();
  v10 = v2[6];
  v11 = v2[7];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease();
  v12 = v2[8];
  v13 = v2[9];
  swift_bridgeObjectRetain(v13);
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRelease();
  v14 = v2[10];
  v15 = v2[11];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v14, v15);
  swift_bridgeObjectRelease();
  v16 = v2[12];
  v17 = v2[13];
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(a1, v16, v17);
  swift_bridgeObjectRelease();
  v18 = v2[14];
  v19 = v2[15];
  swift_bridgeObjectRetain(v19);
  String.hash(into:)(a1, v18, v19);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v2[16] & 1);
  Hasher._combine(_:)(*((_BYTE *)v2 + 129) & 1);
  Hasher._combine(_:)(*((_BYTE *)v2 + 130) & 1);
  Hasher._combine(_:)(*((_BYTE *)v2 + 131) & 1);
  *(_OWORD *)v21 = *(_OWORD *)(v2 + 17);
  v22 = v2[19];
  Hasher._combine(_:)(LOBYTE(v21[0]));
  swift_bridgeObjectRetain(v22);
  String.hash(into:)(a1, v21[1], v22);
  return sub_100AA62E8((uint64_t)v21);
}

Swift::Int sub_100AA5C5C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AA5AA0((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100AA5C9C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AA5AA0((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL sub_100AA5CD4(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[10];
  _OWORD v14[10];

  v2 = a1[7];
  v13[6] = a1[6];
  v13[7] = v2;
  v3 = a1[9];
  v13[8] = a1[8];
  v13[9] = v3;
  v4 = a1[3];
  v13[2] = a1[2];
  v13[3] = v4;
  v5 = a1[5];
  v13[4] = a1[4];
  v13[5] = v5;
  v6 = a1[1];
  v13[0] = *a1;
  v13[1] = v6;
  v7 = a2[7];
  v14[6] = a2[6];
  v14[7] = v7;
  v8 = a2[9];
  v14[8] = a2[8];
  v14[9] = v8;
  v9 = a2[3];
  v14[2] = a2[2];
  v14[3] = v9;
  v10 = a2[5];
  v14[4] = a2[4];
  v14[5] = v10;
  v11 = a2[1];
  v14[0] = *a2;
  v14[1] = v11;
  return sub_100AA5E10((uint64_t *)v13, (uint64_t)v14);
}

uint64_t sub_100AA5D58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;

  v3 = *(_QWORD *)(v2 + 96);
  v4 = *(void **)(v2 + 104);
  v5._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(a1, a2);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 8250;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(v4);
  v8._countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v4);
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 60;
}

BOOL sub_100AA5E10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    v10 = a1[2];
    v11 = a1[3];
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 24);
    v14 = v10 == v12 && v11 == v13;
    if (v14
      || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), result = 0, (v15 & 1) != 0))
    {
      if ((v16 = a1[4], v17 = a1[5], v18 = *(_QWORD *)(a2 + 32), v19 = *(_QWORD *)(a2 + 40), v16 == v18) && v17 == v19
        || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0), result = 0, (v20 & 1) != 0))
      {
        if ((v21 = a1[6], v22 = a1[7], v23 = *(_QWORD *)(a2 + 48), v24 = *(_QWORD *)(a2 + 56), v21 == v23)
          && v22 == v24
          || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v23, v24, 0), result = 0, (v25 & 1) != 0))
        {
          if ((v26 = a1[8], v27 = a1[9], v28 = *(_QWORD *)(a2 + 64), v29 = *(_QWORD *)(a2 + 72), v26 == v28)
            && v27 == v29
            || (v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v28, v29, 0), result = 0, (v30 & 1) != 0))
          {
            if ((v31 = a1[10], v32 = a1[11], v33 = *(_QWORD *)(a2 + 80), v34 = *(_QWORD *)(a2 + 88), v31 == v33)
              && v32 == v34
              || (v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0),
                  result = 0,
                  (v35 & 1) != 0))
            {
              if ((v36 = a1[12], v37 = a1[13], v38 = *(_QWORD *)(a2 + 96), v39 = *(_QWORD *)(a2 + 104), v36 == v38)
                && v37 == v39
                || (v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v37, v38, v39, 0),
                    result = 0,
                    (v40 & 1) != 0))
              {
                if ((v41 = a1[14], v42 = a1[15], v43 = *(_QWORD *)(a2 + 112), v44 = *(_QWORD *)(a2 + 120), v41 == v43)
                  && v42 == v44
                  || (v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v43, v44, 0),
                      result = 0,
                      (v45 & 1) != 0))
                {
                  result = 0;
                  if (((*((unsigned __int8 *)a1 + 128) ^ *(unsigned __int8 *)(a2 + 128)) & 1) == 0
                    && ((*((unsigned __int8 *)a1 + 129) ^ *(unsigned __int8 *)(a2 + 129)) & 1) == 0
                    && ((*((unsigned __int8 *)a1 + 130) ^ *(unsigned __int8 *)(a2 + 130)) & 1) == 0
                    && ((*((unsigned __int8 *)a1 + 131) ^ *(unsigned __int8 *)(a2 + 131)) & 1) == 0
                    && *((unsigned __int8 *)a1 + 136) == *(unsigned __int8 *)(a2 + 136))
                  {
                    v46 = a1[18];
                    v47 = a1[19];
                    v48 = *(_QWORD *)(a2 + 144);
                    v49 = *(_QWORD *)(a2 + 152);
                    if (v46 == v48 && v47 == v49)
                      return 1;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v48, v49, 0) & 1) != 0)
                      return 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100AA600C(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = objc_msgSend(a1, "uniqueID");
  if (!v4)
  {
    __break(1u);
    goto LABEL_12;
  }
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = objc_msgSend(a1, "uniqueIDOverride");
  if (!v9)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v10 = v9;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;

  v14 = objc_msgSend(a1, "modelIdentifier");
  if (!v14)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v15 = v14;
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v18 = v17;

  v19 = objc_msgSend(a1, "productName");
  if (!v19)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v19;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v62 = v22;

  v23 = objc_msgSend(a1, "productVersion");
  if (!v23)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v24 = v23;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v60 = v25;

  v26 = objc_msgSend(a1, "productBuildVersion");
  if (!v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v27 = v26;
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v58 = v29;
  v59 = v28;

  v30 = objc_msgSend(a1, "name");
  if (!v30)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v31 = v30;
  v57 = v21;
  v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v55 = v33;
  v56 = v32;

  v34 = objc_msgSend(a1, "service");
  if (!v34)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v35 = v34;
  v50 = v18;
  v51 = v16;
  v52 = v13;
  v53 = v11;
  v54 = v8;
  v36 = v6;
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v48 = v38;
  v49 = v37;

  v39 = objc_msgSend(a1, "isLocallyPaired");
  v40 = objc_msgSend(a1, "isActive");
  v41 = objc_msgSend(a1, "isNearby");
  v42 = objc_msgSend(a1, "isConnected");
  v43 = IDSCopyIDForDevice(a1);
  if (v43)
  {
    v44 = (void *)v43;
    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v47 = v46;

    *(_QWORD *)a2 = v36;
    *(_QWORD *)(a2 + 8) = v54;
    *(_QWORD *)(a2 + 16) = v53;
    *(_QWORD *)(a2 + 24) = v52;
    *(_QWORD *)(a2 + 32) = v51;
    *(_QWORD *)(a2 + 40) = v50;
    *(_QWORD *)(a2 + 48) = v57;
    *(_QWORD *)(a2 + 56) = v62;
    *(_QWORD *)(a2 + 64) = v61;
    *(_QWORD *)(a2 + 72) = v60;
    *(_QWORD *)(a2 + 80) = v59;
    *(_QWORD *)(a2 + 88) = v58;
    *(_QWORD *)(a2 + 96) = v56;
    *(_QWORD *)(a2 + 104) = v55;
    *(_QWORD *)(a2 + 112) = v49;
    *(_QWORD *)(a2 + 120) = v48;
    *(_BYTE *)(a2 + 128) = v39;
    *(_BYTE *)(a2 + 129) = v40;
    *(_BYTE *)(a2 + 130) = v41;
    *(_BYTE *)(a2 + 131) = v42;
    *(_BYTE *)(a2 + 136) = 3;
    *(_QWORD *)(a2 + 144) = v45;
    *(_QWORD *)(a2 + 152) = v47;
    return;
  }
LABEL_19:
  __break(1u);
}

uint64_t sub_100AA62E8(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return a1;
}

id sub_100AA6310()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  id v4;
  int *v5;
  Class isa;
  NSString v7;

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocation), "init");
  objc_msgSend(v2, "setLongitude:", *(double *)(v0 + 16));
  objc_msgSend(v2, "setLatitude:", *(double *)(v0 + 24));
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setFindMyId:", v3);

  objc_msgSend(v2, "setVerticalAccuracy:", *(double *)(v1 + 32));
  objc_msgSend(v2, "setHorizontalAccuracy:", *(double *)(v1 + 40));
  objc_msgSend(v2, "setSpeed:", *(double *)(v1 + 48));
  objc_msgSend(v2, "setCourse:", *(double *)(v1 + 56));
  objc_msgSend(v2, "setAltitude:", *(double *)(v1 + 64));
  if ((*(_BYTE *)(v1 + 80) & 1) == 0)
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v1 + 72));
    objc_msgSend(v2, "setFloor:", v4);

  }
  v5 = (int *)type metadata accessor for SecureLocation(0);
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setTimestamp:", isa);

  objc_msgSend(v2, "setMotionActivityState:", *(_QWORD *)(v1 + v5[14]));
  objc_msgSend(v2, "setPublishReason:", *(_QWORD *)(v1 + v5[15]));
  if (*(_QWORD *)(v1 + v5[16] + 8))
    v7 = String._bridgeToObjectiveC()();
  else
    v7 = 0;
  objc_msgSend(v2, "setLocationLabel:", v7);

  return v2;
}

uint64_t sub_100AA64E4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  char v13;
  uint64_t v14;
  Swift::String v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v35;
  char v36;
  _QWORD v37[2];

  v37[0] = 0;
  v37[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(100);
  v1._object = (void *)0x8000000100EED2D0;
  v1._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  v2 = *(_QWORD *)v0;
  v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 15392;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  Double.write<A>(to:)(v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 24));
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  Double.write<A>(to:)(v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 16));
  v7._countAndFlagsBits = 0x20617620203ELL;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  Double.write<A>(to:)(v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 32));
  v8._countAndFlagsBits = 543254560;
  v8._object = (void *)0xE400000000000000;
  String.append(_:)(v8);
  Double.write<A>(to:)(v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 40));
  v9._countAndFlagsBits = 544240416;
  v9._object = (void *)0xE400000000000000;
  String.append(_:)(v9);
  Double.write<A>(to:)(v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 48));
  v10._countAndFlagsBits = 0x2073726320;
  v10._object = (void *)0xE500000000000000;
  String.append(_:)(v10);
  Double.write<A>(to:)(v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 56));
  v11._countAndFlagsBits = 0x20746C6120;
  v11._object = (void *)0xE500000000000000;
  String.append(_:)(v11);
  Double.write<A>(to:)(v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + 64));
  v12._countAndFlagsBits = 543974944;
  v12._object = (void *)0xE400000000000000;
  String.append(_:)(v12);
  v13 = *(_BYTE *)(v0 + 80);
  v35 = *(_QWORD *)(v0 + 72);
  v36 = v13;
  v14 = sub_10001A9A8(&qword_1010ED5C0);
  _print_unlocked<A, B>(_:_:)(&v35, v37, v14, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v15._countAndFlagsBits = 544437280;
  v15._object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  v16 = (int *)type metadata accessor for SecureLocation(0);
  v17 = type metadata accessor for Date(0);
  v18 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 544435488;
  v20._object = (void *)0xE400000000000000;
  String.append(_:)(v20);
  v21 = 0xEA00000000007972;
  v22 = 0x616E6F6974617473;
  switch(*(_QWORD *)(v0 + v16[14]))
  {
    case 1:
      break;
    case 2:
      v21 = 0xE700000000000000;
      v23 = 1802264951;
      goto LABEL_6;
    case 3:
      v21 = 0xE700000000000000;
      v23 = 1852732786;
      goto LABEL_6;
    case 4:
      v21 = 0xE700000000000000;
      v23 = 1818458467;
LABEL_6:
      v22 = v23 | 0x676E6900000000;
      break;
    case 5:
      v21 = 0xEA00000000006576;
      v22 = 0x69746F6D6F747561;
      break;
    default:
      v21 = 0xE700000000000000;
      v22 = 0x6E776F6E6B6E75;
      break;
  }
  v24 = v21;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 544370720;
  v25._object = (void *)0xE400000000000000;
  String.append(_:)(v25);
  v26._countAndFlagsBits = sub_100AA723C(*(_QWORD *)(v0 + v16[15]));
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x206C626C20;
  v27._object = (void *)0xE500000000000000;
  String.append(_:)(v27);
  v28 = (uint64_t *)(v0 + v16[16]);
  v29 = v28[1];
  if (v29)
  {
    v30 = *v28;
    v31 = (void *)v28[1];
  }
  else
  {
    v31 = (void *)0xE300000000000000;
    v30 = 7104878;
  }
  swift_bridgeObjectRetain(v29);
  v32._countAndFlagsBits = v30;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 62;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  return v37[0];
}

void sub_100AA68D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 v21;
  char v22;
  uint64_t v23;

  Data.subObject<A>(range:)(&v21, 0, 4, 0, a1, a2, &type metadata for Int32, &protocol witness table for Int32);
  v12 = v21;
  Data.subObject<A>(range:)(&v21, 4, 8, 0, a1, a2, &type metadata for Int32, &protocol witness table for Int32);
  v13 = v21;
  Data.subObject<A>(range:)(&v21, 8, 9, 0, a1, a2, &type metadata for UInt8, &protocol witness table for UInt8);
  v22 = v21;
  v21 = xmmword_100E4F5F0;
  v14 = sub_100059570();
  unscale<A, B>(_:_:)(&v23, &v22, &v21, &type metadata for UInt8, &type metadata for Double, v14, &protocol witness table for Double, &protocol witness table for Double);
  v15 = v23;
  v16 = (int *)type metadata accessor for SecureLocation(0);
  v17 = a6 + v16[13];
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, a5, v18);
  *(_QWORD *)a6 = a3;
  *(_QWORD *)(a6 + 8) = a4;
  *(double *)(a6 + 16) = (double)(int)bswap32(v13) / 10000000.0;
  *(double *)(a6 + 24) = (double)(int)bswap32(v12) / 10000000.0;
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 40) = v15;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(_BYTE *)(a6 + 80) = 1;
  *(_QWORD *)(a6 + v16[14]) = 0;
  v19 = v16[15];
  v20 = (_QWORD *)(a6 + v16[16]);
  *v20 = 0;
  v20[1] = 0;
  *(_QWORD *)(a6 + v19) = 8;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v16 - 1) + 56))(a6, 0, 1, v16);
  swift_bridgeObjectRetain(a4);
}

uint64_t sub_100AA6C9C()
{
  uint64_t v0;
  double v1;
  _QWORD *v2;
  double v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char v8;
  uint64_t v9;
  __int128 v10;
  void *v11;
  void *v12;
  __int128 v13;

  v13 = xmmword_100E22FC0;
  v1 = *(double *)(v0 + 24) * 10000000.0;
  if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v1 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  LODWORD(v9) = bswap32((int)v1);
  v11 = &type metadata for UnsafeRawBufferPointer;
  v12 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v10 = &v9;
  *((_QWORD *)&v10 + 1) = (char *)&v9 + 4;
  v2 = sub_10001AA44(&v10, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v2, v2[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v10);
  v3 = *(double *)(v0 + 16) * 10000000.0;
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v3 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v3 >= 2147483650.0)
    goto LABEL_13;
  LODWORD(v9) = bswap32((int)v3);
  v11 = &type metadata for UnsafeRawBufferPointer;
  v12 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v10 = &v9;
  *((_QWORD *)&v10 + 1) = (char *)&v9 + 4;
  v4 = sub_10001AA44(&v10, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v4, v4[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v10);
  v9 = *(_QWORD *)(v0 + 40);
  v10 = xmmword_100E4F5F0;
  v5 = sub_100059570();
  scale<A, B>(_:_:)(&v8, &v9, &v10, &type metadata for UInt8, &type metadata for Double, v5, &protocol witness table for Double, &protocol witness table for Double);
  v11 = &type metadata for UnsafeRawBufferPointer;
  v12 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v10 = &v8;
  *((_QWORD *)&v10 + 1) = &v9;
  v6 = sub_10001AA44(&v10, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v6, v6[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v10);
  return v13;
}

uint64_t sub_100AA6EBC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  int v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  char *v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t result;
  uint64_t *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  int v52;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v49 - v12;
  v14 = objc_msgSend(a1, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v14);

  v15 = 1;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v13, 0, 1, v4);
  v16 = objc_msgSend(a1, "findMyId");
  v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v51 = v17;

  objc_msgSend(a1, "longitude");
  v19 = v18;
  objc_msgSend(a1, "latitude");
  v21 = v20;
  objc_msgSend(a1, "verticalAccuracy");
  v23 = v22;
  objc_msgSend(a1, "horizontalAccuracy");
  v25 = v24;
  objc_msgSend(a1, "speed");
  v27 = v26;
  objc_msgSend(a1, "course");
  v29 = v28;
  objc_msgSend(a1, "altitude");
  v31 = v30;
  v32 = objc_msgSend(a1, "floor");

  if (v32 && (v33 = objc_msgSend(a1, "floor")) != 0)
  {
    v34 = v33;
    v49 = objc_msgSend(v33, "integerValue");

    v15 = 0;
  }
  else
  {
    v49 = 0;
  }
  v52 = v15;
  sub_10001F674((uint64_t)v13, (uint64_t)v11);
  v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4);
  v36 = v7;
  if ((_DWORD)v35 == 1)
  {
    Date.init()(v35);
    sub_10001F6BC((uint64_t)v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
  }
  v37 = objc_msgSend(a1, "motionActivityState", v49);
  v38 = objc_msgSend(a1, "publishReason");
  v39 = objc_msgSend(a1, "locationLabel");
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v43 = v42;

  }
  else
  {
    v41 = 0;
    v43 = 0;
  }
  v44 = v50;
  sub_10001F6BC((uint64_t)v13);
  v45 = v51;
  *(_QWORD *)a2 = v44;
  *(_QWORD *)(a2 + 8) = v45;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v21;
  *(_QWORD *)(a2 + 32) = v23;
  *(_QWORD *)(a2 + 40) = v25;
  *(_QWORD *)(a2 + 48) = v27;
  *(_QWORD *)(a2 + 56) = v29;
  *(_QWORD *)(a2 + 64) = v31;
  *(_QWORD *)(a2 + 72) = v49;
  *(_BYTE *)(a2 + 80) = v52;
  v46 = (int *)type metadata accessor for SecureLocation(0);
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2 + v46[13], v36, v4);
  *(_QWORD *)(a2 + v46[14]) = v37;
  *(_QWORD *)(a2 + v46[15]) = v38;
  v48 = (uint64_t *)(a2 + v46[16]);
  *v48 = v41;
  v48[1] = v43;
  return result;
}

unint64_t sub_100AA723C(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = a1 - 1;
  result = 6515827;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6174537469736976;
      break;
    case 2:
      result = 0x6165627472616568;
      break;
    case 3:
      result = 0x65646E6174737962;
      break;
    case 4:
      result = 0x646E616D65646E6FLL;
      break;
    case 5:
      result = 0x776F6C6C616873;
      break;
    case 6:
      result = 1702259052;
      break;
    case 7:
      result = 0x656977657473;
      break;
    case 8:
    case 9:
      result = 0xD000000000000018;
      break;
    case 10:
      result = 0xD00000000000001DLL;
      break;
    case 11:
      result = 0xD00000000000001DLL;
      break;
    case 99:
      result = 0x6F4C79636167656CLL;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_100AA73B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_101111F28, (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState, (uint64_t)&unk_100E1D9B4);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100AA742C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_101111F28, (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState, (uint64_t)&unk_100E1D9B4);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100AA7490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_101111F20, (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason, (uint64_t)&unk_100E1DA60);
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100AA7504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_101111F20, (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason, (uint64_t)&unk_100E1DA60);
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_QWORD *sub_100AA7568(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v8;
    v9 = *((_OWORD *)a2 + 3);
    v10 = a2[9];
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v10;
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v11 = a3[13];
    v12 = a1 + v11;
    v13 = (uint64_t)a2 + v11;
    *(_OWORD *)(a1 + 48) = v9;
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    v15(v12, v13, v14);
    v16 = a3[15];
    *(_QWORD *)((char *)v4 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
    *(_QWORD *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    v17 = a3[16];
    v18 = (_QWORD *)((char *)v4 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain(v20);
  }
  return v4;
}

uint64_t sub_100AA7660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 52);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 64) + 8));
}

uint64_t sub_100AA76C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = a3[13];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 48) = v8;
  v13 = type metadata accessor for Date(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  v14(v11, v12, v13);
  v15 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v16 = a3[16];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t sub_100AA778C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = a3[13];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + a3[15]) = *(_QWORD *)(a2 + a3[15]);
  v13 = a3[16];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v16 = v15[1];
  v17 = v14[1];
  v14[1] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t sub_100AA789C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = a3[13];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  *(_OWORD *)(a1 + a3[16]) = *(_OWORD *)(a2 + a3[16]);
  return a1;
}

uint64_t sub_100AA7940(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v10 = a3[13];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)(a1 + 64) = v9;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[15];
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  *(_QWORD *)(a1 + v14) = *(_QWORD *)(a2 + v14);
  v15 = a3[16];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_100AA7A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AA7A18);
}

uint64_t sub_100AA7A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t sub_100AA7A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AA7AA0);
}

uint64_t sub_100AA7AA0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SecureLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_101111E68;
  if (!qword_101111E68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocation);
  return result;
}

uint64_t sub_100AA7B50(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_100E5A610;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_100E5A628;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = &unk_100E5A640;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100AA7BF4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AA7C28 + 4 * byte_100E5A521[a1]))(0x6449794D646E6966, 0xE800000000000000);
}

uint64_t sub_100AA7C28()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_100AA7C44()
{
  return 0x656475746974616CLL;
}

unint64_t sub_100AA7C58()
{
  return 0xD000000000000010;
}

unint64_t sub_100AA7C74()
{
  return 0xD000000000000012;
}

uint64_t sub_100AA7D20()
{
  return 0x526873696C627570;
}

uint64_t sub_100AA7D44()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100AA7D68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AA7D9C + 4 * byte_100E5A52E[a1]))(0x6449794D646E6966, 0xE800000000000000);
}

uint64_t sub_100AA7D9C()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_100AA7DB8()
{
  return 0x656475746974616CLL;
}

unint64_t sub_100AA7DCC()
{
  return 0xD000000000000010;
}

unint64_t sub_100AA7DE8()
{
  return 0xD000000000000012;
}

uint64_t sub_100AA7E94()
{
  return 0x526873696C627570;
}

uint64_t sub_100AA7EB8()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100AA7EDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100AA7BF4(*a1);
  v5 = v4;
  v6 = sub_100AA7BF4(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100AA7F64()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_100AA7BF4(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100AA7FC4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_100AA7BF4(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100AA8004()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_100AA7BF4(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100AA8060@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100AA9214(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AA808C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100AA7BF4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100AA80B4()
{
  unsigned __int8 *v0;

  return sub_100AA7D68(*v0);
}

unint64_t sub_100AA80BC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100AA9214(a1);
  *a2 = result;
  return result;
}

void sub_100AA80E0(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_100AA80EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AA8DC4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AA8114(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AA8DC4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100AA813C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease();
  if ((v2[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = v2[2];
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((v2[3] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v2[3];
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  if ((v2[4] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v2[4];
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v2[5] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v2[5];
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v2[6] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v2[6];
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if ((v2[7] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v2[7];
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  if ((v2[8] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v12 = v2[8];
  else
    v12 = 0;
  Hasher._combine(_:)(v12);
  if (*((_BYTE *)v2 + 80) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v13 = v2[9];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v13);
  }
  v14 = (int *)type metadata accessor for SecureLocation(0);
  v15 = type metadata accessor for Date(0);
  v16 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v15, v16);
  Hasher._combine(_:)(*(_QWORD *)((char *)v2 + v14[14]));
  Hasher._combine(_:)(*(_QWORD *)((char *)v2 + v14[15]));
  v17 = (_QWORD *)((char *)v2 + v14[16]);
  v18 = v17[1];
  if (v18)
  {
    v19 = *v17;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(a1, v19, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_100AA8300@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AA8314(a1, a2);
}

uint64_t sub_100AA8314@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  char v52;

  v41 = a2;
  v44 = type metadata accessor for Date(0);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (uint64_t *)((char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = sub_10001A9A8(&qword_101111ED8);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SecureLocation(0);
  v7 = (int *)__chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v9 + 9) = 0;
  v9[80] = 1;
  v10 = v7[14];
  *(_QWORD *)&v9[v10] = 0;
  v11 = v7[15];
  *(_QWORD *)&v9[v11] = 0;
  v12 = &v9[v7[16]];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v48 = v12;
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_100AA8DC4();
  v46 = v5;
  v16 = v49;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocation.CodingKeys, &type metadata for SecureLocation.CodingKeys, v15, v14, v13);
  if (v16)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v38 = v11;
    v39 = v10;
    v40 = v6;
    v49 = (uint64_t *)v9;
    v17 = v45;
    LOBYTE(v50) = 0;
    v18 = v47;
    v19 = KeyedDecodingContainer.decode(_:forKey:)(&v50, v47);
    v21 = (double *)v49;
    *v49 = v19;
    *((_QWORD *)v21 + 1) = v22;
    LOBYTE(v50) = 1;
    v21[2] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 2;
    v21[3] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 3;
    v21[4] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 4;
    v21[5] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 5;
    v21[6] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 6;
    v21[7] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 7;
    v21[8] = KeyedDecodingContainer.decode(_:forKey:)(&v50, v18);
    LOBYTE(v50) = 8;
    *((_QWORD *)v21 + 9) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v18);
    *((_BYTE *)v21 + 80) = v23 & 1;
    LOBYTE(v50) = 9;
    v24 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v43, v44, &v50, v18, v44, v24);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v42 + 32))((uint64_t)v49 + *(int *)(v40 + 52), v43, v44);
    type metadata accessor for SPMotionActivityState(0);
    v26 = v25;
    v52 = 10;
    v27 = sub_100006204(&qword_101111EE8, (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState, (uint64_t)&protocol conformance descriptor for SPMotionActivityState);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v26, &v52, v47, v26, v27);
    v28 = v50;
    if (v51)
      v28 = 0;
    *(uint64_t *)((char *)v49 + v39) = v28;
    type metadata accessor for SPSecureLocationPublishReason(0);
    v30 = v29;
    v52 = 11;
    v31 = sub_100006204(&qword_101111EF0, (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason, (uint64_t)&protocol conformance descriptor for SPSecureLocationPublishReason);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v30, &v52, v47, v30, v31);
    v32 = v50;
    if (v51)
      v32 = 0;
    *(uint64_t *)((char *)v49 + v38) = v32;
    LOBYTE(v50) = 12;
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v47);
    v35 = v34;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v46, v47);
    v36 = (uint64_t *)v48;
    swift_bridgeObjectRelease();
    *v36 = v33;
    v36[1] = v35;
    v37 = v49;
    sub_10016C890((uint64_t)v49, v41);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return sub_10016C910((uint64_t)v37);
  }
}

uint64_t sub_100AA8880(_QWORD *a1)
{
  return sub_100AA8894(a1);
}

uint64_t sub_100AA8894(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v37;
  char v38;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101111EF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100AA8DC4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocation.CodingKeys, &type metadata for SecureLocation.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((_QWORD *)v3 + 1);
  LOBYTE(v37) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v12, v13, &v37, v5);
  if (!v2)
  {
    v14 = v3[2];
    LOBYTE(v37) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v14);
    v15 = v3[3];
    LOBYTE(v37) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v15);
    v16 = v3[4];
    LOBYTE(v37) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v16);
    v17 = v3[5];
    LOBYTE(v37) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v17);
    v18 = v3[6];
    LOBYTE(v37) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v18);
    v19 = v3[7];
    LOBYTE(v37) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v19);
    v20 = v3[8];
    LOBYTE(v37) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(&v37, v5, v20);
    v21 = *((_BYTE *)v3 + 80);
    *(double *)&v37 = v3[9];
    BYTE8(v37) = v21;
    v38 = 8;
    v22 = sub_10001A9A8(&qword_1010ED5C0);
    v23 = sub_100AA8E08(&qword_101111F00, &qword_1010ED5C0, (uint64_t)&protocol witness table for Int);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v22, v23);
    v24 = (int *)type metadata accessor for SecureLocation(0);
    v25 = (uint64_t)v3 + v24[13];
    LOBYTE(v37) = 9;
    v26 = type metadata accessor for Date(0);
    v27 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v37, v5, v26, v27);
    *(double *)&v37 = *(double *)((char *)v3 + v24[14]);
    v38 = 10;
    type metadata accessor for SPMotionActivityState(0);
    v29 = v28;
    v30 = sub_100006204(&qword_101111F08, (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState, (uint64_t)&protocol conformance descriptor for SPMotionActivityState);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v29, v30);
    *(double *)&v37 = *(double *)((char *)v3 + v24[15]);
    v38 = 11;
    type metadata accessor for SPSecureLocationPublishReason(0);
    v32 = v31;
    v33 = sub_100006204(&qword_101111F10, (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason, (uint64_t)&protocol conformance descriptor for SPSecureLocationPublishReason);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v32, v33);
    v37 = *(_OWORD *)((char *)v3 + v24[16]);
    v38 = 12;
    v34 = sub_10001A9A8(&qword_1010F6350);
    v35 = sub_100AA8E08(&qword_101111F18, &qword_1010F6350, (uint64_t)&protocol witness table for String);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v38, v5, v34, v35);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100AA8CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52));
}

BOOL sub_100AA8CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 52), a1 + *(int *)(a3 + 52)) & 1) == 0;
}

BOOL sub_100AA8CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 52), a2 + *(int *)(a3 + 52)) & 1) == 0;
}

uint64_t sub_100AA8D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 52), a1 + *(int *)(a3 + 52));
}

Swift::Int sub_100AA8D18()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AA813C((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100AA8D58()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AA813C((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100AA8D98()
{
  return sub_100006204(&qword_101111ED0, type metadata accessor for SecureLocation, (uint64_t)&unk_100E5A658);
}

unint64_t sub_100AA8DC4()
{
  unint64_t result;

  result = qword_101111EE0;
  if (!qword_101111EE0)
  {
    result = swift_getWitnessTable(aU_35, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101111EE0);
  }
  return result;
}

uint64_t sub_100AA8E08(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    v7 = a3;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v6, &v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100AA8E5C(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  char v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v6, 0),
        result = 0,
        (v8 & 1) != 0))
  {
    if (a1[2] != *(double *)(a2 + 16)
      || a1[3] != *(double *)(a2 + 24)
      || a1[4] != *(double *)(a2 + 32)
      || a1[5] != *(double *)(a2 + 40)
      || a1[6] != *(double *)(a2 + 48)
      || a1[7] != *(double *)(a2 + 56)
      || a1[8] != *(double *)(a2 + 64))
    {
      return 0;
    }
    v10 = *(_BYTE *)(a2 + 80);
    if (((_BYTE)a1[10] & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 80))
        return 0;
    }
    else
    {
      if (*((_QWORD *)a1 + 9) != *(_QWORD *)(a2 + 72))
        v10 = 1;
      if ((v10 & 1) != 0)
        return 0;
    }
    v11 = (int *)type metadata accessor for SecureLocation(0);
    if ((static Date.== infix(_:_:)((char *)a1 + v11[13], a2 + v11[13]) & 1) == 0
      || *(_QWORD *)((char *)a1 + v11[14]) != *(_QWORD *)(a2 + v11[14])
      || *(_QWORD *)((char *)a1 + v11[15]) != *(_QWORD *)(a2 + v11[15]))
    {
      return 0;
    }
    v12 = v11[16];
    v13 = (_QWORD *)((char *)a1 + v12);
    v14 = *(_QWORD *)((char *)a1 + v12 + 8);
    v15 = (_QWORD *)(a2 + v12);
    v16 = v15[1];
    if (v14)
    {
      if (!v16
        || (*v13 != *v15 || v14 != v16)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, *v15, v16, 0) & 1) == 0)
      {
        return 0;
      }
    }
    else if (v16)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_100AA90BC + 4 * byte_100E5A540[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100AA90F0 + 4 * byte_100E5A53B[v4]))();
}

uint64_t sub_100AA90F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AA90F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AA9100);
  return result;
}

uint64_t sub_100AA910C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AA9114);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_100AA9118(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AA9120(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocation.CodingKeys()
{
  return &type metadata for SecureLocation.CodingKeys;
}

unint64_t sub_100AA9140()
{
  unint64_t result;

  result = qword_101111F30;
  if (!qword_101111F30)
  {
    result = swift_getWitnessTable(byte_100E5A854, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101111F30);
  }
  return result;
}

unint64_t sub_100AA9188()
{
  unint64_t result;

  result = qword_101111F38;
  if (!qword_101111F38)
  {
    result = swift_getWitnessTable(byte_100E5A78C, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101111F38);
  }
  return result;
}

unint64_t sub_100AA91D0()
{
  unint64_t result;

  result = qword_101111F40;
  if (!qword_101111F40)
  {
    result = swift_getWitnessTable(asc_100E5A7B4, &type metadata for SecureLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101111F40);
  }
  return result;
}

unint64_t sub_100AA9214(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104B198, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xD)
    return 13;
  else
    return v3;
}

uint64_t sub_100AA925C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void (*v32)(char *, char *, uint64_t);
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  _BYTE *v56;
  uint64_t result;
  id v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  NSString v65;
  id v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  NSString v73;
  id v74;
  int v75;
  uint64_t v76;
  NSString v77;
  id v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  int v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  id v95;

  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v84 - v8;
  v10 = type metadata accessor for UUID(0);
  v91 = *(_QWORD *)(v10 - 8);
  v92 = v10;
  v11 = __chkstk_darwin(v10);
  v86 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v87 = (char *)&v84 - v13;
  v14 = (int *)type metadata accessor for LostModeRecord(0);
  v15 = (uint64_t *)((char *)a2 + v14[7]);
  *v15 = 0;
  v15[1] = 0;
  v88 = v15;
  v16 = (uint64_t *)((char *)a2 + v14[8]);
  *v16 = 0;
  v16[1] = 0;
  v89 = v16;
  v17 = (uint64_t *)((char *)a2 + v14[9]);
  *v17 = 0;
  v17[1] = 0;
  v90 = v17;
  v18 = CKRecord.recordType.getter(v14);
  if (v18 == 0x65646F4D74736F4CLL && v19 == 0xEE0064726F636552)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, 0x65646F4D74736F4CLL, 0xEE0064726F636552, 0);
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      v55 = sub_100AAAB84();
      v30 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v55, 0, 0);
      *v56 = 0;
      goto LABEL_17;
    }
  }
  v21 = objc_msgSend(a1, "recordID");
  v22 = objc_msgSend(v21, "recordName");

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  UUID.init(uuidString:)(v23, v25);
  swift_bridgeObjectRelease();
  v27 = v91;
  v26 = v92;
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48);
  if (v28(v9, 1, v92) == 1)
  {
    sub_1001C0844((uint64_t)v9);
    v29 = sub_100AAAB84();
    v30 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v29, 0, 0);
    *v31 = 1;
LABEL_17:
    swift_willThrow(v30);

LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v32 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v32(v87, v9, v26);
  v33 = objc_msgSend(a1, "encryptedValues");
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(v33, "objectForKeyedSubscript:", v34);

  if (!v35
    || (v95 = v35,
        v85 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        v36 = swift_dynamicCast(&v93, &v95, v85, &type metadata for String, 6),
        (v36 & 1) == 0))
  {
    v47 = static os_log_type_t.error.getter(v36);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    v48 = qword_1011B7DC8;
    v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v50 = swift_allocObject(v49, 72, 7);
    *(_OWORD *)(v50 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v50 + 56) = sub_100AAABC8();
    *(_QWORD *)(v50 + 64) = sub_100006204((unint64_t *)&qword_1010ED720, (uint64_t (*)(uint64_t))sub_100AAABC8, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v50 + 32) = a1;
    v51 = a1;
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Invalid beaconIdentifier - %@", 29, 2, v50);
    swift_bridgeObjectRelease();
    v52 = sub_100AAAB84();
    v53 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v52, 0, 0);
    *v54 = 3;
    swift_willThrow(v53);
    swift_unknownObjectRelease(v33);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v92);
    goto LABEL_18;
  }
  UUID.init(uuidString:)(v93, v94);
  swift_bridgeObjectRelease();
  v37 = v92;
  if (v28(v7, 1, v92) == 1)
  {
    v38 = sub_1001C0844((uint64_t)v7);
    v39 = static os_log_type_t.error.getter(v38);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    v40 = qword_1011B7DC8;
    v41 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v42 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v42 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v42 + 56) = sub_100AAABC8();
    *(_QWORD *)(v42 + 64) = sub_100006204((unint64_t *)&qword_1010ED720, (uint64_t (*)(uint64_t))sub_100AAABC8, (uint64_t)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v42 + 32) = a1;
    v43 = a1;
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "beaconIdentifier is not a valid UUID - %@", 41, 2, v42);
    swift_bridgeObjectRelease();
    v44 = sub_100AAAB84();
    v45 = swift_allocError(&type metadata for LostModeRecord.LostModeRecordConversionError, v44, 0, 0);
    *v46 = 2;
    swift_willThrow(v45);
    swift_unknownObjectRelease(v33);

    (*(void (**)(char *, uint64_t))(v91 + 8))(v87, v92);
    goto LABEL_18;
  }
  v32(v86, v7, v37);
  v84 = objc_autoreleasePoolPush();
  v58 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v58);
  objc_msgSend(v58, "finishEncoding");
  v59 = v37;
  v60 = objc_msgSend(v58, "encodedData");
  v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v63 = v62;

  objc_autoreleasePoolPop(v84);
  *a2 = v61;
  a2[1] = v63;
  v64 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
  v64((char *)a2 + v14[5], v87, v59);
  v64((char *)a2 + v14[6], v86, v59);
  v65 = String._bridgeToObjectiveC()();
  v66 = objc_msgSend(v33, "objectForKeyedSubscript:", v65);

  if (v66)
  {
    v95 = v66;
    v67 = v85;
    v68 = swift_dynamicCast(&v93, &v95, v85, &type metadata for String, 6);
    if (v68)
      v69 = v93;
    else
      v69 = 0;
    if (v68)
      v66 = v94;
    else
      v66 = 0;
    v71 = v89;
    v70 = v90;
    v72 = v88;
  }
  else
  {
    v69 = 0;
    v71 = v89;
    v70 = v90;
    v72 = v88;
    v67 = v85;
  }
  swift_bridgeObjectRelease();
  *v72 = v69;
  v72[1] = v66;
  v73 = String._bridgeToObjectiveC()();
  v74 = objc_msgSend(v33, "objectForKeyedSubscript:", v73);

  if (v74)
  {
    v95 = v74;
    v75 = swift_dynamicCast(&v93, &v95, v67, &type metadata for String, 6);
    if (v75)
      v76 = v93;
    else
      v76 = 0;
    if (v75)
      v74 = v94;
    else
      v74 = 0;
  }
  else
  {
    v76 = 0;
  }
  swift_bridgeObjectRelease();
  *v71 = v76;
  v71[1] = v74;
  v77 = String._bridgeToObjectiveC()();
  v78 = objc_msgSend(v33, "objectForKeyedSubscript:", v77);
  swift_unknownObjectRelease(v33);

  v79 = v92;
  v80 = *(void (**)(char *, uint64_t))(v91 + 8);
  v80(v86, v92);
  v80(v87, v79);
  if (v78)
  {
    v95 = v78;
    v81 = swift_dynamicCast(&v93, &v95, v67, &type metadata for String, 6);
    if (v81)
      v82 = v93;
    else
      v82 = 0;
    if (v81)
      v83 = v94;
    else
      v83 = 0;
  }
  else
  {
    v82 = 0;
    v83 = 0;
  }
  result = swift_bridgeObjectRelease();
  *v70 = v82;
  v70[1] = v83;
  return result;
}

uint64_t sub_100AA9AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7B78);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7B78);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x65646F4D74736F4CLL, 0xEF7364726F636552, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100AA9BD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  sub_10001BBBC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_10001BC14(v4, v5);
  v6 = (int *)type metadata accessor for LostModeRecord(0);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  v9 = (uint64_t *)((char *)v2 + v6[7]);
  v10 = v9[1];
  if (v10)
  {
    v11 = *v9;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v11, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v12 = (uint64_t *)((char *)v2 + v6[8]);
  v13 = v12[1];
  if (v13)
  {
    v14 = *v12;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(a1, v14, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v15 = (uint64_t *)((char *)v2 + v6[9]);
  v16 = v15[1];
  if (v16)
  {
    v17 = *v15;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v16);
    String.hash(into:)(a1, v17, v16);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_100AA9D98(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100AA9DD0 + 4 * byte_100E5A8D0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100AA9DD0()
{
  return 0x696669746E656469;
}

uint64_t sub_100AA9E00()
{
  return 0x6C69616D65;
}

uint64_t sub_100AA9E14()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_100AA9E34()
{
  return 0x6567617373656DLL;
}

uint64_t sub_100AA9E4C()
{
  unsigned __int8 *v0;

  return sub_100AA9D98(*v0);
}

uint64_t sub_100AA9E54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100AAB800(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AA9E78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AAAC04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AA9EA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AAAC04();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100AA9EC8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AA9BD4((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100AA9F08()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AA9BD4((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100AA9F44(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  char v27;
  __int128 v28;
  __int128 v29;
  void *v30;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter(&v28, 0xD000000000000010, 0x8000000100EC28D0, ObjectType, &type metadata for String);
  v5 = *((_QWORD *)&v28 + 1);
  v6 = v28;
  v7 = (int *)type metadata accessor for LostModeRecord(0);
  v8 = UUID.uuidString.getter(v7);
  if (!v5)
  {
    v12 = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (v6 == v8 && v5 == v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v8, v9, 0);
  swift_bridgeObjectRelease();
  v12 = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_9:
    v13 = UUID.uuidString.getter(v12);
    *((_QWORD *)&v29 + 1) = &type metadata for String;
    v30 = &protocol witness table for String;
    *(_QWORD *)&v28 = v13;
    *((_QWORD *)&v28 + 1) = v14;
    CKRecordKeyValueSetting.subscript.setter(&v28, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  }
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter(&v28, 0x6C69616D65, 0xE500000000000000, ObjectType, &type metadata for String);
  v15 = (unint64_t *)(v1 + v7[7]);
  v17 = *v15;
  v16 = v15[1];
  if (*((_QWORD *)&v28 + 1))
  {
    if (!v16)
    {
      swift_bridgeObjectRelease();
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
LABEL_20:
      swift_bridgeObjectRetain(v16);
      CKRecordKeyValueSetting.subscript.setter(&v28, 0x6C69616D65, 0xE500000000000000, ObjectType);
      goto LABEL_21;
    }
    if (v28 == __PAIR128__(v16, v17))
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, *((_QWORD *)&v28 + 1), *v15, v15[1], 0);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
LABEL_19:
      *((_QWORD *)&v29 + 1) = &type metadata for String;
      v30 = &protocol witness table for String;
      *(_QWORD *)&v28 = v17;
      *((_QWORD *)&v28 + 1) = v16;
      goto LABEL_20;
    }
  }
  else if (v16)
  {
    goto LABEL_19;
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter(&v28, 0x6D754E656E6F6870, 0xEB00000000726562, ObjectType, &type metadata for String);
  v19 = (unint64_t *)(v2 + v7[8]);
  v21 = *v19;
  v20 = v19[1];
  if (*((_QWORD *)&v28 + 1))
  {
    if (!v20)
    {
      swift_bridgeObjectRelease();
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
LABEL_30:
      swift_bridgeObjectRetain(v20);
      CKRecordKeyValueSetting.subscript.setter(&v28, 0x6D754E656E6F6870, 0xEB00000000726562, ObjectType);
      goto LABEL_31;
    }
    if (v28 == __PAIR128__(v20, v21))
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, *((_QWORD *)&v28 + 1), *v19, v19[1], 0);
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
LABEL_29:
      *((_QWORD *)&v29 + 1) = &type metadata for String;
      v30 = &protocol witness table for String;
      *(_QWORD *)&v28 = v21;
      *((_QWORD *)&v28 + 1) = v20;
      goto LABEL_30;
    }
  }
  else if (v20)
  {
    goto LABEL_29;
  }
LABEL_31:
  CKRecordKeyValueSetting.subscript.getter(&v28, 0x6567617373656DLL, 0xE700000000000000, ObjectType, &type metadata for String);
  v23 = (unint64_t *)(v2 + v7[9]);
  v25 = *v23;
  v24 = v23[1];
  if (!*((_QWORD *)&v28 + 1))
  {
    if (!v24)
      return swift_unknownObjectRelease(v3);
    goto LABEL_39;
  }
  if (!v24)
  {
    swift_bridgeObjectRelease();
    v30 = 0;
    v28 = 0u;
    v29 = 0u;
LABEL_40:
    swift_bridgeObjectRetain(v24);
    CKRecordKeyValueSetting.subscript.setter(&v28, 0x6567617373656DLL, 0xE700000000000000, ObjectType);
    return swift_unknownObjectRelease(v3);
  }
  if (v28 == __PAIR128__(v24, v25))
  {
    swift_unknownObjectRelease(v3);
    return swift_bridgeObjectRelease();
  }
  v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, *((_QWORD *)&v28 + 1), *v23, v23[1], 0);
  swift_bridgeObjectRelease();
  if ((v27 & 1) == 0)
  {
LABEL_39:
    *((_QWORD *)&v29 + 1) = &type metadata for String;
    v30 = &protocol witness table for String;
    *(_QWORD *)&v28 = v25;
    *((_QWORD *)&v28 + 1) = v24;
    goto LABEL_40;
  }
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100AAA34C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  char v29;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101111F68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100AAAC04();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LostModeRecord.CodingKeys, &type metadata for LostModeRecord.CodingKeys, v11, v9, v10);
  v28 = *v3;
  v29 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v29, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for LostModeRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v28) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v28, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v28, v5, v15, v16);
    v18 = (uint64_t *)((char *)v3 + v13[7]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v28, v5);
    v21 = (uint64_t *)((char *)v3 + v13[8]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v28) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v28, v5);
    v24 = (uint64_t *)((char *)v3 + v13[9]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v28) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v28, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100AAA58C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  char *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t *v60;
  __int128 v61;
  char v62;

  v51 = a2;
  v54 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v54 - 8);
  v3 = __chkstk_darwin(v54);
  v53 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v49 - v5;
  v55 = sub_10001A9A8(&qword_101111F58);
  v7 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LostModeRecord(0);
  v11 = (int *)__chkstk_darwin(v10);
  v13 = (_OWORD *)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (uint64_t *)((char *)v13 + v11[7]);
  *v14 = 0;
  v14[1] = 0;
  v60 = v14;
  v15 = (uint64_t *)((char *)v13 + v11[8]);
  *v15 = 0;
  v15[1] = 0;
  v59 = v15;
  v16 = (uint64_t *)((char *)v13 + v11[9]);
  *v16 = 0;
  v16[1] = 0;
  v57 = v16;
  v17 = a1[3];
  v18 = a1[4];
  sub_10001AA44(a1, v17);
  v19 = sub_100AAAC04();
  v56 = v9;
  v20 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LostModeRecord.CodingKeys, &type metadata for LostModeRecord.CodingKeys, v19, v17, v18);
  if (v20)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v6;
    v50 = v7;
    v58 = a1;
    v22 = v53;
    v23 = v54;
    v62 = 0;
    v24 = sub_100036994();
    v25 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v61, &type metadata for Data, &v62, v55, &type metadata for Data, v24);
    v26 = (uint64_t)v13;
    *v13 = v61;
    LOBYTE(v61) = 1;
    v27 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v28 = v21;
    v29 = v21;
    v30 = v23;
    v31 = v23;
    v32 = v23;
    v33 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v31, &v61, v25, v32, v27);
    v34 = v25;
    v35 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v52 + 32);
    v35(v26 + *(int *)(v10 + 20), v28, v30);
    LOBYTE(v61) = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v22, v30, &v61, v34, v30, v33);
    v49 = v10;
    v35(v26 + *(int *)(v10 + 24), v22, v30);
    LOBYTE(v61) = 3;
    v36 = v55;
    v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v55);
    v38 = v60;
    *v60 = v37;
    v38[1] = v39;
    LOBYTE(v61) = 4;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v36);
    v41 = v59;
    *v59 = v40;
    v41[1] = v42;
    LOBYTE(v61) = 5;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v36);
    v53 = v44;
    v45 = v43;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v36);
    v46 = v57;
    swift_bridgeObjectRelease();
    v47 = v53;
    *v46 = v45;
    v46[1] = (uint64_t)v47;
    sub_100AAAC48(v26, v51);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v58);
    return sub_100AAAC8C(v26);
  }
}

uint64_t sub_100AAA9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1010EA158 != -1)
    swift_once(&qword_1010EA158, sub_100AA9AFC);
  v0 = type metadata accessor for URL(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7B78);
  v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AAAA88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AAA58C(a1, a2);
}

uint64_t sub_100AAAA9C(_QWORD *a1)
{
  return sub_100AAA34C(a1);
}

uint64_t sub_100AAAAB0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111B70, type metadata accessor for LostModeRecord, (uint64_t)&unk_100E5A914);
  result = sub_100006204(&qword_1011080E8, type metadata accessor for LostModeRecord, (uint64_t)&unk_100E5A8EC);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LostModeRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_101111FC8;
  if (!qword_101111FC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeRecord);
  return result;
}

uint64_t sub_100AAAB48(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1011080F0, type metadata accessor for LostModeRecord, (uint64_t)&unk_100E5A93C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100AAAB84()
{
  unint64_t result;

  result = qword_101111F50;
  if (!qword_101111F50)
  {
    result = swift_getWitnessTable(byte_100E5ABD8, &type metadata for LostModeRecord.LostModeRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_101111F50);
  }
  return result;
}

unint64_t sub_100AAABC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ED8E0;
  if (!qword_1010ED8E0)
  {
    v1 = objc_opt_self(CKRecord);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010ED8E0);
  }
  return result;
}

unint64_t sub_100AAAC04()
{
  unint64_t result;

  result = qword_101111F60;
  if (!qword_101111F60)
  {
    result = swift_getWitnessTable(byte_100E5AB88, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101111F60);
  }
  return result;
}

uint64_t sub_100AAAC48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LostModeRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AAAC8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LostModeRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for LostModeRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100AAAD14 + 4 * byte_100E5A8DB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100AAAD48 + 4 * byte_100E5A8D6[v4]))();
}

uint64_t sub_100AAAD48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AAAD50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AAAD58);
  return result;
}

uint64_t sub_100AAAD64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AAAD6CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100AAAD70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AAAD78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRecord.CodingKeys()
{
  return &type metadata for LostModeRecord.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for LostModeRecord.LostModeRecordConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100AAADE0 + 4 * byte_100E5A8E5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100AAAE14 + 4 * byte_100E5A8E0[v4]))();
}

uint64_t sub_100AAAE14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AAAE1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AAAE24);
  return result;
}

uint64_t sub_100AAAE30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AAAE38);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100AAAE3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AAAE44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRecord.LostModeRecordConversionError()
{
  return &type metadata for LostModeRecord.LostModeRecordConversionError;
}

uint64_t *sub_100AAAE60(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (uint64_t *)((char *)a1 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[9];
    v23 = (uint64_t *)((char *)a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
  }
  return a1;
}

uint64_t sub_100AAAF70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100AAB010(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = (uint64_t *)((char *)a1 + v13);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (uint64_t *)((char *)a1 + v14);
  v19 = (uint64_t *)((char *)a2 + v14);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[9];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *sub_100AAB0F4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  v15 = a3[7];
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = a3[8];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = a3[9];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100AAB218(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

uint64_t *sub_100AAB2C4(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[7];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)&a2[v13];
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)&a2[v18];
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[9];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)&a2[v23];
  v27 = *v25;
  v26 = v25[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100AAB3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AAB3BC);
}

uint64_t sub_100AAB3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100AAB44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AAB458);
}

uint64_t sub_100AAB458(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_100AAB4D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v4 = &unk_100E5A9D0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_100E5A9E8;
    v8 = &unk_100E5A9E8;
    v9 = &unk_100E5A9E8;
    swift_initStructMetadata(a1, 256, 6, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100AAB55C()
{
  return sub_100006204(&qword_101112010, type metadata accessor for LostModeRecord, (uint64_t)&unk_100E5AA00);
}

unint64_t sub_100AAB58C()
{
  unint64_t result;

  result = qword_101112018;
  if (!qword_101112018)
  {
    result = swift_getWitnessTable(aA_49, &type metadata for LostModeRecord.LostModeRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_101112018);
  }
  return result;
}

unint64_t sub_100AAB5D4()
{
  unint64_t result;

  result = qword_101112020;
  if (!qword_101112020)
  {
    result = swift_getWitnessTable(byte_100E5AB60, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112020);
  }
  return result;
}

unint64_t sub_100AAB61C()
{
  unint64_t result;

  result = qword_101112028;
  if (!qword_101112028)
  {
    result = swift_getWitnessTable(aQ_36, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112028);
  }
  return result;
}

unint64_t sub_100AAB664()
{
  unint64_t result;

  result = qword_101112030;
  if (!qword_101112030)
  {
    result = swift_getWitnessTable(a9_19, &type metadata for LostModeRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112030);
  }
  return result;
}

uint64_t sub_100AAB6A8(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for LostModeRecord(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) == 0)
  {
    return 0;
  }
  v6 = v5[7];
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  if (!v8)
  {
    if (v10)
      return 0;
    goto LABEL_13;
  }
  if (!v10)
    return 0;
  v11 = *v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(*v7, v8, *v9, v10, 0), result = 0, (v12 & 1) != 0))
  {
LABEL_13:
    v14 = v5[8];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = *(uint64_t *)((char *)a1 + v14 + 8);
    v17 = (_QWORD *)(a2 + v14);
    v18 = v17[1];
    if (v16)
    {
      if (!v18)
        return 0;
      if (*v15 != *v17 || v16 != v18)
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, *v17, v18, 0);
        result = 0;
        if ((v20 & 1) == 0)
          return result;
      }
    }
    else if (v18)
    {
      return 0;
    }
    v21 = v5[9];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = *(uint64_t *)((char *)a1 + v21 + 8);
    v24 = (_QWORD *)(a2 + v21);
    v25 = v24[1];
    if (v23)
    {
      if (v25
        && (*v22 == *v24 && v23 == v25
         || (_stringCompareWithSmolCheck(_:_:expecting:)(*v22, v23, *v24, v25, 0) & 1) != 0))
      {
        return 1;
      }
    }
    else if (!v25)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_100AAB800(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562)
  {
    v9 = 0xEB00000000726562;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E656E6F6870, 0xEB00000000726562, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100AABA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7B90);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7B90);
  if (qword_1010EA168 != -1)
    swift_once(&qword_1010EA168, sub_100AB2E60);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7BA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100AABB20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v4 + 24) = a4;
  v5 = (_QWORD *)swift_task_alloc(dword_101112064);
  *(_QWORD *)(v4 + 32) = v5;
  *v5 = v4;
  v5[1] = sub_100AABB6C;
  return sub_100AABD84();
}

uint64_t sub_100AABB6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100AABBD8, *(_QWORD *)(v3 + 24), 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100AABBD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7B90);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    v10 = _convertErrorToNSError(_:)(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during PeerTrustService startup: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AABD84()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[20] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AABDE4, v0, 0);
}

uint64_t sub_100AABDE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB28 + dword_1010EBB28);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
    *(_QWORD *)(v0 + 192) = v3;
    *v3 = v0;
    v3[1] = sub_100AABEDC;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AABEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AABF3C, v3, 0);
}

uint64_t sub_100AABF3C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 200))
  {
    v2 = *(_QWORD *)(v0 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_QWORD *)(v0 + 120) = type metadata accessor for PeerTrustService();
    *(_QWORD *)(v0 + 128) = sub_100006C64(&qword_101112290, v3, (uint64_t (*)(uint64_t))type metadata accessor for PeerTrustService, (uint64_t)&unk_100E5AC84);
    *(_QWORD *)(v0 + 96) = v2;
    v4 = dword_10110DA34;
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 208) = v5;
    *v5 = v0;
    v5[1] = sub_100AAC058;
    return sub_10096B0AC(*(_QWORD *)(v0 + 184), v0 + 96);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_100033220();
    v8 = swift_allocError(&type metadata for DaemonError, v7, 0, 0);
    *v9 = 0xD00000000000002BLL;
    v9[1] = 0x8000000100ECC560;
    swift_willThrow(v8);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AAC058()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[20];
    v5 = sub_100AAC11C;
  }
  else
  {
    v6 = v2 + 12;
    v8 = v2[22];
    v7 = v2[23];
    v10 = v2 + 20;
    v9 = v2[20];
    (*(void (**)(uint64_t, _QWORD))(v8 + 8))(v7, v10[1]);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    v5 = sub_100AAC0DC;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100AAC0DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAC11C()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAC164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  return swift_task_switch(sub_100AAC17C, a1, 0);
}

uint64_t sub_100AAC17C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 80) = v2;
  v3 = sub_10001A9A8(&qword_1010EC918);
  *v2 = v0;
  v2[1] = sub_100AAC1F8;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10007AC64, *(_QWORD *)(v0 + 64), v3);
}

uint64_t sub_100AAC1F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release();
  return swift_task_switch(sub_100AAC258, v1, 0);
}

uint64_t sub_100AAC258()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[9];
  v0[11] = v0[2];
  return swift_task_switch(sub_100AAC274, v1, 0);
}

uint64_t sub_100AAC274()
{
  _QWORD *v0;

  v0[12] = *(_QWORD *)(v0[11] + 16);
  swift_bridgeObjectRelease();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v0[13] = qword_1011B71A8;
  return swift_task_switch(sub_100AAC2EC, 0, 0);
}

uint64_t sub_100AAC2EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 112) = v2;
  *v2 = v0;
  v2[1] = sub_100AAC360;
  return unsafeBlocking<A>(_:)(v0 + 24, sub_100033264, *(_QWORD *)(v0 + 104), &type metadata for Configuration);
}

uint64_t sub_100AAC360()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release();
  return swift_task_switch(sub_100AAC3BC, 0, 0);
}

uint64_t sub_100AAC3BC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[9];
  v0[15] = v0[3];
  return swift_task_switch(sub_100AAC3D8, v1, 0);
}

uint64_t sub_100AAC3D8()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = v0[12];
  v2 = sub_100C1BA28(v0[15]);
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = v0[12];
      v9 = swift_slowAlloc(22, -1);
      *(_DWORD *)v9 = 134218240;
      v0[6] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2048;
      v0[7] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v9 + 14, v9 + 22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "BeaconSharingService: cannot create new peer trust. existingTrusts: %ld >= maxShareMembers: %lu.", (uint8_t *)v9, 0x16u);
      swift_slowDealloc(v9, -1, -1);
    }

    type metadata accessor for SPBeaconSharingError(0);
    v11 = v10;
    v0[5] = 9;
    v12 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v13 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)byte_100E21930);
    v14 = _BridgedStoredNSError.init(_:userInfo:)(v0 + 4, v0 + 5, v12, v11, v13);
    swift_willThrow(v14);
    v3 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v3 = (uint64_t (*)(void))v0[1];
  }
  return v3();
}

uint64_t sub_100AAC5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PeerCommunicationIdentifier(0);
  v4[9] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v8);
  v4[11] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AAC674, v3, 0);
}

uint64_t sub_100AAC674()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100ACD914();
  v4 = (void *)sub_100ACD7B4(v1, v2, v3);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v4, "destination");

  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v6 = objc_msgSend(v5, "_stripPotentialTokenURIWithToken:", 0);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    *(_QWORD *)(v0 + 104) = v7;
    *(_QWORD *)(v0 + 112) = v9;
    swift_bridgeObjectRetain(v9);
    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v7, v9);
    *(_QWORD *)(v0 + 120) = v11;
    *(_QWORD *)(v0 + 128) = v12;
    if (v12)
    {
      v13 = v10;
      v14 = v11;
      v15 = v12;
      *(_QWORD *)(v0 + 136) = v10;
      v16 = (_QWORD *)swift_task_alloc(dword_101112094);
      *(_QWORD *)(v0 + 144) = v16;
      *v16 = v0;
      v16[1] = sub_100AAC81C;
      return sub_100AAF5B4(v13, v14, v15);
    }
    swift_bridgeObjectRelease();
  }
  v18 = sub_100AB4600();
  v19 = swift_allocError(&type metadata for PeerTrustServiceError, v18, 0, 0);
  *v20 = 3;
  swift_willThrow(v19);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAC81C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v2 + 144);
  v4 = *v2;
  *(_QWORD *)(v4 + 152) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_100AAC8D8, *(_QWORD *)(v4 + 40), 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 88);
  v6 = *(_QWORD *)(v4 + 80);
  v7 = *(_QWORD *)(v4 + 64);
  swift_task_dealloc(*(_QWORD *)(v4 + 96));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100AAC8D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for OwnerPeerTrust(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 96), type metadata accessor for OwnerPeerTrust);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 160) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 96), (uint64_t *)&unk_1010EE160);
    v7 = swift_task_alloc(dword_10111206C);
    *(_QWORD *)(v0 + 168) = v7;
    *(_QWORD *)v7 = v0;
    *(_QWORD *)(v7 + 8) = sub_100AACA50;
    v8 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v7 + 64) = v8;
    return swift_task_switch(sub_100AAC17C, v8, 0);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 96);
    v11 = *(_QWORD *)(v0 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126EC(v10, v11, type metadata accessor for OwnerPeerTrust);
    v12 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AACA50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t (*v8)(char, uint64_t, uint64_t);

  v2 = *(_QWORD *)(*v1 + 168);
  v3 = *v1;
  *(_QWORD *)(v3 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100AAD02C, *(_QWORD *)(v3 + 40), 0);
  v5 = *(_QWORD *)(v3 + 128);
  v8 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v6 = *(_BYTE *)(v3 + 136);
  v7 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  *(_QWORD *)(v3 + 184) = v7;
  *v7 = v3;
  v7[1] = sub_100AACB0C;
  return v8(v6, *(_QWORD *)(v3 + 120), v5);
}

uint64_t sub_100AACB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 184);
  v4[24] = a1;
  v4[25] = a2;
  v4[26] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100AACCE0;
  else
    v6 = sub_100AACB7C;
  return swift_task_switch(v6, v4[5], 0);
}

uint64_t sub_100AACB7C()
{
  uint64_t v0;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)(v0 + 200))
    return swift_task_switch(sub_100AACC50, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = sub_100AB4600();
  v3 = swift_allocError(&type metadata for PeerTrustServiceError, v2, 0, 0);
  *v4 = 1;
  swift_willThrow(v3);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AACC50()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;

  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_BYTE *)(v0 + 136);
  v3 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 216) = v3;
  *v3 = v0;
  v3[1] = sub_100AACD50;
  return sub_100D8C77C(v2, *(_QWORD *)(v0 + 120), v1);
}

uint64_t sub_100AACCE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AACD50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 216);
  v4[28] = a1;
  v4[29] = a2;
  v4[30] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100AACFB0;
  else
    v6 = sub_100AACDC0;
  return swift_task_switch(v6, v4[5], 0);
}

uint64_t sub_100AACDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 232);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 224);
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(int **)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 136);
    v6 = *(_OWORD *)(v0 + 120);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v8 = *(_QWORD *)(v0 + 80);
    v7 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 64);
    v9 = *(_QWORD *)(v0 + 72);
    v11 = *(_QWORD *)(v0 + 48);
    v12 = *(_QWORD *)(v0 + 56);
    v13 = *(char **)(v0 + 16);
    *(_QWORD *)v7 = *(_QWORD *)(v0 + 192);
    *(_QWORD *)(v7 + 8) = v3;
    *(_BYTE *)(v7 + 16) = v5;
    *(_OWORD *)(v7 + 24) = v6;
    *(_QWORD *)(v7 + 40) = v2;
    *(_QWORD *)(v7 + 48) = v1;
    v14 = swift_storeEnumTagMultiPayload(v7, v9, 5);
    UUID.init()(v14);
    sub_10005972C(v7, v8, type metadata accessor for PeerCommunicationIdentifier);
    sub_1003F0FD8();
    sub_1000126B0(v7, type metadata accessor for PeerCommunicationIdentifier);
    *(_OWORD *)v13 = xmmword_100E22FC0;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(&v13[v4[5]], v10, v11);
    v13[v4[6]] = 1;
    sub_1000126EC(v8, (uint64_t)&v13[v4[7]], type metadata accessor for PeerCommunicationIdentifier);
    v15 = &v13[v4[8]];
    *(_QWORD *)v15 = v27;
    *((_QWORD *)v15 + 1) = v28;
    v16 = &v13[v4[9]];
    *(_QWORD *)v16 = v29;
    *((_QWORD *)v16 + 1) = v30;
    v13[v4[10]] = 0;
    v17 = *(_QWORD *)(v0 + 88);
    v18 = *(_QWORD *)(v0 + 80);
    v19 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = sub_100AB4600();
    v21 = swift_allocError(&type metadata for PeerTrustServiceError, v20, 0, 0);
    *v22 = 4;
    swift_willThrow(v21);
    v23 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 80);
    v25 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AACFB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAD02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAD09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v4[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PeerCommunicationIdentifier(0);
  v4[17] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[18] = swift_task_alloc(v8);
  v4[19] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v4[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AAD158, v3, 0);
}

uint64_t sub_100AAD158()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  void *v4;
  NSString v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  sub_100ACD914();
  v4 = (void *)sub_100ACD7B4(v1, v2, v3);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v4, "destination");

  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  v6 = objc_msgSend(v5, "_stripPotentialTokenURIWithToken:", 0);

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    *(_QWORD *)(v0 + 168) = v7;
    *(_QWORD *)(v0 + 176) = v9;
    swift_bridgeObjectRetain(v9);
    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v7, v9);
    *(_QWORD *)(v0 + 184) = v11;
    *(_QWORD *)(v0 + 192) = v12;
    if (v12)
    {
      v13 = v10;
      v14 = v11;
      v15 = v12;
      *(_QWORD *)(v0 + 200) = v10;
      v16 = (_QWORD *)swift_task_alloc(dword_101112094);
      *(_QWORD *)(v0 + 208) = v16;
      *v16 = v0;
      v16[1] = sub_100AAD300;
      return sub_100AAF5B4(v13, v14, v15);
    }
    swift_bridgeObjectRelease();
  }
  v18 = sub_100AB4600();
  v19 = swift_allocError(&type metadata for PeerTrustServiceError, v18, 0, 0);
  *v20 = 3;
  swift_willThrow(v19);
  v21 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAD300(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v2 + 208);
  v4 = *v2;
  *(_QWORD *)(v4 + 216) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_100AAD3BC, *(_QWORD *)(v4 + 104), 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(v4 + 152);
  v6 = *(_QWORD *)(v4 + 144);
  v7 = *(_QWORD *)(v4 + 128);
  swift_task_dealloc(*(_QWORD *)(v4 + 160));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100AAD3BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for OwnerPeerTrust(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 160), type metadata accessor for OwnerPeerTrust);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 224) = v3;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 160), (uint64_t *)&unk_1010EE160);
    v7 = swift_task_alloc(dword_10111206C);
    *(_QWORD *)(v0 + 232) = v7;
    *(_QWORD *)v7 = v0;
    *(_QWORD *)(v7 + 8) = sub_100AAD534;
    v8 = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v7 + 64) = v8;
    return swift_task_switch(sub_100AAC17C, v8, 0);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126EC(v10, v11, type metadata accessor for OwnerPeerTrust);
    v12 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AAD534()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 104);
    v5 = sub_100AADC58;
  }
  else
  {
    v5 = sub_100AAD59C;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100AAD59C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;

  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_BYTE *)(v0 + 200);
  v3 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 248) = v3;
  *v3 = v0;
  v3[1] = sub_100AAD62C;
  return sub_100D8C77C(v2, *(_QWORD *)(v0 + 184), v1);
}

uint64_t sub_100AAD62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v5 = (_QWORD *)*v3;
  v5[2] = v3;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = v2;
  v6 = v5[31];
  v5[32] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = sub_100AAD844;
    v8 = 0;
  }
  else
  {
    v8 = v5[13];
    v5[33] = a2;
    v7 = sub_100AAD6AC;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100AAD6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 264);
  if (!v1)
    return swift_task_switch(sub_100AAD8EC, 0, 0);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(int **)(v0 + 224);
  v4 = *(_OWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(char **)(v0 + 80);
  *(_BYTE *)v5 = *(_QWORD *)(v0 + 200);
  *(_OWORD *)(v5 + 8) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  *(_QWORD *)(v5 + 32) = v1;
  v12 = swift_storeEnumTagMultiPayload(v5, v7, 4);
  UUID.init()(v12);
  sub_10005972C(v5, v6, type metadata accessor for PeerCommunicationIdentifier);
  sub_1003F0FD8();
  sub_1000126B0(v5, type metadata accessor for PeerCommunicationIdentifier);
  *(_OWORD *)v11 = xmmword_100E22FC0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v11[v3[5]], v8, v9);
  v11[v3[6]] = 1;
  sub_1000126EC(v6, (uint64_t)&v11[v3[7]], type metadata accessor for PeerCommunicationIdentifier);
  v13 = &v11[v3[8]];
  *(_QWORD *)v13 = v19;
  *((_QWORD *)v13 + 1) = v20;
  v14 = &v11[v3[9]];
  *(_QWORD *)v14 = v21;
  *((_QWORD *)v14 + 1) = v22;
  v11[v3[10]] = 0;
  v15 = *(_QWORD *)(v0 + 152);
  v16 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAD844()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100AAD890, v1, 0);
}

uint64_t sub_100AAD890()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAD8EC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_BYTE *)(v0 + 200);
  v3 = (_QWORD *)swift_task_alloc(dword_10111FCF4);
  *(_QWORD *)(v0 + 272) = v3;
  *v3 = v0;
  v3[1] = sub_100AAD954;
  return sub_100D8CA58(v2, *(_QWORD *)(v0 + 184), v1);
}

uint64_t sub_100AAD954(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v5 = (_QWORD *)*v3;
  v5[6] = v3;
  v5[7] = a1;
  v5[8] = a2;
  v5[9] = v2;
  v6 = v5[34];
  v5[35] = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = sub_100AADBB0;
    v8 = 0;
  }
  else
  {
    v8 = v5[13];
    v5[36] = a2;
    v7 = sub_100AAD9D4;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100AAD9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 288);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
    v3 = *(int **)(v0 + 224);
    v4 = *(_OWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(char **)(v0 + 80);
    *(_BYTE *)v5 = *(_QWORD *)(v0 + 200);
    *(_OWORD *)(v5 + 8) = v4;
    *(_QWORD *)(v5 + 24) = v2;
    *(_QWORD *)(v5 + 32) = v1;
    v12 = swift_storeEnumTagMultiPayload(v5, v7, 4);
    UUID.init()(v12);
    sub_10005972C(v5, v6, type metadata accessor for PeerCommunicationIdentifier);
    sub_1003F0FD8();
    sub_1000126B0(v5, type metadata accessor for PeerCommunicationIdentifier);
    *(_OWORD *)v11 = xmmword_100E22FC0;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v11[v3[5]], v8, v9);
    v11[v3[6]] = 1;
    sub_1000126EC(v6, (uint64_t)&v11[v3[7]], type metadata accessor for PeerCommunicationIdentifier);
    v13 = &v11[v3[8]];
    *(_QWORD *)v13 = v25;
    *((_QWORD *)v13 + 1) = v26;
    v14 = &v11[v3[9]];
    *(_QWORD *)v14 = v27;
    *((_QWORD *)v14 + 1) = v28;
    v11[v3[10]] = 0;
    v15 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = sub_100AB4600();
    v19 = swift_allocError(&type metadata for PeerTrustServiceError, v18, 0, 0);
    *v20 = 4;
    swift_willThrow(v19);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AADBB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100AADBFC, v1, 0);
}

uint64_t sub_100AADBFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AADC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 192);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  swift_bridgeObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AADCC8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 96) = v12;
  *(_QWORD *)(v8 + 104) = v7;
  *(_QWORD *)(v8 + 80) = a7;
  *(_QWORD *)(v8 + 88) = v11;
  *(_QWORD *)(v8 + 64) = a5;
  *(_QWORD *)(v8 + 72) = a6;
  *(_QWORD *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 56) = a4;
  *(_BYTE *)(v8 + 240) = a2;
  *(_QWORD *)(v8 + 40) = a1;
  v9 = type metadata accessor for PeerCommunicationIdentifier(0);
  *(_QWORD *)(v8 + 112) = v9;
  *(_QWORD *)(v8 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AADD3C, v7, 0);
}

uint64_t sub_100AADD3C()
{
  uint64_t v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v1, "_stripPotentialTokenURIWithToken:", 0);

  if (v2
    && (v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2),
        v5 = v4,
        v2,
        _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v3, v5),
        *(_QWORD *)(v0 + 128) = v7,
        (*(_QWORD *)(v0 + 136) = v8) != 0))
  {
    *(_QWORD *)(v0 + 144) = v6;
    return swift_task_switch(sub_100AADE24, 0, 0);
  }
  else
  {
    v10 = sub_100AB4600();
    v11 = swift_allocError(&type metadata for PeerTrustServiceError, v10, 0, 0);
    *v12 = 3;
    swift_willThrow(v11);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AADE24()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;

  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_BYTE *)(v0 + 144);
  v3 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 152) = v3;
  *v3 = v0;
  v3[1] = sub_100AADEB4;
  return sub_100D8C77C(v2, *(_QWORD *)(v0 + 128), v1);
}

uint64_t sub_100AADEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 152);
  v4[20] = a1;
  v4[21] = a2;
  v4[22] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100AAE20C;
  else
    v6 = sub_100AADF24;
  return swift_task_switch(v6, v4[13], 0);
}

uint64_t sub_100AADF24()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  if (*(_QWORD *)(v0 + 168))
    __asm { BR              X10 }
  swift_bridgeObjectRelease();
  v1 = sub_100AB4600();
  v2 = swift_allocError(&type metadata for PeerTrustServiceError, v1, 0, 0);
  *v3 = 3;
  swift_willThrow(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100AADFE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  int *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;

  v2 = *(_QWORD *)(v1 + 160);
  v3 = *(_OWORD *)(v1 + 128);
  v4 = *(_QWORD *)(v1 + 112);
  v5 = *(_QWORD *)(v1 + 120);
  *(_BYTE *)v5 = *(_QWORD *)(v1 + 144);
  *(_OWORD *)(v5 + 8) = v3;
  *(_QWORD *)(v5 + 24) = v2;
  *(_QWORD *)(v5 + 32) = a1;
  swift_storeEnumTagMultiPayload(v5, v4, 4);
  v6 = qword_1010E9A00;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 136));
  if (v6 != -1)
    swift_once(&qword_1010E9A00, sub_1001EB16C);
  v7 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  if (qword_1011B6A68 == v7 && qword_1011B6A70 == v8)
  {
    v9 = *(void **)(v1 + 136);
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, qword_1011B6A68, qword_1011B6A70, 0);
    v9 = *(void **)(v1 + 136);
    if ((v10 & 1) == 0)
    {
      v16 = *(_QWORD *)(v1 + 64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v16);
      v13 = *(_QWORD *)(v1 + 56);
      v15 = *(_QWORD *)(v1 + 64);
      goto LABEL_9;
    }
  }
  v11 = (void *)sub_100ACD7B4(*(_BYTE *)(v1 + 144), *(_QWORD *)(v1 + 128), v9);
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v11, "destination");

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

LABEL_9:
  v17 = *(_QWORD *)(v1 + 120);
  v19 = *(_QWORD *)(v1 + 72);
  v18 = *(_QWORD *)(v1 + 80);
  v21 = *(_OWORD **)(v1 + 40);
  v20 = *(_QWORD *)(v1 + 48);
  v22 = (int *)type metadata accessor for MemberPeerTrust(0);
  v23 = (char *)v21 + v22[5];
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, v20, v24);
  sub_1000126EC(v17, (uint64_t)v21 + v22[7], type metadata accessor for PeerCommunicationIdentifier);
  *v21 = xmmword_100E22FC0;
  *((_BYTE *)v21 + v22[6]) = 1;
  v25 = (uint64_t *)((char *)v21 + v22[8]);
  *v25 = v13;
  v25[1] = v15;
  v26 = (uint64_t *)((char *)v21 + v22[9]);
  *v26 = v19;
  v26[1] = v18;
  sub_10001BBBC(v19, v18);
  swift_task_dealloc(v17);
  JUMPOUT(0x100AADFC4);
}

uint64_t sub_100AAE20C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAE248()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_100AAE6B8;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 104);
    v5 = sub_100AAE2C8;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100AAE2C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = v0[20];
  v1 = v0[21];
  v3 = v0[2];
  v0[26] = v3;
  v0[4] = v3;
  v4 = swift_task_alloc(32);
  v0[27] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFirst(where:)[1]);
  v0[28] = v5;
  v6 = sub_1000193A4(&qword_101112288, &qword_10110E0F0, (const char *)&protocol conformance descriptor for Set<A>);
  *v5 = v0;
  v5[1] = sub_100AAE384;
  return Sequence.asyncFirst(where:)(v0 + 3, &unk_101112280, v4, v0[24], v6);
}

uint64_t sub_100AAE384()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 216);
    v5 = *(_QWORD *)(v2 + 104);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    v6 = sub_100AAE6EC;
    v7 = v5;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 216);
    v9 = *(_QWORD *)(v2 + 104);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v8);
    v6 = sub_100AAE42C;
    v7 = v9;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100AAE42C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t (*v18)(void);
  char v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  int *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  __int128 v37;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 24), "altDSID");

    if (v2)
    {
      v4 = *(_QWORD *)(v0 + 160);
      v3 = *(_QWORD *)(v0 + 168);
      v5 = *(_QWORD *)(v0 + 144);
      v37 = *(_OWORD *)(v0 + 128);
      v7 = *(_QWORD *)(v0 + 112);
      v6 = *(_QWORD *)(v0 + 120);
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
      v10 = v9;

      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v10;
      *(_BYTE *)(v6 + 16) = v5;
      *(_OWORD *)(v6 + 24) = v37;
      *(_QWORD *)(v6 + 40) = v4;
      *(_QWORD *)(v6 + 48) = v3;
      swift_storeEnumTagMultiPayload(v6, v7, 5);
      v11 = qword_1010E9A00;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
      if (v11 != -1)
        swift_once(&qword_1010E9A00, sub_1001EB16C);
      v12 = *(_QWORD *)(v0 + 56);
      v13 = *(_QWORD *)(v0 + 64);
      if (qword_1011B6A68 == v12 && qword_1011B6A70 == v13)
      {
        v14 = *(void **)(v0 + 136);
      }
      else
      {
        v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, qword_1011B6A68, qword_1011B6A70, 0);
        v14 = *(void **)(v0 + 136);
        if ((v19 & 1) == 0)
        {
          v25 = *(_QWORD *)(v0 + 64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain(v25);
          v22 = *(_QWORD *)(v0 + 56);
          v24 = *(_QWORD *)(v0 + 64);
          goto LABEL_12;
        }
      }
      v20 = (void *)sub_100ACD7B4(*(_BYTE *)(v0 + 144), *(_QWORD *)(v0 + 128), v14);
      swift_bridgeObjectRelease();
      v21 = objc_msgSend(v20, "destination");

      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

LABEL_12:
      v26 = *(_QWORD *)(v0 + 120);
      v28 = *(_QWORD *)(v0 + 72);
      v27 = *(_QWORD *)(v0 + 80);
      v30 = *(_OWORD **)(v0 + 40);
      v29 = *(_QWORD *)(v0 + 48);
      v31 = (int *)type metadata accessor for MemberPeerTrust(0);
      v32 = (char *)v30 + v31[5];
      v33 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, v29, v33);
      sub_1000126EC(v26, (uint64_t)v30 + v31[7], type metadata accessor for PeerCommunicationIdentifier);
      *v30 = xmmword_100E22FC0;
      *((_BYTE *)v30 + v31[6]) = 1;
      v34 = (uint64_t *)((char *)v30 + v31[8]);
      *v34 = v22;
      v34[1] = v24;
      v35 = (uint64_t *)((char *)v30 + v31[9]);
      *v35 = v28;
      v35[1] = v27;
      sub_10001BBBC(v28, v27);
      swift_task_dealloc(v26);
      v18 = *(uint64_t (**)(void))(v0 + 8);
      return v18();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = sub_100AB4600();
  v16 = swift_allocError(&type metadata for PeerTrustServiceError, v15, 0, 0);
  *v17 = 3;
  swift_willThrow(v16);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100AAE6B8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAE6EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAE728@<X0>(_QWORD *a1@<X8>)
{
  return sub_100AB10DC((uint64_t)sub_1003D0B6C, a1);
}

uint64_t sub_100AAE744(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a2;
  v3[3] = a3;
  v3[4] = *a1;
  return swift_task_switch(sub_100AAE764, 0, 0);
}

uint64_t sub_100AAE764()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = objc_msgSend(*(id *)(v0 + 32), "appleID");
  if (!v1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v3, v5);
  *(_QWORD *)(v0 + 40) = v8;
  if (!v8)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v9 = v6;
  v10 = v7;
  v11 = v8;
  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v12 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 48) = v12;
  *v12 = v0;
  v12[1] = sub_100AAE85C;
  return sub_100D8C77C(v9, v10, v11);
}

uint64_t sub_100AAE85C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 48);
  v4[7] = a1;
  v4[8] = a2;
  v4[9] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_100AAE948;
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = sub_100AAE8D4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100AAE8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 16);
    v4 = *(_QWORD *)(v0 + 24);
    if (v2 == v3 && v1 == v4)
      v6 = 1;
    else
      v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, *(_QWORD *)(v0 + 64), v3, v4, 0);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    v6 = 0;
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v6 & 1);
}

uint64_t sub_100AAE948()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100AAE980(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  *(_QWORD *)(v5 + 160) = a4;
  *(_QWORD *)(v5 + 168) = v4;
  *(_BYTE *)(v5 + 352) = a2;
  *(_QWORD *)(v5 + 144) = a1;
  *(_QWORD *)(v5 + 152) = a3;
  v6 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v5 + 176) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 184) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 192) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 200) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 208) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 216) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 224) = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for PeerTrustAckEnvelopeV1(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 232) = swift_task_alloc(v10);
  *(_QWORD *)(v5 + 240) = swift_task_alloc(v10);
  return swift_task_switch(sub_100AAEA64, v4, 0);
}

uint64_t sub_100AAEA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (*v9)(void);
  _BYTE v10[8];
  __int128 v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 192) + 16);
  *(_QWORD *)(v0 + 248) = v5;
  v5(v2, v4, v3);
  sub_10005972C(v2, v1, type metadata accessor for PeerTrustAckEnvelopeV1);
  sub_10038A210(0, 1, v1, (uint64_t)v10);
  *(_BYTE *)(v0 + 353) = v10[0];
  *(_OWORD *)(v0 + 256) = v11;
  *(_QWORD *)(v0 + 272) = v12;
  v6 = qword_1010EA5B0;
  swift_retain();
  if (v6 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v9 = (uint64_t (*)(void))((char *)&dword_1010EBB28 + dword_1010EBB28);
    v8 = (_QWORD *)swift_task_alloc(unk_1010EBB2C);
    *(_QWORD *)(v0 + 280) = v8;
    *v8 = v0;
    v8[1] = sub_100AAEC30;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AAEC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AAEC90, v3, 0);
}

uint64_t sub_100AAEC90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 288))
  {
    v2 = *(_QWORD *)(v0 + 152);
    v3 = *(_QWORD *)(v0 + 160);
    v4 = *(_BYTE *)(v0 + 352);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = sub_10001A9A8(&qword_1010EE2B0);
    v6 = swift_allocObject(v5, 56, 7);
    *(_QWORD *)(v0 + 296) = v6;
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    *(_BYTE *)(v6 + 32) = v4;
    *(_QWORD *)(v6 + 40) = v2;
    *(_QWORD *)(v6 + 48) = v3;
    swift_bridgeObjectRetain(v3);
    return swift_task_switch(sub_100AAEEA8, *(_QWORD *)(v0 + 288), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA160 != -1)
      swift_once(&qword_1010EA160, sub_100AABA90);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7B90);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No IDSTransportService_ItemSharingCrossAccount available!", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v14 = *(_QWORD *)(v0 + 264);
    v13 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 240);

    v16 = sub_100033220();
    v17 = swift_allocError(&type metadata for DaemonError, v16, 0, 0);
    *v18 = 0xD00000000000002BLL;
    v18[1] = 0x8000000100ECC560;
    swift_willThrow(v17);
    sub_10001BC14(v14, v13);
    sub_1000126B0(v15, type metadata accessor for PeerTrustAckEnvelopeV1);
    v19 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AAEEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v12 = *(_OWORD *)(v0 + 256);
  v3 = *(_BYTE *)(v0 + 353);
  v4 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 56))(v5, 1, 1, *(_QWORD *)(v0 + 184));
  v6 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 304) = v6;
  v7 = sub_100CA7EC0((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 312) = v7;
  UUID.init()(v7);
  v8 = sub_100006C64(&qword_10110DB40, 255, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount, (uint64_t)&unk_100E561AC);
  v9 = swift_task_alloc(128);
  *(_QWORD *)(v0 + 320) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  *(_QWORD *)(v9 + 24) = v4;
  *(_BYTE *)(v9 + 32) = v3;
  *(_OWORD *)(v9 + 40) = v12;
  *(_QWORD *)(v9 + 56) = v2;
  *(_QWORD *)(v9 + 64) = v13;
  *(_QWORD *)(v9 + 72) = v5;
  *(_QWORD *)(v9 + 80) = 0;
  *(_WORD *)(v9 + 88) = 1;
  *(_QWORD *)(v9 + 96) = v6;
  *(_QWORD *)(v9 + 104) = v7;
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 328) = v10;
  *v10 = v0;
  v10[1] = sub_100AAF010;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 288), v8, 0xD000000000000083, 0x8000000100EEB060, sub_10096E370, v9, *(_QWORD *)(v0 + 184));
}

uint64_t sub_100AAF010()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(_QWORD *)(v2 + 320));
  if (v0)
    v4 = sub_100AAF478;
  else
    v4 = sub_100AAF07C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 288), 0);
}

uint64_t sub_100AAF07C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0[27];
  v2 = v0[23];
  v4 = v0[21];
  v3 = v0[22];
  v5 = *(void (**)(uint64_t, uint64_t))(v0[24] + 8);
  v0[43] = v5;
  v5(v1, v2);
  sub_100004048(v3, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100AAF108, v4, 0);
}

uint64_t sub_100AAF108()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BOOL4 v10;
  void (*v11)(uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *log;
  uint64_t v32;
  unint64_t v33;
  os_log_type_t type;
  uint64_t v35;
  uint64_t v36;

  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  v3 = *(_QWORD *)(v0 + 224);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7B90);
  v2(v4, v1, v6);
  v8 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v2)(v5, v3, v6);
  v9 = Logger.logObject.getter(v8);
  type = static os_log_type_t.default.getter(v9);
  v10 = os_log_type_enabled(v9, type);
  v11 = *(void (**)(uint64_t, uint64_t))(v0 + 344);
  v13 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 200);
  v17 = *(_QWORD *)(v0 + 184);
  if (v10)
  {
    v33 = *(_QWORD *)(v0 + 272);
    v18 = swift_slowAlloc(32, -1);
    v32 = swift_slowAlloc(64, -1);
    v36 = v32;
    *(_DWORD *)v18 = 141558531;
    *(_QWORD *)(v0 + 120) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2081;
    log = v9;
    v19 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
    *(_QWORD *)(v0 + 128) = sub_100016940(v20, v21, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    v11(v16, v17);
    *(_WORD *)(v18 + 22) = 2082;
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
    *(_QWORD *)(v0 + 136) = sub_100016940(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    v11(v35, v17);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully sent PeerTrustAck message for %{private,mask.hash}s [%{public}s]", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v18, -1, -1);
    swift_release();
    sub_10001BC14(v13, v33);

    v11(v15, v17);
  }
  else
  {
    swift_release();
    sub_10001BC14(v13, v12);

    v11(v35, v17);
    v11(v16, v17);
    v11(v15, v17);
  }
  sub_1000126B0(v14, type metadata accessor for PeerTrustAckEnvelopeV1);
  v24 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 216);
  v25 = *(_QWORD *)(v0 + 224);
  v28 = *(_QWORD *)(v0 + 200);
  v27 = *(_QWORD *)(v0 + 208);
  v29 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAF478()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v0[21];
  v1 = v0[22];
  (*(void (**)(_QWORD, _QWORD))(v0[24] + 8))(v0[27], v0[23]);
  sub_100004048(v1, &qword_1010ED860);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100AAF500, v2, 0);
}

uint64_t sub_100AAF500()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 240);
  swift_release();
  sub_10001BC14(v1, v2);
  sub_1000126B0(v3, type metadata accessor for PeerTrustAckEnvelopeV1);
  v4 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAF5B4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 152) = a3;
  *(_QWORD *)(v4 + 160) = v3;
  *(_QWORD *)(v4 + 144) = a2;
  *(_BYTE *)(v4 + 360) = a1;
  v5 = type metadata accessor for CorrelationIdentifierMap(0);
  *(_QWORD *)(v4 + 168) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 176) = v6;
  *(_QWORD *)(v4 + 184) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AAF61C, v3, 0);
}

uint64_t sub_100AAF61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 192) = v3;
    *v3 = v0;
    v3[1] = sub_100AAF714;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AAF714(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AAF774, v3, 0);
}

uint64_t sub_100AAF774()
{
  uint64_t v0;
  _QWORD *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 200))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = String._bridgeToObjectiveC()();
    v3 = objc_msgSend(v2, "_stripPotentialTokenURIWithToken:", 0);

    if (v3
      && (v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3),
          v6 = v5,
          v3,
          _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v4, v6),
          *(_QWORD *)(v0 + 208) = v8,
          (*(_QWORD *)(v0 + 216) = v9) != 0))
    {
      *(_QWORD *)(v0 + 224) = v7;
      return swift_task_switch(sub_100AAF96C, 0, 0);
    }
    else
    {
      swift_release();
      swift_task_dealloc(*(_QWORD *)(v0 + 184));
      return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA160 != -1)
      swift_once(&qword_1010EA160, sub_100AABA90);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7B90);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No BeaconStoreActor available!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = sub_100033220();
    v17 = swift_allocError(&type metadata for DaemonError, v16, 0, 0);
    *v18 = 0xD000000000000010;
    v18[1] = 0x8000000100EC6470;
    swift_willThrow(v17);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AAF96C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;

  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_BYTE *)(v0 + 224);
  v3 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 232) = v3;
  *v3 = v0;
  v3[1] = sub_100AAF9FC;
  return sub_100D8C77C(v2, *(_QWORD *)(v0 + 208), v1);
}

uint64_t sub_100AAF9FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 232);
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = v4[20];
    v7 = sub_100AAFCD0;
  }
  else
  {
    v8 = v4[20];
    swift_bridgeObjectRelease();
    v7 = sub_100AAFA70;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100AAFA70()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 240))
  {
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100AAFAE0, *(_QWORD *)(v0 + 200), 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100AAFAE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[25];
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[32] = v3;
  v4 = sub_10001A9A8(&qword_1010EC918);
  v0[33] = v4;
  *v3 = v0;
  v3[1] = sub_100AAFB6C;
  return unsafeBlocking<A>(_:)(v0 + 15, sub_10007AC64, v1, v4);
}

uint64_t sub_100AAFB6C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  swift_release();
  return swift_task_switch(sub_100AAFBC8, *(_QWORD *)(v1 + 200), 0);
}

uint64_t sub_100AAFBC8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[15];
  v0[34] = v1;
  v0[16] = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  v0[35] = v2;
  v3 = sub_1000193A4(&qword_1010FA348, &qword_1010EC918, (const char *)&protocol conformance descriptor for [A]);
  v0[36] = v3;
  *v2 = v0;
  v2[1] = sub_100AAFC60;
  return Sequence.asyncCompactMap<A>(_:)(&unk_101112260, 0, v0[33], &type metadata for MessagingDestination, v3);
}

uint64_t sub_100AAFC60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 280);
  v3[37] = a1;
  v3[38] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100AB0034;
  else
    v5 = sub_100AAFD18;
  return swift_task_switch(v5, v3[20], 0);
}

uint64_t sub_100AAFCD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 216));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AAFD18()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 296);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8700(0, v3[2] + 1, 1, *(_QWORD **)(v0 + 296));
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8700((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_BYTE *)(v0 + 360);
  v3[2] = v5 + 1;
  v9 = &v3[3 * v5];
  *((_BYTE *)v9 + 32) = v8;
  v9[5] = v7;
  v9[6] = v6;
  v10 = (_QWORD *)swift_task_alloc(dword_1010F800C);
  *(_QWORD *)(v0 + 312) = v10;
  *v10 = v0;
  v10[1] = sub_100AAFE1C;
  return sub_100340FBC(*(_QWORD *)(v0 + 184), 0xD00000000000001BLL, 0x8000000100EC7AF0, (uint64_t)v3, (uint64_t)sub_100AB0120, 0);
}

uint64_t sub_100AAFE1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 160);
    swift_bridgeObjectRelease();
    v5 = sub_100AB007C;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 160);
    v5 = sub_100AAFE90;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100AAFE90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_BYTE *)(v0 + 360);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v0 + 272);
  v5 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 328) = v5;
  *(_QWORD *)(v5 + 16) = v1;
  *(_BYTE *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v3;
  *(_QWORD *)(v5 + 40) = v2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  *(_QWORD *)(v0 + 336) = v6;
  *v6 = v0;
  v6[1] = sub_100AAFF34;
  return Sequence.asyncFilter(_:)(&unk_101112270, v5, *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 288));
}

uint64_t sub_100AAFF34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 336);
  *(_QWORD *)(*(_QWORD *)v2 + 344) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[20];
    swift_task_dealloc(v4[41]);
    v7 = sub_100AB00B8;
    v8 = v6;
  }
  else
  {
    v9 = v4[41];
    v10 = v4[20];
    swift_bridgeObjectRelease();
    v4[44] = a1;
    swift_task_dealloc(v9);
    v7 = sub_100AAFFD0;
    v8 = v10;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100AAFFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 200));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_100AB0034()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB007C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB00B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 200));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB0120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a3);
  return a1;
}

uint64_t sub_100AB0160(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  *(_BYTE *)(v5 + 80) = a3;
  *(_QWORD *)(v5 + 16) = a2;
  v6 = a1 + *(int *)(type metadata accessor for OwnerPeerTrust(0) + 28);
  v9 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
  v7 = (_QWORD *)swift_task_alloc(unk_10111223C);
  *(_QWORD *)(v5 + 40) = v7;
  *v7 = v5;
  v7[1] = sub_100AB01DC;
  return v9(v6);
}

uint64_t sub_100AB01DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*v4 + 40);
  v6 = *v4;
  *(_QWORD *)(v6 + 48) = a1;
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a3;
  *(_QWORD *)(v6 + 72) = v3;
  swift_task_dealloc(v5);
  if (v3)
    return (*(uint64_t (**)(_QWORD))(v6 + 8))(0);
  else
    return swift_task_switch(sub_100AB0258, 0, 0);
}

uint64_t sub_100AB0258()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  char v9;

  if (!*(_QWORD *)(v0 + 64))
  {
    v9 = 0;
LABEL_6:
    v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v8 = v9 & 1;
    return v7(v8);
  }
  v1 = *(_QWORD *)(v0 + 72);
  v2 = sub_1003419D4(*(unsigned __int8 *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64));
  v4 = v3;
  swift_bridgeObjectRelease();
  if (!v1)
  {
    v5 = sub_1003419D4(*(unsigned __int8 *)(v0 + 80), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
    if (v2 == v5 && v4 == v6)
      v9 = 1;
    else
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v8 = 0;
  return v7(v8);
}

uint64_t sub_100AB0348(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 152) = a3;
  *(_QWORD *)(v4 + 160) = v3;
  *(_QWORD *)(v4 + 144) = a2;
  *(_BYTE *)(v4 + 320) = a1;
  v5 = type metadata accessor for CorrelationIdentifierMap(0);
  *(_QWORD *)(v4 + 168) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 176) = v6;
  *(_QWORD *)(v4 + 184) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AB03B0, v3, 0);
}

uint64_t sub_100AB03B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 192) = v3;
    *v3 = v0;
    v3[1] = sub_100AB04A8;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AB04A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AB0508, v3, 0);
}

uint64_t sub_100AB0508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100AB0664, *(_QWORD *)(v0 + 200), 0);
  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7B90);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconStoreActor available!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_100033220();
  v9 = swift_allocError(&type metadata for DaemonError, v8, 0, 0);
  *v10 = 0xD000000000000010;
  v10[1] = 0x8000000100EC6470;
  swift_willThrow(v9);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB0664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[25];
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[26] = v3;
  v4 = sub_10001A9A8(&qword_1010EC910);
  v0[27] = v4;
  *v3 = v0;
  v3[1] = sub_100AB06F0;
  return unsafeBlocking<A>(_:)(v0 + 15, sub_10007C088, v1, v4);
}

uint64_t sub_100AB06F0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 208));
  swift_release();
  return swift_task_switch(sub_100AB0748, *(_QWORD *)(v1 + 200), 0);
}

uint64_t sub_100AB0748()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = v0[15];
  v0[28] = v1;
  v0[16] = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  v0[29] = v2;
  v3 = sub_1000193A4(&qword_101112248, &qword_1010EC910, (const char *)&protocol conformance descriptor for [A]);
  v0[30] = v3;
  *v2 = v0;
  v2[1] = sub_100AB07E0;
  return Sequence.asyncCompactMap<A>(_:)(&unk_101112240, 0, v0[27], &type metadata for MessagingDestination, v3);
}

uint64_t sub_100AB07E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 232);
  v3[31] = a1;
  v3[32] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100AB0CAC;
  else
    v5 = sub_100AB0850;
  return swift_task_switch(v5, v3[20], 0);
}

uint64_t sub_100AB0850()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 152));
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 248);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8700(0, v3[2] + 1, 1, *(_QWORD **)(v0 + 248));
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8700((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v7 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 152);
  v8 = *(_BYTE *)(v0 + 320);
  v3[2] = v5 + 1;
  v9 = &v3[3 * v5];
  *((_BYTE *)v9 + 32) = v8;
  v9[5] = v7;
  v9[6] = v6;
  v10 = (_QWORD *)swift_task_alloc(dword_1010F800C);
  *(_QWORD *)(v0 + 264) = v10;
  *v10 = v0;
  v10[1] = sub_100AB0954;
  return sub_100340FBC(*(_QWORD *)(v0 + 184), 0xD00000000000001BLL, 0x8000000100EC7AF0, (uint64_t)v3, (uint64_t)sub_100AB48CC, 0);
}

uint64_t sub_100AB0954()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 264);
  *(_QWORD *)(*v1 + 272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 160);
    swift_bridgeObjectRelease();
    v5 = sub_100AB0CF4;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 160);
    v5 = sub_100AB09C8;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100AB09C8()
{
  uint64_t v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v1, "_stripPotentialTokenURIWithToken:", 0);

  if (v2
    && (v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2),
        v5 = v4,
        v2,
        _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v3, v5),
        v8))
  {
    v9 = *(_QWORD *)(v0 + 272);
    v10 = sub_1003419D4(v6, v7, v8);
    *(_QWORD *)(v0 + 280) = v11;
    if (v9)
    {
      v13 = *(_QWORD *)(v0 + 176);
      v12 = *(_QWORD *)(v0 + 184);
      v14 = *(_QWORD *)(v0 + 168);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      swift_task_dealloc(*(_QWORD *)(v0 + 184));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v17 = v10;
      v18 = v11;
      v19 = *(_QWORD *)(v0 + 224);
      v20 = *(_QWORD *)(v0 + 184);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 136) = v19;
      v21 = (_QWORD *)swift_task_alloc(48);
      *(_QWORD *)(v0 + 288) = v21;
      v21[2] = v20;
      v21[3] = v17;
      v21[4] = v18;
      v22 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
      *(_QWORD *)(v0 + 296) = v22;
      *v22 = v0;
      v22[1] = sub_100AB0BA0;
      return Sequence.asyncFilter(_:)(&unk_101112258, v21, *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    v16 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v16, *(_QWORD *)(v0 + 168));
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100AB0BA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 296);
  *(_QWORD *)(*(_QWORD *)v2 + 304) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[36];
    v7 = v4[20];
    swift_bridgeObjectRelease();
    swift_task_dealloc(v6);
    v8 = sub_100AB0D30;
    v9 = v7;
  }
  else
  {
    v10 = v4[36];
    v11 = v4[20];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4[39] = a1;
    swift_task_dealloc(v10);
    v8 = sub_100AB0C54;
    v9 = v11;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100AB0C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 200));
  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 184);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v2, *(_QWORD *)(v0 + 168));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100AB0CAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 224));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB0CF4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB0D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 200));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB0D98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v3 = a2 + *(int *)(type metadata accessor for MemberPeerTrust(0) + 28);
  v6 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
  v4 = (_QWORD *)swift_task_alloc(unk_10111223C);
  *(_QWORD *)(v2 + 24) = v4;
  *v4 = v2;
  v4[1] = sub_100AB0E0C;
  return v6(v3);
}

uint64_t sub_100AB0E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = (_QWORD *)*v4;
  v9 = *(_QWORD *)(*v4 + 24);
  v10 = *v4;
  swift_task_dealloc(v9);
  if (v3)
    return (*(uint64_t (**)(void))(v10 + 8))();
  v8[4] = a3;
  v8[5] = a2;
  v8[6] = a1;
  return swift_task_switch(sub_100AB48C8, 0, 0);
}

uint64_t sub_100AB0EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v6 = type metadata accessor for MemberPeerTrust(0);
  v4[6] = v6;
  v7 = a1 + *(int *)(v6 + 28);
  v10 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
  v8 = (_QWORD *)swift_task_alloc(unk_10111223C);
  v4[7] = v8;
  *v8 = v4;
  v8[1] = sub_100AB0F1C;
  return v10(v7);
}

uint64_t sub_100AB0F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*v4 + 56);
  v6 = *v4;
  *(_QWORD *)(v6 + 64) = a1;
  *(_QWORD *)(v6 + 72) = a2;
  *(_QWORD *)(v6 + 80) = a3;
  *(_QWORD *)(v6 + 88) = v3;
  swift_task_dealloc(v5);
  if (v3)
    return (*(uint64_t (**)(_QWORD))(v6 + 8))(0);
  else
    return swift_task_switch(sub_100AB0F98, 0, 0);
}

uint64_t sub_100AB0F98()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  void *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 88);
  if (*(_QWORD *)(v0 + 80))
  {
    v2 = sub_1003419D4(*(unsigned __int8 *)(v0 + 64), *(_QWORD *)(v0 + 72), *(void **)(v0 + 80));
    v4 = v3;
    swift_bridgeObjectRelease();
    if (v1)
      goto LABEL_12;
    v5 = *(void **)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    if (v2 == v5 && v4 == v6)
      goto LABEL_19;
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
      v9 = 1;
LABEL_21:
      v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
      v20 = v9 & 1;
      return v19(v20);
    }
    v1 = 0;
  }
  v10 = (uint64_t *)(*(_QWORD *)(v0 + 16) + *(int *)(*(_QWORD *)(v0 + 48) + 32));
  v12 = *v10;
  v11 = v10[1];
  swift_bridgeObjectRetain(v11);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v12, v11);
  if (!v15)
  {
    v9 = 0;
    goto LABEL_21;
  }
  v16 = sub_1003419D4(v13, v14, v15);
  v18 = v17;
  swift_bridgeObjectRelease();
  if (!v1)
  {
    v21 = *(void **)(v0 + 32);
    v22 = *(_QWORD *)(v0 + 40);
    if (v16 != v21 || v18 != v22)
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v21, v22, 0);
LABEL_20:
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
LABEL_19:
    v9 = 1;
    goto LABEL_20;
  }
LABEL_12:
  v19 = *(uint64_t (**)(uint64_t))(v0 + 8);
  v20 = 0;
  return v19(v20);
}

uint64_t sub_100AB10DC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;

  if (qword_1010E9968 != -1)
    swift_once(&qword_1010E9968, sub_1000FC8C8);
  v4 = qword_1010EEF78;
  v5 = sub_10001A9A8(&qword_1010FA130);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(a1, 0, v4, &type metadata for () + 1, v5);
  if ((v9 & 1) != 0)
  {
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    return swift_willThrowTypedImpl(&v8, v7, &protocol self-conformance witness table for Error);
  }
  else
  {
    *a2 = v8;
  }
  return result;
}

uint64_t type metadata accessor for PeerTrustService()
{
  return objc_opt_self(_TtC12searchpartyd16PeerTrustService);
}

uint64_t sub_100AB11D0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AB1234, v0, 0);
}

uint64_t sub_100AB1234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for TaskPriority(0);
  v8 = *(_OWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v5 = sub_100006C64(&qword_1011121E0, v4, (uint64_t (*)(uint64_t))type metadata accessor for PeerTrustService, (uint64_t)&unk_100E5ACF8);
  v6 = swift_allocObject(&unk_1010A8670, 48, 7);
  *(_QWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 24) = v5;
  *(_OWORD *)(v6 + 32) = v8;
  swift_retain_n(v3, 2);
  sub_100691AC0(v1, (uint64_t)&unk_1011121F8, v6);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB1314(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v20 = *v1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v12 = sub_100006C64(&qword_1011121E0, v11, (uint64_t (*)(uint64_t))type metadata accessor for PeerTrustService, (uint64_t)&unk_100E5ACF8);
  v13 = *(unsigned __int8 *)(v4 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (v5 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_1010A8698, v16 + 8, v13 | 7);
  *(_QWORD *)(v17 + 16) = v1;
  *(_QWORD *)(v17 + 24) = v12;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v17 + v14, v6, v3);
  *(_QWORD *)(v17 + v15) = v1;
  *(_QWORD *)(v17 + v16) = v20;
  swift_retain_n(v1, 2);
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_101112220, v17);
  return swift_release();
}

uint64_t sub_100AB14A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5[22] = a4;
  v5[23] = a5;
  v7 = sub_10001A9A8(&qword_1010EC870);
  v5[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v5[25] = v8;
  v5[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnerPeerTrust(0);
  v5[27] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[28] = v10;
  v5[29] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v5[30] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[31] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v5[32] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[33] = swift_task_alloc(v14);
  v5[34] = swift_task_alloc(v14);
  v5[35] = swift_task_alloc(v14);
  v5[36] = swift_task_alloc(v14);
  return swift_task_switch(sub_100AB15AC, a5, 0);
}

uint64_t sub_100AB15AC()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t (__cdecl *v25)();
  uint64_t v26;

  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0[22];
  v3 = v0[36];
  v5 = v0[30];
  v4 = v0[31];
  v6 = type metadata accessor for Logger(0);
  v0[37] = sub_10001A9E8(v6, (uint64_t)qword_1011B7B90);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[38] = v7;
  v8 = v7(v3, v2, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[36];
  v13 = v0[30];
  v14 = v0[31];
  if (v11)
  {
    v15 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(32, -1);
    v26 = v24;
    *(_DWORD *)v15 = 141558275;
    v0[20] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    v0[21] = sub_100016940(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received handlePeerTrustAck -- identifier: %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v20 = v15;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v0[36], v0[30]);
  }

  v0[39] = v19;
  v21 = qword_1010EA5B0;
  swift_retain();
  if (v21 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 12, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, (uint64_t)v1);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v25 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v23 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    v0[40] = v23;
    *v23 = v0;
    v23[1] = sub_100AB18AC;
    return v25();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AB18AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 328) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AB190C, v3, 0);
}

uint64_t sub_100AB190C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 328))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_100AB1BB0, *(_QWORD *)(v0 + 328), 0);
  }
  else
  {
    v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_100033220();
    v8 = swift_allocError(&type metadata for DaemonError, v7, 0, 0);
    *v9 = 0xD000000000000010;
    v9[1] = 0x8000000100EC6470;
    swift_willThrow(v8);
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138412290;
      v15 = _convertErrorToNSError(_:)(v8);
      *(_QWORD *)(v0 + 120) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 4, v13 + 12);
      *v14 = v15;
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error in handlePeerTrustAck: %@", v13, 0xCu);
      v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v14, 1, v16);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);

    }
    v17 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 272);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AB1BB0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 336) = *(_QWORD *)(*(_QWORD *)(v0 + 328) + 128);
  return swift_task_switch(sub_100AB1BD0, 0, 0);
}

uint64_t sub_100AB1BD0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 344) = v1;
  *v1 = v0;
  v1[1] = sub_100AB1C58;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 336), &type metadata for () + 1);
}

uint64_t sub_100AB1C58()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  return swift_task_switch(sub_100AB1CAC, 0, 0);
}

uint64_t sub_100AB1CAC()
{
  uint64_t v0;

  return swift_task_switch(sub_100AB1CC0, *(_QWORD *)(v0 + 328), 0);
}

uint64_t sub_100AB1CC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 304))(v2, *(_QWORD *)(v0 + 176), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010A86C0, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 352) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 360) = v10;
  *v10 = v0;
  v10[1] = sub_100AB1D9C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 208), sub_1001C09C8, v8, *(_QWORD *)(v0 + 200));
}

uint64_t sub_100AB1D9C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_release();
  return swift_task_switch(sub_100AB1DFC, v1, 0);
}

uint64_t sub_100AB1DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;

  v1 = v0 + 128;
  v2 = *(_QWORD *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 48))(v2, 1, *(_QWORD *)(v0 + 216)) == 1)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
    v4 = *(_QWORD *)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 176);
    sub_100004048(v2, (uint64_t *)&unk_1010EE160);
    v7 = v3(v4, v6, v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    v12 = *(_QWORD *)(v0 + 272);
    v13 = *(_QWORD *)(v0 + 240);
    if (v10)
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(32, -1);
      v41 = v15;
      *(_DWORD *)v14 = 141558275;
      *(_QWORD *)(v0 + 128) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      *(_QWORD *)(v0 + 136) = sub_100016940(v17, v18, &v41);
      v1 = v0 + 128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      v11(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received PeerTrustAck for unknown record: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v11(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 240));
    }

    v22 = sub_100AB4600();
    v23 = swift_allocError(&type metadata for PeerTrustServiceError, v22, 0, 0);
    *v24 = 0;
    swift_willThrow(v23);
    swift_release();
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v28 = 138412290;
      v30 = _convertErrorToNSError(_:)(v23);
      v31 = v1;
      v32 = v30;
      *(_QWORD *)(v0 + 120) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v31, v28 + 4, v28 + 12);
      *v29 = v32;
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error in handlePeerTrustAck: %@", v28, 0xCu);
      v33 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v29, 1, v33);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
    v34 = *(_QWORD *)(v0 + 280);
    v36 = *(_QWORD *)(v0 + 264);
    v35 = *(_QWORD *)(v0 + 272);
    v37 = *(_QWORD *)(v0 + 232);
    v38 = *(_QWORD *)(v0 + 208);
    v39 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 192);
    sub_1000126EC(v2, v19, type metadata accessor for OwnerPeerTrust);
    v21 = swift_task_alloc(32);
    *(_QWORD *)(v21 + 16) = v19;
    sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100AB4644, v20);
    swift_task_dealloc(v21);
    return swift_task_switch(sub_100AB2248, *(_QWORD *)(v0 + 328), 0);
  }
}

uint64_t sub_100AB2248()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 368) = *(_QWORD *)(*(_QWORD *)(v0 + 328) + 128);
  return swift_task_switch(sub_100AB2268, 0, 0);
}

uint64_t sub_100AB2268()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[46];
  v2 = v0[24];
  v3 = swift_task_alloc(32);
  v0[47] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[48] = v4;
  *v4 = v0;
  v4[1] = sub_100AB230C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, &type metadata for () + 1);
}

uint64_t sub_100AB230C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 384);
  *(_QWORD *)(*v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100AB2378;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 376));
    v4 = sub_100AB258C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100AB2378()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  return swift_task_switch(sub_100AB23B8, v1, 0);
}

uint64_t sub_100AB23B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 192);
  swift_release();
  sub_100004048(v2, &qword_1010EC870);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v9 = _convertErrorToNSError(_:)(v3);
    *(_QWORD *)(v0 + 120) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error in handlePeerTrustAck: %@", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v11 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB258C()
{
  uint64_t v0;

  return swift_task_switch(sub_100AB25A0, *(_QWORD *)(v0 + 184), 0);
}

uint64_t sub_100AB25A0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 240));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    v4 = *(_QWORD *)(v0 + 264);
    v5 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 192);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 144) = 1752392040;
    v25 = v7;
    *(_DWORD *)v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v8 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 152) = sub_100016940(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    v23(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "OwnerPeerTrust %{private,mask.hash}s state changed to .acknowledged", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_release();

    v11 = v24;
  }
  else
  {
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    v13 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 240);
    v15 = *(_QWORD *)(v0 + 192);

    swift_release();
    v12(v13, v14);
    v11 = v15;
  }
  sub_100004048(v11, &qword_1010EC870);
  sub_1000126B0(*(_QWORD *)(v0 + 232), type metadata accessor for OwnerPeerTrust);
  v16 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 272);
  v19 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB2818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100AB2830, v1, 0);
}

uint64_t sub_100AB2830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7B90);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = sub_1003D0C34();
    swift_bridgeObjectRetain(v7);
    v12 = Set.description.getter(v11, &type metadata for MessagingAccount, v10);
    v14 = v13;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = sub_100016940(v12, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging accounts changed. Accounts: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB2A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_100AB2A30, v1, 0);
}

uint64_t sub_100AB2A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7B90);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 24);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = sub_100985328();
    swift_bridgeObjectRetain(v7);
    v12 = Set.description.getter(v11, &type metadata for MessagingDevice, v10);
    v14 = v13;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = sub_100016940(v12, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Messaging devices changed. Devices: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 24), 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB2C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101112230 + dword_101112230);
  v11 = (_QWORD *)swift_task_alloc(unk_101112234);
  *(_QWORD *)(v6 + 16) = v11;
  *v11 = v6;
  v11[1] = sub_100004A74;
  return v13(a3, a4, a5, a6);
}

uint64_t sub_100AB2CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = a6[1];
  v14 = a6[2];
  v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101112210 + dword_101112210);
  v15 = a6[3];
  v16 = *(unsigned __int8 *)a6;
  v17 = (_QWORD *)swift_task_alloc(unk_101112214);
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_100004A74;
  return v19(a3, a4, a5, v16, v13, v14, v15, a7, a8);
}

uint64_t sub_100AB2D5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_10111220C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[3] = a1;
  return swift_task_switch(sub_100AB2830, v4, 0);
}

uint64_t sub_100AB2DC0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_101112204);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[3] = a1;
  return swift_task_switch(sub_100AB2A30, v4, 0);
}

uint64_t sub_100AB2E24(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1011121E0, a2, (uint64_t (*)(uint64_t))type metadata accessor for PeerTrustService, (uint64_t)&unk_100E5ACF8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100AB2E60()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7BA8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7BA8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100E5AC50);
}

void sub_100AB2EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v37;
  _QWORD v38[5];
  void *v39;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_10098A998();
    v7 = sub_100006C64(&qword_1010FA140, 255, (uint64_t (*)(uint64_t))sub_10098A998, (uint64_t)&protocol conformance descriptor for NSObject);
    v8 = Set.Iterator.init(_cocoa:)(v38, v5, v6, v7);
    v3 = v38[0];
    v34 = v38[1];
    v9 = v38[2];
    v10 = v38[3];
    v11 = v38[4];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v13 = ~v12;
    v14 = -v12;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v9 = v13;
    v10 = 0;
  }
  v32 = v9;
  v33 = (unint64_t)(v9 + 64) >> 6;
  while (v3 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(v8);
    if (!v19)
      goto LABEL_40;
    v20 = v19;
    v37 = v19;
    v21 = sub_10098A998();
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v39, &v37, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v39;
    swift_unknownObjectRelease(v20);
    v17 = v11;
    if (!v22)
      goto LABEL_40;
LABEL_36:
    v27 = objc_msgSend(v22, "altDSID", v32);
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      if (v29 == a2 && v31 == a3)
      {
        swift_bridgeObjectRelease();
LABEL_40:
        sub_10007CC38(v3);
        return;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, a2, a3, 0);
      swift_bridgeObjectRelease();
      if ((v16 & 1) != 0)
        goto LABEL_40;
    }

    v11 = v17;
  }
  if (v11)
  {
    v17 = (v11 - 1) & v11;
    v18 = __clz(__rbit64(v11)) | (v10 << 6);
LABEL_35:
    v22 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v18);
    if (!v22)
      goto LABEL_40;
    goto LABEL_36;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v23 >= v33)
      goto LABEL_40;
    v24 = v10;
    v25 = *(_QWORD *)(v34 + 8 * v23);
    ++v10;
    if (!v25)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v33)
        goto LABEL_40;
      v25 = *(_QWORD *)(v34 + 8 * v10);
      if (!v25)
      {
        v10 = v23 + 2;
        if (v23 + 2 >= v33)
          goto LABEL_40;
        v25 = *(_QWORD *)(v34 + 8 * v10);
        if (!v25)
        {
          v10 = v23 + 3;
          if (v23 + 3 >= v33)
            goto LABEL_40;
          v25 = *(_QWORD *)(v34 + 8 * v10);
          if (!v25)
          {
            v10 = v23 + 4;
            if (v23 + 4 >= v33)
              goto LABEL_40;
            v25 = *(_QWORD *)(v34 + 8 * v10);
            if (!v25)
            {
              v26 = v24 + 6;
              while (v33 != v26)
              {
                v25 = *(_QWORD *)(v34 + 8 * v26++);
                if (v25)
                {
                  v10 = v26 - 1;
                  goto LABEL_34;
                }
              }
              goto LABEL_40;
            }
          }
        }
      }
    }
LABEL_34:
    v17 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v10 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_100AB3240(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1[3] = a1;
  v2 = type metadata accessor for PeerCommunicationIdentifier(0);
  v1[4] = v2;
  v1[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AB329C, 0, 0);
}

void sub_100AB329C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;

  v1 = v0[4];
  v2 = v0[5];
  sub_10005972C(v0[3], v2, type metadata accessor for PeerCommunicationIdentifier);
  v3 = (char *)sub_100AB32F8 + 4 * byte_100E5AC20[swift_getEnumCaseMultiPayload(v2, v1)];
  __asm { BR              X10 }
}

uint64_t sub_100AB32F8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  swift_bridgeObjectRelease();
  v1 = sub_100AB4600();
  v2 = swift_allocError(&type metadata for PeerTrustServiceError, v1, 0, 0);
  *v3 = 2;
  swift_willThrow(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB3378()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 **)(v0 + 40);
  v2 = *v1;
  v3 = *((_QWORD *)v1 + 1);
  v4 = *((_QWORD *)v1 + 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v2, v3, v4);
}

uint64_t sub_100AB33B4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_BYTE *)v1;
  *(_BYTE *)(v0 + 208) = *(_BYTE *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v0 + 48) = v3;
  v4 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v1 + 32);
  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v5 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_100AB34F4;
  return sub_100D8C77C(v2, v3, v4);
}

uint64_t sub_100AB34F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v4[11] = a1;
  v4[12] = a2;
  v4[13] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100AB3640;
  else
    v6 = sub_100AB3564;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100AB3564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 96);
  if (!v1)
  {
    v9 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
    swift_bridgeObjectRelease(v9);
    v7 = 0;
    v8 = 0;
    goto LABEL_11;
  }
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  if (v3 == v2 && v1 == v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
    swift_bridgeObjectRelease(v4);
    goto LABEL_10;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 72), v2, *(_QWORD *)(v0 + 96), 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v4);
  if ((v6 & 1) != 0)
  {
LABEL_10:
    v8 = *(_QWORD *)(v0 + 48);
    v1 = *(_QWORD *)(v0 + 56);
    v7 = *(unsigned __int8 *)(v0 + 208);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  v7 = 0;
  v8 = 0;
  v1 = 0;
LABEL_11:
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v7, v8, v1);
}

uint64_t sub_100AB3640()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB3688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = sub_100AB3A0C;
  }
  else
  {
    v3 = sub_100AB3714;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AB3714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(v1);
  sub_100AB2EE4(v3, v2, v1);
  v5 = v4;
  swift_bridgeObjectRelease_n(v1, 2);
  swift_bridgeObjectRelease();
  if (v5)
  {
    v6 = objc_msgSend(v5, "appleID");
    if (v6)
    {
      v7 = v6;
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v10 = v9;

      _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v8, v10);
      v12 = v11;
      v14 = v13;
      v16 = v15;

      if (v16)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc(*(_QWORD *)(v0 + 40));
        return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v0 + 8))(v12, v14, v16);
      }
    }
    else
    {

    }
  }
  if (qword_1010E9970 != -1)
    swift_once(&qword_1010E9970, sub_1000FC8FC);
  v18 = (_QWORD *)swift_task_alloc(dword_10111FCEC);
  *(_QWORD *)(v0 + 176) = v18;
  *v18 = v0;
  v18[1] = sub_100AB3884;
  return sub_100D8C77C(*(_BYTE *)(v0 + 209), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

uint64_t sub_100AB3884(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 176);
  v4[23] = a1;
  v4[24] = a2;
  v4[25] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100AB39C4;
  else
    v6 = sub_100AB38F4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100AB38F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 192);
  if (!v1)
  {
    v8 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 136));
    v7 = v8;
    goto LABEL_9;
  }
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 152);
  if (v3 == v2 && v1 == v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
    swift_bridgeObjectRelease(v1);
    goto LABEL_11;
  }
  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, *(_QWORD *)(v0 + 152), v2, *(_QWORD *)(v0 + 192), 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v1);
  if ((v6 & 1) != 0)
  {
LABEL_11:
    v10 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 136);
    v9 = *(unsigned __int8 *)(v0 + 209);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v0 + 136);
LABEL_9:
  swift_bridgeObjectRelease(v7);
  v9 = 0;
  v10 = 0;
  v11 = 0;
LABEL_12:
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v9, v10, v11);
}

uint64_t sub_100AB39C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB3A0C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB3A40()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  _QWORD v6[2];
  uint64_t v7;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v6[0] = 0x7365547265646E75;
  v6[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v7, v6, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    return 0;
  v1 = (void *)objc_opt_self(AKAccountManager);
  v2 = objc_msgSend(v1, "sharedInstance");
  v3 = objc_msgSend(v2, "primaryAuthKitAccount");

  if (!v3)
    return 1;
  v4 = objc_msgSend(v1, "sharedInstance");
  v0 = objc_msgSend(v4, "userUnderAgeForAccount:", v3);

  return (uint64_t)v0;
}

uint64_t sub_100AB3B74()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100AB3BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1011121F4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[3] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_101112064);
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_100AABB6C;
  return sub_100AABD84();
}

uint64_t sub_100AB3C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[6] = a3;
  v5[7] = a4;
  v5[5] = a1;
  v6 = type metadata accessor for UUID(0);
  v5[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[9] = v7;
  v5[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AB3C70, v4, 0);
}

uint64_t sub_100AB3C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  os_log_type_t type;
  uint64_t v22;
  uint64_t v23;

  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7B90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_bridgeObjectRetain_n(v5, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  if (v10)
  {
    v20 = *(_QWORD *)(v0 + 48);
    type = v9;
    v15 = swift_slowAlloc(32, -1);
    v22 = swift_slowAlloc(64, -1);
    v23 = v22;
    *(_DWORD *)v15 = 136446723;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    *(_QWORD *)(v0 + 16) = sub_100016940(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v14);
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    swift_bridgeObjectRetain(v13);
    *(_QWORD *)(v0 + 32) = sub_100016940(v20, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease_n(v13, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "Message %{public}s delivered successfully from %{private,mask.hash}s.", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    swift_bridgeObjectRelease_n(v13, 2);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB3F10(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  *(_QWORD *)(v9 + 104) = v13;
  *(_QWORD *)(v9 + 112) = v8;
  *(_QWORD *)(v9 + 88) = a7;
  *(_QWORD *)(v9 + 96) = a8;
  *(_QWORD *)(v9 + 72) = a5;
  *(_QWORD *)(v9 + 80) = a6;
  *(_BYTE *)(v9 + 144) = a4;
  *(_QWORD *)(v9 + 56) = a2;
  *(_QWORD *)(v9 + 64) = a3;
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 120) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v9 + 128) = v11;
  *(_QWORD *)(v9 + 136) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AB3F84, v8, 0);
}

uint64_t sub_100AB3F84()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v47 = v0 + 32;
  if (qword_1010EA160 != -1)
    swift_once(&qword_1010EA160, sub_100AABA90);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = sub_10001A9E8(*(_QWORD *)(v0 + 120), (uint64_t)qword_1011B7B90);
  sub_10001BBBC(v1, v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v1, v2);
  swift_bridgeObjectRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 72);
    v40 = *(_QWORD *)(v0 + 64);
    v41 = *(_QWORD *)(v0 + 56);
    v12 = *(_BYTE *)(v0 + 144);
    v45 = v4;
    v13 = swift_slowAlloc(32, -1);
    v43 = swift_slowAlloc(64, -1);
    v48 = v43;
    *(_DWORD *)v13 = 136446723;
    sub_10001BBBC(v10, v9);
    sub_1003B0B0C(v12, v11, v10, v9);
    v15 = v14;
    v17 = v16;
    sub_10001BC14(v10, v9);
    *(_QWORD *)(v0 + 32) = sub_100016940(v15, v17, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v47, v0 + 40, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(v10, v9);
    sub_10001BC14(v10, v9);
    *(_WORD *)(v13 + 12) = 2160;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    swift_bridgeObjectRetain(v40);
    *(_QWORD *)(v0 + 48) = sub_100016940(v41, v40, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease_n(v40, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Message %{public}s received from %{private,mask.hash}s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    v18 = v13;
    v4 = v45;
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 64);
    sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
    sub_10001BC14(v10, v9);
    swift_bridgeObjectRelease_n(v19, 2);
  }

  v20 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 16))(*(_QWORD *)(v0 + 136), v4, *(_QWORD *)(v0 + 120));
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v48 = v24;
    *(_DWORD *)v23 = 136315138;
    v25 = type metadata accessor for Transaction(0);
    result = static Transaction.current.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
    v42 = *(_QWORD *)(v0 + 128);
    v44 = *(_QWORD *)(v0 + 120);
    v46 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 16) = result;
    v27 = sub_100006C64(&qword_10110DE00, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Transaction, (uint64_t)&protocol conformance descriptor for Transaction);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v25, v27);
    v30 = v29;
    swift_release();
    *(_QWORD *)(v0 + 24) = sub_100016940(v28, v30, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v47, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "txn: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v46, v44);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD *)(v0 + 136);
    v33 = *(_QWORD *)(v0 + 120);

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 112) + 128))
  {
    v35 = *(_QWORD *)(v0 + 96);
    v34 = *(_QWORD *)(v0 + 104);
    v37 = *(_QWORD *)(v0 + 80);
    v36 = *(_QWORD *)(v0 + 88);
    v38 = *(_QWORD *)(v0 + 72);
    v39 = *(_BYTE *)(v0 + 144);
    swift_retain();
    sub_100C618CC(v39, v38, v37, v36, v35, v34);
    swift_release();
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AB4440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100AB44D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = *(_QWORD *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_10111221C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004C28;
  return sub_100AB14A8(a1, v6, v7, v8, v9);
}

uint64_t sub_100AB458C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

unint64_t sub_100AB4600()
{
  unint64_t result;

  result = qword_101112228;
  if (!qword_101112228)
  {
    result = swift_getWitnessTable(byte_100E5ADA0, &type metadata for PeerTrustServiceError);
    atomic_store(result, (unint64_t *)&qword_101112228);
  }
  return result;
}

void sub_100AB4644()
{
  uint64_t v0;

  sub_100ADE788(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100AB4660(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101112254);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100AB48D4;
  return sub_100AB0EA0(a1, v4, v5, v6);
}

uint64_t sub_100AB46C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_BYTE *)(v1 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_10111226C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100AB48D4;
  return sub_100AB0160(a1, v4, v7, v5, v6);
}

uint64_t sub_100AB4740(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10111227C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100067F58;
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = *a1;
  return swift_task_switch(sub_100AAE764, 0, 0);
}

uint64_t storeEnumTagSinglePayload for PeerTrustServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100AB4800 + 4 * byte_100E5AC2C[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100AB4834 + 4 * byte_100E5AC27[v4]))();
}

uint64_t sub_100AB4834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB483C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AB4844);
  return result;
}

uint64_t sub_100AB4850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AB4858);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100AB485C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB4864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PeerTrustServiceError()
{
  return &type metadata for PeerTrustServiceError;
}

unint64_t sub_100AB4884()
{
  unint64_t result;

  result = qword_101112298;
  if (!qword_101112298)
  {
    result = swift_getWitnessTable(aY_62, &type metadata for PeerTrustServiceError);
    atomic_store(result, (unint64_t *)&qword_101112298);
  }
  return result;
}

uint64_t sub_100AB48D8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1011124D0);
  v27 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1011124D8);
  v28 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1;
  swift_retain();
  v13 = sub_10001A9A8(&qword_1011124E0);
  v14 = sub_10001A9A8(&qword_1011124E8);
  v15 = sub_1000193A4(&qword_1011124F0, &qword_1011124E0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_100AB60D4, v2, v13, v14, v15);
  swift_release();
  v29 = *(id *)(v2 + 24);
  v16 = v29;
  v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v6, 1, 1, v17);
  v18 = sub_10001F6FC();
  v19 = sub_1000193A4(&qword_1011124F8, &qword_1011124D0, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v20 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v21 = v16;
  Publisher.receive<A>(on:options:)(&v29, v6, v7, v18, v19, v20);
  sub_100004048((uint64_t)v6, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
  v22 = swift_allocObject(&unk_1010A8810, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_100AB60DC;
  *(_QWORD *)(v22 + 24) = v2;
  v23 = sub_1000193A4(&qword_101112500, &qword_1011124D8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v24 = Publisher<>.sink(receiveValue:)(sub_100AB6108, v22, v10, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
  *(_QWORD *)(v2 + 40) = v24;
  return swift_release();
}

uint64_t sub_100AB4BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for BeaconKeyManager.KeyCriteria(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unownedRetainStrong(*(_QWORD *)(a2 + 48));
  v16 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0);
  sub_10005972C(a1 + *(int *)(v16 + 24), (uint64_t)v8, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_10080B950((uint64_t)v8, (uint64_t)v11);
  swift_release();
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v8, v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F47C0);
    v18 = sub_10001A9A8(&qword_1011124E8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a3, 1, 1, v18);
  }
  else
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    v20 = sub_10001A9A8(&qword_1011124E8);
    v21 = a3 + *(int *)(v20 + 48);
    sub_1000126EC((uint64_t)v15, a3, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C(a1, v21, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 0, 1, v20);
  }
}

uint64_t sub_100AB4DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[16];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = *(void **)(a3 + 24);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v13 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v13);
    *(_QWORD *)&v14[-32] = a3;
    *(_QWORD *)&v14[-24] = a1;
    *(_QWORD *)&v14[-16] = a2;
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.InstructionEventCoalescer.process", 63, 2, sub_100AB614C, &v14[-48], &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100AB4EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  int64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  _BYTE v86[24];
  char v87[24];
  char v88[32];

  v75 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v76 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_1011124C0);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v83 = (char *)&v70 - v7;
  v8 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v8 - 8);
  v81 = v8;
  v9 = __chkstk_darwin(v8);
  v78 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v70 - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (int64_t *)((char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)(v0 + 24);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  v19 = _dispatchPreconditionTest(_:)(v16);
  v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  v79 = v12;
  Date.init()(v20);
  v21 = (uint64_t *)(v0 + 56);
  swift_beginAccess(v0 + 56, v88, 0, 0);
  v22 = *(_QWORD *)(v0 + 56);
  v23 = *(_QWORD *)(v22 + 64);
  v71 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & v23;
  v72 = (unint64_t)(v24 + 63) >> 6;
  v70 = v72 - 1;
  v77 = v22;
  swift_bridgeObjectRetain(v22);
  v82 = 0;
  v74 = xmmword_100E22B00;
  v27 = v75;
  v28 = v76;
  v29 = (uint64_t)v83;
  v30 = v1;
  v31 = (uint64_t)v6;
  v73 = v30;
  if (!v26)
    goto LABEL_9;
LABEL_7:
  v32 = v21;
  v33 = v28;
  v34 = __clz(__rbit64(v26));
  v35 = (v26 - 1) & v26;
  v36 = v34 | (v82 << 6);
  while (2)
  {
    v37 = v77;
    v38 = v30;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16))(v31, *(_QWORD *)(v77 + 48) + *(_QWORD *)(v30 + 72) * v36, v27);
    v39 = *(_QWORD *)(v37 + 56);
    v40 = sub_10001A9A8(&qword_1011124C8);
    *(_QWORD *)(v31 + *(int *)(v40 + 48)) = *(_QWORD *)(v39 + 8 * v36);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v31, 0, 1, v40);
    swift_retain();
    v28 = v33;
    v21 = v32;
    v29 = (uint64_t)v83;
    while (1)
    {
      sub_100AB608C(v31, v29);
      v45 = sub_10001A9A8(&qword_1011124C8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v29, 1, v45) == 1)
      {
        swift_release();
        (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v81);
        return;
      }
      v84 = v35;
      v46 = v21;
      v47 = *(_QWORD *)(v29 + *(int *)(v45 + 48));
      v48 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v28, v29, v27);
      v49 = v47
          + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
      v50 = swift_beginAccess(v47+ OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp, v87, 0, 0);
      v51 = v28;
      v52 = v80;
      v53 = v81;
      v54 = v78;
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v80 + 16))(v78, v49, v81, v50);
      v55 = Date.timeIntervalSince(_:)(v54);
      v56 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v54, v53);
      if (v55 <= 60.0)
      {
        (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v27);
        swift_release();
        v30 = v48;
        v21 = v46;
        v28 = v51;
        v29 = (uint64_t)v83;
        v26 = v84;
        if (v84)
          goto LABEL_7;
      }
      else
      {
        v57 = static os_log_type_t.error.getter(v56);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        v58 = qword_1011B7D38;
        v59 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v60 = swift_allocObject(v59, 72, 7);
        *(_OWORD *)(v60 + 16) = v74;
        v61 = (uint64_t)v76;
        v62 = UUID.uuidString.getter(v60);
        v64 = v63;
        *(_QWORD *)(v60 + 56) = &type metadata for String;
        *(_QWORD *)(v60 + 64) = sub_10001AA00();
        *(_QWORD *)(v60 + 32) = v62;
        *(_QWORD *)(v60 + 40) = v64;
        os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "Purging expired unmatched events for %@", 39, 2, v60);
        swift_bridgeObjectRelease();
        v21 = v46;
        swift_beginAccess(v46, v86, 33, 0);
        swift_bridgeObjectRetain(*v46);
        v65 = sub_100003FB0(v61);
        LOBYTE(v64) = v66;
        swift_bridgeObjectRelease();
        v27 = v75;
        v30 = v73;
        if ((v64 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v46);
          v68 = *v46;
          v85 = *v46;
          *v46 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100AA1C6C();
            v68 = v85;
          }
          (*(void (**)(unint64_t, uint64_t))(v30 + 8))(*(_QWORD *)(v68 + 48) + *(_QWORD *)(v30 + 72) * v65, v27);
          v69 = v85;
          sub_100106AF0(v65, v85);
          *v46 = v69;
          swift_release();
          v21 = v46;
          swift_bridgeObjectRelease();
          v61 = (uint64_t)v76;
        }
        swift_endAccess(v86);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v61, v27);
        v29 = (uint64_t)v83;
        v26 = v84;
        v28 = (char *)v61;
        if (v84)
          goto LABEL_7;
      }
LABEL_9:
      v41 = v82 + 1;
      if (__OFADD__(v82, 1))
      {
        __break(1u);
        goto LABEL_39;
      }
      if (v41 < v72)
      {
        v42 = *(_QWORD *)(v71 + 8 * v41);
        if (v42)
          goto LABEL_12;
        v43 = v82 + 2;
        ++v82;
        if (v41 + 1 < v72)
        {
          v42 = *(_QWORD *)(v71 + 8 * v43);
          if (v42)
            goto LABEL_15;
          v82 = v41 + 1;
          if (v41 + 2 < v72)
          {
            v42 = *(_QWORD *)(v71 + 8 * (v41 + 2));
            if (v42)
            {
              v41 += 2;
              goto LABEL_12;
            }
            v43 = v41 + 3;
            v82 = v41 + 2;
            if (v41 + 3 < v72)
              break;
          }
        }
      }
LABEL_26:
      v38 = v30;
      v44 = sub_10001A9A8(&qword_1011124C8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v31, 1, 1, v44);
      v35 = 0;
    }
    v42 = *(_QWORD *)(v71 + 8 * v43);
    if (v42)
    {
LABEL_15:
      v41 = v43;
LABEL_12:
      v32 = v21;
      v33 = v28;
      v35 = (v42 - 1) & v42;
      v36 = __clz(__rbit64(v42)) + (v41 << 6);
      v82 = v41;
      continue;
    }
    break;
  }
  while (1)
  {
    v41 = v43 + 1;
    if (__OFADD__(v43, 1))
      break;
    if (v41 >= v72)
    {
      v82 = v70;
      goto LABEL_26;
    }
    v42 = *(_QWORD *)(v71 + 8 * v41);
    ++v43;
    if (v42)
      goto LABEL_12;
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_100AB5650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void (*v35)(char *);
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD aBlock[6];
  uint64_t v81[3];
  char v82[32];
  _QWORD *v83;

  v76 = a4;
  v68 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v73 = *(_QWORD *)(v6 - 8);
  v74 = v6;
  __chkstk_darwin(v6);
  v72 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  v65 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v66 = v10;
  v67 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v75 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v62 - v19;
  v21 = *(int *)(v9 + 20);
  v77 = a3;
  v22 = a3 + v21;
  v23 = *(void (**)(char *))(v15 + 16);
  v79 = v22;
  v23((char *)&v62 - v19);
  v24 = (_QWORD *)(a2 + 56);
  swift_beginAccess(a2 + 56, v82, 0, 0);
  v78 = a2;
  v25 = *(_QWORD *)(a2 + 56);
  v26 = *(_QWORD *)(v25 + 16);
  swift_bridgeObjectRetain(v25);
  if (v26 && (v27 = sub_100003FB0((uint64_t)v20), (v28 & 1) != 0))
  {
    v29 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v27);
    swift_retain();
    v30 = (_QWORD *)&unk_101112000;
  }
  else
  {
    v31 = type metadata accessor for InstructionEventCoalescer.BufferRecord(0);
    v32 = swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
    v64 = v14;
    v33 = v15;
    v63 = v18;
    v34 = v24;
    v35 = v23;
    v36 = v11;
    v29 = v32;
    v37 = v75;
    Date.init()(v32);
    v38 = v37;
    v39 = v36;
    v23 = v35;
    v24 = v34;
    v18 = v63;
    v15 = v33;
    v14 = v64;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v29+ OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp, v38, v39);
    v30 = &unk_101112000;
    *(_QWORD *)(v29
              + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list) = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v40 = *(void (**)(char *, uint64_t))(v15 + 8);
  v40(v20, v14);
  sub_100AB5D18(v76);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v18, v79, v14);
  swift_beginAccess(v24, aBlock, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
  v81[0] = *v24;
  *v24 = 0x8000000000000000;
  sub_10010E578(v29, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  *v24 = v81[0];
  swift_bridgeObjectRelease();
  v40(v18, v14);
  swift_endAccess(aBlock);
  v42 = (_QWORD *)(v29 + v30[121]);
  swift_beginAccess(v42, v81, 0, 0);
  swift_bridgeObjectRetain(*v42);
  v43 = v77;
  v45 = sub_100AB6440(v44);
  swift_bridgeObjectRelease();
  v46 = v78;
  if ((v45 & 1) != 0)
  {
    v76 = *(_QWORD *)(v78 + 32);
    v47 = v67;
    sub_10005972C(v43, v67, type metadata accessor for OwnedBeaconRecord);
    v48 = *(unsigned __int8 *)(v65 + 80);
    v49 = (v48 + 24) & ~v48;
    v50 = (v66 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    v51 = swift_allocObject(&unk_1010A8838, v50 + 8, v48 | 7);
    *(_QWORD *)(v51 + 16) = v68;
    sub_1000126EC(v47, v51 + v49, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v51 + v50) = v46;
    aBlock[4] = sub_100AB6B04;
    aBlock[5] = v51;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010A8850;
    v52 = _Block_copy(aBlock);
    swift_retain();
    v53 = swift_retain();
    v54 = v69;
    static DispatchQoS.unspecified.getter(v53);
    v83 = _swiftEmptyArrayStorage;
    v55 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v56 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v57 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v58 = v72;
    v59 = v56;
    v60 = v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v83, v59, v57, v74, v55);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v54, v58, v52);
    _Block_release(v52);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v58, v60);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v54, v71);
    swift_release();
    swift_beginAccess(v24, aBlock, 33, 0);
    sub_100104438(v79);
    swift_endAccess(aBlock);
    swift_release();
  }
  sub_100AB4EF4();
  return swift_release();
}

uint64_t sub_100AB5C08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Transaction.capture()();
  v4 = static os_log_type_t.default.getter(v3);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v5 = qword_1011B7D38;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = UUID.uuidString.getter(v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Publishing InstructionEventCoalescer event for %@", 49, 2, v7);
  swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)(a2);
}

uint64_t sub_100AB5D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  __n128 v13;
  unint64_t *v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _BYTE v21[24];

  v3 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  Date.init()(v9);
  v12 = v1
      + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
  v13 = swift_beginAccess(v1+ OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp, v21, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t, __n128))(v8 + 40))(v12, v11, v7, v13);
  swift_endAccess(v21);
  sub_10005972C(a1, (uint64_t)v6, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  v14 = (unint64_t *)(v1
                           + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list);
  swift_beginAccess(v14, v21, 33, 0);
  v15 = *v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_1007CA834(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *v14 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_1007CA834(v17 > 1, v18 + 1, 1, v15);
    *v14 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  sub_1000126EC((uint64_t)v6, v15+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v18, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  return swift_endAccess(v21);
}

uint64_t sub_100AB5EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0
     + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_timestamp;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC12searchpartyd25InstructionEventCoalescerP33_3B6F52EF81004A05C130335557FA073612BufferRecord_list));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100AB5F44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_unownedRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return v0;
}

uint64_t sub_100AB5F90()
{
  uint64_t v0;

  sub_100AB5F44();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for InstructionEventCoalescer()
{
  return objc_opt_self(_TtC12searchpartyd25InstructionEventCoalescer);
}

uint64_t sub_100AB5FD0()
{
  return type metadata accessor for InstructionEventCoalescer.BufferRecord(0);
}

uint64_t type metadata accessor for InstructionEventCoalescer.BufferRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1011123F8;
  if (!qword_1011123F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InstructionEventCoalescer.BufferRecord);
  return result;
}

uint64_t sub_100AB6014(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100AB608C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1011124C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AB60D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100AB4BB0(a1, v2, a2);
}

uint64_t sub_100AB60DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100AB4DC4(a1, a2, v2);
}

uint64_t sub_100AB60E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AB6108(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  v4 = sub_10001A9A8(&qword_1011124E8);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_100AB614C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100AB5650(a1, v1[2], v1[3], v1[4]);
}

_QWORD *sub_100AB6168(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unsigned int v20;
  void (*v21)(char *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v25 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v6 = *(_QWORD *)(v5 - 8);
  v22 = v5;
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_101112508);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v23 = PassthroughSubject.init()();
  v1[2] = v23;
  v19 = sub_10001F6FC();
  static DispatchQoS.default.getter(v19);
  v20 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v21 = *(void (**)(char *))(v6 + 104);
  v21(v8);
  v26 = _swiftEmptyArrayStorage;
  v12 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v14 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v13, v14, v2, v12);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000033, 0x8000000100EED560, v11, v4, v8, 0);
  v1[3] = v15;
  static DispatchQoS.default.getter(v15);
  ((void (*)(char *, _QWORD, uint64_t))v21)(v8, v20, v22);
  v26 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v13, v14, v2, v12);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000032, 0x8000000100EED5A0, v11, v4, v8, 0);
  v1[5] = 0;
  v16 = v25;
  v1[6] = v25;
  v1[7] = _swiftEmptyDictionarySingleton;
  v26 = (_QWORD *)v23;
  swift_unownedRetain(v16);
  v17 = sub_1000193A4(&qword_101112510, &qword_101112508, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v1[8] = Publisher.eraseToAnyPublisher()(v24, v17);
  return v1;
}

uint64_t sub_100AB6440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  int v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  uint64_t v32;

  v2 = type metadata accessor for BeaconKeyManager.KeyCriteria(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconKeyManager.PersistenceInstruction(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v32 - v10;
  type metadata accessor for OwnedBeaconRecord(0);
  if ((sub_100C6F9A8() & 1) == 0)
  {
    v19 = sub_1009FA01C();
    v20 = *(_QWORD *)(a1 + 16);
    if ((v19 & 1) != 0)
    {
      if (v20 != 2)
        return 0;
      v21 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v22 = *(_QWORD *)(v6 + 72);
      swift_bridgeObjectRetain(a1);
      sub_10005972C(v21, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      v23 = v9[48];
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if (v23 != 1)
      {
        sub_10005972C(v21 + v22, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        v30 = v9[48];
        sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
        swift_bridgeObjectRelease();
        return ((v30 | v23) & 1) != 0;
      }
      sub_10005972C(v21 + v22, (uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      v24 = v9[48];
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
      if ((v24 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      if (v20 != 1)
        return 0;
      v25 = *(int *)(v2 + 20);
      if (*(_BYTE *)(a1
                    + *(int *)(v5 + 24)
                    + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                    + v25))
      {
        if (*(_BYTE *)(a1
                      + *(int *)(v5 + 24)
                      + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                      + v25) == 1)
        {
          v26 = 0xE900000000000079;
          v27 = 0x7261646E6F636553;
        }
        else
        {
          v26 = 0xEF736E6F69746163;
          v27 = 0x6F4C657275636553;
        }
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, 0x7972616D697250, 0xE700000000000000, 0);
        swift_bridgeObjectRelease();
        return (v29 & 1) != 0;
      }
    }
    swift_bridgeObjectRelease();
    return 1;
  }
  if (*(_QWORD *)(a1 + 16) != 2)
    return 0;
  v12 = (uint64_t)&v11[*(int *)(v5 + 24)];
  v13 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v14 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain(a1);
  sub_10005972C(v13, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  sub_10005972C(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  v15 = v4[*(int *)(v2 + 20)];
  sub_1000126B0((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  v16 = 0;
  if (v15)
  {
    if (v15 != 1)
      goto LABEL_7;
    sub_10005972C(v13 + v14, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    sub_10005972C(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
    sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
    v17 = v4[*(int *)(v2 + 20)];
    sub_1000126B0((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
    v16 = 1;
    if (v17)
    {
      if (v17 != 1)
      {
LABEL_7:
        v18 = 0;
        if ((v16 & 1) != 0)
          goto LABEL_22;
        goto LABEL_20;
      }
LABEL_13:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if ((v16 & 1) != 0)
    goto LABEL_25;
  v18 = 1;
LABEL_20:
  sub_10005972C(v13 + v14, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  sub_10005972C(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  v28 = v4[*(int *)(v2 + 20)];
  sub_1000126B0((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  if (!v28)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (v16 & 1) != 0;
  }
  if (v28 == 2)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return v18 && (v16 & 1) != 0;
  }
  swift_bridgeObjectRelease();
  return (v18 & 1) != 0;
}

uint64_t sub_100AB6850()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100AB6B04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100AB5C08(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100AB6B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AB6B54);
}

uint64_t sub_100AB6B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100AB6BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AB6BF0);
}

uint64_t sub_100AB6BF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 32), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AirPodsSWPairingLockCheckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_101112570;
  if (!qword_101112570)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsSWPairingLockCheckResponse);
  return result;
}

uint64_t sub_100AB6CAC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_100E5AE98;
  v4[1] = &unk_100E5AE98;
  v4[2] = &unk_100E5AE98;
  v4[3] = &unk_100E5AE98;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_100E5AEB0;
    v4[6] = &unk_100E5AEC8;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100AB6D44(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AB6D80
                                                            + 4 * asc_100E5AE50[a1]))(0x754E6C6169726573, 0xEC0000007265626DLL);
}

uint64_t sub_100AB6D80()
{
  return 0x6169726553746C61;
}

uint64_t sub_100AB6DA4()
{
  return 0x5364656573;
}

uint64_t sub_100AB6DB8()
{
  return 0x6953726576726573;
}

uint64_t sub_100AB6DD4()
{
  return 0x6449616E6D66;
}

uint64_t sub_100AB6DE8()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_100AB6E0C()
{
  return 0xD000000000000013;
}

uint64_t sub_100AB6E28(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AB6E64 + 4 * byte_100E5AE57[a1]))(0x754E6C6169726573, 0xEC0000007265626DLL);
}

uint64_t sub_100AB6E64()
{
  return 0x6169726553746C61;
}

uint64_t sub_100AB6E88()
{
  return 0x5364656573;
}

uint64_t sub_100AB6E9C()
{
  return 0x6953726576726573;
}

uint64_t sub_100AB6EB8()
{
  return 0x6449616E6D66;
}

uint64_t sub_100AB6ECC()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_100AB6EF0()
{
  return 0xD000000000000013;
}

uint64_t sub_100AB6F0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD v32[2];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  char v42;

  v35 = a2;
  v36 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v5 = (_QWORD *)((char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_10001A9A8(&qword_1011125C0);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12[*(int *)(v10 + 44)] = 0;
  v13 = a1[3];
  v14 = a1[4];
  v39 = a1;
  sub_10001AA44(a1, v13);
  v15 = sub_100AB749C();
  v37 = v8;
  v16 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys, &type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys, v15, v13, v14);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  v33 = v5;
  v34 = v3;
  v17 = v6;
  v40 = v9;
  v18 = v12;
  v42 = 0;
  v19 = sub_100036994();
  v20 = v37;
  v21 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v38, &type metadata for Data, v19);
  v22 = *((_QWORD *)&v41 + 1);
  *(_QWORD *)v18 = v41;
  *((_QWORD *)v18 + 1) = v22;
  v42 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v21, &type metadata for Data, v19);
  *((_OWORD *)v18 + 1) = v41;
  v42 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v21, &type metadata for Data, v19);
  *((_OWORD *)v18 + 2) = v41;
  v42 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v21, &type metadata for Data, v19);
  v23 = (uint64_t)v18;
  *((_OWORD *)v18 + 3) = v41;
  LOBYTE(v41) = 4;
  v24 = sub_100252A08();
  v25 = v33;
  v26 = v36;
  v32[1] = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v36, &v41, v21, v36, v24);
  v27 = v40;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v34 + 32))(v23 + *(int *)(v40 + 32), v25, v26);
  LOBYTE(v41) = 5;
  v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v41, v21);
  v29 = (uint64_t *)(v23 + *(int *)(v27 + 36));
  *v29 = v28;
  v29[1] = v30;
  v42 = 6;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v42, v21, &type metadata for Data, v19);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v21);
  *(_OWORD *)(v23 + *(int *)(v27 + 40)) = v41;
  sub_100AB74E0(v23, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  return sub_100AB7524(v23);
}

unint64_t sub_100AB73B8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100AB7704(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AB73E4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100AB6D44(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100AB740C()
{
  unsigned __int8 *v0;

  return sub_100AB6E28(*v0);
}

unint64_t sub_100AB7414@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100AB7704(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AB7438(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AB749C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AB7460(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AB749C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AB7488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AB6F0C(a1, a2);
}

unint64_t sub_100AB749C()
{
  unint64_t result;

  result = qword_1011125C8;
  if (!qword_1011125C8)
  {
    result = swift_getWitnessTable(byte_100E5B014, &type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011125C8);
  }
  return result;
}

uint64_t sub_100AB74E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AB7524(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockCheckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100AB75AC + 4 * byte_100E5AE63[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100AB75E0 + 4 * byte_100E5AE5E[v4]))();
}

uint64_t sub_100AB75E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB75E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AB75F0);
  return result;
}

uint64_t sub_100AB75FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AB7604);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100AB7608(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB7610(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100AB7630()
{
  unint64_t result;

  result = qword_1011125D0;
  if (!qword_1011125D0)
  {
    result = swift_getWitnessTable(byte_100E5AFEC, &type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011125D0);
  }
  return result;
}

unint64_t sub_100AB7678()
{
  unint64_t result;

  result = qword_1011125D8;
  if (!qword_1011125D8)
  {
    result = swift_getWitnessTable(byte_100E5AF24, &type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011125D8);
  }
  return result;
}

unint64_t sub_100AB76C0()
{
  unint64_t result;

  result = qword_1011125E0;
  if (!qword_1011125E0)
  {
    result = swift_getWitnessTable(byte_100E5AF4C, &type metadata for AirPodsSWPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011125E0);
  }
  return result;
}

unint64_t sub_100AB7704(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D728, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

void sub_100AB774C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  void (*v24)(char *, char *, uint64_t);
  id v25;
  NSString v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  unint64_t v33;
  _BYTE *v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  NSString v45;
  id v46;
  NSString v47;
  id v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  _QWORD v58[5];
  uint64_t v59;
  unint64_t v60;
  int v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  id v68;

  v63 = a2;
  v3 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v3);
  v65 = (uint64_t)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = CKRecord.recordType.getter(v10);
  if (v13 == 0x65507265626D654DLL && v14 == 0xEF74737572547265)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0x65507265626D654DLL, 0xEF74737572547265, 0);
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v33 = sub_100AB8FE8();
      v22 = swift_allocError(&type metadata for MemberPeerTrust.ConversionError, v33, 0, 0);
      *v34 = 0;
      goto LABEL_17;
    }
  }
  v16 = objc_msgSend(a1, "recordID");
  v17 = objc_msgSend(v16, "recordName");

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  UUID.init(uuidString:)(v18, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v24(v12, v7, v8);
    v25 = objc_msgSend(a1, "encryptedValues");
    v26 = String._bridgeToObjectiveC()();
    v27 = objc_msgSend(v25, "objectForKeyedSubscript:", v26);

    if (v27)
    {
      v66 = (uint64_t)v27;
      v28 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0);
      if ((swift_dynamicCast(&v68, &v66, v28, &type metadata for Int, 6) & 1) != 0)
      {
        if (!v68)
        {
          v62 = v24;
          v61 = 0;
LABEL_20:
          v35 = String._bridgeToObjectiveC()();
          v36 = objc_msgSend(v25, "objectForKeyedSubscript:", v35);

          if (v36)
          {
            v68 = v36;
            if ((swift_dynamicCast(&v66, &v68, v28, &type metadata for Data, 6) & 1) != 0)
            {
              v37 = v66;
              v60 = v67;
              v38 = type metadata accessor for PropertyListDecoder(0);
              swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
              v39 = PropertyListDecoder.init()();
              v40 = sub_100006204((unint64_t *)&unk_101112610, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C060);
              v41 = v64;
              v59 = v37;
              v42 = v37;
              v43 = v60;
              dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v3, v42, v60, v3, v40);
              if (!v41)
              {
                swift_release(v39);
                v45 = String._bridgeToObjectiveC()();
                v46 = objc_msgSend(v25, "objectForKeyedSubscript:", v45);

                if (v46 && (v68 = v46, (swift_dynamicCast(&v66, &v68, v28, &type metadata for String, 6) & 1) != 0))
                {
                  v58[4] = v66;
                  v64 = v67;
                  v47 = String._bridgeToObjectiveC()();
                  v48 = objc_msgSend(v25, "objectForKeyedSubscript:", v47);

                  if (v48)
                  {
                    v68 = v48;
                    v49 = swift_dynamicCast(&v66, &v68, v28, &type metadata for Data, 6);
                    v50 = v65;
                    if ((v49 & 1) != 0)
                      __asm { BR              X10 }
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    v50 = v65;
                  }
                  v54 = v59;
                  v55 = sub_100AB8FE8();
                  v56 = swift_allocError(&type metadata for MemberPeerTrust.ConversionError, v55, 0, 0);
                  *v57 = 5;
                  swift_willThrow(v56);
                  sub_10001BC14(v54, v60);
                  swift_unknownObjectRelease(v25);

                  sub_1000126B0(v50, type metadata accessor for PeerCommunicationIdentifier);
                }
                else
                {
                  v51 = sub_100AB8FE8();
                  v52 = swift_allocError(&type metadata for MemberPeerTrust.ConversionError, v51, 0, 0);
                  *v53 = 4;
                  swift_willThrow(v52);
                  sub_10001BC14(v59, v60);
                  swift_unknownObjectRelease(v25);

                  sub_1000126B0(v65, type metadata accessor for PeerCommunicationIdentifier);
                }
                goto LABEL_15;
              }
              swift_release(v39);
              swift_unknownObjectRelease(v25);
              sub_10001BC14(v59, v43);
LABEL_14:

LABEL_15:
              (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
              return;
            }
          }
          v44 = sub_100AB8FE8();
          v30 = swift_allocError(&type metadata for MemberPeerTrust.ConversionError, v44, 0, 0);
          v32 = 3;
LABEL_13:
          *v31 = v32;
          swift_willThrow(v30);
          swift_unknownObjectRelease(v25);
          goto LABEL_14;
        }
        if (v68 == (id)1)
        {
          v62 = v24;
          v61 = 1;
          goto LABEL_20;
        }
      }
    }
    v29 = sub_100AB8FE8();
    v30 = swift_allocError(&type metadata for MemberPeerTrust.ConversionError, v29, 0, 0);
    v32 = 2;
    goto LABEL_13;
  }
  sub_1001C0844((uint64_t)v7);
  v21 = sub_100AB8FE8();
  v22 = swift_allocError(&type metadata for MemberPeerTrust.ConversionError, v21, 0, 0);
  *v23 = 1;
LABEL_17:
  swift_willThrow(v22);

}

uint64_t sub_100AB7F90(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100AB7FC8 + 4 * byte_100E5B068[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100AB7FC8()
{
  return 0x696669746E656469;
}

uint64_t sub_100AB7FE4()
{
  return 1701869940;
}

uint64_t sub_100AB7FF4(uint64_t a1)
{
  return a1 + 8;
}

Swift::Int sub_100AB802C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[9];

  v1 = v0;
  Hasher.init(_seed:)(v14);
  v2 = *v0;
  v3 = v1[1];
  sub_10001BBBC(v2, v3);
  Data.hash(into:)(v14, v2, v3);
  sub_10001BC14(v2, v3);
  v4 = (int *)type metadata accessor for MemberPeerTrust(0);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v14, v5, v6);
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v4[6]));
  sub_100728C18();
  v7 = (uint64_t *)((char *)v1 + v4[8]);
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v14, v8, v9);
  swift_bridgeObjectRelease();
  v10 = (uint64_t *)((char *)v1 + v4[9]);
  v11 = *v10;
  v12 = v10[1];
  sub_10001BBBC(*v10, v12);
  Data.hash(into:)(v14, v11, v12);
  sub_10001BC14(v11, v12);
  return Hasher._finalize()();
}

uint64_t sub_100AB8168()
{
  unsigned __int8 *v0;

  return sub_100AB7F90(*v0);
}

uint64_t sub_100AB8170@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100ABA120(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AB8194(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AB902C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AB81BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AB902C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AB81E8(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  v4 = v2;
  v6 = *v2;
  v7 = v4[1];
  sub_10001BBBC(v6, v7);
  Data.hash(into:)(a1, v6, v7);
  sub_10001BC14(v6, v7);
  v8 = type metadata accessor for UUID(0);
  v9 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[6]));
  sub_100728C18();
  v10 = (uint64_t *)((char *)v4 + a2[8]);
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease();
  v13 = (uint64_t *)((char *)v4 + a2[9]);
  v14 = *v13;
  v15 = v13[1];
  sub_10001BBBC(*v13, v15);
  Data.hash(into:)(a1, v14, v15);
  return sub_10001BC14(v14, v15);
}

Swift::Int sub_100AB8308(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[9];

  v4 = v2;
  Hasher.init(_seed:)(v16);
  v5 = *v2;
  v6 = v4[1];
  sub_10001BBBC(v5, v6);
  Data.hash(into:)(v16, v5, v6);
  sub_10001BC14(v5, v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v16, v7, v8);
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[6]));
  sub_100728C18();
  v9 = (uint64_t *)((char *)v4 + a2[8]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(v16, v10, v11);
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)((char *)v4 + a2[9]);
  v13 = *v12;
  v14 = v12[1];
  sub_10001BBBC(*v12, v14);
  Data.hash(into:)(v16, v13, v14);
  sub_10001BC14(v13, v14);
  return Hasher._finalize()();
}

uint64_t sub_100AB843C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7BC0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7BC0);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x65507265626D654DLL, 0xEF74737572547265, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100AB8514(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;

  v2 = v1;
  v3 = *a1;
  v4 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v4);
  v6 = static os_log_type_t.debug.getter(ObjectType);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v7 = qword_1011B7D40;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = v3;
  v11 = objc_msgSend(v10, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Updating MemberPeerTrust record: %@", 35, 2, v9);
  swift_bridgeObjectRelease();
  v15 = (int *)type metadata accessor for MemberPeerTrust(0);
  v16 = *(unsigned __int8 *)(v2 + v15[6]);
  v34 = &type metadata for Int;
  v35 = &protocol witness table for Int;
  v32 = v16;
  CKRecordKeyValueSetting.subscript.setter(&v32, 0x7375725472656570, 0xED00006570795474, ObjectType);
  v17 = type metadata accessor for PropertyListEncoder(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  PropertyListEncoder.init()(v18);
  v19 = v2 + v15[7];
  v20 = type metadata accessor for PeerCommunicationIdentifier(0);
  v21 = sub_100006204(&qword_1010F29B8, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C0B0);
  v22 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v19, v20, v21);
  v24 = v23;
  swift_release();
  v34 = &type metadata for Data;
  v35 = &protocol witness table for Data;
  v32 = v22;
  v33 = v24;
  CKRecordKeyValueSetting.subscript.setter(&v32, 0xD000000000000018, 0x8000000100ECB8B0, ObjectType);
  v25 = (uint64_t *)(v2 + v15[8]);
  v27 = *v25;
  v26 = v25[1];
  v34 = &type metadata for String;
  v35 = &protocol witness table for String;
  v32 = v27;
  v33 = v26;
  swift_bridgeObjectRetain(v26);
  CKRecordKeyValueSetting.subscript.setter(&v32, 0xD000000000000011, 0x8000000100ECB8D0, ObjectType);
  v28 = (uint64_t *)(v2 + v15[9]);
  v29 = *v28;
  v30 = v28[1];
  v34 = &type metadata for Data;
  v35 = &protocol witness table for Data;
  v32 = v29;
  v33 = v30;
  sub_10001BBBC(v29, v30);
  CKRecordKeyValueSetting.subscript.setter(&v32, 0xD000000000000015, 0x8000000100ECB8F0, ObjectType);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_100AB8820(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101112630);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100AB902C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MemberPeerTrust.CodingKeys, &type metadata for MemberPeerTrust.CodingKeys, v11, v9, v10);
  v28 = *v3;
  v27 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for MemberPeerTrust(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v28) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v28, v5, v15, v16);
    LOBYTE(v28) = *((_BYTE *)v3 + v13[6]);
    v27 = 2;
    v17 = sub_1001EC474();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for PeerTrustType, v17);
    v18 = (char *)v3 + v13[7];
    LOBYTE(v28) = 3;
    v19 = type metadata accessor for PeerCommunicationIdentifier(0);
    v20 = sub_100006204(&qword_1010F29B8, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C0B0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v28, v5, v19, v20);
    v21 = (uint64_t *)((char *)v3 + v13[8]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v28) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v28, v5);
    v28 = *(_OWORD *)((char *)v3 + v13[9]);
    v27 = 5;
    v24 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v5, &type metadata for SharedSecretKey, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100AB8AA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  char v38;

  v29 = a2;
  v30 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v30);
  v31 = (uint64_t *)((char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_10001A9A8(&qword_101112620);
  v7 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for MemberPeerTrust(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  v35 = a1;
  sub_10001AA44(a1, v13);
  v15 = sub_100AB902C();
  v33 = v9;
  v16 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MemberPeerTrust.CodingKeys, &type metadata for MemberPeerTrust.CodingKeys, v15, v13, v14);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  v36 = v7;
  v17 = v32;
  v38 = 0;
  v18 = sub_100036994();
  v19 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for Data, &v38, v34, &type metadata for Data, v18);
  *(_OWORD *)v12 = v37;
  LOBYTE(v37) = 1;
  v20 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v17, &v37, v34, v17, v20);
  (*(void (**)(char *, _QWORD *, uint64_t))(v4 + 32))(&v12[v10[5]], v6, v17);
  v38 = 2;
  v21 = sub_1001EC320();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for PeerTrustType, &v38, v34, &type metadata for PeerTrustType, v21);
  v12[v10[6]] = v37;
  LOBYTE(v37) = 3;
  v22 = sub_100006204((unint64_t *)&unk_101112610, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C060);
  v23 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v30, &v37, v34, v30, v22);
  sub_1001EC364((uint64_t)v23, (uint64_t)&v12[v10[7]]);
  LOBYTE(v37) = 4;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v37, v34);
  v25 = (uint64_t *)&v12[v10[8]];
  *v25 = v24;
  v25[1] = v26;
  v38 = 5;
  v27 = sub_1001EC3A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for SharedSecretKey, &v38, v34, &type metadata for SharedSecretKey, v27);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v34);
  *(_OWORD *)&v12[v10[9]] = v37;
  sub_100AB9070((uint64_t)v12, v29);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  return sub_1000126B0((uint64_t)v12, type metadata accessor for MemberPeerTrust);
}

uint64_t sub_100AB8F28@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AB8AA8(a1, a2);
}

uint64_t sub_100AB8F3C(_QWORD *a1)
{
  return sub_100AB8820(a1);
}

uint64_t sub_100AB8F50(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204((unint64_t *)&unk_1011125F0, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B0C8);
  result = sub_100006204(&qword_101108108, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B0A0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100AB8FAC(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204((unint64_t *)&unk_101108110, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B0F0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100AB8FE8()
{
  unint64_t result;

  result = qword_101112600;
  if (!qword_101112600)
  {
    result = swift_getWitnessTable(byte_100E5B378, &type metadata for MemberPeerTrust.ConversionError);
    atomic_store(result, (unint64_t *)&qword_101112600);
  }
  return result;
}

unint64_t sub_100AB902C()
{
  unint64_t result;

  result = qword_101112628;
  if (!qword_101112628)
  {
    result = swift_getWitnessTable(byte_100E5B328, &type metadata for MemberPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112628);
  }
  return result;
}

uint64_t sub_100AB9070(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MemberPeerTrust(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AB90B4(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for MemberPeerTrust(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0)
    return 0;
  if (*((unsigned __int8 *)a1 + v5[6]) != *(unsigned __int8 *)(a2 + v5[6]))
    return 0;
  sub_10072AC1C((uint64_t)a1 + v5[7], a2 + v5[7]);
  if ((v6 & 1) == 0)
    return 0;
  v7 = v5[8];
  v8 = *(uint64_t *)((char *)a1 + v7);
  v9 = *(uint64_t *)((char *)a1 + v7 + 8);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  v12 = v8 == *v10 && v9 == v11;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *v10, v11, 0) & 1) == 0)
    return 0;
  v13 = v5[9];
  v14 = (char *)a1 + v13;
  v15 = *(uint64_t *)((char *)a1 + v13);
  v16 = *((_QWORD *)v14 + 1);
  v17 = (uint64_t *)(a2 + v13);
  v18 = *v17;
  v19 = v17[1];
  sub_10001BBBC(v15, v16);
  sub_10001BBBC(v18, v19);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v15, v16);
  v21 = v20;
  sub_10001BC14(v18, v19);
  sub_10001BC14(v15, v16);
  return v21 & 1;
}

uint64_t storeEnumTagSinglePayload for MemberPeerTrust.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100AB9220 + 4 * byte_100E5B078[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100AB9254 + 4 * byte_100E5B073[v4]))();
}

uint64_t sub_100AB9254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB925C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AB9264);
  return result;
}

uint64_t sub_100AB9270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AB9278);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100AB927C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB9284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MemberPeerTrust.CodingKeys()
{
  return &type metadata for MemberPeerTrust.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for MemberPeerTrust.ConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100AB92EC + 4 * byte_100E5B082[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100AB9320 + 4 * byte_100E5B07D[v4]))();
}

uint64_t sub_100AB9320(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB9328(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AB9330);
  return result;
}

uint64_t sub_100AB933C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AB9344);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100AB9348(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AB9350(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MemberPeerTrust.ConversionError()
{
  return &type metadata for MemberPeerTrust.ConversionError;
}

uint64_t *sub_100AB936C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for PeerCommunicationIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v16, v17))
    {
      case 0u:
        v18 = *((_QWORD *)v16 + 1);
        *v15 = *(_QWORD *)v16;
        v15[1] = v18;
        swift_bridgeObjectRetain(v18);
        v19 = v15;
        v20 = v17;
        v21 = 0;
        goto LABEL_11;
      case 1u:
        v13((char *)v15, v16, v12);
        v19 = v15;
        v20 = v17;
        v21 = 1;
        goto LABEL_11;
      case 2u:
        *(_OWORD *)v15 = *(_OWORD *)v16;
        v23 = *((_QWORD *)v16 + 2);
        v15[2] = v23;
        swift_bridgeObjectRetain(v23);
        v19 = v15;
        v20 = v17;
        v21 = 2;
        goto LABEL_11;
      case 3u:
        *(_BYTE *)v15 = *v16;
        v24 = *((_QWORD *)v16 + 2);
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = v24;
        swift_bridgeObjectRetain(v24);
        v19 = v15;
        v20 = v17;
        v21 = 3;
        goto LABEL_11;
      case 4u:
        *(_BYTE *)v15 = *v16;
        v25 = *((_QWORD *)v16 + 2);
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = v25;
        v26 = *((_QWORD *)v16 + 3);
        v27 = *((_QWORD *)v16 + 4);
        v15[3] = v26;
        v15[4] = v27;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v27);
        v19 = v15;
        v20 = v17;
        v21 = 4;
        goto LABEL_11;
      case 5u:
        v28 = *((_QWORD *)v16 + 1);
        *v15 = *(_QWORD *)v16;
        v15[1] = v28;
        *((_BYTE *)v15 + 16) = v16[16];
        v29 = *((_QWORD *)v16 + 4);
        v15[3] = *((_QWORD *)v16 + 3);
        v15[4] = v29;
        v30 = *((_QWORD *)v16 + 5);
        v31 = *((_QWORD *)v16 + 6);
        v15[5] = v30;
        v15[6] = v31;
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v31);
        v19 = v15;
        v20 = v17;
        v21 = 5;
LABEL_11:
        swift_storeEnumTagMultiPayload(v19, v20, v21);
        break;
      default:
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        break;
    }
    v32 = a3[8];
    v33 = a3[9];
    v34 = (uint64_t *)((char *)a1 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (uint64_t *)((char *)a1 + v33);
    v38 = (char *)a2 + v33;
    v39 = *(uint64_t *)((char *)a2 + v33);
    v40 = *((_QWORD *)v38 + 1);
    swift_bridgeObjectRetain(v36);
    sub_10001BBBC(v39, v40);
    *v37 = v39;
    v37[1] = v40;
  }
  return a1;
}

uint64_t sub_100AB95B4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for PeerCommunicationIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v7, v8))
  {
    case 0u:
    case 2u:
    case 3u:
      goto LABEL_5;
    case 1u:
      v6(v7, v5);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  return sub_10001BC14(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
}

uint64_t *sub_100AB96BC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for PeerCommunicationIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v15, v16))
  {
    case 0u:
      v17 = *((_QWORD *)v15 + 1);
      *v14 = *(_QWORD *)v15;
      v14[1] = v17;
      swift_bridgeObjectRetain(v17);
      v18 = v14;
      v19 = v16;
      v20 = 0;
      goto LABEL_9;
    case 1u:
      v12((char *)v14, v15, v11);
      v18 = v14;
      v19 = v16;
      v20 = 1;
      goto LABEL_9;
    case 2u:
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v21 = *((_QWORD *)v15 + 2);
      v14[2] = v21;
      swift_bridgeObjectRetain(v21);
      v18 = v14;
      v19 = v16;
      v20 = 2;
      goto LABEL_9;
    case 3u:
      *(_BYTE *)v14 = *v15;
      v22 = *((_QWORD *)v15 + 2);
      v14[1] = *((_QWORD *)v15 + 1);
      v14[2] = v22;
      swift_bridgeObjectRetain(v22);
      v18 = v14;
      v19 = v16;
      v20 = 3;
      goto LABEL_9;
    case 4u:
      *(_BYTE *)v14 = *v15;
      v23 = *((_QWORD *)v15 + 2);
      v14[1] = *((_QWORD *)v15 + 1);
      v14[2] = v23;
      v24 = *((_QWORD *)v15 + 3);
      v25 = *((_QWORD *)v15 + 4);
      v14[3] = v24;
      v14[4] = v25;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v25);
      v18 = v14;
      v19 = v16;
      v20 = 4;
      goto LABEL_9;
    case 5u:
      v26 = *((_QWORD *)v15 + 1);
      *v14 = *(_QWORD *)v15;
      v14[1] = v26;
      *((_BYTE *)v14 + 16) = v15[16];
      v27 = *((_QWORD *)v15 + 4);
      v14[3] = *((_QWORD *)v15 + 3);
      v14[4] = v27;
      v28 = *((_QWORD *)v15 + 5);
      v29 = *((_QWORD *)v15 + 6);
      v14[5] = v28;
      v14[6] = v29;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v29);
      v18 = v14;
      v19 = v16;
      v20 = 5;
LABEL_9:
      swift_storeEnumTagMultiPayload(v18, v19, v20);
      break;
    default:
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      break;
  }
  v30 = a3[8];
  v31 = a3[9];
  v32 = (uint64_t *)((char *)a1 + v30);
  v33 = (uint64_t *)((char *)a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (uint64_t *)((char *)a1 + v31);
  v36 = (char *)a2 + v31;
  v37 = *(uint64_t *)((char *)a2 + v31);
  v38 = *((_QWORD *)v36 + 1);
  swift_bridgeObjectRetain(v34);
  sub_10001BBBC(v37, v38);
  *v35 = v37;
  v35[1] = v38;
  return a1;
}

uint64_t *sub_100AB98D8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  if (a1 != a2)
  {
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    sub_1000126B0((uint64_t)a1 + v15, type metadata accessor for PeerCommunicationIdentifier);
    v18 = type metadata accessor for PeerCommunicationIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v17, v18))
    {
      case 0u:
        *v16 = *v17;
        v19 = v17[1];
        v16[1] = v19;
        swift_bridgeObjectRetain(v19);
        swift_storeEnumTagMultiPayload(v16, v18, 0);
        break;
      case 1u:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v14 + 16))(v16, v17, v13);
        swift_storeEnumTagMultiPayload(v16, v18, 1);
        break;
      case 2u:
        *v16 = *v17;
        v16[1] = v17[1];
        v20 = v17[2];
        v16[2] = v20;
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(v16, v18, 2);
        break;
      case 3u:
        *(_BYTE *)v16 = *(_BYTE *)v17;
        v16[1] = v17[1];
        v21 = v17[2];
        v16[2] = v21;
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(v16, v18, 3);
        break;
      case 4u:
        *(_BYTE *)v16 = *(_BYTE *)v17;
        v16[1] = v17[1];
        v22 = v17[2];
        v16[2] = v22;
        v16[3] = v17[3];
        v23 = v17[4];
        v16[4] = v23;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_storeEnumTagMultiPayload(v16, v18, 4);
        break;
      case 5u:
        *v16 = *v17;
        v24 = v17[1];
        v16[1] = v24;
        *((_BYTE *)v16 + 16) = *((_BYTE *)v17 + 16);
        v16[3] = v17[3];
        v25 = v17[4];
        v16[4] = v25;
        v16[5] = v17[5];
        v26 = v17[6];
        v16[6] = v26;
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        swift_storeEnumTagMultiPayload(v16, v18, 5);
        break;
      default:
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        break;
    }
  }
  v27 = a3[8];
  v28 = (uint64_t *)((char *)a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  v31 = a3[9];
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *v33;
  v35 = v33[1];
  sub_10001BBBC(*v33, v35);
  v36 = *v32;
  v37 = v32[1];
  *v32 = v34;
  v32[1] = v35;
  sub_10001BC14(v36, v37);
  return a1;
}

_OWORD *sub_100AB9B90(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for PeerCommunicationIdentifier(0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v10(v12, v13, v9);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  return a1;
}

uint64_t *sub_100AB9C88(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  if (a1 != a2)
  {
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_1000126B0((uint64_t)a1 + v13, type metadata accessor for PeerCommunicationIdentifier);
    v16 = type metadata accessor for PeerCommunicationIdentifier(0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, v11);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v17 = a3[8];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[9];
  v23 = *(uint64_t *)((char *)a1 + v22);
  v24 = *(uint64_t *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  sub_10001BC14(v23, v24);
  return a1;
}

uint64_t sub_100AB9DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AB9DD8);
}

uint64_t sub_100AB9DD8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for PeerCommunicationIdentifier(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_100AB9E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AB9E8C);
}

uint64_t sub_100AB9E8C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for PeerCommunicationIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100AB9F30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  v5[0] = &unk_100E5B158;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100E5B170;
    result = type metadata accessor for PeerCommunicationIdentifier(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_100E5B188;
      v5[5] = &unk_100E5B158;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100AB9FD4()
{
  return sub_100006204(&qword_1011126D8, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B1A0);
}

unint64_t sub_100ABA004()
{
  unint64_t result;

  result = qword_1011126E0;
  if (!qword_1011126E0)
  {
    result = swift_getWitnessTable(aI_42, &type metadata for MemberPeerTrust.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1011126E0);
  }
  return result;
}

unint64_t sub_100ABA04C()
{
  unint64_t result;

  result = qword_1011126E8;
  if (!qword_1011126E8)
  {
    result = swift_getWitnessTable(byte_100E5B300, &type metadata for MemberPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011126E8);
  }
  return result;
}

unint64_t sub_100ABA094()
{
  unint64_t result;

  result = qword_1011126F0;
  if (!qword_1011126F0)
  {
    result = swift_getWitnessTable(aY_63, &type metadata for MemberPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011126F0);
  }
  return result;
}

unint64_t sub_100ABA0DC()
{
  unint64_t result;

  result = qword_1011126F8;
  if (!qword_1011126F8)
  {
    result = swift_getWitnessTable(aA_50, &type metadata for MemberPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011126F8);
  }
  return result;
}

uint64_t sub_100ABA120(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100ECB8B0)
  {
    v8 = 0x8000000100ECB8B0;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100ECB8B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100ECB8D0)
  {
    v9 = 0x8000000100ECB8D0;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECB8D0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ECB8F0)
  {
    swift_bridgeObjectRelease(0x8000000100ECB8F0);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ECB8F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

ValueMetadata *type metadata accessor for AccessoryCategoryResponsePayload()
{
  return &type metadata for AccessoryCategoryResponsePayload;
}

uint64_t sub_100ABA38C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  dispatch thunk of BinaryEncoding.container()(v12, v1, v2);
  v3 = sub_100136560();
  v4 = FixedWidthInteger.data.getter(&type metadata for UInt64, v3);
  v6 = v5;
  v11[0] = v4;
  v11[1] = v5;
  v7 = v13;
  v8 = v14;
  sub_10009F5D0((uint64_t)v12, v13);
  v9 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v11, &type metadata for Data, v9, v7, v8);
  sub_10001BC14(v4, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_100ABA460@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100ABA510(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100ABA488(_QWORD *a1)
{
  return sub_100ABA38C(a1);
}

unint64_t sub_100ABA4A0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100ABA4CC();
  result = sub_1003ECD28();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100ABA4CC()
{
  unint64_t result;

  result = qword_101112700;
  if (!qword_101112700)
  {
    result = swift_getWitnessTable(byte_100E5B3E4, &type metadata for AccessoryCategoryResponsePayload);
    atomic_store(result, &qword_101112700);
  }
  return result;
}

uint64_t sub_100ABA510(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v3 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryDecoding.container()(v23, v6, v7);
  v8 = v24;
  v9 = v25;
  v10 = sub_10009F5D0((uint64_t)v23, v24);
  v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v8, v9);
  if (!v1)
  {
    v13 = v11;
    v14 = v12;
    v15 = sub_10001BBBC(v11, v12);
    static Endianness.current.getter(v15);
    sub_100136560();
    FixedWidthInteger.init(data:ofEndianness:)(&v21, v13, v14, v5);
    if (v22 != 1)
    {
      v10 = v21;
      sub_10001BC14(v13, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v10;
    }
    v10 = type metadata accessor for BinaryEncodingError(0);
    v16 = sub_1001120A4();
    swift_allocError(v10, v16, 0, 0);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v17, enum case for BinaryEncodingError.encodingError(_:), v10);
    swift_willThrow(v18);
    sub_10001BC14(v13, v14);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10;
}

uint64_t sub_100ABA6B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t sub_100ABA6D4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = a1;
  v2 = type metadata accessor for FMNAccountType(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010FBA40);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v1[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[8] = v6;
  v1[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100ABA780, 0, 0);
}

uint64_t sub_100ABA780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String_optional v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t countAndFlagsBits;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v4, enum case for FMNAccountType.itemSharing(_:), v5);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100027CE0(*(_QWORD *)(v0 + 48));
LABEL_6:
    sub_100ABA908();
    goto LABEL_7;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 32))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v7 = URL.host(percentEncoded:)(1);
  v9 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 56);
  if (!v7.value._object)
  {
    (*(void (**)(_QWORD, _QWORD))(v9 + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    goto LABEL_6;
  }
  countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
  URLComponents.init()(countAndFlagsBits);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
LABEL_7:
  v12 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100ABA908()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B84B0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "No url found in account bag.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  URLComponents.init()(v5);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

ValueMetadata *type metadata accessor for MaskedIdentifier()
{
  return &type metadata for MaskedIdentifier;
}

uint64_t sub_100ABAA48(char *a1, char *a2)
{
  return sub_1005123AC(*a1, *a2);
}

Swift::Int sub_100ABAA54()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0x6E776F6E6B6E75;
  if (v1)
    v3 = 0x8000000100EC5310;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100ABAAD8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0x6E776F6E6B6E75;
  if (*v1)
    v3 = 0x8000000100EC5310;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100ABAB38()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0xD000000000000014;
  else
    v2 = 0x6E776F6E6B6E75;
  if (v1)
    v3 = 0x8000000100EC5310;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100ABABB8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D248, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100ABAC14(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x6E776F6E6B6E75;
  if (*v1)
    v2 = 0xD000000000000014;
  v3 = 0x8000000100EC5310;
  if (!*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_100ABAC58(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100ABAC60(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_100ABC704();
  return UnknownRawRepresentable<>.init(from:)(a1, a2, v4, &protocol witness table for String);
}

uint64_t sub_100ABACB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100ABC388();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100ABAD00()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x6E776F6E6B6E75;
}

uint64_t sub_100ABAD40@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D248, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100ABADA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100745820();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100ABADC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100745820();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100ABADF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(char *, char *, uint64_t);
  char v56;
  void (*v57)(char *, uint64_t);
  void (*v58)(char *, char *, uint64_t);
  unsigned int (*v59)(char *, uint64_t, uint64_t);
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v6 = v5;
  v62 = a3;
  v63 = a1;
  v10 = sub_10001A9A8(&qword_1010ECF78);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v58 - v14;
  v16 = type metadata accessor for SystemVersionNumber(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v58 - v21;
  if (*(_BYTE *)v6 != 1)
    return 0;
  v61 = a5;
  type metadata accessor for FeatureSupportMatrix(0);
  v23 = sub_10001A9A8(&qword_101112710);
  v24 = CustomCodableKeyDictionary.wrappedValue.getter(v23);
  if (!v24)
  {
LABEL_8:
    v29 = *(_QWORD *)(v6 + 8);
    if (*(_QWORD *)(v29 + 16))
    {
      swift_bridgeObjectRetain(a2);
      v30 = v63;
      v31 = sub_100518DA0(v63, a2);
      if ((v32 & 1) != 0)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v31);
        swift_bridgeObjectRelease();
        if (v33 <= v62)
        {
          v34 = *(_QWORD *)(v6 + 24);
          if (!*(_QWORD *)(v34 + 16))
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
LABEL_18:
            sub_10008B1C0((uint64_t)v15);
            return 0;
          }
          swift_bridgeObjectRetain(a2);
          v35 = sub_100518DA0(v30, a2);
          if ((v36 & 1) != 0)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, *(_QWORD *)(v34 + 56) + *(_QWORD *)(v17 + 72) * v35, v16);
            v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
            v38 = v15;
            v39 = 0;
          }
          else
          {
            v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
            v38 = v15;
            v39 = 1;
          }
          v60 = v37;
          v37(v38, v39, 1, v16);
          v40 = v61;
          swift_bridgeObjectRelease();
          v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
          if (v41(v15, 1, v16) == 1)
            goto LABEL_18;
          v59 = v41;
          v42 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
          v42(v22, v15, v16);
          v43 = sub_100ABC678((unint64_t *)&qword_1010ECF80, (const char *)&protocol conformance descriptor for SystemVersionNumber);
          if ((dispatch thunk of static Comparable.< infix(_:_:)(v40, v22, v16, v43) & 1) != 0)
          {
LABEL_20:
            (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
            return 0;
          }
          v58 = v42;
          v45 = *(_QWORD *)(v6 + 16);
          v46 = v59;
          if (v45 && *(_QWORD *)(v45 + 16))
          {
            swift_bridgeObjectRetain(a2);
            v47 = sub_100518DA0(v63, a2);
            if ((v48 & 1) != 0)
            {
              v49 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v47);
              swift_bridgeObjectRelease();
              if (v49 < v62)
                goto LABEL_20;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          v50 = *(_QWORD *)(v6 + 32);
          if (v50 && *(_QWORD *)(v50 + 16))
          {
            swift_bridgeObjectRetain(a2);
            v51 = sub_100518DA0(v63, a2);
            if ((v52 & 1) != 0)
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, *(_QWORD *)(v50 + 56) + *(_QWORD *)(v17 + 72) * v51, v16);
              v53 = 0;
            }
            else
            {
              v53 = 1;
            }
            v54 = v61;
            v55 = v58;
            v60(v13, v53, 1, v16);
            swift_bridgeObjectRelease();
            if (v46(v13, 1, v16) != 1)
            {
              v55(v20, v13, v16);
              v56 = dispatch thunk of static Comparable.< infix(_:_:)(v20, v54, v16, v43);
              v57 = *(void (**)(char *, uint64_t))(v17 + 8);
              v57(v20, v16);
              v57(v22, v16);
              return (v56 & 1) == 0;
            }
          }
          else
          {
            v60(v13, 1, 1, v16);
          }
          (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
          sub_10008B1C0((uint64_t)v13);
          return 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  v25 = v24;
  if (!*(_QWORD *)(v24 + 16))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(a2);
  v26 = sub_1005192AC(v63, a2, v62, a4);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v28 = *(unsigned __int8 *)(*(_QWORD *)(v25 + 56) + v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_100ABB250(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100ABB284 + 4 * byte_100E5B4B0[a1]))(0x64656C62616E65, 0xE700000000000000);
}

unint64_t sub_100ABB284()
{
  return 0xD000000000000015;
}

unint64_t sub_100ABB2AC()
{
  return 0xD000000000000016;
}

uint64_t sub_100ABB2FC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101112820);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100ABC414();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FeatureSupportMatrix.CodingKeys, &type metadata for FeatureSupportMatrix.CodingKeys, v11, v9, v10);
  v12 = *(unsigned __int8 *)v3;
  LOBYTE(v22) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v22, v5);
  if (!v2)
  {
    v22 = v3[1];
    HIBYTE(v21) = 1;
    v13 = sub_10001A9A8(&qword_1011127F0);
    v14 = sub_100ABC598(&qword_101112828, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Int, (const char *)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v13, v14);
    v22 = v3[2];
    HIBYTE(v21) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v13, v14);
    v22 = v3[3];
    HIBYTE(v21) = 3;
    v15 = sub_10001A9A8(&qword_101112800);
    v16 = sub_100ABC5FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v15, v16);
    v22 = v3[4];
    HIBYTE(v21) = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, (char *)&v21 + 7, v5, v15, v16);
    v17 = (char *)v3 + *(int *)(type metadata accessor for FeatureSupportMatrix(0) + 36);
    LOBYTE(v22) = 5;
    v18 = sub_10001A9A8(&qword_101112710);
    v19 = sub_100ABC6B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v22, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100ABB56C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  char v47;
  uint64_t v48;

  v39 = a2;
  v3 = sub_10001A9A8(&qword_101112710);
  v43 = *(_QWORD *)(v3 - 8);
  v44 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10001A9A8(&qword_1011127E0);
  v6 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FeatureSupportMatrix(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(v10 + 36);
  v45 = v12;
  v14 = &v12[v13];
  v15 = sub_100330BA4();
  v16 = sub_100330BE8();
  v42 = v14;
  CustomCodableKeyDictionary.init(wrappedValue:)(0, &type metadata for FeatureSupportMatrixProductType, &type metadata for Bool, v15, v16, &protocol witness table for Bool, &protocol witness table for Bool);
  v18 = a1[3];
  v17 = a1[4];
  v41 = a1;
  sub_10001AA44(a1, v18);
  v19 = sub_100ABC414();
  v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FeatureSupportMatrix.CodingKeys, &type metadata for FeatureSupportMatrix.CodingKeys, v19, v18, v17);
  if (v20)
  {
    v25 = v43;
    v24 = v44;
    v26 = v42;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v24);
  }
  else
  {
    v37 = v16;
    v38 = v15;
    v21 = v6;
    v46 = v5;
    LOBYTE(v48) = 0;
    v22 = v40;
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v40);
    v27 = v45;
    *v45 = v23 & 1;
    v28 = sub_10001A9A8(&qword_1011127F0);
    v47 = 1;
    v29 = sub_100ABC598(&qword_1011127F8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Int, (const char *)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, v28, &v47, v22, v28, v29);
    v27[1] = v48;
    v47 = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, &v47, v22, v28, v29);
    v30 = v21;
    v27[2] = v48;
    v31 = sub_10001A9A8(&qword_101112800);
    v47 = 3;
    v32 = sub_100ABC458();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, v31, &v47, v22, v31, v32);
    v27[3] = v48;
    v47 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v47, v22, v31, v32);
    v27[4] = v48;
    LOBYTE(v48) = 5;
    v33 = sub_100ABC4D4();
    v34 = v46;
    KeyedDecodingContainer.decode<A, B>(_:forKey:)(&v48, v22, &type metadata for FeatureSupportMatrixProductType, &type metadata for Bool, v38, v33, v37, &protocol witness table for Bool, &protocol witness table for Bool);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v22);
    (*(void (**)(char *, char *, uint64_t))(v43 + 40))(v42, v34, v44);
    sub_100ABC518((uint64_t)v27, v39);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
    return sub_100ABC55C((uint64_t)v27);
  }
}

uint64_t sub_100ABBA18()
{
  unsigned __int8 *v0;

  return sub_100ABB250(*v0);
}

uint64_t sub_100ABBA20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100ABC8EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100ABBA44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ABC414();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100ABBA6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ABC414();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100ABBA94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100ABB56C(a1, a2);
}

uint64_t sub_100ABBAA8(_QWORD *a1)
{
  return sub_100ABB2FC(a1);
}

uint64_t sub_100ABBAC0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || (sub_100326244(a1[1], a2[1]) & 1) == 0)
    return 0;
  v4 = a1[2];
  v5 = a2[2];
  if (v4)
  {
    if (!v5)
      return 0;
    swift_bridgeObjectRetain(a2[2]);
    swift_bridgeObjectRetain(v4);
    v7 = sub_100326244(v6, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v7 & 1) == 0)
      return 0;
  }
  else if (v5)
  {
    return 0;
  }
  if ((sub_1003263D8(a1[3], a2[3]) & 1) != 0)
  {
    v8 = a1[4];
    v9 = a2[4];
    if (v8)
    {
      if (v9)
      {
        swift_bridgeObjectRetain(a2[4]);
        swift_bridgeObjectRetain(v8);
        v11 = sub_1003263D8(v10, v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v11 & 1) != 0)
          goto LABEL_12;
      }
    }
    else if (!v9)
    {
LABEL_12:
      v12 = *(int *)(type metadata accessor for FeatureSupportMatrix(0) + 36);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = sub_100330BA4();
      v16 = sub_100330BE8();
      return static CustomCodableKeyDictionary<>.== infix(_:_:)(v13, v14, &type metadata for FeatureSupportMatrixProductType, &type metadata for Bool, v15, v16, &protocol witness table for Bool, &protocol witness table for Bool, &protocol witness table for Bool) & 1;
    }
  }
  return 0;
}

uint64_t type metadata accessor for FeatureSupportMatrix(uint64_t a1)
{
  uint64_t result;

  result = qword_101112770;
  if (!qword_101112770)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FeatureSupportMatrix);
  return result;
}

uint64_t *sub_100ABBC5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[1];
    v6 = a2[2];
    v3[1] = v5;
    v3[2] = v6;
    v7 = a2[3];
    v8 = a2[4];
    v9 = *(int *)(a3 + 36);
    v10 = (char *)v3 + v9;
    v11 = (char *)a2 + v9;
    v3[3] = v7;
    v3[4] = v8;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v12 = sub_10001A9A8(&qword_101112710);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v3;
}

uint64_t sub_100ABBD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_10001A9A8(&qword_101112710);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100ABBD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(int *)(a3 + 36);
  v9 = a1 + v8;
  v10 = a2 + v8;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v11 = sub_10001A9A8(&qword_101112710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_100ABBE14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 36);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_10001A9A8(&qword_101112710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_100ABBEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_10001A9A8(&qword_101112710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100ABBF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 36);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_10001A9A8(&qword_101112710);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100ABBFFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ABC008);
}

uint64_t sub_100ABC008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10001A9A8(&qword_101112710);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_100ABC088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ABC094);
}

uint64_t sub_100ABC094(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_10001A9A8(&qword_101112710);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

void sub_100ABC10C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E5B4E8;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_100E5B500;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = &unk_100E5B500;
  sub_100ABC19C(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_100ABC19C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[6];

  if (!qword_101112780)
  {
    v4[0] = &type metadata for FeatureSupportMatrixProductType;
    v4[1] = &type metadata for Bool;
    v4[2] = sub_100330BA4();
    v4[3] = sub_100330BE8();
    v4[4] = &protocol witness table for Bool;
    v4[5] = &protocol witness table for Bool;
    v2 = type metadata accessor for CustomCodableKeyDictionary(a1, v4);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_101112780);
  }
}

uint64_t storeEnumTagSinglePayload for ServerConfigurableFeature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100ABC274 + 4 * byte_100E5B4BB[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100ABC2A8 + 4 * byte_100E5B4B6[v4]))();
}

uint64_t sub_100ABC2A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ABC2B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100ABC2B8);
  return result;
}

uint64_t sub_100ABC2C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100ABC2CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100ABC2D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ABC2D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ServerConfigurableFeature()
{
  return &type metadata for ServerConfigurableFeature;
}

unint64_t sub_100ABC2F8()
{
  unint64_t result;

  result = qword_1011127C0;
  if (!qword_1011127C0)
  {
    result = swift_getWitnessTable(byte_100E5B53C, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1011127C0);
  }
  return result;
}

unint64_t sub_100ABC340()
{
  unint64_t result;

  result = qword_1011127C8;
  if (!qword_1011127C8)
  {
    result = swift_getWitnessTable(asc_100E5B564, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1011127C8);
  }
  return result;
}

unint64_t sub_100ABC388()
{
  unint64_t result;

  result = qword_1011127D0;
  if (!qword_1011127D0)
  {
    result = swift_getWitnessTable(byte_100E5B65C, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1011127D0);
  }
  return result;
}

unint64_t sub_100ABC3D0()
{
  unint64_t result;

  result = qword_1011127D8;
  if (!qword_1011127D8)
  {
    result = swift_getWitnessTable(byte_100E5B6D4, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_1011127D8);
  }
  return result;
}

unint64_t sub_100ABC414()
{
  unint64_t result;

  result = qword_1011127E8;
  if (!qword_1011127E8)
  {
    result = swift_getWitnessTable(byte_100E5B838, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011127E8);
  }
  return result;
}

unint64_t sub_100ABC458()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101112808;
  if (!qword_101112808)
  {
    v1 = sub_10001F784(&qword_101112800);
    v2[0] = &protocol witness table for String;
    v2[1] = sub_100ABC678(&qword_101112810, (const char *)&protocol conformance descriptor for SystemVersionNumber);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101112808);
  }
  return result;
}

unint64_t sub_100ABC4D4()
{
  unint64_t result;

  result = qword_101112818;
  if (!qword_101112818)
  {
    result = swift_getWitnessTable(aI_43, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_101112818);
  }
  return result;
}

uint64_t sub_100ABC518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FeatureSupportMatrix(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100ABC55C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FeatureSupportMatrix(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100ABC598(unint64_t *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1011127F0);
    v10[0] = a2;
    v10[1] = a3;
    result = swift_getWitnessTable(a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100ABC5FC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101112830;
  if (!qword_101112830)
  {
    v1 = sub_10001F784(&qword_101112800);
    v2[0] = &protocol witness table for String;
    v2[1] = sub_100ABC678(&qword_101112838, (const char *)&protocol conformance descriptor for SystemVersionNumber);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101112830);
  }
  return result;
}

uint64_t sub_100ABC678(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for SystemVersionNumber(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100ABC6B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101112840;
  if (!qword_101112840)
  {
    v1 = sub_10001F784(&qword_101112710);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for CustomCodableKeyDictionary<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101112840);
  }
  return result;
}

unint64_t sub_100ABC704()
{
  unint64_t result;

  result = qword_101112848;
  if (!qword_101112848)
  {
    result = swift_getWitnessTable(byte_100E5B62C, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_101112848);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FeatureSupportMatrix.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100ABC794 + 4 * byte_100E5B4C5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100ABC7C8 + 4 * byte_100E5B4C0[v4]))();
}

uint64_t sub_100ABC7C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ABC7D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100ABC7D8);
  return result;
}

uint64_t sub_100ABC7E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100ABC7ECLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100ABC7F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ABC7F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrix.CodingKeys()
{
  return &type metadata for FeatureSupportMatrix.CodingKeys;
}

unint64_t sub_100ABC818()
{
  unint64_t result;

  result = qword_101112850;
  if (!qword_101112850)
  {
    result = swift_getWitnessTable(byte_100E5B810, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112850);
  }
  return result;
}

unint64_t sub_100ABC860()
{
  unint64_t result;

  result = qword_101112858;
  if (!qword_101112858)
  {
    result = swift_getWitnessTable(aQ_37, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112858);
  }
  return result;
}

unint64_t sub_100ABC8A8()
{
  unint64_t result;

  result = qword_101112860;
  if (!qword_101112860)
  {
    result = swift_getWitnessTable(a9_20, &type metadata for FeatureSupportMatrix.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112860);
  }
  return result;
}

uint64_t sub_100ABC8EC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x64656C62616E65 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C62616E65, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000015)
  {
    v7 = 0x8000000100EED640;
    if (a2 == 0x8000000100EED640)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EED640, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000015)
  {
    v8 = 0x8000000100EED660;
    if (a2 == 0x8000000100EED660)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EED660, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000016)
  {
    v9 = 0x8000000100EED680;
    if (a2 == 0x8000000100EED680)
      goto LABEL_23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EED680, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_23:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000016)
  {
    v10 = 0x8000000100EED6A0;
    if (a2 == 0x8000000100EED6A0)
      goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EED6A0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100EED6C0)
  {
    swift_bridgeObjectRelease(0x8000000100EED6C0);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EED6C0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100ABCB2C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100ABCB68 + 4 * byte_100E5B890[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_100ABCB68()
{
  return 0x737574617473;
}

uint64_t sub_100ABCB7C()
{
  return 1684628325;
}

uint64_t sub_100ABCB8C()
{
  return 0x644970696863;
}

uint64_t sub_100ABCBA0()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100ABCBC0()
{
  return 0x7374726563;
}

uint64_t sub_100ABCBD4()
{
  return 0x726F737365636361;
}

unint64_t sub_100ABCBF8()
{
  return 0xD000000000000013;
}

unint64_t sub_100ABCC18()
{
  return 0xD000000000000011;
}

uint64_t sub_100ABCC34()
{
  return 0x69634572656E776FLL;
}

uint64_t sub_100ABCCC8()
{
  return 0x6449726F646E6576;
}

uint64_t sub_100ABCCE0(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  __int128 v31;
  _BYTE v32[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101112878);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100ABF1F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsPairingLockAckRequestContent.CodingKeys, &type metadata for AirPodsPairingLockAckRequestContent.CodingKeys, v11, v9, v10);
  v31 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 2);
    LOBYTE(v31) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v31, v5);
    v31 = *(__int128 *)((char *)v3 + 24);
    v30 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 40);
    v30 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 56);
    v30 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 72);
    v30 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 88);
    v30 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    sub_10016924C((uint64_t)v3 + 104, (uint64_t)v32);
    sub_10016924C((uint64_t)v32, (uint64_t)&v31);
    v30 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v14 = *((_QWORD *)v3 + 15);
    v15 = *((_QWORD *)v3 + 16);
    LOBYTE(v31) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    v16 = *((_QWORD *)v3 + 17);
    v17 = *((_QWORD *)v3 + 18);
    LOBYTE(v31) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v31, v5);
    v18 = *((_QWORD *)v3 + 19);
    v19 = *((_QWORD *)v3 + 20);
    LOBYTE(v31) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    v20 = *((_QWORD *)v3 + 21);
    v21 = *((_QWORD *)v3 + 22);
    LOBYTE(v31) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v31, v5);
    v22 = *((_QWORD *)v3 + 23);
    v23 = *((_QWORD *)v3 + 24);
    LOBYTE(v31) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v31, v5);
    v24 = *((_QWORD *)v3 + 25);
    v25 = *((_QWORD *)v3 + 26);
    LOBYTE(v31) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v5);
    v26 = *((_QWORD *)v3 + 27);
    v27 = *((_QWORD *)v3 + 28);
    LOBYTE(v31) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v31, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100ABD0A0()
{
  unsigned __int8 *v0;

  return sub_100ABCB2C(*v0);
}

uint64_t sub_100ABD0A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100ABF3E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100ABD0CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ABF1F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100ABD0F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ABF1F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100ABD11C(_QWORD *a1)
{
  return sub_100ABCCE0(a1);
}

_QWORD *sub_100ABD184@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v25 = a1[15];
  v26 = a1[14];
  sub_10001BBBC(v26, v25);
  v4 = sub_100035530();
  v23 = DataProtocol.intValue.getter(&type metadata for Data, v4);
  v5 = a1[8];
  v27 = a1[9];
  v6 = a1[10];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[16];
  v29 = a1[11];
  v30 = a1[17];
  v11 = a1[20];
  v10 = a1[21];
  v20 = a1[4];
  v33 = a1[5];
  v19 = *a1;
  v32 = a1[1];
  v18 = a1[2];
  v31 = a1[3];
  v12 = a1[23];
  v24 = a1[22];
  v17 = a1[24];
  v28 = a1[25];
  v21 = a1[7];
  v22 = a1[6];
  sub_10001BBBC(v22, v21);
  sub_10001BBBC(v5, v27);
  sub_10001BBBC(v6, v29);
  sub_10001BBBC(v7, v8);
  sub_10001BBBC(v9, v30);
  sub_10001BD08(v11, v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v31);
  if (v28 >> 60 != 15)
  {
    v14 = sub_1001EDBAC(v17, v28);
    v16 = v15;
    Data.hexString.getter(v14, v15);
    sub_10001BC14(v14, v16);
    __asm { BR              X11 }
  }
  result = sub_100ABE904(a1);
  *a2 = v26;
  a2[1] = v25;
  a2[2] = v23;
  a2[3] = v22;
  a2[4] = v21;
  a2[5] = v5;
  a2[6] = v27;
  a2[7] = v6;
  a2[8] = v29;
  a2[9] = v7;
  a2[10] = v8;
  a2[11] = v9;
  a2[12] = v30;
  a2[13] = v11;
  a2[14] = v10;
  a2[15] = v20;
  a2[16] = v33;
  a2[17] = v19;
  a2[18] = v32;
  a2[19] = v18;
  a2[20] = v31;
  a2[21] = 0x302E302E31;
  a2[22] = 0xE500000000000000;
  a2[23] = v24;
  a2[24] = v12;
  a2[25] = 0;
  a2[26] = 0;
  a2[27] = 0;
  a2[28] = 0;
  return result;
}

uint64_t sub_100ABD4B4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[124] = a2;
  v2[123] = a1;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[125] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[126] = v4;
  v2[127] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v2[128] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[129] = v6;
  v2[130] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v2[131] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[132] = v8;
  v2[133] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100ABD568, 0, 0);
}

void sub_100ABD568()
{
  uint64_t v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  void *v38;
  id v39;
  unsigned int v40;
  NSString v41;
  unsigned int v42;
  char v43;
  uint64_t *v44;
  uint64_t v45;
  __n128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void (__cdecl *v60)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v6 = *(_QWORD *)(v0 + 1064);
  v7 = *(_QWORD *)(v0 + 1056);
  v8 = *(_QWORD *)(v0 + 1048);
  v9 = *(_QWORD *)(v0 + 1040);
  v58 = *(_QWORD *)(v0 + 1032);
  v59 = *(_QWORD *)(v0 + 1024);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v12 = v11;

  v13 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v10, v12, 0xD000000000000011, 0x8000000100ECA2C0, v13);
  v14 = v1;
  v15 = swift_bridgeObjectRelease();
  v16 = Date.init()(v15);
  v17 = Date.epoch.getter(v16);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(_QWORD *)(v0 + 976) = v17;
  v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v20 = v19;
  v21 = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100109D28(v18, v20, 0xD000000000000015, 0x8000000100ECA2E0, v21);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 960) = 1;
  v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v24 = v23;
  v25 = swift_isUniquelyReferenced_nonNull_native(v14);
  sub_100109D28(v22, v24, 0xD000000000000013, 0x8000000100ECA300, v25);
  v26 = v14;
  swift_bridgeObjectRelease();
  v27 = sub_100AC2EB8();
  v29 = v28;
  v30 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28((uint64_t)v27, v29, 0x6567412D72657355, 0xEA0000000000746ELL, v30);
  v31 = swift_bridgeObjectRelease();
  v32 = static Locale.current.getter(v31);
  v33 = Locale.acceptLanguageCode.getter(v32);
  v35 = v34;
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v9, v59);
  v36 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28(v33, v35, 0x4C2D747065636341, 0xEF65676175676E61, v36);
  v37 = v26;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v38 = (void *)qword_1011B7C08;
  v39 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v40 = objc_msgSend(v39, "isInternalBuild");

  if (v40)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v38, "BOOLForKey:", v41);

    if (v42)
    {
      v43 = swift_isUniquelyReferenced_nonNull_native(v37);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v43);
      swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)(v0 + 1072) = v37;
  v44 = *(uint64_t **)(v0 + 984);
  sub_1007024DC(v44);
  sub_100ABD184(v44, (uint64_t *)(v0 + 16));
  v45 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v0 + 1080) = JSONEncoder.init()(v46);
  v47 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 904) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 920) = v47;
  *(_QWORD *)(v0 + 936) = *(_QWORD *)(v0 + 240);
  v48 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 840) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 856) = v48;
  v49 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 872) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 888) = v49;
  v50 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 776) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 792) = v50;
  v51 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 808) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 824) = v51;
  v52 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 712) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 728) = v52;
  v53 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 744) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 760) = v53;
  v54 = sub_100ABE7A0();
  v55 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 712, &type metadata for AirPodsPairingLockAckRequestContent, v54);
  *(_QWORD *)(v0 + 1088) = v55;
  *(_QWORD *)(v0 + 1096) = v56;
  sub_10001BBBC(v55, v56);
  v60 = (void (__cdecl *)())((char *)&dword_1011152B0 + dword_1011152B0);
  v57 = (_QWORD *)swift_task_alloc(unk_1011152B4);
  *(_QWORD *)(v0 + 1104) = v57;
  *v57 = v0;
  v57[1] = sub_100ABDBFC;
  v60();
}

uint64_t sub_100ABDBFC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1104);
  *(_QWORD *)(v3 + 1112) = a1;
  *(_QWORD *)(v3 + 1120) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100ABDC5C, 0, 0);
}

uint64_t sub_100ABDC5C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[140];
  v2 = v0[139];
  v3 = v0[137];
  v4 = v0[136];
  v5 = v0[127];
  v6 = v0[126];
  v7 = v0[125];
  v0[118] = v2;
  v0[119] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[118];
  v0[141] = v8;
  v9 = v0[119];
  v0[142] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[143] = v10;
  v0[144] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_1011152A8 + dword_1011152A8;
  v13 = (_QWORD *)swift_task_alloc(unk_1011152AC);
  v0[145] = v13;
  *v13 = v0;
  v13[1] = sub_100ABDD9C;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[124]);
}

uint64_t sub_100ABDD9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1160);
  *(_QWORD *)(*(_QWORD *)v2 + 1168) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100ABE2A0;
  }
  else
  {
    v7 = v4[144];
    v8 = v4[143];
    v4[147] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_100ABDE1C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100ABDE1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  _BYTE *v60;
  _BYTE *v61;

  v1 = v0[147];
  v2 = v0[146];
  v3 = (_BYTE *)v0[134];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v61 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v61);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = v0[142];
  v55 = v0;
  v7 = v0[141];
  v8 = v61;
  swift_bridgeObjectRelease();
  v9 = sub_10001BC14(v7, v6);
  v10 = static os_log_type_t.debug.getter(v9);
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7DF0, "Pairing lock header:", 20, 2, _swiftEmptyArrayStorage);
  v56 = v8 + 64;
  v11 = -1;
  v12 = -1 << v8[32];
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *((_QWORD *)v8 + 8);
  v58 = (unint64_t)(63 - v12) >> 6;
  v60 = v8;
  swift_bridgeObjectRetain(v8);
  v14 = 0;
  v8 = &type metadata for String;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    v29 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v58)
      goto LABEL_24;
    v30 = *(_QWORD *)&v56[8 * v29];
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v58)
        goto LABEL_24;
      v30 = *(_QWORD *)&v56[8 * v14];
      if (!v30)
      {
        v14 = v29 + 2;
        if (v29 + 2 >= v58)
          goto LABEL_24;
        v30 = *(_QWORD *)&v56[8 * v14];
        if (!v30)
          break;
      }
    }
LABEL_23:
    v13 = (v30 - 1) & v30;
    v16 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_8:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*((_QWORD *)v60 + 6) + v17);
    v10 = *v18;
    v19 = v18[1];
    v20 = (uint64_t *)(*((_QWORD *)v60 + 7) + v17);
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = qword_1011B7DF0;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v27 = swift_allocObject(v26, 112, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    v28 = sub_10001AA00();
    *(_QWORD *)(v27 + 32) = v10;
    *(_QWORD *)(v27 + 40) = v19;
    *(_QWORD *)(v27 + 96) = &type metadata for String;
    *(_QWORD *)(v27 + 104) = v28;
    *(_QWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 72) = v21;
    *(_QWORD *)(v27 + 80) = v22;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@: %@", 6, 2, v27);
    swift_bridgeObjectRelease();
  }
  v31 = v29 + 3;
  if (v31 < v58)
  {
    v30 = *(_QWORD *)&v56[8 * v31];
    if (!v30)
    {
      while (1)
      {
        v14 = v31 + 1;
        if (__OFADD__(v31, 1))
          goto LABEL_26;
        if (v14 >= v58)
          goto LABEL_24;
        v30 = *(_QWORD *)&v56[8 * v14];
        ++v31;
        if (v30)
          goto LABEL_23;
      }
    }
    v14 = v31;
    goto LABEL_23;
  }
LABEL_24:
  v57 = v55[136];
  v59 = v55[137];
  v32 = (_QWORD *)v55[123];
  v33 = swift_release();
  v34 = static os_log_type_t.debug.getter(v33);
  v35 = qword_1011B7DF0;
  v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
  v38 = *((_OWORD *)v55 + 13);
  v39 = *((_OWORD *)v55 + 14);
  v40 = *((_OWORD *)v55 + 11);
  *(_OWORD *)(v55 + 53) = *((_OWORD *)v55 + 12);
  *(_OWORD *)(v55 + 55) = v38;
  *(_OWORD *)(v55 + 57) = v39;
  v41 = *((_OWORD *)v55 + 9);
  v42 = *((_OWORD *)v55 + 10);
  v43 = *((_OWORD *)v55 + 7);
  *(_OWORD *)(v55 + 45) = *((_OWORD *)v55 + 8);
  *(_OWORD *)(v55 + 47) = v41;
  *(_OWORD *)(v55 + 49) = v42;
  *(_OWORD *)(v55 + 51) = v40;
  v44 = *((_OWORD *)v55 + 5);
  v45 = *((_OWORD *)v55 + 6);
  v46 = *((_OWORD *)v55 + 3);
  *(_OWORD *)(v55 + 37) = *((_OWORD *)v55 + 4);
  *(_OWORD *)(v55 + 39) = v44;
  *(_OWORD *)(v55 + 41) = v45;
  *(_OWORD *)(v55 + 43) = v43;
  v47 = *((_OWORD *)v55 + 2);
  *(_OWORD *)(v55 + 31) = *((_OWORD *)v55 + 1);
  v55[59] = v55[30];
  *(_OWORD *)(v55 + 33) = v47;
  *(_OWORD *)(v55 + 35) = v46;
  sub_100ABE7E4(v55 + 2);
  v48 = String.init<A>(describing:)(v55 + 31, &type metadata for AirPodsPairingLockAckRequestContent);
  v50 = v49;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = sub_10001AA00();
  *(_QWORD *)(v37 + 32) = v48;
  *(_QWORD *)(v37 + 40) = v50;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Pairing ack body %@", 19, 2, v37);
  swift_release();
  sub_100ABE904(v32);
  swift_bridgeObjectRelease();
  sub_10001BC14(v57, v59);
  swift_release();
  sub_100ABEA20(v55 + 2);
  v51 = v55[137];
  v52 = v55[136];
  v53 = v55[130];
  v54 = v55[127];
  swift_task_dealloc(v55[133]);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v55[1])(v60, v52, v51);
}

uint64_t sub_100ABE2A0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;

  v1 = v0 + 968;
  v2 = *(_QWORD *)(v0 + 1136);
  v3 = *(_QWORD *)(v0 + 1128);
  sub_10001BC14(*(_QWORD *)(v0 + 1144), *(_QWORD *)(v0 + 1152));
  v4 = sub_10001BC14(v3, v2);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = &qword_1010EA000;
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v7 = *(_QWORD *)(v0 + 1168);
  v8 = qword_1011B7DF0;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 72, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v0 + 968) = v7;
  swift_errorRetain(v7);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v12 = String.init<A>(describing:)(v1, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v1 = sub_10001AA00();
  *(_QWORD *)(v10 + 64) = v1;
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v8, "Failed to generate attestation header %@:", 41, 2, v10);
  swift_bridgeObjectRelease();
  v15 = swift_errorRelease(v7);
  v59 = (_QWORD *)v0;
  v5 = *(_QWORD *)(v0 + 1072);
  v16 = static os_log_type_t.debug.getter(v15);
  if (v6[98] != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7DF0, "Pairing lock header:", 20, 2, _swiftEmptyArrayStorage);
  v60 = v5 + 64;
  v17 = -1;
  v18 = -1 << *(_BYTE *)(v5 + 32);
  if (-v18 < 64)
    v17 = ~(-1 << -(char)v18);
  v19 = v17 & *(_QWORD *)(v5 + 64);
  v62 = (unint64_t)(63 - v18) >> 6;
  v64 = v5;
  swift_bridgeObjectRetain(v5);
  v0 = 0;
  while (1)
  {
    if (v19)
    {
      v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v21 = v20 | (v0 << 6);
      v22 = v64;
      goto LABEL_8;
    }
    v33 = v0 + 1;
    if (__OFADD__(v0, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v5 = (uint64_t)v59;
    if (v33 >= v62)
      goto LABEL_24;
    v34 = *(_QWORD *)(v60 + 8 * v33);
    ++v0;
    if (!v34)
    {
      v0 = v33 + 1;
      if (v33 + 1 >= v62)
        goto LABEL_24;
      v34 = *(_QWORD *)(v60 + 8 * v0);
      if (!v34)
      {
        v0 = v33 + 2;
        if (v33 + 2 >= v62)
          goto LABEL_24;
        v34 = *(_QWORD *)(v60 + 8 * v0);
        if (!v34)
          break;
      }
    }
LABEL_23:
    v19 = (v34 - 1) & v34;
    v21 = __clz(__rbit64(v34)) + (v0 << 6);
    v22 = v64;
LABEL_8:
    v23 = 16 * v21;
    v24 = (uint64_t *)(*(_QWORD *)(v22 + 48) + v23);
    v25 = *v24;
    v26 = v24[1];
    v27 = (uint64_t *)(*(_QWORD *)(v22 + 56) + v23);
    v5 = *v27;
    v28 = v27[1];
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    v6 = (uint64_t *)static os_log_type_t.debug.getter(v29);
    v30 = qword_1011B7DF0;
    v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v32 = swift_allocObject(v31, 112, 7);
    *(_OWORD *)(v32 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = v1;
    *(_QWORD *)(v32 + 32) = v25;
    *(_QWORD *)(v32 + 40) = v26;
    *(_QWORD *)(v32 + 96) = &type metadata for String;
    *(_QWORD *)(v32 + 104) = v1;
    *(_QWORD *)(v32 + 72) = v5;
    *(_QWORD *)(v32 + 80) = v28;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v30, "%@: %@", 6, 2, v32);
    swift_bridgeObjectRelease();
  }
  v35 = v33 + 3;
  if (v35 < v62)
  {
    v34 = *(_QWORD *)(v60 + 8 * v35);
    if (!v34)
    {
      while (1)
      {
        v0 = v35 + 1;
        if (__OFADD__(v35, 1))
          goto LABEL_26;
        if (v0 >= v62)
          goto LABEL_24;
        v34 = *(_QWORD *)(v60 + 8 * v0);
        ++v35;
        if (v34)
          goto LABEL_23;
      }
    }
    v0 = v35;
    goto LABEL_23;
  }
LABEL_24:
  v61 = v59[136];
  v63 = v59[137];
  v58 = (_QWORD *)v59[123];
  v36 = swift_release();
  v37 = static os_log_type_t.debug.getter(v36);
  v38 = qword_1011B7DF0;
  v39 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v40 = swift_allocObject(v39, 72, 7);
  *(_OWORD *)(v40 + 16) = xmmword_100E22B00;
  v41 = *((_OWORD *)v59 + 13);
  v42 = *((_OWORD *)v59 + 14);
  v43 = *((_OWORD *)v59 + 11);
  *(_OWORD *)(v59 + 53) = *((_OWORD *)v59 + 12);
  *(_OWORD *)(v59 + 55) = v41;
  *(_OWORD *)(v59 + 57) = v42;
  v44 = *((_OWORD *)v59 + 9);
  v45 = *((_OWORD *)v59 + 10);
  v46 = *((_OWORD *)v59 + 7);
  *(_OWORD *)(v59 + 45) = *((_OWORD *)v59 + 8);
  *(_OWORD *)(v59 + 47) = v44;
  *(_OWORD *)(v59 + 49) = v45;
  *(_OWORD *)(v59 + 51) = v43;
  v47 = *((_OWORD *)v59 + 5);
  v48 = *((_OWORD *)v59 + 6);
  v49 = *((_OWORD *)v59 + 3);
  *(_OWORD *)(v59 + 37) = *((_OWORD *)v59 + 4);
  *(_OWORD *)(v59 + 39) = v47;
  *(_OWORD *)(v59 + 41) = v48;
  *(_OWORD *)(v59 + 43) = v46;
  v50 = *((_OWORD *)v59 + 2);
  *(_OWORD *)(v59 + 31) = *((_OWORD *)v59 + 1);
  v59[59] = v59[30];
  *(_OWORD *)(v59 + 33) = v50;
  *(_OWORD *)(v59 + 35) = v49;
  sub_100ABE7E4(v59 + 2);
  v51 = String.init<A>(describing:)(v59 + 31, &type metadata for AirPodsPairingLockAckRequestContent);
  *(_QWORD *)(v40 + 56) = &type metadata for String;
  *(_QWORD *)(v40 + 64) = v1;
  *(_QWORD *)(v40 + 32) = v51;
  *(_QWORD *)(v40 + 40) = v52;
  os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "Pairing ack body %@", 19, 2, v40);
  swift_release();
  sub_100ABE904(v58);
  swift_bridgeObjectRelease();
  sub_10001BC14(v61, v63);
  swift_release();
  sub_100ABEA20(v59 + 2);
  v53 = v59[137];
  v54 = v59[136];
  v55 = v59[130];
  v56 = v59[127];
  swift_task_dealloc(v59[133]);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v59[1])(v64, v54, v53);
}

unint64_t sub_100ABE7A0()
{
  unint64_t result;

  result = qword_101112870;
  if (!qword_101112870)
  {
    result = swift_getWitnessTable(byte_100E5B910, &type metadata for AirPodsPairingLockAckRequestContent);
    atomic_store(result, (unint64_t *)&qword_101112870);
  }
  return result;
}

uint64_t *sub_100ABE7E4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v9 = a1[9];
  v8 = a1[10];
  v10 = a1[11];
  v13 = a1[12];
  v14 = a1[14];
  v15 = a1[13];
  v16 = a1[16];
  v17 = a1[18];
  v18 = a1[20];
  v19 = a1[22];
  v20 = a1[24];
  v21 = a1[26];
  v12 = a1[28];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v9, v8);
  sub_10001BBBC(v10, v13);
  sub_10001BD08(v15, v14);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  return a1;
}

_QWORD *sub_100ABE904(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v10 = a1[13];
  v11 = a1[15];
  v12 = a1[14];
  v13 = a1[17];
  v14 = a1[16];
  v15 = a1[19];
  v16 = a1[18];
  v17 = a1[21];
  v18 = a1[20];
  v19 = a1[25];
  v20 = a1[24];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v10);
  sub_10001BC14(v12, v11);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001EF3C(v18, v17);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v20, v19);
  return a1;
}

uint64_t *sub_100ABEA20(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v13 = a1[14];
  v14 = a1[13];
  v12 = a1[12];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v9);
  sub_10001BC14(v10, v12);
  sub_10001EF3C(v14, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for AirPodsPairingLockAckRequestContent(uint64_t *a1)
{
  unint64_t v2;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[3], a1[4]);
  sub_10001BC14(a1[5], a1[6]);
  sub_10001BC14(a1[7], a1[8]);
  sub_10001BC14(a1[9], a1[10]);
  sub_10001BC14(a1[11], a1[12]);
  v2 = a1[14];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[13], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AirPodsPairingLockAckRequestContent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  v7 = a2[4];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = a2[5];
  v9 = a2[6];
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = a2[7];
  v11 = a2[8];
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = a2[9];
  v13 = a2[10];
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  v14 = a2[11];
  v15 = a2[12];
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  v16 = a2 + 13;
  v17 = a2[14];
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v16;
  }
  else
  {
    v18 = *v16;
    sub_10001BBBC(*v16, a2[14]);
    *(_QWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 112) = v17;
  }
  v19 = a2[16];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = v19;
  v20 = a2[18];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = v20;
  v21 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v21;
  v22 = a2[22];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = v22;
  v23 = a2[24];
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_QWORD *)(a1 + 192) = v23;
  v24 = a2[26];
  *(_QWORD *)(a1 + 200) = a2[25];
  *(_QWORD *)(a1 + 208) = v24;
  v25 = a2[27];
  v26 = a2[28];
  *(_QWORD *)(a1 + 216) = v25;
  *(_QWORD *)(a1 + 224) = v26;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t *assignWithCopy for AirPodsPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  sub_10001BBBC(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[5];
  v13 = a2[6];
  sub_10001BBBC(v12, v13);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[7];
  v17 = a2[8];
  sub_10001BBBC(v16, v17);
  v18 = a1[7];
  v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[9];
  v21 = a2[10];
  sub_10001BBBC(v20, v21);
  v22 = a1[9];
  v23 = a1[10];
  a1[9] = v20;
  a1[10] = v21;
  sub_10001BC14(v22, v23);
  v24 = a2[11];
  v25 = a2[12];
  sub_10001BBBC(v24, v25);
  v26 = a1[11];
  v27 = a1[12];
  a1[11] = v24;
  a1[12] = v25;
  sub_10001BC14(v26, v27);
  v28 = a2 + 13;
  v29 = a2[14];
  if ((unint64_t)a1[14] >> 60 != 15)
  {
    if (v29 >> 60 != 15)
    {
      v31 = *v28;
      sub_10001BBBC(*v28, a2[14]);
      v32 = a1[13];
      v33 = a1[14];
      a1[13] = v31;
      a1[14] = v29;
      sub_10001BC14(v32, v33);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)(a1 + 13));
    goto LABEL_6;
  }
  if (v29 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 13) = *(_OWORD *)v28;
    goto LABEL_8;
  }
  v30 = *v28;
  sub_10001BBBC(*v28, a2[14]);
  a1[13] = v30;
  a1[14] = v29;
LABEL_8:
  a1[15] = a2[15];
  v34 = a2[16];
  a1[16] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  v35 = a2[18];
  a1[18] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  v36 = a2[20];
  a1[20] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  v37 = a2[22];
  a1[22] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  v38 = a2[24];
  a1[24] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  a1[25] = a2[25];
  v39 = a2[26];
  a1[26] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  v40 = a2[28];
  a1[28] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AirPodsPairingLockAckRequestContent(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for AirPodsPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = v6;
  sub_10001BC14(v7, v8);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001BC14(v9, v10);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_10001BC14(v11, v12);
  v13 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001BC14(v13, v14);
  v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10001BC14(v15, v16);
  v17 = (_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a1 + 112);
  if (v18 >> 60 != 15)
  {
    v19 = *(_QWORD *)(a2 + 112);
    if (v19 >> 60 != 15)
    {
      v20 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = *v17;
      *(_QWORD *)(a1 + 112) = v19;
      sub_10001BC14(v20, v18);
      goto LABEL_6;
    }
    sub_1000DC964(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v17;
LABEL_6:
  v21 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v21;
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v23;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v24;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v25;
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingLockAckRequestContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 176);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 176) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckRequestContent()
{
  return &type metadata for AirPodsPairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckRequest()
{
  return &type metadata for AirPodsPairingLockAckRequest;
}

unint64_t sub_100ABF1F8()
{
  unint64_t result;

  result = qword_101112880;
  if (!qword_101112880)
  {
    result = swift_getWitnessTable(byte_100E5BA54, &type metadata for AirPodsPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112880);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingLockAckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_100ABF288 + 4 * byte_100E5B8A4[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_100ABF2BC + 4 * byte_100E5B89F[v4]))();
}

uint64_t sub_100ABF2BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ABF2C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100ABF2CCLL);
  return result;
}

uint64_t sub_100ABF2D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100ABF2E0);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_100ABF2E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ABF2EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_100ABF30C()
{
  unint64_t result;

  result = qword_101112888;
  if (!qword_101112888)
  {
    result = swift_getWitnessTable(byte_100E5BA2C, &type metadata for AirPodsPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112888);
  }
  return result;
}

unint64_t sub_100ABF354()
{
  unint64_t result;

  result = qword_101112890;
  if (!qword_101112890)
  {
    result = swift_getWitnessTable(asc_100E5B99C, &type metadata for AirPodsPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112890);
  }
  return result;
}

unint64_t sub_100ABF39C()
{
  unint64_t result;

  result = qword_101112898;
  if (!qword_101112898)
  {
    result = swift_getWitnessTable(aE_42, &type metadata for AirPodsPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112898);
  }
  return result;
}

uint64_t sub_100ABF3E0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v10 = 0xEC0000007265626DLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374726563, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v12 = 0xED00006E67695379;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0xD000000000000013)
  {
    v13 = 0x8000000100EC3110;
    if (a2 == 0x8000000100EC3110)
      goto LABEL_49;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC3110, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000011)
  {
    v14 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_54;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v15 = 0xE900000000000064;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v16 = 0xEB00000000644970;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_66;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v17 = 0xEB000000006E6F69;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v18 = 0xEF6E6F6973726556;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v19 = 0xE900000000000064;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_84;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 14;
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v20 & 1) != 0)
      return 14;
    else
      return 15;
  }
}

uint64_t *sub_100ABFA64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_100ABFAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100ABFB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100ABFBA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100ABFC00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ABFC0C);
}

uint64_t sub_100ABFC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100ABFC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ABFC54);
}

uint64_t sub_100ABFC54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011128F8, (uint64_t)&nominal type descriptor for SecureLocationsKeyUpdateAckEnvelope);
}

uint64_t sub_100ABFCA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_100ABFD1C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v13 = a3[7];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain(v12);
    sub_10001BBBC(v16, v17);
    *v14 = v16;
    v14[1] = v17;
    v18 = a3[8];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *v20;
    v22 = v20[1];
    sub_10001BBBC(*v20, v22);
    *v19 = v21;
    v19[1] = v22;
  }
  return a1;
}

uint64_t sub_100ABFE00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
  return sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 32)), *(_QWORD *)(a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_100ABFE68(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v12 = a3[7];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  swift_bridgeObjectRetain(v11);
  sub_10001BBBC(v15, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = a3[8];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_10001BBBC(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  return a1;
}

uint64_t sub_100ABFF20(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v11 = a3[7];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_10001BBBC(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_10001BC14(v16, v17);
  v18 = a3[8];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_10001BBBC(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_10001BC14(v23, v24);
  return a1;
}

uint64_t sub_100AC0000(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100AC0078(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_10001BC14(v13, v14);
  v15 = a3[8];
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_10001BC14(v16, v17);
  return a1;
}

uint64_t sub_100AC011C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AC0128);
}

uint64_t sub_100AC0128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100AC01A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AC01B4);
}

uint64_t sub_100AC01B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SecureLocationsKeyUpdateEnvelope(uint64_t a1)
{
  return sub_10001B630(a1, qword_101112988, (uint64_t)&nominal type descriptor for SecureLocationsKeyUpdateEnvelope);
}

uint64_t sub_100AC0244(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E5BB28;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_100E5BB40;
    v4[4] = &unk_100E5BB40;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100AC02D0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AC0308 + 4 * byte_100E5BAB0[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_100AC0308()
{
  return 0xD000000000000010;
}

uint64_t sub_100AC0324()
{
  return 0x7865646E69;
}

uint64_t sub_100AC0338()
{
  return 0x4B65746176697270;
}

unint64_t sub_100AC0350()
{
  return 0xD000000000000013;
}

uint64_t sub_100AC0370(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *updated;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  char v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011129F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100AC0EA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys, v11, v9, v10);
  LOBYTE(v22) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_10001AA68(&qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
    v15 = (uint64_t *)(v3 + updated[5]);
    v16 = *v15;
    v17 = v15[1];
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v22, v5);
    *(_QWORD *)&v22 = *(_QWORD *)(v3 + updated[6]);
    v23 = 2;
    v18 = sub_1008BC918();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for SecureLocationsIndex, v18);
    v22 = *(_OWORD *)(v3 + updated[7]);
    v23 = 3;
    v19 = sub_100068134();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for PrivateKey, v19);
    v22 = *(_OWORD *)(v3 + updated[8]);
    v23 = 4;
    v20 = sub_1002FD6B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for HashedAdvertisement, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100AC058C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *updated;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  __int128 v30;
  char v31;

  v24 = a2;
  v3 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v27 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_10001A9A8(&qword_1011129D0);
  __chkstk_darwin(v26);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = (int *)type metadata accessor for SecureLocationsKeyUpdateEnvelope(0);
  __chkstk_darwin(updated);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v11);
  v12 = sub_100AC0EA8();
  v28 = v6;
  v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys, v12, v11, v10);
  if (v13)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v29 = a1;
  v14 = v25;
  LOBYTE(v30) = 0;
  v15 = sub_10001AA68((unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v3, &v30, v26, v3, v15);
  (*(void (**)(char *, _QWORD *, uint64_t))(v14 + 32))(v9, v27, v3);
  LOBYTE(v30) = 1;
  v17 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v16);
  v18 = (uint64_t *)&v9[updated[5]];
  *v18 = v17;
  v18[1] = v19;
  v31 = 2;
  v20 = sub_1008BC8D4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for SecureLocationsIndex, &v31, v16, &type metadata for SecureLocationsIndex, v20);
  *(_QWORD *)&v9[updated[6]] = v30;
  v31 = 3;
  v21 = sub_10007CB0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for PrivateKey, &v31, v16, &type metadata for PrivateKey, v21);
  *(_OWORD *)&v9[updated[7]] = v30;
  v31 = 4;
  v22 = sub_1002FD66C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for HashedAdvertisement, &v31, v16, &type metadata for HashedAdvertisement, v22);
  MEMORY[8](v28, v16);
  *(_OWORD *)&v9[updated[8]] = v30;
  sub_10005972C((uint64_t)v9, v24, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  return sub_1000126B0((uint64_t)v9, type metadata accessor for SecureLocationsKeyUpdateEnvelope);
}

uint64_t sub_100AC093C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011129F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100AC0EEC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys, v11, v9, v10);
  v19 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_10001AA68(&qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v19, v5, v12, v13);
  if (!v2)
  {
    v18 = *(_QWORD *)(v3 + *(int *)(type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0) + 20));
    v17 = 1;
    v14 = sub_1008BC918();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for SecureLocationsIndex, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100AC0A9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t updated;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  v24 = a2;
  v28 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v26 = (_QWORD **)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = sub_10001A9A8(&qword_1011129E0);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for SecureLocationsKeyUpdateAckEnvelope(0);
  __chkstk_darwin(updated);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100AC0EEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v22 = a1;
  v23 = v5;
  v14 = (uint64_t)v10;
  v15 = v25;
  v31 = 0;
  v16 = sub_10001AA68((unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v26;
  v17 = v27;
  v19 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, v28, &v31, v27, v28, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v18, v19);
  v30 = 1;
  v20 = sub_1008BC8D4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for SecureLocationsIndex, &v30, v17, &type metadata for SecureLocationsIndex, v20);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v17);
  *(_QWORD *)(v14 + *(int *)(updated + 20)) = v29;
  sub_10005972C(v14, v24, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  return sub_1000126B0(v14, type metadata accessor for SecureLocationsKeyUpdateAckEnvelope);
}

uint64_t sub_100AC0D2C()
{
  unsigned __int8 *v0;

  return sub_100AC02D0(*v0);
}

uint64_t sub_100AC0D34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100AC1278(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AC0D58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AC0EA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC0D80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AC0EA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AC0DA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AC058C(a1, a2);
}

uint64_t sub_100AC0DBC(_QWORD *a1)
{
  return sub_100AC0370(a1);
}

uint64_t sub_100AC0DD0()
{
  _BYTE *v0;

  if (*v0)
    return 0x7865646E69;
  else
    return 0x696669746E656469;
}

uint64_t sub_100AC0E0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100AC1488(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AC0E30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AC0EEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC0E58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AC0EEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AC0E80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AC0A9C(a1, a2);
}

uint64_t sub_100AC0E94(_QWORD *a1)
{
  return sub_100AC093C(a1);
}

unint64_t sub_100AC0EA8()
{
  unint64_t result;

  result = qword_1011129D8;
  if (!qword_1011129D8)
  {
    result = swift_getWitnessTable(asc_100E5BDC4, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011129D8);
  }
  return result;
}

unint64_t sub_100AC0EEC()
{
  unint64_t result;

  result = qword_1011129E8;
  if (!qword_1011129E8)
  {
    result = swift_getWitnessTable(byte_100E5BD74, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011129E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsKeyUpdateAckEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100AC0F7C + 4 * byte_100E5BABA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100AC0FB0 + 4 * byte_100E5BAB5[v4]))();
}

uint64_t sub_100AC0FB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AC0FB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AC0FC0);
  return result;
}

uint64_t sub_100AC0FCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AC0FD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100AC0FD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AC0FE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsKeyUpdateAckEnvelope.CodingKeys()
{
  return &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsKeyUpdateEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100AC1048 + 4 * byte_100E5BAC4[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100AC107C + 4 * byte_100E5BABF[v4]))();
}

uint64_t sub_100AC107C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AC1084(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AC108CLL);
  return result;
}

uint64_t sub_100AC1098(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AC10A0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100AC10A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AC10AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsKeyUpdateEnvelope.CodingKeys()
{
  return &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys;
}

unint64_t sub_100AC10CC()
{
  unint64_t result;

  result = qword_101112A00;
  if (!qword_101112A00)
  {
    result = swift_getWitnessTable(asc_100E5BC94, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112A00);
  }
  return result;
}

unint64_t sub_100AC1114()
{
  unint64_t result;

  result = qword_101112A08;
  if (!qword_101112A08)
  {
    result = swift_getWitnessTable(byte_100E5BD4C, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112A08);
  }
  return result;
}

unint64_t sub_100AC115C()
{
  unint64_t result;

  result = qword_101112A10;
  if (!qword_101112A10)
  {
    result = swift_getWitnessTable(asc_100E5BCBC, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112A10);
  }
  return result;
}

unint64_t sub_100AC11A4()
{
  unint64_t result;

  result = qword_101112A18;
  if (!qword_101112A18)
  {
    result = swift_getWitnessTable(byte_100E5BCE4, &type metadata for SecureLocationsKeyUpdateAckEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112A18);
  }
  return result;
}

unint64_t sub_100AC11EC()
{
  unint64_t result;

  result = qword_101112A20;
  if (!qword_101112A20)
  {
    result = swift_getWitnessTable(byte_100E5BC04, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112A20);
  }
  return result;
}

unint64_t sub_100AC1234()
{
  unint64_t result;

  result = qword_101112A28;
  if (!qword_101112A28)
  {
    result = swift_getWitnessTable(byte_100E5BC2C, &type metadata for SecureLocationsKeyUpdateEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112A28);
  }
  return result;
}

uint64_t sub_100AC1278(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EED700;
    if (a2 == 0x8000000100EED700)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EED700, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    v9 = 0xEA00000000007965;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100ED0190)
  {
    swift_bridgeObjectRelease(0x8000000100ED0190);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100ED0190, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100AC1488(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100AC157C()
{
  uint64_t v0;

  v0 = type metadata accessor for Service(0);
  return Identifier.init(stringLiteral:)("15190001-12F4-C226-88ED-2AC5579F2A85", 36, 2, v0);
}

uint64_t sub_100AC15BC()
{
  uint64_t v0;

  v0 = type metadata accessor for Characteristic(0);
  return Identifier.init(stringLiteral:)("8E0C0001-1D68-FB92-BF61-48377421680E", 36, 2, v0);
}

uint64_t sub_100AC15FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v4 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v2, v3, &type metadata for () + 1, v4);
  swift_retain();
  swift_release();
  v5 = swift_allocObject(&unk_1010A9468, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v6 = swift_allocObject(&unk_1010A9490, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_100AC184C;
  *(_QWORD *)(v6 + 24) = v5;
  swift_retain_n(v5, 2);
  v7 = sub_10001A9A8(&qword_101112A30);
  v8 = sub_100AC1880();
  v9 = Publisher<>.sink(receiveValue:)(sub_100AC1878, v6, v7, v8);
  swift_release();
  swift_release();
  swift_release_n(v5, 2);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription) = v9;
  return sub_1007BD688(v10);
}

uint64_t sub_100AC1758()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100AC177C(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _BYTE v12[24];

  v6 = sub_10001A9A8(&qword_1010EF200);
  __chkstk_darwin(v6);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, a1, v9);
  v8[*(int *)(v6 + 48)] = a2;
  a3 += 16;
  swift_beginAccess(a3, v12, 0, 0);
  if (swift_weakLoadStrong(a3))
    swift_release();
  return sub_100AC18CC((uint64_t)v8);
}

uint64_t sub_100AC184C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100AC177C(a1, a2, v2);
}

uint64_t sub_100AC1854()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AC1878(uint64_t a1)
{
  uint64_t v1;

  return sub_10010FBB4(a1, *(void (**)(char *))(v1 + 16));
}

unint64_t sub_100AC1880()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101112A38;
  if (!qword_101112A38)
  {
    v1 = sub_10001F784(&qword_101112A30);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for AnyPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101112A38);
  }
  return result;
}

uint64_t sub_100AC18CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF200);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100AC190C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7BD8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7BD8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000015, 0x8000000100E5BE20);
}

uint64_t sub_100AC198C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7BF0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7BF0);
  if (qword_1010EA178 != -1)
    swift_once(&qword_1010EA178, sub_100AC190C);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7BD8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100AC1A1C()
{
  uint64_t result;
  uint64_t v1;

  result = kFMIPLocatableStateReportedNotification;
  if (kFMIPLocatableStateReportedNotification)
  {
    result = static String._unconditionallyBridgeFromObjectiveC(_:)(kFMIPLocatableStateReportedNotification);
    qword_101112A40 = result;
    *(_QWORD *)algn_101112A48 = v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AC1A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[4];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_1010A9530, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain();
  if (v9 == 1)
  {
    sub_10012FC44((uint64_t)v4);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_1010A9558, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_101112B90;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  swift_task_create(v13, v20, &type metadata for () + 1, &unk_1010EE4A0, v19);
  return swift_release();
}

uint64_t sub_100AC1C1C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_101112A7C);
  *(_QWORD *)(v4 + 16) = v6;
  *v6 = v4;
  v6[1] = sub_100004A74;
  v6[3] = a4;
  v6[4] = *a4;
  return swift_task_switch(sub_100AC1CA4, a4, 0);
}

uint64_t sub_100AC1C84()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100AC1CA4, v0, 0);
}

uint64_t sub_100AC1CA4()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (__int128 *)(v0 + 24);
  if (qword_1010EA188 != -1)
    swift_once(&qword_1010EA188, sub_100AC1A1C);
  *(_QWORD *)(v0 + 16) = dispatch thunk of DarwinNotificationHelper.publisher(name:)(qword_101112A40, *(_QWORD *)algn_101112A48);
  v2 = swift_allocObject(&unk_1010A94B8, 32, 7);
  v3 = *v1;
  *(_OWORD *)(v2 + 16) = *v1;
  v4 = v3;
  swift_retain();
  v5 = sub_10001A9A8(&qword_101112B50);
  v6 = sub_1000193A4(&qword_101112B58, &qword_101112B50, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v7 = Publisher<>.sink(receiveValue:)(sub_100AC2A94, v2, v5, v6);
  swift_release();
  swift_release();
  *(_QWORD *)(v4 + 128) = v7;
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AC1F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v5 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = sub_100AC2A9C();
  v10 = (_QWORD *)swift_allocObject(&unk_1010A94E0, 48, 7);
  v10[2] = a2;
  v10[3] = v9;
  v10[4] = a2;
  v10[5] = a3;
  swift_retain_n(a2, 2);
  sub_100691AC0((uint64_t)v7, (uint64_t)&unk_101112B70, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_100AC2038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  return swift_task_switch(sub_100AC2050, a4, 0);
}

uint64_t sub_100AC2050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v7 + 120);
  *(_QWORD *)(v0 + 16) = 0xD000000000000016;
  *(_QWORD *)(v0 + 24) = 0x8000000100EED800;
  v1 = swift_allocObject(&unk_1010A9508, 32, 7);
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = v7;
  swift_retain();
  v2 = sub_10001A9A8(&qword_1010EE320);
  v3 = sub_1000193A4(&qword_1010EE470, &qword_1010EE320, (const char *)&protocol conformance descriptor for AsyncKeyedThrottle<A>);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100AC2124, v4, v5);
}

uint64_t sub_100AC2124()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)(v0 + 16, &unk_101112B80, v1);
  swift_release(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AC2174(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100AC218C, 0, 0);
}

uint64_t sub_100AC218C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v7;

  if (qword_1010EA180 != -1)
    swift_once(&qword_1010EA180, sub_100AC198C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7BF0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Located state reported.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (_QWORD *)swift_task_alloc(dword_101112A84);
  *(_QWORD *)(v0 + 24) = v6;
  *v6 = v0;
  v6[1] = sub_100AC229C;
  v7 = *(_QWORD *)(v0 + 16);
  v6[16] = v7;
  return swift_task_switch(sub_100AC2300, v7, 0);
}

uint64_t sub_100AC229C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(uint64_t))(v2 + 8))(1);
}

uint64_t sub_100AC22E8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_100AC2300, v0, 0);
}

uint64_t sub_100AC2300()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCE8 + dword_1010EBCE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
    *(_QWORD *)(v0 + 136) = v2;
    *v2 = v0;
    v2[1] = sub_100AC23E4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AC23E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AC2440, v3, 0);
}

uint64_t sub_100AC2440()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 144))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10110181C);
    *(_QWORD *)(v0 + 152) = v2;
    *v2 = v0;
    v2[1] = sub_100AC2698;
    return sub_10061A894();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD00000000000001CLL;
    v6[1] = 0x8000000100ECBC60;
    swift_willThrow(v5);
    if (qword_1010EA180 != -1)
      swift_once(&qword_1010EA180, sub_100AC198C);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7BF0);
    swift_errorRetain(v5);
    v8 = swift_errorRetain(v5);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      swift_errorRetain(v5);
      v13 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v0 + 120) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v11 + 4, v11 + 12);
      *v12 = v13;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Own device publish activity failed: %{public}@.", v11, 0xCu);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AC2698()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 152);
  *(_QWORD *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100AC26FC;
  else
    v4 = sub_10079F060;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), 0);
}

uint64_t sub_100AC26FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  v1 = *(_QWORD *)(v0 + 160);
  if (qword_1010EA180 != -1)
    swift_once(&qword_1010EA180, sub_100AC198C);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7BF0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 120) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Own device publish activity failed: %{public}@.", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AC28C8()
{
  _QWORD *v0;

  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocatableStateMonitor()
{
  return objc_opt_self(_TtC12searchpartyd21LocatableStateMonitor);
}

_QWORD *sub_100AC291C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v11;

  v1 = v0;
  swift_defaultActor_initialize(v0);
  v2 = sub_10001A9A8(&qword_101106C20);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100E22B00;
  if (qword_1010EA188 != -1)
    swift_once(&qword_1010EA188, sub_100AC1A1C);
  v4 = *(_QWORD *)algn_101112A48;
  *(_QWORD *)(v3 + 32) = qword_101112A40;
  *(_QWORD *)(v3 + 40) = v4;
  v5 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_bridgeObjectRetain(v4);
  v1[14] = DarwinNotificationHelper.init(subscribedToNames:)(v3, v6);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1BDA8(v11);
  v8 = v7;
  swift_bridgeObjectRelease();
  v9 = sub_10001A9A8(&qword_1010EE320);
  v1[15] = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v9, v8);
  v1[16] = 0;
  return v1;
}

uint64_t sub_100AC2A70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AC2A94(uint64_t a1)
{
  uint64_t v1;

  return sub_100AC1F5C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100AC2A9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101112B68;
  if (!qword_101112B68)
  {
    v1 = type metadata accessor for LocatableStateMonitor();
    result = swift_getWitnessTable(asc_100E5BE58, v1);
    atomic_store(result, (unint64_t *)&qword_101112B68);
  }
  return result;
}

uint64_t sub_100AC2AE0()
{
  return sub_1004EF2EC(48);
}

uint64_t sub_100AC2AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_101112B64);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004C28;
  *(_OWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_100AC2050, v3, 0);
}

uint64_t sub_100AC2B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_101112B7C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000D9CC0;
  v3[2] = v2;
  return swift_task_switch(sub_100AC218C, 0, 0);
}

uint64_t sub_100AC2BA8()
{
  return sub_1004EF2EC(40);
}

uint64_t sub_100AC2BB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (_QWORD *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101112B8C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100AC1C1C(a1, v4, v5, v6);
}

uint64_t sub_100AC2C1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100AC2C44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int64_t v23;

  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v23 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  v5 = _swiftEmptyArrayStorage;
  if (!v3)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  for (i = v6 | (v4 << 6); ; i = __clz(__rbit64(v9)) + (v4 << 6))
  {
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v13 = *v11;
    v12 = v11[1];
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 32 * i);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[2];
    v18 = v14[3];
    sub_10001BBBC(*v11, v12);
    sub_10001BBBC(v13, v12);
    sub_10001BBBC(v15, v16);
    sub_10001BBBC(v17, v18);
    sub_10001BC14(v13, v12);
    sub_10001BC14(v15, v16);
    sub_10001BC14(v17, v18);
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_1007C77D4(0, v5[2] + 1, 1, v5);
    v20 = v5[2];
    v19 = v5[3];
    if (v20 >= v19 >> 1)
      v5 = sub_1007C77D4((_QWORD *)(v19 > 1), v20 + 1, 1, v5);
    v5[2] = v20 + 1;
    v21 = &v5[2 * v20];
    v21[4] = v13;
    v21[5] = v12;
    if (v3)
      goto LABEL_4;
LABEL_5:
    v8 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v8 >= v23)
      goto LABEL_27;
    v9 = *(_QWORD *)(v22 + 8 * v8);
    ++v4;
    if (!v9)
    {
      v4 = v8 + 1;
      if (v8 + 1 >= v23)
        goto LABEL_27;
      v9 = *(_QWORD *)(v22 + 8 * v4);
      if (!v9)
      {
        v4 = v8 + 2;
        if (v8 + 2 >= v23)
          goto LABEL_27;
        v9 = *(_QWORD *)(v22 + 8 * v4);
        if (!v9)
        {
          v4 = v8 + 3;
          if (v8 + 3 >= v23)
            goto LABEL_27;
          v9 = *(_QWORD *)(v22 + 8 * v4);
          if (!v9)
            break;
        }
      }
    }
LABEL_20:
    v3 = (v9 - 1) & v9;
  }
  v10 = v8 + 4;
  if (v10 >= v23)
  {
LABEL_27:
    swift_release();
    return;
  }
  v9 = *(_QWORD *)(v22 + 8 * v10);
  if (v9)
  {
    v4 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    v4 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v4 >= v23)
      goto LABEL_27;
    v9 = *(_QWORD *)(v22 + 8 * v4);
    ++v10;
    if (v9)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

_QWORD *sub_100AC2EBC()
{
  uint64_t v0;
  uint64_t RequestBeacon;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD *v23;
  _QWORD *v24;

  v23 = _swiftEmptyArrayStorage;
  v24 = _swiftEmptyArrayStorage;
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(RequestBeacon + 28)));
  sub_100AC99B8(v2, (void (*)(uint64_t, unint64_t, uint64_t, uint64_t))sub_100ACA820);
  swift_bridgeObjectRelease();
  v22[0] = v24;
  swift_bridgeObjectRetain_n(v24, 2);
  sub_100AC42E8(v22);
  swift_bridgeObjectRelease();
  v3 = v22[0];
  v4 = *(_QWORD *)(v22[0] + 16);
  if (v4)
  {
    v22[0] = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v4, 0);
    v5 = (_QWORD *)v22[0];
    v6 = (uint64_t *)(v3 + 40);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      v22[0] = v5;
      v9 = v5[2];
      v10 = v5[3];
      swift_bridgeObjectRetain(v7);
      if (v9 >= v10 >> 1)
      {
        sub_10009A2F4(v10 > 1, v9 + 1, 1);
        v5 = (_QWORD *)v22[0];
      }
      v6 += 3;
      v5[2] = v9 + 1;
      v11 = &v5[2 * v9];
      v11[4] = v8;
      v11[5] = v7;
      --v4;
    }
    while (v4);
    swift_release();
  }
  else
  {
    swift_release();
    v5 = _swiftEmptyArrayStorage;
  }
  v22[0] = v23;
  swift_bridgeObjectRetain_n(v23, 2);
  sub_100AC42E8(v22);
  swift_bridgeObjectRelease();
  v12 = v22[0];
  v13 = *(_QWORD *)(v22[0] + 16);
  if (v13)
  {
    v22[0] = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v13, 0);
    v14 = v22[0];
    v15 = (uint64_t *)(v12 + 40);
    do
    {
      v17 = *(v15 - 1);
      v16 = *v15;
      v22[0] = v14;
      v18 = *(_QWORD *)(v14 + 16);
      v19 = *(_QWORD *)(v14 + 24);
      swift_bridgeObjectRetain(v16);
      if (v18 >= v19 >> 1)
      {
        sub_10009A2F4(v19 > 1, v18 + 1, 1);
        v14 = v22[0];
      }
      v15 += 3;
      *(_QWORD *)(v14 + 16) = v18 + 1;
      v20 = v14 + 16 * v18;
      *(_QWORD *)(v20 + 32) = v17;
      *(_QWORD *)(v20 + 40) = v16;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v5;
}

uint64_t sub_100AC3124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int *RequestBeacon;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = sub_10001A9A8(&qword_101102348);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  if ((static UUID.== infix(_:_:)(a1, v2) & 1) != 0)
  {
    RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
    sub_100AC6668(v2 + RequestBeacon[5], a1 + RequestBeacon[5], (uint64_t)v11);
    sub_100AC6668(v2 + RequestBeacon[6], a1 + RequestBeacon[6], (uint64_t)v9);
    v13 = RequestBeacon[7];
    v14 = *(_QWORD *)(v2 + v13);
    v15 = *(_QWORD *)(a1 + v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
    v32 = v14;
    sub_100AC941C(v15, (uint64_t)sub_100AC98EC, 0, isUniquelyReferenced_nonNull_native, &v32);
    if (v3)
    {
      result = swift_bridgeObjectRelease();
      __break(1u);
    }
    else
    {
      v31 = v32;
      swift_bridgeObjectRelease();
      v17 = RequestBeacon[9];
      v18 = *(_QWORD *)(v2 + v17);
      v19 = *(_QWORD *)(a1 + v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      v20 = swift_isUniquelyReferenced_nonNull_native(v18);
      v32 = v18;
      sub_100AC91D8(v19, (uint64_t)sub_100AC9898, 0, v20, &v32);
      v21 = v32;
      swift_bridgeObjectRelease();
      v22 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(a2, v2, v22);
      v23 = (char *)(v2 + RequestBeacon[8]);
      v24 = *v23;
      LOBYTE(v18) = v23[1];
      v25 = *((_QWORD *)v23 + 1);
      sub_100AC9910((uint64_t)v11, a2 + RequestBeacon[5]);
      result = sub_100AC9910((uint64_t)v9, a2 + RequestBeacon[6]);
      *(_QWORD *)(a2 + RequestBeacon[7]) = v31;
      v27 = a2 + RequestBeacon[8];
      *(_BYTE *)v27 = v24;
      *(_BYTE *)(v27 + 1) = v18;
      *(_QWORD *)(v27 + 8) = v25;
      *(_QWORD *)(a2 + RequestBeacon[9]) = v21;
    }
  }
  else
  {
    v28 = sub_100AC337C();
    v29 = swift_allocError(&type metadata for FetchRequestBeacon.FetchRequestBeaconError, v28, 0, 0);
    return swift_willThrow(v29);
  }
  return result;
}

unint64_t sub_100AC337C()
{
  unint64_t result;

  result = qword_101112BB0;
  if (!qword_101112BB0)
  {
    result = swift_getWitnessTable(byte_100E5C34C, &type metadata for FetchRequestBeacon.FetchRequestBeaconError);
    atomic_store(result, (unint64_t *)&qword_101112BB0);
  }
  return result;
}

uint64_t type metadata accessor for FetchRequestBeacon(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_101112CC8, (uint64_t)&nominal type descriptor for FetchRequestBeacon);
}

uint64_t sub_100AC33D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, _QWORD *a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *RequestBeacon;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  char v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int v73;
  int v74;
  _QWORD *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v68 = a8;
  v73 = a7;
  v66 = a1;
  v67 = a9;
  v16 = sub_10001A9A8(&qword_101102348);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)v65 - v20;
  v22 = type metadata accessor for HashAlgorithm(0);
  v77 = *(_QWORD *)(v22 - 8);
  v78 = v22;
  __chkstk_darwin(v22);
  v76 = (char *)v65 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for TimeBasedKey(0);
  __chkstk_darwin(v81);
  v26 = (char *)v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __OFSUB__(a6 >> 1, a5);
  v28 = (a6 >> 1) - a5;
  v71 = v21;
  v72 = v19;
  v69 = a3;
  v70 = a2;
  if (v28)
  {
    if (!((v28 < 0) ^ v27 | (v28 == 0)))
    {
      v29 = *(_QWORD *)(v24 + 72);
      LODWORD(v80) = enum case for HashAlgorithm.sha256(_:);
      swift_unknownObjectRetain(a3);
      v75 = _swiftEmptyDictionarySingleton;
      v79 = v29;
      v82 = v28;
      sub_10005972C(a4 + v29 * a5, (uint64_t)v26, type metadata accessor for TimeBasedKey);
      v30 = &v26[*(int *)(v81 + 24)];
      v31 = *((_QWORD *)v30 + 2);
      v32 = *((_QWORD *)v30 + 3);
      sub_10001BBBC(v31, v32);
      sub_1007E7118(v31, v32);
      v34 = v33;
      sub_1007E3D28(v33, 0);
      v36 = v35;
      CCECCryptorRelease(v34);
      sub_10001BC14(v31, v32);
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x100AC3D8CLL);
  }
  v75 = _swiftEmptyDictionarySingleton;
  if (a11[2])
  {
    v74 = enum case for HashAlgorithm.sha256(_:);
    swift_bridgeObjectRetain(a11);
    v65[1] = a11;
    v38 = a11[4];
    v37 = a11[5];
    v40 = a11[6];
    v39 = a11[7];
    sub_10001BBBC(v38, v37);
    v80 = v39;
    sub_10001BBBC(v40, v39);
    sub_10001BBBC(v38, v37);
    sub_1007E7118(v38, v37);
    v42 = v41;
    sub_1007E3D28(v41, 0);
    v83 = 0;
    v44 = v43;
    CCECCryptorRelease(v42);
    sub_10001BC14(v38, v37);
    v45 = (char *)&loc_100AC38F0 + *((int *)qword_100AC41C8 + (v44 >> 62));
    v81 = v40;
    v82 = v38;
    __asm { BR              X9 }
  }
  v46 = 0xE900000000000079;
  v47 = 0x7972616D697250;
  swift_bridgeObjectRelease();
  if ((_BYTE)v73)
  {
    if (v73 == 1)
      v48 = 0x7261646E6F636553;
    else
      v48 = 0x6F4C657275636553;
    if (v73 != 1)
      v46 = 0xEF736E6F69746163;
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v46, 0x7972616D697250, 0xE700000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v49 & 1) == 0)
    {
      v50 = type metadata accessor for DateInterval(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v21, 1, 1, v50);
      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v51 = type metadata accessor for DateInterval(0);
  v52 = *(_QWORD *)(v51 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v21, a2, v51);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v21, 0, 1, v51);
LABEL_16:
  if ((_BYTE)v73)
  {
    if (v73 == 1)
    {
      swift_unknownObjectRelease(a3);
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
    v47 = 0x6F4C657275636553;
    v53 = 0xEF736E6F69746163;
  }
  else
  {
    v53 = 0xE700000000000000;
  }
  v54 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v53, 0x7261646E6F636553, 0xE900000000000079, 0);
  swift_unknownObjectRelease(a3);
  swift_bridgeObjectRelease();
  if ((v54 & 1) == 0)
  {
    v57 = type metadata accessor for DateInterval(0);
    v58 = *(_QWORD *)(v57 - 8);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(a2, v57);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56))(v19, 1, 1, v57);
    goto LABEL_24;
  }
LABEL_22:
  v55 = type metadata accessor for DateInterval(0);
  v56 = *(_QWORD *)(v55 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v19, a2, v55);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v19, 0, 1, v55);
LABEL_24:
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  v60 = v67;
  sub_100AC9910((uint64_t)v21, v67 + RequestBeacon[5]);
  sub_100AC9910((uint64_t)v19, v60 + RequestBeacon[6]);
  v61 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 32))(v60, v66, v61);
  *(_QWORD *)(v60 + RequestBeacon[7]) = v75;
  v63 = v60 + RequestBeacon[8];
  v64 = BYTE1(v68);
  *(_BYTE *)v63 = v68;
  *(_BYTE *)(v63 + 1) = v64 & 1;
  *(_QWORD *)(v63 + 8) = a10;
  *(_QWORD *)(v60 + RequestBeacon[9]) = _swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_100AC41D8(char a1, uint64_t a2, void *a3)
{
  Swift::String v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  char v12;
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v6._countAndFlagsBits = 0xD000000000000022;
  v6._object = (void *)0x8000000100EED900;
  String.append(_:)(v6);
  v12 = a1;
  _print_unlocked<A, B>(_:_:)(&v12, v13, &type metadata for FetchRequestContext.FetchRequestContextPolicy, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7._object = (void *)0x8000000100EED930;
  v7._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v7);
  if (a3)
  {
    v8 = a3;
  }
  else
  {
    a2 = 0x74657320746F6ELL;
    v8 = (void *)0xE700000000000000;
  }
  swift_bridgeObjectRetain(a3);
  v9._countAndFlagsBits = a2;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 93;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v13[0];
}

Swift::Int sub_100AC42E8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_10088F204(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_100AC880C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100AC4350()
{
  uint64_t v0;
  _QWORD *v1;

  v0 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  sub_1000234D8(v0, qword_101112B98);
  v1 = (_QWORD *)sub_10001A9E8(v0, (uint64_t)qword_101112B98);
  *v1 = sub_1002994E8;
  v1[1] = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t sub_100AC43B4(char *a1, char *a2)
{
  return sub_100513BA8(*a1, *a2);
}

Swift::Int sub_100AC43C0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6974737561687865;
  else
    v2 = 0x6F4C74736574616CLL;
  if (v1)
    v3 = 0xEA00000000006576;
  else
    v3 = 0xEE006E6F69746163;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100AC4450(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6974737561687865;
  else
    v2 = 0x6F4C74736574616CLL;
  if (*v1)
    v3 = 0xEA00000000006576;
  else
    v3 = 0xEE006E6F69746163;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100AC44BC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6974737561687865;
  else
    v2 = 0x6F4C74736574616CLL;
  if (v1)
    v3 = 0xEA00000000006576;
  else
    v3 = 0xEE006E6F69746163;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100AC4548@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104BC10, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100AC45A4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6F4C74736574616CLL;
  if (*v1)
    v2 = 0x6974737561687865;
  v3 = 0xEE006E6F69746163;
  if (*v1)
    v3 = 0xEA00000000006576;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100AC45F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100ACC554();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100AC4640(__int16 a1, uint64_t a2)
{
  char v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v13;
  _QWORD v14[2];

  v3 = HIBYTE(a1);
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v4._object = (void *)0x8000000100EED8E0;
  v4._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x203A65646F6D202CLL;
  v7._object = (void *)0xE800000000000000;
  String.append(_:)(v7);
  LOBYTE(v13) = v3 & 1;
  _print_unlocked<A, B>(_:_:)(&v13, v14, &type metadata for FetchRequestBeacon.SearchContext.Mode, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 0x203A65676170202CLL;
  v8._object = (void *)0xE800000000000000;
  String.append(_:)(v8);
  v13 = a2;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = 23854;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  return v14[0];
}

uint64_t sub_100AC4784(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v7 = sub_10001A9A8(&qword_101112E30);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_100ACD03C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchRequestBeacon.SearchContext.CodingKeys, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys, v13, v11, v12);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v7);
  if (!v3)
  {
    v19 = BYTE1(a2) & 1;
    v18 = 1;
    v14 = sub_100ACD080();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v7, &type metadata for FetchRequestBeacon.SearchContext.Mode, v14);
    v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100AC48E0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701080941;
  if (*v0 != 1)
    v1 = 1701273968;
  if (*v0)
    return v1;
  else
    return 0x72617069746C756DLL;
}

uint64_t sub_100AC4938@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100ACCD18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AC495C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACD03C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC4984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACD03C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AC49AC(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_100AC4784(a1, v2 | *v1, *((_QWORD *)v1 + 1));
}

uint64_t sub_100AC49DC()
{
  unsigned __int8 *v0;
  __int16 v1;

  if (v0[1])
    v1 = 256;
  else
    v1 = 0;
  return sub_100AC4640(v1 | *v0, *((_QWORD *)v0 + 1));
}

void sub_100AC49FC(char *a1)
{
  sub_100513C5C(*a1);
}

void sub_100AC4A08()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_100AC4A58()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65746144646E65, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_100AC4AEC()
{
  __asm { BR              X10 }
}

uint64_t sub_100AC4B2C(uint64_t a1)
{
  String.hash(into:)(a1, 0x65746144646E65, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_100AC4BAC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_100AC4BF8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x65746144646E65, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100AC4C8C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100ACC480(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AC4CB8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100AC4CEC + 4 * byte_100E5BECF[*v0]))();
}

void sub_100AC4CEC(_QWORD *a1@<X8>)
{
  *a1 = 0x65746144646E65;
  a1[1] = 0xE700000000000000;
}

void sub_100AC4D08(_QWORD *a1@<X8>)
{
  *a1 = 7562345;
  a1[1] = 0xE300000000000000;
}

void sub_100AC4D1C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "secondaryIds");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_100AC4D40(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "searchContext");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100AC4D68()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AC4D9C + 4 * byte_100E5BED4[*v0]))(0x7461447472617473, 0xE900000000000065);
}

uint64_t sub_100AC4D9C()
{
  return 0x65746144646E65;
}

uint64_t sub_100AC4DB4()
{
  return 7562345;
}

uint64_t sub_100AC4DC4()
{
  return 0x7261646E6F636573;
}

uint64_t sub_100AC4DE4()
{
  return 0x6F43686372616573;
}

unint64_t sub_100AC4E08@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100ACC480(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AC4E2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC598();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC4E54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC598();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100AC4E7C(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  _QWORD *countAndFlagsBits;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t i;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  uint64_t v40;
  _BYTE *v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t j;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  _BYTE *v69;
  unint64_t v70;
  BOOL v71;
  char v72;
  char v73;
  Swift::String v74;
  uint64_t v75;
  Swift::String v76;
  Swift::String v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int64_t v81;
  int64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t k;
  int64_t v89;
  unint64_t v90;
  int64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  _BYTE *v103;
  unint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  char v114;
  unint64_t v115;
  unint64_t m;
  int64_t v117;
  unint64_t v118;
  int64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  char v123;
  unint64_t v124;
  unint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  unint64_t v128;
  char v129;
  uint64_t v130;
  _BYTE *v131;
  unint64_t v132;
  BOOL v133;
  char v134;
  char v135;
  Swift::String v136;
  uint64_t v137;
  Swift::String v138;
  Swift::String v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t (*v143)(uint64_t, uint64_t, uint64_t);
  int v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  Swift::String v150;
  void (*v151)(char *, uint64_t);
  Swift::String v152;
  uint64_t v153;
  Swift::String v154;
  Swift::String v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  Swift::String v161;
  void (*v162)(char *, uint64_t);
  Swift::String v163;
  uint64_t v164;
  Swift::String v165;
  Swift::String v166;
  uint64_t v167;
  Swift::String v168;
  Swift::String v169;
  int *v170;
  unsigned __int8 *v171;
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  Swift::String v175;
  Swift::String v176;
  unint64_t v177;
  unint64_t *v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  unint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  int *RequestBeacon;
  uint64_t v192;
  int64_t v193;
  uint64_t v194;
  unint64_t v195;
  char v196;
  Swift::String v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;

  v188 = a2;
  v3 = type metadata accessor for Date(0);
  v184 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v186 = (char *)&v179 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101102348);
  v6 = __chkstk_darwin(v5);
  v183 = (uint64_t)&v179 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v187 = (uint64_t)&v179 - v8;
  v9 = type metadata accessor for DateInterval(0);
  v189 = *(_QWORD *)(v9 - 8);
  v190 = v9;
  v10 = __chkstk_darwin(v9);
  v181 = (char *)&v179 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v180 = (char *)&v179 - v12;
  v198 = 0xD000000000000014;
  v199 = 0x8000000100EED820;
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  v192 = a1;
  v185 = RequestBeacon[7];
  v13 = *(_QWORD *)(a1 + v185);
  v14 = *(_QWORD *)(v13 + 64);
  v194 = v13 + 64;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  v200 = v13;
  swift_bridgeObjectRetain(v13);
  v19 = 0;
  countAndFlagsBits = _swiftEmptyArrayStorage;
  if (v17)
    goto LABEL_8;
LABEL_9:
  v26 = v19 + 1;
  v27 = v194;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
LABEL_186:
    __break(1u);
LABEL_187:
    __break(1u);
    goto LABEL_188;
  }
  if (v26 < v18)
  {
    v28 = *(_QWORD *)(v194 + 8 * v26);
    ++v19;
    if (v28)
      goto LABEL_26;
    v19 = v26 + 1;
    if (v26 + 1 >= v18)
      goto LABEL_36;
    v28 = *(_QWORD *)(v194 + 8 * v19);
    if (v28)
      goto LABEL_26;
    v19 = v26 + 2;
    if (v26 + 2 >= v18)
      goto LABEL_36;
    v28 = *(_QWORD *)(v194 + 8 * v19);
    if (v28)
      goto LABEL_26;
    v19 = v26 + 3;
    if (v26 + 3 >= v18)
      goto LABEL_36;
    v28 = *(_QWORD *)(v194 + 8 * v19);
    if (v28)
      goto LABEL_26;
    v19 = v26 + 4;
    if (v26 + 4 >= v18)
      goto LABEL_36;
    v28 = *(_QWORD *)(v194 + 8 * v19);
    if (v28)
    {
LABEL_26:
      v17 = (v28 - 1) & v28;
      for (i = __clz(__rbit64(v28)) + (v19 << 6); ; i = v24 | (v19 << 6))
      {
        v30 = *(_QWORD *)(v200 + 56) + 16 * i;
        v31 = *(_QWORD *)v30;
        v32 = *(unsigned __int8 *)(v30 + 8);
        v21 = 0x7261646E6F636553;
        v22 = 0xE900000000000079;
        if (v32 != 1)
        {
          if (v32 != 2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_30;
          }
          v21 = 0x6F4C657275636553;
          v22 = 0xEF736E6F69746163;
        }
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x7972616D697250, 0xE700000000000000, 0);
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0)
        {
          if (!v17)
            goto LABEL_9;
          goto LABEL_8;
        }
LABEL_30:
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(countAndFlagsBits);
        v197._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10009B5A4(0, countAndFlagsBits[2] + 1, 1);
          countAndFlagsBits = (_QWORD *)v197._countAndFlagsBits;
        }
        v35 = countAndFlagsBits[2];
        v34 = countAndFlagsBits[3];
        if (v35 >= v34 >> 1)
        {
          sub_10009B5A4(v34 > 1, v35 + 1, 1);
          countAndFlagsBits = (_QWORD *)v197._countAndFlagsBits;
        }
        countAndFlagsBits[2] = v35 + 1;
        v36 = &countAndFlagsBits[2 * v35];
        v36[4] = v31;
        *((_BYTE *)v36 + 40) = v32;
        if (!v17)
          goto LABEL_9;
LABEL_8:
        v24 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
      }
    }
    v29 = v26 + 5;
    if (v29 < v18)
    {
      v28 = *(_QWORD *)(v194 + 8 * v29);
      if (v28)
      {
        v19 = v29;
        goto LABEL_26;
      }
      while (1)
      {
        v19 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_189;
        if (v19 >= v18)
          break;
        v28 = *(_QWORD *)(v194 + 8 * v19);
        ++v29;
        if (v28)
          goto LABEL_26;
      }
    }
  }
LABEL_36:
  v182 = v3;
  swift_release();
  v37 = countAndFlagsBits[2];
  if (!v37)
  {
LABEL_86:
    swift_release();
    goto LABEL_87;
  }
  v38 = countAndFlagsBits[4];
  v39 = *((_BYTE *)countAndFlagsBits + 40);
  v40 = v37 - 1;
  if (v40)
  {
    v41 = countAndFlagsBits + 7;
    do
    {
      v42 = *((_QWORD *)v41 - 1);
      v44 = *v41;
      v41 += 16;
      v43 = v44;
      if (v42 < v38)
      {
        v38 = v42;
        v39 = v43;
      }
      --v40;
    }
    while (v40);
  }
  swift_release();
  v45 = 1 << *(_BYTE *)(v200 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & *(_QWORD *)(v200 + 64);
  v193 = (unint64_t)(v45 + 63) >> 6;
  swift_bridgeObjectRetain(v200);
  v48 = 0;
  v49 = _swiftEmptyArrayStorage;
  if (v47)
    goto LABEL_49;
LABEL_50:
  v55 = v48 + 1;
  if (__OFADD__(v48, 1))
    goto LABEL_187;
  v27 = v194;
  if (v55 < v193)
  {
    v56 = *(_QWORD *)(v194 + 8 * v55);
    ++v48;
    if (v56)
      goto LABEL_67;
    v48 = v55 + 1;
    if (v55 + 1 >= v193)
      goto LABEL_77;
    v56 = *(_QWORD *)(v194 + 8 * v48);
    if (v56)
      goto LABEL_67;
    v48 = v55 + 2;
    if (v55 + 2 >= v193)
      goto LABEL_77;
    v56 = *(_QWORD *)(v194 + 8 * v48);
    if (v56)
      goto LABEL_67;
    v48 = v55 + 3;
    if (v55 + 3 >= v193)
      goto LABEL_77;
    v56 = *(_QWORD *)(v194 + 8 * v48);
    if (v56)
      goto LABEL_67;
    v48 = v55 + 4;
    if (v55 + 4 >= v193)
      goto LABEL_77;
    v56 = *(_QWORD *)(v194 + 8 * v48);
    if (v56)
    {
LABEL_67:
      v47 = (v56 - 1) & v56;
      for (j = __clz(__rbit64(v56)) + (v48 << 6); ; j = v53 | (v48 << 6))
      {
        v58 = *(_QWORD *)(v200 + 56) + 16 * j;
        v59 = *(_QWORD *)v58;
        v60 = *(unsigned __int8 *)(v58 + 8);
        v50 = 0x7261646E6F636553;
        v51 = 0xE900000000000079;
        if (v60 != 1)
        {
          if (v60 != 2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_71;
          }
          v50 = 0x6F4C657275636553;
          v51 = 0xEF736E6F69746163;
        }
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, 0x7972616D697250, 0xE700000000000000, 0);
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
        {
          if (!v47)
            goto LABEL_50;
          goto LABEL_49;
        }
LABEL_71:
        v61 = swift_isUniquelyReferenced_nonNull_native(v49);
        v197._countAndFlagsBits = (uint64_t)v49;
        if ((v61 & 1) == 0)
        {
          sub_10009B5A4(0, v49[2] + 1, 1);
          v49 = (_QWORD *)v197._countAndFlagsBits;
        }
        v63 = v49[2];
        v62 = v49[3];
        if (v63 >= v62 >> 1)
        {
          sub_10009B5A4(v62 > 1, v63 + 1, 1);
          v49 = (_QWORD *)v197._countAndFlagsBits;
        }
        v49[2] = v63 + 1;
        v64 = &v49[2 * v63];
        v64[4] = v59;
        *((_BYTE *)v64 + 40) = v60;
        if (!v47)
          goto LABEL_50;
LABEL_49:
        v53 = __clz(__rbit64(v47));
        v47 &= v47 - 1;
      }
    }
    v57 = v55 + 5;
    if (v57 < v193)
    {
      v56 = *(_QWORD *)(v194 + 8 * v57);
      if (!v56)
      {
        while (1)
        {
          v48 = v57 + 1;
          if (__OFADD__(v57, 1))
            goto LABEL_191;
          if (v48 >= v193)
            goto LABEL_77;
          v56 = *(_QWORD *)(v194 + 8 * v48);
          ++v57;
          if (v56)
            goto LABEL_67;
        }
      }
      v48 = v57;
      goto LABEL_67;
    }
  }
LABEL_77:
  swift_release();
  v65 = v49[2];
  if (!v65)
    goto LABEL_86;
  v66 = v49[4];
  v67 = *((_BYTE *)v49 + 40);
  v68 = v65 - 1;
  if (v68)
  {
    v69 = v49 + 7;
    do
    {
      v70 = *((_QWORD *)v69 - 1);
      v71 = v66 >= v70;
      v73 = *v69;
      v69 += 16;
      v72 = v73;
      if (v66 <= v70)
        v66 = v70;
      if (!v71)
        v67 = v72;
      --v68;
    }
    while (v68);
  }
  swift_release();
  v197._countAndFlagsBits = 0;
  v197._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v74._countAndFlagsBits = 0xD000000000000013;
  v74._object = (void *)0x8000000100EED840;
  String.append(_:)(v74);
  v195 = v38;
  v196 = v39;
  v75 = sub_10001A9A8(&qword_101112BB8);
  _print_unlocked<A, B>(_:_:)(&v195, &v197, v75, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v76._countAndFlagsBits = 45;
  v76._object = (void *)0xE100000000000000;
  String.append(_:)(v76);
  v195 = v66;
  v196 = v67;
  _print_unlocked<A, B>(_:_:)(&v195, &v197, v75, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v77._countAndFlagsBits = 8236;
  v77._object = (void *)0xE200000000000000;
  String.append(_:)(v77);
  String.append(_:)(v197);
  swift_bridgeObjectRelease();
LABEL_87:
  v78 = 1 << *(_BYTE *)(v200 + 32);
  v79 = -1;
  if (v78 < 64)
    v79 = ~(-1 << v78);
  v80 = v79 & *(_QWORD *)(v200 + 64);
  v81 = (unint64_t)(v78 + 63) >> 6;
  swift_bridgeObjectRetain(v200);
  v82 = 0;
  v83 = _swiftEmptyArrayStorage;
  if (v80)
    goto LABEL_94;
LABEL_95:
  v89 = v82 + 1;
  if (__OFADD__(v82, 1))
    goto LABEL_186;
  if (v89 >= v81)
    goto LABEL_123;
  v90 = *(_QWORD *)(v27 + 8 * v89);
  ++v82;
  if (v90)
    goto LABEL_112;
  v82 = v89 + 1;
  if (v89 + 1 >= v81)
    goto LABEL_123;
  v90 = *(_QWORD *)(v27 + 8 * v82);
  if (v90)
    goto LABEL_112;
  v82 = v89 + 2;
  if (v89 + 2 >= v81)
    goto LABEL_123;
  v90 = *(_QWORD *)(v27 + 8 * v82);
  if (v90)
    goto LABEL_112;
  v82 = v89 + 3;
  if (v89 + 3 >= v81)
    goto LABEL_123;
  v90 = *(_QWORD *)(v27 + 8 * v82);
  if (v90)
    goto LABEL_112;
  v82 = v89 + 4;
  if (v89 + 4 >= v81)
    goto LABEL_123;
  v90 = *(_QWORD *)(v27 + 8 * v82);
  if (v90)
  {
LABEL_112:
    v80 = (v90 - 1) & v90;
    for (k = __clz(__rbit64(v90)) + (v82 << 6); ; k = v87 | (v82 << 6))
    {
      v92 = *(_QWORD *)(v200 + 56) + 16 * k;
      v93 = *(_QWORD *)v92;
      v94 = *(unsigned __int8 *)(v92 + 8);
      if (*(_BYTE *)(v92 + 8))
      {
        if (v94 != 2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_117;
        }
        v85 = 0x6F4C657275636553;
        v84 = 0xEF736E6F69746163;
      }
      else
      {
        v84 = 0xE700000000000000;
        v85 = 0x7972616D697250;
      }
      v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v84, 0x7261646E6F636553, 0xE900000000000079, 0);
      swift_bridgeObjectRelease();
      if ((v86 & 1) == 0)
      {
        if (!v80)
          goto LABEL_95;
        goto LABEL_94;
      }
LABEL_117:
      v95 = swift_isUniquelyReferenced_nonNull_native(v83);
      v197._countAndFlagsBits = (uint64_t)v83;
      if ((v95 & 1) == 0)
      {
        sub_10009B5A4(0, v83[2] + 1, 1);
        v83 = (_QWORD *)v197._countAndFlagsBits;
      }
      v97 = v83[2];
      v96 = v83[3];
      if (v97 >= v96 >> 1)
      {
        sub_10009B5A4(v96 > 1, v97 + 1, 1);
        v83 = (_QWORD *)v197._countAndFlagsBits;
      }
      v83[2] = v97 + 1;
      v98 = &v83[2 * v97];
      v98[4] = v93;
      *((_BYTE *)v98 + 40) = v94;
      if (!v80)
        goto LABEL_95;
LABEL_94:
      v87 = __clz(__rbit64(v80));
      v80 &= v80 - 1;
    }
  }
  v91 = v89 + 5;
  if (v91 < v81)
  {
    v90 = *(_QWORD *)(v27 + 8 * v91);
    if (!v90)
    {
      while (1)
      {
        v82 = v91 + 1;
        if (__OFADD__(v91, 1))
          goto LABEL_190;
        if (v82 >= v81)
          goto LABEL_123;
        v90 = *(_QWORD *)(v27 + 8 * v82);
        ++v91;
        if (v90)
          goto LABEL_112;
      }
    }
    v82 = v91;
    goto LABEL_112;
  }
LABEL_123:
  swift_release();
  v99 = v83[2];
  if (!v99)
    goto LABEL_174;
  v100 = v83[4];
  v101 = *((_BYTE *)v83 + 40);
  v102 = v99 - 1;
  if (v102)
  {
    v103 = v83 + 7;
    do
    {
      v104 = *((_QWORD *)v103 - 1);
      v106 = *v103;
      v103 += 16;
      v105 = v106;
      if (v104 < v100)
      {
        v100 = v104;
        v101 = v105;
      }
      --v102;
    }
    while (v102);
  }
  swift_release();
  v107 = 1 << *(_BYTE *)(v200 + 32);
  v108 = -1;
  if (v107 < 64)
    v108 = ~(-1 << v107);
  v109 = v108 & *(_QWORD *)(v200 + 64);
  v193 = (unint64_t)(v107 + 63) >> 6;
  swift_bridgeObjectRetain(v200);
  v110 = 0;
  v111 = _swiftEmptyArrayStorage;
  if (v109)
    goto LABEL_136;
LABEL_137:
  v117 = v110 + 1;
  if (__OFADD__(v110, 1))
  {
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
    return;
  }
  if (v117 >= v193)
    goto LABEL_165;
  v118 = *(_QWORD *)(v194 + 8 * v117);
  ++v110;
  if (v118)
    goto LABEL_154;
  v110 = v117 + 1;
  if (v117 + 1 >= v193)
    goto LABEL_165;
  v118 = *(_QWORD *)(v194 + 8 * v110);
  if (v118)
    goto LABEL_154;
  v110 = v117 + 2;
  if (v117 + 2 >= v193)
    goto LABEL_165;
  v118 = *(_QWORD *)(v194 + 8 * v110);
  if (v118)
    goto LABEL_154;
  v110 = v117 + 3;
  if (v117 + 3 >= v193)
    goto LABEL_165;
  v118 = *(_QWORD *)(v194 + 8 * v110);
  if (v118)
    goto LABEL_154;
  v110 = v117 + 4;
  if (v117 + 4 >= v193)
    goto LABEL_165;
  v118 = *(_QWORD *)(v194 + 8 * v110);
  if (v118)
  {
LABEL_154:
    v109 = (v118 - 1) & v118;
    for (m = __clz(__rbit64(v118)) + (v110 << 6); ; m = v115 | (v110 << 6))
    {
      v120 = *(_QWORD *)(v200 + 56) + 16 * m;
      v121 = *(_QWORD *)v120;
      v122 = *(unsigned __int8 *)(v120 + 8);
      if (*(_BYTE *)(v120 + 8))
      {
        if (v122 != 2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_159;
        }
        v113 = 0x6F4C657275636553;
        v112 = 0xEF736E6F69746163;
      }
      else
      {
        v112 = 0xE700000000000000;
        v113 = 0x7972616D697250;
      }
      v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v112, 0x7261646E6F636553, 0xE900000000000079, 0);
      swift_bridgeObjectRelease();
      if ((v114 & 1) == 0)
      {
        if (!v109)
          goto LABEL_137;
        goto LABEL_136;
      }
LABEL_159:
      v123 = swift_isUniquelyReferenced_nonNull_native(v111);
      v197._countAndFlagsBits = (uint64_t)v111;
      if ((v123 & 1) == 0)
      {
        sub_10009B5A4(0, v111[2] + 1, 1);
        v111 = (_QWORD *)v197._countAndFlagsBits;
      }
      v125 = v111[2];
      v124 = v111[3];
      if (v125 >= v124 >> 1)
      {
        sub_10009B5A4(v124 > 1, v125 + 1, 1);
        v111 = (_QWORD *)v197._countAndFlagsBits;
      }
      v111[2] = v125 + 1;
      v126 = &v111[2 * v125];
      v126[4] = v121;
      *((_BYTE *)v126 + 40) = v122;
      if (!v109)
        goto LABEL_137;
LABEL_136:
      v115 = __clz(__rbit64(v109));
      v109 &= v109 - 1;
    }
  }
  v119 = v117 + 5;
  if (v119 < v193)
  {
    v118 = *(_QWORD *)(v194 + 8 * v119);
    if (!v118)
    {
      while (1)
      {
        v110 = v119 + 1;
        if (__OFADD__(v119, 1))
          goto LABEL_192;
        if (v110 >= v193)
          goto LABEL_165;
        v118 = *(_QWORD *)(v194 + 8 * v110);
        ++v119;
        if (v118)
          goto LABEL_154;
      }
    }
    v110 = v119;
    goto LABEL_154;
  }
LABEL_165:
  swift_release();
  v127 = v111[2];
  if (v127)
  {
    v128 = v111[4];
    v129 = *((_BYTE *)v111 + 40);
    v130 = v127 - 1;
    if (v130)
    {
      v131 = v111 + 7;
      do
      {
        v132 = *((_QWORD *)v131 - 1);
        v133 = v128 >= v132;
        v135 = *v131;
        v131 += 16;
        v134 = v135;
        if (v128 <= v132)
          v128 = v132;
        if (!v133)
          v129 = v134;
        --v130;
      }
      while (v130);
    }
    swift_release();
    v197._countAndFlagsBits = 0;
    v197._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(28);
    v136._object = (void *)0x8000000100EED860;
    v136._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v136);
    v195 = v100;
    v196 = v101;
    v137 = sub_10001A9A8(&qword_101112BB8);
    _print_unlocked<A, B>(_:_:)(&v195, &v197, v137, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v138._countAndFlagsBits = 45;
    v138._object = (void *)0xE100000000000000;
    String.append(_:)(v138);
    v195 = v128;
    v196 = v129;
    _print_unlocked<A, B>(_:_:)(&v195, &v197, v137, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v139._countAndFlagsBits = 8236;
    v139._object = (void *)0xE200000000000000;
    String.append(_:)(v139);
    String.append(_:)(v197);
    swift_bridgeObjectRelease();
    goto LABEL_175;
  }
LABEL_174:
  swift_release();
LABEL_175:
  v140 = v187;
  sub_100AC9958(v192 + RequestBeacon[5], v187);
  v142 = v189;
  v141 = v190;
  v143 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  v144 = v143(v140, 1, v190);
  v145 = v182;
  if (v144 == 1)
  {
    sub_100004048(v140, &qword_101102348);
  }
  else
  {
    v146 = v180;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v180, v140, v141);
    v197._countAndFlagsBits = 0;
    v197._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v147 = swift_bridgeObjectRelease();
    v197._countAndFlagsBits = 0xD000000000000015;
    v197._object = (void *)0x8000000100EED8C0;
    v148 = v186;
    DateInterval.start.getter(v147);
    v149 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v150._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v149);
    String.append(_:)(v150);
    swift_bridgeObjectRelease();
    v151 = *(void (**)(char *, uint64_t))(v184 + 8);
    v151(v148, v145);
    v152._countAndFlagsBits = 2108704;
    v152._object = (void *)0xE300000000000000;
    String.append(_:)(v152);
    DateInterval.end.getter(v153);
    v154._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v149);
    String.append(_:)(v154);
    swift_bridgeObjectRelease();
    v151(v148, v145);
    v155._countAndFlagsBits = 8236;
    v155._object = (void *)0xE200000000000000;
    String.append(_:)(v155);
    String.append(_:)(v197);
    v142 = v189;
    v141 = v190;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v146, v141);
  }
  v156 = v183;
  sub_100AC9958(v192 + RequestBeacon[6], v183);
  if (v143(v156, 1, v141) == 1)
  {
    sub_100004048(v156, &qword_101102348);
  }
  else
  {
    v157 = v181;
    (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v181, v156, v141);
    v197._countAndFlagsBits = 0;
    v197._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(32);
    v158 = swift_bridgeObjectRelease();
    v197._countAndFlagsBits = 0xD000000000000017;
    v197._object = (void *)0x8000000100EED8A0;
    v159 = v186;
    DateInterval.start.getter(v158);
    v160 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v161._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v160);
    String.append(_:)(v161);
    swift_bridgeObjectRelease();
    v162 = *(void (**)(char *, uint64_t))(v184 + 8);
    v162(v159, v145);
    v163._countAndFlagsBits = 2108704;
    v163._object = (void *)0xE300000000000000;
    String.append(_:)(v163);
    DateInterval.end.getter(v164);
    v165._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, v160);
    String.append(_:)(v165);
    swift_bridgeObjectRelease();
    v162(v159, v145);
    v166._countAndFlagsBits = 8236;
    v166._object = (void *)0xE200000000000000;
    String.append(_:)(v166);
    String.append(_:)(v197);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v157, v141);
  }
  v197._countAndFlagsBits = 0x203A736469;
  v197._object = (void *)0xE500000000000000;
  v167 = v192;
  v195 = *(_QWORD *)(*(_QWORD *)(v192 + v185) + 16);
  v168._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v168);
  swift_bridgeObjectRelease();
  v169._countAndFlagsBits = 8236;
  v169._object = (void *)0xE200000000000000;
  String.append(_:)(v169);
  String.append(_:)(v197);
  swift_bridgeObjectRelease();
  v197._countAndFlagsBits = 0;
  v197._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease();
  v197._countAndFlagsBits = 0x6F43686372616573;
  v197._object = (void *)0xEF203A747865746ELL;
  v170 = RequestBeacon;
  v171 = (unsigned __int8 *)(v167 + RequestBeacon[8]);
  v172 = *v171;
  v173 = *((_QWORD *)v171 + 1);
  if (v171[1])
    v174 = 256;
  else
    v174 = 0;
  v175._countAndFlagsBits = sub_100AC4640(v174 | v172, v173);
  String.append(_:)(v175);
  swift_bridgeObjectRelease();
  String.append(_:)(v197);
  swift_bridgeObjectRelease();
  v197._countAndFlagsBits = 0;
  v197._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v197._countAndFlagsBits = 0xD000000000000010;
  v197._object = (void *)0x8000000100EED880;
  v195 = *(_QWORD *)(*(_QWORD *)(v167 + v170[9]) + 16);
  v176._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v176);
  swift_bridgeObjectRelease();
  String.append(_:)(v197);
  swift_bridgeObjectRelease();
  v177 = v199;
  v178 = v188;
  *v188 = v198;
  v178[1] = v177;
}

uint64_t sub_100AC6070(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;

  if (a4)
  {
    if (a4 != 1)
      return result;
    v8 = sub_100153D50();
    v9 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for HashedAdvertisement, v8);
    v11 = v10;
    v12 = (_QWORD *)*a6;
    result = swift_isUniquelyReferenced_nonNull_native(*a6);
    *a6 = (uint64_t)v12;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007CA848(0, v12[2] + 1, 1, v12);
      v12 = (_QWORD *)result;
      *a6 = result;
    }
    v15 = v12[2];
    v14 = v12[3];
    if (v15 >= v14 >> 1)
    {
      result = (uint64_t)sub_1007CA848((_QWORD *)(v14 > 1), v15 + 1, 1, v12);
      v12 = (_QWORD *)result;
      *a6 = result;
    }
    v12[2] = v15 + 1;
    v16 = &v12[3 * v15];
    v16[4] = v9;
    v16[5] = v11;
  }
  else
  {
    v18 = sub_100153D50();
    v19 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for HashedAdvertisement, v18);
    v21 = v20;
    v22 = (_QWORD *)*a5;
    result = swift_isUniquelyReferenced_nonNull_native(*a5);
    *a5 = (uint64_t)v22;
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1007CA848(0, v22[2] + 1, 1, v22);
      v22 = (_QWORD *)result;
      *a5 = result;
    }
    v24 = v22[2];
    v23 = v22[3];
    if (v24 >= v23 >> 1)
    {
      result = (uint64_t)sub_1007CA848((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
      v22 = (_QWORD *)result;
      *a5 = result;
    }
    v22[2] = v24 + 1;
    v16 = &v22[3 * v24];
    v16[4] = v19;
    v16[5] = v21;
  }
  v16[6] = a3;
  return result;
}

uint64_t sub_100AC6214(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t RequestBeacon;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - v7;
  v9 = sub_10001A9A8(&qword_101102348);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateInterval(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v46 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_10001A9A8(&qword_101112DA8);
  v44 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_10001AA44(a1, v18);
  v19 = sub_100ACC598();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchRequestBeacon.CodingKeys, &type metadata for FetchRequestBeacon.CodingKeys, v19, v18, v17);
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v21 = *(int *)(RequestBeacon + 24);
  v22 = v2 + *(int *)(RequestBeacon + 20);
  v43 = v2;
  sub_100AC6668(v22, v2 + v21, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    v23 = v47;
    v24 = v45;
    sub_100004048((uint64_t)v11, &qword_101102348);
  }
  else
  {
    v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v46, v11, v12);
    DateInterval.start.getter(v30);
    v31 = type metadata accessor for Date(0);
    v32 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
    v32(v8, 0, 1, v31);
    LOBYTE(v49) = 0;
    v33 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v34 = v45;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v8, &v49, v47, v31, v33);
    v24 = v34;
    if (v34)
    {
      sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v46, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v16, v47);
    }
    v45 = v12;
    v37 = sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
    v38 = v42;
    DateInterval.end.getter(v37);
    v32(v38, 0, 1, v31);
    LOBYTE(v49) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v38, &v49, v47, v31, v33);
    v40 = (uint64_t)v38;
    v23 = v47;
    sub_100004048(v40, (uint64_t *)&unk_1010EA690);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v46, v45);
  }
  v25 = sub_100AC2EBC();
  v27 = v26;
  if (v25[2]
    && (v49 = v25,
        v48 = 2,
        v28 = sub_10001A9A8(&qword_1011063B0),
        v29 = sub_1003792A4(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, &v48, v23, v28, v29),
        v24))
  {
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (v27[2])
    {
      v49 = v27;
      v48 = 3;
      v35 = sub_10001A9A8(&qword_1011063B0);
      v36 = sub_1003792A4();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v49, &v48, v23, v35, v36);
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v23);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AC6668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  void (*v57)(char *, char *, uint64_t);
  char *v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;

  v76 = type metadata accessor for Date(0);
  v69 = *(_QWORD *)(v76 - 8);
  v6 = __chkstk_darwin(v76);
  v75 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v74 = (char *)&v64 - v9;
  v10 = __chkstk_darwin(v8);
  v72 = (char *)&v64 - v11;
  v12 = __chkstk_darwin(v10);
  v71 = (char *)&v64 - v13;
  v14 = __chkstk_darwin(v12);
  v73 = (char *)&v64 - v15;
  v16 = __chkstk_darwin(v14);
  v67 = (char *)&v64 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v64 - v19;
  __chkstk_darwin(v18);
  v77 = (char *)&v64 - v21;
  v22 = type metadata accessor for DateInterval(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v78 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v79 = (char *)&v64 - v26;
  v27 = sub_10001A9A8(&qword_101102348);
  v28 = __chkstk_darwin(v27);
  v70 = (char *)&v64 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v64 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v64 - v34;
  __chkstk_darwin(v33);
  v37 = (char *)&v64 - v36;
  v68 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v68((char *)&v64 - v36, 1, 1, v22);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v38((char *)a1, 1, v22) == 1)
  {
    sub_100004048((uint64_t)v37, &qword_101102348);
    return sub_100AC9958(a2, a3);
  }
  else
  {
    v66 = a3;
    if (v38((char *)a2, 1, v22) == 1)
    {
      sub_100004048((uint64_t)v37, &qword_101102348);
      return sub_100AC9958(a1, v66);
    }
    else
    {
      sub_100AC9958(a1, (uint64_t)v35);
      if (v38(v35, 1, v22) == 1)
      {
        sub_100004048((uint64_t)v35, &qword_101102348);
      }
      else
      {
        v40 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        v41 = v79;
        v40(v79, v35, v22);
        sub_100AC9958(a2, (uint64_t)v32);
        if (v38(v32, 1, v22) == 1)
        {
          (*(void (**)(char *, uint64_t))(v23 + 8))(v41, v22);
          sub_100004048((uint64_t)v32, &qword_101102348);
        }
        else
        {
          v42 = ((uint64_t (*)(char *, char *, uint64_t))v40)(v78, v32, v22);
          v43 = DateInterval.start.getter(v42);
          v44 = v67;
          DateInterval.start.getter(v43);
          v65 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v45 = v76;
          v46 = dispatch thunk of static Comparable.< infix(_:_:)(v44, v20, v76, v65);
          v47 = v69;
          v48 = *(void (**)(char *, char *, uint64_t))(v69 + 16);
          if ((v46 & 1) != 0)
            v49 = v44;
          else
            v49 = v20;
          v48(v77, v49, v45);
          v50 = *(void (**)(char *, uint64_t))(v47 + 8);
          v50(v44, v45);
          v51 = ((uint64_t (*)(char *, uint64_t))v50)(v20, v45);
          v52 = v71;
          v53 = DateInterval.end.getter(v51);
          v54 = v72;
          DateInterval.end.getter(v53);
          if ((dispatch thunk of static Comparable.>= infix(_:_:)(v54, v52, v45, v65) & 1) != 0)
            v55 = v54;
          else
            v55 = v52;
          v56 = v73;
          v57 = v48;
          v48(v73, v55, v45);
          v50(v54, v45);
          v50(v52, v45);
          v58 = v74;
          v59 = v77;
          v60 = v57;
          v57(v74, v77, v45);
          v61 = v75;
          v60(v75, v56, v45);
          v62 = (uint64_t)v70;
          DateInterval.init(start:end:)(v58, v61);
          v50(v56, v45);
          v50(v59, v45);
          v63 = *(void (**)(char *, uint64_t))(v23 + 8);
          v63(v78, v22);
          v63(v79, v22);
          sub_100004048((uint64_t)v37, &qword_101102348);
          v68((char *)v62, 0, 1, v22);
          sub_100AC9910(v62, (uint64_t)v37);
        }
      }
      return sub_100AC9910((uint64_t)v37, v66);
    }
  }
}

uint64_t sub_100AC6BB4(_QWORD *a1)
{
  return sub_100AC6214(a1);
}

unint64_t sub_100AC6BC8()
{
  uint64_t v0;
  void *v1;
  unint64_t v3;

  v1 = objc_autoreleasePoolPush();
  sub_100AC4E7C(v0, &v3);
  objc_autoreleasePoolPop(v1);
  return v3;
}

unint64_t sub_100AC6C14(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int64_t i;
  int64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t result;
  int64_t j;
  int64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for FetchRequestBeacon(0) + 28));
  v4 = swift_allocObject(&unk_1010A9598, 17, 7);
  *(_BYTE *)(v4 + 16) = a1;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = ~v5;
  v7 = -v5;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v61 = v3;
  v62 = v3 + 64;
  v64 = v6;
  v66 = v8 & *(_QWORD *)(v3 + 64);
  swift_bridgeObjectRetain_n(v3, 2);
  swift_retain();
  sub_100AC972C();
  if (v10 == 3)
    goto LABEL_56;
  v58 = v3 + 64;
  v60 = v9;
  v56 = v4;
  v57 = v3;
  i = 0;
  v12 = (unint64_t)(v64 + 64) >> 6;
  v13 = v66;
  if (v66)
    goto LABEL_9;
LABEL_10:
  v17 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
  }
  else if (v17 < v12)
  {
    v18 = *(_QWORD *)(v62 + 8 * v17);
    if (v18)
    {
LABEL_19:
      v13 = (v18 - 1) & v18;
      v16 = __clz(__rbit64(v18)) + (v17 << 6);
      for (i = v17; ; v16 = v15 | (i << 6))
      {
        v21 = *(_QWORD *)(v61 + 56) + 16 * v16;
        if (*(_BYTE *)(v21 + 8))
        {
          if (*(_BYTE *)(v21 + 8) == 1)
          {
            v22 = 0x7261646E6F636553;
            v23 = 0xE900000000000079;
            v24 = a1;
            if (!a1)
              goto LABEL_32;
          }
          else
          {
            v22 = 0x6F4C657275636553;
            v23 = 0xEF736E6F69746163;
            v24 = a1;
            if (!a1)
            {
LABEL_32:
              v26 = 0xE700000000000000;
              v25 = 0x7972616D697250;
              goto LABEL_33;
            }
          }
        }
        else
        {
          v23 = 0xE700000000000000;
          v22 = 0x7972616D697250;
          v24 = a1;
          if (!a1)
            goto LABEL_32;
        }
        if (v24 == 1)
          v25 = 0x7261646E6F636553;
        else
          v25 = 0x6F4C657275636553;
        if (v24 == 1)
          v26 = 0xE900000000000079;
        else
          v26 = 0xEF736E6F69746163;
LABEL_33:
        v27 = *(_QWORD *)v21;
        if (v22 == v25 && v23 == v26)
        {
          swift_bridgeObjectRelease_n(v23, 2);
        }
        else
        {
          v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v25, v26, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v14 & 1) == 0)
          {
            if (!v13)
              goto LABEL_10;
            goto LABEL_9;
          }
        }
        v28 = v60;
        if (v27 < v60)
          v28 = v27;
        v60 = v28;
        if (!v13)
          goto LABEL_10;
LABEL_9:
        v15 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
      }
    }
    v19 = i + 2;
    if (i + 2 < v12)
    {
      v18 = *(_QWORD *)(v62 + 8 * v19);
      if (v18)
      {
LABEL_15:
        v17 = v19;
        goto LABEL_19;
      }
      v20 = i + 3;
      if (i + 3 < v12)
      {
        v18 = *(_QWORD *)(v62 + 8 * v20);
        if (v18)
        {
LABEL_18:
          v17 = v20;
          goto LABEL_19;
        }
        v19 = i + 4;
        if (i + 4 < v12)
        {
          v18 = *(_QWORD *)(v62 + 8 * v19);
          if (v18)
            goto LABEL_15;
          v20 = i + 5;
          if (i + 5 < v12)
          {
            v18 = *(_QWORD *)(v62 + 8 * v20);
            if (v18)
              goto LABEL_18;
            v19 = i + 6;
            if (i + 6 < v12)
            {
              v18 = *(_QWORD *)(v62 + 8 * v19);
              if (v18)
                goto LABEL_15;
              v17 = i + 7;
              if (i + 7 < v12)
              {
                v18 = *(_QWORD *)(v62 + 8 * v17);
                if (!v18)
                {
                  v29 = i + 8;
                  do
                  {
                    if (v12 == v29)
                      goto LABEL_52;
                    v18 = *(_QWORD *)(v62 + 8 * v29++);
                  }
                  while (!v18);
                  v17 = v29 - 1;
                }
                goto LABEL_19;
              }
            }
          }
        }
      }
    }
  }
LABEL_52:
  sub_10007CC38(v61);
  swift_release();
  v30 = -1 << *(_BYTE *)(v57 + 32);
  v31 = ~v30;
  v32 = -v30;
  v33 = v32 < 64 ? ~(-1 << v32) : -1;
  v61 = v57;
  v63 = v58;
  v65 = v31;
  v67 = v33 & *(_QWORD *)(v57 + 64);
  swift_bridgeObjectRetain(v57);
  swift_retain();
  sub_100AC972C();
  if (v35 == 3)
  {
LABEL_56:
    sub_10007CC38(v61);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  v59 = v34;
  j = 0;
  v38 = (unint64_t)(v65 + 64) >> 6;
  v39 = v67;
  if (v67)
    goto LABEL_61;
LABEL_62:
  v43 = j + 1;
  if (__OFADD__(j, 1))
  {
    __break(1u);
  }
  else if (v43 < v38)
  {
    v44 = *(_QWORD *)(v63 + 8 * v43);
    if (v44)
    {
LABEL_71:
      v39 = (v44 - 1) & v44;
      v42 = __clz(__rbit64(v44)) + (v43 << 6);
      for (j = v43; ; v42 = v41 | (j << 6))
      {
        v47 = *(_QWORD *)(v57 + 56) + 16 * v42;
        if (*(_BYTE *)(v47 + 8))
        {
          if (*(_BYTE *)(v47 + 8) == 1)
          {
            v48 = 0x7261646E6F636553;
            v49 = 0xE900000000000079;
            v50 = a1;
            if (!a1)
              goto LABEL_84;
          }
          else
          {
            v48 = 0x6F4C657275636553;
            v49 = 0xEF736E6F69746163;
            v50 = a1;
            if (!a1)
            {
LABEL_84:
              v52 = 0xE700000000000000;
              v51 = 0x7972616D697250;
              goto LABEL_85;
            }
          }
        }
        else
        {
          v49 = 0xE700000000000000;
          v48 = 0x7972616D697250;
          v50 = a1;
          if (!a1)
            goto LABEL_84;
        }
        if (v50 == 1)
          v51 = 0x7261646E6F636553;
        else
          v51 = 0x6F4C657275636553;
        if (v50 == 1)
          v52 = 0xE900000000000079;
        else
          v52 = 0xEF736E6F69746163;
LABEL_85:
        v53 = *(_QWORD *)v47;
        if (v48 == v51 && v49 == v52)
        {
          swift_bridgeObjectRelease_n(v49, 2);
        }
        else
        {
          v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v51, v52, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v40 & 1) == 0)
          {
            if (!v39)
              goto LABEL_62;
            goto LABEL_61;
          }
        }
        v54 = v59;
        if (v59 <= v53)
          v54 = v53;
        v59 = v54;
        if (!v39)
          goto LABEL_62;
LABEL_61:
        v41 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
      }
    }
    v45 = j + 2;
    if (j + 2 < v38)
    {
      v44 = *(_QWORD *)(v63 + 8 * v45);
      if (v44)
      {
LABEL_67:
        v43 = v45;
        goto LABEL_71;
      }
      v46 = j + 3;
      if (j + 3 < v38)
      {
        v44 = *(_QWORD *)(v63 + 8 * v46);
        if (v44)
        {
LABEL_70:
          v43 = v46;
          goto LABEL_71;
        }
        v45 = j + 4;
        if (j + 4 < v38)
        {
          v44 = *(_QWORD *)(v63 + 8 * v45);
          if (v44)
            goto LABEL_67;
          v46 = j + 5;
          if (j + 5 < v38)
          {
            v44 = *(_QWORD *)(v63 + 8 * v46);
            if (v44)
              goto LABEL_70;
            v45 = j + 6;
            if (j + 6 < v38)
            {
              v44 = *(_QWORD *)(v63 + 8 * v45);
              if (v44)
                goto LABEL_67;
              v43 = j + 7;
              if (j + 7 < v38)
              {
                v44 = *(_QWORD *)(v63 + 8 * v43);
                if (!v44)
                {
                  v55 = j + 8;
                  do
                  {
                    if (v38 == v55)
                      goto LABEL_104;
                    v44 = *(_QWORD *)(v63 + 8 * v55++);
                  }
                  while (!v44);
                  v43 = v55 - 1;
                }
                goto LABEL_71;
              }
            }
          }
        }
      }
    }
  }
LABEL_104:
  sub_10007CC38(v57);
  swift_bridgeObjectRelease();
  swift_release_n(v56, 2);
  result = v60;
  if (v59 < v60)
    __break(1u);
  return result;
}

uint64_t sub_100AC72F8(uint64_t a1, char a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  v2 = 0x7972616D697250;
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = 0x7261646E6F636553;
  v5 = 0xE900000000000079;
  if (v3 != 1)
  {
    v4 = 0x6F4C657275636553;
    v5 = 0xEF736E6F69746163;
  }
  if (*(_BYTE *)(a1 + 8))
    v6 = v4;
  else
    v6 = 0x7972616D697250;
  if (v3)
    v7 = v5;
  else
    v7 = 0xE700000000000000;
  if (a2)
  {
    if (a2 == 1)
      v2 = 0x7261646E6F636553;
    else
      v2 = 0x6F4C657275636553;
    if (a2 == 1)
      v8 = 0xE900000000000079;
    else
      v8 = 0xEF736E6F69746163;
    if (v6 != v2)
      goto LABEL_21;
  }
  else
  {
    v8 = 0xE700000000000000;
    if (v6 != 0x7972616D697250)
    {
LABEL_21:
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v2, v8, 0);
      goto LABEL_22;
    }
  }
  if (v7 != v8)
    goto LABEL_21;
  v9 = 1;
  v8 = v7;
LABEL_22:
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return v9 & 1;
}

unint64_t sub_100AC7420()
{
  return 0xD000000000000010;
}

uint64_t sub_100AC7478(char *a1, unsigned __int8 *a2)
{
  return sub_100513ACC(*a1, *a2);
}

Swift::Int sub_100AC7484()
{
  char *v0;

  return sub_10051FDFC(*v0);
}

uint64_t sub_100AC748C(uint64_t a1)
{
  char *v1;

  return sub_100515AE8(a1, *v1);
}

Swift::Int sub_100AC7494(uint64_t a1)
{
  char *v1;

  return sub_100516B88(a1, *v1);
}

unint64_t sub_100AC749C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100ACC4C8(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100AC74C8@<X0>(_QWORD *a1@<X8>)
{
  unint64_t result;
  uint64_t v3;

  result = sub_100AC7420();
  *a1 = 0xD000000000000010;
  a1[1] = v3;
  return result;
}

uint64_t sub_100AC74F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100ACC510();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100AC7544(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_10001A9A8(&qword_101112E18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100ACCC48();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchRequestContext.CodingKeys, &type metadata for FetchRequestContext.CodingKeys, v14, v12, v13);
  v21 = a2;
  v20 = 0;
  v15 = sub_100ACCC8C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v8, &type metadata for FetchRequestContext.FetchRequestContextPolicy, v15);
  if (!v4)
  {
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a3, v18, &v19, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100AC7680(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;

  v21 = a4;
  v22 = a5;
  v9 = sub_10001A9A8(&qword_101112D30);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_100ACC278();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchRequestContent.CodingKeys, &type metadata for FetchRequestContent.CodingKeys, v15, v14, v13);
  v23[0] = a2;
  v24 = 0;
  v16 = sub_10001A9A8(&qword_101112D40);
  v17 = sub_100ACC2BC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, v16, v17);
  if (!v5)
  {
    LOBYTE(v23[0]) = a3;
    v23[1] = v21;
    v23[2] = v22;
    v24 = 1;
    v18 = sub_100ACC338();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, &type metadata for FetchRequestContext, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100AC77E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100AC781C + 4 * byte_100E5BED9[a1]))(0xD000000000000010, 0x8000000100EC53B0);
}

uint64_t sub_100AC781C(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_100AC7834()
{
  return 0x7461447472617473;
}

uint64_t sub_100AC7850()
{
  return 0x65746144646E65;
}

uint64_t sub_100AC7868()
{
  return 0x7261646E6F636573;
}

uint64_t sub_100AC7888()
{
  return 0x6F43686372616573;
}

uint64_t sub_100AC78AC()
{
  return 5294388599723750000;
}

uint64_t sub_100AC78C8()
{
  return 0x76654464656E776FLL;
}

uint64_t sub_100AC78EC()
{
  return 0x6570795479656BLL;
}

uint64_t sub_100AC7904(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100AC793C + 4 * byte_100E5BEE2[a1]))(0xD000000000000010, 0x8000000100EC53B0);
}

uint64_t sub_100AC793C(uint64_t a1)
{
  return a1 + 2;
}

uint64_t sub_100AC7954()
{
  return 0x7461447472617473;
}

uint64_t sub_100AC7970()
{
  return 0x65746144646E65;
}

uint64_t sub_100AC7988()
{
  return 0x7261646E6F636573;
}

uint64_t sub_100AC79A8()
{
  return 0x6F43686372616573;
}

uint64_t sub_100AC79CC()
{
  return 5294388599723750000;
}

uint64_t sub_100AC79E8()
{
  return 0x76654464656E776FLL;
}

uint64_t sub_100AC7A0C()
{
  return 0x6570795479656BLL;
}

uint64_t sub_100AC7A24()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0x7963696C6F70;
}

uint64_t sub_100AC7A60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100ACCE70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AC7A84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACCC48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC7AAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACCC48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AC7AD4(_QWORD *a1)
{
  uint64_t v1;

  return sub_100AC7544(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_100AC7AF0()
{
  uint64_t v0;

  return sub_100AC41D8(*(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

uint64_t sub_100AC7AFC()
{
  _BYTE *v0;

  if (*v0)
    return 0x747865746E6F63;
  else
    return 0x686372616573;
}

uint64_t sub_100AC7B34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100ACCF54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AC7B58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC278();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC7B80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC278();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AC7BA8(_QWORD *a1)
{
  uint64_t v1;

  return sub_100AC7680(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100AC7BC8(char *a1)
{
  sub_100511940(*a1);
}

Swift::Int sub_100AC7BD4()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_100515344((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100AC7C18(uint64_t a1)
{
  char *v1;

  sub_100515344(a1, *v1);
}

Swift::Int sub_100AC7C20()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_100515344((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t sub_100AC7C60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100ACCCD0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AC7C8C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100AC77E4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100AC7CB4()
{
  unsigned __int8 *v0;

  return sub_100AC7904(*v0);
}

unint64_t sub_100AC7CBC@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100ACCCD0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AC7CE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC43C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC7D08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC43C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AC7D30(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  int *RequestBeacon;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char v95;
  _QWORD *v96;

  v94 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v4 = __chkstk_darwin(v3);
  v82 = (char *)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v86 = (char *)&v82 - v7;
  v8 = __chkstk_darwin(v6);
  v89 = (char *)&v82 - v9;
  __chkstk_darwin(v8);
  v92 = (uint64_t)&v82 - v10;
  v11 = sub_10001A9A8(&qword_101102348);
  v12 = __chkstk_darwin(v11);
  v84 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v87 = (uint64_t)&v82 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v82 - v16;
  v18 = type metadata accessor for DateInterval(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v85 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v88 = (char *)&v82 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v82 - v24;
  v26 = sub_10001A9A8(&qword_101112D88);
  v91 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v28 = (char *)&v82 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a1[3];
  v30 = a1[4];
  sub_10001AA44(a1, v29);
  v31 = sub_100ACC43C();
  v32 = v29;
  v33 = v19;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys, v31, v32, v30);
  v34 = (char *)v18;
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  v35 = v94 + RequestBeacon[5];
  sub_100AC9958(v35, (uint64_t)v17);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  if (v36(v17, 1, v18) == 1)
  {
    v83 = v35;
    v37 = v33;
    sub_100004048((uint64_t)v17, &qword_101102348);
  }
  else
  {
    v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v33 + 32))(v25, v17, v18);
    v39 = v92;
    DateInterval.start.getter(v38);
    v40 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
    LOBYTE(v96) = 0;
    v41 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v42 = v93;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v39, &v96, v26, v40, v41);
    if (v42)
    {
      sub_100004048(v92, (uint64_t *)&unk_1010EA690);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v28, v26);
    }
    v83 = v35;
    v93 = 0;
    sub_100004048(v92, (uint64_t *)&unk_1010EA690);
    v37 = v33;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v18);
    v34 = (char *)v18;
  }
  v45 = v88;
  v44 = (uint64_t)v89;
  v46 = v87;
  v47 = v94 + RequestBeacon[6];
  sub_100AC9958(v47, v87);
  if (v36((char *)v46, 1, (uint64_t)v34) == 1)
  {
    sub_100004048(v46, &qword_101102348);
    v48 = v93;
    v92 = v26;
    v49 = v37;
    v50 = (uint64_t)v86;
    v51 = (uint64_t)v84;
  }
  else
  {
    v52 = (*(uint64_t (**)(char *, uint64_t, char *))(v37 + 32))(v45, v46, v34);
    v53 = v34;
    DateInterval.start.getter(v52);
    v54 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v44, 0, 1, v54);
    LOBYTE(v96) = 1;
    v55 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v56 = v93;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v44, &v96, v26, v54, v55);
    if (v56)
    {
      sub_100004048(v44, (uint64_t *)&unk_1010EA690);
      (*(void (**)(char *, char *))(v37 + 8))(v45, v53);
      return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v28, v26);
    }
    v92 = v26;
    sub_100004048(v44, (uint64_t *)&unk_1010EA690);
    (*(void (**)(char *, char *))(v37 + 8))(v45, v53);
    v34 = v53;
    v49 = v37;
    v50 = (uint64_t)v86;
    v51 = (uint64_t)v84;
    v48 = 0;
  }
  sub_100AC6668(v83, v47, v51);
  if (v36((char *)v51, 1, (uint64_t)v34) == 1)
  {
    sub_100004048(v51, &qword_101102348);
  }
  else
  {
    v63 = (*(uint64_t (**)(char *, uint64_t, char *))(v49 + 32))(v85, v51, v34);
    v89 = v34;
    DateInterval.start.getter(v63);
    v64 = type metadata accessor for Date(0);
    v65 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56);
    v65(v50, 0, 1, v64);
    LOBYTE(v96) = 2;
    v66 = v49;
    v67 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v68 = v92;
    v93 = v28;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v96, v92, v64, v67);
    if (v48)
    {
      sub_100004048(v50, (uint64_t *)&unk_1010EA690);
      (*(void (**)(char *, char *))(v66 + 8))(v85, v89);
      return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v93, v68);
    }
    v76 = sub_100004048(v50, (uint64_t *)&unk_1010EA690);
    v77 = v68;
    v78 = (uint64_t)v82;
    v79 = v85;
    DateInterval.end.getter(v76);
    v65(v78, 0, 1, v64);
    LOBYTE(v96) = 3;
    v80 = v93;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v78, &v96, v77, v64, v67);
    sub_100004048(v78, (uint64_t *)&unk_1010EA690);
    (*(void (**)(char *, char *))(v66 + 8))(v79, v89);
    v28 = v80;
  }
  v57 = sub_100AC2EBC();
  v59 = v58;
  v60 = v92;
  if (v57[2])
  {
    v96 = v57;
    v95 = 6;
    v61 = sub_10001A9A8(&qword_1011063B0);
    v62 = sub_1003792A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v96, &v95, v60, v61, v62);
    if (v48)
    {
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v60);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  if (v59[2])
  {
    v96 = v59;
    v95 = 4;
    v69 = sub_10001A9A8(&qword_1011063B0);
    v70 = sub_1003792A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v96, &v95, v60, v69, v70);
    if (v48)
    {
LABEL_22:
      (*(void (**)(char *, uint64_t))(v91 + 8))(v28, v60);
      return swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(*(_QWORD *)(v94 + RequestBeacon[9]) + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v94 + RequestBeacon[9]));
    sub_100AC2C44(v71);
    v73 = v72;
    swift_bridgeObjectRelease();
    v96 = v73;
    v95 = 7;
    v74 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v75 = sub_1001B1324();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v96, &v95, v60, v74, v75);
    if (v48)
      goto LABEL_22;
    swift_bridgeObjectRelease();
  }
  v81 = v91;
  LOBYTE(v96) = 8;
  KeyedEncodingContainer.encode(_:forKey:)(1, &v96, v60);
  return (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v28, v60);
}

void sub_100AC85E8(_QWORD *a1)
{
  uint64_t v1;
  void *v3;

  v3 = objc_autoreleasePoolPush();
  sub_100AC7D30(a1, v1);
  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100AC8638(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;

  v21 = a4;
  v22 = a5;
  v9 = sub_10001A9A8(&qword_101112D60);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_100ACC37C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedDeviceFetchRequestContent.CodingKeys, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys, v15, v14, v13);
  v23[0] = a2;
  v24 = 0;
  v16 = sub_10001A9A8(&qword_101112D70);
  v17 = sub_100ACC3C0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, v16, v17);
  if (!v5)
  {
    LOBYTE(v23[0]) = a3;
    v23[1] = v21;
    v23[2] = v22;
    v24 = 1;
    v18 = sub_100ACC338();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v9, &type metadata for FetchRequestContext, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100AC879C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC37C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AC87C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACC37C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AC87EC(_QWORD *a1)
{
  uint64_t v1;

  return sub_100AC8638(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

Swift::Int sub_100AC880C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t *v32;
  unint64_t v33;
  Swift::Int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  _QWORD *v108;
  Swift::Int v109;
  Swift::Int v110;
  uint64_t v111;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v89 = 0;
      v90 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v92 = *(_QWORD *)(v90 + 24 * i + 16);
        v93 = v89;
        do
        {
          v94 = v90 + v93;
          if (v92 >= *(_QWORD *)(v90 + v93 + 16))
            break;
          if (!v90)
            goto LABEL_140;
          v95 = *(_QWORD *)(v94 + 24);
          v96 = (_QWORD *)(v90 + v93);
          v97 = *(_QWORD *)(v90 + v93 + 32);
          *(_OWORD *)(v94 + 24) = *(_OWORD *)v94;
          result = *(_QWORD *)(v94 + 16);
          *(_QWORD *)(v94 + 40) = result;
          *v96 = v95;
          v96[1] = v97;
          *(_QWORD *)(v94 + 16) = v92;
          v93 -= 24;
        }
        while (v93 != -24);
        v89 += 24;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v106 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      v98 = v13;
      v108 = v10;
      if (v14 >= 2)
      {
        v99 = *v106;
        do
        {
          v100 = v14 - 2;
          if (v14 < 2)
            goto LABEL_131;
          if (!v99)
            goto LABEL_144;
          v101 = v98;
          v102 = *(_QWORD *)&v98[16 * v100 + 32];
          v103 = *(_QWORD *)&v98[16 * v14 + 24];
          sub_100AC8F1C((char *)(v99 + 24 * v102), (char *)(v99 + 24 * *(_QWORD *)&v98[16 * v14 + 16]), v99 + 24 * v103, __dst);
          if (v1)
            break;
          if (v103 < v102)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v101 = sub_10088F088((uint64_t)v101);
          if (v100 >= *((_QWORD *)v101 + 2))
            goto LABEL_133;
          v104 = &v101[16 * v100 + 32];
          *(_QWORD *)v104 = v102;
          *((_QWORD *)v104 + 1) = v103;
          v105 = *((_QWORD *)v101 + 2);
          if (v14 > v105)
            goto LABEL_134;
          memmove(&v101[16 * v14 + 16], &v101[16 * v14 + 32], 16 * (v105 - v14));
          v98 = v101;
          *((_QWORD *)v101 + 2) = v105 - 1;
          v14 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v108[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v108 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_10001A9A8(&qword_1010ED270);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v108 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v107 = *a1 + 64;
  v13 = (char *)_swiftEmptyArrayStorage;
  v109 = v6;
  v110 = v3;
  v111 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(_QWORD *)(v12 + 24 * v11 + 16);
      v17 = *(_QWORD *)(v12 + 24 * v15 + 16);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (unint64_t *)(v107 + 24 * v15);
        v19 = v16;
        while (1)
        {
          v21 = *v18;
          v18 += 3;
          v20 = v21;
          if (v16 < v17 == v21 >= v19)
            break;
          ++v11;
          v19 = v20;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_137;
        if (v15 < v11)
        {
          v22 = 24 * v11;
          v23 = 24 * v15;
          v24 = v11;
          v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12)
                goto LABEL_143;
              v26 = v12 + v23;
              v27 = v12 + v22;
              v28 = *(_OWORD *)(v12 + v23);
              v29 = *(_QWORD *)(v12 + v23 + 16);
              v30 = *(_QWORD *)(v12 + v22 - 8);
              *(_OWORD *)v26 = *(_OWORD *)(v12 + v22 - 24);
              *(_QWORD *)(v26 + 16) = v30;
              *(_OWORD *)(v27 - 24) = v28;
              *(_QWORD *)(v27 - 8) = v29;
            }
            ++v25;
            v22 -= 24;
            v23 += 24;
          }
          while (v25 < v24);
        }
      }
    }
    if (v11 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v11, v15))
      goto LABEL_135;
    if (v11 - v15 >= v6)
      goto LABEL_46;
    v31 = v15 + v6;
    if (__OFADD__(v15, v6))
      goto LABEL_138;
    if (v31 >= v3)
      v31 = v3;
    if (v31 < v15)
      break;
    if (v11 != v31)
    {
      v32 = (uint64_t *)(v12 + 24 * v11);
      do
      {
        v33 = *(_QWORD *)(v12 + 24 * v11 + 16);
        v34 = v15;
        v35 = v32;
        do
        {
          if (v33 >= *(v35 - 1))
            break;
          if (!v12)
            goto LABEL_141;
          v36 = *v35;
          v37 = v35[1];
          *(_OWORD *)v35 = *(_OWORD *)(v35 - 3);
          v35[2] = *(v35 - 1);
          *(v35 - 2) = v37;
          *(v35 - 1) = v33;
          *(v35 - 3) = v36;
          v35 -= 3;
          ++v34;
        }
        while (v11 != v34);
        ++v11;
        v32 += 3;
      }
      while (v11 != v31);
      v11 = v31;
    }
LABEL_46:
    if (v11 < v15)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_10088E710(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v39 = *((_QWORD *)v13 + 2);
    v38 = *((_QWORD *)v13 + 3);
    v14 = v39 + 1;
    v12 = v111;
    if (v39 >= v38 >> 1)
    {
      v88 = sub_10088E710((char *)(v38 > 1), v39 + 1, 1, v13);
      v12 = v111;
      v13 = v88;
    }
    *((_QWORD *)v13 + 2) = v14;
    v40 = v13 + 32;
    v41 = &v13[16 * v39 + 32];
    *(_QWORD *)v41 = v15;
    *((_QWORD *)v41 + 1) = v11;
    if (v39)
    {
      while (1)
      {
        v42 = v14 - 1;
        if (v14 >= 4)
        {
          v47 = &v40[16 * v14];
          v48 = *((_QWORD *)v47 - 8);
          v49 = *((_QWORD *)v47 - 7);
          v53 = __OFSUB__(v49, v48);
          v50 = v49 - v48;
          if (v53)
            goto LABEL_119;
          v52 = *((_QWORD *)v47 - 6);
          v51 = *((_QWORD *)v47 - 5);
          v53 = __OFSUB__(v51, v52);
          v45 = v51 - v52;
          v46 = v53;
          if (v53)
            goto LABEL_120;
          v54 = v14 - 2;
          v55 = &v40[16 * v14 - 32];
          v57 = *(_QWORD *)v55;
          v56 = *((_QWORD *)v55 + 1);
          v53 = __OFSUB__(v56, v57);
          v58 = v56 - v57;
          if (v53)
            goto LABEL_122;
          v53 = __OFADD__(v45, v58);
          v59 = v45 + v58;
          if (v53)
            goto LABEL_125;
          if (v59 >= v50)
          {
            v77 = &v40[16 * v42];
            v79 = *(_QWORD *)v77;
            v78 = *((_QWORD *)v77 + 1);
            v53 = __OFSUB__(v78, v79);
            v80 = v78 - v79;
            if (v53)
              goto LABEL_129;
            v70 = v45 < v80;
            goto LABEL_83;
          }
        }
        else
        {
          if (v14 != 3)
          {
            v71 = *((_QWORD *)v13 + 4);
            v72 = *((_QWORD *)v13 + 5);
            v53 = __OFSUB__(v72, v71);
            v64 = v72 - v71;
            v65 = v53;
            goto LABEL_77;
          }
          v44 = *((_QWORD *)v13 + 4);
          v43 = *((_QWORD *)v13 + 5);
          v53 = __OFSUB__(v43, v44);
          v45 = v43 - v44;
          v46 = v53;
        }
        if ((v46 & 1) != 0)
          goto LABEL_121;
        v54 = v14 - 2;
        v60 = &v40[16 * v14 - 32];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v63 = __OFSUB__(v61, v62);
        v64 = v61 - v62;
        v65 = v63;
        if (v63)
          goto LABEL_124;
        v66 = &v40[16 * v42];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v53 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v53)
          goto LABEL_127;
        if (__OFADD__(v64, v69))
          goto LABEL_128;
        if (v64 + v69 >= v45)
        {
          v70 = v45 < v69;
LABEL_83:
          if (v70)
            v42 = v54;
          goto LABEL_85;
        }
LABEL_77:
        if ((v65 & 1) != 0)
          goto LABEL_123;
        v73 = &v40[16 * v42];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v53 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v53)
          goto LABEL_126;
        if (v76 < v64)
          goto LABEL_15;
LABEL_85:
        v81 = v42 - 1;
        if (v42 - 1 >= v14)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v12)
          goto LABEL_142;
        v82 = v13;
        v83 = &v40[16 * v81];
        v84 = *(_QWORD *)v83;
        v85 = &v40[16 * v42];
        v86 = *((_QWORD *)v85 + 1);
        sub_100AC8F1C((char *)(v12 + 24 * *(_QWORD *)v83), (char *)(v12 + 24 * *(_QWORD *)v85), v12 + 24 * v86, __dst);
        if (v1)
          goto LABEL_93;
        if (v86 < v84)
          goto LABEL_116;
        if (v42 > *((_QWORD *)v82 + 2))
          goto LABEL_117;
        *(_QWORD *)v83 = v84;
        *(_QWORD *)&v40[16 * v81 + 8] = v86;
        v87 = *((_QWORD *)v82 + 2);
        if (v42 >= v87)
          goto LABEL_118;
        v13 = v82;
        v14 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((_QWORD *)v82 + 2) = v87 - 1;
        v12 = v111;
        if (v87 <= 2)
          goto LABEL_15;
      }
    }
    v14 = 1;
LABEL_15:
    v6 = v109;
    v3 = v110;
    if (v11 >= v110)
    {
      v10 = v108;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100AC8F1C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  char *v24;
  const void *v25;
  char *v26;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v26 = __src;
  v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v17 = &v4[24 * v11];
      v24 = v17;
      v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v18 = a3 - 24;
        do
        {
          v19 = (char *)(v18 + 24);
          if (*((_QWORD *)v17 - 1) >= *((_QWORD *)v6 - 1))
          {
            v24 = v17 - 24;
            if (v19 < v17 || v18 >= (unint64_t)v17 || v19 != v17)
            {
              v22 = *(_OWORD *)(v17 - 24);
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v17 - 1);
              *(_OWORD *)v18 = v22;
            }
            v20 = v6;
            v17 -= 24;
            if (v6 <= v7)
              break;
          }
          else
          {
            v20 = v6 - 24;
            if (v19 != v6 || v18 >= (unint64_t)v6)
            {
              v21 = *(_OWORD *)v20;
              *(_QWORD *)(v18 + 16) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v18 = v21;
            }
            v26 = v6 - 24;
            if (v20 <= v7)
              break;
          }
          v18 -= 24;
          v6 = v20;
        }
        while (v17 > v4);
      }
LABEL_40:
      sub_10088E818((void **)&v26, &v25, &v24);
      return 1;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v13 = v4;
      while (1)
      {
        if (*((_QWORD *)v6 + 2) >= *((_QWORD *)v13 + 2))
        {
          v4 = v13 + 24;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 24;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 24;
          }
        }
        else
        {
          v14 = v6 + 24;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        *((_QWORD *)v7 + 2) = *((_QWORD *)v15 + 2);
        *(_OWORD *)v7 = v16;
LABEL_18:
        v7 += 24;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v25 = v4;
        v26 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100AC91D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v48 = a5;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = -v6;
  v41 = a1;
  v42 = a1 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v43 = v7;
  v44 = 0;
  v45 = v10 & v8;
  v46 = a2;
  v47 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100B289B4(&v36);
  v11 = *((_QWORD *)&v36 + 1);
  while (1)
  {
    if (v11 >> 60 == 15)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_10007CC38(v41);
      return swift_release();
    }
    v15 = v36;
    v16 = v38;
    v35 = v37;
    v18 = v39;
    v17 = v40;
    v19 = (_QWORD *)*v48;
    v21 = sub_1005197F0(v36, v11);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    if (v19[3] >= v24)
    {
      if ((a4 & 1) == 0)
        sub_100A9E85C();
    }
    else
    {
      sub_100A8E410(v24, a4 & 1);
      v26 = sub_1005197F0(v15, v11);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_20;
      v21 = v26;
    }
    v28 = (_QWORD *)*v48;
    if ((v25 & 1) != 0)
    {
      sub_10001BC14(v15, v11);
      v12 = (uint64_t *)(v28[7] + 32 * v21);
      v13 = v12[2];
      v14 = v12[3];
      sub_10001BC14(*v12, v12[1]);
      sub_10001BC14(v13, v14);
      *v12 = v35;
      v12[1] = v16;
      v12[2] = v18;
      v12[3] = v17;
    }
    else
    {
      v28[(v21 >> 6) + 8] |= 1 << v21;
      v29 = (uint64_t *)(v28[6] + 16 * v21);
      *v29 = v15;
      v29[1] = v11;
      v30 = (uint64_t *)(v28[7] + 32 * v21);
      *v30 = v35;
      v30[1] = v16;
      v30[2] = v18;
      v30[3] = v17;
      v31 = v28[2];
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (v32)
        goto LABEL_19;
      v28[2] = v33;
    }
    sub_100B289B4(&v36);
    v11 = *((_QWORD *)&v36 + 1);
    a4 = 1;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HashedAdvertisement);
  __break(1u);
  return result;
}

uint64_t sub_100AC941C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v56 = a1;
  v57 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v58 = v8;
  v59 = 0;
  v60 = v11 & v9;
  v61 = a2;
  v62 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_100B28BAC((uint64_t)&v52);
  v12 = v55;
  if (v55 == 3)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007CC38(v56);
    return swift_release();
  }
  v15 = v52;
  v14 = v53;
  v51 = v54;
  v16 = (_QWORD *)*a5;
  v18 = sub_1005197F0(v52, v53);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      v25 = (_QWORD *)*a5;
      if ((v17 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      sub_100A9EA48();
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) == 0)
        goto LABEL_15;
    }
    goto LABEL_13;
  }
  sub_100A8E77C(v21, a4 & 1);
  v23 = sub_1005197F0(v15, v14);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    v25 = (_QWORD *)*a5;
    if ((v22 & 1) == 0)
    {
LABEL_15:
      v25[(v18 >> 6) + 8] |= 1 << v18;
      v27 = (uint64_t *)(v25[6] + 16 * v18);
      *v27 = v15;
      v27[1] = v14;
      v28 = v25[7] + 16 * v18;
      *(_QWORD *)v28 = v51;
      *(_BYTE *)(v28 + 8) = v12;
      v29 = v25[2];
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (!v30)
      {
        v25[2] = v31;
LABEL_18:
        while (1)
        {
          sub_100B28BAC((uint64_t)&v52);
          v33 = v55;
          if (v55 == 3)
            goto LABEL_5;
          v35 = v52;
          v34 = v53;
          v36 = v54;
          v37 = (_QWORD *)*a5;
          v39 = sub_1005197F0(v52, v53);
          v40 = v37[2];
          v41 = (v38 & 1) == 0;
          v42 = v40 + v41;
          if (__OFADD__(v40, v41))
            goto LABEL_26;
          v43 = v38;
          if (v37[3] < v42)
          {
            sub_100A8E77C(v42, 1);
            v44 = sub_1005197F0(v35, v34);
            if ((v43 & 1) != (v45 & 1))
              goto LABEL_28;
            v39 = v44;
          }
          v46 = (_QWORD *)*a5;
          if ((v43 & 1) != 0)
          {
            sub_10001BC14(v35, v34);
            v32 = v46[7] + 16 * v39;
            *(_QWORD *)v32 = v36;
            *(_BYTE *)(v32 + 8) = v33;
          }
          else
          {
            v46[(v39 >> 6) + 8] |= 1 << v39;
            v47 = (uint64_t *)(v46[6] + 16 * v39);
            *v47 = v35;
            v47[1] = v34;
            v48 = v46[7] + 16 * v39;
            *(_QWORD *)v48 = v36;
            *(_BYTE *)(v48 + 8) = v33;
            v49 = v46[2];
            v30 = __OFADD__(v49, 1);
            v50 = v49 + 1;
            if (v30)
              goto LABEL_27;
            v46[2] = v50;
          }
        }
      }
      goto LABEL_27;
    }
LABEL_13:
    sub_10001BC14(v15, v14);
    v26 = v25[7] + 16 * v18;
    *(_QWORD *)v26 = v51;
    *(_BYTE *)(v26 + 8) = v12;
    goto LABEL_18;
  }
LABEL_28:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HashedAdvertisement);
  __break(1u);
  return result;
}

void sub_100AC972C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  char v16;

  while (1)
  {
    v6 = *(_QWORD *)(v0 + 24);
    v7 = *(_QWORD *)(v0 + 32);
    if (!v7)
      break;
    v1 = (v7 - 1) & v7;
    v2 = __clz(__rbit64(v7)) | (v6 << 6);
LABEL_3:
    v3 = *(_QWORD *)(*(_QWORD *)v0 + 56) + 16 * v2;
    v4 = *(_QWORD *)v3;
    v5 = *(_BYTE *)(v3 + 8);
    *(_QWORD *)(v0 + 24) = v6;
    *(_QWORD *)(v0 + 32) = v1;
    v15 = v4;
    v16 = v5;
    if (((*(uint64_t (**)(uint64_t *))(v0 + 40))(&v15) & 1) != 0)
      return;
  }
  v8 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    v9 = (unint64_t)(*(_QWORD *)(v0 + 16) + 64) >> 6;
    v10 = *(_QWORD *)(v0 + 24);
    if (v8 >= v9)
      goto LABEL_23;
    v11 = *(_QWORD *)(v0 + 8);
    v12 = *(_QWORD *)(v11 + 8 * v8);
    if (v12)
      goto LABEL_14;
    v13 = v6 + 2;
    v10 = v6 + 1;
    if (v6 + 2 >= v9)
      goto LABEL_23;
    v12 = *(_QWORD *)(v11 + 8 * v13);
    if (!v12)
    {
      v10 = v6 + 2;
      if (v6 + 3 >= v9)
        goto LABEL_23;
      v12 = *(_QWORD *)(v11 + 8 * (v6 + 3));
      if (v12)
      {
        v8 = v6 + 3;
        goto LABEL_14;
      }
      v13 = v6 + 4;
      v10 = v6 + 3;
      if (v6 + 4 >= v9)
        goto LABEL_23;
      v12 = *(_QWORD *)(v11 + 8 * v13);
      if (!v12)
      {
        v8 = v6 + 5;
        v10 = v6 + 4;
        if (v6 + 5 >= v9)
          goto LABEL_23;
        v12 = *(_QWORD *)(v11 + 8 * v8);
        if (!v12)
        {
          v10 = v9 - 1;
          v14 = v6 + 6;
          while (v9 != v14)
          {
            v12 = *(_QWORD *)(v11 + 8 * v14++);
            if (v12)
            {
              v8 = v14 - 1;
              goto LABEL_14;
            }
          }
LABEL_23:
          *(_QWORD *)(v0 + 24) = v10;
          *(_QWORD *)(v0 + 32) = 0;
          return;
        }
        goto LABEL_14;
      }
    }
    v8 = v13;
LABEL_14:
    v1 = (v12 - 1) & v12;
    v2 = __clz(__rbit64(v12)) + (v8 << 6);
    v6 = v8;
    goto LABEL_3;
  }
  __break(1u);
}

uint64_t sub_100AC9898@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  sub_10001BBBC(v3, v2);
  sub_10001BBBC(v4, v5);
  return sub_10001BBBC(v6, v7);
}

uint64_t sub_100AC98EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  __int128 v4;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  v4 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 24) = v3;
  return sub_10001BBBC(v2, v4);
}

uint64_t sub_100AC9910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101102348);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AC9958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101102348);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AC99A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100AC99B0(uint64_t a1)
{
  uint64_t v1;

  return sub_100AC72F8(a1, *(_BYTE *)(v1 + 16));
}

void sub_100AC99B8(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  int64_t v21;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v21)
      goto LABEL_23;
    v18 = *(_QWORD *)(v20 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v21)
        goto LABEL_23;
      v18 = *(_QWORD *)(v20 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v21)
          goto LABEL_23;
        v18 = *(_QWORD *)(v20 + 8 * v7);
        if (!v18)
        {
          v7 = v17 + 3;
          if (v17 + 3 >= v21)
            goto LABEL_23;
          v18 = *(_QWORD *)(v20 + 8 * v7);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v18 - 1) & v18;
    v9 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
    v10 = 16 * v9;
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v10);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(_QWORD *)(a1 + 56) + v10;
    v15 = *(_QWORD *)v14;
    v16 = *(unsigned __int8 *)(v14 + 8);
    sub_10001BBBC(*v11, v13);
    a2(v12, v13, v15, v16);
    sub_10001BC14(v12, v13);
  }
  v19 = v17 + 4;
  if (v19 >= v21)
  {
LABEL_23:
    swift_release();
    return;
  }
  v18 = *(_QWORD *)(v20 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v21)
      goto LABEL_23;
    v18 = *(_QWORD *)(v20 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

_QWORD *sub_100AC9B94(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t RequestBeacon_OwnedDevice;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t RequestBeacon;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v29 = a3;
  v30 = a4;
  v28[1] = a2;
  v5 = sub_10001A9A8(&qword_101112BD8);
  __chkstk_darwin(v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  RequestBeacon_OwnedDevice = type metadata accessor for FetchRequestBeacon_OwnedDevice(0);
  v9 = *(_QWORD *)(RequestBeacon_OwnedDevice - 8);
  v10 = __chkstk_darwin(RequestBeacon_OwnedDevice);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v33 = (uint64_t)v28 - v13;
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  __chkstk_darwin(RequestBeacon);
  v17 = (char *)v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    return _swiftEmptyArrayStorage;
  v19 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v20 = *(_QWORD *)(v15 + 72);
  v21 = _swiftEmptyArrayStorage;
  v22 = type metadata accessor for FetchRequestBeacon;
  v31 = RequestBeacon_OwnedDevice;
  v32 = v12;
  do
  {
    sub_10005972C(v19, (uint64_t)v17, v22);
    sub_10005972C((uint64_t)v17, (uint64_t)v7, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, RequestBeacon_OwnedDevice);
    sub_1000126B0((uint64_t)v17, v22);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RequestBeacon_OwnedDevice) == 1)
    {
      sub_100004048((uint64_t)v7, &qword_101112BD8);
    }
    else
    {
      v23 = v22;
      v24 = v33;
      sub_100ACA7DC((uint64_t)v7, v33);
      sub_100ACA7DC(v24, (uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        v21 = (_QWORD *)sub_1007C9B74(0, v21[2] + 1, 1, (unint64_t)v21);
      v26 = v21[2];
      v25 = v21[3];
      if (v26 >= v25 >> 1)
        v21 = (_QWORD *)sub_1007C9B74(v25 > 1, v26 + 1, 1, (unint64_t)v21);
      v21[2] = v26 + 1;
      v12 = v32;
      sub_100ACA7DC((uint64_t)v32, (uint64_t)v21+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v26);
      v22 = v23;
      RequestBeacon_OwnedDevice = v31;
    }
    v19 += v20;
    --v18;
  }
  while (v18);
  return v21;
}

uint64_t sub_100AC9E18(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v6 + 329) = a5;
  *(_QWORD *)(v6 + 128) = a4;
  *(_QWORD *)(v6 + 136) = a6;
  *(_BYTE *)(v6 + 328) = a2;
  *(_QWORD *)(v6 + 112) = a1;
  *(_QWORD *)(v6 + 120) = a3;
  v7 = type metadata accessor for HashAlgorithm(0);
  *(_QWORD *)(v6 + 144) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 152) = v8;
  *(_QWORD *)(v6 + 160) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  *(_QWORD *)(v6 + 168) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v6 + 176) = v10;
  *(_QWORD *)(v6 + 184) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v6 + 192) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 200) = v12;
  *(_QWORD *)(v6 + 208) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AC9ED4, 0, 0);
}

void sub_100AC9ED4()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  void (__cdecl *v52)();

  v1 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 216) = JSONEncoder.init()(v2);
  if (qword_1010EA190 != -1)
    swift_once(&qword_1010EA190, sub_100AC4350);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(unsigned __int8 *)(v0 + 329);
  v7 = sub_10001A9E8(v5, (uint64_t)qword_101112B98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v3);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v10 = *(unsigned __int8 *)(v0 + 328);
  if (v6 == 1)
  {
    v11 = sub_100AC9B94(*(_QWORD *)(v0 + 112), v10, v8, v9);
    v13 = v12;
    v15 = v14;
    v17 = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 48) = v11;
    *(_BYTE *)(v0 + 56) = v13;
    *(_QWORD *)(v0 + 64) = v15;
    *(_QWORD *)(v0 + 72) = v17;
    v18 = sub_100ACA784();
    v19 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 48, &type metadata for OwnedDeviceFetchRequestContent, v18);
  }
  else
  {
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 112);
    *(_BYTE *)(v0 + 24) = v10;
    *(_QWORD *)(v0 + 32) = v8;
    *(_QWORD *)(v0 + 40) = v9;
    v21 = sub_100ACA740();
    v19 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 16, &type metadata for FetchRequestContent, v21);
  }
  v22 = v19;
  v23 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 224) = v23;
  *(_QWORD *)(v0 + 232) = v22;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v25 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v25)
  {
    v26 = v25;
    v27 = objc_msgSend(v25, "serverFriendlyDescription");

    if (v27)
    {
      v29 = *(_QWORD *)(v0 + 176);
      v28 = *(_QWORD *)(v0 + 184);
      v30 = *(_QWORD *)(v0 + 168);
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v33 = v32;

      v34 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_100109D28(v31, v33, 0xD000000000000011, 0x8000000100ECA2C0, v34);
      v35 = swift_bridgeObjectRelease();
      v36 = Date.init()(v35);
      v37 = Date.epoch.getter(v36);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_QWORD *)(v0 + 96) = v37;
      v38 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v40 = v39;
      v41 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_100109D28(v38, v40, 0xD000000000000015, 0x8000000100ECA2E0, v41);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 104) = 1;
      v42 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v44 = v43;
      v45 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_100109D28(v42, v44, 0xD000000000000013, 0x8000000100ECA300, v45);
      swift_bridgeObjectRelease();
      v46 = sub_10069BB84();
      v48 = v47;
      v49 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_100109D28((uint64_t)v46, v48, 0x6567412D72657355, 0xEA0000000000746ELL, v49);
      swift_bridgeObjectRelease();
      v50 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      sub_100109D28(52, 0xE100000000000000, 0x762D747065636341, 0xEE006E6F69737265, v50);
      *(_QWORD *)(v0 + 240) = _swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      v52 = (void (__cdecl *)())((char *)&dword_101115240 + dword_101115240);
      v51 = (_QWORD *)swift_task_alloc(unk_101115244);
      *(_QWORD *)(v0 + 248) = v51;
      *v51 = v0;
      v51[1] = sub_100ACA388;
      v52();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100ACA388(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 248);
  *(_QWORD *)(v3 + 256) = a1;
  *(_QWORD *)(v3 + 264) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100ACA3E4, 0, 0);
}

uint64_t sub_100ACA3E4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[32];
  v1 = v0[33];
  v4 = v0[28];
  v3 = v0[29];
  v6 = v0[19];
  v5 = v0[20];
  v7 = v0[18];
  v0[10] = v2;
  v0[11] = v1;
  sub_10001BBBC(v3, v4);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v3, v4);
  sub_10001BC14(v3, v4);
  sub_10001BC14(v2, v1);
  v8 = v0[10];
  v9 = v0[11];
  v0[34] = v8;
  v0[35] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[36] = v10;
  v0[37] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115238 + dword_101115238;
  v13 = (_QWORD *)swift_task_alloc(unk_10111523C);
  v0[38] = v13;
  *v13 = v0;
  v13[1] = sub_100ACA510;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[17]);
}

uint64_t sub_100ACA510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 304);
  *(_QWORD *)(*(_QWORD *)v2 + 312) = v1;
  swift_task_dealloc(v5);
  v7 = v4[36];
  v6 = v4[37];
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_10001BC14(v7, v6);
    v8 = sub_100ACA6B0;
  }
  else
  {
    v4[40] = a1;
    sub_10001BC14(v7, v6);
    v8 = sub_100ACA5B0;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100ACA5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 240);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v12 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 160);
  v11 = v12;
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001BC14(v6, v7);
  swift_release();
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0 + 8))(v11, *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 224));
}

uint64_t sub_100ACA6B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  swift_release();
  sub_10001BC14(v3, v4);
  sub_10001BC14(v1, v2);
  swift_release();
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100ACA740()
{
  unint64_t result;

  result = qword_101112BC8;
  if (!qword_101112BC8)
  {
    result = swift_getWitnessTable(byte_100E5C2CC, &type metadata for FetchRequestContent);
    atomic_store(result, (unint64_t *)&qword_101112BC8);
  }
  return result;
}

unint64_t sub_100ACA784()
{
  unint64_t result;

  result = qword_101112BD0;
  if (!qword_101112BD0)
  {
    result = swift_getWitnessTable(byte_100E5C2A4, &type metadata for OwnedDeviceFetchRequestContent);
    atomic_store(result, (unint64_t *)&qword_101112BD0);
  }
  return result;
}

uint64_t type metadata accessor for FetchRequestBeacon_OwnedDevice(uint64_t a1)
{
  return sub_10001B630(a1, qword_101112C38, (uint64_t)&nominal type descriptor for FetchRequestBeacon_OwnedDevice);
}

uint64_t sub_100ACA7DC(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon_OwnedDevice;

  RequestBeacon_OwnedDevice = type metadata accessor for FetchRequestBeacon_OwnedDevice(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RequestBeacon_OwnedDevice - 8) + 32))(a2, a1, RequestBeacon_OwnedDevice);
  return a2;
}

uint64_t sub_100ACA820(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return sub_100AC6070(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(uint64_t **)(v4 + 24));
}

uint64_t *sub_100ACA828(uint64_t *a1, uint64_t *a2)
{
  uint64_t RequestBeacon;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v5 = *(_DWORD *)(*(_QWORD *)(RequestBeacon - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = (int *)RequestBeacon;
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = v6[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DateInterval(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      v14 = sub_10001A9A8(&qword_101102348);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = v6[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v11))
    {
      v19 = sub_10001A9A8(&qword_101102348);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
    v20 = v6[7];
    v21 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = v21;
    *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
    v22 = v6[9];
    v23 = *(uint64_t *)((char *)a2 + v22);
    *(uint64_t *)((char *)a1 + v22) = v23;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_100ACA9E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t RequestBeacon;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  v4 = a1 + *(int *)(RequestBeacon + 20);
  v5 = type metadata accessor for DateInterval(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(RequestBeacon + 24);
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ACAAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *RequestBeacon;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  v6 = RequestBeacon[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_10001A9A8(&qword_101102348);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = RequestBeacon[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    v16 = sub_10001A9A8(&qword_101102348);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = RequestBeacon[7];
  v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  *(_OWORD *)(a1 + RequestBeacon[8]) = *(_OWORD *)(a2 + RequestBeacon[8]);
  v19 = RequestBeacon[9];
  v20 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t sub_100ACAC40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *RequestBeacon;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  v6 = RequestBeacon[5];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_10001A9A8(&qword_101102348);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = RequestBeacon[6];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = v11((void *)(a1 + v15), 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_10001A9A8(&qword_101102348);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  v21 = RequestBeacon[7];
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = RequestBeacon[8];
  v24 = a1 + v23;
  v25 = a2 + v23;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  *(_BYTE *)(v24 + 1) = *(_BYTE *)(v25 + 1);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  v26 = RequestBeacon[9];
  v27 = *(_QWORD *)(a2 + v26);
  *(_QWORD *)(a1 + v26) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ACAE88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *RequestBeacon;
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  v6 = RequestBeacon[5];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_10001A9A8(&qword_101102348);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = RequestBeacon[6];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    v16 = sub_10001A9A8(&qword_101102348);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  *(_QWORD *)(a1 + RequestBeacon[7]) = *(_QWORD *)(a2 + RequestBeacon[7]);
  *(_OWORD *)(a1 + RequestBeacon[8]) = *(_OWORD *)(a2 + RequestBeacon[8]);
  *(_QWORD *)(a1 + RequestBeacon[9]) = *(_QWORD *)(a2 + RequestBeacon[9]);
  return a1;
}

uint64_t sub_100ACB008(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *RequestBeacon;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  RequestBeacon = (int *)type metadata accessor for FetchRequestBeacon(0);
  v6 = RequestBeacon[5];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for DateInterval(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_10001A9A8(&qword_101102348);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = RequestBeacon[6];
  v16 = (void *)(a1 + v15);
  v17 = (void *)(a2 + v15);
  v18 = v11((void *)(a1 + v15), 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_10001A9A8(&qword_101102348);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  *(_QWORD *)(a1 + RequestBeacon[7]) = *(_QWORD *)(a2 + RequestBeacon[7]);
  swift_bridgeObjectRelease();
  v21 = RequestBeacon[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  *(_BYTE *)(v22 + 1) = *(_BYTE *)(v23 + 1);
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(a1 + RequestBeacon[9]) = *(_QWORD *)(a2 + RequestBeacon[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ACB240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ACB24C);
}

uint64_t sub_100ACB24C(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon;

  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RequestBeacon - 8) + 48))(a1, a2, RequestBeacon);
}

uint64_t sub_100ACB288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ACB294);
}

uint64_t sub_100ACB294(uint64_t a1, uint64_t a2)
{
  uint64_t RequestBeacon;

  RequestBeacon = type metadata accessor for FetchRequestBeacon(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(RequestBeacon - 8) + 56))(a1, a2, a2, RequestBeacon);
}

uint64_t sub_100ACB2D4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for FetchRequestBeacon(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchRequestContent()
{
  return &type metadata for OwnedDeviceFetchRequestContent;
}

uint64_t destroy for FetchRequestContent(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t _s12searchpartyd30OwnedDeviceFetchRequestContentVwcp_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v4 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *_s12searchpartyd30OwnedDeviceFetchRequestContentVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *_s12searchpartyd30OwnedDeviceFetchRequestContentVwta_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v5 = a2[3];
  v6 = a1[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for FetchRequestContent()
{
  return &type metadata for FetchRequestContent;
}

ValueMetadata *type metadata accessor for FetchRequest()
{
  return &type metadata for FetchRequest;
}

ValueMetadata *type metadata accessor for FetchRequestContext.FetchRequestContextPolicy()
{
  return &type metadata for FetchRequestContext.FetchRequestContextPolicy;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext.Mode()
{
  return &type metadata for FetchRequestBeacon.SearchContext.Mode;
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon.FetchRequestBeaconError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100ACB50C + 4 * byte_100E5BEEB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100ACB52C + 4 * byte_100E5BEF0[v4]))();
}

_BYTE *sub_100ACB50C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100ACB52C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100ACB534(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100ACB53C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100ACB544(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100ACB54C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.FetchRequestBeaconError()
{
  return &type metadata for FetchRequestBeacon.FetchRequestBeaconError;
}

uint64_t *sub_100ACB568(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for DateInterval(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      v14 = sub_10001A9A8(&qword_101102348);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = a3[6];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    if (v13((char *)a2 + v16, 1, v11))
    {
      v19 = sub_10001A9A8(&qword_101102348);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v17, v18, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    }
    v20 = a3[7];
    v21 = a3[8];
    v22 = *(uint64_t *)((char *)a2 + v20);
    *(uint64_t *)((char *)a1 + v20) = v22;
    *(_OWORD *)((char *)a1 + v21) = *(_OWORD *)((char *)a2 + v21);
    v23 = a3[9];
    v24 = *(uint64_t *)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = v24;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t sub_100ACB714(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + a2[6];
  if (!v8(v9, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_100ACB7E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for DateInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_10001A9A8(&qword_101102348);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    v17 = sub_10001A9A8(&qword_101102348);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[7];
  v19 = a3[8];
  v20 = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + v18) = v20;
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  v21 = a3[9];
  v22 = *(_QWORD *)(a2 + v21);
  *(_QWORD *)(a1 + v21) = v22;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_100ACB960(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for DateInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_10001A9A8(&qword_101102348);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = v12((void *)(a1 + v16), 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_10001A9A8(&qword_101102348);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v17, v18, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  v22 = a3[7];
  v23 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  v24 = a3[8];
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_BYTE *)v25 = *(_BYTE *)v26;
  *(_BYTE *)(v25 + 1) = *(_BYTE *)(v26 + 1);
  *(_QWORD *)(v25 + 8) = *(_QWORD *)(v26 + 8);
  v27 = a3[9];
  v28 = *(_QWORD *)(a2 + v27);
  *(_QWORD *)(a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ACBBA0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(const void *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = type metadata accessor for DateInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_10001A9A8(&qword_101102348);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[6];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  if (v12((const void *)(a2 + v14), 1, v10))
  {
    v17 = sub_10001A9A8(&qword_101102348);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v18 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100ACBD14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (void *)(a1 + v7);
  v9 = (void *)(a2 + v7);
  v10 = type metadata accessor for DateInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_10001A9A8(&qword_101102348);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[6];
  v17 = (void *)(a1 + v16);
  v18 = (void *)(a2 + v16);
  v19 = v12((void *)(a1 + v16), 1, v10);
  v20 = v12(v18, 1, v10);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v17, v18, v10);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v17, v10);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    v21 = sub_10001A9A8(&qword_101102348);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v17, v18, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
LABEL_13:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = a3[9];
  v24 = a1 + v22;
  v25 = a2 + v22;
  *(_BYTE *)v24 = *(_BYTE *)v25;
  *(_BYTE *)(v24 + 1) = *(_BYTE *)(v25 + 1);
  *(_QWORD *)(v24 + 8) = *(_QWORD *)(v25 + 8);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100ACBF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100ACBF4C);
}

uint64_t sub_100ACBF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10001A9A8(&qword_101102348);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_100ACBFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100ACC004);
}

uint64_t sub_100ACC004(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = sub_10001A9A8(&qword_101102348);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

void sub_100ACC0AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  char *v11;

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_100ACC14C(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v10 = &unk_100E5BFE8;
      v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256, 6, &v6, a1 + 16);
    }
  }
}

void sub_100ACC14C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101112CD8)
  {
    v2 = type metadata accessor for DateInterval(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101112CD8);
  }
}

unint64_t sub_100ACC1A4()
{
  unint64_t result;

  result = qword_101112D18;
  if (!qword_101112D18)
  {
    result = swift_getWitnessTable(byte_100E5C0B4, &type metadata for FetchRequestBeacon.FetchRequestBeaconError);
    atomic_store(result, (unint64_t *)&qword_101112D18);
  }
  return result;
}

unint64_t sub_100ACC1EC()
{
  unint64_t result;

  result = qword_101112D20;
  if (!qword_101112D20)
  {
    result = swift_getWitnessTable(a5_17, &type metadata for FetchRequestBeacon.SearchContext.Mode);
    atomic_store(result, (unint64_t *)&qword_101112D20);
  }
  return result;
}

unint64_t sub_100ACC234()
{
  unint64_t result;

  result = qword_101112D28;
  if (!qword_101112D28)
  {
    result = swift_getWitnessTable(aM_38, &type metadata for FetchRequestContext.FetchRequestContextPolicy);
    atomic_store(result, (unint64_t *)&qword_101112D28);
  }
  return result;
}

unint64_t sub_100ACC278()
{
  unint64_t result;

  result = qword_101112D38;
  if (!qword_101112D38)
  {
    result = swift_getWitnessTable(byte_100E5C850, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112D38);
  }
  return result;
}

unint64_t sub_100ACC2BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101112D48;
  if (!qword_101112D48)
  {
    v1 = sub_10001F784(&qword_101112D40);
    v2 = sub_100006204(&qword_101112D50, type metadata accessor for FetchRequestBeacon, (uint64_t)&unk_100E5C04C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101112D48);
  }
  return result;
}

unint64_t sub_100ACC338()
{
  unint64_t result;

  result = qword_101112D58;
  if (!qword_101112D58)
  {
    result = swift_getWitnessTable(byte_100E5C8A0, &type metadata for FetchRequestContext);
    atomic_store(result, (unint64_t *)&qword_101112D58);
  }
  return result;
}

unint64_t sub_100ACC37C()
{
  unint64_t result;

  result = qword_101112D68;
  if (!qword_101112D68)
  {
    result = swift_getWitnessTable(aA_51, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112D68);
  }
  return result;
}

unint64_t sub_100ACC3C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101112D78;
  if (!qword_101112D78)
  {
    v1 = sub_10001F784(&qword_101112D70);
    v2 = sub_100006204(&qword_101112D80, type metadata accessor for FetchRequestBeacon_OwnedDevice, (uint64_t)&unk_100E5C27C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101112D78);
  }
  return result;
}

unint64_t sub_100ACC43C()
{
  unint64_t result;

  result = qword_101112D90;
  if (!qword_101112D90)
  {
    result = swift_getWitnessTable(byte_100E5C7B0, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112D90);
  }
  return result;
}

unint64_t sub_100ACC480(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104BB78, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_100ACC4C8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104BE00, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_100ACC510()
{
  unint64_t result;

  result = qword_101112D98;
  if (!qword_101112D98)
  {
    result = swift_getWitnessTable(byte_100E5C1CC, &type metadata for FetchRequestContext.FetchRequestContextPolicy);
    atomic_store(result, (unint64_t *)&qword_101112D98);
  }
  return result;
}

unint64_t sub_100ACC554()
{
  unint64_t result;

  result = qword_101112DA0;
  if (!qword_101112DA0)
  {
    result = swift_getWitnessTable(byte_100E5C104, &type metadata for FetchRequestBeacon.SearchContext.Mode);
    atomic_store(result, (unint64_t *)&qword_101112DA0);
  }
  return result;
}

unint64_t sub_100ACC598()
{
  unint64_t result;

  result = qword_101112DB0;
  if (!qword_101112DB0)
  {
    result = swift_getWitnessTable(byte_100E5C760, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100ACC628 + 4 * byte_100E5BEFA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100ACC65C + 4 * byte_100E5BEF5[v4]))();
}

uint64_t sub_100ACC65C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACC664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100ACC66CLL);
  return result;
}

uint64_t sub_100ACC678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100ACC680);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100ACC684(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACC68C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.CodingKeys()
{
  return &type metadata for FetchRequestBeacon.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon_OwnedDevice.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100ACC6F4 + 4 * byte_100E5BF04[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100ACC728 + 4 * byte_100E5BEFF[v4]))();
}

uint64_t sub_100ACC728(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACC730(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100ACC738);
  return result;
}

uint64_t sub_100ACC744(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100ACC74CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100ACC750(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACC758(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon_OwnedDevice.CodingKeys()
{
  return &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchRequestContent.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchRequestContent.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchRequestContent.CodingKeys()
{
  return &type metadata for FetchRequestContent.CodingKeys;
}

uint64_t getEnumTagSinglePayload for FetchRequestBeacon.SearchContext(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchRequestBeacon.SearchContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext()
{
  return &type metadata for FetchRequestBeacon.SearchContext;
}

uint64_t getEnumTagSinglePayload for FetchRequestContext(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchRequestContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestContext()
{
  return &type metadata for FetchRequestContext;
}

unint64_t sub_100ACC8EC()
{
  unint64_t result;

  result = qword_101112DB8;
  if (!qword_101112DB8)
  {
    result = swift_getWitnessTable(byte_100E5C4A0, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DB8);
  }
  return result;
}

unint64_t sub_100ACC934()
{
  unint64_t result;

  result = qword_101112DC0;
  if (!qword_101112DC0)
  {
    result = swift_getWitnessTable(aY_64, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DC0);
  }
  return result;
}

unint64_t sub_100ACC97C()
{
  unint64_t result;

  result = qword_101112DC8;
  if (!qword_101112DC8)
  {
    result = swift_getWitnessTable(aI_44, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DC8);
  }
  return result;
}

unint64_t sub_100ACC9C4()
{
  unint64_t result;

  result = qword_101112DD0;
  if (!qword_101112DD0)
  {
    result = swift_getWitnessTable(aY_65, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DD0);
  }
  return result;
}

unint64_t sub_100ACCA0C()
{
  unint64_t result;

  result = qword_101112DD8;
  if (!qword_101112DD8)
  {
    result = swift_getWitnessTable(byte_100E5C670, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DD8);
  }
  return result;
}

unint64_t sub_100ACCA54()
{
  unint64_t result;

  result = qword_101112DE0;
  if (!qword_101112DE0)
  {
    result = swift_getWitnessTable(byte_100E5C698, &type metadata for FetchRequestBeacon.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DE0);
  }
  return result;
}

unint64_t sub_100ACCA9C()
{
  unint64_t result;

  result = qword_101112DE8;
  if (!qword_101112DE8)
  {
    result = swift_getWitnessTable(byte_100E5C580, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DE8);
  }
  return result;
}

unint64_t sub_100ACCAE4()
{
  unint64_t result;

  result = qword_101112DF0;
  if (!qword_101112DF0)
  {
    result = swift_getWitnessTable(byte_100E5C5A8, &type metadata for FetchRequestBeacon_OwnedDevice.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DF0);
  }
  return result;
}

unint64_t sub_100ACCB2C()
{
  unint64_t result;

  result = qword_101112DF8;
  if (!qword_101112DF8)
  {
    result = swift_getWitnessTable(byte_100E5C4C8, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112DF8);
  }
  return result;
}

unint64_t sub_100ACCB74()
{
  unint64_t result;

  result = qword_101112E00;
  if (!qword_101112E00)
  {
    result = swift_getWitnessTable(aY_66, &type metadata for OwnedDeviceFetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E00);
  }
  return result;
}

unint64_t sub_100ACCBBC()
{
  unint64_t result;

  result = qword_101112E08;
  if (!qword_101112E08)
  {
    result = swift_getWitnessTable(aA_52, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E08);
  }
  return result;
}

unint64_t sub_100ACCC04()
{
  unint64_t result;

  result = qword_101112E10;
  if (!qword_101112E10)
  {
    result = swift_getWitnessTable(a1_30, &type metadata for FetchRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E10);
  }
  return result;
}

unint64_t sub_100ACCC48()
{
  unint64_t result;

  result = qword_101112E20;
  if (!qword_101112E20)
  {
    result = swift_getWitnessTable(byte_100E5CA88, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E20);
  }
  return result;
}

unint64_t sub_100ACCC8C()
{
  unint64_t result;

  result = qword_101112E28;
  if (!qword_101112E28)
  {
    result = swift_getWitnessTable(byte_100E5C1A4, &type metadata for FetchRequestContext.FetchRequestContextPolicy);
    atomic_store(result, (unint64_t *)&qword_101112E28);
  }
  return result;
}

unint64_t sub_100ACCCD0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D358, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t sub_100ACCD18(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x72617069746C756DLL && a2 == 0xEE00746E756F4374)
  {
    v5 = 0xEE00746E756F4374;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72617069746C756DLL, 0xEE00746E756F4374, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1701273968 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701273968, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100ACCE70(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7963696C6F70 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7963696C6F70, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100EED950)
  {
    swift_bridgeObjectRelease(0x8000000100EED950);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EED950, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100ACCF54(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x686372616573 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x686372616573, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_100ACD03C()
{
  unint64_t result;

  result = qword_101112E38;
  if (!qword_101112E38)
  {
    result = swift_getWitnessTable(asc_100E5CA38, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E38);
  }
  return result;
}

unint64_t sub_100ACD080()
{
  unint64_t result;

  result = qword_101112E40;
  if (!qword_101112E40)
  {
    result = swift_getWitnessTable(byte_100E5C0DC, &type metadata for FetchRequestBeacon.SearchContext.Mode);
    atomic_store(result, (unint64_t *)&qword_101112E40);
  }
  return result;
}

uint64_t _s12searchpartyd19FetchRequestContextV25FetchRequestContextPolicyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100ACD110 + 4 * byte_100E5BF0E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100ACD144 + 4 * byte_100E5BF09[v4]))();
}

uint64_t sub_100ACD144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACD14C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100ACD154);
  return result;
}

uint64_t sub_100ACD160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100ACD168);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100ACD16C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACD174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestBeacon.SearchContext.CodingKeys()
{
  return &type metadata for FetchRequestBeacon.SearchContext.CodingKeys;
}

uint64_t _s12searchpartyd18FetchRequestBeaconV13SearchContextV4ModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100ACD1DC + 4 * byte_100E5BF18[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100ACD210 + 4 * byte_100E5BF13[v4]))();
}

uint64_t sub_100ACD210(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACD218(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100ACD220);
  return result;
}

uint64_t sub_100ACD22C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100ACD234);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100ACD238(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100ACD240(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchRequestContext.CodingKeys()
{
  return &type metadata for FetchRequestContext.CodingKeys;
}

unint64_t sub_100ACD260()
{
  unint64_t result;

  result = qword_101112E48;
  if (!qword_101112E48)
  {
    result = swift_getWitnessTable(aY_67, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E48);
  }
  return result;
}

unint64_t sub_100ACD2A8()
{
  unint64_t result;

  result = qword_101112E50;
  if (!qword_101112E50)
  {
    result = swift_getWitnessTable(byte_100E5CA10, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E50);
  }
  return result;
}

unint64_t sub_100ACD2F0()
{
  unint64_t result;

  result = qword_101112E58;
  if (!qword_101112E58)
  {
    result = swift_getWitnessTable(byte_100E5C980, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E58);
  }
  return result;
}

unint64_t sub_100ACD338()
{
  unint64_t result;

  result = qword_101112E60;
  if (!qword_101112E60)
  {
    result = swift_getWitnessTable(byte_100E5C9A8, &type metadata for FetchRequestBeacon.SearchContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E60);
  }
  return result;
}

unint64_t sub_100ACD380()
{
  unint64_t result;

  result = qword_101112E68;
  if (!qword_101112E68)
  {
    result = swift_getWitnessTable(byte_100E5C8C8, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E68);
  }
  return result;
}

unint64_t sub_100ACD3C8()
{
  unint64_t result;

  result = qword_101112E70;
  if (!qword_101112E70)
  {
    result = swift_getWitnessTable(aY_68, &type metadata for FetchRequestContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112E70);
  }
  return result;
}

uint64_t sub_100ACD410()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  _QWORD v4[2];

  strcpy((char *)v4, ".secondary/(");
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return v4[0];
}

ValueMetadata *type metadata accessor for SecondaryIndex()
{
  return &type metadata for SecondaryIndex;
}

unint64_t sub_100ACD4AC()
{
  unint64_t result;

  result = qword_101112E78;
  if (!qword_101112E78)
  {
    result = swift_getWitnessTable(aQ_38, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112E78);
  }
  return result;
}

unint64_t sub_100ACD4F4()
{
  unint64_t result;

  result = qword_101112E80;
  if (!qword_101112E80)
  {
    result = swift_getWitnessTable(byte_100E5CB38, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112E80);
  }
  return result;
}

unint64_t sub_100ACD538(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100ACD594();
  a1[2] = sub_100ACD5D8();
  a1[3] = sub_100ACD61C();
  a1[4] = sub_100ACD660();
  a1[5] = sub_100ACD6A4();
  a1[6] = sub_100ACD6E8();
  a1[7] = sub_100ACD72C();
  result = sub_100ACD770();
  a1[8] = result;
  return result;
}

unint64_t sub_100ACD594()
{
  unint64_t result;

  result = qword_101112E88;
  if (!qword_101112E88)
  {
    result = swift_getWitnessTable(aY_69, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112E88);
  }
  return result;
}

unint64_t sub_100ACD5D8()
{
  unint64_t result;

  result = qword_101112E90;
  if (!qword_101112E90)
  {
    result = swift_getWitnessTable(byte_100E5CC68, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112E90);
  }
  return result;
}

unint64_t sub_100ACD61C()
{
  unint64_t result;

  result = qword_101112E98;
  if (!qword_101112E98)
  {
    result = swift_getWitnessTable(asc_100E5CB00, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112E98);
  }
  return result;
}

unint64_t sub_100ACD660()
{
  unint64_t result;

  result = qword_101112EA0;
  if (!qword_101112EA0)
  {
    result = swift_getWitnessTable(aA_53, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112EA0);
  }
  return result;
}

unint64_t sub_100ACD6A4()
{
  unint64_t result;

  result = qword_101112EA8;
  if (!qword_101112EA8)
  {
    result = swift_getWitnessTable(byte_100E5CBF0, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112EA8);
  }
  return result;
}

unint64_t sub_100ACD6E8()
{
  unint64_t result;

  result = qword_101112EB0;
  if (!qword_101112EB0)
  {
    result = swift_getWitnessTable(byte_100E5CC28, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112EB0);
  }
  return result;
}

unint64_t sub_100ACD72C()
{
  unint64_t result;

  result = qword_101112EB8;
  if (!qword_101112EB8)
  {
    result = swift_getWitnessTable(byte_100E5CBB8, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112EB8);
  }
  return result;
}

unint64_t sub_100ACD770()
{
  unint64_t result;

  result = qword_101112EC0;
  if (!qword_101112EC0)
  {
    result = swift_getWitnessTable(byte_100E5CB60, &type metadata for SecondaryIndex);
    atomic_store(result, (unint64_t *)&qword_101112EC0);
  }
  return result;
}

uint64_t sub_100ACD7B4(char a1, uint64_t a2, void *a3)
{
  Swift::String v3;
  void *object;
  NSString v5;
  char **v6;
  Swift::String v7;
  id v8;
  uint64_t result;
  Swift::String v12;

  if (a1 == 1)
  {
    v3._countAndFlagsBits = 980182388;
    v3._object = (void *)0xE400000000000000;
    object = String.deletingPrefix(_:)(v3)._object;
    v5 = String._bridgeToObjectiveC()();
    v6 = &selRef_handleWithPhoneNumber_;
LABEL_5:
    swift_bridgeObjectRelease(object);
    v8 = objc_msgSend((id)objc_opt_self(SPHandle), *v6, v5);

    return (uint64_t)v8;
  }
  if (!a1)
  {
    v7._countAndFlagsBits = 0x3A6F746C69616DLL;
    v7._object = (void *)0xE700000000000000;
    object = String.deletingPrefix(_:)(v7)._object;
    v5 = String._bridgeToObjectiveC()();
    v6 = &selRef_handleWithEmailAddress_;
    goto LABEL_5;
  }
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain(a3);
  v12._countAndFlagsBits = a2;
  v12._object = a3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a3);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000013, 0x8000000100EED9B0, "searchpartyd/MessagingDestinationExtensions.swift", 49, 2, 16, 0);
  __break(1u);
  return result;
}

void sub_100ACD914()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  NSString v11;

  v1 = v0;
  v2 = objc_msgSend(v0, "type");
  if (v2 == (id)1)
    goto LABEL_5;
  if (v2)
  {
    v7 = static os_log_type_t.error.getter(v2);
    v8 = sub_100253E58();
    v9 = (void *)static OS_os_log.default.getter(v8);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "Unknown MessagingDestination case!", 34, 2, _swiftEmptyArrayStorage);

    v10 = objc_msgSend(v1, "destination");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v1 = (void *)IDSCopyIDForEmailAddress(v11);

    if (!v1)
      goto LABEL_10;
LABEL_8:
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return;
  }
  v3 = objc_msgSend(v0, "destination");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v1 = (void *)IDSCopyIDForEmailAddress(v4);

  if (v1)
    goto LABEL_8;
  __break(1u);
LABEL_5:
  v5 = objc_msgSend(v1, "destination");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v1 = (void *)IDSCopyIDForPhoneNumber(v6);

  if (v1)
    goto LABEL_8;
  __break(1u);
LABEL_10:
  __break(1u);
}

void sub_100ACDAE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  unsigned int v5;
  NSString v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD v30[3];

  v4 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v5 = objc_msgSend(v4, "isInternalBuild");

  if (v5)
  {
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(a3, "stringForKey:", v6);

    if (v7)
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      v11 = HIBYTE(v10) & 0xF;
      v12 = v8 & 0xFFFFFFFFFFFFLL;
      if ((v10 & 0x2000000000000000) != 0)
        v13 = HIBYTE(v10) & 0xF;
      else
        v13 = v8 & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        if ((v10 & 0x1000000000000000) != 0)
        {
          sub_100C717F4(v8, v10, 10);
LABEL_45:
          swift_bridgeObjectRelease();
          return;
        }
        if ((v10 & 0x2000000000000000) == 0)
        {
          if ((v8 & 0x1000000000000000) != 0)
            v14 = (unsigned __int8 *)((v10 & 0xFFFFFFFFFFFFFFFLL) + 32);
          else
            v14 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v8, v10);
          sub_100C715FC(v14, v12, 10);
          goto LABEL_45;
        }
        v30[0] = v8;
        v30[1] = v10 & 0xFFFFFFFFFFFFFFLL;
        if (v8 == 43)
        {
          if (v11)
          {
            if (v11 != 1
              && (BYTE1(v8) - 48) <= 9u
              && v11 != 2
              && (BYTE2(v8) - 48) <= 9u)
            {
              v15 = 10 * (BYTE1(v8) - 48) + (BYTE2(v8) - 48);
              v16 = v11 - 3;
              if (v16)
              {
                v17 = (unsigned __int8 *)v30 + 3;
                do
                {
                  v18 = *v17 - 48;
                  if (v18 > 9)
                    break;
                  v19 = 10 * v15;
                  if ((unsigned __int128)(v15 * (__int128)10) >> 64 != (10 * v15) >> 63)
                    break;
                  v15 = v19 + v18;
                  if (__OFADD__(v19, v18))
                    break;
                  ++v17;
                  --v16;
                }
                while (v16);
              }
            }
            goto LABEL_45;
          }
        }
        else
        {
          if (v8 != 45)
          {
            if (v11)
            {
              if ((v8 - 48) <= 9u && v11 != 1 && (BYTE1(v8) - 48) <= 9u)
              {
                v20 = 10 * (v8 - 48) + (BYTE1(v8) - 48);
                v21 = v11 - 2;
                if (v21)
                {
                  v22 = (unsigned __int8 *)v30 + 2;
                  do
                  {
                    v23 = *v22 - 48;
                    if (v23 > 9)
                      break;
                    v24 = 10 * v20;
                    if ((unsigned __int128)(v20 * (__int128)10) >> 64 != (10 * v20) >> 63)
                      break;
                    v20 = v24 + v23;
                    if (__OFADD__(v24, v23))
                      break;
                    ++v22;
                    --v21;
                  }
                  while (v21);
                }
              }
            }
            goto LABEL_45;
          }
          if (v11)
          {
            if (v11 != 1
              && (BYTE1(v8) - 48) <= 9u
              && v11 != 2
              && (BYTE2(v8) - 48) <= 9u)
            {
              v25 = -10 * (BYTE1(v8) - 48) - (BYTE2(v8) - 48);
              v26 = v11 - 3;
              if (v26)
              {
                v27 = (unsigned __int8 *)v30 + 3;
                do
                {
                  v28 = *v27 - 48;
                  if (v28 > 9)
                    break;
                  v29 = 10 * v25;
                  if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
                    break;
                  v25 = v29 - v28;
                  if (__OFSUB__(v29, v28))
                    break;
                  ++v27;
                  --v26;
                }
                while (v26);
              }
            }
            goto LABEL_45;
          }
          __break(1u);
        }
        __break(1u);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

id sub_100ACDE4C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  qword_1011B7C08 = (uint64_t)result;
  return result;
}

void sub_100ACDE84(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6;
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSString v14;
  _QWORD v15[3];
  uint64_t v16;

  v6 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v7 = objc_msgSend(v6, "isInternalBuild");

  if (v7)
  {
    sub_100ACDFD4(a1, (uint64_t)v15);
    v8 = v16;
    if (v16)
    {
      v9 = sub_10001AA44(v15, v16);
      v10 = *(_QWORD *)(v8 - 8);
      __chkstk_darwin(v9);
      v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v10 + 16))(v12);
      v13 = _bridgeAnythingToObjectiveC<A>(_:)(v12, v8);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    }
    else
    {
      v13 = 0;
    }
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(a4, "setValue:forKey:", v13, v14);
    swift_unknownObjectRelease(v13);

  }
}

uint64_t sub_100ACDFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F6390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100ACE01C()
{
  return 0x6F666E49766461;
}

uint64_t sub_100ACE034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6F666E49766461 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E49766461, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100ACE0C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACF510();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100ACE0F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100ACF510();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_100ACE118@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_100ACF3E8(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
  }
  return result;
}

uint64_t sub_100ACE148(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;

  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v13, v4, v5);
  if (a2 != 3)
  {
    LOBYTE(v16) = 1;
    v6 = v14;
    v7 = v15;
    sub_10009F5D0((uint64_t)v13, v14);
    v8 = sub_100059570();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v16, &type metadata for UInt8, v8, v6, v7);
    if (!v2)
    {
      v16 = a2;
      v17 = BYTE2(a2) & 1;
      v18 = BYTE3(a2);
      v19 = BYTE4(a2);
      v9 = v14;
      v10 = v15;
      sub_10009F5D0((uint64_t)v13, v14);
      v11 = sub_100ACF28C();
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v16, &type metadata for AdvInfo, v11, v9, v10);
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
}

uint64_t sub_100ACE264@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100ACEE50(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
  }
  return result;
}

uint64_t sub_100ACE294(_QWORD *a1)
{
  unsigned int *v1;

  return sub_100ACE148(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32));
}

void sub_100ACE2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

_QWORD *sub_100ACE330()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_10001A9A8(&qword_1010ED318);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_10001BBBC(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_10001BC14(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x100ACE404);
    }
  }
  return v4;
}

uint64_t sub_100ACE41C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[7];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v11 = type metadata accessor for Data.Iterator(0);
  v10[6] = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v10[5] = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v13 = a1 + 32;
    v10[4] = _swiftEmptyArrayStorage;
    v12 = a1;
    if (*(_QWORD *)(a1 + 16))
    {
      v3 = *(_QWORD *)(v13 + 8);
      v15 = 1;
      __asm { BR              X9 }
    }
    __break(1u);
    JUMPOUT(0x100ACED9CLL);
  }
  swift_bridgeObjectRelease();
  if (_swiftEmptyArrayStorage[2])
  {
    v4 = BYTE2(_swiftEmptyArrayStorage[4]);
    v5 = BYTE3(_swiftEmptyArrayStorage[4]);
    v6 = BYTE4(_swiftEmptyArrayStorage[4]);
    v7 = LOWORD(_swiftEmptyArrayStorage[4]);
    swift_bridgeObjectRelease();
    v8 = 0x10000;
    if (!v4)
      v8 = 0;
    return v7 | v8 | (v5 << 24) | (v6 << 32);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 3;
  }
}

uint64_t sub_100ACEE50(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v2 = a1[3];
  v3 = a1[4];
  sub_10001AA44(a1, v2);
  dispatch thunk of BinaryDecoding.container()(v39, v2, v3);
  v4 = v40;
  v5 = v41;
  sub_10001AA44(v39, v40);
  if ((dispatch thunk of BinaryDecodingContaining.isAtEnd.getter(v4, v5) & 1) != 0)
  {
    v42 = _swiftEmptyArrayStorage;
LABEL_3:
    v6 = sub_100ACE41C((uint64_t)v42);
    if (!v1)
    {
      v7 = v6;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v7 & 0xFFFFFFFFFFLL;
    }
  }
  else
  {
    v42 = _swiftEmptyArrayStorage;
    while (1)
    {
      v9 = v40;
      v10 = v41;
      sub_10009F5D0((uint64_t)v39, v40);
      v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v9, v10);
      if (v1)
        break;
      v13 = v11;
      v14 = v12;
      v15 = v40;
      v16 = v41;
      sub_10009F5D0((uint64_t)v39, v40);
      v17 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v15, v16);
      v19 = v18;
      v20 = sub_100035530();
      v21 = DataProtocol.intValue.getter(&type metadata for Data, v20);
      v22 = v40;
      v23 = v41;
      sub_10009F5D0((uint64_t)v39, v40);
      v24 = dispatch thunk of BinaryDecodingContaining.decode(length:)(v21, v22, v23);
      v26 = v25;
      sub_10001BBBC(v13, v14);
      sub_10001BBBC(v17, v19);
      sub_10078E27C(v17, v19);
      sub_10001BC14(v17, v19);
      sub_10001BBBC(v13, v14);
      sub_10001BBBC(v24, v26);
      sub_10078E27C(v24, v26);
      sub_10001BC14(v24, v26);
      sub_10001BC14(v13, v14);
      sub_100626210(v13, v14);
      v28 = v27;
      v30 = v29;
      sub_10001BBBC(v27, v29);
      v38 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        v42 = sub_1007C77D4(0, v42[2] + 1, 1, v42);
      v32 = v42[2];
      v31 = v42[3];
      if (v32 >= v31 >> 1)
        v42 = sub_1007C77D4((_QWORD *)(v31 > 1), v32 + 1, 1, v42);
      v33 = v42;
      v42[2] = v32 + 1;
      v34 = &v33[2 * v32];
      v34[4] = v28;
      v34[5] = v30;
      sub_10001BC14(v17, v19);
      sub_10001BC14(v28, v30);
      sub_10001BC14(v24, v26);
      sub_10001BC14(v38, v14);
      v35 = v40;
      v36 = v41;
      sub_10001AA44(v39, v40);
      if ((dispatch thunk of BinaryDecodingContaining.isAtEnd.getter(v35, v36) & 1) != 0)
        goto LABEL_3;
    }
    swift_bridgeObjectRelease();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100ACF190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F1AF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100ACF1D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F1B00;
  if (!qword_1010F1B00)
  {
    v1 = sub_10001F784(&qword_1010F1AF8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1010F1B00);
  }
  return result;
}

uint64_t sub_100ACF224()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100ACF248()
{
  unint64_t result;

  result = qword_101112EC8;
  if (!qword_101112EC8)
  {
    result = swift_getWitnessTable(a5_18, &type metadata for TLVPacketsError);
    atomic_store(result, (unint64_t *)&qword_101112EC8);
  }
  return result;
}

unint64_t sub_100ACF28C()
{
  unint64_t result;

  result = qword_101112ED0;
  if (!qword_101112ED0)
  {
    result = swift_getWitnessTable(aU_36, &type metadata for AdvInfo);
    atomic_store(result, (unint64_t *)&qword_101112ED0);
  }
  return result;
}

ValueMetadata *type metadata accessor for TLVPacketsError()
{
  return &type metadata for TLVPacketsError;
}

uint64_t getEnumTagSinglePayload for TLVPackets(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[5])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for TLVPackets(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for TLVPackets()
{
  return &type metadata for TLVPackets;
}

unint64_t sub_100ACF3A4()
{
  unint64_t result;

  result = qword_101112ED8;
  if (!qword_101112ED8)
  {
    result = swift_getWitnessTable(aM_39, &type metadata for TLVPacketsError);
    atomic_store(result, (unint64_t *)&qword_101112ED8);
  }
  return result;
}

unint64_t sub_100ACF3E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _DWORD v14[3];
  unsigned __int8 v15;

  v3 = sub_10001A9A8(&qword_101112EE0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = (unint64_t)sub_10001AA44(a1, v7);
  v10 = sub_100ACF510();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TLVPackets.CodingKeys, &type metadata for TLVPackets.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_1008F2AE4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AdvInfo, v12, v3, &type metadata for AdvInfo, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14[2] | ((unint64_t)v15 << 32);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_100ACF510()
{
  unint64_t result;

  result = qword_101112EE8;
  if (!qword_101112EE8)
  {
    result = swift_getWitnessTable(aY_70, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112EE8);
  }
  return result;
}

uint64_t _s12searchpartyd15TLVPacketsErrorOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100ACF594 + 4 * asc_100E5CD64[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100ACF5B4 + 4 * byte_100E5CD69[v4]))();
}

_BYTE *sub_100ACF594(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100ACF5B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100ACF5BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100ACF5C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100ACF5CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100ACF5D4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TLVPackets.CodingKeys()
{
  return &type metadata for TLVPackets.CodingKeys;
}

unint64_t sub_100ACF5F4()
{
  unint64_t result;

  result = qword_101112EF0;
  if (!qword_101112EF0)
  {
    result = swift_getWitnessTable(aI_45, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112EF0);
  }
  return result;
}

unint64_t sub_100ACF63C()
{
  unint64_t result;

  result = qword_101112EF8;
  if (!qword_101112EF8)
  {
    result = swift_getWitnessTable(byte_100E5CEB8, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112EF8);
  }
  return result;
}

unint64_t sub_100ACF684()
{
  unint64_t result;

  result = qword_101112F00;
  if (!qword_101112F00)
  {
    result = swift_getWitnessTable(byte_100E5CEE0, &type metadata for TLVPackets.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101112F00);
  }
  return result;
}

void sub_100ACF6C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;

  v59 = a2;
  v3 = type metadata accessor for SafeLocation(0);
  v56 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v55 = (uint64_t)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v54 = (uint64_t)&v48 - v6;
  v7 = sub_10001A9A8(&qword_101113040);
  __chkstk_darwin(v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v60 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v51 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v50 = (uint64_t)&v48 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 56);
  v57 = a1 + 56;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v58 = (unint64_t)(v22 + 63) >> 6;
  v61 = a1;
  v25 = swift_bridgeObjectRetain(a1);
  v26 = 0;
  v52 = _swiftEmptyArrayStorage;
  v53 = v17;
  while (1)
  {
    if (v24)
    {
      v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v28 = v27 | (v26 << 6);
      goto LABEL_22;
    }
    v29 = v26 + 1;
    if (__OFADD__(v26, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v29 >= v58)
      goto LABEL_34;
    v30 = *(_QWORD *)(v57 + 8 * v29);
    ++v26;
    if (!v30)
    {
      v26 = v29 + 1;
      if (v29 + 1 >= v58)
        goto LABEL_34;
      v30 = *(_QWORD *)(v57 + 8 * v26);
      if (!v30)
      {
        v26 = v29 + 2;
        if (v29 + 2 >= v58)
          goto LABEL_34;
        v30 = *(_QWORD *)(v57 + 8 * v26);
        if (!v30)
        {
          v26 = v29 + 3;
          if (v29 + 3 >= v58)
            goto LABEL_34;
          v30 = *(_QWORD *)(v57 + 8 * v26);
          if (!v30)
            break;
        }
      }
    }
LABEL_21:
    v24 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))(v20, *(_QWORD *)(v61 + 48) + *(_QWORD *)(v15 + 72) * v28, v14, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
      goto LABEL_35;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    v32 = *v59;
    if (*(_QWORD *)(*v59 + 16) && (v33 = sub_100003FB0((uint64_t)v17), (v34 & 1) != 0))
    {
      v35 = *(_QWORD *)(v32 + 56);
      v36 = v55;
      sub_10005972C(v35 + *(_QWORD *)(v56 + 72) * v33, v55, type metadata accessor for SafeLocation);
      v37 = v36;
      v38 = v54;
      sub_1000126EC(v37, v54, type metadata accessor for SafeLocation);
      v17 = v53;
      sub_1000126EC(v38, (uint64_t)v9, type metadata accessor for SafeLocation);
      swift_storeEnumTagMultiPayload(v9, v10, 2);
      v39 = 0;
    }
    else
    {
      v39 = 1;
    }
    v40 = v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v9, v39, 1, v10);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v9, 1, v10) == 1)
    {
      sub_100004048((uint64_t)v9, &qword_101113040);
    }
    else
    {
      v49 = v26;
      v41 = v50;
      sub_1000126EC((uint64_t)v9, v50, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_1000126EC(v41, v51, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        v52 = (_QWORD *)sub_1007CA96C(0, v52[2] + 1, 1, (unint64_t)v52);
      v43 = v52[2];
      v42 = v52[3];
      v44 = v43 + 1;
      v26 = v49;
      if (v43 >= v42 >> 1)
      {
        v48 = v43 + 1;
        v47 = (_QWORD *)sub_1007CA96C(v42 > 1, v43 + 1, 1, (unint64_t)v52);
        v44 = v48;
        v52 = v47;
      }
      v45 = v51;
      v46 = v52;
      v52[2] = v44;
      sub_1000126EC(v45, (uint64_t)v46+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(_QWORD *)(v60 + 72) * v43, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    }
  }
  v31 = v29 + 4;
  if (v31 >= v58)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v20, 1, 1, v14, v25);
LABEL_35:
    swift_release();
    return;
  }
  v30 = *(_QWORD *)(v57 + 8 * v31);
  if (v30)
  {
    v26 = v31;
    goto LABEL_21;
  }
  while (1)
  {
    v26 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v26 >= v58)
      goto LABEL_34;
    v30 = *(_QWORD *)(v57 + 8 * v26);
    ++v31;
    if (v30)
      goto LABEL_21;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_100ACFC08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, char *, uint64_t);
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD v51[2];
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;

  v61 = sub_10001A9A8(&qword_101113050);
  v3 = __chkstk_darwin(v61);
  v60 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v59 = (char *)v51 - v6;
  v7 = __chkstk_darwin(v5);
  v58 = (uint64_t)v51 - v8;
  v9 = __chkstk_darwin(v7);
  v57 = (char *)v51 - v10;
  __chkstk_darwin(v9);
  v56 = (char *)v51 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  v69 = v13;
  __chkstk_darwin(v12);
  v67 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = _swiftEmptyArrayStorage;
  if (!v15)
    return (uint64_t)v16;
  v51[1] = v1;
  v70 = _swiftEmptyArrayStorage;
  sub_10009A578(0, v15, 0);
  result = sub_10001D6A8(a1);
  v19 = result;
  v20 = 0;
  v21 = a1 + 64;
  v62 = a1 + 80;
  v54 = a1 + 64;
  v55 = a1;
  v52 = v15;
  v53 = v18;
  v22 = v68;
  while ((v19 & 0x8000000000000000) == 0 && (uint64_t)v19 < 1 << *(_BYTE *)(a1 + 32))
  {
    v24 = v19 >> 6;
    if ((*(_QWORD *)(v21 + 8 * (v19 >> 6)) & (1 << v19)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v18)
      goto LABEL_26;
    v63 = v20;
    v64 = 1 << v19;
    v25 = v61;
    v26 = (uint64_t)v56;
    v27 = (uint64_t)&v56[*(int *)(v61 + 48)];
    v28 = *(_QWORD *)(a1 + 48);
    v65 = *(_QWORD *)(v69 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
    v29(v56, v28 + v65 * v19, v22);
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for SafeLocation(0) - 8) + 72);
    v66 = v19;
    sub_10005972C(v30 + v31 * v19, v27, type metadata accessor for SafeLocation);
    v32 = (uint64_t)v57;
    v29(v57, v26, v22);
    sub_10005972C(v27, v32 + *(int *)(v25 + 48), type metadata accessor for SafeLocation);
    v33 = v58;
    sub_100005CF0(v32, v58, &qword_101113050);
    sub_100004048(v26, &qword_101113050);
    v34 = *(int *)(v25 + 48);
    v35 = v59;
    v36 = (uint64_t)&v59[v34];
    v37 = v33 + v34;
    v29(v59, v33, v22);
    sub_10005972C(v37, v36, type metadata accessor for SafeLocation);
    v38 = *(int *)(v25 + 48);
    v39 = (uint64_t)v60;
    v40 = (uint64_t)&v60[v38];
    v41 = v35;
    v42 = *(void (**)(char *, char *, uint64_t))(v69 + 32);
    v42(v60, v41, v22);
    sub_1000126EC(v36, v40, type metadata accessor for SafeLocation);
    v29(v67, v39, v22);
    sub_100004048(v39, &qword_101113050);
    sub_100004048(v33, &qword_101113050);
    v16 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
    {
      sub_10009A578(0, v16[2] + 1, 1);
      v16 = v70;
    }
    v44 = v16[2];
    v43 = v16[3];
    v45 = v66;
    if (v44 >= v43 >> 1)
    {
      sub_10009A578(v43 > 1, v44 + 1, 1);
      v16 = v70;
    }
    v16[2] = v44 + 1;
    result = ((uint64_t (*)(char *, char *, uint64_t))v42)((char *)v16+ ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))+ v44 * v65, v67, v68);
    v70 = v16;
    a1 = v55;
    v19 = 1 << *(_BYTE *)(v55 + 32);
    if (v45 >= (uint64_t)v19)
      goto LABEL_27;
    v21 = v54;
    v46 = *(_QWORD *)(v54 + 8 * v24);
    if ((v46 & v64) == 0)
      goto LABEL_28;
    LODWORD(v18) = v53;
    if (*(_DWORD *)(v55 + 36) != (_DWORD)v53)
      goto LABEL_29;
    v47 = v46 & (-2 << (v45 & 0x3F));
    if (v47)
    {
      v19 = __clz(__rbit64(v47)) | v45 & 0xFFFFFFFFFFFFFFC0;
      v23 = v52;
    }
    else
    {
      v48 = v24 + 1;
      v49 = (v19 + 63) >> 6;
      v23 = v52;
      if (v24 + 1 < v49)
      {
        v50 = *(_QWORD *)(v54 + 8 * v48);
        if (v50)
        {
LABEL_22:
          v19 = __clz(__rbit64(v50)) + (v48 << 6);
        }
        else
        {
          while (v49 - 2 != v24)
          {
            v50 = *(_QWORD *)(v62 + 8 * v24++);
            if (v50)
            {
              v48 = v24 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v20 = v63 + 1;
    if (v63 + 1 == v23)
      return (uint64_t)v16;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_100AD00A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v16[1] = v1;
    v19 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v19;
    v9 = type metadata accessor for SafeLocation(0);
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v17 = *(_QWORD *)(v10 + 72);
    v18 = v9;
    v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v12(v6, v11 + *(int *)(v18 + 20), v3);
      v19 = v8;
      v14 = v8[2];
      v13 = v8[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009A578(v13 > 1, v14 + 1, 1);
        v8 = v19;
      }
      v8[2] = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v14, v6, v3);
      v11 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t sub_100AD0218@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100005CF0((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_1010F6390);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F6390);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_100AD0374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_101113218);
  v36 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101113220);
  v37 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101113228);
  v9 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  v39 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101113230);
  v13 = *(_QWORD *)(v12 - 8);
  v40 = v12;
  v41 = v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[0] = AnyCurrentValuePublisher.publisher.getter(v14);
  v17 = sub_10001A9A8(&qword_1011194D0);
  v18 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_100AD0740, 0, v17, v18);
  swift_release();
  v19 = sub_1000193A4(&qword_101113238, &qword_101113218, (const char *)&protocol conformance descriptor for Publishers.Filter<A>);
  v20 = sub_100AD8FF8();
  Publisher<>.removeDuplicates()(v2, v19, v20);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v2);
  v21 = sub_1000193A4(&qword_101113248, &qword_101113220, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v22 = sub_100AD8398();
  Publisher<>.setFailureType<A>(to:)(&type metadata for LocationOfInterestProvider.Error, v5, &type metadata for LocationOfInterestProvider.Error, v21, v22);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v7, v5);
  v23 = swift_retain();
  v24 = static Subscribers.Demand.unlimited.getter(v23);
  v25 = sub_10001A9A8(&qword_101113088);
  v26 = sub_10001A9A8(&qword_101113020);
  v27 = sub_1000193A4(&qword_101113250, &qword_101113228, (const char *)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
  v28 = sub_1000193A4(&qword_101113028, &qword_101113020, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = v38;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v24, sub_100AD903C, v1, v38, v25, v26, v27, v28);
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v29);
  v30 = sub_1000193A4(&qword_101113258, &qword_101113230, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v31 = v40;
  Publisher.sink(receiveCompletion:receiveValue:)(sub_100AD0924, 0, SharingCircleWildAdvertisementKey.init(key:), 0, v40, v30);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v31);
  v1 += 80;
  swift_beginAccess(v1, v42, 33, 0);
  v32 = sub_10001A9A8(&qword_1010ECF68);
  v33 = sub_1000193A4(&qword_1010ECF70, &qword_1010ECF68, (const char *)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v1, v32, v33);
  swift_endAccess(v42);
  return swift_release();
}

BOOL sub_100AD0740(unsigned __int8 *a1)
{
  return *a1 == 1;
}

uint64_t sub_100AD0750(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  type metadata accessor for Transaction(0);
  v3 = sub_10001A9A8(&qword_101113020);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.LocationOfInterestProvider.meDeviceStatePublisher", 79, 2, sub_100AD9044, a2, v3);
}

uint64_t sub_100AD07C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[2];

  v4 = sub_10001A9A8(&qword_101113260);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[1] = sub_100AD1A80(1);
  swift_retain();
  v8 = sub_10001A9A8(&qword_101113020);
  v9 = sub_1000193A4(&qword_101113028, &qword_101113020, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, 0, 0, j___s10FindMyBase11TransactionC7captureyyF, a1, 0, 0, 0, 0, v8, v9);
  swift_release();
  swift_release();
  v10 = sub_1000193A4(&qword_101113268, &qword_101113260, (const char *)&protocol conformance descriptor for Publishers.HandleEvents<A>);
  v11 = Publisher.eraseToAnyPublisher()(v4, v10);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *a2 = v11;
  return result;
}

void sub_100AD0924()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B75D0);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Updated safe locations due to me device change.", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_100AD09F0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[6];
  _QWORD v15[2];
  uint64_t v16;

  v10 = swift_allocObject(&unk_1010AA3C0, 56, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_BYTE *)(v10 + 24) = a3;
  *(_QWORD *)(v10 + 32) = a4;
  *(_QWORD *)(v10 + 40) = a5;
  *(_QWORD *)(v10 + 48) = a1;
  swift_retain();
  sub_10001D898(a4, a5);
  swift_retain();
  swift_retain();
  sub_10001D898(a4, a5);
  swift_retain();
  v11 = sub_1007FDEC4();
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v15[0] = 0x7365547265646E75;
  v15[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v16, v15, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v16 == 1)
  {
    sub_100AD0C1C(a2, a3 & 1, a4, a5, a1);
    swift_release();
    swift_release();
    swift_release();
    sub_10001D8A8(a4, a5);
    return swift_release();
  }
  else
  {
    v13 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v13);
    v14[2] = v11;
    v14[3] = sub_100AD6B28;
    v14[4] = v10;
    static Transaction.named<A>(_:with:)("CloudKitCoordinator.AfterPendingUpdates", 39, 2, sub_10077CB50, v14, &type metadata for () + 1);
    swift_release();
    swift_release();
    swift_release();
    sub_10001D8A8(a4, a5);
    return swift_release();
  }
}

uint64_t sub_100AD0C1C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  id v29[2];

  v28 = a5;
  v9 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101113018);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void *)sub_100AD1A80(a2);
  v29[0] = *(id *)(a1 + 16);
  v17 = v29[0];
  v29[1] = v16;
  v18 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v11, 1, 1, v18);
  v19 = v17;
  v20 = sub_10001A9A8(&qword_101113020);
  v21 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v22 = sub_1000193A4(&qword_101113028, &qword_101113020, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v23 = sub_1001C7EF4();
  Publisher.subscribe<A>(on:options:)(v29, v11, v20, v21, v22, v23);
  sub_100004048((uint64_t)v11, &qword_1010EECC8);

  swift_release();
  v24 = (_QWORD *)swift_allocObject(&unk_1010AA3E8, 40, 7);
  v24[2] = a3;
  v24[3] = a4;
  v24[4] = v28;
  sub_10001D898(a3, a4);
  v25 = sub_1000193A4(&qword_101113030, &qword_101113018, (const char *)&protocol conformance descriptor for Publishers.SubscribeOn<A, B>);
  swift_retain();
  Publisher.oneshot(_:)(sub_100AD6B70, v24, v12, v25);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

void sub_100AD0E40(uint64_t a1, void (*a2)(unsigned __int8 *, _QWORD))
{
  unsigned __int8 *v3;
  int v4;
  int64_t v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;

  v3 = *(unsigned __int8 **)a1;
  if ((*(_BYTE *)(a1 + 9) & 1) != 0)
  {
    if (a2)
    {
      v4 = *(unsigned __int8 *)(a1 + 8);
      sub_100AD6B7C(*(id *)a1, v4);
      a2(v3, v4 | 0x100u);
      sub_100AD6B98(v3, v4, 1);
    }
    goto LABEL_21;
  }
  v5 = *((_QWORD *)v3 + 2);
  if (v5)
  {
    v39 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v5, 0);
    v6 = _swiftEmptyArrayStorage;
    v7 = v3 + 48;
    do
    {
      v8 = *((_QWORD *)v7 - 2);
      v9 = (void *)*((_QWORD *)v7 - 1);
      v10 = *v7;
      v34 = 0;
      v35 = 0xE000000000000000;
      sub_100AD6BC0(v8, v9, v10);
      _StringGuts.grow(_:)(51);
      v37 = v34;
      v38 = v35;
      v11._countAndFlagsBits = 0xD000000000000031;
      v11._object = (void *)0x8000000100EEDA70;
      String.append(_:)(v11);
      v34 = v8;
      v35 = (unint64_t)v9;
      v36 = v10;
      sub_100AD6BC0(v8, v9, v10);
      v12._countAndFlagsBits = String.init<A>(describing:)(&v34, &type metadata for LocationOfInterestProvider.LOIRequestResponse);
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      sub_100AD6BEC(v8, v9, v10);
      v13 = v37;
      v14 = v38;
      v39 = v6;
      v16 = v6[2];
      v15 = v6[3];
      v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        sub_10009A2F4(v15 > 1, v16 + 1, 1);
        v6 = v39;
      }
      v7 += 24;
      v6[2] = v17;
      v18 = &v6[2 * v16];
      v18[4] = v13;
      v18[5] = v14;
      --v5;
    }
    while (v5);
    goto LABEL_11;
  }
  v6 = _swiftEmptyArrayStorage;
  v17 = _swiftEmptyArrayStorage[2];
  if (v17)
  {
LABEL_11:
    v19 = qword_1010E9F10;
    swift_bridgeObjectRetain(v6);
    if (v19 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v20 = type metadata accessor for Logger(0);
    v21 = v6 + 5;
    v22 = qword_1011B75D0;
    do
    {
      v24 = *(v21 - 1);
      v23 = *v21;
      sub_10001A9E8(v20, (uint64_t)v22);
      swift_bridgeObjectRetain_n(v23, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = swift_slowAlloc(12, -1);
        v29 = v20;
        v30 = v22;
        v31 = swift_slowAlloc(32, -1);
        v34 = v31;
        *(_DWORD *)v28 = 136315138;
        swift_bridgeObjectRetain(v23);
        *(_QWORD *)(v28 + 4) = sub_100016940(v24, v23, &v34);
        swift_bridgeObjectRelease_n(v23, 3);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s", (uint8_t *)v28, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        v32 = v31;
        v22 = v30;
        v20 = v29;
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v23, 2);
      }
      v21 += 2;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a2)
    a2(0, 0);
LABEL_21:
  Transaction.capture()();
}

uint64_t sub_100AD11CC(uint64_t (*a1)(_QWORD **), uint64_t a2, unsigned __int8 a3, _QWORD *a4, uint64_t a5)
{
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD **, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t);
  _QWORD *v19;
  __int16 v20;
  uint64_t v21;
  _UNKNOWN **v22;

  v9 = a3;
  v10 = swift_allocObject(&unk_1010AA5C8, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  if ((v9 - 1) > 1)
  {
    swift_retain();
    swift_release();
    v19 = _swiftEmptyArrayStorage;
    v20 = 0;
    return a1(&v19);
  }
  else
  {
    v11 = a4 + 3;
    v12 = a4[6];
    v13 = a4[7];
    sub_10001AA44(v11, v12);
    if (v9 == 2)
      v14 = 0;
    else
      v14 = -1;
    type metadata accessor for RTLocationOfInterestType(0);
    v21 = v15;
    v22 = &off_1010AA348;
    v19 = (_QWORD *)v14;
    v16 = (_QWORD *)swift_allocObject(&unk_1010AA5F0, 40, 7);
    v16[2] = sub_100AD8F8C;
    v16[3] = v10;
    v16[4] = a5;
    v17 = *(void (**)(_QWORD **, uint64_t (*)(uint64_t, uint64_t), _QWORD *, uint64_t, uint64_t))(v13 + 8);
    swift_retain();
    v17(&v19, sub_100AD8FEC, v16, v12, v13);
    swift_release();
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v19);
  }
}

uint64_t sub_100AD1304(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD);
  _QWORD v44[3];
  _BYTE v45[16];
  uint64_t v46;
  _BYTE v47[32];
  uint64_t v48[5];
  _QWORD *v49;

  v8 = type metadata accessor for SafeLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B75D0);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  v14 = swift_errorRetain(a2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v42 = a4;
    v18 = v17;
    v19 = swift_slowAlloc(64, -1);
    v41 = v13;
    v20 = v19;
    v48[0] = v19;
    *(_DWORD *)v18 = 136315394;
    v43 = a3;
    v46 = a1;
    swift_bridgeObjectRetain(a1);
    v21 = sub_10001A9A8(&qword_101113210);
    v22 = String.init<A>(describing:)(&v46, v21);
    v46 = sub_100016940(v22, v23, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    v46 = a2;
    swift_errorRetain(a2);
    v24 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v25 = String.init<A>(describing:)(&v46, v24);
    v46 = sub_100016940(v25, v26, v48);
    a3 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Received locations of interest: %s error: %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    a4 = v42;
    swift_slowDealloc(v18, -1, -1);

    if (a2)
    {
LABEL_5:
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      v27 = swift_errorRetain(a2);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        v48[0] = v31;
        *(_DWORD *)v30 = 136315138;
        swift_getErrorValue(a2, v45, v44);
        v32 = Error.localizedDescription.getter(v44[1], v44[2]);
        v46 = sub_100016940(v32, v33, v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to fetch locations of interest due to error: %s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {
        swift_errorRelease(a2);
        swift_errorRelease(a2);
      }

      swift_errorRetain(a2);
      a3(a2, 256);
      swift_errorRelease(a2);
      return swift_errorRelease(a2);
    }
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    if (a2)
      goto LABEL_5;
  }
  if (a1 && (v34 = *(_QWORD *)(a1 + 16)) != 0)
  {
    v42 = a4;
    v43 = a3;
    v49 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a1);
    sub_10009AC18(0, v34, 0);
    v41 = a1;
    v35 = a1 + 32;
    v36 = v49;
    do
    {
      sub_100030784(v35, (uint64_t)v48);
      sub_100030784((uint64_t)v48, (uint64_t)&v46);
      sub_100AD186C(&v46, v11, 80.0);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      {
        sub_10009AC18(0, v36[2] + 1, 1);
        v36 = v49;
      }
      v38 = v36[2];
      v37 = v36[3];
      if (v38 >= v37 >> 1)
      {
        sub_10009AC18(v37 > 1, v38 + 1, 1);
        v36 = v49;
      }
      v36[2] = v38 + 1;
      sub_1000126EC((uint64_t)v11, (uint64_t)v36+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v38, type metadata accessor for SafeLocation);
      v35 += 40;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease();
    v43(v36, 0);
  }
  else
  {
    a3(_swiftEmptyArrayStorage, 0);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AD186C@<X0>(_QWORD *a1@<X0>, char *a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD v28[5];
  _QWORD v29[5];

  v6 = type metadata accessor for UUID(0);
  __chkstk_darwin(v6);
  v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F89C0, CLLocation_ptr);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 32))(v29, v11, v12);
  v13 = sub_100AD64D0(v29, a3);
  v14 = a1[3];
  v15 = a1[4];
  sub_10001AA44(a1, v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
  v18 = v17;
  v19 = a1[3];
  v20 = a1[4];
  sub_10001AA44(a1, v19);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v20 + 24))(v29, v19, v20);
  v21 = *sub_10001AA44(v29, v29[3]) + 1;
  if (v21 >= 5)
    v22 = 0;
  else
    v22 = 0x504030200uLL >> (8 * v21);
  if (!v18)
  {
    v18 = 0xE000000000000000;
    v16 = 0;
  }
  v23 = a1[3];
  v24 = a1[4];
  sub_10001AA44(a1, v23);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v24 + 24))(v28, v23, v24);
  v25 = *sub_10001AA44(v28, v28[3]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  if (v25)
    v26 = 2;
  else
    v26 = 1;
  sub_100B000E0((uint64_t)v8, v13, v16, v18, v22, v26, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100AD1A80(int a1)
{
  void **v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t My;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(char *, uint64_t);
  void *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  dispatch_group_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  id v80;
  char *v81;
  uint64_t v82;
  char *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint8_t *v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;

  v2 = v1;
  LODWORD(v123) = a1;
  v124 = *v1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v3);
  v110 = (char *)&v106 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v109 = (char *)&v106 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_10001A9A8(&qword_101113058);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v11 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_10001A9A8(&qword_101113060);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_101113068);
  v115 = *(_QWORD *)(v13 - 8);
  v116 = v13;
  __chkstk_darwin(v13);
  v114 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_101113070);
  v118 = *(_QWORD *)(v15 - 8);
  v119 = v15;
  __chkstk_darwin(v15);
  v117 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_101113078);
  v121 = *(_QWORD *)(v17 - 8);
  v122 = v17;
  __chkstk_darwin(v17);
  v120 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_101113080);
  v125 = *(_QWORD *)(v19 - 8);
  v126 = v19;
  __chkstk_darwin(v19);
  v21 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v22);
  v24 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Date(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v31 = (char *)&v106 - v30;
  My = type metadata accessor for Feature.FindMy(0);
  v130 = My;
  v131 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v33 = sub_100018F08(&v128);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v33, enum case for Feature.FindMy.separationAlerts(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v128);
  v34 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v128);
  if ((My & 1) == 0)
  {
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    v128 = 0x7365547265646E75;
    v129 = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v127, &v128, sub_10001F628, 0, &type metadata for Bool);
    v34 = swift_bridgeObjectRelease();
    if (v127 != 1)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v40 = type metadata accessor for Logger(0);
      v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B75D0);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.default.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Ignoring LOI update as FF is disabled.", v44, 2u);
        swift_slowDealloc(v44, -1, -1);
      }

      type metadata accessor for SPSeparationMonitoringError(0);
      v46 = v45;
      v128 = 1;
      v47 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v48 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
      _BridgedStoredNSError.init(_:userInfo:)(&v127, &v128, v47, v46, v48);
      v128 = v127;
      LOBYTE(v129) = 1;
      goto LABEL_19;
    }
  }
  AnyCurrentValuePublisher.value.getter(&v128, v34);
  if (v128 != 1)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B75D0);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "This is not a me device, Safe Locations can't be refreshed.", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    v128 = 0;
    LOBYTE(v129) = 2;
LABEL_19:
    v49 = sub_10001A9A8(&qword_101113088);
    v50 = sub_100AD8398();
    Fail.init(error:)(&v128, v49, &type metadata for LocationOfInterestProvider.Error, v50);
    v51 = sub_1000193A4(&qword_101113098, &qword_101113080, (const char *)&protocol conformance descriptor for Fail<A, B>);
    v52 = v126;
    v53 = Publisher.eraseToAnyPublisher()(v126, v51);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v21, v52);
    return v53;
  }
  if ((v123 & 1) != 0)
  {
LABEL_26:
    v65 = sub_100B02AFC();
    swift_retain();
    v66 = sub_100AD83DC((uint64_t)v65, v2);
    swift_bridgeObjectRelease();
    swift_release();
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_10001A9E8(v67, (uint64_t)qword_1011B75D0);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Will update all LOI backed safe locations.", v71, 2u);
      swift_slowDealloc(v71, -1, -1);
    }

    v72 = dispatch_group_create();
    v128 = (uint64_t)v66;
    v73 = sub_10001A9A8(&qword_1011130A0);
    v74 = sub_10001A9A8(&qword_1011130A8);
    v75 = sub_1000193A4(&qword_1011130B0, &qword_1011130A0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v76 = sub_1000193A4(&qword_1011130B8, &qword_1011130A8, (const char *)&protocol conformance descriptor for [A]);
    Publishers.MergeMany.init<A>(_:)(&v128, v73, v74, v75, v76);
    v77 = sub_1000193A4(&qword_1011130C0, &qword_101113058, (const char *)&protocol conformance descriptor for Publishers.MergeMany<A>);
    v78 = v111;
    v79 = v108;
    Publisher.collect()(v108, v77);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v11, v79);
    v128 = (uint64_t)v2[2];
    v80 = (id)v128;
    v81 = v109;
    v82 = static DispatchQoS.background.getter(v80);
    v83 = v110;
    static DispatchWorkItemFlags.barrier.getter(v82);
    v84 = v72;
    OS_dispatch_queue.SchedulerOptions.init(qos:flags:group:)(v81, v83, v72);
    v85 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v9, 0, 1, v85);
    v86 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v87 = sub_1000193A4(&qword_1011130C8, &qword_101113060, (const char *)&protocol conformance descriptor for Publishers.Collect<A>);
    v88 = sub_1001C7EF4();
    v89 = v114;
    v90 = v113;
    Publisher.subscribe<A>(on:options:)(&v128, v9, v113, v86, v87, v88);
    sub_100004048((uint64_t)v9, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v112 + 8))(v78, v90);
    v91 = sub_1000193A4(&qword_1011130D0, &qword_101113068, (const char *)&protocol conformance descriptor for Publishers.SubscribeOn<A, B>);
    v92 = sub_100AD8398();
    v93 = v116;
    v94 = v117;
    Publisher<>.setFailureType<A>(to:)(&type metadata for LocationOfInterestProvider.Error, v116, &type metadata for LocationOfInterestProvider.Error, v91, v92);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v89, v93);
    v95 = swift_allocObject(&unk_1010AA410, 24, 7);
    *(_QWORD *)(v95 + 16) = v124;
    v96 = sub_1000193A4(&qword_1011130D8, &qword_101113070, (const char *)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
    v97 = v119;
    v98 = v120;
    Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)(0, 0, sub_100AD8AEC, v95, 0, 0, 0, 0, 0, 0, v119, v96);
    swift_release();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v94, v97);
    v99 = sub_1000193A4(&qword_1011130E0, &qword_101113078, (const char *)&protocol conformance descriptor for Publishers.HandleEvents<A>);
    v100 = v122;
    v53 = Publisher.eraseToAnyPublisher()(v122, v99);

    (*(void (**)(char *, uint64_t))(v121 + 8))(v98, v100);
    return v53;
  }
  sub_100AD0218((uint64_t)v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010EA690);
    goto LABEL_26;
  }
  v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))(v31, v24, v25);
  if (Date.timeIntervalSinceNow.getter(v54) >= 86400.0)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v25);
    goto LABEL_26;
  }
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v55 = type metadata accessor for Logger(0);
  sub_10001A9E8(v55, (uint64_t)qword_1011B75D0);
  v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 16))(v29, v31, v25);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.default.getter(v57);
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(12, -1);
    v124 = (void *)swift_slowAlloc(32, -1);
    v128 = (uint64_t)v124;
    *(_DWORD *)v59 = 136315138;
    v123 = v59 + 4;
    v60 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v25, v60);
    v127 = sub_100016940(v61, v62, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v123, v59 + 12);
    swift_bridgeObjectRelease();
    v63 = *(void (**)(char *, uint64_t))(v26 + 8);
    v63(v29, v25);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Ignoring LOI update as last refresh date is too fresh lastUpdateDate: %s", v59, 0xCu);
    v64 = v124;
    swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v59, -1, -1);
  }
  else
  {
    v63 = *(void (**)(char *, uint64_t))(v26 + 8);
    v63(v29, v25);
  }

  v128 = 1;
  LOBYTE(v129) = 2;
  v102 = sub_10001A9A8(&qword_101113088);
  v103 = sub_100AD8398();
  Fail.init(error:)(&v128, v102, &type metadata for LocationOfInterestProvider.Error, v103);
  v104 = sub_1000193A4(&qword_101113098, &qword_101113080, (const char *)&protocol conformance descriptor for Fail<A, B>);
  v105 = v126;
  v53 = Publisher.eraseToAnyPublisher()(v126, v104);
  (*(void (**)(char *, uint64_t))(v125 + 8))(v21, v105);
  v63(v31, v25);
  return v53;
}

uint64_t sub_100AD27BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v1 = __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v1);
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
  return sub_100AD8AF4((uint64_t)v3);
}

uint64_t sub_100AD2844@<X0>(uint64_t *a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE v101[16];
  uint64_t v102[2];

  v97 = a2;
  v93 = a4;
  v82 = sub_10001A9A8(&qword_101113190);
  v81 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v80 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_101113198);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  __chkstk_darwin(v7);
  v83 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_10001A9A8(&qword_1011131A0);
  v87 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v84 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1011131A8);
  v90 = *(_QWORD *)(v10 - 8);
  v91 = v10;
  __chkstk_darwin(v10);
  v88 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SafeLocation(0);
  v96 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v98 = (uint64_t)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v79 - v16;
  __chkstk_darwin(v15);
  v99 = (uint64_t)&v79 - v18;
  v92 = *a1;
  if (qword_1010E9F10 != -1)
LABEL_29:
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v19 = type metadata accessor for Logger(0);
  v94 = sub_10001A9E8(v19, (uint64_t)qword_1011B75D0);
  v20 = Logger.logObject.getter(v94);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v102[0] = v23;
    *(_DWORD *)v22 = 136315138;
    v95 = v22 + 4;
    LOBYTE(v100) = v97;
    v24 = String.init<A>(describing:)(&v100, &type metadata for SafeLocationType);
    v100 = sub_100016940(v24, v25, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v95, v22 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Updating smart safe locations of type: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

  v26 = sub_10001E350();
  v102[0] = (uint64_t)_swiftEmptyArrayStorage;
  v95 = (uint8_t *)v26[2];
  if (v95)
  {
    v79 = a3;
    a3 = 0;
    v27 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (a3 >= v26[2])
      {
        __break(1u);
        goto LABEL_29;
      }
      v28 = (*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80);
      v29 = *(_QWORD *)(v96 + 72);
      v30 = v99;
      sub_10005972C((uint64_t)v26 + v28 + v29 * a3, v99, type metadata accessor for SafeLocation);
      v31 = *(unsigned __int8 *)(v30 + *(int *)(v12 + 24));
      sub_10005972C(v30, (uint64_t)v17, type metadata accessor for SafeLocation);
      if (v31 == v97)
        break;
      v32 = v17[*(int *)(v12 + 24)];
      sub_1000126B0((uint64_t)v17, type metadata accessor for SafeLocation);
      if (v32 == 1)
        goto LABEL_12;
      sub_1000126B0(v99, type metadata accessor for SafeLocation);
LABEL_7:
      if (v95 == (uint8_t *)++a3)
      {
        v35 = (_QWORD *)v102[0];
        a3 = v79;
        goto LABEL_19;
      }
    }
    sub_1000126B0((uint64_t)v17, type metadata accessor for SafeLocation);
LABEL_12:
    sub_1000126EC(v99, v98, type metadata accessor for SafeLocation);
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      sub_10009AC18(0, v27[2] + 1, 1);
    v27 = (_QWORD *)v102[0];
    v34 = *(_QWORD *)(v102[0] + 16);
    v33 = *(_QWORD *)(v102[0] + 24);
    if (v34 >= v33 >> 1)
    {
      sub_10009AC18(v33 > 1, v34 + 1, 1);
      v27 = (_QWORD *)v102[0];
    }
    v27[2] = v34 + 1;
    sub_1000126EC(v98, (uint64_t)v27 + v28 + v34 * v29, type metadata accessor for SafeLocation);
    goto LABEL_7;
  }
  v35 = _swiftEmptyArrayStorage;
LABEL_19:
  swift_bridgeObjectRelease();
  v36 = swift_retain_n(v35, 2);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v102[0] = v40;
    *(_DWORD *)v39 = 136315138;
    v41 = swift_retain();
    v42 = a3;
    v43 = Array.description.getter(v41, v12);
    v45 = v44;
    swift_release();
    v46 = v43;
    a3 = v42;
    v100 = sub_100016940(v46, v45, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v39 + 4, v39 + 12);
    swift_release_n(v35, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Existing safe locations: %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    swift_release_n(v35, 2);
  }
  v47 = sub_100AD3E38(v97, (uint64_t)v35, v92);
  swift_release();
  swift_bridgeObjectRetain_n(v47, 2);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter(v49);
  if (!os_log_type_enabled(v49, v50))
  {

    swift_bridgeObjectRelease_n(v47, 2);
    if (*(_QWORD *)(v47 + 16))
      goto LABEL_24;
LABEL_26:
    swift_bridgeObjectRelease();
    v102[0] = (uint64_t)_swiftEmptyArrayStorage;
    v75 = sub_10001A9A8(&qword_1011131E8);
    v76 = v80;
    Just.init(_:)(v102, v75);
    v77 = sub_1000193A4(&qword_1011131F0, &qword_101113190, (const char *)&protocol conformance descriptor for Just<A>);
    v78 = v82;
    v73 = Publisher.eraseToAnyPublisher()(v82, v77);
    result = (*(uint64_t (**)(char *, uint64_t))(v81 + 8))(v76, v78);
    goto LABEL_27;
  }
  v51 = (uint8_t *)swift_slowAlloc(12, -1);
  v52 = swift_slowAlloc(32, -1);
  v102[0] = v52;
  *(_DWORD *)v51 = 136315138;
  v53 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  swift_bridgeObjectRetain(v47);
  v55 = Array.description.getter(v54, v53);
  v57 = v56;
  swift_bridgeObjectRelease();
  v100 = sub_100016940(v55, v57, v102);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v51 + 4, v51 + 12);
  swift_bridgeObjectRelease_n(v47, 2);
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v49, v50, "Received mapping response: %s", v51, 0xCu);
  swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v52, -1, -1);
  swift_slowDealloc(v51, -1, -1);

  if (!*(_QWORD *)(v47 + 16))
    goto LABEL_26;
LABEL_24:
  swift_retain();
  v58 = sub_100AD8888(v47, a3);
  swift_bridgeObjectRelease();
  swift_release();
  v102[0] = (uint64_t)v58;
  v59 = sub_10001A9A8(&qword_1011131B0);
  v60 = sub_10001A9A8(&qword_1011131B8);
  v61 = sub_1000193A4(&qword_1011131C0, &qword_1011131B0, byte_100E48F98);
  v62 = sub_1000193A4(&qword_1011131C8, &qword_1011131B8, (const char *)&protocol conformance descriptor for [A]);
  v63 = v83;
  Publishers.MergeMany.init<A>(_:)(v102, v59, v60, v61, v62);
  v64 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v65 = sub_1000193A4(&qword_1011131D0, &qword_101113198, (const char *)&protocol conformance descriptor for Publishers.MergeMany<A>);
  v66 = v84;
  v67 = v86;
  Publisher.compactMap<A>(_:)(sub_100AD3224, 0, v86, v64, v65);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v63, v67);
  v68 = sub_1000193A4(&qword_1011131D8, &qword_1011131A0, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v70 = v88;
  v69 = v89;
  Publisher.collect()(v89, v68);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v66, v69);
  v71 = sub_1000193A4(&qword_1011131E0, &qword_1011131A8, (const char *)&protocol conformance descriptor for Publishers.Collect<A>);
  v72 = v91;
  v73 = Publisher.eraseToAnyPublisher()(v91, v71);
  result = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v70, v72);
LABEL_27:
  *v93 = v73;
  return result;
}

uint64_t sub_100AD3224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = sub_10001A9A8(&qword_1011131F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v6, &qword_1011131F8);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    sub_100004048((uint64_t)v6, &qword_1011131F8);
    v7 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a2, 1, 1, v7);
  }
  else
  {
    sub_1000126EC((uint64_t)v6, a2, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    v9 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 0, 1, v9);
  }
}

uint64_t sub_100AD3324@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  char *v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  _QWORD v88[2];
  char v89;

  v72 = a3;
  v7 = sub_10001A9A8(&qword_101113148);
  v80 = *(_QWORD *)(v7 - 8);
  v81 = v7;
  __chkstk_darwin(v7);
  v79 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101113160);
  v83 = *(_QWORD *)(v9 - 8);
  v84 = v9;
  __chkstk_darwin(v9);
  v82 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101106EF8);
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  __chkstk_darwin(v11);
  v73 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_101113168);
  v77 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v76 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_101113170);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v25 = (char *)&v68 - v24;
  v26 = *a1;
  v78 = a2;
  v85 = a2;
  v86 = v26;
  v27 = *(_QWORD *)(v26 + 16);
  v87 = a4;
  if (!v27)
  {
    swift_bridgeObjectRetain(v26);
    goto LABEL_14;
  }
  v68 = v13;
  v69 = v18;
  v70 = v16;
  v71 = v15;
  v28 = v26 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  v29 = *(_QWORD *)(v23 + 72);
  swift_bridgeObjectRetain(v26);
  while (1)
  {
    sub_10005972C(v28, (uint64_t)v25, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    sub_10005972C((uint64_t)v25, (uint64_t)v22, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    if (!swift_getEnumCaseMultiPayload(v22, v19))
      break;
    sub_1000126B0((uint64_t)v22, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    sub_1000126B0((uint64_t)v25, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
LABEL_4:
    v28 += v29;
    if (!--v27)
      goto LABEL_14;
  }
  v30 = v22[*(int *)(sub_10001A9A8(&qword_101113048) + 48)];
  sub_1000126B0((uint64_t)v22, type metadata accessor for SafeLocation);
  sub_1000126B0((uint64_t)v25, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
  if ((v30 & 1) != 0)
    goto LABEL_4;
  if (v78 != 2)
  {
LABEL_14:
    v88[0] = v85;
    v88[1] = v86;
    v89 = 0;
    swift_bridgeObjectRetain(v86);
    v62 = v79;
    Just.init(_:)(v88, &type metadata for LocationOfInterestProvider.LOIRequestResponse);
    v63 = sub_100AD8398();
    v64 = v81;
    v65 = v82;
    Just.setFailureType<A>(to:)(&type metadata for LocationOfInterestProvider.Error, v81, &type metadata for LocationOfInterestProvider.Error, v63);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v62, v64);
    v66 = sub_1000193A4(&qword_101113178, &qword_101113160, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v67 = v84;
    v60 = Publisher.eraseToAnyPublisher()(v84, v66);
    swift_bridgeObjectRelease();
    result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v65, v67);
    goto LABEL_15;
  }
  v31 = *(_QWORD *)(v72 + 64);
  v32 = sub_1000188D0();
  swift_retain();
  v33 = sub_100AD6D18((uint64_t)v32, v31);
  swift_bridgeObjectRelease();
  swift_release();
  v34 = sub_1000178D0((uint64_t)v33);
  swift_bridgeObjectRelease();
  v35 = sub_100307DCC((uint64_t)v34);
  swift_bridgeObjectRelease();
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10001A9E8(v36, (uint64_t)qword_1011B75D0);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = v69;
  v42 = v68;
  if (v40)
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "New Safe Location triggered auto-enrollment.", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

  v44 = swift_allocObject(&unk_1010AA4D8, 32, 7);
  *(_QWORD *)(v44 + 16) = v31;
  *(_QWORD *)(v44 + 24) = v35;
  swift_retain();
  swift_bridgeObjectRetain(v35);
  v45 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
  v46 = sub_1000193A4(&qword_101106F00, (uint64_t *)&unk_101106EA8, (const char *)&protocol conformance descriptor for Future<A, B>);
  v47 = v73;
  Deferred.init(createPublisher:)(sub_1009AAFA8, v44, v45, v46);
  v48 = sub_1000193A4((unint64_t *)&unk_101106F08, &qword_101106EF8, (const char *)&protocol conformance descriptor for Deferred<A>);
  v49 = v75;
  v50 = Publisher.eraseToAnyPublisher()(v75, v48);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v47, v49);
  swift_bridgeObjectRelease();
  v88[0] = v50;
  v51 = swift_allocObject(&unk_1010AA500, 33, 7);
  v52 = v86;
  *(_QWORD *)(v51 + 16) = v85;
  *(_QWORD *)(v51 + 24) = v52;
  *(_BYTE *)(v51 + 32) = 0;
  swift_bridgeObjectRetain(v52);
  v53 = sub_10001A9A8(&qword_101106EC8);
  v54 = sub_1000193A4(&qword_101106ED8, &qword_101106EC8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v55 = v76;
  Publisher.map<A>(_:)(sub_100AD8CF0, v51, v53, &type metadata for LocationOfInterestProvider.LOIRequestResponse, v54);
  swift_release();
  swift_release();
  v56 = sub_1000193A4(&qword_101113180, &qword_101113168, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v57 = sub_100AD8398();
  Publisher.mapError<A>(_:)(sub_100AD3A0C, 0, v42, &type metadata for LocationOfInterestProvider.Error, v56, v57);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v42);
  v58 = sub_1000193A4(&qword_101113188, &qword_101113170, (const char *)&protocol conformance descriptor for Publishers.MapError<A, B>);
  v59 = v71;
  v60 = Publisher.eraseToAnyPublisher()(v71, v58);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v41, v59);
LABEL_15:
  *v87 = v60;
  return result;
}

id sub_100AD3A0C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;

  v2 = *a1;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = 1;
  return v2;
}

uint64_t sub_100AD3A20@<X0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v20[2];
  char v21;

  v6 = sub_10001A9A8(&qword_101113148);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101113150);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void **)a1;
  v15 = *(_BYTE *)(a1 + 8);
  v20[0] = a2;
  v20[1] = v14;
  v21 = v15 | 0x40;
  sub_100AD6B7C(v14, v15);
  Just.init(_:)(v20, &type metadata for LocationOfInterestProvider.LOIRequestResponse);
  Just.setFailureType<A>(to:)(&type metadata for Never, v6, &type metadata for Never, &protocol witness table for Never);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v16 = sub_1000193A4(&qword_101113158, &qword_101113150, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
  v17 = Publisher.eraseToAnyPublisher()(v10, v16);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *a3 = v17;
  return result;
}

uint64_t sub_100AD3B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v27;
  unint64_t v28;

  v1 = v0;
  v2 = type metadata accessor for SafeLocation(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v1, (uint64_t)v10, v11);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v8);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000126EC((uint64_t)v10, (uint64_t)v5, type metadata accessor for SafeLocation);
      v13 = 0x65766F6D6572;
    }
    else
    {
      sub_1000126EC((uint64_t)v10, (uint64_t)v5, type metadata accessor for SafeLocation);
      v13 = 0x657461647075;
    }
    v27 = v13 & 0xFFFFFFFFFFFFLL | 0x20000000000000;
    v28 = 0xE700000000000000;
    v23 = type metadata accessor for UUID(0);
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v22 = v27;
  }
  else
  {
    v14 = v10[*(int *)(sub_10001A9A8(&qword_101113048) + 48)];
    sub_1000126EC((uint64_t)v10, (uint64_t)v7, type metadata accessor for SafeLocation);
    v27 = 0;
    v28 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v27 = 0x20657461657263;
    v28 = 0xE700000000000000;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x206465766F6D202CLL;
    v18._object = (void *)0xE800000000000000;
    String.append(_:)(v18);
    if (v14)
      v19 = 1702195828;
    else
      v19 = 0x65736C6166;
    if (v14)
      v20 = 0xE400000000000000;
    else
      v20 = 0xE500000000000000;
    v21 = v20;
    String.append(_:)(*(Swift::String *)&v19);
    swift_bridgeObjectRelease();
    v22 = v27;
    v5 = v7;
  }
  sub_1000126B0((uint64_t)v5, type metadata accessor for SafeLocation);
  return v22;
}

uint64_t sub_100AD3E38(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  char v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  _BOOL4 v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  os_log_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  double v100;
  uint64_t v101;
  double v102;
  char *v103;
  id v104;
  Class isa;
  id v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  id v115;
  NSString v116;
  id v117;
  double v118;
  double v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  id v123;
  Class v124;
  id v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  uint64_t v131;
  id v132;
  NSString v133;
  void *v134;
  id v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t, uint64_t, int *);
  int v163;
  __n128 v164;
  char *v165;
  void (*v166)(uint64_t, char *, uint64_t, __n128);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  _BOOL8 v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  _QWORD *v177;
  uint64_t v178;
  uint64_t v179;
  void (*v180)(uint64_t, uint64_t, uint64_t);
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  unint64_t v185;
  uint64_t v186;
  _BOOL8 v187;
  uint64_t v188;
  char v189;
  unint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  void (*v207)(char *, unint64_t, uint64_t);
  char *v208;
  char *v209;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(char *, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  uint64_t v223;
  uint64_t v224;
  BOOL v225;
  uint64_t v226;
  void (*v227)(uint64_t, uint64_t);
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  unint64_t v233;
  uint64_t v234;
  _BOOL8 v235;
  uint64_t v236;
  char v237;
  unint64_t v238;
  char v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(char *, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  uint64_t v250;
  uint64_t v251;
  void (*v252)(uint64_t, uint64_t);
  uint64_t v253;
  char v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  _QWORD *v272;
  _QWORD *v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t result;
  _QWORD v286[2];
  int v287;
  char *v288;
  __n128 v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  void (*v313)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v314;
  uint8_t *v315;
  os_log_t v316;
  uint8_t *v317;
  char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  char *v327;
  char *v328;
  char *v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  int *v333;
  uint64_t v334;
  char v335[8];
  char v336[8];
  char v337[8];
  _QWORD *v338;
  char v339[8];
  char v340[8];
  char v341[8];
  unint64_t v342;
  _QWORD *v343;

  v287 = a1;
  v332 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v332 - 8);
  v6 = __chkstk_darwin(v332);
  v302 = (uint64_t)v286 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v300 = (uint64_t)v286 - v9;
  v10 = __chkstk_darwin(v8);
  v301 = (uint64_t)v286 - v11;
  v12 = __chkstk_darwin(v10);
  v330 = (char *)v286 - v13;
  __chkstk_darwin(v12);
  v329 = (char *)v286 - v14;
  v15 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v15);
  v318 = (char *)v286 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v324 = type metadata accessor for Date(0);
  v323 = *(_QWORD *)(v324 - 8);
  __chkstk_darwin(v324);
  v322 = (char *)v286 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v305 = sub_10001A9A8(&qword_101113038);
  __chkstk_darwin(v305);
  v307 = (uint64_t)v286 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_101106E40);
  v20 = __chkstk_darwin(v19);
  v312 = (uint64_t)v286 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v319 = (uint64_t)v286 - v22;
  v23 = (int *)type metadata accessor for SafeLocation(0);
  v24 = *((_QWORD *)v23 - 1);
  v25 = __chkstk_darwin(v23);
  v296 = (uint64_t)v286 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v292 = (uint64_t)v286 - v28;
  v29 = __chkstk_darwin(v27);
  v294 = (uint64_t)v286 - v30;
  v31 = __chkstk_darwin(v29);
  v291 = (uint64_t)v286 - v32;
  v33 = __chkstk_darwin(v31);
  v295 = (uint64_t)v286 - v34;
  v35 = __chkstk_darwin(v33);
  v299 = (uint64_t)v286 - v36;
  v37 = __chkstk_darwin(v35);
  v298 = (uint64_t)v286 - v38;
  v39 = __chkstk_darwin(v37);
  v297 = (uint64_t)v286 - v40;
  v41 = __chkstk_darwin(v39);
  v321 = (uint64_t)v286 - v42;
  v43 = __chkstk_darwin(v41);
  v45 = (char *)v286 - v44;
  v46 = __chkstk_darwin(v43);
  v48 = (char *)v286 - v47;
  __chkstk_darwin(v46);
  v50 = (char *)v286 - v49;
  v308 = sub_1006BBB2C((uint64_t)_swiftEmptyArrayStorage);
  v51 = sub_1006BBB2C((uint64_t)_swiftEmptyArrayStorage);
  v343 = (_QWORD *)v51;
  v342 = sub_1006BBB2C((uint64_t)_swiftEmptyArrayStorage);
  v304 = *(_QWORD *)(a3 + 16);
  if (!v304)
  {
LABEL_89:
    swift_bridgeObjectRetain(v51);
    v263 = sub_100ACFC08(v262);
    swift_bridgeObjectRelease();
    v264 = sub_10001B664(v263);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v308);
    v266 = sub_100ACFC08(v265);
    swift_bridgeObjectRelease();
    v267 = sub_10001B664(v266);
    swift_bridgeObjectRelease();
    v268 = sub_100AD00A8(a2);
    v269 = sub_10001B664((uint64_t)v268);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v269 + 16) <= *(_QWORD *)(v264 + 16) >> 3)
    {
      v338 = (_QWORD *)v264;
      swift_bridgeObjectRetain(v264);
      sub_10063AFB0(v269);
      v270 = v338;
    }
    else
    {
      swift_bridgeObjectRetain(v264);
      v270 = sub_10063D7D8(v269, v264);
    }
    if (v270[2] <= *(_QWORD *)(v264 + 16) >> 3)
    {
      v338 = (_QWORD *)v264;
      sub_10063AFB0((uint64_t)v270);
      v271 = v338;
    }
    else
    {
      v271 = sub_10063D7D8((uint64_t)v270, v264);
    }
    if (*(_QWORD *)(v267 + 16) <= *(_QWORD *)(v269 + 16) >> 3)
    {
      v338 = (_QWORD *)v269;
      swift_bridgeObjectRetain(v269);
      sub_10063AFB0(v267);
      swift_bridgeObjectRelease();
      v272 = v338;
    }
    else
    {
      swift_bridgeObjectRetain(v269);
      v272 = sub_10063D7D8(v267, v269);
      swift_bridgeObjectRelease();
    }
    if (v271[2] <= *(_QWORD *)(v269 + 16) >> 3)
    {
      v338 = (_QWORD *)v269;
      sub_10063AFB0((uint64_t)v271);
      v273 = v338;
    }
    else
    {
      v273 = sub_10063D7D8((uint64_t)v271, v269);
    }
    if (v272[2] <= v273[2] >> 3)
    {
      v338 = v273;
      sub_10063AFB0((uint64_t)v272);
      v274 = v338;
    }
    else
    {
      v274 = sub_10063D7D8((uint64_t)v272, (uint64_t)v273);
    }
    v275 = v286[1];
    swift_retain();
    sub_100AD7248((uint64_t)v270, (uint64_t *)&v343, (uint64_t *)&v342, v275);
    v277 = v276;
    swift_bridgeObjectRelease();
    swift_release();
    sub_100ACF6C8((uint64_t)v271, (uint64_t *)&v343);
    v279 = v278;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a2);
    sub_100AD76D0((uint64_t)v274, a2);
    v281 = v280;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a2);
    sub_100AD7C88((uint64_t)v272, a2, v287);
    v283 = v282;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v338 = (_QWORD *)v277;
    sub_1003058F8(v279);
    sub_1003058F8(v281);
    sub_1003058F8(v283);
    v284 = (uint64_t)v338;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v284;
  }
  v52 = *(_QWORD *)(a2 + 16);
  v53 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v303 = a3 + v53;
  v326 = *(_QWORD *)(v24 + 72);
  v306 = a2 + v53;
  v290 = v335;
  v286[0] = a3;
  v54 = swift_bridgeObjectRetain(a3);
  v55 = 0;
  v54.n128_u64[0] = 136315138;
  v289 = v54;
  v288 = (char *)&type metadata for Any + 8;
  v309 = a2;
  v331 = v5;
  v56 = v312;
  v333 = v23;
  v314 = v24;
  v328 = v45;
  v325 = v48;
  v327 = v50;
  v311 = v52;
  while (1)
  {
    v310 = v55;
    sub_10005972C(v303 + v326 * v55, (uint64_t)v50, type metadata accessor for SafeLocation);
    if (v52)
    {
      swift_bridgeObjectRetain(a2);
      swift_beginAccess(v50, v341, 0, 0);
      v76 = &v50[v23[5]];
      v77 = v52;
      v78 = v306;
      v79 = v326;
      while (1)
      {
        sub_10005972C(v78, (uint64_t)v48, type metadata accessor for SafeLocation);
        if ((static UUID.== infix(_:_:)(&v48[v23[5]], v76) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v48, type metadata accessor for SafeLocation);
        v78 += v79;
        if (!--v77)
        {
          swift_bridgeObjectRelease();
          v56 = v312;
          v24 = v314;
          v52 = v311;
          goto LABEL_11;
        }
      }
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v81 = type metadata accessor for Logger(0);
      v82 = sub_10001A9E8(v81, (uint64_t)qword_1011B75D0);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.default.getter(v83);
      v85 = os_log_type_enabled(v83, v84);
      v86 = v332;
      if (v85)
      {
        v87 = (uint8_t *)swift_slowAlloc(12, -1);
        v320 = swift_slowAlloc(32, -1);
        v338 = (_QWORD *)v320;
        v317 = v87;
        *(_DWORD *)v87 = v289.n128_u32[0];
        v315 = v87 + 4;
        v316 = v83;
        v88 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v89 = dispatch thunk of CustomStringConvertible.description.getter(v86, v88);
        v334 = sub_100016940(v89, v90, (uint64_t *)&v338);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v290, v315, v87 + 12);
        swift_bridgeObjectRelease();
        v91 = v316;
        v92 = v317;
        _os_log_impl((void *)&_mh_execute_header, v316, v84, "Inferred safe location identifier %s matches existing safe location.", v317, 0xCu);
        v93 = v320;
        swift_arrayDestroy(v320, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v92, -1, -1);
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();

      }
      v56 = v312;
      v94 = v319;
      sub_1000126EC((uint64_t)v48, v319, type metadata accessor for SafeLocation);
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v314 + 56);
      v80(v94, 0, 1, v23);
      if (!v311)
      {
LABEL_34:
        v80(v56, 1, 1, v23);
        goto LABEL_35;
      }
    }
    else
    {
LABEL_11:
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v24 + 56);
      v80(v319, 1, 1, v23);
      v79 = v326;
      if (!v52)
        goto LABEL_34;
    }
    v320 = (uint64_t)v80;
    swift_bridgeObjectRetain(a2);
    swift_beginAccess(v50, v340, 0, 0);
    v95 = v306;
    v96 = v311;
    while (1)
    {
      sub_10005972C(v95, (uint64_t)v45, type metadata accessor for SafeLocation);
      if ((static UUID.== infix(_:_:)(&v45[v23[5]], &v50[v23[5]]) & 1) == 0)
      {
        v97 = v321;
        v98 = sub_10005972C((uint64_t)v50, v321, type metadata accessor for SafeLocation);
        v99 = *(double *)&v45[v23[8]];
        v100 = *(double *)&v45[v23[9]];
        v101 = v23[10];
        v102 = *(double *)&v45[v101];
        v103 = v322;
        Date.init()(v98);
        v104 = objc_allocWithZone((Class)CLLocation);
        isa = Date._bridgeToObjectiveC()().super.isa;
        v106 = objc_msgSend(v104, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", isa, v99, v100, 0.0, v102, v102, -1.0, -1.0, -1.0, 0xBFF0000000000000);

        v107 = *(void (**)(char *, uint64_t))(v323 + 8);
        v108 = v324;
        v107(v103, v324);
        objc_msgSend(v106, "setReferenceFrame:", v328[v333[11]]);
        objc_msgSend(v106, "coordinate");
        v110 = v109;
        v112 = v111;

        v113 = *(double *)&v328[v101];
        UUID.uuidString.getter(v114);
        v115 = objc_allocWithZone((Class)CLCircularRegion);
        v116 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v117 = objc_msgSend(v115, "initWithCenter:radius:identifier:", v116, v110, v112, v113);

        v118 = *(double *)(v97 + v333[8]);
        v119 = *(double *)(v97 + v333[9]);
        v120 = v333[10];
        v121 = *(double *)(v97 + v120);
        Date.init()(v122);
        v123 = objc_allocWithZone((Class)CLLocation);
        v124 = Date._bridgeToObjectiveC()().super.isa;
        v125 = objc_msgSend(v123, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", v124, v118, v119, 0.0, v121, v121, -1.0, -1.0, -1.0, 0xBFF0000000000000);

        v107(v103, v108);
        v23 = v333;
        objc_msgSend(v125, "setReferenceFrame:", *(unsigned __int8 *)(v97 + v333[11]));
        objc_msgSend(v125, "coordinate");
        v127 = v126;
        v129 = v128;

        v130 = *(double *)(v97 + v120);
        v79 = v326;
        UUID.uuidString.getter(v131);
        v132 = objc_allocWithZone((Class)CLCircularRegion);
        v133 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v134 = v132;
        v45 = v328;
        v135 = objc_msgSend(v134, "initWithCenter:radius:identifier:", v133, v127, v129, v130);

        sub_100B02664(v135);
        v137 = v136;
        objc_msgSend(v117, "radius");
        v139 = v138;
        objc_msgSend(v117, "radius");
        v141 = v139 * v140 * 3.14159265;
        objc_msgSend(v135, "radius");
        v143 = v142;
        objc_msgSend(v135, "radius");
        v145 = v144;

        v50 = v327;
        v146 = v143 * v145 * 3.14159265;
        if (v146 >= v141)
          v146 = v141;
        v147 = v146 <= 0.0 ? 0.0 : v137 / v146;
        v148 = v97;
        v48 = v325;
        sub_1000126B0(v148, type metadata accessor for SafeLocation);
        if (v147 > 0.5)
          break;
      }
      sub_1000126B0((uint64_t)v45, type metadata accessor for SafeLocation);
      v95 += v79;
      if (!--v96)
      {
        swift_bridgeObjectRelease();
        v56 = v312;
        v80 = (void (*)(uint64_t, uint64_t, uint64_t, int *))v320;
        goto LABEL_34;
      }
    }
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v149 = type metadata accessor for Logger(0);
    v150 = sub_10001A9E8(v149, (uint64_t)qword_1011B75D0);
    v151 = Logger.logObject.getter(v150);
    v152 = static os_log_type_t.default.getter(v151);
    if (os_log_type_enabled(v151, v152))
    {
      v153 = (uint8_t *)swift_slowAlloc(12, -1);
      v154 = swift_slowAlloc(32, -1);
      v338 = (_QWORD *)v154;
      *(_DWORD *)v153 = v289.n128_u32[0];
      v317 = v153 + 4;
      v155 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v156 = dispatch thunk of CustomStringConvertible.description.getter(v332, v155);
      v334 = sub_100016940(v156, v157, (uint64_t *)&v338);
      v45 = v328;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v334, v290, v317, v153 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v151, v152, "Inferred safe location identifier %s is within the region of existing safe location.", v153, 0xCu);
      swift_arrayDestroy(v154, 1, v288);
      v158 = v154;
      v50 = v327;
      swift_slowDealloc(v158, -1, -1);
      swift_slowDealloc(v153, -1, -1);
    }
    swift_bridgeObjectRelease();

    v159 = (void (*)(uint64_t, _QWORD, uint64_t, int *))v320;
    v56 = v312;
    sub_1000126EC((uint64_t)v45, v312, type metadata accessor for SafeLocation);
    v159(v56, 0, 1, v23);
LABEL_35:
    v160 = v307;
    v161 = v307 + *(int *)(v305 + 48);
    sub_10000F9B8(v319, v307, &qword_101106E40);
    sub_10000F9B8(v56, v161, &qword_101106E40);
    v162 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v314 + 48);
    LODWORD(v160) = v162(v160, 1, v23);
    v163 = v162(v161, 1, v23);
    if ((_DWORD)v160 != 1)
    {
      if (v163 != 1)
      {
        v193 = v297;
        sub_1000126EC(v307, v297, type metadata accessor for SafeLocation);
        v194 = v298;
        sub_1000126EC(v161, v298, type metadata accessor for SafeLocation);
        v195 = v23[13];
        v196 = *(_QWORD *)(v193 + v195);
        v197 = *(_QWORD *)(v194 + v195);
        v338 = (_QWORD *)v196;
        swift_bridgeObjectRetain(v196);
        swift_bridgeObjectRetain(v197);
        sub_1003028FC(v197);
        v198 = (uint64_t)v338;
        v199 = v338[2];
        v200 = (uint8_t *)sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v201 = v332;
        v317 = v200;
        v202 = Set.init(minimumCapacity:)(v199);
        v316 = *(os_log_t *)(v198 + 16);
        if (v316)
        {
          v203 = 0;
          v204 = v331;
          v205 = (*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80);
          v293 = v198;
          v315 = (uint8_t *)(v198 + v205);
          v206 = *(_QWORD *)(v331 + 72);
          v207 = *(void (**)(char *, unint64_t, uint64_t))(v331 + 16);
          v208 = v329;
          v209 = v318;
          v207(v318, v198 + v205, v201);
          while (1)
          {
            v313 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v204 + 56);
            v313(v209, 0, 1, v201);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48))(v209, 1, v201) == 1)
            {
              v23 = v333;
              v50 = v327;
              goto LABEL_79;
            }
            v320 = v203;
            (*(void (**)(char *, char *, uint64_t))(v204 + 32))(v208, v209, v201);
            v214 = *(_QWORD *)(v202 + 40);
            swift_bridgeObjectRetain(v202);
            v215 = dispatch thunk of Hashable._rawHashValue(seed:)(v214, v201, v317);
            v216 = -1 << *(_BYTE *)(v202 + 32);
            v217 = v215 & ~v216;
            if (((*(_QWORD *)(v202 + 56 + ((v217 >> 3) & 0xFFFFFFFFFFFFF8)) >> v217) & 1) != 0)
            {
              v218 = ~v216;
              while (1)
              {
                v219 = v330;
                v220 = v332;
                v207(v330, *(_QWORD *)(v202 + 48) + v217 * v206, v332);
                v221 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                v222 = dispatch thunk of static Equatable.== infix(_:_:)(v219, v208, v220, v221);
                v213 = *(void (**)(char *, uint64_t))(v331 + 8);
                v213(v219, v220);
                if ((v222 & 1) != 0)
                  break;
                v217 = (v217 + 1) & v218;
                v208 = v329;
                if (((*(_QWORD *)(v202 + 56 + ((v217 >> 3) & 0xFFFFFFFFFFFFF8)) >> v217) & 1) == 0)
                  goto LABEL_49;
              }
              swift_bridgeObjectRelease();
              v204 = v331;
              v212 = v332;
              v208 = v329;
            }
            else
            {
LABEL_49:
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v202);
              v211 = (uint64_t)v330;
              v212 = v332;
              v207(v330, (unint64_t)v208, v332);
              v338 = (_QWORD *)v202;
              sub_100A1CCB8(v211, v217, isUniquelyReferenced_nonNull_native);
              v202 = (uint64_t)v338;
              swift_bridgeObjectRelease();
              v204 = v331;
              v213 = *(void (**)(char *, uint64_t))(v331 + 8);
            }
            v203 = v320 + 1;
            v213(v208, v212);
            v201 = v212;
            v209 = v318;
            v48 = v325;
            if ((os_log_t)v203 == v316)
              break;
            v207(v318, (unint64_t)&v315[v206 * v203], v201);
          }
          v23 = v333;
          v50 = v327;
          v313(v318, 1, 1, v201);
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v331 + 56))(v318, 1, 1, v201);
        }
LABEL_79:
        swift_bridgeObjectRelease();
        v241 = sub_100508DAC(v202);
        swift_bridgeObjectRelease();
        swift_beginAccess(v50, v335, 1, 0);
        *(_QWORD *)&v50[v23[13]] = v241;
        swift_bridgeObjectRelease();
        v242 = v297;
        v243 = v297 + v23[5];
        v244 = v331;
        v245 = *(void (**)(char *, uint64_t, uint64_t))(v331 + 16);
        v246 = (uint64_t)v330;
        v245(v330, v243, v201);
        v247 = v299;
        sub_10005972C(v242, v299, type metadata accessor for SafeLocation);
        v248 = v308;
        v249 = swift_isUniquelyReferenced_nonNull_native(v308);
        v338 = (_QWORD *)v248;
        v250 = v332;
        sub_10010E594(v247, v246, v249);
        v251 = (uint64_t)v338;
        swift_bridgeObjectRelease();
        v252 = *(void (**)(uint64_t, uint64_t))(v244 + 8);
        v252(v246, v250);
        v253 = v298;
        v245((char *)v246, v298 + v333[5], v250);
        sub_10005972C(v253, v247, type metadata accessor for SafeLocation);
        v254 = swift_isUniquelyReferenced_nonNull_native(v251);
        v338 = (_QWORD *)v251;
        sub_10010E594(v247, v246, v254);
        v308 = (unint64_t)v338;
        swift_bridgeObjectRelease();
        v252(v246, v250);
        v245((char *)v246, (uint64_t)&v327[v333[5]], v250);
        sub_10005972C((uint64_t)v327, v247, type metadata accessor for SafeLocation);
        v255 = (uint64_t)v343;
        v256 = swift_isUniquelyReferenced_nonNull_native(v343);
        v338 = (_QWORD *)v255;
        v257 = v247;
        v50 = v327;
        sub_10010E594(v257, v246, v256);
        v343 = v338;
        swift_bridgeObjectRelease();
        v252(v246, v250);
        v23 = v333;
        sub_1000126B0(v253, type metadata accessor for SafeLocation);
        sub_1000126B0(v242, type metadata accessor for SafeLocation);
        v56 = v312;
        v24 = v314;
        v45 = v328;
        goto LABEL_4;
      }
      v178 = v295;
      sub_1000126EC(v307, v295, type metadata accessor for SafeLocation);
      v179 = *(_QWORD *)(v178 + v23[13]);
      swift_beginAccess(v50, v336, 1, 0);
      *(_QWORD *)&v50[v23[13]] = v179;
      swift_bridgeObjectRetain(v179);
      swift_bridgeObjectRelease();
      v180 = *(void (**)(uint64_t, uint64_t, uint64_t))(v331 + 16);
      v167 = v301;
      v180(v301, v178 + v23[5], v332);
      v181 = v291;
      sub_10005972C(v178, v291, type metadata accessor for SafeLocation);
      v182 = v308;
      v183 = swift_isUniquelyReferenced_nonNull_native(v308);
      v338 = (_QWORD *)v182;
      v185 = sub_100003FB0(v167);
      v186 = *(_QWORD *)(v182 + 16);
      v187 = (v184 & 1) == 0;
      v188 = v186 + v187;
      if (__OFADD__(v186, v187))
        goto LABEL_106;
      v189 = v184;
      if (*(_QWORD *)(v182 + 24) >= v188)
      {
        v192 = v326;
        if ((v183 & 1) == 0)
          sub_100AA1C80();
      }
      else
      {
        sub_100A94D5C(v188, v183);
        v190 = sub_100003FB0(v301);
        v192 = v326;
        if ((v189 & 1) != (v191 & 1))
          goto LABEL_111;
        v185 = v190;
      }
      v223 = v331;
      v167 = (uint64_t)v338;
      if ((v189 & 1) != 0)
      {
        v308 = (unint64_t)v338;
        sub_100AD8318(v181, v338[7] + v185 * v192);
      }
      else
      {
        v338[(v185 >> 6) + 8] |= 1 << v185;
        v180(*(_QWORD *)(v167 + 48) + *(_QWORD *)(v223 + 72) * v185, v301, v332);
        sub_1000126EC(v181, *(_QWORD *)(v167 + 56) + v185 * v192, type metadata accessor for SafeLocation);
        v224 = *(_QWORD *)(v167 + 16);
        v225 = __OFADD__(v224, 1);
        v226 = v224 + 1;
        if (v225)
          goto LABEL_108;
        *(_QWORD *)(v167 + 16) = v226;
        v308 = (unint64_t)v338;
      }
      swift_bridgeObjectRelease();
      v227 = *(void (**)(uint64_t, uint64_t))(v223 + 8);
      v228 = v332;
      v227(v301, v332);
      v229 = (uint64_t)v327;
      v167 = v300;
      v180(v300, (uint64_t)&v327[v333[5]], v228);
      sub_10005972C(v229, v294, type metadata accessor for SafeLocation);
      v230 = (uint64_t)v343;
      v231 = swift_isUniquelyReferenced_nonNull_native(v343);
      v338 = (_QWORD *)v230;
      v343 = (_QWORD *)0x8000000000000000;
      v233 = sub_100003FB0(v167);
      v234 = *(_QWORD *)(v230 + 16);
      v235 = (v232 & 1) == 0;
      v236 = v234 + v235;
      if (__OFADD__(v234, v235))
        goto LABEL_107;
      v237 = v232;
      if (*(_QWORD *)(v230 + 24) < v236)
      {
        sub_100A94D5C(v236, v231);
        v238 = sub_100003FB0(v300);
        v167 = v332;
        if ((v237 & 1) != (v239 & 1))
          goto LABEL_112;
        v233 = v238;
        v240 = v338;
        if ((v237 & 1) == 0)
          goto LABEL_85;
LABEL_75:
        sub_100AD8318(v294, v240[7] + v233 * v192);
LABEL_87:
        v343 = v240;
        swift_bridgeObjectRelease();
        v227(v300, v167);
        sub_1000126B0(v295, type metadata accessor for SafeLocation);
        v56 = v312;
        v23 = v333;
        v24 = v314;
        v50 = v327;
        goto LABEL_4;
      }
      v167 = v332;
      if ((v231 & 1) != 0)
      {
        v240 = v338;
        if ((v232 & 1) != 0)
          goto LABEL_75;
      }
      else
      {
        sub_100AA1C80();
        v240 = v338;
        if ((v237 & 1) != 0)
          goto LABEL_75;
      }
LABEL_85:
      v240[(v233 >> 6) + 8] |= 1 << v233;
      v180(v240[6] + *(_QWORD *)(v331 + 72) * v233, v300, v167);
      sub_1000126EC(v294, v240[7] + v233 * v192, type metadata accessor for SafeLocation);
      v260 = v240[2];
      v225 = __OFADD__(v260, 1);
      v261 = v260 + 1;
      if (v225)
        goto LABEL_110;
      v240[2] = v261;
      v240 = v338;
      goto LABEL_87;
    }
    if (v163 == 1)
      break;
    v57 = v299;
    sub_1000126EC(v161, v299, type metadata accessor for SafeLocation);
    v58 = *(_QWORD *)(v57 + v23[13]);
    swift_beginAccess(v50, v337, 1, 0);
    *(_QWORD *)&v50[v23[13]] = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease();
    v59 = v57 + v23[5];
    v60 = v331;
    v61 = *(void (**)(char *, uint64_t, uint64_t))(v331 + 16);
    v62 = (uint64_t)v330;
    v63 = v332;
    v61(v330, v59, v332);
    v64 = v292;
    sub_10005972C(v57, v292, type metadata accessor for SafeLocation);
    v65 = v308;
    v66 = swift_isUniquelyReferenced_nonNull_native(v308);
    v338 = (_QWORD *)v65;
    v67 = v63;
    sub_10010E594(v64, v62, v66);
    v308 = (unint64_t)v338;
    swift_bridgeObjectRelease();
    v68 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v68(v62, v63);
    v61((char *)v62, (uint64_t)&v327[v333[5]], v63);
    sub_10005972C((uint64_t)v327, v64, type metadata accessor for SafeLocation);
    v69 = (uint64_t)v343;
    v70 = swift_isUniquelyReferenced_nonNull_native(v343);
    v338 = (_QWORD *)v69;
    sub_10010E594(v64, v62, v70);
    v343 = v338;
    swift_bridgeObjectRelease();
    v68(v62, v67);
    v61((char *)v62, (uint64_t)&v327[v333[5]], v67);
    sub_10005972C(v57, v64, type metadata accessor for SafeLocation);
    v71 = v342;
    v72 = swift_isUniquelyReferenced_nonNull_native(v342);
    v338 = (_QWORD *)v71;
    v73 = v64;
    v50 = v327;
    sub_10010E594(v73, v62, v72);
    v342 = (unint64_t)v338;
    swift_bridgeObjectRelease();
    v68(v62, v67);
    v23 = v333;
    v74 = v57;
    v45 = v328;
    sub_1000126B0(v74, type metadata accessor for SafeLocation);
    v56 = v312;
    v24 = v314;
LABEL_4:
    v52 = v311;
LABEL_5:
    v75 = v310 + 1;
    sub_100004048(v56, &qword_101106E40);
    sub_100004048(v319, &qword_101106E40);
    sub_1000126B0((uint64_t)v50, type metadata accessor for SafeLocation);
    v55 = v75;
    a2 = v309;
    if (v75 == v304)
    {
      swift_bridgeObjectRelease();
      v51 = (unint64_t)v343;
      goto LABEL_89;
    }
  }
  v164 = swift_beginAccess(v50, v339, 0, 0);
  v165 = &v50[v23[5]];
  v166 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v331 + 16);
  v167 = v302;
  v166(v302, v165, v332, v164);
  sub_10005972C((uint64_t)v50, v296, type metadata accessor for SafeLocation);
  v168 = (uint64_t)v343;
  v169 = swift_isUniquelyReferenced_nonNull_native(v343);
  v338 = (_QWORD *)v168;
  v343 = (_QWORD *)0x8000000000000000;
  v171 = sub_100003FB0(v167);
  v172 = *(_QWORD *)(v168 + 16);
  v173 = (v170 & 1) == 0;
  v174 = v172 + v173;
  if (!__OFADD__(v172, v173))
  {
    v167 = v170;
    if (*(_QWORD *)(v168 + 24) >= v174)
    {
      if ((v169 & 1) != 0)
      {
        v177 = v338;
        if ((v170 & 1) == 0)
          goto LABEL_81;
      }
      else
      {
        sub_100AA1C80();
        v177 = v338;
        if ((v167 & 1) == 0)
          goto LABEL_81;
      }
    }
    else
    {
      sub_100A94D5C(v174, v169);
      v175 = sub_100003FB0(v302);
      if ((v167 & 1) != (v176 & 1))
        goto LABEL_111;
      v171 = v175;
      v177 = v338;
      if ((v167 & 1) == 0)
      {
LABEL_81:
        v177[(v171 >> 6) + 8] |= 1 << v171;
        ((void (*)(unint64_t, uint64_t, uint64_t))v166)(v177[6] + *(_QWORD *)(v331 + 72) * v171, v302, v332);
        sub_1000126EC(v296, v177[7] + v171 * v79, type metadata accessor for SafeLocation);
        v258 = v177[2];
        v225 = __OFADD__(v258, 1);
        v259 = v258 + 1;
        if (v225)
          goto LABEL_109;
        v177[2] = v259;
        v177 = v338;
        goto LABEL_83;
      }
    }
    sub_100AD8318(v296, v177[7] + v171 * v79);
LABEL_83:
    v343 = v177;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v302, v332);
    v56 = v312;
    v23 = v333;
    v24 = v314;
    v52 = v311;
    goto LABEL_5;
  }
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v332);
  __break(1u);
LABEL_112:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v167);
  __break(1u);
  return result;
}

uint64_t sub_100AD5DE0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v29;
  char v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v42 = a4;
  v9 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for SafeLocation(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v40 - v17;
  v19 = *a2;
  if (!*(_QWORD *)(v19 + 16) || (v20 = sub_100003FB0(a1), (v21 & 1) == 0))
  {
    v27 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a5, 1, 1, v27);
  }
  v41 = a5;
  v22 = *(_QWORD *)(v13 + 72);
  sub_10005972C(*(_QWORD *)(v19 + 56) + v22 * v20, (uint64_t)v16, type metadata accessor for SafeLocation);
  sub_1000126EC((uint64_t)v16, (uint64_t)v18, type metadata accessor for SafeLocation);
  v23 = *a3;
  if (*(_QWORD *)(*a3 + 16) && (v24 = sub_100003FB0(a1), (v25 & 1) != 0))
  {
    sub_10005972C(*(_QWORD *)(v23 + 56) + v24 * v22, (uint64_t)v11, type metadata accessor for SafeLocation);
    v26 = 0;
  }
  else
  {
    v26 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v13 + 56))(v11, v26, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
  {
    sub_100004048((uint64_t)v11, &qword_101106E40);
    goto LABEL_12;
  }
  v29 = v11[v12[12]];
  sub_100004048((uint64_t)v11, &qword_101106E40);
  if (v29 != 1)
  {
LABEL_12:
    if (v18[v12[6]] == 2)
    {
      v31 = *(_QWORD *)(v42 + 64);
      v32 = sub_1000188D0();
      swift_retain();
      v33 = sub_100AD6D18((uint64_t)v32, v31);
      swift_bridgeObjectRelease();
      swift_release();
      v34 = sub_1000178D0((uint64_t)v33);
      swift_bridgeObjectRelease();
      v35 = sub_100307DCC((uint64_t)v34);
      swift_bridgeObjectRelease();
      v36 = v12[13];
      swift_bridgeObjectRelease();
      v30 = 0;
      *(_QWORD *)&v18[v36] = v35;
    }
    else
    {
      v30 = 0;
    }
    goto LABEL_15;
  }
  v30 = 1;
LABEL_15:
  v37 = *(int *)(sub_10001A9A8(&qword_101113048) + 48);
  v38 = v41;
  sub_10005972C((uint64_t)v18, v41, type metadata accessor for SafeLocation);
  *(_BYTE *)(v38 + v37) = v30;
  v39 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  swift_storeEnumTagMultiPayload(v38, v39, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 0, 1, v39);
  return sub_1000126B0((uint64_t)v18, type metadata accessor for SafeLocation);
}

uint64_t sub_100AD60FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v17)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;

  v4 = sub_10001A9A8(&qword_101106EF8);
  v37 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SafeLocation(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - v12;
  v14 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v16, v17);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1000126EC((uint64_t)v16, (uint64_t)v13, type metadata accessor for SafeLocation);
      v19 = *(_QWORD *)(a2 + 64);
      sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SafeLocation);
      v20 = *(unsigned __int8 *)(v8 + 80);
      v21 = (v20 + 24) & ~v20;
      v22 = swift_allocObject(&unk_1010AA578, v21 + v9, v20 | 7);
      *(_QWORD *)(v22 + 16) = v19;
      sub_1000126EC((uint64_t)v11, v22 + v21, type metadata accessor for SafeLocation);
      swift_retain();
      v23 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
      v24 = sub_1000193A4(&qword_101106F00, (uint64_t *)&unk_101106EA8, (const char *)&protocol conformance descriptor for Future<A, B>);
      v25 = sub_100AD8E30;
    }
    else
    {
      sub_1000126EC((uint64_t)v16, (uint64_t)v13, type metadata accessor for SafeLocation);
      v30 = *(_QWORD *)(a2 + 64);
      sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SafeLocation);
      v31 = *(unsigned __int8 *)(v8 + 80);
      v32 = (v31 + 24) & ~v31;
      v22 = swift_allocObject(&unk_1010AA550, v32 + v9, v31 | 7);
      *(_QWORD *)(v22 + 16) = v30;
      sub_1000126EC((uint64_t)v11, v22 + v32, type metadata accessor for SafeLocation);
      swift_retain();
      v23 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
      v24 = sub_1000193A4(&qword_101106F00, (uint64_t *)&unk_101106EA8, (const char *)&protocol conformance descriptor for Future<A, B>);
      v25 = sub_100AD8E20;
    }
  }
  else
  {
    sub_1000126EC((uint64_t)v16, (uint64_t)v13, type metadata accessor for SafeLocation);
    v26 = *(_QWORD *)(a2 + 64);
    sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for SafeLocation);
    v27 = *(unsigned __int8 *)(v8 + 80);
    v28 = (v27 + 24) & ~v27;
    v29 = v28 + v9;
    v22 = swift_allocObject(&unk_1010AA5A0, v28 + v9 + 1, v27 | 7);
    *(_QWORD *)(v22 + 16) = v26;
    sub_1000126EC((uint64_t)v11, v22 + v28, type metadata accessor for SafeLocation);
    *(_BYTE *)(v22 + v29) = 1;
    swift_retain();
    v23 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
    v24 = sub_1000193A4(&qword_101106F00, (uint64_t *)&unk_101106EA8, (const char *)&protocol conformance descriptor for Future<A, B>);
    v25 = sub_100AD8F40;
  }
  Deferred.init(createPublisher:)(v25, v22, v23, v24);
  v33 = sub_1000193A4((unint64_t *)&unk_101106F08, &qword_101106EF8, (const char *)&protocol conformance descriptor for Deferred<A>);
  v34 = Publisher.eraseToAnyPublisher()(v4, v33);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v4);
  sub_1000126B0((uint64_t)v13, type metadata accessor for SafeLocation);
  return v34;
}

uint64_t sub_100AD648C()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, 88, 7);
}

id sub_100AD64D0(_QWORD *a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class isa;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  id v36;
  uint64_t v38;

  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v15 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  v18 = a1[3];
  v19 = a1[4];
  sub_10001AA44(a1, v18);
  v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 24))(v18, v19);
  v21 = a1[3];
  v22 = a1[4];
  sub_10001AA44(a1, v21);
  v23 = (*(double (**)(uint64_t, uint64_t))(v22 + 32))(v21, v22);
  v24 = a1[3];
  v25 = a1[4];
  sub_10001AA44(a1, v24);
  v26 = (*(double (**)(uint64_t, uint64_t))(v25 + 40))(v24, v25);
  v27 = a1[3];
  v28 = a1[4];
  sub_10001AA44(a1, v27);
  (*(void (**)(uint64_t, uint64_t))(v28 + 56))(v27, v28);
  v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if ((_DWORD)v29 == 1)
  {
    Date.init()(v29);
    sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  }
  if (v23 > a2)
    a2 = v23;
  v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2));
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v32 = objc_msgSend(v30, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:", isa, v14, v17, v20, a2, v26);

  v33 = a1[3];
  v34 = a1[4];
  sub_10001AA44(a1, v33);
  v35 = *(uint64_t (**)(uint64_t, uint64_t))(v34 + 48);
  v36 = v32;
  objc_msgSend(v36, "setReferenceFrame:", v35(v33, v34));

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v36;
}

void sub_100AD6790()
{
  id *v0;
  id v1;

  v1 = objc_msgSend(*v0, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1);

}

uint64_t sub_100AD67DC()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, "preferredName");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_100AD6840(_QWORD *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t v4;

  v3 = objc_msgSend(*v1, "type");
  type metadata accessor for RTLocationOfInterestType(0);
  a1[3] = v4;
  a1[4] = &off_1010AA348;
  *a1 = v3;
}

uint64_t sub_100AD6888@<X0>(_QWORD *a1@<X8>)
{
  id *v1;
  id v3;
  uint64_t result;

  v3 = objc_msgSend(*v1, "location");
  result = sub_10000F4A0(0, &qword_101113270, RTLocation_ptr);
  a1[3] = result;
  a1[4] = &off_1010AA370;
  *a1 = v3;
  return result;
}

uint64_t sub_100AD68E8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;

  if (a1)
    v5 = sub_1007EE944(a1);
  else
    v5 = 0;
  a3(v5, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AD6938(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v4 = a2;
  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v6 = sub_10000F4A0(0, &qword_10110AD20, RTLocationOfInterest_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v6);
  }
  swift_retain();
  v7 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100AD69C4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v6;
  uint64_t *v7;

  v6 = *v3;
  v7 = sub_10001AA44(a1, a1[3]);
  return sub_100AD6C18(*v7, a2, a3, v6);
}

id sub_100AD6A08()
{
  id *v0;

  return objc_msgSend(*v0, "altitude");
}

id sub_100AD6A18()
{
  id *v0;

  return objc_msgSend(*v0, "horizontalUncertainty");
}

id sub_100AD6A28()
{
  id *v0;

  return objc_msgSend(*v0, "verticalUncertainty");
}

id sub_100AD6A38()
{
  id *v0;

  return objc_msgSend(*v0, "referenceFrame");
}

uint64_t sub_100AD6A48@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*v1, "date");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v3);

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

uint64_t type metadata accessor for LocationOfInterestProvider()
{
  return objc_opt_self(_TtC12searchpartyd26LocationOfInterestProvider);
}

uint64_t sub_100AD6AEC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[4])
    swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100AD6B28()
{
  uint64_t v0;

  return sub_100AD0C1C(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100AD6B3C()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100AD6B70(uint64_t a1)
{
  uint64_t v1;

  sub_100AD0E40(a1, *(void (**)(unsigned __int8 *, _QWORD))(v1 + 16));
}

id sub_100AD6B7C(id result, char a2)
{
  if (a2 == 1)
    return result;
  if (!a2)
    return (id)swift_errorRetain(result);
  return result;
}

void sub_100AD6B98(void *a1, char a2, char a3)
{
  if ((a3 & 1) != 0)
    sub_100AD6BA4(a1, a2);
  else
    swift_bridgeObjectRelease();
}

void sub_100AD6BA4(void *a1, char a2)
{
  if (a2 == 1)
  {

  }
  else if (!a2)
  {
    swift_errorRelease(a1);
  }
}

void sub_100AD6BC0(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 >> 6 == 1)
  {
    sub_100AD6B7C(a2, a3 & 0x3F);
  }
  else if (!(a3 >> 6))
  {
    swift_bridgeObjectRetain(a2);
  }
}

void sub_100AD6BEC(uint64_t a1, void *a2, unsigned __int8 a3)
{
  if (a3 >> 6 == 1)
  {
    sub_100AD6BA4(a2, a3 & 0x3F);
  }
  else if (!(a3 >> 6))
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100AD6C18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];
  _QWORD v14[5];

  type metadata accessor for RTLocationOfInterestType(0);
  v14[3] = v8;
  v14[4] = &off_1010AA348;
  v14[0] = a1;
  v9 = *sub_10001AA44(v14, v8);
  v10 = swift_allocObject(&unk_1010AA618, 32, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  aBlock[4] = sub_100AD905C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100AD6938;
  aBlock[3] = &unk_1010AA630;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a4, "fetchLocationsOfInterestOfType:withHandler:", v9, v11);
  _Block_release(v11);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

_QWORD *sub_100AD6D18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  _QWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[10];
  _QWORD *v21;

  v18 = a2;
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = __chkstk_darwin(v4);
  v15[7] = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v15 - v8;
  result = _swiftEmptyArrayStorage;
  v21 = _swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v11 = 0;
    v12 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v19 = *(_QWORD *)(v7 + 72);
    v15[1] = v2;
    v15[2] = v12;
    v16 = a1 + v12;
    v15[6] = _swiftEmptyArrayStorage;
    v15[4] = "enableNotifyWhenFound";
    v15[5] = "";
    v15[3] = "onnect";
    do
    {
      sub_10005972C(v16 + v19 * v11, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      v13 = sub_1004AA8E4((uint64_t)v9, v18);
      if (*((_QWORD *)v13 + 2))
      {
        Hasher.init(_seed:)(v20);
        String.hash(into:)(v20, 0x61654C6E69676562, 0xED0000676E696873);
        v14 = Hasher._finalize()() & ~(-1 << v13[32]);
        if (((*(_QWORD *)&v13[((v14 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v14) & 1) != 0)
          __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      ++v11;
    }
    while (v11 != v17);
    return v21;
  }
  return result;
}

void sub_100AD7248(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;

  v51 = a4;
  v49 = a2;
  v50 = a3;
  v6 = sub_10001A9A8(&qword_101113040);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v10 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  v48 = v10;
  v11 = __chkstk_darwin(v9);
  v43 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v42 = (uint64_t)&v39 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v18);
  v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a1 + 56);
  v45 = a1 + 56;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v46 = (unint64_t)(v22 + 63) >> 6;
  v25 = swift_bridgeObjectRetain(a1);
  v26 = 0;
  v44 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v24)
    {
      v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v28 = v27 | (v26 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v26 >= v46)
      goto LABEL_34;
    v30 = *(_QWORD *)(v45 + 8 * v26);
    if (!v30)
      break;
LABEL_18:
    v24 = (v30 - 1) & v30;
    v28 = __clz(__rbit64(v30)) + (v26 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v15 + 16))(v20, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v15 + 72) * v28, v14, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
      goto LABEL_35;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v20, v14);
    sub_100AD5DE0((uint64_t)v17, v49, v50, v51, (uint64_t)v8);
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_release();
      return;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v8, 1, v47) == 1)
    {
      sub_100004048((uint64_t)v8, &qword_101113040);
    }
    else
    {
      v41 = a1;
      v32 = v42;
      sub_1000126EC((uint64_t)v8, v42, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_1000126EC(v32, v43, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
        v44 = (_QWORD *)sub_1007CA96C(0, v44[2] + 1, 1, (unint64_t)v44);
      v34 = v44[2];
      v33 = v44[3];
      v35 = v34 + 1;
      a1 = v41;
      if (v34 >= v33 >> 1)
      {
        v39 = v44[2];
        v40 = v34 + 1;
        v38 = (_QWORD *)sub_1007CA96C(v33 > 1, v34 + 1, 1, (unint64_t)v44);
        v34 = v39;
        v35 = v40;
        v44 = v38;
      }
      v36 = v43;
      v37 = v44;
      v44[2] = v35;
      sub_1000126EC(v36, (uint64_t)v37+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(_QWORD *)(v48 + 72) * v34, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    }
  }
  v31 = v26 + 1;
  if (v26 + 1 >= v46)
    goto LABEL_34;
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
    goto LABEL_17;
  v31 = v26 + 2;
  if (v26 + 2 >= v46)
    goto LABEL_34;
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
    goto LABEL_17;
  v31 = v26 + 3;
  if (v26 + 3 >= v46)
    goto LABEL_34;
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
    goto LABEL_17;
  v31 = v26 + 4;
  if (v26 + 4 >= v46)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v20, 1, 1, v14, v25);
    goto LABEL_35;
  }
  v30 = *(_QWORD *)(v45 + 8 * v31);
  if (v30)
  {
LABEL_17:
    v26 = v31;
    goto LABEL_18;
  }
  while (1)
  {
    v26 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v26 >= v46)
      goto LABEL_34;
    v30 = *(_QWORD *)(v45 + 8 * v26);
    ++v31;
    if (v30)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
}

void sub_100AD76D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;

  v56 = a2;
  v3 = type metadata accessor for SafeLocation(0);
  v53 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v52 = (uint64_t)&v49 - v7;
  v8 = sub_10001A9A8(&qword_101113040);
  __chkstk_darwin(v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v59 = *(_QWORD *)(v61 - 8);
  v11 = __chkstk_darwin(v61);
  v50 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v49 = (uint64_t)&v49 - v13;
  v14 = type metadata accessor for UUID(0);
  v64 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v17);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a1 + 56);
  v54 = a1 + 56;
  v21 = 1 << *(_BYTE *)(a1 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v55 = (unint64_t)(v21 + 63) >> 6;
  v60 = a1;
  v24 = swift_bridgeObjectRetain(a1);
  v25 = 0;
  v51 = _swiftEmptyArrayStorage;
  v57 = v10;
  v58 = v19;
LABEL_4:
  v26 = v56;
  if (v23)
  {
LABEL_5:
    v63 = (v23 - 1) & v23;
    v27 = __clz(__rbit64(v23)) | (v25 << 6);
    v28 = v64;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    v28 = v64;
    if (v29 >= v55)
      goto LABEL_38;
    v30 = *(_QWORD *)(v54 + 8 * v29);
    ++v25;
    if (!v30)
    {
      v25 = v29 + 1;
      if (v29 + 1 >= v55)
        goto LABEL_38;
      v30 = *(_QWORD *)(v54 + 8 * v25);
      if (!v30)
      {
        v25 = v29 + 2;
        if (v29 + 2 >= v55)
          goto LABEL_38;
        v30 = *(_QWORD *)(v54 + 8 * v25);
        if (!v30)
        {
          v25 = v29 + 3;
          if (v29 + 3 >= v55)
            goto LABEL_38;
          v30 = *(_QWORD *)(v54 + 8 * v25);
          if (!v30)
            break;
        }
      }
    }
LABEL_21:
    v63 = (v30 - 1) & v30;
    v27 = __clz(__rbit64(v30)) + (v25 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v28 + 16))(v19, *(_QWORD *)(v60 + 48) + *(_QWORD *)(v28 + 72) * v27, v14, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v19, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v19, 1, v14) == 1)
      goto LABEL_39;
    v32 = v19;
    v33 = v14;
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v16, v32, v14);
    v34 = *(_QWORD *)(v26 + 16);
    v62 = v25;
    if (v34)
    {
      v35 = v53;
      v36 = v26 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
      swift_bridgeObjectRetain(v26);
      v37 = *(_QWORD *)(v35 + 72);
      while (1)
      {
        sub_10005972C(v36, (uint64_t)v6, type metadata accessor for SafeLocation);
        if ((static UUID.== infix(_:_:)(&v6[*(int *)(v3 + 20)], v16) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v6, type metadata accessor for SafeLocation);
        v36 += v37;
        if (!--v34)
        {
          v26 = v56;
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
      }
      v26 = v56;
      swift_bridgeObjectRelease();
      v40 = v52;
      sub_1000126EC((uint64_t)v6, v52, type metadata accessor for SafeLocation);
      v39 = (uint64_t)v57;
      sub_1000126EC(v40, (uint64_t)v57, type metadata accessor for SafeLocation);
      swift_storeEnumTagMultiPayload(v39, v61, 1);
      v38 = 0;
    }
    else
    {
LABEL_28:
      v38 = 1;
      v39 = (uint64_t)v57;
    }
    v41 = v59;
    v42 = v61;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v39, v38, 1, v61);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v16, v33);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v42) != 1)
    {
      v43 = v39;
      v44 = v49;
      sub_1000126EC(v43, v49, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_1000126EC(v44, v50, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
        v51 = (_QWORD *)sub_1007CA96C(0, v51[2] + 1, 1, (unint64_t)v51);
      v14 = v33;
      v46 = v51[2];
      v45 = v51[3];
      v19 = v58;
      if (v46 >= v45 >> 1)
        v51 = (_QWORD *)sub_1007CA96C(v45 > 1, v46 + 1, 1, (unint64_t)v51);
      v47 = v50;
      v48 = v51;
      v51[2] = v46 + 1;
      sub_1000126EC(v47, (uint64_t)v48+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v46, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      v25 = v62;
      v23 = v63;
      goto LABEL_4;
    }
    sub_100004048(v39, &qword_101113040);
    v14 = v33;
    v19 = v58;
    v25 = v62;
    v23 = v63;
    if (v63)
      goto LABEL_5;
  }
  v31 = v29 + 4;
  if (v31 >= v55)
  {
LABEL_38:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v64 + 56))(v19, 1, 1, v14, v24);
LABEL_39:
    swift_release();
    return;
  }
  v30 = *(_QWORD *)(v54 + 8 * v31);
  if (v30)
  {
    v25 = v31;
    goto LABEL_21;
  }
  while (1)
  {
    v25 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v25 >= v55)
      goto LABEL_38;
    v30 = *(_QWORD *)(v54 + 8 * v25);
    ++v31;
    if (v30)
      goto LABEL_21;
  }
LABEL_41:
  __break(1u);
}

void sub_100AD7C88(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  int64_t v30;
  uint64_t v31;
  unint64_t i;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  int64_t v72;
  uint64_t v73;

  v70 = a2;
  v61 = a3;
  v4 = (int *)type metadata accessor for SafeLocation(0);
  v63 = *((_QWORD *)v4 - 1);
  v5 = __chkstk_darwin(v4);
  v58 = (uint64_t)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v54 - v8;
  v10 = __chkstk_darwin(v7);
  v60 = (uint64_t)&v54 - v11;
  __chkstk_darwin(v10);
  v59 = (uint64_t)&v54 - v12;
  v13 = sub_10001A9A8(&qword_101113040);
  __chkstk_darwin(v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v67 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v56 = (uint64_t)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v55 = (uint64_t)&v54 - v19;
  v73 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v23);
  v68 = a1;
  v69 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a1 + 56);
  v64 = a1 + 56;
  v26 = 1 << *(_BYTE *)(a1 + 32);
  v27 = -1;
  if (v26 < 64)
    v27 = ~(-1 << v26);
  v28 = v27 & v25;
  v65 = (unint64_t)(v26 + 63) >> 6;
  v29 = swift_bridgeObjectRetain(a1);
  v30 = 0;
  v57 = _swiftEmptyArrayStorage;
  v62 = v15;
  v66 = v16;
  v31 = v73;
  if (!v28)
    goto LABEL_5;
LABEL_4:
  v71 = (v28 - 1) & v28;
  v72 = v30;
  for (i = __clz(__rbit64(v28)) | (v30 << 6); ; i = __clz(__rbit64(v34)) + (v35 << 6))
  {
    v37 = v69;
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v20 + 16))(v69, *(_QWORD *)(v68 + 48) + *(_QWORD *)(v20 + 72) * i, v31, v29);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v37, 0, 1, v31);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v37, 1, v31) == 1)
      goto LABEL_42;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v37, v31);
    v38 = *(_QWORD *)(v70 + 16);
    if (v38)
    {
      v39 = v63;
      v40 = v70 + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
      swift_bridgeObjectRetain(v70);
      v41 = *(_QWORD *)(v39 + 72);
      while (1)
      {
        sub_10005972C(v40, (uint64_t)v9, type metadata accessor for SafeLocation);
        if ((static UUID.== infix(_:_:)(&v9[v4[5]], v22) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v9, type metadata accessor for SafeLocation);
        v40 += v41;
        if (!--v38)
        {
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
      }
      swift_bridgeObjectRelease();
      v42 = v60;
      sub_1000126EC((uint64_t)v9, v60, type metadata accessor for SafeLocation);
      v43 = v59;
      sub_1000126EC(v42, v59, type metadata accessor for SafeLocation);
      if (*(unsigned __int8 *)(v43 + v4[6]) == v61)
      {
        v44 = v58;
        sub_10005972C(v43, v58, type metadata accessor for SafeLocation);
        *(_BYTE *)(v44 + v4[6]) = 1;
        sub_1000126B0(v43, type metadata accessor for SafeLocation);
        v45 = (_QWORD *)(v44 + v4[7]);
        swift_bridgeObjectRelease();
        *v45 = 0;
        v45[1] = 0xE000000000000000;
        v15 = v62;
        sub_10005972C(v44, (uint64_t)v62, type metadata accessor for SafeLocation);
        v46 = v66;
        swift_storeEnumTagMultiPayload(v15, v66, 2);
        v47 = v67;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v15, 0, 1, v46);
        v48 = v44;
        v16 = v46;
        sub_1000126B0(v48, type metadata accessor for SafeLocation);
        goto LABEL_32;
      }
      sub_1000126B0(v43, type metadata accessor for SafeLocation);
LABEL_30:
      v15 = v62;
      v16 = v66;
    }
    v47 = v67;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(v15, 1, 1, v16);
LABEL_32:
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v73);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v15, 1, v16) == 1)
    {
      sub_100004048((uint64_t)v15, &qword_101113040);
    }
    else
    {
      v49 = v55;
      sub_1000126EC((uint64_t)v15, v55, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      sub_1000126EC(v49, v56, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
        v57 = (_QWORD *)sub_1007CA96C(0, v57[2] + 1, 1, (unint64_t)v57);
      v51 = v57[2];
      v50 = v57[3];
      if (v51 >= v50 >> 1)
        v57 = (_QWORD *)sub_1007CA96C(v50 > 1, v51 + 1, 1, (unint64_t)v57);
      v52 = v56;
      v53 = v57;
      v57[2] = v51 + 1;
      sub_1000126EC(v52, (uint64_t)v53+ ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(_QWORD *)(v67 + 72) * v51, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      v16 = v66;
    }
    v28 = v71;
    v30 = v72;
    v31 = v73;
    if (v71)
      goto LABEL_4;
LABEL_5:
    v33 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v33 >= v65)
      goto LABEL_41;
    v34 = *(_QWORD *)(v64 + 8 * v33);
    v35 = v30 + 1;
    if (!v34)
    {
      v35 = v30 + 2;
      if (v30 + 2 >= v65)
        goto LABEL_41;
      v34 = *(_QWORD *)(v64 + 8 * v35);
      if (!v34)
      {
        v35 = v30 + 3;
        if (v30 + 3 >= v65)
          goto LABEL_41;
        v34 = *(_QWORD *)(v64 + 8 * v35);
        if (!v34)
        {
          v35 = v30 + 4;
          if (v30 + 4 >= v65)
            goto LABEL_41;
          v34 = *(_QWORD *)(v64 + 8 * v35);
          if (!v34)
            break;
        }
      }
    }
LABEL_20:
    v71 = (v34 - 1) & v34;
    v72 = v35;
  }
  v36 = v30 + 5;
  if (v30 + 5 >= v65)
  {
LABEL_41:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(v69, 1, 1, v31, v29);
LABEL_42:
    swift_release();
    return;
  }
  v34 = *(_QWORD *)(v64 + 8 * v36);
  if (v34)
  {
    v35 = v30 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v35 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v35 >= v65)
      goto LABEL_41;
    v34 = *(_QWORD *)(v64 + 8 * v35);
    ++v36;
    if (v34)
      goto LABEL_20;
  }
LABEL_44:
  __break(1u);
}

uint64_t sub_100AD8318(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SafeLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LocationOfInterestProvider.RemappingOperation(uint64_t a1)
{
  uint64_t result;

  result = qword_1011132E8;
  if (!qword_1011132E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocationOfInterestProvider.RemappingOperation);
  return result;
}

unint64_t sub_100AD8398()
{
  unint64_t result;

  result = qword_101113090;
  if (!qword_101113090)
  {
    result = swift_getWitnessTable(byte_100E5D1BC, &type metadata for LocationOfInterestProvider.Error);
    atomic_store(result, (unint64_t *)&qword_101113090);
  }
  return result;
}

_QWORD *sub_100AD83DC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *result;
  char *v20;
  char *v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;

  v4 = *a2;
  v70 = a2;
  v71 = v4;
  v5 = sub_10001A9A8(&qword_1011130E8);
  v6 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  v73 = v6;
  __chkstk_darwin(v5);
  v8 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1011130F0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1011130F8);
  __chkstk_darwin(v13);
  v17 = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v18)
  {
    v62[1] = v2;
    v77 = _swiftEmptyArrayStorage;
    v67 = v15;
    v68 = v14;
    v66 = v17;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    v20 = (char *)(a1 + 32);
    v64 = v12;
    v65 = v8;
    v69 = v10;
    v63 = v9;
    v21 = v8;
    do
    {
      v22 = *v20;
      v74 = v20 + 1;
      v75 = v18;
      v23 = swift_allocObject(&unk_1010AA438, 40, 7);
      *(_BYTE *)(v23 + 16) = v22;
      v24 = v22;
      v26 = v70;
      v25 = v71;
      *(_QWORD *)(v23 + 24) = v70;
      *(_QWORD *)(v23 + 32) = v25;
      v27 = sub_10001A9A8(&qword_101113100);
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      swift_retain();
      v76 = Future.init(_:)(sub_100AD8C3C, v23, v28);
      v29 = swift_allocObject(&unk_1010AA460, 32, 7);
      *(_BYTE *)(v29 + 16) = v22;
      *(_QWORD *)(v29 + 24) = v26;
      v30 = swift_retain();
      v31 = static Subscribers.Demand.unlimited.getter(v30);
      v32 = sub_10001A9A8(&qword_101113108);
      v33 = v26;
      v34 = sub_1000193A4(&qword_101113110, &qword_101113100, (const char *)&protocol conformance descriptor for Future<A, B>);
      v35 = sub_1000193A4(&qword_101113118, &qword_101113108, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v36 = v31;
      v37 = v72;
      Publisher.flatMap<A>(maxPublishers:_:)(v36, sub_100AD8C6C, v29, v27, v32, v34, v35);
      swift_release();
      swift_release();
      v38 = swift_allocObject(&unk_1010AA488, 32, 7);
      LOBYTE(v34) = v24;
      *(_BYTE *)(v38 + 16) = v24;
      *(_QWORD *)(v38 + 24) = v33;
      v39 = swift_retain();
      v40 = static Subscribers.Demand.unlimited.getter(v39);
      v41 = sub_10001A9A8(&qword_101113120);
      v42 = sub_1000193A4(&qword_101113128, &qword_1011130E8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      v43 = sub_1000193A4(&qword_101113130, &qword_101113120, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v44 = v64;
      Publisher.flatMap<A, B>(maxPublishers:_:)(v40, sub_100AD8C78, v38, v37, &type metadata for LocationOfInterestProvider.LOIRequestResponse, v41, v42, v43);
      swift_release();
      v45 = v37;
      v46 = v69;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v21, v45);
      v47 = swift_allocObject(&unk_1010AA4B0, 17, 7);
      *(_BYTE *)(v47 + 16) = v34;
      v48 = sub_10001A9A8(&qword_1011130A0);
      v49 = sub_1000193A4(&qword_101113138, &qword_1011130F0, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
      v50 = sub_1000193A4(&qword_1011130B0, &qword_1011130A0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v51 = v66;
      v52 = v63;
      Publisher.catch<A>(_:)(sub_100AD8C94, v47, v63, v48, v49, v50);
      swift_release();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v44, v52);
      v53 = sub_1000193A4(&qword_101113140, &qword_1011130F8, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      v54 = v68;
      v55 = Publisher.eraseToAnyPublisher()(v68, v53);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v51, v54);
      v76 = v55;
      v56 = v50;
      v57 = v75;
      v58 = Publisher.eraseToAnyPublisher()(v48, v56);
      v59 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v59);
      v60 = v77[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
      v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v58);
      specialized ContiguousArray._endMutation()(v61);
      v20 = v74;
      v18 = v57 - 1;
    }
    while (v18);
    return v77;
  }
  return result;
}

_QWORD *sub_100AD8888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v32 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v5 = *(_QWORD *)(v32 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v32);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101113200);
  __chkstk_darwin(v8);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v12)
  {
    v25[1] = v2;
    v34 = _swiftEmptyArrayStorage;
    v31 = v9;
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    v14 = *(unsigned __int8 *)(v5 + 80);
    v30 = a2;
    v15 = a1 + ((v14 + 32) & ~v14);
    v16 = *(_QWORD *)(v5 + 72);
    v28 = (v14 + 16) & ~v14;
    v29 = v16;
    v26 = v14 | 7;
    v27 = v28 + v6;
    do
    {
      v33 = sub_100AD60FC(v15, v30);
      sub_10005972C(v15, (uint64_t)v7, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      v17 = swift_allocObject(&unk_1010AA528, v27, v26);
      sub_1000126EC((uint64_t)v7, v17 + v28, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
      v18 = sub_10001A9A8(&qword_101106EC8);
      v19 = sub_1000193A4(&qword_101106ED8, &qword_101106EC8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.map<A>(_:)(sub_100AD8DD4, v17, v18, v32, v19);
      swift_release();
      v20 = sub_1000193A4(&qword_101113208, &qword_101113200, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v21 = Publisher.eraseToAnyPublisher()(v8, v20);
      swift_release();
      v22 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v11, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v23 = v34[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized ContiguousArray._endMutation()(v24);
      v15 += v29;
      --v12;
    }
    while (v12);
    return v34;
  }
  return result;
}

uint64_t sub_100AD8ADC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100AD8AEC()
{
  return sub_100AD27BC();
}

uint64_t sub_100AD8AF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  NSString v9;
  uint64_t v11;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10000F9B8(a1, (uint64_t)v4, (uint64_t *)&unk_1010EA690);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v9);

  swift_unknownObjectRelease(isa);
  return sub_100004048(a1, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_100AD8C3C(uint64_t (*a1)(_QWORD **), uint64_t a2)
{
  uint64_t v2;

  return sub_100AD11CC(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100AD8C48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AD8C6C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100AD2844(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100AD8C78@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100AD3324(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100AD8C84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100AD8C94@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100AD3A20(a1, *(_BYTE *)(v2 + 16), a2);
}

uint64_t sub_100AD8C9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AD8CC8()
{
  uint64_t v0;

  sub_100AD6BEC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  return swift_deallocObject(v0, 33, 7);
}

void sub_100AD8CF0(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 16) = v4;
  sub_100AD6BC0(v2, v3, v4);
}

uint64_t sub_100AD8D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LocationOfInterestProvider.RemappingOperation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) <= 2)
  {
    sub_10001BC14(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    v7 = v6 + *(int *)(type metadata accessor for SafeLocation(0) + 20);
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100AD8DD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationOfInterestProvider.RemappingOperation(0) - 8)
                          + 80);
  return sub_10005972C(v1 + ((v3 + 16) & ~v3), a1, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_100AD8E20()
{
  return sub_100AD8E3C((uint64_t (*)(_QWORD, uint64_t))sub_100773730);
}

uint64_t sub_100AD8E30()
{
  return sub_100AD8E3C((uint64_t (*)(_QWORD, uint64_t))sub_10077360C);
}

uint64_t sub_100AD8E3C(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SafeLocation(0) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100AD8E8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100AD8F40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10077345C(*(_QWORD *)(v1 + 16), v1 + v4, *(_BYTE *)(v1 + v4 + *(_QWORD *)(v3 + 64)), a1);
}

uint64_t sub_100AD8F8C(uint64_t a1, __int16 a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  __int16 v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 0x1FF;
  return v3(&v5);
}

uint64_t sub_100AD8FC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100AD8FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100AD1304(a1, a2, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_100AD8FF8()
{
  unint64_t result;

  result = qword_101113240;
  if (!qword_101113240)
  {
    result = swift_getWitnessTable(byte_100E729F0, &type metadata for SystemInfoDynamic.MeDeviceState);
    atomic_store(result, (unint64_t *)&qword_101113240);
  }
  return result;
}

uint64_t sub_100AD903C(uint64_t a1)
{
  uint64_t v1;

  return sub_100AD0750(a1, v1);
}

uint64_t sub_100AD9044@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100AD07C8(a1, a2);
}

uint64_t sub_100AD905C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100AD68E8(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t *sub_100AD9064(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *a1 = *(_QWORD *)a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v25 = *(_QWORD *)a2;
      v26 = *(_QWORD *)(a2 + 8);
      sub_10001BBBC(*(_QWORD *)a2, v26);
      *a1 = v25;
      a1[1] = v26;
      v27 = (int *)type metadata accessor for SafeLocation(0);
      v28 = v27[5];
      v29 = (char *)a1 + v28;
      v30 = a2 + v28;
      v31 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
      *((_BYTE *)a1 + v27[6]) = *(_BYTE *)(a2 + v27[6]);
      v32 = v27[7];
      v33 = (uint64_t *)((char *)a1 + v32);
      v34 = (_QWORD *)(a2 + v32);
      v35 = v34[1];
      *v33 = *v34;
      v33[1] = v35;
      *(uint64_t *)((char *)a1 + v27[8]) = *(_QWORD *)(a2 + v27[8]);
      *(uint64_t *)((char *)a1 + v27[9]) = *(_QWORD *)(a2 + v27[9]);
      *(uint64_t *)((char *)a1 + v27[10]) = *(_QWORD *)(a2 + v27[10]);
      *((_BYTE *)a1 + v27[11]) = *(_BYTE *)(a2 + v27[11]);
      *((_BYTE *)a1 + v27[12]) = *(_BYTE *)(a2 + v27[12]);
      v36 = v27[13];
      v37 = *(_QWORD *)(a2 + v36);
      *(uint64_t *)((char *)a1 + v36) = v37;
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      v21 = a1;
      v22 = a3;
      v23 = 2;
    }
    else
    {
      v8 = *(_QWORD *)a2;
      v9 = *(_QWORD *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        *a1 = v8;
        a1[1] = v9;
        v10 = (int *)type metadata accessor for SafeLocation(0);
        v11 = v10[5];
        v12 = (char *)a1 + v11;
        v13 = a2 + v11;
        v14 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
        *((_BYTE *)a1 + v10[6]) = *(_BYTE *)(a2 + v10[6]);
        v15 = v10[7];
        v16 = (uint64_t *)((char *)a1 + v15);
        v17 = (_QWORD *)(a2 + v15);
        v18 = v17[1];
        *v16 = *v17;
        v16[1] = v18;
        *(uint64_t *)((char *)a1 + v10[8]) = *(_QWORD *)(a2 + v10[8]);
        *(uint64_t *)((char *)a1 + v10[9]) = *(_QWORD *)(a2 + v10[9]);
        *(uint64_t *)((char *)a1 + v10[10]) = *(_QWORD *)(a2 + v10[10]);
        *((_BYTE *)a1 + v10[11]) = *(_BYTE *)(a2 + v10[11]);
        *((_BYTE *)a1 + v10[12]) = *(_BYTE *)(a2 + v10[12]);
        v19 = v10[13];
        v20 = *(_QWORD *)(a2 + v19);
        *(uint64_t *)((char *)a1 + v19) = v20;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        v21 = a1;
        v22 = a3;
        v23 = 1;
      }
      else
      {
        sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        *a1 = v8;
        a1[1] = v9;
        v38 = (int *)type metadata accessor for SafeLocation(0);
        v39 = v38[5];
        v40 = (char *)a1 + v39;
        v41 = a2 + v39;
        v42 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v40, v41, v42);
        *((_BYTE *)a1 + v38[6]) = *(_BYTE *)(a2 + v38[6]);
        v43 = v38[7];
        v44 = (uint64_t *)((char *)a1 + v43);
        v45 = (_QWORD *)(a2 + v43);
        v46 = v45[1];
        *v44 = *v45;
        v44[1] = v46;
        *(uint64_t *)((char *)a1 + v38[8]) = *(_QWORD *)(a2 + v38[8]);
        *(uint64_t *)((char *)a1 + v38[9]) = *(_QWORD *)(a2 + v38[9]);
        *(uint64_t *)((char *)a1 + v38[10]) = *(_QWORD *)(a2 + v38[10]);
        *((_BYTE *)a1 + v38[11]) = *(_BYTE *)(a2 + v38[11]);
        *((_BYTE *)a1 + v38[12]) = *(_BYTE *)(a2 + v38[12]);
        v47 = v38[13];
        v48 = *(_QWORD *)(a2 + v47);
        *(uint64_t *)((char *)a1 + v47) = v48;
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v48);
        v49 = sub_10001A9A8(&qword_101113048);
        *((_BYTE *)a1 + *(int *)(v49 + 48)) = *(_BYTE *)(a2 + *(int *)(v49 + 48));
        v21 = a1;
        v22 = a3;
        v23 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v21, v22, v23);
  }
  return a1;
}

uint64_t sub_100AD936C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 2)
  {
    sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v4 = a1 + *(int *)(type metadata accessor for SafeLocation(0) + 20);
    v5 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_100AD9408(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = *a2;
    v9 = a2[1];
    sub_10001BBBC(*a2, v9);
    *a1 = v8;
    a1[1] = v9;
    v10 = (int *)type metadata accessor for SafeLocation(0);
    v11 = v10[5];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    *((_BYTE *)a1 + v10[6]) = *((_BYTE *)a2 + v10[6]);
    v15 = v10[7];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + v10[8]) = *(uint64_t *)((char *)a2 + v10[8]);
    *(uint64_t *)((char *)a1 + v10[9]) = *(uint64_t *)((char *)a2 + v10[9]);
    *(uint64_t *)((char *)a1 + v10[10]) = *(uint64_t *)((char *)a2 + v10[10]);
    *((_BYTE *)a1 + v10[11]) = *((_BYTE *)a2 + v10[11]);
    *((_BYTE *)a1 + v10[12]) = *((_BYTE *)a2 + v10[12]);
    v19 = v10[13];
    v20 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  else
  {
    v21 = *a2;
    v22 = a2[1];
    sub_10001BBBC(*a2, v22);
    *a1 = v21;
    a1[1] = v22;
    v23 = (int *)type metadata accessor for SafeLocation(0);
    v24 = v23[5];
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    v27 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v25, v26, v27);
    *((_BYTE *)a1 + v23[6]) = *((_BYTE *)a2 + v23[6]);
    v28 = v23[7];
    v29 = (uint64_t *)((char *)a1 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    *(uint64_t *)((char *)a1 + v23[8]) = *(uint64_t *)((char *)a2 + v23[8]);
    *(uint64_t *)((char *)a1 + v23[9]) = *(uint64_t *)((char *)a2 + v23[9]);
    *(uint64_t *)((char *)a1 + v23[10]) = *(uint64_t *)((char *)a2 + v23[10]);
    *((_BYTE *)a1 + v23[11]) = *((_BYTE *)a2 + v23[11]);
    *((_BYTE *)a1 + v23[12]) = *((_BYTE *)a2 + v23[12]);
    v32 = v23[13];
    v33 = *(uint64_t *)((char *)a2 + v32);
    *(uint64_t *)((char *)a1 + v32) = v33;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    v34 = sub_10001A9A8(&qword_101113048);
    *((_BYTE *)a1 + *(int *)(v34 + 48)) = *((_BYTE *)a2 + *(int *)(v34 + 48));
  }
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

uint64_t *sub_100AD9614(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (a1 != (uint64_t *)a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v23 = *(_QWORD *)a2;
      v24 = *(_QWORD *)(a2 + 8);
      sub_10001BBBC(*(_QWORD *)a2, v24);
      *a1 = v23;
      a1[1] = v24;
      v25 = (int *)type metadata accessor for SafeLocation(0);
      v26 = v25[5];
      v27 = (char *)a1 + v26;
      v28 = a2 + v26;
      v29 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      *((_BYTE *)a1 + v25[6]) = *(_BYTE *)(a2 + v25[6]);
      v30 = v25[7];
      v31 = (uint64_t *)((char *)a1 + v30);
      v32 = (_QWORD *)(a2 + v30);
      *v31 = *v32;
      v33 = v32[1];
      v31[1] = v33;
      *(uint64_t *)((char *)a1 + v25[8]) = *(_QWORD *)(a2 + v25[8]);
      *(uint64_t *)((char *)a1 + v25[9]) = *(_QWORD *)(a2 + v25[9]);
      *(uint64_t *)((char *)a1 + v25[10]) = *(_QWORD *)(a2 + v25[10]);
      *((_BYTE *)a1 + v25[11]) = *(_BYTE *)(a2 + v25[11]);
      *((_BYTE *)a1 + v25[12]) = *(_BYTE *)(a2 + v25[12]);
      v34 = v25[13];
      v35 = *(_QWORD *)(a2 + v34);
      *(uint64_t *)((char *)a1 + v34) = v35;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v35);
      v20 = a1;
      v21 = a3;
      v22 = 2;
    }
    else
    {
      v7 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      if (EnumCaseMultiPayload == 1)
      {
        sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        *a1 = v7;
        a1[1] = v8;
        v9 = (int *)type metadata accessor for SafeLocation(0);
        v10 = v9[5];
        v11 = (char *)a1 + v10;
        v12 = a2 + v10;
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
        *((_BYTE *)a1 + v9[6]) = *(_BYTE *)(a2 + v9[6]);
        v14 = v9[7];
        v15 = (uint64_t *)((char *)a1 + v14);
        v16 = (_QWORD *)(a2 + v14);
        *v15 = *v16;
        v17 = v16[1];
        v15[1] = v17;
        *(uint64_t *)((char *)a1 + v9[8]) = *(_QWORD *)(a2 + v9[8]);
        *(uint64_t *)((char *)a1 + v9[9]) = *(_QWORD *)(a2 + v9[9]);
        *(uint64_t *)((char *)a1 + v9[10]) = *(_QWORD *)(a2 + v9[10]);
        *((_BYTE *)a1 + v9[11]) = *(_BYTE *)(a2 + v9[11]);
        *((_BYTE *)a1 + v9[12]) = *(_BYTE *)(a2 + v9[12]);
        v18 = v9[13];
        v19 = *(_QWORD *)(a2 + v18);
        *(uint64_t *)((char *)a1 + v18) = v19;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v19);
        v20 = a1;
        v21 = a3;
        v22 = 1;
      }
      else
      {
        sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
        *a1 = v7;
        a1[1] = v8;
        v36 = (int *)type metadata accessor for SafeLocation(0);
        v37 = v36[5];
        v38 = (char *)a1 + v37;
        v39 = a2 + v37;
        v40 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
        *((_BYTE *)a1 + v36[6]) = *(_BYTE *)(a2 + v36[6]);
        v41 = v36[7];
        v42 = (uint64_t *)((char *)a1 + v41);
        v43 = (_QWORD *)(a2 + v41);
        *v42 = *v43;
        v44 = v43[1];
        v42[1] = v44;
        *(uint64_t *)((char *)a1 + v36[8]) = *(_QWORD *)(a2 + v36[8]);
        *(uint64_t *)((char *)a1 + v36[9]) = *(_QWORD *)(a2 + v36[9]);
        *(uint64_t *)((char *)a1 + v36[10]) = *(_QWORD *)(a2 + v36[10]);
        *((_BYTE *)a1 + v36[11]) = *(_BYTE *)(a2 + v36[11]);
        *((_BYTE *)a1 + v36[12]) = *(_BYTE *)(a2 + v36[12]);
        v45 = v36[13];
        v46 = *(_QWORD *)(a2 + v45);
        *(uint64_t *)((char *)a1 + v45) = v46;
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v46);
        v47 = sub_10001A9A8(&qword_101113048);
        *((_BYTE *)a1 + *(int *)(v47 + 48)) = *(_BYTE *)(a2 + *(int *)(v47 + 48));
        v20 = a1;
        v21 = a3;
        v22 = 0;
      }
    }
    swift_storeEnumTagMultiPayload(v20, v21, v22);
  }
  return a1;
}

_OWORD *sub_100AD9920(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = EnumCaseMultiPayload;
  if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    v8 = (int *)type metadata accessor for SafeLocation(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
    *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
    *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
    *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
    *(_QWORD *)((char *)a1 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
    *(_QWORD *)((char *)a1 + v8[10]) = *(_QWORD *)((char *)a2 + v8[10]);
    *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
    *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
    *(_QWORD *)((char *)a1 + v8[13]) = *(_QWORD *)((char *)a2 + v8[13]);
  }
  else
  {
    *a1 = *a2;
    v13 = (int *)type metadata accessor for SafeLocation(0);
    v14 = v13[5];
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    *((_BYTE *)a1 + v13[6]) = *((_BYTE *)a2 + v13[6]);
    *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
    *(_QWORD *)((char *)a1 + v13[8]) = *(_QWORD *)((char *)a2 + v13[8]);
    *(_QWORD *)((char *)a1 + v13[9]) = *(_QWORD *)((char *)a2 + v13[9]);
    *(_QWORD *)((char *)a1 + v13[10]) = *(_QWORD *)((char *)a2 + v13[10]);
    *((_BYTE *)a1 + v13[11]) = *((_BYTE *)a2 + v13[11]);
    *((_BYTE *)a1 + v13[12]) = *((_BYTE *)a2 + v13[12]);
    *(_QWORD *)((char *)a1 + v13[13]) = *(_QWORD *)((char *)a2 + v13[13]);
    v18 = sub_10001A9A8(&qword_101113048);
    *((_BYTE *)a1 + *(int *)(v18 + 48)) = *((_BYTE *)a2 + *(int *)(v18 + 48));
  }
  swift_storeEnumTagMultiPayload(a1, a3, v7);
  return a1;
}

_OWORD *sub_100AD9AEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t EnumCaseMultiPayload;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = EnumCaseMultiPayload;
    if ((_DWORD)EnumCaseMultiPayload == 2 || (_DWORD)EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      v8 = (int *)type metadata accessor for SafeLocation(0);
      v9 = v8[5];
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
      *((_BYTE *)a1 + v8[6]) = *((_BYTE *)a2 + v8[6]);
      *(_OWORD *)((char *)a1 + v8[7]) = *(_OWORD *)((char *)a2 + v8[7]);
      *(_QWORD *)((char *)a1 + v8[8]) = *(_QWORD *)((char *)a2 + v8[8]);
      *(_QWORD *)((char *)a1 + v8[9]) = *(_QWORD *)((char *)a2 + v8[9]);
      *(_QWORD *)((char *)a1 + v8[10]) = *(_QWORD *)((char *)a2 + v8[10]);
      *((_BYTE *)a1 + v8[11]) = *((_BYTE *)a2 + v8[11]);
      *((_BYTE *)a1 + v8[12]) = *((_BYTE *)a2 + v8[12]);
      *(_QWORD *)((char *)a1 + v8[13]) = *(_QWORD *)((char *)a2 + v8[13]);
    }
    else
    {
      *a1 = *a2;
      v13 = (int *)type metadata accessor for SafeLocation(0);
      v14 = v13[5];
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
      *((_BYTE *)a1 + v13[6]) = *((_BYTE *)a2 + v13[6]);
      *(_OWORD *)((char *)a1 + v13[7]) = *(_OWORD *)((char *)a2 + v13[7]);
      *(_QWORD *)((char *)a1 + v13[8]) = *(_QWORD *)((char *)a2 + v13[8]);
      *(_QWORD *)((char *)a1 + v13[9]) = *(_QWORD *)((char *)a2 + v13[9]);
      *(_QWORD *)((char *)a1 + v13[10]) = *(_QWORD *)((char *)a2 + v13[10]);
      *((_BYTE *)a1 + v13[11]) = *((_BYTE *)a2 + v13[11]);
      *((_BYTE *)a1 + v13[12]) = *((_BYTE *)a2 + v13[12]);
      *(_QWORD *)((char *)a1 + v13[13]) = *(_QWORD *)((char *)a2 + v13[13]);
      v18 = sub_10001A9A8(&qword_101113048);
      *((_BYTE *)a1 + *(int *)(v18 + 48)) = *((_BYTE *)a2 + *(int *)(v18 + 48));
    }
    swift_storeEnumTagMultiPayload(a1, a3, v7);
  }
  return a1;
}

uint64_t sub_100AD9CD0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _QWORD v6[3];

  result = type metadata accessor for SafeLocation(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v5, v4, &unk_100E5D158);
    v6[0] = v5;
    v6[1] = v4;
    v6[2] = v4;
    swift_initEnumMetadataMultiPayload(a1, 256, 3, v6);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100AD6B7C(*(id *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

void destroy for LocationOfInterestProvider.Error(uint64_t a1)
{
  sub_100AD6BA4(*(void **)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3;
  char v4;
  void *v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_100AD6B7C(*(id *)a2, v4);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_100AD6BA4(v5, v6);
  return a1;
}

uint64_t assignWithTake for LocationOfInterestProvider.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  void *v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_100AD6BA4(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for LocationOfInterestProvider.Error()
{
  return &type metadata for LocationOfInterestProvider.Error;
}

void destroy for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1)
{
  sub_100AD6BEC(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s12searchpartyd26LocationOfInterestProviderC18LOIRequestResponseOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100AD6BC0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100AD6BC0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100AD6BEC(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  void *v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100AD6BEC(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocationOfInterestProvider.LOIRequestResponse(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)a1 >> 3;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for LocationOfInterestProvider.LOIRequestResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = 8 * -a2;
      *(_QWORD *)(result + 8) = 0;
      *(_BYTE *)(result + 16) = 0;
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100AD9FD4(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;

  v1 = *(unsigned __int8 *)(a1 + 16);
  v2 = (char)v1;
  v3 = v1 >> 6;
  if (v2 >= 0)
    return v3;
  else
    return (*(_DWORD *)a1 & 7 | (8 * *(_DWORD *)(a1 + 8))) + 2;
}

uint64_t sub_100AD9FFC(uint64_t result)
{
  *(_BYTE *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_100ADA00C(uint64_t result, unsigned int a2)
{
  char v2;

  if (a2 < 2)
  {
    v2 = *(_BYTE *)(result + 16) & 3 | ((_BYTE)a2 << 6);
    *(_QWORD *)result &= 7uLL;
    *(_BYTE *)(result + 16) = v2;
  }
  else
  {
    *(_QWORD *)result = ((_BYTE)a2 - 2) & 7;
    *(_QWORD *)(result + 8) = (unint64_t)(a2 - 2) >> 3;
    *(_BYTE *)(result + 16) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationOfInterestProvider.LOIRequestResponse()
{
  return &type metadata for LocationOfInterestProvider.LOIRequestResponse;
}

uint64_t sub_100ADA070@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE v23[24];
  _BYTE v24[24];

  v7 = type metadata accessor for ChangeSetAdaptor();
  v8 = swift_allocObject(v7, 32, 7);
  *(_QWORD *)(v8 + 16) = _swiftEmptyDictionarySingleton;
  v9 = v8 + 16;
  *(_QWORD *)(v8 + 24) = _swiftEmptyDictionarySingleton;
  v10 = (uint64_t *)(v8 + 24);
  v11 = swift_retain();
  sub_10091E404(v11, (uint64_t)&off_1010AA7B0, a1, a2);
  swift_release();
  if (v3)
    return swift_release();
  swift_beginAccess(v9, v24, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v9 + 16))
    goto LABEL_9;
  swift_beginAccess(v10, v22, 0, 0);
  v14 = *v10;
  if ((*v10 & 0xC000000000000001) != 0)
  {
    if (v14 < 0)
      v15 = *v10;
    else
      v15 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v10);
    v16 = __CocoaDictionary.count.getter(v15);
    v13 = swift_bridgeObjectRelease();
    if (v16)
      goto LABEL_9;
  }
  else if (*(_QWORD *)(v14 + 16))
  {
LABEL_9:
    UUID.init()(v13);
    swift_beginAccess(v10, v23, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v8 + 24));
    v18 = sub_100508B70(v17);
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain(v19);
    swift_release();
    v20 = type metadata accessor for CloudKitChangeSet(0);
    *(_QWORD *)(a3 + *(int *)(v20 + 20)) = v18;
    *(_QWORD *)(a3 + *(int *)(v20 + 24)) = v19;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 0, 1, v20);
  }
  swift_release();
  v21 = type metadata accessor for CloudKitChangeSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a3, 1, 1, v21);
}

uint64_t sub_100ADA240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  uint64_t v31;

  v13 = type metadata accessor for ChangeSetAdaptor();
  v14 = swift_allocObject(v13, 32, 7);
  *(_QWORD *)(v14 + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v14 + 24) = _swiftEmptyDictionarySingleton;
  v15 = (uint64_t *)(v14 + 24);
  v16 = swift_retain();
  sub_100065F20(v16, (uint64_t)&off_1010AA7B0, a1, a2, a3, a4, a5, a6);
  if (v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n(v14, 2);
  }
  v31 = a1;
  swift_release();
  swift_beginAccess(v14 + 16, v30, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v14 + 16) + 16))
    goto LABEL_9;
  swift_beginAccess(v15, v28, 0, 0);
  v19 = *v15;
  if ((*v15 & 0xC000000000000001) != 0)
  {
    if (v19 < 0)
      v20 = *v15;
    else
      v20 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v15);
    v26 = __CocoaDictionary.count.getter(v20);
    v18 = swift_bridgeObjectRelease();
    if (v26)
      goto LABEL_9;
LABEL_13:
    swift_release();
    v25 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a7, 1, 1, v25);
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v19 + 16))
    goto LABEL_13;
LABEL_9:
  UUID.init()(v18);
  swift_beginAccess(v15, v29, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v14 + 24));
  v22 = sub_100508B70(v21);
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRetain(v23);
  swift_release();
  v24 = type metadata accessor for CloudKitChangeSet(0);
  *(_QWORD *)(a7 + *(int *)(v24 + 20)) = v22;
  *(_QWORD *)(a7 + *(int *)(v24 + 24)) = v23;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a7, 0, 1, v24);
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ADA4D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  uint64_t v27;

  v11 = type metadata accessor for ChangeSetAdaptor();
  v12 = swift_allocObject(v11, 32, 7);
  *(_QWORD *)(v12 + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v12 + 24) = _swiftEmptyDictionarySingleton;
  v13 = (uint64_t *)(v12 + 24);
  v14 = swift_retain();
  sub_100066440(v14, (uint64_t)&off_1010AA7B0, a1, a2, a3, a4);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n(v12, 2);
  }
  swift_release();
  swift_beginAccess(v12 + 16, v26, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v12 + 16) + 16))
    goto LABEL_9;
  swift_beginAccess(v13, v24, 0, 0);
  v17 = *v13;
  if ((*v13 & 0xC000000000000001) != 0)
  {
    if (v17 < 0)
      v18 = *v13;
    else
      v18 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v13);
    v27 = __CocoaDictionary.count.getter(v18);
    v16 = swift_bridgeObjectRelease();
    if (v27)
      goto LABEL_9;
LABEL_12:
    swift_release();
    v23 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a5, 1, 1, v23);
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v17 + 16))
    goto LABEL_12;
LABEL_9:
  UUID.init()(v16);
  swift_beginAccess(v13, v25, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v12 + 24));
  v20 = sub_100508B70(v19);
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain(v21);
  swift_release();
  v22 = type metadata accessor for CloudKitChangeSet(0);
  *(_QWORD *)(a5 + *(int *)(v22 + 20)) = v20;
  *(_QWORD *)(a5 + *(int *)(v22 + 24)) = v21;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a5, 0, 1, v22);
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ADA708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  return sub_100ADA724(a1, a2, a3, a4, a5, (void (*)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100B8491C, a6);
}

uint64_t sub_100ADA724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD)@<X4>, void (*a6)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  void (*v31)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);

  v31 = a6;
  v13 = type metadata accessor for ChangeSetAdaptor();
  v14 = swift_allocObject(v13, 32, 7);
  *(_QWORD *)(v14 + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v14 + 24) = _swiftEmptyDictionarySingleton;
  v15 = (uint64_t *)(v14 + 24);
  v16 = swift_retain();
  v31(v16, &off_1010AA7B0, a1, a2, a3, a4, a5);
  if (v7)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n(v14, 2);
  }
  v31 = a5;
  swift_release();
  swift_beginAccess(v14 + 16, v30, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v14 + 16) + 16))
    goto LABEL_9;
  swift_beginAccess(v15, v28, 0, 0);
  v19 = *v15;
  if ((*v15 & 0xC000000000000001) != 0)
  {
    if (v19 < 0)
      v20 = *v15;
    else
      v20 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v15);
    v21 = __CocoaDictionary.count.getter(v20);
    v18 = swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_9;
LABEL_12:
    swift_release();
    v26 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a7, 1, 1, v26);
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v19 + 16))
    goto LABEL_12;
LABEL_9:
  UUID.init()(v18);
  swift_beginAccess(v15, v29, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v14 + 24));
  v23 = sub_100508B70(v22);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v14 + 16);
  swift_bridgeObjectRetain(v24);
  swift_release();
  v25 = type metadata accessor for CloudKitChangeSet(0);
  *(_QWORD *)(a7 + *(int *)(v25 + 20)) = v23;
  *(_QWORD *)(a7 + *(int *)(v25 + 24)) = v24;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a7, 0, 1, v25);
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ADA990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];

  v7 = type metadata accessor for ChangeSetAdaptor();
  v8 = swift_allocObject(v7, 32, 7);
  *(_QWORD *)(v8 + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v8 + 24) = _swiftEmptyDictionarySingleton;
  v9 = (uint64_t *)(v8 + 24);
  v10 = swift_retain();
  sub_100DAB1E0(v10, (uint64_t)&off_1010AA7B0, a1, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n(v8, 2);
  }
  swift_release();
  swift_beginAccess(v8 + 16, v23, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v8 + 16) + 16))
    goto LABEL_9;
  swift_beginAccess(v9, v21, 0, 0);
  v13 = *v9;
  if ((*v9 & 0xC000000000000001) != 0)
  {
    if (v13 < 0)
      v14 = *v9;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v9);
    v15 = __CocoaDictionary.count.getter(v14);
    v12 = swift_bridgeObjectRelease();
    if (v15)
      goto LABEL_9;
LABEL_12:
    swift_release();
    v20 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 1, 1, v20);
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_12;
LABEL_9:
  UUID.init()(v12);
  swift_beginAccess(v9, v22, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v8 + 24));
  v17 = sub_100508B70(v16);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain(v18);
  swift_release();
  v19 = type metadata accessor for CloudKitChangeSet(0);
  *(_QWORD *)(a3 + *(int *)(v19 + 20)) = v17;
  *(_QWORD *)(a3 + *(int *)(v19 + 24)) = v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a3, 0, 1, v19);
LABEL_10:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ADAB84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  return sub_100ADA724(a1, a2, a3, a4, a5, (void (*)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_100DAB754, a6);
}

uint64_t sub_100ADABA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];
  _BYTE v23[24];

  v7 = type metadata accessor for ChangeSetAdaptor();
  v8 = swift_allocObject(v7, 32, 7);
  *(_QWORD *)(v8 + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v8 + 24) = _swiftEmptyDictionarySingleton;
  v9 = (uint64_t *)(v8 + 24);
  v10 = swift_retain();
  sub_100DA44CC(v10, (uint64_t)&off_1010AA7B0, a1, a2);
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release_n(v8, 2);
  }
  swift_release();
  swift_beginAccess(v8 + 16, v23, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v8 + 16) + 16))
    goto LABEL_9;
  swift_beginAccess(v9, v21, 0, 0);
  v13 = *v9;
  if ((*v9 & 0xC000000000000001) != 0)
  {
    if (v13 < 0)
      v14 = *v9;
    else
      v14 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v9);
    v15 = __CocoaDictionary.count.getter(v14);
    v12 = swift_bridgeObjectRelease();
    if (v15)
      goto LABEL_9;
LABEL_12:
    swift_release();
    v20 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 1, 1, v20);
    goto LABEL_10;
  }
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_12;
LABEL_9:
  UUID.init()(v12);
  swift_beginAccess(v9, v22, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v8 + 24));
  v17 = sub_100508B70(v16);
  swift_bridgeObjectRelease();
  v18 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain(v18);
  swift_release();
  v19 = type metadata accessor for CloudKitChangeSet(0);
  *(_QWORD *)(a3 + *(int *)(v19 + 20)) = v17;
  *(_QWORD *)(a3 + *(int *)(v19 + 24)) = v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a3, 0, 1, v19);
LABEL_10:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ADAD94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t inited;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[32];
  uint64_t v34;

  v7 = type metadata accessor for ChangeSetAdaptor();
  inited = swift_initStackObject(v7, v33);
  *(_QWORD *)(inited + 16) = _swiftEmptyDictionarySingleton;
  v9 = (uint64_t *)(inited + 16);
  *(_QWORD *)(inited + 24) = _swiftEmptyDictionarySingleton;
  v10 = (uint64_t *)(inited + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v34 = a3;
  if (v11)
  {
    v12 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_retain();
    do
    {
      sub_100ADF74C(v13);
      if (v3)
      {
        swift_release_n(inited, 2);
        goto LABEL_22;
      }
      v13 += v14;
      --v11;
    }
    while (v11);
    v15 = *(_QWORD *)(a2 + 16);
    if (!v15)
      goto LABEL_11;
    goto LABEL_6;
  }
  swift_retain();
  v15 = *(_QWORD *)(a2 + 16);
  if (!v15)
  {
LABEL_11:
    swift_release();
LABEL_12:
    swift_beginAccess(v9, v32, 0, 0);
    v20 = *v9;
    v21 = v34;
    if (*(_QWORD *)(v20 + 16))
      goto LABEL_18;
    swift_beginAccess(v10, v30, 0, 0);
    v22 = *v10;
    if ((*v10 & 0xC000000000000001) != 0)
    {
      if (v22 < 0)
        v23 = *v10;
      else
        v23 = v22 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v10);
      v24 = __CocoaDictionary.count.getter(v23);
      v19 = swift_bridgeObjectRelease();
      if (v24)
        goto LABEL_18;
    }
    else if (*(_QWORD *)(v22 + 16))
    {
LABEL_18:
      UUID.init()(v19);
      swift_beginAccess(v10, v31, 0, 0);
      swift_bridgeObjectRetain(*(_QWORD *)(inited + 24));
      v26 = sub_100508B70(v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v20);
      swift_release();
      v27 = type metadata accessor for CloudKitChangeSet(0);
      *(_QWORD *)(v21 + *(int *)(v27 + 20)) = v26;
      *(_QWORD *)(v21 + *(int *)(v27 + 24)) = v20;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 0, 1, v27);
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    v29 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v21, 1, 1, v29);
    goto LABEL_19;
  }
LABEL_6:
  v16 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
  v17 = a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v18 = *(_QWORD *)(v16 + 72);
  swift_bridgeObjectRetain(a2);
  while (1)
  {
    sub_100ADECF8(v17);
    if (v3)
      break;
    v17 += v18;
    if (!--v15)
    {
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  swift_release_n(inited, 2);
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ADB044@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t inited;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[32];
  uint64_t v34;

  v7 = type metadata accessor for ChangeSetAdaptor();
  inited = swift_initStackObject(v7, v33);
  *(_QWORD *)(inited + 16) = _swiftEmptyDictionarySingleton;
  v9 = (uint64_t *)(inited + 16);
  *(_QWORD *)(inited + 24) = _swiftEmptyDictionarySingleton;
  v10 = (uint64_t *)(inited + 24);
  v11 = *(_QWORD *)(a1 + 16);
  v34 = a3;
  if (v11)
  {
    v12 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_retain();
    while (1)
    {
      sub_100ADF74C(v13);
      if (v3)
        break;
      v13 += v14;
      if (!--v11)
        goto LABEL_7;
    }
    swift_release_n(inited, 2);
    goto LABEL_23;
  }
  swift_retain();
LABEL_7:
  v15 = *(_QWORD *)(a2 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v17 = a2 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v18 = *(_QWORD *)(v16 + 72);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_100ADC81C(v17);
      if (v3)
        break;
      v17 += v18;
      if (!--v15)
      {
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    swift_release_n(inited, 2);
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_release();
LABEL_14:
  swift_beginAccess(v9, v32, 0, 0);
  v20 = *v9;
  v21 = v34;
  if (*(_QWORD *)(v20 + 16))
    goto LABEL_20;
  swift_beginAccess(v10, v30, 0, 0);
  v22 = *v10;
  if ((*v10 & 0xC000000000000001) != 0)
  {
    if (v22 < 0)
      v23 = *v10;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v10);
    v24 = __CocoaDictionary.count.getter(v23);
    v19 = swift_bridgeObjectRelease();
    if (v24)
      goto LABEL_20;
LABEL_26:
    swift_release();
    v29 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v21, 1, 1, v29);
    goto LABEL_21;
  }
  if (!*(_QWORD *)(v22 + 16))
    goto LABEL_26;
LABEL_20:
  UUID.init()(v19);
  swift_beginAccess(v10, v31, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(inited + 24));
  v26 = sub_100508B70(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v20);
  swift_release();
  v27 = type metadata accessor for CloudKitChangeSet(0);
  *(_QWORD *)(v21 + *(int *)(v27 + 20)) = v26;
  *(_QWORD *)(v21 + *(int *)(v27 + 24)) = v20;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v21, 0, 1, v27);
LABEL_21:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100ADB304@<X0>(void (*a1)(uint64_t, _UNKNOWN **)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];

  v5 = type metadata accessor for ChangeSetAdaptor();
  v6 = swift_allocObject(v5, 32, 7);
  *(_QWORD *)(v6 + 16) = _swiftEmptyDictionarySingleton;
  v7 = v6 + 16;
  *(_QWORD *)(v6 + 24) = _swiftEmptyDictionarySingleton;
  v8 = (uint64_t *)(v6 + 24);
  v9 = swift_retain();
  a1(v9, &off_1010AA7B0);
  swift_release();
  if (v2)
    return swift_release();
  swift_beginAccess(v7, v22, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v7 + 16))
    goto LABEL_9;
  swift_beginAccess(v8, v20, 0, 0);
  v12 = *v8;
  if ((*v8 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v8;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v8);
    v14 = __CocoaDictionary.count.getter(v13);
    v11 = swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_9;
  }
  else if (*(_QWORD *)(v12 + 16))
  {
LABEL_9:
    UUID.init()(v11);
    swift_beginAccess(v8, v21, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v6 + 24));
    v16 = sub_100508B70(v15);
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain(v17);
    swift_release();
    v18 = type metadata accessor for CloudKitChangeSet(0);
    *(_QWORD *)(a2 + *(int *)(v18 + 20)) = v16;
    *(_QWORD *)(a2 + *(int *)(v18 + 24)) = v17;
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 0, 1, v18);
  }
  swift_release();
  v19 = type metadata accessor for CloudKitChangeSet(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
}

uint64_t sub_100ADB4CC(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  id v13;
  uint64_t ObjectType;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  void *v50;

  v3 = v2;
  v6 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for OwnerPeerTrust(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v11, v12);
  v13 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v13);
  v15 = v9[6];
  v16 = *(unsigned __int8 *)(v3 + v15);
  v17 = v11[v15];
  if (v16 != (_DWORD)v17)
  {
    v49 = &type metadata for Int;
    v50 = &protocol witness table for Int;
    v47 = v17;
    CKRecordKeyValueSetting.subscript.setter(&v47, 0x7375725472656570, 0xED00006570795474, ObjectType);
  }
  sub_10005972C(v3 + v9[7], (uint64_t)v8, type metadata accessor for PeerCommunicationIdentifier);
  v18 = (uint64_t)&v11[v9[7]];
  sub_10072AC1C((uint64_t)v8, v18);
  v20 = v19;
  sub_1000126B0((uint64_t)v8, type metadata accessor for PeerCommunicationIdentifier);
  if ((v20 & 1) == 0)
  {
    v21 = type metadata accessor for PropertyListEncoder(0);
    v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    PropertyListEncoder.init()(v22);
    v23 = sub_100006204(&qword_1010F29B8, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C0B0);
    v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v18, v6, v23);
    v26 = v25;
    swift_release();
    v49 = &type metadata for Data;
    v50 = &protocol witness table for Data;
    v47 = v24;
    v48 = v26;
    CKRecordKeyValueSetting.subscript.setter(&v47, 0xD000000000000018, 0x8000000100ECB8B0, ObjectType);
  }
  v27 = v9[8];
  v28 = *(_QWORD *)(v3 + v27);
  v29 = *(_QWORD *)(v3 + v27 + 8);
  v30 = &v11[v27];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  v33 = v28 == *(_QWORD *)v30 && v29 == v31;
  if (!v33
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, *(_QWORD *)v30, *((_QWORD *)v30 + 1), 0) & 1) == 0)
  {
    v49 = &type metadata for String;
    v50 = &protocol witness table for String;
    v47 = v32;
    v48 = v31;
    swift_bridgeObjectRetain(v31);
    CKRecordKeyValueSetting.subscript.setter(&v47, 0xD000000000000011, 0x8000000100ECB8D0, ObjectType);
  }
  v34 = v9[9];
  v35 = *(_QWORD *)(v3 + v34);
  v36 = *(_QWORD *)(v3 + v34 + 8);
  v37 = (uint64_t *)&v11[v34];
  v38 = *v37;
  v39 = v37[1];
  sub_10001BBBC(v35, v36);
  sub_10001BBBC(v38, v39);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v35, v36);
  v41 = v40;
  sub_10001BC14(v38, v39);
  sub_10001BC14(v35, v36);
  if ((v41 & 1) == 0)
  {
    v49 = &type metadata for Data;
    v50 = &protocol witness table for Data;
    v47 = v38;
    v48 = v39;
    sub_10001BBBC(v38, v39);
    CKRecordKeyValueSetting.subscript.setter(&v47, 0xD000000000000015, 0x8000000100ECB8F0, ObjectType);
  }
  v42 = v9[10];
  v43 = *(unsigned __int8 *)(v3 + v42);
  v44 = v11[v42];
  if (v43 == (_DWORD)v44)
  {
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnerPeerTrust);
    return swift_unknownObjectRelease(v13);
  }
  else
  {
    v49 = &type metadata for Int;
    v50 = &protocol witness table for Int;
    v47 = v44;
    CKRecordKeyValueSetting.subscript.setter(&v47, 0x6574617473, 0xE500000000000000, ObjectType);
    swift_unknownObjectRelease(v13);
    return sub_1000126B0((uint64_t)v11, type metadata accessor for OwnerPeerTrust);
  }
}

uint64_t sub_100ADB8D8(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  uint64_t ObjectType;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  Class isa;
  NSString v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v11, v12);
  v52 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v52);
  v50 = v2;
  v51 = ObjectType;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v14(v8, v2 + v9[6], v5);
  v15 = (uint64_t)v11;
  v16 = &v11[v9[6]];
  v17 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v16, v5, v17);
  v19 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v20 = v19(v8, v5);
  if ((v18 & 1) == 0)
  {
    v21 = UUID.uuidString.getter(v20);
    v55 = &type metadata for String;
    v56 = &protocol witness table for String;
    v53 = v21;
    v54 = v22;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0xD000000000000010, 0x8000000100EC28D0, v51);
  }
  v23 = v50;
  v14(v8, v50 + v9[7], v5);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v15 + v9[7], v5, v17);
  v25 = v19(v8, v5);
  if ((v24 & 1) == 0)
  {
    v26 = UUID.uuidString.getter(v25);
    v55 = &type metadata for String;
    v56 = &protocol witness table for String;
    v53 = v26;
    v54 = v27;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0xD000000000000017, 0x8000000100ECBB00, v51);
  }
  v14(v8, v23 + v9[8], v5);
  v28 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v15 + v9[8], v5, v17);
  v29 = v19(v8, v5);
  if ((v28 & 1) == 0)
  {
    v30 = UUID.uuidString.getter(v29);
    v55 = &type metadata for String;
    v56 = &protocol witness table for String;
    v53 = v30;
    v54 = v31;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x72656E776FLL, 0xE500000000000000, v51);
  }
  v32 = v9[9];
  v33 = *(_QWORD *)(v23 + v32);
  v34 = *(_QWORD *)(v15 + v32);
  swift_bridgeObjectRetain(v34);
  LOBYTE(v33) = sub_100326820(v33, v34);
  swift_bridgeObjectRelease();
  if ((v33 & 1) == 0)
  {
    v35 = type metadata accessor for PropertyListEncoder(0);
    v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
    PropertyListEncoder.init()(v36);
    v53 = v34;
    swift_bridgeObjectRetain(v34);
    v37 = sub_10001A9A8(&qword_1010F3040);
    v38 = sub_100AE1014((unint64_t *)&qword_1010F3048, &qword_1010F3040, (uint64_t (*)(void))sub_1002008E4);
    v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v53, v37, v38);
    v41 = v40;
    swift_release();
    swift_bridgeObjectRelease();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v43 = String._bridgeToObjectiveC()();
    objc_msgSend(v52, "setObject:forKeyedSubscript:", isa, v43);

    sub_10001BC14(v39, v41);
  }
  v44 = v9[10];
  v45 = *(unsigned __int8 *)(v23 + v44);
  v46 = *(unsigned __int8 *)(v15 + v44);
  if (v45 == (_DWORD)v46)
  {
    sub_1000126B0(v15, type metadata accessor for MemberSharingCircle);
    return swift_unknownObjectRelease(v52);
  }
  else
  {
    v55 = &type metadata for Int;
    v56 = &protocol witness table for Int;
    v53 = v46;
    v48 = v52;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x6E61747065636361, 0xEF65746174536563, v51);
    swift_unknownObjectRelease(v48);
    return sub_1000126B0(v15, type metadata accessor for MemberSharingCircle);
  }
}

unint64_t sub_100ADBE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  v1 = v0;
  _StringGuts.grow(_:)(43);
  v2 = swift_bridgeObjectRelease();
  v3._countAndFlagsBits = UUID.uuidString.getter(v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x203A65766173203ALL;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  v5 = type metadata accessor for CloudKitChangeSet(0);
  v6 = *(_QWORD *)(v0 + *(int *)(v5 + 20));
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v12 = *(_QWORD *)(v1 + *(int *)(v5 + 20));
    else
      v12 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(v5 + 20)));
    _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease();
  }
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3A6574656C656420;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0xD000000000000013;
}

uint64_t sub_100ADBFA8(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  id v14;
  uint64_t ObjectType;
  char *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Class isa;
  NSString v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD v42[3];
  void *v43;
  void *v44;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v42[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v12, v13);
  v14 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  v16 = &v12[v10[6]];
  v17 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v16, v6, v17);
  v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v18 & 1) == 0)
  {
    v20 = UUID.uuidString.getter(v19);
    v43 = &type metadata for String;
    v44 = &protocol witness table for String;
    v42[0] = v20;
    v42[1] = v21;
    CKRecordKeyValueSetting.subscript.setter(v42, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  }
  v22 = v10[8];
  v23 = *(_QWORD *)(v3 + v22);
  v24 = *(_QWORD *)&v12[v22];
  swift_bridgeObjectRetain(v24);
  LOBYTE(v23) = sub_100326834(v23, v24);
  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    v25 = type metadata accessor for PropertyListEncoder(0);
    v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    PropertyListEncoder.init()(v26);
    v42[0] = v24;
    swift_bridgeObjectRetain(v24);
    v27 = sub_10001A9A8(&qword_101110318);
    v28 = sub_100AE1014((unint64_t *)&qword_101110338, &qword_101110318, (uint64_t (*)(void))sub_100A30364);
    v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v42, v27, v28);
    v31 = v30;
    swift_release();
    swift_bridgeObjectRelease();
    isa = Data._bridgeToObjectiveC()().super.isa;
    v33 = String._bridgeToObjectiveC()();
    objc_msgSend(v14, "setObject:forKeyedSubscript:", isa, v33);

    sub_10001BC14(v29, v31);
  }
  v34 = v10[9];
  v35 = *(unsigned __int8 *)(v3 + v34);
  v36 = v12[v34];
  if (v35 != (_DWORD)v36)
  {
    v43 = &type metadata for Int;
    v44 = &protocol witness table for Int;
    v42[0] = v36;
    CKRecordKeyValueSetting.subscript.setter(v42, 0x6E61747065636361, 0xEF65746174536563, ObjectType);
  }
  v37 = v10[7];
  v38 = *(unsigned __int8 *)(v3 + v37);
  v39 = v12[v37];
  if (v38 == (_DWORD)v39)
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnerSharingCircle);
    return swift_unknownObjectRelease(v14);
  }
  else
  {
    v43 = &type metadata for Int;
    v44 = &protocol witness table for Int;
    v42[0] = v39;
    CKRecordKeyValueSetting.subscript.setter(v42, 0xD000000000000011, 0x8000000100EEC620, ObjectType);
    swift_unknownObjectRelease(v14);
    return sub_1000126B0((uint64_t)v12, type metadata accessor for OwnerSharingCircle);
  }
}

uint64_t sub_100ADC424(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  id v13;
  uint64_t ObjectType;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  void *v48;

  v3 = v2;
  v6 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for MemberPeerTrust(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v11, v12);
  v13 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v13);
  v15 = v9[6];
  v16 = *(unsigned __int8 *)(v3 + v15);
  v17 = v11[v15];
  if (v16 != (_DWORD)v17)
  {
    v47 = &type metadata for Int;
    v48 = &protocol witness table for Int;
    v45 = v17;
    CKRecordKeyValueSetting.subscript.setter(&v45, 0x7375725472656570, 0xED00006570795474, ObjectType);
  }
  sub_10005972C(v3 + v9[7], (uint64_t)v8, type metadata accessor for PeerCommunicationIdentifier);
  v18 = (uint64_t)&v11[v9[7]];
  sub_10072AC1C((uint64_t)v8, v18);
  v20 = v19;
  sub_1000126B0((uint64_t)v8, type metadata accessor for PeerCommunicationIdentifier);
  if ((v20 & 1) == 0)
  {
    v21 = type metadata accessor for PropertyListEncoder(0);
    v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    PropertyListEncoder.init()(v22);
    v23 = sub_100006204(&qword_1010F29B8, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C0B0);
    v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v18, v6, v23);
    v26 = v25;
    swift_release();
    v47 = &type metadata for Data;
    v48 = &protocol witness table for Data;
    v45 = v24;
    v46 = v26;
    CKRecordKeyValueSetting.subscript.setter(&v45, 0xD000000000000018, 0x8000000100ECB8B0, ObjectType);
  }
  v27 = v9[8];
  v28 = *(_QWORD *)(v3 + v27);
  v29 = *(_QWORD *)(v3 + v27 + 8);
  v30 = &v11[v27];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  v33 = v28 == *(_QWORD *)v30 && v29 == v31;
  if (!v33
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, *(_QWORD *)v30, *((_QWORD *)v30 + 1), 0) & 1) == 0)
  {
    v47 = &type metadata for String;
    v48 = &protocol witness table for String;
    v45 = v32;
    v46 = v31;
    swift_bridgeObjectRetain(v31);
    CKRecordKeyValueSetting.subscript.setter(&v45, 0xD000000000000011, 0x8000000100ECB8D0, ObjectType);
  }
  v34 = v9[9];
  v35 = v3 + v34;
  v36 = *(_QWORD *)(v3 + v34);
  v37 = *(_QWORD *)(v35 + 8);
  v38 = (uint64_t *)&v11[v34];
  v39 = *v38;
  v40 = v38[1];
  sub_10001BBBC(v36, v37);
  sub_10001BBBC(v39, v40);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v36, v37);
  v42 = v41;
  sub_10001BC14(v39, v40);
  sub_10001BC14(v36, v37);
  if ((v42 & 1) != 0)
  {
    sub_1000126B0((uint64_t)v11, type metadata accessor for MemberPeerTrust);
    return swift_unknownObjectRelease(v13);
  }
  else
  {
    v47 = &type metadata for Data;
    v48 = &protocol witness table for Data;
    v45 = v39;
    v46 = v40;
    sub_10001BBBC(v39, v40);
    CKRecordKeyValueSetting.subscript.setter(&v45, 0xD000000000000015, 0x8000000100ECB8F0, ObjectType);
    swift_unknownObjectRelease(v13);
    return sub_1000126B0((uint64_t)v11, type metadata accessor for MemberPeerTrust);
  }
}

void sub_100ADC7E4(uint64_t a1)
{
  sub_100ADC81C(a1);
}

void sub_100ADC800(uint64_t a1)
{
  sub_100ADC81C(a1);
}

void sub_100ADC81C(uint64_t a1)
{
  __asm { BR              X12 }
}

void sub_100ADCACC(uint64_t a1)
{
  sub_100ADC81C(a1);
}

void sub_100ADCAE8(uint64_t a1)
{
  sub_100ADC81C(a1);
}

void sub_100ADCB04(uint64_t a1)
{
  sub_100ADC81C(a1);
}

void sub_100ADCB20(uint64_t a1)
{
  sub_100ADC81C(a1);
}

void sub_100ADCB3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100ADD0AC(uint64_t a1)
{
  sub_100ADD0F4(a1);
}

void sub_100ADD0D0(uint64_t a1)
{
  sub_100ADD0F4(a1);
}

void sub_100ADD0F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100ADD6B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100ADDC30(uint64_t a1)
{
  sub_100ADDC4C(a1);
}

void sub_100ADDC4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100ADE1D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8(&qword_1010EC868);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for MemberPeerTrust(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100ADE788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for OwnerPeerTrust(0);
  __chkstk_darwin(v3);
  __asm { BR              X12 }
}

void sub_100ADECF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v2);
  __asm { BR              X12 }
}

void sub_100ADF07C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v2);
  __asm { BR              X12 }
}

void sub_100ADF3E4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v2);
  __asm { BR              X12 }
}

void sub_100ADF74C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v2);
  __asm { BR              X12 }
}

void sub_100ADFAB4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v2);
  __asm { BR              X12 }
}

void sub_100ADFDFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v2);
  __asm { BR              X12 }
}

void sub_100AE0164(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v2);
  __asm { BR              X12 }
}

void sub_100AE04CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_10001A9A8(&qword_1010EF188);
  __chkstk_darwin(v5);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  __asm { BR              X10 }
}

void sub_100AE0570()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void *v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  id v29;
  void *v30;

  *(_QWORD *)(v7 - 72) = v0;
  sub_10001BC14(v1, v5);
  if ((v5 & 0xFF000000000000) == 0)
  {
    v13 = sub_100986594();
    v14 = swift_allocError(&type metadata for CloudKitChangeSet.Error, v13, 0, 0);
    *v15 = 3;
    swift_willThrow(v14);
    return;
  }
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v3, v4);
  *(_QWORD *)(v7 - 160) = v8;
  v9 = objc_msgSend(v8, "recordID");
  swift_beginAccess(v6 + 24, v7 - 104, 0, 0);
  v10 = *(_QWORD *)(v6 + 24);
  if ((v10 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v6 + 24));
    v11 = v9;
    v12 = ((uint64_t (*)(void))__CocoaDictionary.contains(_:))();
    swift_bridgeObjectRelease();

    if ((v12 & 1) != 0)
    {
LABEL_10:
      v21 = sub_100986594();
      v22 = v9;
      v23 = swift_allocError(&type metadata for CloudKitChangeSet.Error, v21, 0, 0);
      *v24 = 4;
      swift_willThrow(v23);

      return;
    }
  }
  else if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v6 + 24));
    sub_100518FA4((uint64_t)v9);
    v17 = v16;
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_10;
  }
  v18 = v6 + 16;
  swift_beginAccess(v6 + 16, v7 - 128, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v6 + 16) + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v6 + 16));
    sub_100518FA4((uint64_t)v9);
    v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) != 0)
      goto LABEL_10;
  }
  v25 = *(_QWORD *)(v4 + 8);
  v26 = v9;
  v27 = *(void (**)(uint64_t, uint64_t))(v25 + 32);
  v28 = type metadata accessor for CloudKitChangeSet.TombstoneInfo(0);
  *(_QWORD *)(v7 - 168) = v26;
  v29 = *(id *)(v7 - 160);
  v27(v3, v25);
  (*(void (**)(uint64_t, uint64_t))(v25 + 40))(v3, v25);
  *v2 = v29;
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v2, 0, 1, v28);
  swift_beginAccess(v18, v7 - 152, 33, 0);
  v30 = *(void **)(v7 - 168);
  sub_1000FEA10((uint64_t)v2, v30);
  swift_endAccess(v7 - 152);

}

uint64_t type metadata accessor for ChangeSetAdaptor()
{
  return objc_opt_self(_TtC12searchpartydP33_28A5EF28FACF46A4FC556D76B1E95A0616ChangeSetAdaptor);
}

uint64_t sub_100AE0858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AE0864);
}

uint64_t sub_100AE0864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100AE08E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AE08EC);
}

uint64_t sub_100AE08EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CloudKitChangeSet(uint64_t a1)
{
  return sub_10001B630(a1, qword_101113468, (uint64_t)&nominal type descriptor for CloudKitChangeSet);
}

void **sub_100AE0978(void **a1, void **a2, uint64_t a3)
{
  int v3;
  char *v4;
  void **v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v4;
    v12(v9, v10, v11);
    v14 = *(int *)(a3 + 24);
    v15 = (char *)v7 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  }
  return v7;
}

uint64_t sub_100AE0A48(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
}

void **sub_100AE0ABC(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  id v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a2;
  *a1 = *a2;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  return a1;
}

void **sub_100AE0B64(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  v13 = *(int *)(a3 + 24);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

_QWORD *sub_100AE0C08(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

void **sub_100AE0CA0(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 24);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_100AE0D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AE0D4C);
}

uint64_t sub_100AE0D4C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_100AE0DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AE0DF8);
}

char *sub_100AE0DF8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for URL(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for CloudKitChangeSet.TombstoneInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_101113500, (uint64_t)&nominal type descriptor for CloudKitChangeSet.TombstoneInfo);
}

uint64_t sub_100AE0EA8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100AE0F3C(uint64_t a1, uint64_t a2)
{
  return sub_100AE0F64(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10010A2B0, sub_100BD15AC);
}

uint64_t sub_100AE0F50(uint64_t a1, uint64_t a2)
{
  return sub_100AE0F64(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10010D128, sub_100BD17FC);
}

uint64_t sub_100AE0F64(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t result;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v6 = v4;
  v9 = *v4;
  if ((*v4 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v9 < 0)
    v11 = *v4;
  else
    v11 = v9 & 0xFFFFFFFFFFFFFF8;
  result = __CocoaDictionary.count.getter(v11);
  if (!__OFADD__(result, 1))
  {
    v9 = a4(v11, result + 1);
    *v6 = v9;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    v15 = *v6;
    *v6 = 0x8000000000000000;
    a3(a1, a2, isUniquelyReferenced_nonNull_native);
    v14 = *v6;
    *v6 = v15;
    return swift_bridgeObjectRelease(v14);
  }
  __break(1u);
  return result;
}

uint64_t sub_100AE1014(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    v7[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v7[1] = a3();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CloudKitChangeSet.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100AE10E4 + 4 * byte_100E5D205[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100AE1118 + 4 * byte_100E5D200[v4]))();
}

uint64_t sub_100AE1118(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AE1120(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AE1128);
  return result;
}

uint64_t sub_100AE1134(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AE113CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100AE1140(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AE1148(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudKitChangeSet.Error()
{
  return &type metadata for CloudKitChangeSet.Error;
}

unint64_t sub_100AE1168()
{
  unint64_t result;

  result = qword_101113540;
  if (!qword_101113540)
  {
    result = swift_getWitnessTable(byte_100E5D2D8, &type metadata for CloudKitChangeSet.Error);
    atomic_store(result, (unint64_t *)&qword_101113540);
  }
  return result;
}

uint64_t sub_100AE11AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[65] = a3;
  v3[63] = a1;
  v3[64] = a2;
  v4 = type metadata accessor for UUID(0);
  v3[66] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[67] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[68] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[69] = swift_task_alloc(v7);
  v3[70] = swift_task_alloc(v7);
  return swift_task_switch(sub_100AE1224, 0, 0);
}

uint64_t sub_100AE1224()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[65];
  v2 = v0[63];
  v3 = v0[64];
  v4 = type metadata accessor for OwnerSharingCircle(0);
  v0[71] = v4;
  v5 = *(_QWORD *)(v2 + *(int *)(v4 + 32));
  v0[72] = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain(v5);
  v7 = sub_100AE24B8(v6);
  swift_bridgeObjectRelease();
  v0[73] = *(_QWORD *)(v7 + 16);
  swift_release();
  v0[62] = v5;
  v8 = swift_task_alloc(32);
  v0[74] = v8;
  *(_QWORD *)(v8 + 16) = v3;
  *(_QWORD *)(v8 + 24) = v1;
  v9 = async function pointer to Sequence.asyncFilter(_:)[1];
  swift_bridgeObjectRetain(v5);
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[75] = v10;
  v11 = sub_10001A9A8(&qword_101110318);
  v12 = sub_1000193A4(&qword_1011135A8, &qword_101110318, (const char *)&protocol conformance descriptor for [A : B]);
  *v10 = v0;
  v10[1] = sub_100AE1338;
  return Sequence.asyncFilter(_:)(&unk_1011135A0, v8, v11, v12);
}

uint64_t sub_100AE1338(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  *(_QWORD *)(*(_QWORD *)v1 + 608) = a1;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100AE13A8, 0, 0);
}

uint64_t sub_100AE13A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 616) = *(_QWORD *)(*(_QWORD *)(v0 + 608) + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v0 + 640) = *(_DWORD *)(v1 + 24);
  return swift_task_switch(sub_100AE13FC, v2, 0);
}

uint64_t sub_100AE13FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 528);
  v5 = *(_QWORD *)(v0 + 512);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v1, *(_QWORD *)(v0 + 504) + *(int *)(v0 + 640), v4);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AA8F8, v7 + v2, v6 | 7);
  *(_QWORD *)(v0 + 624) = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 632) = v10;
  *v10 = v0;
  v10[1] = sub_100AE14E4;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 560), sub_100727714, v8, *(_QWORD *)(v0 + 528));
}

uint64_t sub_100AE14E4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 632));
  swift_release();
  return swift_task_switch(sub_100AE1544, 0, 0);
}

uint64_t sub_100AE1544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v2 = *(_QWORD *)(v1 + 616);
  v3 = *(_QWORD *)(v1 + 584);
  v4 = *(_QWORD *)(v1 + 576);
  v5 = *(_QWORD *)(v1 + 560);
  v16 = *(_QWORD *)(v1 + 552);
  v6 = *(_QWORD *)(v1 + 536);
  v7 = *(_QWORD *)(v1 + 528);
  v8 = UUID.uuidString.getter(a1);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v11 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v11, v1 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22340;
  *(_QWORD *)(inited + 32) = 0xD000000000000011;
  *(_QWORD *)(inited + 40) = 0x8000000100EEDD20;
  *(_BYTE *)(inited + 48) = 0;
  *(_WORD *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "isFromRequest");
  *(_WORD *)(inited + 110) = -4864;
  *(_BYTE *)(inited + 112) = 0;
  *(_WORD *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0x6563637553736177;
  *(_QWORD *)(inited + 168) = 0xEA00000000007373;
  *(_BYTE *)(inited + 176) = 1;
  *(_WORD *)(inited + 216) = 0;
  *(_QWORD *)(inited + 224) = 0xD000000000000011;
  *(_QWORD *)(inited + 232) = 0x8000000100EEDD40;
  *(_QWORD *)(inited + 264) = &type metadata for String;
  *(_QWORD *)(inited + 272) = sub_1000330C8();
  *(_QWORD *)(inited + 240) = v8;
  *(_QWORD *)(inited + 248) = v10;
  *(_WORD *)(inited + 280) = 1;
  *(_QWORD *)(inited + 288) = 0xD000000000000013;
  *(_QWORD *)(inited + 296) = 0x8000000100EEDD60;
  *(_QWORD *)(inited + 328) = &type metadata for Int;
  v13 = sub_1000331DC();
  *(_QWORD *)(inited + 336) = v13;
  *(_QWORD *)(inited + 304) = v3;
  *(_WORD *)(inited + 344) = 2;
  *(_QWORD *)(inited + 352) = 0xD000000000000010;
  *(_QWORD *)(inited + 360) = 0x8000000100EEDD80;
  *(_QWORD *)(inited + 392) = &type metadata for Int;
  *(_QWORD *)(inited + 400) = v13;
  *(_QWORD *)(inited + 368) = v4;
  *(_WORD *)(inited + 408) = 2;
  *(_QWORD *)(inited + 416) = 0xD000000000000011;
  *(_QWORD *)(inited + 424) = 0x8000000100EEDDA0;
  *(_QWORD *)(inited + 456) = &type metadata for Int;
  *(_QWORD *)(inited + 464) = v13;
  *(_QWORD *)(inited + 432) = v2;
  *(_WORD *)(inited + 472) = 2;
  v14 = sub_1006B8C78(inited);
  swift_task_dealloc(v5);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(unint64_t))(v1 + 8))(v14);
}

uint64_t sub_100AE1734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = type metadata accessor for PeerCommunicationIdentifier(0);
  v3[5] = v5;
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v3[9] = v8;
  v3[10] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v3[11] = v9;
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnerPeerTrust(0);
  v3[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[14] = v11;
  v3[15] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AE1814, a2, 0);
}

uint64_t sub_100AE1814()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[7];
  v4 = v0[8];
  v5 = v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[2], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AA920, v7 + v2, v6 | 7);
  v0[16] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[17] = v10;
  *v10 = v0;
  v10[1] = sub_100AE18E8;
  return unsafeBlocking<A>(_:)(v0[12], sub_10007CC14, v8, v0[11]);
}

uint64_t sub_100AE18E8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_100AE1944, 0, 0);
}

uint64_t sub_100AE1944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 48))(v2, 1, v1) != 1)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v5 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    sub_1000126EC(v2, v3, type metadata accessor for OwnerPeerTrust);
    sub_10005972C(v3 + *(int *)(v1 + 28), v4, type metadata accessor for PeerCommunicationIdentifier);
    v6 = (char *)&loc_100AE19F4 + 4 * byte_100E5D340[swift_getEnumCaseMultiPayload(v4, v5)];
    __asm { BR              X10 }
  }
  sub_100004048(v2, (uint64_t *)&unk_1010EE160);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100AE1B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v4 = *v3;
  v5 = *(_QWORD *)(*v3 + 152);
  *(_QWORD *)(*v3 + 160) = a2;
  swift_task_dealloc(v5);
  if (v2)
  {
    swift_errorRelease(v2);
    swift_bridgeObjectRelease();
    v6 = sub_100AE1C44;
    v7 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 32);
    v6 = sub_100AE1BF8;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100AE1BF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_bridgeObjectRelease();
  if (v1)
    swift_bridgeObjectRelease();
  return swift_task_switch(sub_100AE1CB8, 0, 0);
}

uint64_t sub_100AE1C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for OwnerPeerTrust);
  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100AE1CB8()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 120), type metadata accessor for OwnerPeerTrust);
  v1 = *(_QWORD *)(v0 + 160) != 0;
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v1);
}

uint64_t sub_100AE1D38(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 312) = a1;
  return swift_task_switch(sub_100AE1D50, 0, 0);
}

uint64_t sub_100AE1D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x646F43726F727265;
  *(_QWORD *)(inited + 40) = 0xE900000000000065;
  swift_getErrorValue(v1, v0 + 288, v0 + 240);
  *(_QWORD *)(v0 + 296) = Error.code.getter(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  v4 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v6 = v5;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  v7 = sub_1000330C8();
  *(_QWORD *)(inited + 80) = v7;
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = v6;
  *(_WORD *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = 0x6D6F44726F727265;
  *(_QWORD *)(inited + 104) = 0xEB000000006E6961;
  swift_getErrorValue(v1, v0 + 304, v0 + 264);
  v8 = Error.domain.getter(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  *(_QWORD *)(inited + 136) = &type metadata for String;
  *(_QWORD *)(inited + 144) = v7;
  *(_QWORD *)(inited + 112) = v8;
  *(_QWORD *)(inited + 120) = v9;
  *(_WORD *)(inited + 152) = 1;
  *(_QWORD *)(inited + 160) = 0x6563637553736177;
  *(_QWORD *)(inited + 168) = 0xEA00000000007373;
  *(_BYTE *)(inited + 176) = 0;
  *(_WORD *)(inited + 216) = 0;
  v10 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v10);
}

uint64_t sub_100AE1EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_QWORD *)(v3 + 16) = a1;
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 48) = v6;
  v7 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v3 + 56) = v7;
  *(_QWORD *)(v3 + 64) = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EC868);
  *(_QWORD *)(v3 + 72) = v8;
  *(_QWORD *)(v3 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v3 + 104) = *(_DWORD *)(type metadata accessor for MemberSharingCircle(0) + 32);
  return swift_task_switch(sub_100AE1F68, a3, 0);
}

uint64_t sub_100AE1F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, *(_QWORD *)(v0 + 24) + *(int *)(v0 + 104), v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AA8D0, v7 + v2, v6 | 7);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 96) = v10;
  *v10 = v0;
  v10[1] = sub_100AE2044;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 80), sub_100067E08, v8, *(_QWORD *)(v0 + 72));
}

uint64_t sub_100AE2044()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_1005A9A60, 0, 0);
}

uint64_t sub_100AE20A0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  *(_BYTE *)(v6 + 465) = a6;
  *(_QWORD *)(v6 + 448) = a4;
  *(_QWORD *)(v6 + 456) = a5;
  *(_QWORD *)(v6 + 432) = a2;
  *(_QWORD *)(v6 + 440) = a3;
  *(_BYTE *)(v6 + 464) = a1;
  return swift_task_switch(sub_100AE20C4, 0, 0);
}

uint64_t sub_100AE20C4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t inited;
  unint64_t v9;

  v1 = *(_BYTE *)(v0 + 465);
  v3 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  v6 = *(_BYTE *)(v0 + 464);
  v7 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v7, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E26E10;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x8000000100EEDC60;
  *(_BYTE *)(inited + 48) = v6;
  *(_WORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0x6E774F6C61746F74;
  *(_QWORD *)(inited + 104) = 0xEF736D6574496465;
  *(_QWORD *)(inited + 112) = v5;
  *(_BYTE *)(inited + 153) = 1;
  *(_QWORD *)(inited + 160) = 0xD000000000000013;
  *(_QWORD *)(inited + 168) = 0x8000000100EEDC80;
  *(_QWORD *)(inited + 176) = v4;
  *(_BYTE *)(inited + 217) = 1;
  *(_QWORD *)(inited + 224) = 0xD000000000000012;
  *(_QWORD *)(inited + 232) = 0x8000000100EEDCA0;
  *(_QWORD *)(inited + 240) = v3;
  *(_BYTE *)(inited + 281) = 1;
  *(_QWORD *)(inited + 288) = 0xD000000000000016;
  *(_QWORD *)(inited + 296) = 0x8000000100EEDCC0;
  *(_QWORD *)(inited + 304) = v2;
  *(_BYTE *)(inited + 345) = 1;
  *(_QWORD *)(inited + 352) = 0x664F534654557369;
  *(_QWORD *)(inited + 360) = 0xEB00000000726566;
  *(_BYTE *)(inited + 368) = v1;
  *(_WORD *)(inited + 408) = 0;
  v9 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9);
}

uint64_t sub_100AE221C(char a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 177) = a2;
  *(_BYTE *)(v2 + 176) = a1;
  return swift_task_switch(sub_100AE2238, 0, 0);
}

uint64_t sub_100AE2238()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;

  v1 = *(_BYTE *)(v0 + 177);
  v2 = *(_BYTE *)(v0 + 176);
  v3 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0x4165726168537369;
  *(_QWORD *)(inited + 40) = 0xEF64657470656363;
  *(_BYTE *)(inited + 48) = v2;
  *(_WORD *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "isUTFSResponse");
  *(_BYTE *)(inited + 111) = -18;
  *(_BYTE *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 0;
  v5 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v5);
}

uint64_t sub_100AE22F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = a2;
  return swift_task_switch(sub_100AE2308, 0, 0);
}

uint64_t sub_100AE2308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0xD000000000000019;
  *(_QWORD *)(inited + 40) = 0x8000000100EEDBE0;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  v5 = sub_1000331DC();
  *(_QWORD *)(inited + 80) = v5;
  *(_QWORD *)(inited + 48) = v2;
  *(_WORD *)(inited + 88) = 2;
  *(_QWORD *)(inited + 96) = 0xD00000000000001ALL;
  *(_QWORD *)(inited + 104) = 0x8000000100EEDC00;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = v5;
  *(_QWORD *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 2;
  v6 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
}

uint64_t sub_100AE23D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = a2;
  return swift_task_switch(sub_100AE23EC, 0, 0);
}

uint64_t sub_100AE23EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x8000000100EEDED0;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  v5 = sub_1000331DC();
  *(_QWORD *)(inited + 80) = v5;
  *(_QWORD *)(inited + 48) = v2;
  *(_WORD *)(inited + 88) = 2;
  *(_QWORD *)(inited + 96) = 0xD000000000000011;
  *(_QWORD *)(inited + 104) = 0x8000000100EEDEF0;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = v5;
  *(_QWORD *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 2;
  v6 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
}

uint64_t sub_100AE24B8(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_100AE2608((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_100AE2608((unint64_t *)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

uint64_t sub_100AE2608(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  void (*v21)(char *, unint64_t, uint64_t);
  int v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;

  v30 = a2;
  v31 = a1;
  v40 = sub_10001A9A8(&qword_1010F2B78);
  v4 = __chkstk_darwin(v40);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v37 = (char *)&v30 - v6;
  v35 = type metadata accessor for UUID(0);
  v38 = *(_QWORD **)(v35 - 8);
  result = __chkstk_darwin(v35);
  v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = 0;
  v41 = (_QWORD *)a3;
  v10 = *(_QWORD *)(a3 + 64);
  v32 = 0;
  v33 = a3 + 64;
  v11 = 1 << *(_BYTE *)(a3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v34 = (unint64_t)(v11 + 63) >> 6;
  v14 = (uint64_t)v37;
  v15 = v38;
  v16 = v35;
  v17 = v36;
  v18 = v39;
  while (1)
  {
    if (v13)
    {
      v42 = (v13 - 1) & v13;
      v43 = v9;
      v19 = __clz(__rbit64(v13)) | (v9 << 6);
      goto LABEL_5;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v34)
      return sub_10041C2BC(v31, v30, v32, v41);
    v26 = *(_QWORD *)(v33 + 8 * v25);
    v27 = v9 + 1;
    if (!v26)
    {
      v27 = v9 + 2;
      if (v9 + 2 >= v34)
        return sub_10041C2BC(v31, v30, v32, v41);
      v26 = *(_QWORD *)(v33 + 8 * v27);
      if (!v26)
      {
        v27 = v9 + 3;
        if (v9 + 3 >= v34)
          return sub_10041C2BC(v31, v30, v32, v41);
        v26 = *(_QWORD *)(v33 + 8 * v27);
        if (!v26)
          break;
      }
    }
LABEL_20:
    v42 = (v26 - 1) & v26;
    v43 = v27;
    v19 = __clz(__rbit64(v26)) + (v27 << 6);
LABEL_5:
    v20 = v41;
    v21 = (void (*)(char *, unint64_t, uint64_t))v15[2];
    v21(v17, v41[6] + v15[9] * v19, v16);
    v22 = *(unsigned __int8 *)(v20[7] + v19);
    v21((char *)v14, (unint64_t)v17, v16);
    v23 = *(int *)(v40 + 48);
    *(_BYTE *)(v14 + v23) = v22;
    v21(v18, v14, v16);
    v18[v23] = v22;
    sub_100004048(v14, &qword_1010F2B78);
    v24 = (void (*)(char *, uint64_t))v15[1];
    v24(v18, v16);
    result = ((uint64_t (*)(char *, uint64_t))v24)(v17, v16);
    v9 = v43;
    v13 = v42;
    if (v22 == 1)
    {
      *(unint64_t *)((char *)v31 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
        return sub_10041C2BC(v31, v30, v32, v41);
      }
    }
  }
  v28 = v9 + 4;
  if (v9 + 4 >= v34)
    return sub_10041C2BC(v31, v30, v32, v41);
  v26 = *(_QWORD *)(v33 + 8 * v28);
  if (v26)
  {
    v27 = v9 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    v27 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v27 >= v34)
      return sub_10041C2BC(v31, v30, v32, v41);
    v26 = *(_QWORD *)(v33 + 8 * v27);
    ++v28;
    if (v26)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100AE2908(char a1)
{
  uint64_t v1;
  unint64_t v2;

  *(_BYTE *)(v1 + 112) = a1;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v1 + 40) = swift_task_alloc(v2);
  *(_QWORD *)(v1 + 48) = swift_task_alloc(v2);
  return swift_task_switch(sub_100AE2974, 0, 0);
}

uint64_t sub_100AE2974()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[7] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[8] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[9] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000036;
  *((_QWORD *)v2 + 16) = 0x8000000100EEDDC0;
  return swift_task_switch(sub_100AE2A70, v2, 0);
}

uint64_t sub_100AE2A70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v10;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 72);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 40);
  static DispatchTime.now()(a1);
  v3(v4, 0, 1, v2);
  sub_1001D2DE0(v4, v6);
  v7 = v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 16, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 16);
  v10 = (char *)&dword_10111D5B8 + dword_10111D5B8;
  v8 = (_QWORD *)swift_task_alloc(unk_10111D5BC);
  *(_QWORD *)(v1 + 80) = v8;
  *v8 = v1;
  v8[1] = sub_100AE2B58;
  return ((uint64_t (*)(_QWORD, _QWORD))v10)(*(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 112));
}

uint64_t sub_100AE2B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100AE2C84;
  else
    v3 = sub_100AE2BBC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AE2BBC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[12] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[13] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100AE2C28;
  return sub_100CD63AC(v0[7]);
}

uint64_t sub_100AE2C28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release(v1);
  return swift_task_switch(sub_100AE6584, 0, 0);
}

uint64_t sub_100AE2C84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[11];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not prepare analytics event for Keys Download.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = type metadata accessor for AnalyticsPublisher();
  v9 = swift_allocObject(v8, 112, 15);
  v0[12] = v9;
  swift_defaultActor_initialize(v9);
  v10 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[13] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = (uint64_t *)sub_100AE2C28;
  return sub_100CD63AC(v0[7]);
}

uint64_t sub_100AE2DB0(char a1, char a2)
{
  uint64_t v2;
  unint64_t v3;

  *(_BYTE *)(v2 + 113) = a2;
  *(_BYTE *)(v2 + 112) = a1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 40) = swift_task_alloc(v3);
  *(_QWORD *)(v2 + 48) = swift_task_alloc(v3);
  return swift_task_switch(sub_100AE2E20, 0, 0);
}

uint64_t sub_100AE2E20()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[7] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[8] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[9] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD00000000000003CLL;
  *((_QWORD *)v2 + 16) = 0x8000000100EEDE40;
  return swift_task_switch(sub_100AE2F1C, v2, 0);
}

uint64_t sub_100AE2F1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v10;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 72);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 40);
  static DispatchTime.now()(a1);
  v3(v4, 0, 1, v2);
  sub_1001D2DE0(v4, v6);
  v7 = v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 16, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 16);
  v10 = (char *)&dword_10111D5D0 + dword_10111D5D0;
  v8 = (_QWORD *)swift_task_alloc(unk_10111D5D4);
  *(_QWORD *)(v1 + 80) = v8;
  *v8 = v1;
  v8[1] = sub_100AE3008;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v10)(*(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 112), *(unsigned __int8 *)(v1 + 113));
}

uint64_t sub_100AE3008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100AE3134;
  else
    v3 = sub_100AE306C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AE306C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[12] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[13] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100AE30D8;
  return sub_100CD63AC(v0[7]);
}

uint64_t sub_100AE30D8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_10062E250, 0, 0);
}

uint64_t sub_100AE3134()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[11];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not prepare analytics event for share response.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = type metadata accessor for AnalyticsPublisher();
  v9 = swift_allocObject(v8, 112, 15);
  v0[12] = v9;
  swift_defaultActor_initialize(v9);
  v10 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[13] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = (uint64_t *)sub_100AE30D8;
  return sub_100CD63AC(v0[7]);
}

uint64_t sub_100AE3260(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1[31] = a1;
  v2 = type metadata accessor for UUID(0);
  v1[32] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[33] = v3;
  v1[34] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[35] = swift_task_alloc(v4);
  v1[36] = swift_task_alloc(v4);
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v1[37] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[38] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[39] = swift_task_alloc(v7);
  v1[40] = swift_task_alloc(v7);
  return swift_task_switch(sub_100AE332C, 0, 0);
}

uint64_t sub_100AE332C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 96);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 328) = v2;
    *v2 = v0;
    v2[1] = sub_100AE3410;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AE3410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE346C, 0, 0);
}

uint64_t sub_100AE346C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (__cdecl *v14)();

  v1 = *(_QWORD *)(v0 + 336);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v14 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB10 + dword_1010EBB10);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB14);
      *(_QWORD *)(v0 + 344) = v3;
      *v3 = v0;
      v3[1] = sub_100AE3630;
      return v14();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to get BeaconStoreActor!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_1006B9094((uint64_t)_swiftEmptyArrayStorage);
    v10 = *(_QWORD *)(v0 + 312);
    v12 = *(_QWORD *)(v0 + 280);
    v11 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9);
  }
  return result;
}

uint64_t sub_100AE3630(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE368C, 0, 0);
}

uint64_t sub_100AE368C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 248);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 360) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 304);
    v4 = *(_QWORD *)(v0 + 248);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 440) = v5;
    *(_QWORD *)(v0 + 368) = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v4);
    *(_QWORD *)(v0 + 376) = _swiftEmptyDictionarySingleton;
    *(_QWORD *)(v0 + 384) = 0;
    v6 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 296);
    sub_10005972C(v8 + ((v5 + 32) & ~(unint64_t)v5), v6, type metadata accessor for OwnerSharingCircle);
    if (*(_BYTE *)(v6 + *(int *)(v7 + 28)) == 2)
    {
LABEL_5:
      v17 = type metadata accessor for AnalyticsEvent(0);
      v18 = (char *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
      *(_QWORD *)(v0 + 392) = v18;
      swift_defaultActor_initialize(v18);
      v19 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
      *((_QWORD *)v18 + 14) = v19;
      UUID.init()(v19);
      v20 = &v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
      v21 = type metadata accessor for DispatchTime(0);
      *(_QWORD *)(v0 + 400) = v21;
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
      *(_QWORD *)(v0 + 408) = v22;
      v22(v20, 1, 1, v21);
      v22(&v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v21);
      *((_QWORD *)v18 + 15) = 0xD000000000000037;
      *((_QWORD *)v18 + 16) = 0x8000000100EEDCE0;
      return swift_task_switch(sub_100AE38F0, v18, 0);
    }
    while (1)
    {
      v9 = *(_QWORD *)(v0 + 360);
      v10 = *(_QWORD *)(v0 + 384) + 1;
      sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
      if (v10 == v9)
        break;
      v11 = *(_QWORD *)(v0 + 384) + 1;
      v12 = *(_QWORD *)(v0 + 368);
      v13 = *(unsigned __int8 *)(v0 + 440);
      v14 = *(_QWORD *)(v0 + 248);
      *(_QWORD *)(v0 + 376) = _swiftEmptyDictionarySingleton;
      *(_QWORD *)(v0 + 384) = v11;
      v15 = *(_QWORD *)(v0 + 320);
      v16 = *(_QWORD *)(v0 + 296);
      sub_10005972C(v14 + ((v13 + 32) & ~v13) + v12 * v11, v15, type metadata accessor for OwnerSharingCircle);
      if (*(_BYTE *)(v15 + *(int *)(v16 + 28)) == 2)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  v24 = *(_QWORD *)(v0 + 312);
  v26 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 288);
  v27 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyDictionarySingleton);
}

uint64_t sub_100AE38F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[50];
  v3 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[51];
  v4 = v1[49];
  v6 = v1[35];
  v5 = v1[36];
  static DispatchTime.now()(a1);
  v3(v5, 0, 1, v2);
  sub_1001D2DE0(v5, v6);
  v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 25, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 25);
  return swift_task_switch(sub_100AE39A4, 0, 0);
}

uint64_t sub_100AE39A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[44];
  v2 = v0[42];
  v3 = v0[40];
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[52] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = (_QWORD *)swift_task_alloc(dword_10111D0D4);
  v0[53] = v5;
  *v5 = v0;
  v5[1] = sub_100AE3A28;
  return sub_100CD48A8((uint64_t)&unk_101113590, (uint64_t)v4);
}

uint64_t sub_100AE3A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100AE3CF8;
  else
    v4 = sub_100AE3A94;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100AE3A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v3, *(_QWORD *)(v0 + 320) + *(int *)(*(_QWORD *)(v0 + 296) + 20), v5);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_10010A294(v1, v3, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  while (1)
  {
    v7 = *(_QWORD *)(v0 + 360);
    v8 = *(_QWORD *)(v0 + 384) + 1;
    sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
    if (v8 == v7)
      break;
    v9 = *(_QWORD *)(v0 + 384) + 1;
    *(_QWORD *)(v0 + 376) = v2;
    *(_QWORD *)(v0 + 384) = v9;
    v10 = *(_QWORD *)(v0 + 320);
    v11 = *(_QWORD *)(v0 + 296);
    sub_10005972C(*(_QWORD *)(v0 + 248)+ ((*(unsigned __int8 *)(v0 + 440) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 440))+ *(_QWORD *)(v0 + 368) * v9, v10, type metadata accessor for OwnerSharingCircle);
    if (*(_BYTE *)(v10 + *(int *)(v11 + 28)) == 2)
    {
      v12 = type metadata accessor for AnalyticsEvent(0);
      v13 = (char *)swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
      *(_QWORD *)(v0 + 392) = v13;
      swift_defaultActor_initialize(v13);
      v14 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
      *((_QWORD *)v13 + 14) = v14;
      UUID.init()(v14);
      v15 = &v13[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
      v16 = type metadata accessor for DispatchTime(0);
      *(_QWORD *)(v0 + 400) = v16;
      v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
      *(_QWORD *)(v0 + 408) = v17;
      v17(v15, 1, 1, v16);
      v17(&v13[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v16);
      *((_QWORD *)v13 + 15) = 0xD000000000000037;
      *((_QWORD *)v13 + 16) = 0x8000000100EEDCE0;
      return swift_task_switch(sub_100AE38F0, v13, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v19 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 280);
  v20 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100AE3CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
  sub_10005972C(v2, v3, type metadata accessor for OwnerSharingCircle);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 312);
  if (v8)
  {
    v40 = *(_QWORD *)(v0 + 256);
    v11 = swift_slowAlloc(32, -1);
    v41 = (uint64_t *)swift_slowAlloc(8, -1);
    v42 = swift_slowAlloc(32, -1);
    v43 = v42;
    *(_DWORD *)v11 = 141558531;
    *(_QWORD *)(v0 + 224) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    v12 = sub_1001D4C18();
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v40, v12);
    *(_QWORD *)(v0 + 232) = sub_100016940(v13, v14, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain(v9);
    v15 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 240) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v11 + 24, v11 + 32);
    *v41 = v15;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not prepare analytics event for offer share for beacon %{private,mask.hash}s.\n%{public}@.", (uint8_t *)v11, 0x20u);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v41, 1, v16);
    swift_slowDealloc(v41, -1, -1);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 432));
    sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v20 + 16))(v19, *(_QWORD *)(v0 + 320) + *(int *)(*(_QWORD *)(v0 + 296) + 20), v21);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  v43 = v18;
  sub_10010A294(v17, v19, isUniquelyReferenced_nonNull_native);
  v23 = v43;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  swift_release();
  while (1)
  {
    v24 = *(_QWORD *)(v0 + 360);
    v25 = *(_QWORD *)(v0 + 384) + 1;
    sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
    if (v25 == v24)
      break;
    v26 = *(_QWORD *)(v0 + 384) + 1;
    *(_QWORD *)(v0 + 376) = v23;
    *(_QWORD *)(v0 + 384) = v26;
    v27 = *(_QWORD *)(v0 + 320);
    v28 = *(_QWORD *)(v0 + 296);
    sub_10005972C(*(_QWORD *)(v0 + 248)+ ((*(unsigned __int8 *)(v0 + 440) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 440))+ *(_QWORD *)(v0 + 368) * v26, v27, type metadata accessor for OwnerSharingCircle);
    if (*(_BYTE *)(v27 + *(int *)(v28 + 28)) == 2)
    {
      v29 = type metadata accessor for AnalyticsEvent(0);
      v30 = (char *)swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
      *(_QWORD *)(v0 + 392) = v30;
      swift_defaultActor_initialize(v30);
      v31 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
      *((_QWORD *)v30 + 14) = v31;
      UUID.init()(v31);
      v32 = &v30[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
      v33 = type metadata accessor for DispatchTime(0);
      *(_QWORD *)(v0 + 400) = v33;
      v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
      *(_QWORD *)(v0 + 408) = v34;
      v34(v32, 1, 1, v33);
      v34(&v30[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v33);
      *((_QWORD *)v30 + 15) = 0xD000000000000037;
      *((_QWORD *)v30 + 16) = 0x8000000100EEDCE0;
      return swift_task_switch(sub_100AE38F0, v30, 0);
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v36 = *(_QWORD *)(v0 + 312);
  v38 = *(_QWORD *)(v0 + 280);
  v37 = *(_QWORD *)(v0 + 288);
  v39 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v23);
}

uint64_t sub_100AE4204(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100AE421C, 0, 0);
}

void sub_100AE421C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v6 = *(_QWORD *)(v0 + 16);
    else
      v6 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v6);
    *(_QWORD *)(v0 + 24) = v2;
    if (v2)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease();
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v1);
  *(_QWORD *)(v0 + 24) = v2;
  if (!v2)
    goto LABEL_12;
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    *(_QWORD *)(v0 + 32) = 0;
    if ((v3 & 0xC000000000000001) != 0)
    {
      v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    }
    else
    {
      v4 = *(_QWORD *)(v3 + 32);
      swift_retain();
    }
    *(_QWORD *)(v0 + 40) = v4;
    v7 = (void (*)(uint64_t))((char *)&dword_10111D5E0 + dword_10111D5E0);
    v5 = (_QWORD *)swift_task_alloc(unk_10111D5E4);
    *(_QWORD *)(v0 + 48) = v5;
    *v5 = v0;
    v5[1] = sub_100AE4314;
    v7(v4);
  }
}

uint64_t sub_100AE4314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 48));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_100AE6588;
  }
  else
  {
    v2 = sub_100AE4380;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100AE4380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t);

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 32) + 1;
    *(_QWORD *)(v0 + 32) = v4;
    v5 = *(_QWORD *)(v0 + 16);
    if ((v5 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v5);
    }
    else
    {
      v6 = *(_QWORD *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    *(_QWORD *)(v0 + 40) = v6;
    v8 = (uint64_t (*)(uint64_t))((char *)&dword_10111D5E0 + dword_10111D5E0);
    v7 = (_QWORD *)swift_task_alloc(unk_10111D5E4);
    *(_QWORD *)(v0 + 48) = v7;
    *v7 = v0;
    v7[1] = sub_100AE4314;
    return v8(v6);
  }
}

uint64_t sub_100AE4450(char a1)
{
  uint64_t v1;
  unint64_t v2;

  *(_BYTE *)(v1 + 112) = a1;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v1 + 40) = swift_task_alloc(v2);
  *(_QWORD *)(v1 + 48) = swift_task_alloc(v2);
  return swift_task_switch(sub_100AE44BC, 0, 0);
}

uint64_t sub_100AE44BC()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[7] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[8] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[9] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000034;
  *((_QWORD *)v2 + 16) = 0x8000000100EEDE00;
  return swift_task_switch(sub_100AE45B8, v2, 0);
}

uint64_t sub_100AE45B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v10;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 72);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 40);
  static DispatchTime.now()(a1);
  v3(v4, 0, 1, v2);
  sub_1001D2DE0(v4, v6);
  v7 = v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 16, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 16);
  v10 = (char *)&dword_10111D5C0 + dword_10111D5C0;
  v8 = (_QWORD *)swift_task_alloc(unk_10111D5C4);
  *(_QWORD *)(v1 + 80) = v8;
  *v8 = v1;
  v8[1] = sub_100AE46A0;
  return ((uint64_t (*)(_QWORD, _QWORD))v10)(*(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 112));
}

uint64_t sub_100AE46A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100AE4704;
  else
    v3 = sub_100AE306C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AE4704()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[11];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not prepare analytics event for Keys  Upload.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = type metadata accessor for AnalyticsPublisher();
  v9 = swift_allocObject(v8, 112, 15);
  v0[12] = v9;
  swift_defaultActor_initialize(v9);
  v10 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[13] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = (uint64_t *)sub_100AE30D8;
  return sub_100CD63AC(v0[7]);
}

uint64_t sub_100AE4830(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;

  v2[5] = a1;
  v2[6] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v3);
  v2[8] = swift_task_alloc(v3);
  return swift_task_switch(sub_100AE489C, 0, 0);
}

uint64_t sub_100AE489C()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[9] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[10] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[11] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000040;
  *((_QWORD *)v2 + 16) = 0x8000000100EEDE80;
  return swift_task_switch(sub_100AE4998, v2, 0);
}

uint64_t sub_100AE4998(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v10;

  v2 = v1[10];
  v3 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[11];
  v4 = v1[8];
  v5 = v1[9];
  v6 = v1[7];
  static DispatchTime.now()(a1);
  v3(v4, 0, 1, v2);
  sub_1001D2DE0(v4, v6);
  v7 = v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 2, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 2);
  v10 = (char *)&dword_10111D5D8 + dword_10111D5D8;
  v8 = (_QWORD *)swift_task_alloc(unk_10111D5DC);
  v1[12] = v8;
  *v8 = v1;
  v8[1] = sub_100AE4A80;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v10)(v1[9], v1[5], v1[6]);
}

uint64_t sub_100AE4A80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100AE4BF0;
  else
    v3 = sub_100AE4AE4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AE4AE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[14] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[15] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100AE4B50;
  return sub_100CD63AC(v0[9]);
}

uint64_t sub_100AE4B50()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_100AE4BAC, 0, 0);
}

uint64_t sub_100AE4BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE4BF0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[13];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not prepare analytics event for Owned Daily Shares Count.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = type metadata accessor for AnalyticsPublisher();
  v9 = swift_allocObject(v8, 112, 15);
  v0[14] = v9;
  swift_defaultActor_initialize(v9);
  v10 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[15] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = (uint64_t *)sub_100AE4B50;
  return sub_100CD63AC(v0[9]);
}

uint64_t sub_100AE4D1C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_BYTE *)(v2 + 457) = a2;
  *(_BYTE *)(v2 + 456) = a1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v2 + 168) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 176) = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 184) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 192) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 200) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 208) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 216) = swift_task_alloc(v5);
  v6 = type metadata accessor for StableIdentifier(0);
  *(_QWORD *)(v2 + 224) = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 232) = swift_task_alloc(v7);
  *(_QWORD *)(v2 + 240) = swift_task_alloc(v7);
  *(_QWORD *)(v2 + 248) = swift_task_alloc(v7);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)(v2 + 256) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v2 + 264) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 272) = swift_task_alloc(v10);
  *(_QWORD *)(v2 + 280) = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 288) = swift_task_alloc(v11);
  *(_QWORD *)(v2 + 296) = swift_task_alloc(v11);
  return swift_task_switch(sub_100AE4E60, 0, 0);
}

uint64_t sub_100AE4E60()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 304) = v2;
    *v2 = v0;
    v2[1] = sub_100AE4F44;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AE4F44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE4FA0, 0, 0);
}

uint64_t sub_100AE4FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 312);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = type metadata accessor for AnalyticsEvent(0);
    v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
    *(_QWORD *)(v0 + 320) = v3;
    swift_defaultActor_initialize(v3);
    v4 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v3 + 14) = v4;
    UUID.init()(v4);
    v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    v6 = type metadata accessor for DispatchTime(0);
    *(_QWORD *)(v0 + 328) = v6;
    v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
    *(_QWORD *)(v0 + 336) = v7;
    v7(v5, 1, 1, v6);
    v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v6);
    *((_QWORD *)v3 + 15) = 0xD000000000000037;
    *((_QWORD *)v3 + 16) = 0x8000000100EEDC20;
    return swift_task_switch(sub_100AE5210, v3, 0);
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B6748);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Could not get beaconStore reference for analytics.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 248);
    v19 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 208);
    v20 = *(_QWORD *)(v0 + 216);
    v22 = *(_QWORD *)(v0 + 200);
    v23 = *(_QWORD *)(v0 + 192);
    v24 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AE5210(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[41];
  v3 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[42];
  v4 = v1[40];
  v6 = v1[36];
  v5 = v1[37];
  static DispatchTime.now()(a1);
  v3(v5, 0, 1, v2);
  sub_1001D2DE0(v5, v6);
  v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 15, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 15);
  return swift_task_switch(sub_100AE52C4, v1[39], 0);
}

uint64_t sub_100AE52C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 344) = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  *v3 = v0;
  v3[1] = sub_100AE534C;
  return unsafeBlocking<A>(_:)(v0 + 144, sub_10001ED38, v1, v4);
}

uint64_t sub_100AE534C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 344));
  swift_release();
  return swift_task_switch(sub_100AE53A8, *(_QWORD *)(v1 + 312), 0);
}

uint64_t sub_100AE53A8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v0 + 144);
  return swift_task_switch(sub_100AE53C4, 0, 0);
}

void sub_100AE53C4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int EnumCaseMultiPayload;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = v0[44];
  v24 = *(_QWORD *)(v1 + 16);
  if (!v24)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    v0[45] = _swiftEmptyArrayStorage[2];
    swift_release();
    swift_task_switch(sub_100AE56D8, v0[39], 0);
    return;
  }
  v2 = 0;
  v23 = v0[33];
  v22 = v0[32];
  while (v2 < *(_QWORD *)(v1 + 16))
  {
    v5 = v1;
    v6 = v0[35];
    v7 = v0[30];
    v8 = v0[31];
    v9 = v0[28];
    v25 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    v10 = *(_QWORD *)(v23 + 72);
    sub_10005972C(v0[44] + v25 + v10 * v2, v6, type metadata accessor for OwnedBeaconRecord);
    v11 = v6 + *(int *)(v22 + 24);
    sub_10005972C(v11, v8, type metadata accessor for StableIdentifier);
    LODWORD(v9) = swift_getEnumCaseMultiPayload(v8, v9);
    sub_1000126B0(v8, type metadata accessor for StableIdentifier);
    sub_10005972C(v11, v7, type metadata accessor for StableIdentifier);
    v12 = v0[30];
    if ((_DWORD)v9 == 1)
    {
      v1 = v5;
      v13 = v25;
      goto LABEL_13;
    }
    v15 = v0[28];
    v14 = v0[29];
    sub_10005972C(v0[30], v14, type metadata accessor for StableIdentifier);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
    if (EnumCaseMultiPayload == 2)
    {
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v1 = v5;
LABEL_12:
      v13 = v25;
      v17 = v0[29];
      v12 = v0[30];
      swift_bridgeObjectRelease();
      v18 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
LABEL_13:
      sub_1000126B0(v12, type metadata accessor for StableIdentifier);
      sub_1000126EC(v0[35], v0[34], type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A680(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v20 = _swiftEmptyArrayStorage[2];
      v19 = _swiftEmptyArrayStorage[3];
      if (v20 >= v19 >> 1)
        sub_10009A680(v19 > 1, v20 + 1, 1);
      v21 = v0[34];
      _swiftEmptyArrayStorage[2] = v20 + 1;
      sub_1000126EC(v21, (uint64_t)_swiftEmptyArrayStorage + v13 + v20 * v10, type metadata accessor for OwnedBeaconRecord);
      goto LABEL_4;
    }
    v1 = v5;
    if (EnumCaseMultiPayload == 3)
    {
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    v3 = v0[35];
    v4 = v0[30];
    sub_1000126B0(v0[29], type metadata accessor for StableIdentifier);
    sub_1000126B0(v4, type metadata accessor for StableIdentifier);
    sub_1000126B0(v3, type metadata accessor for OwnedBeaconRecord);
LABEL_4:
    if (v24 == ++v2)
      goto LABEL_18;
  }
  __break(1u);
}

uint64_t sub_100AE56D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[39];
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[46] = v3;
  v4 = sub_10001A9A8(&qword_1010EC840);
  v0[47] = v4;
  *v3 = v0;
  v3[1] = sub_100AE5764;
  return unsafeBlocking<A>(_:)(v0 + 19, sub_10001ED30, v1, v4);
}

uint64_t sub_100AE5764()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 368));
  swift_release();
  return swift_task_switch(sub_100AE57C0, *(_QWORD *)(v1 + 312), 0);
}

uint64_t sub_100AE57C0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 384) = *(_QWORD *)(v0 + 152);
  return swift_task_switch(sub_100AE57DC, 0, 0);
}

void sub_100AE57DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = v0[48];
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  v34 = v2;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    v0[49] = _swiftEmptyArrayStorage[2];
    swift_release();
    v31 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v1);
LABEL_25:
    v27 = v0[48];
    v28 = v0[39];
    swift_bridgeObjectRelease();
    v0[50] = v31[2];
    swift_release();
    v0[20] = v27;
    v29 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    v0[51] = v29;
    v30 = sub_1000193A4(&qword_1010EC8B0, &qword_1010EC840, (const char *)&protocol conformance descriptor for [A]);
    *v29 = v0;
    v29[1] = sub_100AE5B70;
    Sequence.asyncCompactMap<A>(_:)(&unk_101113568, v28, v0[47], &type metadata for String, v30);
    return;
  }
  v3 = 0;
  v4 = v0[21];
  v32 = v0[22];
  v31 = _swiftEmptyArrayStorage;
  v33 = v1;
  do
  {
    if (v3 >= *(_QWORD *)(v1 + 16))
    {
      __break(1u);
      goto LABEL_27;
    }
    v6 = v0[26];
    v5 = v0[27];
    v7 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v8 = *(_QWORD *)(v32 + 72);
    sub_10005972C(v0[48] + v7 + v8 * v3, v5, type metadata accessor for MemberSharingCircle);
    v9 = *(unsigned __int8 *)(v5 + *(int *)(v4 + 40));
    sub_10005972C(v5, v6, type metadata accessor for MemberSharingCircle);
    v10 = v0[26];
    if (v9 == 1)
    {
      sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
    }
    else
    {
      v11 = *(unsigned __int8 *)(v10 + *(int *)(v4 + 40));
      sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
      if (v11 != 4)
      {
        sub_1000126B0(v0[27], type metadata accessor for MemberSharingCircle);
        goto LABEL_4;
      }
    }
    sub_1000126EC(v0[27], v0[25], type metadata accessor for MemberSharingCircle);
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
      sub_10009A4D0(0, _swiftEmptyArrayStorage[2] + 1, 1);
    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1)
      sub_10009A4D0(v12 > 1, v13 + 1, 1);
    v14 = v0[25];
    _swiftEmptyArrayStorage[2] = v13 + 1;
    sub_1000126EC(v14, (uint64_t)_swiftEmptyArrayStorage + v7 + v13 * v8, type metadata accessor for MemberSharingCircle);
LABEL_4:
    v1 = v33;
    ++v3;
  }
  while (v34 != v3);
  v15 = v0[48];
  swift_bridgeObjectRelease();
  v0[49] = _swiftEmptyArrayStorage[2];
  swift_release();
  swift_bridgeObjectRetain(v15);
  v16 = 0;
  v18 = v0[21];
  v17 = v0[22];
  while (v16 < *(_QWORD *)(v1 + 16))
  {
    v19 = v0[24];
    v20 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v21 = *(_QWORD *)(v17 + 72);
    sub_10005972C(v0[48] + v20 + v21 * v16, v19, type metadata accessor for MemberSharingCircle);
    v22 = v0[24];
    if (*(_BYTE *)(v19 + *(int *)(v18 + 40)))
    {
      sub_1000126B0(v22, type metadata accessor for MemberSharingCircle);
    }
    else
    {
      sub_1000126EC(v22, v0[23], type metadata accessor for MemberSharingCircle);
      v23 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
      {
        sub_10009A4D0(0, v31[2] + 1, 1);
        v23 = _swiftEmptyArrayStorage;
      }
      v25 = v23[2];
      v24 = v23[3];
      if (v25 >= v24 >> 1)
      {
        sub_10009A4D0(v24 > 1, v25 + 1, 1);
        v23 = _swiftEmptyArrayStorage;
      }
      v26 = v0[23];
      v23[2] = v25 + 1;
      v31 = v23;
      sub_1000126EC(v26, (uint64_t)v23 + v20 + v25 * v21, type metadata accessor for MemberSharingCircle);
      v1 = v33;
    }
    if (v34 == ++v16)
      goto LABEL_25;
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_100AE5B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100AE5BD8, 0, 0);
}

uint64_t sub_100AE5BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = sub_100CA7D78(*(_QWORD *)(v0 + 416));
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease();
  v5 = (uint64_t (*)(uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_10111D590
                                                                                       + dword_10111D590);
  v3 = (_QWORD *)swift_task_alloc(unk_10111D594);
  *(_QWORD *)(v0 + 424) = v3;
  *v3 = v0;
  v3[1] = sub_100AE5C7C;
  return v5(*(_QWORD *)(v0 + 320), *(_BYTE *)(v0 + 456), *(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 400), v2, *(_BYTE *)(v0 + 457));
}

uint64_t sub_100AE5C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100AE5E7C;
  else
    v3 = sub_100AE5CE0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AE5CE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[55] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[56] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100AE5D4C;
  return sub_100CD63AC(v0[40]);
}

uint64_t sub_100AE5D4C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 448));
  swift_release();
  return swift_task_switch(sub_100AE5DA8, 0, 0);
}

uint64_t sub_100AE5DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 312);
  swift_release(*(_QWORD *)(v0 + 320));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 232);
  v9 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE5E7C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[54];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not prepare analytics event for incoming share.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = type metadata accessor for AnalyticsPublisher();
  v9 = swift_allocObject(v8, 112, 15);
  v0[55] = v9;
  swift_defaultActor_initialize(v9);
  v10 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[56] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = (uint64_t *)sub_100AE5D4C;
  return sub_100CD63AC(v0[40]);
}

uint64_t sub_100AE5FA8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;

  v2[5] = a1;
  v2[6] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v3);
  v2[8] = swift_task_alloc(v3);
  return swift_task_switch(sub_100AE6014, 0, 0);
}

uint64_t sub_100AE6014()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[9] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[10] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[11] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000044;
  *((_QWORD *)v2 + 16) = 0x8000000100EEDB90;
  return swift_task_switch(sub_100AE6110, v2, 0);
}

uint64_t sub_100AE6110(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v10;

  v2 = v1[10];
  v3 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[11];
  v4 = v1[8];
  v5 = v1[9];
  v6 = v1[7];
  static DispatchTime.now()(a1);
  v3(v4, 0, 1, v2);
  sub_1001D2DE0(v4, v6);
  v7 = v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 2, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 2);
  v10 = (char *)&dword_10111D4B8 + dword_10111D4B8;
  v8 = (_QWORD *)swift_task_alloc(unk_10111D4BC);
  v1[12] = v8;
  *v8 = v1;
  v8[1] = sub_100AE61F8;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD))v10)(v1[9], v1[5], v1[6]);
}

uint64_t sub_100AE61F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100AE6324;
  else
    v3 = sub_100AE625C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100AE625C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[14] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[15] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100AE62C8;
  return sub_100CD63AC(v0[9]);
}

uint64_t sub_100AE62C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release(v1);
  return swift_task_switch(sub_100AE6580, 0, 0);
}

uint64_t sub_100AE6324()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[13];
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not prepare analytics event for sytem error display id prefix.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  swift_errorRelease(v6);

  v8 = type metadata accessor for AnalyticsPublisher();
  v9 = swift_allocObject(v8, 112, 15);
  v0[14] = v9;
  swift_defaultActor_initialize(v9);
  v10 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[15] = (uint64_t)v10;
  *v10 = v0;
  v10[1] = (uint64_t *)sub_100AE62C8;
  return sub_100CD63AC(v0[9]);
}

uint64_t sub_100AE6450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_101113564);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004C28;
  return sub_100AE1EC4(a1, a2, v2);
}

uint64_t sub_100AE64B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10111358C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000D9CC0;
  return sub_100AE11AC(v2, v3, v4);
}

uint64_t sub_100AE6518(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10111359C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100067F58;
  return sub_100AE1734(a1, v5, v4);
}

uint64_t sub_100AE658C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1[4] = a1;
  v2 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for XPCActivity.Priority(0);
  v1[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[9] = v5;
  v1[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AE6614, 0, 0);
}

uint64_t sub_100AE6614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 88) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 96) = v3;
  *v3 = v0;
  v3[1] = sub_100AE66C4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100AE66C4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_100AE6720, 0, 0);
}

unint64_t sub_100AE6720()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1 = *(_QWORD *)(v0 + 16);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 104))(*(_QWORD *)(v0 + 80), enum case for XPCActivity.Priority.utility(_:), *(_QWORD *)(v0 + 64));
  result = sub_100C1BB04(v1);
  if (!is_mul_ok(result, 0x3CuLL))
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = 60 * result;
  if (((60 * result) & 0x8000000000000000) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v4 = sub_100C1BAF0(v1);
  result = swift_bridgeObjectRelease();
  if (!is_mul_ok(v4, 0x3CuLL))
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v5 = 60 * v4;
  if (((60 * v4) & 0x8000000000000000) == 0)
  {
    v6 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = sub_10001A9A8(&qword_1010FDD00);
    v11 = swift_allocObject(v10, ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ 8 * *(_QWORD *)(v8 + 72), *(unsigned __int8 *)(v8 + 80) | 7);
    *(_OWORD *)(v11 + 16) = xmmword_100E49180;
    v12 = static XPCActivity.Criteria.Options.wakeDevice.getter();
    v13 = static XPCActivity.Criteria.Options.powerNap.getter(v12);
    v14 = static XPCActivity.Criteria.Options.allowBattery.getter(v13);
    v15 = static XPCActivity.Criteria.Options.requiresNetwork.getter(v14);
    v16 = static XPCActivity.Criteria.Options.diskIntensive.getter(v15);
    v17 = static XPCActivity.Criteria.Options.cpuIntensive.getter(v16);
    v18 = static XPCActivity.Criteria.Options.requiresClassC.getter(v17);
    static XPCActivity.Criteria.Options.preventDeviceSleep.getter(v18);
    *(_QWORD *)(v0 + 24) = v11;
    v19 = sub_100006204(&qword_1010EBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
    v20 = sub_10001A9A8(&qword_1010FDD08);
    v21 = sub_1004EF218();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 24, v20, v21, v9, v19);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v6, 1, 0, v3, v5, v7);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100AE691C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v1[15] = a1;
  v3 = type metadata accessor for XPCActivity.State(0);
  v1[16] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[17] = v4;
  v1[18] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AE6980, a1, 0);
}

uint64_t sub_100AE6980()
{
  uint64_t v0;
  _QWORD *v1;

  *(_BYTE *)(v0 + 216) = *(_BYTE *)(*(_QWORD *)(v0 + 120) + 128);
  v1 = (_QWORD *)swift_task_alloc(dword_10111361C);
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_100AE69D4;
  return sub_100AE8140();
}

uint64_t sub_100AE69D4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_BYTE *)(*(_QWORD *)v1 + 217) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE6A34, v3, 0);
}

uint64_t sub_100AE6A34()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  int v3;

  v1 = *(unsigned __int8 *)(v0 + 217);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(unsigned __int8 *)(v2 + 129);
  *(_BYTE *)(v0 + 218) = v3;
  if (v1 != v3)
  {
    *(_BYTE *)(v2 + 129) = v1;
    v2 = *(_QWORD *)(v0 + 120);
  }
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v2 + 120);
  swift_retain();
  return swift_task_switch(sub_100AE6A94, 0, 0);
}

uint64_t sub_100AE6A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t (*v10)(void);
  uint64_t (*v11)(_QWORD);
  uint64_t (*v12)(void);

  if ((*(_BYTE *)(v0 + 216) & 1) == 0)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (!*(_QWORD *)(v0 + 80))
    {
      __break(1u);
      return result;
    }
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v12 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v9 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 168) = v9;
    *v9 = v0;
    v9[1] = sub_100AE6CC4;
    v10 = v12;
    return v10();
  }
  if (*(unsigned __int8 *)(v0 + 218) == *(unsigned __int8 *)(v0 + 217))
  {
    swift_release();
    goto LABEL_14;
  }
  if (!*(_QWORD *)(v0 + 160))
  {
LABEL_14:
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v1 = qword_1010E9938;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "BeaconSharing beacons shared state changed.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v11 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                       + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
  v7 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                  + 1));
  *(_QWORD *)(v0 + 208) = v7;
  *v7 = v0;
  v7[1] = sub_100AE7028;
  return v11(*(_QWORD *)(v0 + 144));
}

uint64_t sub_100AE6CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE6D20, 0, 0);
}

uint64_t sub_100AE6D20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = *(_QWORD *)(v0 + 176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100AE6E48, *(_QWORD *)(v0 + 176), 0);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE6E48()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 128);
  return swift_task_switch(sub_100AE6E68, 0, 0);
}

uint64_t sub_100AE6E68()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 192) = v1;
  *v1 = v0;
  v1[1] = sub_100AE6EF0;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 184), (char *)&type metadata for () + 8);
}

uint64_t sub_100AE6EF0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_100AE6F44, 0, 0);
}

uint64_t sub_100AE6F44()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101113614);
  *(_QWORD *)(v0 + 200) = v1;
  *v1 = v0;
  v1[1] = sub_100AE6F8C;
  return sub_100AE70DC();
}

uint64_t sub_100AE6F8C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  return swift_task_switch(sub_100AE6FE0, 0, 0);
}

uint64_t sub_100AE6FE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE7028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100AE709C, 0, 0);
}

uint64_t sub_100AE709C()
{
  uint64_t v0;

  swift_release_n(*(_QWORD *)(v0 + 160), 2);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE70DC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = type metadata accessor for DispatchQoS(0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AE713C, v0, 0);
}

uint64_t sub_100AE713C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v1 = *(_QWORD *)(v0 + 16);
  if (*(_BYTE *)(v1 + 129) == 1)
  {
    v2 = *(_QWORD *)(v0 + 24);
    type metadata accessor for XPCActivity(0);
    static DispatchQoS.default.getter();
    v3 = swift_allocObject(&unk_1010AA988, 32, 7);
    *(_QWORD *)(v3 + 16) = v1;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
    swift_retain_n(v1, 2);
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 40) = v5;
    *v5 = v0;
    v5[1] = sub_100AE72E4;
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000024, 0x8000000100EEDF60, *(_QWORD *)(v0 + 32), &unk_101113788, v3, &unk_101113798, *(_QWORD *)(v0 + 16));
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No shared beacons, no activity required.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 32));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AE72E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE7344, v3, 0);
}

uint64_t sub_100AE7344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = *(_QWORD *)(v0 + 48);
  swift_release(v2);
  *(_BYTE *)(v1 + 128) = 1;
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE7390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = sub_10001A9A8(&qword_1010FDCF8);
  v4[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for XPCActivity.Criteria(0);
  v4[8] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[9] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v8);
  v4[11] = swift_task_alloc(v8);
  v9 = (_QWORD *)swift_task_alloc(dword_10111361C);
  v4[12] = v9;
  *v9 = v4;
  v9[1] = sub_100AE743C;
  return sub_100AE8140();
}

uint64_t sub_100AE743C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE749C, v3, 0);
}

uint64_t sub_100AE749C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD, _QWORD, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD, _QWORD);
  uint64_t v39;

  if (*(_BYTE *)(v0 + 112) == 1)
  {
    v1 = *(_QWORD *)(v0 + 64);
    v2 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 56);
    sub_10000F9B8(*(_QWORD *)(v0 + 32), v3, &qword_1010FDCF8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 56), &qword_1010FDCF8);
      v4 = (_QWORD *)swift_task_alloc(dword_1011137AC);
      *(_QWORD *)(v0 + 104) = v4;
      *v4 = v0;
      v4[1] = sub_100AE7858;
      return sub_100AE658C(*(_QWORD *)(v0 + 24));
    }
    v14 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 32);
    v14(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v15 = *(_QWORD *)(v0 + 80);
    v16 = *(_QWORD *)(v0 + 88);
    v17 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v0 + 72);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B6748);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v15, v16, v17);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v25 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 80);
    v26 = *(_QWORD *)(v0 + 64);
    if (v23)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = v14;
      v39 = swift_slowAlloc(32, -1);
      v28 = v39;
      *(_DWORD *)v27 = 136446210;
      v29 = sub_100006204(&qword_1011137B0, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
      *(_QWORD *)(v0 + 16) = sub_100016940(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "BeaconSharing activity keeping criteria %{public}s.", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      v32 = v28;
      v14 = v38;
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v25 + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    }

    v33 = *(_QWORD *)(v0 + 64);
    v34 = *(_QWORD *)(v0 + 72);
    v35 = *(_QWORD *)(v0 + 24);
    v14(v35, *(_QWORD *)(v0 + 88), v33);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v33);
  }
  else
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "BeaconSharing removing activity.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v11 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 72);
    v13 = *(_QWORD *)(v0 + 24);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v13, 1, 1, v11);
  }
  v36 = *(_QWORD *)(v0 + 80);
  v37 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE7858()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  return swift_task_switch(sub_100AE78B0, v1, 0);
}

uint64_t sub_100AE78B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 72) + 56))(*(_QWORD *)(v0 + 24), 0, 1, *(_QWORD *)(v0 + 64));
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE790C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = sub_10001A9A8(&qword_1010FDD38);
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for XPCActivity.State(0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[9] = swift_task_alloc(v8);
  v3[10] = swift_task_alloc(v8);
  return swift_task_switch(sub_100AE79A8, a3, 0);
}

uint64_t sub_100AE79A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v44)(_QWORD);
  uint64_t v45;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 56);
  v13 = *(_QWORD *)(v0 + 64);
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = v6;
    v45 = swift_slowAlloc(32, -1);
    v15 = v45;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100006204(&qword_1010EBE98, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State, (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    *(_QWORD *)(v0 + 16) = sub_100016940(v17, v18, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "BeaconSharing activity state %s.", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v20 = v15;
    v6 = v43;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  }

  v22 = *(_QWORD *)(v0 + 64);
  v21 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 56);
  v6(v21, *(_QWORD *)(v0 + 32), v23);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if (v24 == enum case for XPCActivity.State.checkIn(_:) || v24 == enum case for XPCActivity.State.wait(_:))
    goto LABEL_11;
  if (v24 != enum case for XPCActivity.State.run(_:))
  {
    if (v24 == enum case for XPCActivity.State.defer(_:))
    {
      v33 = type metadata accessor for XPCActivity(0);
      v34 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
      v35 = dispatch thunk of Actor.unownedExecutor.getter(v33, v34);
      return swift_task_switch(sub_100AE7E58, v35, v36);
    }
    if (v24 != enum case for XPCActivity.State.continue(_:) && v24 != enum case for XPCActivity.State.done(_:))
    {
      if (v24 == enum case for XPCActivity.State.invalidated(_:))
      {
        v37 = *(_QWORD *)(v0 + 40);
        *(_BYTE *)(v37 + 128) = 0;
        swift_retain();
        swift_retain();
        dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_1010EE128, v37);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        v19(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
      }
    }
LABEL_11:
    v26 = *(_QWORD *)(v0 + 72);
    v27 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v29 = *(_QWORD *)(v0 + 40);
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("SharingSchedulerFired", 21, 2, sub_100AE9358, v29, &type metadata for () + 1);
  v30 = *(_QWORD *)(v29 + 120);
  *(_QWORD *)(v0 + 88) = v30;
  if (v30)
  {
    v31 = *((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria() + 1);
    v44 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                         + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    swift_retain();
    v32 = (_QWORD *)swift_task_alloc(v31);
    *(_QWORD *)(v0 + 96) = v32;
    *v32 = v0;
    v32[1] = sub_100AE7EDC;
    return v44(*(_QWORD *)(v0 + 48));
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 64) + 56))(v38, 1, 1, *(_QWORD *)(v0 + 56));
    sub_100004048(v38, &qword_1010FDD38);
    v39 = type metadata accessor for XPCActivity(0);
    v40 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v41 = dispatch thunk of Actor.unownedExecutor.getter(v39, v40);
    return swift_task_switch(sub_100AE7FDC, v41, v42);
  }
}

uint64_t sub_100AE7E58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_100AE7E98, v1, 0);
}

uint64_t sub_100AE7E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE7EDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_100AE7F3C, v1, 0);
}

uint64_t sub_100AE7F3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v0[8] + 56))(v1, 0, 1, v0[7]);
  sub_100004048(v1, &qword_1010FDD38);
  v2 = type metadata accessor for XPCActivity(0);
  v3 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100AE7FDC, v4, v5);
}

uint64_t sub_100AE7FDC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_100AE9370, v1, 0);
}

void sub_100AE801C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  uint64_t v17;

  v5 = sub_10001A9A8(&qword_1011137A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(a2 + 112, v16, 0, 0);
  v9 = *(_QWORD *)(a2 + 112);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v15 = v2;
    v11 = sub_10001A9A8((uint64_t *)&unk_101109040);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = v9 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain(v9);
    do
    {
      v17 = a1;
      swift_retain();
      AsyncStream.Continuation.yield(_:)(&v17, v11);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v13 += v14;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100AE8140()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[19] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[20] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[21] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v1[22] = v4;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v5);
  v1[24] = swift_task_alloc(v5);
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v1[25] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[26] = v7;
  v1[27] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AE81DC, v0, 0);
}

uint64_t sub_100AE81DC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 224) = v2;
    *v2 = v0;
    v2[1] = sub_100AE82C8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AE82C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AE8328, v3, 0);
}

uint64_t sub_100AE8328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100AE8458, *(_QWORD *)(v0 + 232), 0);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100AE8458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 240) = v3;
  v4 = sub_10001A9A8(&qword_1010ECA48);
  *v3 = v0;
  v3[1] = sub_100AE84E0;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10007C3B8, v1, v4);
}

uint64_t sub_100AE84E0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 240));
  swift_release();
  return swift_task_switch(sub_100AE8538, *(_QWORD *)(v1 + 232), 0);
}

uint64_t sub_100AE8538()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  v0[31] = v0[15];
  return swift_task_switch(sub_100AE8554, v1, 0);
}

uint64_t sub_100AE8554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 248) + 16);
  swift_bridgeObjectRelease();
  if (!v1)
    return swift_task_switch(sub_100AE86A0, *(_QWORD *)(v0 + 232), 0);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "BeaconSharing beacons shared: true.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
  }
  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_100AE86A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 256) = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  *v3 = v0;
  v3[1] = sub_100AE8728;
  return unsafeBlocking<A>(_:)(v0 + 128, sub_10001ED38, v1, v4);
}

uint64_t sub_100AE8728()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 256));
  swift_release();
  return swift_task_switch(sub_100AE8784, *(_QWORD *)(v1 + 232), 0);
}

uint64_t sub_100AE8784()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  v0[33] = v0[16];
  return swift_task_switch(sub_100AE87A0, v1, 0);
}

uint64_t sub_100AE87A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)();

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 272) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = *(int *)(*(_QWORD *)(v0 + 200) + 20);
    *(_DWORD *)(v0 + 344) = v6;
    v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 348) = v7;
    *(_QWORD *)(v0 + 280) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 288) = 0;
    v8 = *(_QWORD *)(v0 + 160);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = v4 + v6;
    sub_1007C1448(v1 + ((v7 + 32) & ~(unint64_t)v7), v4);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    *(_QWORD *)(v0 + 296) = v11;
    v11(v5, v10, v8);
    sub_100AE9178(v4);
    v12 = *(_QWORD *)(v0 + 232);
    v13 = sub_100AE8868;
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 232);
    v13 = sub_100AE8BEC;
  }
  return swift_task_switch(v13, v12, 0);
}

uint64_t sub_100AE8868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 296))(v2, *(_QWORD *)(v0 + 192), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AA960, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 304) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 312) = v10;
  v11 = sub_10001A9A8(&qword_101113778);
  *v10 = v0;
  v10[1] = sub_100AE895C;
  return unsafeBlocking<A>(_:)(v0 + 136, sub_100AE9228, v8, v11);
}

uint64_t sub_100AE895C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 312));
  swift_release();
  return swift_task_switch(sub_100AE89B4, *(_QWORD *)(v1 + 232), 0);
}

uint64_t sub_100AE89B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[24];
  v2 = v0[20];
  v3 = v0[21];
  v4 = v0[19];
  v0[40] = v0[17];
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_100AE8A04, v4, 0);
}

uint64_t sub_100AE8A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 320) + 16);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "BeaconSharing beacons shared: true.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v10 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v11);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 288) + 1;
    if (v7 == *(_QWORD *)(v0 + 272))
    {
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v0 + 232);
      v9 = sub_100AE8BEC;
    }
    else
    {
      *(_QWORD *)(v0 + 288) = v7;
      v13 = *(_QWORD *)(v0 + 216);
      v14 = *(_QWORD *)(v0 + 192);
      v15 = *(_QWORD *)(v0 + 160);
      v16 = *(_QWORD *)(v0 + 168);
      v17 = v13 + *(int *)(v0 + 344);
      sub_1007C1448(*(_QWORD *)(v0 + 264)+ ((*(unsigned __int8 *)(v0 + 348) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 348))+ *(_QWORD *)(v0 + 280) * v7, v13);
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
      *(_QWORD *)(v0 + 296) = v18;
      v18(v14, v17, v15);
      sub_100AE9178(v13);
      v8 = *(_QWORD *)(v0 + 232);
      v9 = sub_100AE8868;
    }
    return swift_task_switch(v9, v8, 0);
  }
}

uint64_t sub_100AE8BEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 328) = v3;
  v4 = sub_10001A9A8(&qword_1010EE100);
  *v3 = v0;
  v3[1] = sub_100AE8C74;
  return unsafeBlocking<A>(_:)(v0 + 144, sub_100068004, v1, v4);
}

uint64_t sub_100AE8C74()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 328));
  swift_release();
  return swift_task_switch(sub_100AE8CD0, *(_QWORD *)(v1 + 232), 0);
}

uint64_t sub_100AE8CD0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  v0[42] = v0[18];
  return swift_task_switch(sub_100AE8CE8, v1, 0);
}

uint64_t sub_100AE8CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 336) + 16);
  swift_bridgeObjectRelease();
  if (!v1)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6748);
    v4 = Logger.logObject.getter(v9);
    v5 = static os_log_type_t.info.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      v7 = "BeaconSharing beacons shared: false.";
      goto LABEL_10;
    }
LABEL_11:

    swift_release();
    goto LABEL_12;
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (!os_log_type_enabled(v4, v5))
    goto LABEL_11;
  v6 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v6 = 0;
  v7 = "BeaconSharing beacons shared: true.";
LABEL_10:
  _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
  swift_slowDealloc(v6, -1, -1);
  swift_release();

LABEL_12:
  v11 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v1 != 0);
}

uint64_t sub_100AE8EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unint64_t *v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  _BYTE v15[24];

  v4 = sub_10001A9A8((uint64_t *)&unk_101109040);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = (unint64_t *)(a2 + 112);
  swift_beginAccess(a2 + 112, v15, 33, 0);
  v9 = *(_QWORD *)(a2 + 112);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(_QWORD *)(a2 + 112) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v9 = sub_1007CA980(0, *(_QWORD *)(v9 + 16) + 1, 1, v9);
    *v8 = v9;
  }
  v12 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    v9 = sub_1007CA980(v11 > 1, v12 + 1, 1, v9);
    *v8 = v9;
  }
  *(_QWORD *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess(v15);
}

uint64_t sub_100AE8FE8()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[17]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SharingScheduler()
{
  return objc_opt_self(_TtC12searchpartyd16SharingScheduler);
}

uint64_t sub_100AE903C(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[2] = a1;
  v3 = sub_10001A9A8(&qword_1010EE420);
  v2[3] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[4] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[5] = swift_task_alloc(v5);
  v6 = swift_task_alloc(v5);
  v7 = *v1;
  v2[6] = v6;
  v2[7] = v7;
  return swift_task_switch(sub_100AE90B0, v7, 0);
}

uint64_t sub_100AE90B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = type metadata accessor for Transaction(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v1, v5);
  AsyncStream.init(_:bufferingPolicy:_:)(v6, v3, sub_1000D9C5C, v2, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AE9178(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100AE91B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100AE9228@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A82918(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_100AE9268()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AE928C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_101113784);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004C28;
  return sub_100AE7390(a1, a2, v7, v6);
}

uint64_t sub_100AE92F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_101113794);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_100AE790C(a1, a2, v2);
}

void sub_100AE9358(uint64_t a1)
{
  uint64_t v1;

  sub_100AE801C(a1, v1);
}

uint64_t sub_100AE9374()
{
  uint64_t v0;
  uint64_t v1;
  id v2;

  v1 = v0;
  v2 = *(id *)(v0 + 104);
  CurrentLocationMonitor.forceStopMonitor()();

  sub_1002EB2D8(v1 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 + 32));

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance(v1, 112, 7);
}

uint64_t type metadata accessor for IntentHandler()
{
  return objc_opt_self(_TtC12searchpartyd13IntentHandler);
}

uint64_t sub_100AE9408(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v7 - 8);
  v26 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Intent(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[1] = *(_QWORD *)(v2 + 72);
  v14 = swift_allocObject(&unk_1010AAA88, 24, 7);
  swift_weakInit(v14 + 16, v2);
  sub_10005972C(a1, (uint64_t)v13, type metadata accessor for Intent);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = swift_allocObject(&unk_1010AAB28, v16 + v12, v15 | 7);
  *(_QWORD *)(v17 + 16) = v14;
  sub_1000126EC((uint64_t)v13, v17 + v16, type metadata accessor for Intent);
  aBlock[4] = sub_100AED1BC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010AAB40;
  v18 = _Block_copy(aBlock);
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v28 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  swift_release();
  return swift_release();
}

uint64_t sub_100AE9690(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = static os_log_type_t.default.getter(result);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v6 = qword_1011B7D70;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    v9 = v8;
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    v10 = a2[40];
    if (a2[40])
    {
      if (v10 == 1)
      {
        v11 = 0xEA00000000007265;
        v12 = 0x7473696765726E75;
      }
      else
      {
        v11 = 0xEE00657461647055;
        v12 = 0x6E6F697461636F6CLL;
      }
    }
    else
    {
      v11 = 0xE800000000000000;
      v12 = 0x7265747369676572;
    }
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_10001AA00();
    *(_QWORD *)(v9 + 32) = v12;
    *(_QWORD *)(v9 + 40) = v11;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Handling intent session. Type: %@", 33, 2, v9);
    swift_bridgeObjectRelease();
    if (v10)
    {
      if (v10 == 1)
        sub_100AEB6E8((uint64_t)a2);
      else
        sub_100AEA090(a2);
    }
    else
    {
      sub_100AE982C((uint64_t)a2);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100AE982C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v71;
  uint64_t v72;
  _QWORD v73[5];
  _QWORD v74[5];
  char v75[24];

  v2 = (_QWORD *)v1;
  v4 = type metadata accessor for Intent(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v4);
  v8 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v72 = (uint64_t)&v71 - v9;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD **)((char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(id *)(v1 + 104);
  CurrentLocationMonitor.startMonitorIfNeeded()();

  v15 = (void *)v2[9];
  *v13 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = v15;
  v17 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  v18 = *(_BYTE *)a1;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = *(_QWORD *)(a1 + 16);
  swift_beginAccess(v2 + 12, v75, 0, 0);
  v22 = v2[12];
  if (*(_QWORD *)(v22 + 16))
  {
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    v23 = sub_100519120(v18, v19, v20);
    if ((v24 & 1) != 0)
    {
      v25 = *(_QWORD **)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v2 + 12;
      v27 = v72;
      sub_10005972C(a1, v72, type metadata accessor for Intent);
      v28 = *(unsigned __int8 *)(v5 + 80);
      v29 = (v28 + 16) & ~v28;
      v30 = v28 | 7;
      v31 = swift_allocObject(&unk_1010AAAD8, v29 + v6, v28 | 7);
      v32 = v27;
      v10 = (uint64_t)v26;
      sub_1000126EC(v32, v31 + v29, type metadata accessor for Intent);
      v33 = swift_allocObject(&unk_1010AAA10, 24, 7);
      swift_weakInit(v33 + 16, v25);
      sub_10005972C(a1, (uint64_t)v8, type metadata accessor for Intent);
      v34 = (v28 + 40) & ~v28;
      v35 = (_QWORD *)swift_allocObject(&unk_1010AAB00, v34 + v6, v30);
      v35[2] = v33;
      v35[3] = sub_100AECFC4;
      v35[4] = v31;
      sub_1000126EC((uint64_t)v8, (uint64_t)v35 + v34, type metadata accessor for Intent);
      v36 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v36);
      *(&v71 - 4) = v25;
      *(&v71 - 3) = sub_100AED0C0;
      *(&v71 - 2) = v35;
      swift_retain();
      swift_retain();
      static Transaction.named<A>(_:with:)("IntentSession.intentAsync", 25, 2, sub_10068642C, &v71 - 6, &type metadata for () + 1);
      swift_release();
      swift_release();
      swift_release();
      v37 = swift_release();
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
    v21 = swift_bridgeObjectRelease();
  }
  v71 = v2 + 12;
  v38 = static os_log_type_t.default.getter(v21);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v39 = qword_1011B7D70;
  v40 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v41 = swift_allocObject(v40, 72, 7);
  *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v41 + 56) = &type metadata for String;
  *(_QWORD *)(v41 + 64) = sub_10001AA00();
  *(_QWORD *)(v41 + 32) = v19;
  *(_QWORD *)(v41 + 40) = v20;
  *(_QWORD *)&v42 = swift_bridgeObjectRetain(v20).n128_u64[0];
  os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Start monitoring for destination: %@", 36, 2, v41, v42);
  swift_bridgeObjectRelease();
  sub_100030784((uint64_t)(v2 + 4), (uint64_t)v74);
  v43 = v2[10];
  v44 = v72;
  sub_10005972C(a1, v72, type metadata accessor for Intent);
  v45 = sub_10009F5D0((uint64_t)v74, v74[3]);
  __chkstk_darwin(v45);
  v47 = (uint64_t *)((char *)&v71 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v48 + 16))(v47);
  v49 = *v47;
  v50 = type metadata accessor for BeaconManagerService(0);
  v73[3] = v50;
  v73[4] = &off_101091D10;
  v73[0] = v49;
  v51 = type metadata accessor for IntentSession(0);
  v52 = swift_allocObject(v51, *(unsigned int *)(v51 + 48), *(unsigned __int16 *)(v51 + 52));
  v53 = sub_10009F5D0((uint64_t)v73, v50);
  __chkstk_darwin(v53);
  v55 = (uint64_t *)((char *)&v71 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v56 + 16))(v55);
  v57 = *v55;
  swift_retain();
  v58 = sub_100AECC18(v57, v43, v44, v52);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v74);
  *(_QWORD *)(v58 + 24) = &off_1010AA9B8;
  swift_unknownObjectWeakAssign(v58 + 16, v2);
  v59 = *(_QWORD *)(a1 + 8);
  v60 = *(_QWORD *)(a1 + 16);
  v61 = *(_BYTE *)a1;
  v10 = (uint64_t)v71;
  swift_beginAccess(v71, v74, 33, 0);
  swift_bridgeObjectRetain(v60);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2[12]);
  v73[0] = v2[12];
  v2[12] = 0x8000000000000000;
  sub_10010E5B8(v58, v61, v59, v60, isUniquelyReferenced_nonNull_native);
  v2[12] = v73[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(v74);
  v63 = v2[11];
  v64 = swift_allocObject(&unk_1010AAA88, 24, 7);
  swift_weakInit(v64 + 16, v2);
  v65 = swift_allocObject(&unk_1010AAAB0, 32, 7);
  *(_QWORD *)(v65 + 16) = v64;
  *(_QWORD *)(v65 + 24) = v58;
  swift_retain();
  swift_retain();
  sub_1006825BC(v63, (uint64_t)sub_100AECEFC, v65);
  swift_release();
  swift_release();
  v37 = swift_release();
LABEL_9:
  v17 = static os_log_type_t.default.getter(v37);
  if (qword_1010EA290 != -1)
LABEL_12:
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v66 = qword_1011B7D70;
  v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v68 = swift_allocObject(v67, 72, 7);
  *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
  v69 = *(_QWORD *)(*(_QWORD *)v10 + 16);
  *(_QWORD *)(v68 + 56) = &type metadata for Int;
  *(_QWORD *)(v68 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v68 + 32) = v69;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v66, "registeredIntents count: %llu", v71);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AE9F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  double v9;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v3 = qword_1011B7D70;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 112, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B10;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  v8 = sub_10001AA00();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 96) = &type metadata for String;
  *(_QWORD *)(v5 + 104) = v8;
  *(_QWORD *)(v5 + 64) = v8;
  *(_QWORD *)(v5 + 72) = v7;
  *(_QWORD *)(v5 + 80) = v6;
  *(_QWORD *)&v9 = swift_bridgeObjectRetain_n(v6, 2).n128_u64[0];
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "Updated monitoring for destination: %@, fromID: %@", 50, 2, v5, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AEA008(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    swift_retain();
    swift_release();
    sub_100263FD4(a2 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID);
    return swift_release();
  }
  return result;
}

uint64_t sub_100AEA090(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[4];
  unsigned int v32;
  uint64_t v33;

  v3 = type metadata accessor for Intent(0);
  __chkstk_darwin(v3);
  v5 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10001A9A8(&qword_1010F8F70);
  __chkstk_darwin(v6);
  v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for BeaconLocationUpdate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v31[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000F9B8((uint64_t)&a1[*(int *)(v3 + 36)], (uint64_t)v8, &qword_1010F8F70);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100004048((uint64_t)v8, &qword_1010F8F70);
  sub_1000126EC((uint64_t)v8, (uint64_t)v12, type metadata accessor for BeaconLocationUpdate);
  v33 = v1;
  v14 = sub_1007FA4A4();
  v32 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v15 = qword_1011B7D70;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 112, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  sub_1008A4DC4(*a1, *((_QWORD *)a1 + 1), *((void **)a1 + 2));
  v19 = v18;
  v21 = v20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v22 = sub_10001AA00();
  *(_QWORD *)(v17 + 64) = v22;
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  v23 = *(int *)(v9 + 36);
  v24 = v12[v23];
  v25 = sub_100C96A58(v12[v23]);
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v22;
  *(_QWORD *)(v17 + 72) = v25;
  *(_QWORD *)(v17 + 80) = v26;
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v15, "Handle location update from: %@, location source: %@", 52, 2, v17);
  swift_bridgeObjectRelease();
  sub_10005972C((uint64_t)a1, (uint64_t)v5, type metadata accessor for Intent);
  if (v24 != 10)
  {
    sub_1000126B0((uint64_t)v5, type metadata accessor for Intent);
    goto LABEL_9;
  }
  v27 = v5[41];
  sub_1000126B0((uint64_t)v5, type metadata accessor for Intent);
  if ((v27 & 1) != 0)
  {
LABEL_9:
    v28 = 0;
    v30 = 0;
    v29 = 0;
    goto LABEL_10;
  }
  v28 = *a1;
  v30 = *((_QWORD *)a1 + 1);
  v29 = *((_QWORD *)a1 + 2);
  swift_bridgeObjectRetain(v29);
LABEL_10:
  sub_100AEA350((uint64_t)v12, v28, v30, v29);
  swift_bridgeObjectRelease();
  return sub_1000126B0((uint64_t)v12, type metadata accessor for BeaconLocationUpdate);
}

uint64_t sub_100AEA350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  __int128 *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  __int128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  int *v93;
  char *v94;
  __int128 *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  void (*v111)(char *, uint64_t, uint64_t);
  char v112[8];
  uint64_t v113;

  v101 = a3;
  v102 = a4;
  v100 = a2;
  v104 = a1;
  v5 = type metadata accessor for BeaconLocationUpdate(0);
  v99 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v108 = v6;
  v109 = (uint64_t)v83 - ((unint64_t)(v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for BeaconEstimatedLocation(0);
  v97 = *(_QWORD *)(v98 - 8);
  v7 = __chkstk_darwin(v98);
  v96 = (uint64_t)v83 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = v8;
  __chkstk_darwin(v7);
  v95 = (__int128 *)((char *)v83 - v9);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v94 = (char *)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = v13;
  __chkstk_darwin(v12);
  v110 = (char *)v83 - v14;
  v15 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v15);
  v17 = (char *)v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (_QWORD *)((char *)v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v103 = v4;
  v22 = *(void **)(v4 + 72);
  *v21 = v22;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  v23 = v22;
  v24 = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v19 + 8))(v21, v18);
  if ((v24 & 1) != 0)
  {
    v25 = *(_QWORD *)(v104 + *(int *)(v5 + 32));
    v26 = *(_QWORD *)(v25 + 16);
    v83[1] = v25;
    if (v26)
    {
      v93 = (int *)v5;
      v27 = *(unsigned __int8 *)(v11 + 80);
      v89 = ~v27;
      v28 = v25 + ((v27 + 32) & ~v27);
      v88 = *(_QWORD *)(v11 + 72);
      v29 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v90 = v27;
      v87 = v107 + v27;
      v86 = v106 + 7;
      v85 = v108 + 7;
      swift_bridgeObjectRetain(v25);
      v84 = xmmword_100E22FC0;
      v30 = (uint64_t)v110;
      v31 = v103;
      v92 = v11;
      v91 = v17;
      v111 = v29;
      while (1)
      {
        v29(v17, v28, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v17, 0, 1, v10);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1, v10) == 1)
          break;
        v108 = *(char **)(v11 + 32);
        ((void (*)(uint64_t, char *, uint64_t))v108)(v30, v17, v10);
        v32 = *(_QWORD *)(v31 + 80);
        sub_10080B648(v30, (uint64_t)v112);
        v33 = v113;
        v34 = sub_100004048((uint64_t)v112, (uint64_t *)&unk_1010EE310);
        if (!v33)
        {
          v17 = (char *)v30;
          v72 = swift_bridgeObjectRelease();
          v22 = (void *)static os_log_type_t.error.getter(v72);
          if (qword_1010EA290 != -1)
            goto LABEL_14;
          goto LABEL_12;
        }
        v35 = (int *)v98;
        v107 = v26;
        v36 = v95;
        UUID.init()(v34);
        v37 = v10;
        v111((char *)v36 + v35[6], v30, v10);
        v105 = v32;
        v38 = v93;
        v39 = v93[5];
        v40 = v93[6];
        v106 = v28;
        v41 = v104;
        v42 = *(_QWORD *)(v104 + v39);
        v43 = *(_QWORD *)(v104 + v40);
        v44 = *(_QWORD *)(v104 + v93[7]);
        v45 = (char *)v36 + v35[10];
        v46 = type metadata accessor for Date(0);
        v47 = *(_QWORD *)(v46 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v45, v41, v46);
        LOBYTE(v45) = *(_BYTE *)(v41 + v38[9]);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))((char *)v36 + v35[12], 1, 1, v46);
        *v36 = v84;
        *(_QWORD *)((char *)v36 + v35[7]) = v42;
        *(_QWORD *)((char *)v36 + v35[8]) = v43;
        *(_QWORD *)((char *)v36 + v35[9]) = v44;
        *((_BYTE *)v36 + v35[11]) = (_BYTE)v45;
        *(_QWORD *)((char *)v36 + v35[13]) = 0;
        v48 = v96;
        sub_10005972C((uint64_t)v36, v96, type metadata accessor for BeaconEstimatedLocation);
        v49 = v94;
        v111(v94, (uint64_t)v110, v37);
        sub_10005972C(v41, v109, type metadata accessor for BeaconLocationUpdate);
        v50 = *(unsigned __int8 *)(v97 + 80);
        v51 = (v50 + 16) & ~v50;
        v52 = (v87 + v51) & v89;
        v53 = (v86 + v52) & 0xFFFFFFFFFFFFFFF8;
        v54 = *(unsigned __int8 *)(v99 + 80);
        v55 = v37;
        v56 = (v54 + v53 + 24) & ~v54;
        v57 = (unint64_t)&v85[v56] & 0xFFFFFFFFFFFFFFF8;
        v58 = swift_allocObject(&unk_1010AAA60, v57 + 8, v90 | v50 | v54 | 7);
        sub_1000126EC(v48, v58 + v51, type metadata accessor for BeaconEstimatedLocation);
        v59 = v58 + v52;
        v11 = v92;
        ((void (*)(uint64_t, char *, uint64_t))v108)(v59, v49, v55);
        v60 = (_QWORD *)(v58 + v53);
        v61 = v102;
        v31 = v103;
        v62 = v101;
        *v60 = v100;
        v60[1] = v62;
        v60[2] = v61;
        v63 = v58 + v56;
        v17 = v91;
        v64 = v110;
        sub_1000126EC(v109, v63, type metadata accessor for BeaconLocationUpdate);
        *(_QWORD *)(v58 + v57) = v31;
        v29 = v111;
        v65 = v61;
        v30 = (uint64_t)v64;
        swift_bridgeObjectRetain(v65);
        swift_retain();
        sub_100801BA0((uint64_t)v36, (uint64_t)sub_100AECB58, v58);
        swift_release();
        v66 = (uint64_t)v36;
        v67 = v107;
        sub_1000126B0(v66, type metadata accessor for BeaconEstimatedLocation);
        v10 = v55;
        v68 = v55;
        v69 = v106;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v64, v68);
        v28 = v69 + v88;
        v26 = v67 - 1;
        if (!v26)
          goto LABEL_9;
      }
    }
    else
    {
      v70 = swift_bridgeObjectRetain(v25);
LABEL_9:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56))(v17, 1, 1, v10, v70);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_1010EA290, sub_100B5DC7C);
LABEL_12:
    v73 = qword_1011B7D70;
    v74 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v75 = swift_allocObject(v74, 112, 7);
    *(_OWORD *)(v75 + 16) = xmmword_100E22B10;
    v76 = UUID.uuidString.getter(v75);
    v78 = v77;
    *(_QWORD *)(v75 + 56) = &type metadata for String;
    v79 = sub_10001AA00();
    *(_QWORD *)(v75 + 64) = v79;
    *(_QWORD *)(v75 + 32) = v76;
    *(_QWORD *)(v75 + 40) = v78;
    v80 = v109;
    sub_10005972C(v104, v109, type metadata accessor for BeaconLocationUpdate);
    v81 = String.init<A>(describing:)(v80, v93);
    *(_QWORD *)(v75 + 96) = &type metadata for String;
    *(_QWORD *)(v75 + 104) = v79;
    *(_QWORD *)(v75 + 72) = v81;
    *(_QWORD *)(v75 + 80) = v82;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v73, "No beacon record found for identifier: %@. Not storing location update %@", 73, 2, v75);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
}

uint64_t sub_100AEAAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t EnumCaseMultiPayload;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;

  v97 = a8;
  v98 = a6;
  v92 = a7;
  v90 = a5;
  v94 = a4;
  v99 = a3;
  v9 = type metadata accessor for Date(0);
  v95 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v89 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v93 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v88 = (char *)&v83 - v15;
  v16 = (int *)type metadata accessor for LocationProvider(0);
  v17 = __chkstk_darwin(v16);
  v91 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v96 = (uint64_t)&v83 - v19;
  v20 = sub_10001A9A8(&qword_1010F4A20);
  __chkstk_darwin(v20);
  v22 = (unint64_t *)((char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v22, &qword_1010F4A20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v20);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v24 = *v22;
    v25 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v26 = qword_1011B7D70;
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = swift_allocObject(v27, 152, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100E221E0;
    type metadata accessor for BeaconEstimatedLocation(0);
    v29 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v9, v29);
    v32 = v31;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    v33 = sub_10001AA00();
    *(_QWORD *)(v28 + 64) = v33;
    *(_QWORD *)(v28 + 32) = v30;
    *(_QWORD *)(v28 + 40) = v32;
    v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v11, v34);
    *(_QWORD *)(v28 + 96) = &type metadata for String;
    *(_QWORD *)(v28 + 104) = v33;
    *(_QWORD *)(v28 + 72) = v35;
    *(_QWORD *)(v28 + 80) = v36;
    v100 = v24;
    swift_errorRetain(v24);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v38 = String.init<A>(describing:)(&v100, v37);
    *(_QWORD *)(v28 + 136) = &type metadata for String;
    *(_QWORD *)(v28 + 144) = v33;
    *(_QWORD *)(v28 + 112) = v38;
    *(_QWORD *)(v28 + 120) = v39;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Saving BeaconEstimatedLocation %@ for CL %@ error: %@", 53, 2, v28);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v24);
  }
  else
  {
    v87 = v22;
    v41 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v86 = qword_1011B7D70;
    v84 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v42 = swift_allocObject(v84, 112, 7);
    *(_OWORD *)(v42 + 16) = xmmword_100E22B10;
    type metadata accessor for BeaconEstimatedLocation(0);
    v83 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v9, v83);
    v45 = v44;
    *(_QWORD *)(v42 + 56) = &type metadata for String;
    v46 = sub_10001AA00();
    *(_QWORD *)(v42 + 64) = v46;
    *(_QWORD *)(v42 + 32) = v43;
    *(_QWORD *)(v42 + 40) = v45;
    v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v48 = v99;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v11, v47);
    *(_QWORD *)(v42 + 96) = &type metadata for String;
    *(_QWORD *)(v42 + 104) = v46;
    v85 = v46;
    *(_QWORD *)(v42 + 72) = v49;
    *(_QWORD *)(v42 + 80) = v50;
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v86, "Saved BeaconEstimatedLocation %@ from CL for beacon %@", 54, 2, v42);
    swift_bridgeObjectRelease();
    if (v98)
    {
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      v52 = v88;
      v53 = v48;
      v54 = v98;
      v51(v88, v53, v11);
      v55 = v9;
      v99 = v12;
      v56 = v95;
      v57 = *(void (**)(char *, uint64_t))(v95 + 16);
      v58 = v89;
      v59 = v55;
      v57(v89, v92);
      v60 = (uint64_t)v91;
      v51(&v91[v16[5]], (uint64_t)v52, v11);
      v61 = v60 + v16[6];
      *(_BYTE *)v61 = v94;
      *(_QWORD *)(v61 + 8) = v90;
      *(_QWORD *)(v61 + 16) = v54;
      ((void (*)(uint64_t, char *, uint64_t))v57)(v60 + v16[7], v58, v59);
      swift_bridgeObjectRetain(v54);
      v62 = v93;
      UUID.init()(v63);
      v64 = *(void (**)(char *, uint64_t))(v56 + 8);
      v65 = v59;
      v64(v58, v59);
      v66 = v99;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v52, v11);
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v60, v62, v11);
      v67 = v96;
      v68 = sub_1000126EC(v60, v96, type metadata accessor for LocationProvider);
      LODWORD(v99) = static os_log_type_t.default.getter(v68);
      v69 = qword_1011B7D70;
      v70 = swift_allocObject(v84, 72, 7);
      *(_OWORD *)(v70 + 16) = xmmword_100E22B00;
      sub_10005972C(v67, v60, type metadata accessor for LocationProvider);
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v65, v83);
      v73 = v72;
      v74 = v60 + v16[6];
      v76 = *(_QWORD *)(v74 + 8);
      v75 = *(void **)(v74 + 16);
      v100 = 0;
      v101 = 0xE000000000000000;
      swift_bridgeObjectRetain(v75);
      _StringGuts.grow(_:)(36);
      swift_bridgeObjectRelease();
      v100 = 0xD000000000000013;
      v101 = 0x8000000100EEE180;
      v77._countAndFlagsBits = v76;
      v77._object = v75;
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      v78._countAndFlagsBits = 0x7473656D6974202CLL;
      v78._object = (void *)0xED0000203A706D61;
      String.append(_:)(v78);
      v79._countAndFlagsBits = v71;
      v79._object = v73;
      String.append(_:)(v79);
      swift_bridgeObjectRelease();
      v80 = v100;
      v81 = v101;
      sub_1000126B0(v60, type metadata accessor for LocationProvider);
      v82 = v85;
      *(_QWORD *)(v70 + 56) = &type metadata for String;
      *(_QWORD *)(v70 + 64) = v82;
      *(_QWORD *)(v70 + 32) = v80;
      *(_QWORD *)(v70 + 40) = v81;
      os_log(_:dso:log:_:_:)(v99, &_mh_execute_header, v69, "Store location provider: %@", 27, 2, v70);
      swift_bridgeObjectRelease();
      sub_100CAA6B0(v67, (uint64_t)sub_100AEB168, 0);
      sub_1000126B0(v67, type metadata accessor for LocationProvider);
    }
    return sub_100004048((uint64_t)v87, &qword_1010F4A20);
  }
}

uint64_t sub_100AEB168(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  char *v28;
  uint64_t v29;
  void *v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD v38[3];
  _BYTE v39[8];

  v2 = type metadata accessor for LocationProvider(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101113910);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v7, &qword_101113910);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v5);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v9 = *v7;
    v10 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v11 = qword_1011B7D70;
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v9, v39, v38);
    v14 = Error.localizedDescription.getter(v38[1], v38[2]);
    v16 = v15;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_10001AA00();
    *(_QWORD *)(v13 + 32) = v14;
    *(_QWORD *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Storing location provider on disk failed. Error: %@", 51, 2, v13);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v9);
  }
  else
  {
    v18 = sub_1000126EC((uint64_t)v7, (uint64_t)v4, type metadata accessor for LocationProvider);
    v19 = static os_log_type_t.default.getter(v18);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v20 = qword_1011B7D70;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    v23 = type metadata accessor for Date(0);
    v24 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    v27 = v26;
    v28 = &v4[*(int *)(v2 + 24)];
    v29 = *((_QWORD *)v28 + 1);
    v30 = (void *)*((_QWORD *)v28 + 2);
    v36 = 0;
    v37 = 0xE000000000000000;
    swift_bridgeObjectRetain(v30);
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    v36 = 0xD000000000000013;
    v37 = 0x8000000100EEE180;
    v31._countAndFlagsBits = v29;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v32._countAndFlagsBits = 0x7473656D6974202CLL;
    v32._object = (void *)0xED0000203A706D61;
    String.append(_:)(v32);
    v33._countAndFlagsBits = v25;
    v33._object = v27;
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    v34 = v36;
    v35 = v37;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v34;
    *(_QWORD *)(v22 + 40) = v35;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Stored location provider on disk: %@", 36, 2, v22);
    swift_bridgeObjectRelease();
    return sub_1000126B0((uint64_t)v4, type metadata accessor for LocationProvider);
  }
}

uint64_t sub_100AEB4D0(void *a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = (int *)type metadata accessor for BeaconLocationUpdate(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.default.getter(v5);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v9 = qword_1011B7D70;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  v12 = objc_msgSend(a1, "description");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Storing CLLocation %@ on disk", 29, 2, v11);
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(a1, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

  objc_msgSend(a1, "coordinate");
  v18 = v17;
  objc_msgSend(a1, "coordinate");
  v20 = v19;
  objc_msgSend(a1, "horizontalAccuracy");
  *(_QWORD *)&v7[v4[5]] = v18;
  *(_QWORD *)&v7[v4[6]] = v20;
  *(_QWORD *)&v7[v4[7]] = v21;
  *(_QWORD *)&v7[v4[8]] = a2;
  v7[v4[9]] = 11;
  swift_bridgeObjectRetain(a2);
  sub_100AEA350((uint64_t)v7, 0, 0, 0);
  return sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconLocationUpdate);
}

void sub_100AEB6E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  id v33;
  _OWORD v34[2];
  _BYTE v35[24];
  _BYTE v36[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 72);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  v10 = *(_BYTE *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  swift_beginAccess(v2 + 96, v36, 0, 0);
  v14 = *(_QWORD *)(v2 + 96);
  if (*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRetain_n(v11, 2);
    swift_bridgeObjectRetain(v14);
    v15 = sub_100519120(v10, v12, v11);
    if ((v16 & 1) != 0)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
      swift_retain();
      swift_bridgeObjectRelease();
      v18 = swift_bridgeObjectRelease();
      v19 = static os_log_type_t.default.getter(v18);
      if (qword_1010EA290 != -1)
        swift_once(&qword_1010EA290, sub_100B5DC7C);
      v20 = qword_1011B7D70;
      v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v22 = swift_allocObject(v21, 72, 7);
      v34[0] = xmmword_100E22B00;
      *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v22 + 56) = &type metadata for String;
      *(_QWORD *)(v22 + 64) = sub_10001AA00();
      *(_QWORD *)(v22 + 32) = v12;
      *(_QWORD *)(v22 + 40) = v11;
      *(_QWORD *)&v23 = swift_bridgeObjectRetain(v11).n128_u64[0];
      os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Removing monitoring session for: %@", 35, 2, v22, v23);
      swift_bridgeObjectRelease();
      swift_beginAccess(v2 + 96, v35, 33, 0);
      sub_100104444(v10, v12, v11);
      swift_endAccess(v35);
      swift_release();
      v24 = sub_1002640F4(v17 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID);
      v25 = static os_log_type_t.default.getter(v24);
      v26 = qword_1011B7D70;
      v27 = swift_allocObject(v21, 72, 7);
      *(_OWORD *)(v27 + 16) = v34[0];
      v28 = *(_QWORD *)(*(_QWORD *)(v2 + 96) + 16);
      *(_QWORD *)(v27 + 56) = &type metadata for Int;
      *(_QWORD *)(v27 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v27 + 32) = v28;
      os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "registeredIntents count: %llu", *(_QWORD *)&v34[0]);
      swift_bridgeObjectRelease();
      v29 = swift_allocObject(&unk_1010AA9E8, 40, 7);
      *(_BYTE *)(v29 + 16) = v10;
      *(_QWORD *)(v29 + 24) = v12;
      *(_QWORD *)(v29 + 32) = v11;
      v30 = swift_allocObject(&unk_1010AAA10, 24, 7);
      swift_weakInit(v30 + 16, v17);
      v31 = (_QWORD *)swift_allocObject(&unk_1010AAA38, 40, 7);
      v31[2] = v30;
      v31[3] = sub_100AEC938;
      v31[4] = v29;
      v32 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v32);
      *(_QWORD *)&v34[-2] = v17;
      *((_QWORD *)&v34[-2] + 1) = sub_100AEC970;
      *(_QWORD *)&v34[-1] = v31;
      swift_retain();
      swift_retain();
      static Transaction.named<A>(_:with:)("IntentSession.intentAsync", 25, 2, sub_100686388, &v34[-3], &type metadata for () + 1);
      swift_release();
      swift_release();
      swift_release();
      v13 = swift_release();
    }
    else
    {
      swift_bridgeObjectRelease_n(v11, 2);
      v13 = swift_bridgeObjectRelease();
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 96) + 16))
  {
    a1 = static os_log_type_t.default.getter(v13);
    if (qword_1010EA290 == -1)
    {
LABEL_10:
      os_log(_:dso:log:_:_:)(a1, &_mh_execute_header, qword_1011B7D70, "Stopped location monitoring", 27, 2, _swiftEmptyArrayStorage);
      v33 = *(id *)(v2 + 104);
      CurrentLocationMonitor.forceStopMonitor()();

      return;
    }
LABEL_13:
    swift_once(&qword_1010EA290, sub_100B5DC7C);
    goto LABEL_10;
  }
}

uint64_t sub_100AEBB54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;

  v5 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v6 = qword_1011B7D70;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10001AA00();
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a3;
  *(_QWORD *)&v9 = swift_bridgeObjectRetain(a3).n128_u64[0];
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Stop monitoring session for: %@", 31, 2, v8, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AEBC30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t result;
  _BYTE v12[24];

  v3 = a2 + 16;
  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v5 = qword_1011B7D70;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v8;
  *(_QWORD *)&v10 = swift_bridgeObjectRetain(v8).n128_u64[0];
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Monitoring timer fired for destination: %@", 42, 2, v7, v10);
  swift_bridgeObjectRelease();
  swift_beginAccess(v3, v12, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_100AEB6E8(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100AEBD58(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t Strong;
  uint64_t v83;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _QWORD v100[3];
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;

  v90 = a4;
  v97 = a2;
  v89 = type metadata accessor for Date(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for BeaconLocationUpdate(0);
  __chkstk_darwin(v92);
  v8 = (uint64_t)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v99 - 8);
  v10 = __chkstk_darwin(v99);
  v12 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v85 - v14;
  LODWORD(v95) = static os_log_type_t.default.getter(v13);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v94 = qword_1011B7D70;
  v86 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v93 = swift_allocObject(v86, 112, 7);
  *(_OWORD *)(v93 + 16) = xmmword_100E22B10;
  v16 = *(_QWORD *)(a1 + 16);
  v17 = _swiftEmptyArrayStorage;
  v98 = v12;
  v96 = a3;
  v91 = a1;
  if (v16)
  {
    v85 = (char *)v8;
    v103 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v16, 0);
    v18 = a1 + 32;
    v19 = v16;
    do
    {
      sub_100030784(v18, (uint64_t)v100);
      v21 = v101;
      v20 = v102;
      sub_10001AA44(v100, v101);
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v20 + 8) + 8) + 32))(v21);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v99);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
      v17 = v103;
      if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0)
      {
        sub_10009A2F4(0, v17[2] + 1, 1);
        v17 = v103;
      }
      v27 = v17[2];
      v26 = v17[3];
      if (v27 >= v26 >> 1)
      {
        sub_10009A2F4(v26 > 1, v27 + 1, 1);
        v17 = v103;
      }
      v17[2] = v27 + 1;
      v28 = &v17[2 * v27];
      v28[4] = v23;
      v28[5] = v25;
      v18 += 40;
      --v19;
    }
    while (v19);
    v8 = (uint64_t)v85;
  }
  v29 = Array.description.getter(v17, &type metadata for String);
  v31 = v30;
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)v93;
  *(_QWORD *)(v93 + 56) = &type metadata for String;
  v33 = sub_10001AA00();
  v32[8] = v33;
  v32[4] = v29;
  v32[5] = v31;
  v34 = objc_msgSend(v97, "debugDescription");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v32[12] = &type metadata for String;
  v32[13] = v33;
  v85 = (char *)v33;
  v32[9] = v35;
  v32[10] = v37;
  os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v94, "Nearby beacons (%@) found at location %@", 40, 2, v32);
  swift_bridgeObjectRelease();
  v38 = _swiftEmptyArrayStorage;
  if (v16)
  {
    v103 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v16, 0);
    v39 = v91 + 32;
    v38 = v103;
    v40 = v96;
    do
    {
      sub_100030784(v39, (uint64_t)v100);
      v42 = v101;
      v41 = v102;
      sub_10001AA44(v100, v101);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 32))(v42);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      {
        sub_10009A578(0, v38[2] + 1, 1);
        v38 = v103;
      }
      v44 = v38[2];
      v43 = v38[3];
      if (v44 >= v43 >> 1)
      {
        sub_10009A578(v43 > 1, v44 + 1, 1);
        v38 = v103;
      }
      v38[2] = v44 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v38+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v44, v98, v99);
      v103 = v38;
      v39 += 40;
      --v16;
    }
    while (v16);
  }
  else
  {
    v40 = v96;
  }
  if (!v38[2])
    return swift_bridgeObjectRelease();
  v45 = v97;
  v46 = objc_msgSend(v97, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v46);

  objc_msgSend(v45, "latitude");
  v48 = v47;
  objc_msgSend(v45, "longitude");
  v50 = v49;
  objc_msgSend(v45, "horizontalAccuracy");
  v51 = (int *)v92;
  v52 = *(int *)(v92 + 20);
  *(_QWORD *)(v8 + v52) = v48;
  v53 = (char *)v51[6];
  *(_QWORD *)&v53[v8] = v50;
  v54 = (char *)v51[7];
  *(_QWORD *)&v54[v8] = v55;
  v56 = v51[8];
  *(_QWORD *)(v8 + v56) = v38;
  v57 = v51[9];
  *(_BYTE *)(v8 + v57) = 10;
  v58 = (void **)(*(_QWORD *)(v40 + 104) + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess(v58, v100, 0, 0);
  v59 = *v58;
  if (v59)
  {
    swift_bridgeObjectRetain(v38);
    v60 = v59;
    v61 = static os_log_type_t.default.getter(v60);
    v98 = v53;
    v99 = v52;
    v62 = v61;
    v63 = qword_1011B7D70;
    v64 = swift_allocObject(v86, 72, 7);
    v97 = v54;
    v65 = (_QWORD *)v64;
    *(_OWORD *)(v64 + 16) = xmmword_100E22B00;
    v66 = objc_msgSend(v60, "description");
    v95 = v57;
    v67 = v66;
    v68 = v40;
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v94 = v56;
    v70 = v8;
    v72 = v71;

    v73 = v85;
    v65[7] = &type metadata for String;
    v65[8] = v73;
    v65[4] = v69;
    v65[5] = v72;
    v40 = v68;
    v8 = v70;
    os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "Current location available: %@", 30, 2, v65);
    swift_bridgeObjectRelease();
    v74 = objc_msgSend(v60, "timestamp");
    v75 = v87;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v74);

    objc_msgSend(v60, "coordinate");
    v77 = v76;
    objc_msgSend(v60, "coordinate");
    v79 = v78;
    objc_msgSend(v60, "horizontalAccuracy");
    v81 = v80;
    sub_1000126B0(v70, type metadata accessor for BeaconLocationUpdate);
    (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v70, v75, v89);
    *(_QWORD *)(v70 + v99) = v77;
    *(_QWORD *)&v98[v70] = v79;
    *(_QWORD *)&v97[v70] = v81;
    *(_QWORD *)(v70 + v94) = v38;
    *(_BYTE *)(v70 + v95) = 10;
    swift_bridgeObjectRetain(v38);
    sub_100AEB4D0(v60, (uint64_t)v38);

    swift_bridgeObjectRelease();
  }
  Strong = swift_unknownObjectWeakLoadStrong(v40 + 16);
  if (Strong)
  {
    v83 = Strong;
    sub_10039CCE8(*(_BYTE *)v90, *(_QWORD *)(v90 + 8), *(_QWORD *)(v90 + 16), v8);
    swift_unknownObjectRelease(v83);
  }
  return sub_1000126B0(v8, type metadata accessor for BeaconLocationUpdate);
}

uint64_t sub_100AEC4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v2 + 72);
  v13 = swift_allocObject(&unk_1010AABC8, 32, 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a1;
  aBlock[4] = sub_100AED5A8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010AABE0;
  v14 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_100AEC694(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v34 = qword_1011B7D70;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v33 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v33 + 16) = xmmword_100E22B10;
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    HIDWORD(v31) = v9;
    v32 = a2;
    v38 = _swiftEmptyArrayStorage;
    sub_10009A2F4(0, v11, 0);
    v13 = a1 + 32;
    do
    {
      sub_100030784(v13, (uint64_t)v35);
      v14 = v36;
      v15 = v37;
      sub_10001AA44(v35, v36);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v15 + 8) + 8) + 32))(v14);
      v17 = UUID.uuidString.getter(v16);
      v19 = v18;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
      v12 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      {
        sub_10009A2F4(0, v12[2] + 1, 1);
        v12 = v38;
      }
      v21 = v12[2];
      v20 = v12[3];
      if (v21 >= v20 >> 1)
      {
        sub_10009A2F4(v20 > 1, v21 + 1, 1);
        v12 = v38;
      }
      v12[2] = v21 + 1;
      v22 = &v12[2 * v21];
      v22[4] = v17;
      v22[5] = v19;
      v13 += 40;
      --v11;
    }
    while (v11);
    v9 = HIDWORD(v31);
  }
  v23 = Array.description.getter(v12, &type metadata for String);
  v25 = v24;
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)v33;
  *(_QWORD *)(v33 + 56) = &type metadata for String;
  v27 = sub_10001AA00();
  v26[8] = v27;
  v26[4] = v23;
  v26[5] = v25;
  v28 = UUID.uuidString.getter(v27);
  v26[12] = &type metadata for String;
  v26[13] = v27;
  v26[9] = v28;
  v26[10] = v29;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v34, "No nearby beacons found for monitored beacons: %@ intent session: %@", 68, 2, v26);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100AEC914()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100AEC938()
{
  uint64_t v0;

  return sub_100AEBB54(*(unsigned __int8 *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100AEC944()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100AEC970()
{
  uint64_t v0;

  return sub_1006834D8(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

uint64_t sub_100AEC97C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t);
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v20 = *(_QWORD *)(v2 + 64);
  v21 = *(unsigned __int8 *)(v2 + 80);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v18 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(type metadata accessor for BeaconLocationUpdate(0) - 8);
  v19 = *(unsigned __int8 *)(v7 + 80);
  v17 = *(_QWORD *)(v7 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8));
  v8 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v8(v0 + v3 + v1[5], v4);
  v8(v0 + v3 + v1[6], v4);
  v9 = v0 + v3 + v1[10];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v23 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  v23(v9, v10);
  v12 = v0 + v3 + v1[12];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10))
    v23(v12, v10);
  v13 = (v3 + v20 + v6) & ~v6;
  v14 = v6;
  v15 = (((v18 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + v19 + 24) & ~v19;
  v22 = v21 | v14 | v19 | 7;
  swift_bridgeObjectRelease();
  v8(v0 + v13, v4);
  swift_bridgeObjectRelease();
  v23(v0 + v15, v10);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v17 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v22);
}

uint64_t sub_100AECB58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(type metadata accessor for BeaconLocationUpdate(0) - 8);
  v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_100AEAAA4(a1, v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + v8 + 8), *(_QWORD *)(v1 + v8 + 16), v1 + v10, *(_QWORD *)(v1 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100AECC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  _UNKNOWN **v33;

  v28 = a2;
  v29 = a3;
  v6 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v6 - 8);
  v27 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for BeaconManagerService(0);
  v33 = &off_101091D10;
  *(_QWORD *)&v31 = a1;
  *(_QWORD *)(a4 + 24) = 0;
  swift_unknownObjectWeakInit(a4 + 16, 0);
  sub_10001F6FC();
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  static DispatchQoS.unspecified.getter(v19);
  v30 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v22 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v21, v22, v9, v20);
  v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002BLL, 0x8000000100EEE2C0, v14, v11, v18, 0);
  *(_QWORD *)(a4 + 72) = v23;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerServiceSubscription) = 0;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer) = 0;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer) = 0;
  UUID.init()(v23);
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID, v8, v27);
  sub_10000F9FC(&v31, a4 + 32);
  v24 = v29;
  *(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_beaconStore) = v28;
  sub_1000126EC(v24, a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, type metadata accessor for Intent);
  *(_BYTE *)(a4 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) = 0;
  return a4;
}

uint64_t sub_100AECECC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100AECEF0()
{
  return sub_10000BC28((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100AECEFC()
{
  uint64_t v0;

  return sub_100AEA008(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100AECF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for Intent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for BeaconLocationUpdate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100AECFC4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Intent(0) - 8) + 80);
  return sub_100AE9F20(v0 + ((v1 + 16) & ~v1));
}

uint64_t sub_100AECFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for Intent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for BeaconLocationUpdate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100AED0C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Intent(0) - 8) + 80);
  return sub_100683278(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_100AED0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for Intent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for BeaconLocationUpdate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100AED1BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Intent(0) - 8) + 80);
  return sub_100AE9690(*(_QWORD *)(v0 + 16), (unsigned __int8 *)(v0 + ((v1 + 24) & ~v1)));
}

uint64_t sub_100AED1EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Intent(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(v2 + 72);
  v14 = swift_allocObject(&unk_1010AAA88, 24, 7);
  swift_weakInit(v14 + 16, v2);
  sub_10005972C(a1, (uint64_t)v13, type metadata accessor for Intent);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_1010AAB78, v17 + 8, v15 | 7);
  sub_1000126EC((uint64_t)v13, v18 + v16, type metadata accessor for Intent);
  *(_QWORD *)(v18 + v17) = v14;
  aBlock[4] = sub_100AED55C;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010AAB90;
  v19 = _Block_copy(aBlock);
  v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  v29 = _swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v23 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v4, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  swift_release();
  return swift_release();
}

uint64_t sub_100AED480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for Intent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for BeaconLocationUpdate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100AED55C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Intent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100AEBC30(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100AED59C()
{
  return sub_10000BC28((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100AED5A8()
{
  uint64_t v0;

  return sub_100AEC694(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100AED5C4(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v4 + 377) = a3;
  *(_BYTE *)(v4 + 376) = a2;
  *(_QWORD *)(v4 + 192) = a1;
  *(_QWORD *)(v4 + 200) = a4;
  v5 = type metadata accessor for HashAlgorithm(0);
  *(_QWORD *)(v4 + 208) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 216) = v6;
  *(_QWORD *)(v4 + 224) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(type metadata accessor for AccessoryMetadata(0) - 8);
  *(_QWORD *)(v4 + 232) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 240) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 248) = swift_task_alloc(v8);
  v9 = type metadata accessor for Locale(0);
  *(_QWORD *)(v4 + 256) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 264) = v10;
  *(_QWORD *)(v4 + 272) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  *(_QWORD *)(v4 + 280) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v4 + 288) = v12;
  *(_QWORD *)(v4 + 296) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AED6B0, 0, 0);
}

void sub_100AED6B0()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void *v34;
  id v35;
  unsigned int v36;
  NSString v37;
  unsigned int v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  os_log_type_t v61;
  unint64_t v62;
  NSObject *v63;
  uint8_t *v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  __n128 v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  id v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v93 = _swiftEmptyDictionarySingleton;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v2 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v2)
  {
    __break(1u);
    goto LABEL_23;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, "serverFriendlyDescription");

  if (!v4)
  {
LABEL_23:
    __break(1u);
    return;
  }
  v5 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 280);
  v90 = *(_QWORD *)(v0 + 264);
  v91 = *(_QWORD *)(v0 + 256);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v11 = v10;

  v12 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v93 = _swiftEmptyDictionarySingleton;
  sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
  v13 = swift_bridgeObjectRelease();
  v14 = Date.init()(v13);
  v15 = Date.epoch.getter(v14);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v8);
  *(_QWORD *)(v0 + 144) = v15;
  v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v18 = v17;
  v19 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100109D28(v16, v18, 0xD000000000000015, 0x8000000100ECA2E0, v19);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 152) = 1;
  v20 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v22 = v21;
  v23 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100109D28(v20, v22, 0xD000000000000013, 0x8000000100ECA300, v23);
  swift_bridgeObjectRelease();
  v24 = sub_100AC2EB8();
  v26 = v25;
  v27 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v93 = _swiftEmptyDictionarySingleton;
  sub_100109D28((uint64_t)v24, v26, 0x6567412D72657355, 0xEA0000000000746ELL, v27);
  v28 = swift_bridgeObjectRelease();
  v29 = static Locale.current.getter(v28);
  v30 = Locale.acceptLanguageCode.getter(v29);
  v32 = v31;
  (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v7, v91);
  v33 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100109D28(v30, v32, 0x4C2D747065636341, 0xEF65676175676E61, v33);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v34 = (void *)qword_1011B7C08;
  v89 = (id)objc_opt_self(FMSystemInfo);
  v35 = objc_msgSend(v89, "sharedInstance");
  v36 = objc_msgSend(v35, "isInternalBuild");

  if (v36)
  {
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v34, "BOOLForKey:", v37);

    if (v38)
    {
      v39 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v93 = _swiftEmptyDictionarySingleton;
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v39);
      swift_bridgeObjectRelease();
    }
  }
  v41 = v0 + 192;
  v40 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 304) = _swiftEmptyDictionarySingleton;
  v42 = *(_QWORD *)(v40 + 16);
  if (v42)
  {
    v43 = *(_QWORD *)(v0 + 232);
    v93 = _swiftEmptyArrayStorage;
    sub_10009A348(0, v42, 0);
    v44 = v40 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
    v45 = *(_QWORD *)(v43 + 72);
    v46 = _swiftEmptyArrayStorage;
    do
    {
      v48 = *(_QWORD *)(v0 + 240);
      v47 = *(_QWORD *)(v0 + 248);
      v49 = *(unsigned __int8 *)(v0 + 376);
      v50 = *(_BYTE *)(v0 + 377);
      sub_100AEE418(v44, v47);
      sub_100AEE418(v47, v48);
      sub_100B30618(v48, v49, v50, v0 + 16);
      sub_100AEE45C(v47);
      if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
      {
        sub_10009A348(0, v46[2] + 1, 1);
        v46 = v93;
      }
      v52 = v46[2];
      v51 = v46[3];
      if (v52 >= v51 >> 1)
      {
        sub_10009A348(v51 > 1, v52 + 1, 1);
        v46 = v93;
      }
      v46[2] = v52 + 1;
      v53 = &v46[16 * v52];
      v54 = *(_OWORD *)(v0 + 16);
      v55 = *(_OWORD *)(v0 + 32);
      v56 = *(_OWORD *)(v0 + 64);
      v53[4] = *(_OWORD *)(v0 + 48);
      v53[5] = v56;
      v53[2] = v54;
      v53[3] = v55;
      v57 = *(_OWORD *)(v0 + 80);
      v58 = *(_OWORD *)(v0 + 96);
      v59 = *(_OWORD *)(v0 + 128);
      v53[8] = *(_OWORD *)(v0 + 112);
      v53[9] = v59;
      v53[6] = v57;
      v53[7] = v58;
      v44 += v45;
      --v42;
    }
    while (v42);
    v41 = v0 + 192;
    v60 = swift_bridgeObjectRelease();
  }
  else
  {
    v60 = swift_bridgeObjectRelease();
    v46 = _swiftEmptyArrayStorage;
  }
  v61 = static os_log_type_t.debug.getter(v60);
  v62 = sub_100253E58();
  v63 = static OS_os_log.default.getter(v62);
  if (os_log_type_enabled(v63, v61))
  {
    swift_bridgeObjectRetain_n(v46, 2);
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = (_QWORD *)swift_slowAlloc(32, -1);
    v93 = v65;
    *(_DWORD *)v64 = 136315138;
    *(_QWORD *)(v0 + 176) = v46;
    swift_bridgeObjectRetain(v46);
    v66 = String.init<A>(describing:)(v0 + 176, &type metadata for AccessoryInfoRequestContent);
    *(_QWORD *)(v0 + 184) = sub_100016940(v66, v67, (uint64_t *)&v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v41, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v46, 2);
    _os_log_impl((void *)&_mh_execute_header, v63, v61, "AccessoryInfoRequestContent %s", v64, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);
  }

  v68 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
  *(_QWORD *)(v0 + 312) = JSONEncoder.init()(v69);
  *(_QWORD *)(v0 + 160) = v46;
  v70 = sub_100AEE498();
  v71 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 160, &type metadata for AccessoryInfoRequestContent, v70);
  *(_QWORD *)(v0 + 320) = v71;
  *(_QWORD *)(v0 + 328) = v72;
  v73 = v72;
  swift_bridgeObjectRelease();
  sub_10001BBBC(v71, v73);
  v74 = objc_msgSend(v89, "sharedInstance");
  v75 = objc_msgSend(v74, "isInternalBuild");

  if (v75)
  {
    v77 = *(_QWORD *)(v0 + 216);
    v76 = *(_QWORD *)(v0 + 224);
    v78 = *(_QWORD *)(v0 + 208);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v77 + 104))(v76, enum case for HashAlgorithm.sha256(_:), v78);
    sub_10001BBBC(v71, v73);
    v79 = Data.hash(algorithm:)(v76, v71, v73);
    v81 = v80;
    *(_QWORD *)(v0 + 336) = v79;
    *(_QWORD *)(v0 + 344) = v80;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
    v92 = (char *)&dword_101115278 + dword_101115278;
    v82 = (_QWORD *)swift_task_alloc(unk_10111527C);
    *(_QWORD *)(v0 + 352) = v82;
    *v82 = v0;
    v82[1] = sub_100AEDFF0;
    ((void (*)(uint64_t, uint64_t, _QWORD))v92)(v79, v81, *(_QWORD *)(v0 + 200));
  }
  else
  {
    swift_release();
    sub_10001BC14(v71, v73);
    swift_release();
    v84 = *(_QWORD *)(v0 + 320);
    v83 = *(_QWORD *)(v0 + 328);
    v85 = *(_QWORD *)(v0 + 272);
    v87 = *(_QWORD *)(v0 + 240);
    v86 = *(_QWORD *)(v0 + 248);
    v88 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 8))(_swiftEmptyDictionarySingleton, v84, v83);
  }
}

uint64_t sub_100AEDFF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  sub_10001BC14(v3[42], v3[43]);
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_100AEE280;
  }
  else
  {
    v5 = sub_100AEE06C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100AEE06C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 304);
  swift_bridgeObjectRetain(v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v21 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v21);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6C30);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v13 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  if (v11)
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Adding BAA Attestation headers for internal build", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
    sub_10001BC14(v13, v12);
    swift_release();
    swift_release();

    sub_10001BC14(v13, v12);
  }
  else
  {
    sub_10001BC14(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
    sub_10001BC14(v13, v12);
    swift_release();
    swift_release();

  }
  v16 = *(_QWORD *)(v0 + 320);
  v15 = *(_QWORD *)(v0 + 328);
  v17 = *(_QWORD *)(v0 + 272);
  v19 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 248);
  v20 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v6, v16, v15);
}

uint64_t sub_100AEE280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 304);
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6C30);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  if (v6)
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Adding BAA Attestation headers for internal build", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
    sub_10001BC14(v8, v7);
    swift_release();
    swift_release();

    sub_10001BC14(v8, v7);
  }
  else
  {
    sub_10001BC14(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
    sub_10001BC14(v8, v7);
    swift_release();
    swift_release();

  }
  v11 = *(_QWORD *)(v0 + 320);
  v10 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 248);
  v15 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v1, v11, v10);
}

uint64_t sub_100AEE418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AEE45C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100AEE498()
{
  unint64_t result;

  result = qword_101113920;
  if (!qword_101113920)
  {
    result = swift_getWitnessTable(asc_100E609F4, &type metadata for AccessoryInfoRequestContent);
    atomic_store(result, (unint64_t *)&qword_101113920);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequest()
{
  return &type metadata for AccessoryInfoRequest;
}

uint64_t sub_100AEE4EC(uint64_t a1, unsigned int a2)
{
  __int16 v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  void *v14;
  char *v15;
  _QWORD v17[4];
  _DWORD v18[4];
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;

  v2 = a2;
  v3 = a2 & 1;
  v4 = HIWORD(a2) & 1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 272, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E26E10;
  *(_QWORD *)(v6 + 56) = &type metadata for Bool;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 32) = v3;
  v7 = sub_1003435F8();
  *(_QWORD *)(v6 + 96) = &type metadata for Bool;
  *(_QWORD *)(v6 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 72) = v7 & 1;
  *(_QWORD *)(v6 + 136) = &type metadata for Bool;
  *(_QWORD *)(v6 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 112) = HIBYTE(v2) & 1;
  v8 = sub_100B1198C();
  *(_QWORD *)(v6 + 176) = &type metadata for Bool;
  *(_QWORD *)(v6 + 184) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 152) = v8 & 1;
  v9 = sub_1003433AC();
  v19 = v9;
  type metadata accessor for CLAuthorizationStatus(0);
  v11 = v10;
  OS_dispatch_queue.sync<A>(execute:)(sub_1001C786C, v18, v10);

  v12 = (v23 - 3) < 2;
  *(_QWORD *)(v6 + 216) = &type metadata for Bool;
  *(_QWORD *)(v6 + 224) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 192) = v12;
  *(_QWORD *)(v6 + 256) = &type metadata for Bool;
  *(_QWORD *)(v6 + 264) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 232) = v4;
  v13 = sub_100253E58();
  v14 = (void *)static OS_os_log.default.getter(v13);
  static os_log_type_t.default.getter(v14);
  os_log(_:dso:log:type:_:)("Finder state info enablers: \n findingEnabled: %i \n fmipState: %i \n serviceEnabled: %i \n globalLocation: %i \n fmipLocationServicesEnabled: %i \n canPublishAnonymously: %i", v18[0], v18[2], (_DWORD)v19, v20, v21, v22);
  swift_bridgeObjectRelease();

  if ((v2 & 1) == 0)
    return 0;
  if ((sub_1003435F8() & 1) == 0)
    return 0;
  if ((v2 & 0x100) == 0)
    return 0;
  if ((sub_100B1198C() & 1) == 0)
    return 0;
  v15 = sub_1003433AC();
  v17[2] = __chkstk_darwin(v15);
  OS_dispatch_queue.sync<A>(execute:)(sub_100AEF178, v17, v11);

  if ((v23 - 3) >= 2)
    return 0;
  return v4;
}

uint64_t sub_100AEE6E8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100AEE728 + 4 * byte_100E5D4E0[a1]))(0xD000000000000017, 0x8000000100EC5060);
}

uint64_t sub_100AEE728()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_100AEE7E4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100AEE824 + 4 * byte_100E5D4E8[a1]))(0xD000000000000017, 0x8000000100EC5060);
}

uint64_t sub_100AEE824()
{
  uint64_t v0;

  return v0 + 9;
}

void sub_100AEE8E0(char *a1)
{
  sub_10051310C(*a1);
}

void sub_100AEE8EC()
{
  char *v0;

  sub_100516954(0, *v0);
}

void sub_100AEE8F8(uint64_t a1)
{
  char *v1;

  sub_1005159CC(a1, *v1);
}

void sub_100AEE900(uint64_t a1)
{
  char *v1;

  sub_100516954(a1, *v1);
}

unint64_t sub_100AEE908@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100AEF130(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AEE934@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100AEE6E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100AEE95C()
{
  unsigned __int8 *v0;

  return sub_100AEE7E4(*v0);
}

unint64_t sub_100AEE964@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100AEF130(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AEE988(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AEEF48();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AEE9B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AEEF48();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AEE9D8(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int8 v14;
  char *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 v18;
  char v19;
  uint64_t v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  int v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v7 = sub_10001A9A8(&qword_101113928);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_100AEEF48();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FinderStatePermissions.CodingKeys, &type metadata for FinderStatePermissions.CodingKeys, v13, v11, v12);
  v14 = sub_100B1198C();
  v30 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v14 & 1, &v30, v7);
  if (!v3)
  {
    v22 = a3;
    v15 = sub_1003433AC();
    *(&v21 - 2) = __chkstk_darwin(v15);
    type metadata accessor for CLAuthorizationStatus(0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100AEF178, &v21 - 4, v16);

    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)((v26 - 3) < 2, &v29, v7);
    v17 = v22;
    v28 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v22 & 1, &v28, v7);
    v27 = 3;
    KeyedEncodingContainer.encode(_:forKey:)((v17 >> 8) & 1, &v27, v7);
    v18 = sub_1003435F8();
    v25 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v18 & 1, &v25, v7);
    v19 = sub_100AEE4EC(a2, v17 & 0x10101);
    v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19 & 1, &v24, v7);
    v23 = 7;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(v17) & 1, &v23, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100AEEC60(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;

  if (*(_BYTE *)(v1 + 9))
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(_BYTE *)(v1 + 10))
    v4 = 0x10000;
  else
    v4 = 0;
  return sub_100AEE9D8(a1, *(_QWORD *)v1, v3 | v4);
}

uint64_t sub_100AEECA4(uint64_t a1)
{
  uint64_t v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1ADE8(v3);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_1007B7A30();
  swift_bridgeObjectRelease();
  objc_msgSend((id)objc_opt_self(SPFinderStateInfo), "canPublishAnonymously");
  return a1;
}

uint64_t sub_100AEEDB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)((char *)a2 + 9);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for FinderStatePermissions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a1 + 10) = *((_BYTE *)a2 + 10);
  return a1;
}

uint64_t initializeWithTake for FinderStatePermissions(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for FinderStatePermissions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  *((_BYTE *)a1 + 10) = *((_BYTE *)a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for FinderStatePermissions(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 11))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FinderStatePermissions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 11) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 11) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FinderStatePermissions()
{
  return &type metadata for FinderStatePermissions;
}

unint64_t sub_100AEEF48()
{
  unint64_t result;

  result = qword_101113930;
  if (!qword_101113930)
  {
    result = swift_getWitnessTable(aE_43, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113930);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FinderStatePermissions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100AEEFD8 + 4 * byte_100E5D4F5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100AEF00C + 4 * byte_100E5D4F0[v4]))();
}

uint64_t sub_100AEF00C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AEF014(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AEF01CLL);
  return result;
}

uint64_t sub_100AEF028(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AEF030);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100AEF034(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AEF03C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FinderStatePermissions.CodingKeys()
{
  return &type metadata for FinderStatePermissions.CodingKeys;
}

unint64_t sub_100AEF05C()
{
  unint64_t result;

  result = qword_101113938;
  if (!qword_101113938)
  {
    result = swift_getWitnessTable(asc_100E5D614, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113938);
  }
  return result;
}

unint64_t sub_100AEF0A4()
{
  unint64_t result;

  result = qword_101113940;
  if (!qword_101113940)
  {
    result = swift_getWitnessTable(byte_100E5D54C, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113940);
  }
  return result;
}

unint64_t sub_100AEF0EC()
{
  unint64_t result;

  result = qword_101113948;
  if (!qword_101113948)
  {
    result = swift_getWitnessTable(byte_100E5D574, &type metadata for FinderStatePermissions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113948);
  }
  return result;
}

unint64_t sub_100AEF130(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104CED0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_100AEF178@<X0>(_DWORD *a1@<X8>)
{
  return sub_1001C786C(a1);
}

_QWORD *sub_100AEF18C(uint64_t a1)
{
  int64_t v1;
  char *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10009A2F4(0, v1, 0);
    v3 = (char *)(a1 + 56);
    do
    {
      v4 = *((_QWORD *)v3 - 2);
      v5 = *((_QWORD *)v3 - 1);
      v6 = *v3;
      v7 = *(v3 - 24);
      sub_10001BBBC(v4, v5);
      v8 = sub_1001C8548(v7, v4, v5, v6);
      v10 = v9;
      sub_10001BC14(v4, v5);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_10009A2F4(v11 > 1, v12 + 1, 1);
      v3 += 32;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

void sub_100AEF294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x100AEF3F0);
}

uint64_t sub_100AEF424()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7C10);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7C10);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x4179636176697270, 0xEC0000007472656CLL);
}

uint64_t sub_100AEF4A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AEF4D4 + 4 * byte_100E5D690[a1]))(0x6E776F6E6B6E752ELL, 0xE800000000000000);
}

uint64_t sub_100AEF4D4()
{
  return 0x6D6972507465672ELL;
}

unint64_t sub_100AEF4F8()
{
  return 0xD000000000000016;
}

uint64_t sub_100AEF57C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100AF87E0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100AEF5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100AF87F4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100AEF600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100AF87F4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100AEF64C()
{
  unsigned __int8 *v0;

  return sub_100AEF4A0(*v0);
}

uint64_t sub_100AEF654()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  sub_1000234D8(v0, qword_101113950);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101113950);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v1, 30.0);
}

void *sub_100AEF6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  void *result;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  _QWORD v45[4];

  v1 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v1);
  v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v41 = (char *)v38 - v9;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v0 + 24);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v17, "objectForKey:", v18);

    if (v19)
    {
      _bridgeAnyObjectToAny(_:)(v44, v19);
      swift_unknownObjectRelease(v19);
    }
    else
    {
      memset(v44, 0, sizeof(v44));
    }
    sub_100147814((uint64_t)v44, (uint64_t)v45);
    if (v45[3])
    {
      v20 = sub_10001A9A8(&qword_1011063B0);
      if ((swift_dynamicCast(&v43, v45, (char *)&type metadata for Any + 8, v20, 6) & 1) != 0)
      {
        v21 = v43;
        v22 = *(_QWORD *)(v43 + 16);
        if (v22)
        {
          swift_bridgeObjectRetain(v43);
          v23 = sub_1000330C8();
          v24 = 0;
          v38[1] = v21;
          v25 = (uint64_t *)(v21 + 40);
          v26 = _swiftEmptyArrayStorage;
          v39 = v23;
          v40 = v8;
          while (1)
          {
            v27 = *v25;
            v45[0] = *(v25 - 1);
            v45[1] = v27;
            v28 = swift_bridgeObjectRetain_n(v27, 2);
            v29 = Data.init<A>(hexString:)(v45, &type metadata for String, v23, v28);
            if (v30 >> 60 != 15)
            {
              MACAddress.init(dataRepresentation:)(v29, v30);
              if (!v24)
              {
                v31 = 0;
                goto LABEL_15;
              }
              swift_errorRelease(v24);
              v24 = 0;
            }
            v31 = 1;
LABEL_15:
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v31, 1, v4);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
            {
              sub_100004048((uint64_t)v3, (uint64_t *)&unk_1010F9890);
            }
            else
            {
              v42 = v24;
              v32 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
              v33 = v41;
              v32(v41, v3, v4);
              v32(v8, v33, v4);
              if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
                v26 = (_QWORD *)sub_1007CA820(0, v26[2] + 1, 1, (unint64_t)v26);
              v35 = v26[2];
              v34 = v26[3];
              if (v35 >= v34 >> 1)
                v26 = (_QWORD *)sub_1007CA820(v34 > 1, v35 + 1, 1, (unint64_t)v26);
              v26[2] = v35 + 1;
              v36 = (unint64_t)v26
                  + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
                  + *(_QWORD *)(v5 + 72) * v35;
              v8 = v40;
              v32((char *)v36, v40, v4);
              v23 = v39;
              v24 = v42;
            }
            v25 += 2;
            if (!--v22)
            {
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
          }
        }
        v26 = _swiftEmptyArrayStorage;
LABEL_26:
        swift_bridgeObjectRelease();
        v37 = sub_100CA91E0((uint64_t)v26);
        swift_bridgeObjectRelease();
        return (void *)v37;
      }
    }
    else
    {
      sub_100004048((uint64_t)v45, (uint64_t *)&unk_1010F6390);
    }
    return &_swiftEmptySetSingleton;
  }
  __break(1u);
  return result;
}

void sub_100AEFAC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  Class isa;
  NSString v11;
  _BYTE v12[16];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(void **)(v1 + 24);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    sub_100A3DDAC(a1);
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setObject:forKey:", isa, v11);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100AEFC20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v2 = v1;
  v19 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v13 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  static DispatchQoS.unspecified.getter(v13);
  v20 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v15, v16, v3, v14);
  *(_QWORD *)(v2 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000039, 0x8000000100EEE7C0, v8, v5, v12, 0);
  *(_QWORD *)(v2 + 32) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_QWORD *)(v2 + 72) = _swiftEmptyArrayStorage;
  *(_OWORD *)(v2 + 80) = xmmword_100E22B20;
  *(_BYTE *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  v17 = sub_10001A9A8(&qword_101113C78);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  *(_QWORD *)(v2 + 112) = PassthroughSubject.init()();
  *(_BYTE *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 16) = v19;
  return v2;
}

uint64_t sub_100AEFE48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(_QWORD *, uint64_t, uint64_t);
  id v18;
  char v19;
  void (*v20)(_QWORD *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  _DWORD *v24;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;

  v41 = a6;
  LODWORD(v37) = a5;
  v38 = a4;
  v39 = a3;
  v36 = a2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A9A8(&qword_101113C78);
  v12 = *(unsigned int *)(v11 + 48);
  v13 = *(unsigned __int16 *)(v11 + 52);
  v40 = v11;
  swift_allocObject(v11, v12, v13);
  v14 = PassthroughSubject.init()();
  *(_QWORD *)(a1 + 112) = v14;
  swift_retain();
  swift_release();
  v15 = *(void **)(a1 + 24);
  *v10 = v15;
  v16 = enum case for DispatchPredicate.onQueue(_:);
  v17 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v8 + 104);
  v17(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v18 = v15;
  v19 = _dispatchPreconditionTest(_:)(v10);
  v20 = *(void (**)(_QWORD *, uint64_t))(v8 + 8);
  v20(v10, v7);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 120))
  {
    if (qword_1010EA1A0 == -1)
    {
LABEL_4:
      v21 = type metadata accessor for Logger(0);
      sub_10001A9E8(v21, (uint64_t)qword_1011B7C10);
      v22 = swift_retain_n(a1, 2);
      v23 = Logger.logObject.getter(v22);
      LODWORD(v39) = static os_log_type_t.error.getter(v23);
      if (os_log_type_enabled(v23, (os_log_type_t)v39))
      {
        v38 = (uint64_t)v23;
        v24 = (_DWORD *)swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v42 = v37;
        *v24 = 136446210;
        *v10 = v18;
        v17(v10, v16, v7);
        v25 = v18;
        v26 = _dispatchPreconditionTest(_:)(v10);
        v20(v10, v7);
        if ((v26 & 1) != 0)
          __asm { BR              X10 }
        __break(1u);
        JUMPOUT(0x100AF02E4);
      }

      swift_release_n(a1, 2);
      goto LABEL_13;
    }
LABEL_15:
    swift_once(&qword_1010EA1A0, sub_100AEF424);
    goto LABEL_4;
  }
  if (qword_1010EA1A0 != -1)
    swift_once(&qword_1010EA1A0, sub_100AEF424);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7C10);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Handling Privacy Alert", v31, 2u);
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = v39;
  sub_100AF0EE8(v36, v39, v38, v37 & 1);
  sub_100AF8974(v32);
LABEL_13:
  v42 = v14;
  v33 = sub_1000193A4(&qword_101113C80, &qword_101113C78, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v34 = Publisher.eraseToAnyPublisher()(v40, v33);
  result = swift_release();
  *v41 = v34;
  return result;
}

uint64_t sub_100AF0300@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(a1 + 24);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
    *a2 = *(_BYTE *)(a1 + 120) != 0;
  else
    __break(1u);
  return result;
}

void sub_100AF03D8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  void *v4;

  v4 = sub_100AEF6A0();
  sub_100C8280C(a1, a2);
  sub_100AEFAC8((uint64_t)v4);
}

uint64_t sub_100AF043C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, _QWORD, uint64_t);
  id v11;
  void (*v12)(_QWORD *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  void (*v20)(_QWORD *, uint64_t);
  void (*v21)(_QWORD *, _QWORD, uint64_t);
  uint8_t *v22;
  uint8_t *v23;
  id v24;
  char v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  char v31;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + 24);
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v11 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v12 = *(void (**)(_QWORD *, uint64_t))(v5 + 8);
  v12(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (qword_1010EA1A0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA1A0, sub_100AEF424);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7C10);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v27 = a1;
    v18 = v11;
    v19 = v9;
    v20 = v12;
    v21 = v10;
    v22 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Cleaning up...", v17, 2u);
    v23 = v22;
    v10 = v21;
    v12 = v20;
    v9 = v19;
    v11 = v18;
    a1 = v27;
    swift_slowDealloc(v23, -1, -1);
  }

  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9D48, a1, *(_QWORD *)(a1 + 16), &type metadata for () + 1, &type metadata for () + 1);
  v28 = 12;
  v29 = 0u;
  v30 = 0u;
  v31 = 11;
  sub_1007C63BC(&v28);
  sub_1000593D4(&v28);
  *(_QWORD *)(v2 + 48) = 0;
  swift_release();
  *(_QWORD *)(v2 + 40) = 0;
  swift_release();
  LOBYTE(v28) = 1;
  swift_retain();
  PassthroughSubject.send(completion:)(&v28);
  swift_release();
  *v7 = v11;
  v10(v7, v9, v4);
  v24 = v11;
  v25 = _dispatchPreconditionTest(_:)(v7);
  result = ((uint64_t (*)(_QWORD *, uint64_t))v12)(v7, v4);
  if ((v25 & 1) != 0)
    *(_BYTE *)(v2 + 120) = 0;
  else
    __break(1u);
  return result;
}

uint64_t sub_100AF06B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  _OWORD v75[2];
  char v76;
  char v77;
  id v78;

  v67 = a3;
  v71 = a1;
  v72 = a2;
  v3 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v3);
  v68 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101109890);
  v69 = *(_QWORD *)(v5 - 8);
  v70 = v5;
  __chkstk_darwin(v5);
  v73 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_10001A9A8(&qword_101113C88);
  v7 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101113C90);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101113C98);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AF90C0();
  v18 = v74;
  BinaryDecodable.init(data:)(v19, 0, 0xC000000000000000);
  if (v18)
    return swift_errorRelease(v18);
  v59 = v9;
  v60 = v7;
  v61 = v13;
  v62 = v11;
  v58 = v10;
  v63 = 0;
  v64 = v17;
  v65 = v15;
  v74 = v14;
  memset(v75, 0, sizeof(v75));
  v76 = 2;
  v77 = 0;
  v21 = v67;
  v22 = v72;
  v23 = sub_100AF1CC8((uint64_t)v75, v67);
  sub_100004048((uint64_t)v75, &qword_101113C20);
  *(_QWORD *)&v75[0] = v23;
  v78 = *(id *)(v22 + 24);
  v24 = v78;
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v26 = (uint64_t)v68;
  v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v57(v68, 1, 1, v25);
  v27 = v24;
  v28 = sub_10001A9A8(&qword_101109328);
  v29 = sub_10001F6FC();
  v30 = sub_1000193A4((unint64_t *)&unk_101109330, &qword_101109328, (const char *)&protocol conformance descriptor for Future<A, B>);
  v31 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v78, v26, v28, v29, v30, v31);
  sub_100004048(v26, &qword_1010EECC8);

  swift_release();
  if (qword_1010EA1A8 != -1)
    swift_once(&qword_1010EA1A8, sub_100AEF654);
  v32 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v33 = sub_10001A9E8(v32, (uint64_t)qword_101113950);
  *(_QWORD *)&v75[0] = v27;
  v57((char *)v26, 1, 1, v25);
  v34 = sub_1000193A4(&qword_1011098C0, &qword_101109890, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v35 = v27;
  v56 = v31;
  v36 = v59;
  v37 = v33;
  v38 = v70;
  v39 = v34;
  v40 = v73;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v37, v75, v26, sub_1000FC3D0, 0, v70, v29, v39, v56);
  sub_100004048(v26, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v69 + 8))(v40, v38);
  v41 = sub_10001A9A8(&qword_1010EEBF8);
  v42 = sub_1000193A4(&qword_101113CA8, &qword_101113C88, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v43 = v61;
  v44 = v66;
  Publisher.map<A>(_:)(sub_1007DBDD0, 0, v66, v41, v42);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v44);
  v45 = sub_10001A9A8(&qword_1010FCA88);
  v46 = sub_1000193A4(&qword_101113CB0, &qword_101113C90, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v47 = sub_1000193A4(&qword_1010FCA98, &qword_1010FCA88, (const char *)&protocol conformance descriptor for Just<A>);
  v48 = v64;
  v49 = v58;
  Publisher.catch<A>(_:)(sub_100AF0C7C, 0, v58, v45, v46, v47);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v49);
  v50 = swift_allocObject(&unk_1010AB058, 24, 7);
  v51 = v72;
  swift_weakInit(v50 + 16, v72);
  v52 = (_QWORD *)swift_allocObject(&unk_1010AB1C0, 40, 7);
  v52[2] = v50;
  v52[3] = v71;
  v52[4] = v21;
  v53 = sub_1000193A4(&qword_101113CB8, &qword_101113C98, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v54 = v74;
  v55 = Publisher<>.sink(receiveValue:)(sub_100AF9108, v52, v74, v53);
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v48, v54);
  *(_QWORD *)(v51 + 48) = v55;
  return swift_release();
}

uint64_t sub_100AF0C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[48];
  _BYTE v21[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v21, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    Transaction.capture()();
    if (qword_1010EA1A0 != -1)
      swift_once(&qword_1010EA1A0, sub_100AEF424);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7C10);
    v9 = sub_10000F9B8(a1, (uint64_t)v20, &qword_1010EEBF8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136315138;
      sub_10000F9B8((uint64_t)v20, (uint64_t)&v17, &qword_1010EEBF8);
      v14 = sub_10001A9A8(&qword_1010EEBF8);
      v15 = String.init<A>(describing:)(&v17, v14);
      v17 = sub_100016940(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v20, &qword_1010EEBF8);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "primaryKey result: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_100004048((uint64_t)v20, &qword_1010EEBF8);
    }

    sub_10000F9B8(a1, (uint64_t)v20, &qword_1010EEBF8);
    if ((v20[41] & 1) != 0)
    {
      sub_100004048((uint64_t)v20, &qword_1010EEBF8);
      sub_100AF043C(a4);
      return swift_release();
    }
    else
    {
      swift_release();
      return sub_100004048((uint64_t)v20, &qword_1010EEBF8);
    }
  }
  return result;
}

uint64_t sub_100AF0EE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[16];

  v9 = *v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (void *)v4[3];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v17 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v17);
    *(_QWORD *)&v18[-48] = v4;
    *(_QWORD *)&v18[-40] = a2;
    *(_QWORD *)&v18[-32] = a3;
    *(_QWORD *)&v18[-24] = a1;
    v18[-16] = a4 & 1;
    *(_QWORD *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.PrivacyAlertSupport.didNotify", 59, 2, sub_100AF8E94, &v18[-64], &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AF1034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  id v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  void *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  id v135;

  v133 = a2;
  v120 = a6;
  v121 = a5;
  v115 = a4;
  v130 = a1;
  v7 = type metadata accessor for BluetoothManagerDevice(0);
  v113 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v114 = v8;
  v117 = (uint64_t)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v9);
  v131 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_10001A9A8(&qword_1010EED38);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EED40);
  v118 = *(_QWORD *)(v12 - 8);
  v119 = v12;
  __chkstk_darwin(v12);
  v116 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101113C28);
  v124 = *(_QWORD *)(v14 - 8);
  v125 = v14;
  __chkstk_darwin(v14);
  v123 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_101113C30);
  v126 = *(_QWORD *)(v16 - 8);
  v127 = v16;
  __chkstk_darwin(v16);
  v122 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_101113C38);
  v128 = *(_QWORD *)(v18 - 8);
  v129 = v18;
  __chkstk_darwin(v18);
  v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101113C40);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v96 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_101113C48);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(a3 + 16);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
  v111 = a3;
  v112 = &type metadata for () + 1;
  v107 = v30;
  v31 = v132;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9DF4, a3, v29, &type metadata for () + 1, v30);
  if (v31)
  {
    swift_errorRelease(v31);
    v32 = 0;
  }
  else
  {
    v100 = v20;
    v101 = v24;
    v102 = v22;
    v103 = v21;
    v104 = 0;
    v105 = v28;
    v106 = v26;
    v132 = v25;
    v33 = v133;
    v134 = *(id *)(v133 + 24);
    v34 = v134;
    v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
    v37 = (uint64_t)v131;
    v99 = v35;
    v98 = v36;
    ((void (*)(char *, uint64_t, uint64_t))v36)(v131, 1, 1);
    v38 = sub_10001F6FC();
    v39 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v40 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v96 = v34;
    v41 = v108;
    v42 = v107;
    v107 = v38;
    v97 = v40;
    Publisher.receive<A>(on:options:)(&v134, v37, v42, v38, v39, v40);
    sub_100004048(v37, &qword_1010EECC8);

    swift_release();
    v43 = swift_retain();
    v44 = static Subscribers.Demand.unlimited.getter(v43);
    v45 = sub_10001A9A8(&qword_1010EC530);
    v46 = sub_10001A9A8(&qword_1010EEC28);
    v47 = sub_1000193A4(&qword_1010EED78, &qword_1010EED38, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v48 = sub_1000193A4(&qword_1010EED80, &qword_1010EEC28, (const char *)&protocol conformance descriptor for Future<A, B>);
    v49 = v116;
    v50 = v110;
    v51 = v46;
    v52 = v111;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v44, sub_100AF8EB8, v33, v110, v45, v51, v47, v48);
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v41, v50);
    v53 = v117;
    sub_10005972C(v115, v117, type metadata accessor for BluetoothManagerDevice);
    v54 = *(unsigned __int8 *)(v113 + 80);
    v55 = (v54 + 24) & ~v54;
    v56 = (v114 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
    v57 = swift_allocObject(&unk_1010AB148, v56 + 9, v54 | 7);
    *(_QWORD *)(v57 + 16) = v33;
    sub_1000126EC(v53, v57 + v55, type metadata accessor for BluetoothManagerDevice);
    v58 = v57 + v56;
    v59 = v121;
    *(_QWORD *)v58 = v121;
    *(_BYTE *)(v58 + 8) = v120 & 1;
    swift_retain();
    v60 = v59;
    v61 = sub_10001A9A8(&qword_101113C20);
    v62 = sub_1000193A4(&qword_1010EED88, &qword_1010EED40, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v63 = v123;
    v64 = v119;
    Publisher.map<A>(_:)(sub_100AF8FC8, v57, v119, v61, v62);
    swift_release();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v49, v64);
    v65 = swift_allocObject(&unk_1010AB170, 32, 7);
    *(_QWORD *)(v65 + 16) = v33;
    *(_QWORD *)(v65 + 24) = v52;
    swift_retain();
    v66 = swift_retain();
    v67 = static Subscribers.Demand.unlimited.getter(v66);
    v68 = sub_10001A9A8(&qword_101109328);
    v69 = sub_1000193A4(&qword_101113C50, &qword_101113C28, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v70 = sub_1000193A4((unint64_t *)&unk_101109330, &qword_101109328, (const char *)&protocol conformance descriptor for Future<A, B>);
    v71 = v122;
    v72 = v125;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v67, sub_100AF9068, v65, v125, v112, v68, v69, v70);
    swift_release();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v63, v72);
    v73 = v71;
    if (qword_1010EA1A8 != -1)
      swift_once(&qword_1010EA1A8, sub_100AEF654);
    v74 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    v75 = sub_10001A9E8(v74, (uint64_t)qword_101113950);
    v76 = v96;
    v135 = v96;
    v77 = (uint64_t)v131;
    v98(v131, 1, 1, v99);
    v78 = sub_1000193A4(&qword_101113C58, &qword_101113C30, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v79 = v76;
    v80 = v100;
    v81 = v127;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v75, &v135, v77, sub_1000E2DBC, 0, v127, v107, v78, v97);
    sub_100004048(v77, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v73, v81);
    v82 = sub_10001A9A8(&qword_1010EEBF8);
    v83 = sub_1000193A4(&qword_101113C60, &qword_101113C38, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    v84 = v101;
    v85 = v129;
    Publisher.map<A>(_:)(sub_10046C0AC, 0, v129, v82, v83);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v80, v85);
    v86 = sub_10001A9A8(&qword_1010FCA88);
    v87 = sub_1000193A4(&qword_101113C68, &qword_101113C40, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v88 = sub_1000193A4(&qword_1010FCA98, &qword_1010FCA88, (const char *)&protocol conformance descriptor for Just<A>);
    v89 = v105;
    v90 = v103;
    Publisher.catch<A>(_:)(sub_100AF0C7C, 0, v103, v86, v87, v88);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v84, v90);
    v91 = swift_allocObject(&unk_1010AB058, 24, 7);
    swift_weakInit(v91 + 16, v133);
    v92 = (_QWORD *)swift_allocObject(&unk_1010AB198, 40, 7);
    v92[2] = v91;
    v92[3] = v130;
    v92[4] = v52;
    v93 = sub_1000193A4(&qword_101113C70, &qword_101113C48, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_retain();
    v94 = v132;
    v32 = Publisher<>.sink(receiveValue:)(sub_100AF9098, v92, v132, v93);
    swift_release();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v89, v94);
  }
  *(_QWORD *)(v133 + 40) = v32;
  return swift_release();
}

uint64_t sub_100AF1A18(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[48];

  sub_100059280(a1, (uint64_t)v3);
  v3[41] = 1;
  v1 = sub_10001A9A8(&qword_1010EEBF8);
  return Just.init(_:)(v3, v1);
}

_QWORD *sub_100AF1A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *result;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  char v22;
  _QWORD v23[6];
  _BYTE v24[48];
  _BYTE v25[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v25, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(v6);
  if (result)
  {
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v24, &qword_1010EEBF8);
    if ((v24[41] & 1) != 0)
    {
      sub_100059244((uint64_t)v24, (uint64_t)v23);
      sub_100059280(v23, (uint64_t)&v19);
      if (v22 == 11
        && v19 == 10
        && (v8 = vorrq_s8(v20, v21),
            !*(_QWORD *)&vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))))
      {
        sub_1000593D4(&v19);
        if (qword_1010EA1A0 != -1)
          swift_once(&qword_1010EA1A0, sub_100AEF424);
        v9 = type metadata accessor for Logger(0);
        v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7C10);
        v11 = Logger.logObject.getter(v10);
        v12 = static os_log_type_t.error.getter(v11);
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "handleNotify timed out!", v13, 2u);
          swift_slowDealloc(v13, -1, -1);
        }

      }
      else
      {
        sub_1000593D4(&v19);
      }
      sub_100AF043C(a4);
      swift_release();
      return sub_1000593D4(v23);
    }
    else
    {
      if (qword_1010EA1A0 != -1)
        swift_once(&qword_1010EA1A0, sub_100AEF424);
      v14 = type metadata accessor for Logger(0);
      v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7C10);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "handleNotify success!", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t sub_100AF1CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28[3];
  __int128 v29[2];
  char v30;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 24);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1010EA1A0, sub_100AEF424);
    goto LABEL_5;
  }
  sub_10000F9B8(a1, (uint64_t)v29, &qword_101113C20);
  if ((v30 & 1) != 0)
  {
    sub_100059244((uint64_t)v29, (uint64_t)v28);
    sub_100059280(v28, (uint64_t)&v26);
    v12 = swift_allocObject(&unk_1010AB120, 57, 7);
    sub_100059244((uint64_t)&v26, v12 + 16);
    v13 = sub_10001A9A8(&qword_101109328);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = Future.init(_:)(sub_100AF8E8C, v12, v14);
    sub_1000593D4(v28);
    return v15;
  }
  sub_100439EF4(v29, (uint64_t)v28);
  if (qword_1010EA1A0 != -1)
    goto LABEL_11;
LABEL_5:
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B7C10);
  sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439BC4);
  v17 = sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439BC4);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v25 = v21;
    *(_DWORD *)v20 = 136446210;
    sub_100439EF4(v28, (uint64_t)&v26);
    sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439BC4);
    v22 = String.init<A>(describing:)(&v26, &type metadata for AccessoryOwnerCommand);
    v26 = sub_100016940(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439C44);
    sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439C44);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Sending: %{public}s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439C44);
    sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439C44);
  }

  v15 = sub_100AF75E0(v28, a2);
  sub_100244534((uint64_t)v28, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439C44);
  return v15;
}

uint64_t sub_100AF201C(void (*a1)(_QWORD *), uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  __int16 v10;

  v5 = sub_100059390();
  v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0, 0);
  sub_100059280(a3, v7);
  v9[0] = v6;
  v10 = 256;
  a1(v9);
  return sub_100004048((uint64_t)v9, &qword_1010EEBF8);
}

void sub_100AF209C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  void *v34;
  void (*v35)(_QWORD);
  void (*v36)(uint8_t *, uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  _BOOL4 v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint8_t *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  unint64_t v94;
  uint8_t *v95;
  uint8_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint8_t *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  uint8_t *v120;
  uint8_t *v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  _QWORD *v126;
  uint64_t v127;
  uint8_t *v128;
  void *v129;
  id v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint8_t *v144;
  uint64_t v145;
  unint64_t v146;
  char v147;
  int v148;
  uint64_t v149;
  NSObject *v150;
  os_log_type_t v151;
  _BOOL4 v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint8_t *v159;
  uint8_t *v160;
  void *v161;
  id v162;
  uint64_t v163;
  int v164;
  NSObject *v165;
  os_log_type_t v166;
  uint8_t *v167;
  _QWORD *v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  NSObject *v174;
  os_log_type_t v175;
  unint64_t v176;
  uint8_t *v177;
  uint8_t *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  unint64_t v184;
  uint8_t *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  void *v190;
  id v191;
  uint64_t v192;
  int v193;
  NSObject *v194;
  os_log_type_t v195;
  _BOOL4 v196;
  uint8_t *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  int v203;
  NSObject *v204;
  os_log_type_t v205;
  unint64_t v206;
  uint8_t *v207;
  uint8_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  NSObject *v212;
  os_log_type_t v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  NSObject *v226;
  os_log_type_t v227;
  uint8_t *v228;
  uint8_t *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  Swift::String v233;
  unint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  Swift::String v237;
  uint8_t *v238;
  uint64_t v239;
  uint64_t v240;
  int *v241;
  uint64_t *v242;
  _QWORD *v243;
  uint64_t v244;
  unint64_t v245;
  unint64_t v246;
  NSObject *v247;
  os_log_type_t v248;
  uint8_t *v249;
  _QWORD *v250;
  uint64_t v251;
  uint8_t *v252;
  id v253;
  char v254;
  uint64_t v255;
  NSObject *v256;
  os_log_type_t v257;
  uint8_t *v258;
  uint64_t v259;
  unint64_t v260;
  NSObject *v261;
  os_log_type_t v262;
  uint8_t *v263;
  uint64_t v264;
  unint64_t v265;
  char v266;
  uint8_t *v267;
  uint64_t v268;
  unint64_t v269;
  uint8_t *v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  NSObject *v275;
  os_log_type_t v276;
  uint8_t *v277;
  uint64_t v278;
  unint64_t v279;
  uint64_t v280;
  NSObject *v281;
  os_log_type_t v282;
  uint8_t *v283;
  uint64_t v284;
  unint64_t v285;
  unint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint8_t *v293;
  id v294;
  char v295;
  uint64_t v296;
  NSObject *v297;
  os_log_type_t v298;
  uint8_t *v299;
  uint64_t v300;
  unint64_t v301;
  char v302;
  uint64_t v303;
  uint8_t *v304;
  void *v305;
  id v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  NSObject *v311;
  os_log_type_t v312;
  _BOOL4 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint8_t *v329;
  id v330;
  char v331;
  uint64_t v332;
  NSObject *v333;
  os_log_type_t v334;
  uint8_t *v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  NSObject *v344;
  os_log_type_t v345;
  uint8_t *v346;
  uint8_t *v347;
  uint64_t v348;
  unint64_t v349;
  NSObject *v350;
  os_log_type_t v351;
  uint8_t *v352;
  uint8_t *v353;
  uint64_t v354;
  unint64_t v355;
  int v356;
  uint64_t v357;
  uint64_t v358;
  uint8_t *v359;
  id v360;
  char v361;
  uint64_t v362;
  uint64_t v363;
  NSObject *v364;
  os_log_type_t v365;
  _BOOL4 v366;
  _DWORD *v367;
  uint64_t v368;
  unint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  NSObject *v373;
  os_log_type_t v374;
  uint8_t *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  void *v381;
  uint64_t v382;
  char v383;
  void *v384;
  id v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int *v389;
  uint64_t *v390;
  void *v391;
  id v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t *v399;
  uint64_t v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unint64_t v406;
  char v407;
  unint64_t v408;
  uint8_t *v409;
  uint64_t v410;
  uint64_t v411;
  unint64_t v412;
  void (*v413)(uint8_t *, uint64_t);
  int v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t *v430;
  uint64_t v431;
  id v432;
  unsigned int v433;
  void (*v434)(uint8_t *, _QWORD, uint64_t);
  uint8_t *v435;
  uint64_t v436;
  uint8_t *v437;
  char *v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441[2];
  unint64_t v442;
  unsigned __int8 v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446[3];
  char v447;

  v429 = a4;
  v426 = a3;
  v427 = a2;
  v438 = a5;
  v7 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v408 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v428 = type metadata accessor for PrivacyAlertSupport.AlertInfo(0);
  __chkstk_darwin(v428);
  v430 = (uint64_t *)((char *)&v408 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v11);
  v421 = (uint64_t)&v408 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v423 = type metadata accessor for SharedBeaconRecord(0);
  v420 = *(_QWORD *)(v423 - 8);
  v13 = __chkstk_darwin(v423);
  v416 = (uint64_t)&v408 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v417 = (uint64_t)&v408 - v16;
  v17 = __chkstk_darwin(v15);
  v418 = (uint64_t)&v408 - v18;
  __chkstk_darwin(v17);
  v422 = (uint64_t)&v408 - v19;
  v20 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v20);
  v22 = (char *)&v408 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v425 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v23 = *(_QWORD *)(v425 - 8);
  v24 = __chkstk_darwin(v425);
  v419 = (uint64_t)&v408 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v408 - v27;
  __chkstk_darwin(v26);
  v424 = (uint64_t)&v408 - v29;
  v30 = type metadata accessor for DispatchPredicate(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (uint8_t *)&v408 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v437 = (uint8_t *)v5;
  v34 = *(void **)(v5 + 24);
  *(_QWORD *)v33 = v34;
  v35 = *(void (**)(_QWORD))(v31 + 104);
  v433 = enum case for DispatchPredicate.onQueue(_:);
  v434 = (void (*)(uint8_t *, _QWORD, uint64_t))v35;
  v35(v33);
  v432 = v34;
  LOBYTE(v34) = _dispatchPreconditionTest(_:)(v33);
  v36 = *(void (**)(uint8_t *, uint64_t))(v31 + 8);
  v435 = v33;
  v436 = v30;
  v36(v33, v30);
  if ((v34 & 1) == 0)
  {
    __break(1u);
    JUMPOUT(0x100AF55CCLL);
  }
  sub_100057DB8(a1, (uint64_t)&v445);
  v37 = sub_10001A9A8(&qword_1010EC530);
  if (!swift_dynamicCast(&v440, &v445, v37, &type metadata for AccessoryOwnerCommand, 6))
  {
    if (qword_1010EA1A0 != -1)
      swift_once(&qword_1010EA1A0, sub_100AEF424);
    v60 = type metadata accessor for Logger(0);
    sub_10001A9E8(v60, (uint64_t)qword_1011B7C10);
    v61 = sub_100057DB8(a1, (uint64_t)&v445);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter(v62);
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = swift_slowAlloc(32, -1);
      v444 = v65;
      *(_DWORD *)v64 = 136315138;
      sub_100057DB8((uint64_t)&v445, (uint64_t)&v440);
      v66 = String.init<A>(describing:)(&v440, v37);
      v440 = sub_100016940(v66, v67, &v444);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v64 + 4, v64 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v445);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Invalid command from payload %s", v64, 0xCu);
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v445);
    }

    v9 = v438;
    v68 = 13;
    goto LABEL_14;
  }
  v38 = v441[0];
  v439 = v440;
  v39 = v442;
  v431 = v441[1];
  LODWORD(v40) = v443;
  switch((v442 >> 60) & 3 | (4 * v443))
  {
    case 0uLL:
      v413 = v36;
      v414 = v443;
      v41 = v439;
      sub_10001BBBC(v439, v441[0]);
      sub_10001BBBC(v41, v38);
      if (qword_1010EA1A0 != -1)
        swift_once(&qword_1010EA1A0, sub_100AEF424);
      v42 = type metadata accessor for Logger(0);
      v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B7C10);
      v44 = v439;
      sub_10001BBBC(v439, v38);
      v45 = sub_10001BBBC(v44, v38);
      v411 = v43;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.default.getter(v46);
      v48 = v47;
      v49 = os_log_type_enabled(v46, v47);
      v415 = v39;
      if (v49)
      {
        LODWORD(v410) = v48;
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = swift_slowAlloc(32, -1);
        v445 = v51;
        *(_DWORD *)v50 = 136315138;
        v409 = v50 + 4;
        v412 = v38;
        v52 = v439;
        v53 = Data.hexString.getter(v439, v412);
        v440 = sub_100016940(v53, v54, &v445);
        v39 = v415;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v409, v50 + 12);
        swift_bridgeObjectRelease();
        v55 = v431;
        v56 = v414;
        sub_100439C44(v52, v412, v431, v39, v414);
        v57 = v52;
        v38 = v412;
        sub_100439C44(v57, v412, v55, v39, v56);
        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v410, "primaryKey %s", v50, 0xCu);
        swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        v58 = v50;
        v59 = v56;
        swift_slowDealloc(v58, -1, -1);
      }
      else
      {
        v170 = v439;
        v171 = v431;
        v59 = v414;
        sub_100439C44(v439, v38, v431, v39, v414);
        sub_100439C44(v170, v38, v171, v39, v59);
      }

      v445 = v439;
      v446[0] = v38;
      v172 = sub_100035530();
      v173 = DataProtocol.isNull.getter(&type metadata for Data, v172);
      if ((v173 & 1) != 0)
      {
        v174 = Logger.logObject.getter(v173);
        v175 = static os_log_type_t.default.getter(v174);
        if (os_log_type_enabled(v174, v175))
        {
          v176 = v39;
          v177 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v177 = 0;
          _os_log_impl((void *)&_mh_execute_header, v174, v175, "primaryKey is empty! Verifying FindMyNetworkIdV2.", v177, 2u);
          v178 = v177;
          v39 = v176;
          swift_slowDealloc(v178, -1, -1);
        }

        v179 = sub_100B656E4();
        v181 = v431;
        if (v180 >> 60 != 15)
          __asm { BR              X10 }
        v182 = Logger.logObject.getter(v179);
        v183 = static os_log_type_t.error.getter(v182);
        if (os_log_type_enabled(v182, v183))
        {
          v184 = v39;
          v185 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v185 = 0;
          _os_log_impl((void *)&_mh_execute_header, v182, v183, "Unable to generate FindMyNetworkId!", v185, 2u);
          swift_slowDealloc(v185, -1, -1);

          v186 = v439;
          sub_100439C44(v439, v38, v181, v184, v59);
          sub_100439C44(v186, v38, v181, v184, v59);
          v187 = v186;
          v188 = v38;
LABEL_66:
          sub_10001BC14(v187, v188);
          goto LABEL_123;
        }
        v291 = v439;
        sub_100439C44(v439, v38, v181, v39, v59);
        sub_100439C44(v291, v38, v181, v39, v59);

        v83 = v291;
        v84 = v38;
        v85 = v181;
LABEL_121:
        v146 = v39;
        v147 = v59;
LABEL_122:
        sub_100439C44(v83, v84, v85, v146, v147);
LABEL_123:
        v9 = v438;
        v68 = 9;
        goto LABEL_14;
      }
      v198 = v439;
      sub_10001BBBC(v439, v38);
      sub_1002F7394(v198, v38);
      v412 = v38;
      v268 = v445;
      v269 = v446[0];
      v270 = (uint8_t *)*((_QWORD *)v437 + 2);
      v271 = *(_QWORD *)&v270[OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock];
      v272 = type metadata accessor for BeaconKeyManager(0);
      v409 = v270;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v270, v271, &type metadata for () + 1, v272);
      sub_100DCF760(v268, v269, (uint64_t)v22);
      swift_release();
      v273 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v425);
      v410 = v268;
      if (v273 == 1)
      {
        v274 = sub_100004048((uint64_t)v22, &qword_1011091A0);
        v275 = Logger.logObject.getter(v274);
        v276 = static os_log_type_t.default.getter(v275);
        if (os_log_type_enabled(v275, v276))
        {
          v277 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v277 = 0;
          _os_log_impl((void *)&_mh_execute_header, v275, v276, "Unknown beacon. Verifying FMNIDV2...", v277, 2u);
          swift_slowDealloc(v277, -1, -1);
        }

        v278 = sub_100B656E4();
        v280 = v431;
        if (v279 >> 60 != 15)
          __asm { BR              X10 }
        v281 = Logger.logObject.getter(v278);
        v282 = static os_log_type_t.error.getter(v281);
        if (os_log_type_enabled(v281, v282))
        {
          v283 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v283 = 0;
          _os_log_impl((void *)&_mh_execute_header, v281, v282, "Unable to generate FindMyNetworkId!", v283, 2u);
          swift_slowDealloc(v283, -1, -1);
          sub_10001BC14(v410, v269);

          v284 = v439;
          v285 = v412;
          v286 = v415;
          sub_100439C44(v439, v412, v280, v415, v59);
          sub_100439C44(v284, v285, v280, v286, v59);
          v187 = v284;
          v188 = v285;
          goto LABEL_66;
        }
        v368 = v439;
        v369 = v412;
        v39 = v415;
        sub_100439C44(v439, v412, v280, v415, v59);
        sub_100439C44(v368, v369, v280, v39, v59);
        sub_10001BC14(v410, v269);

        v83 = v368;
        v84 = v369;
        v85 = v280;
        goto LABEL_121;
      }
      v308 = v424;
      sub_1000126EC((uint64_t)v22, v424, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_10005972C(v308, (uint64_t)v28, type metadata accessor for BeaconKeyManager.IndexInformation);
      v309 = v419;
      v310 = sub_10005972C(v308, v419, type metadata accessor for BeaconKeyManager.IndexInformation);
      v311 = Logger.logObject.getter(v310);
      v312 = static os_log_type_t.default.getter(v311);
      v313 = os_log_type_enabled(v311, v312);
      v408 = v269;
      if (v313)
      {
        v314 = v309;
        v315 = swift_slowAlloc(22, -1);
        v316 = swift_slowAlloc(64, -1);
        v445 = v316;
        *(_DWORD *)v315 = 136315394;
        v317 = type metadata accessor for UUID(0);
        v318 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v319 = dispatch thunk of CustomStringConvertible.description.getter(v317, v318);
        v440 = sub_100016940(v319, v320, &v445);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v315 + 4, v315 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v28, type metadata accessor for BeaconKeyManager.IndexInformation);
        *(_WORD *)(v315 + 12) = 2082;
        v321 = (_QWORD *)(v314 + *(int *)(v425 + 20));
        v323 = v321[3];
        v322 = v321[4];
        sub_10001AA44(v321, v323);
        v324 = dispatch thunk of CustomStringConvertible.description.getter(v323, *(_QWORD *)(v322 + 16));
        v440 = sub_100016940(v324, v325, &v445);
        v59 = v414;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v315 + 14, v315 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v314, type metadata accessor for BeaconKeyManager.IndexInformation);
        _os_log_impl((void *)&_mh_execute_header, v311, v312, "Found beacon %s and index %{public}s", (uint8_t *)v315, 0x16u);
        swift_arrayDestroy(v316, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v316, -1, -1);
        swift_slowDealloc(v315, -1, -1);
      }
      else
      {
        sub_1000126B0((uint64_t)v28, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_1000126B0(v309, type metadata accessor for BeaconKeyManager.IndexInformation);
      }

      v337 = v423;
      v338 = v421;
      sub_10080CD54(v308, v421);
      v339 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v420 + 48))(v338, 1, v337);
      v340 = v415;
      v341 = v431;
      v342 = v422;
      if (v339 == 1)
      {
        v343 = sub_100004048(v338, (uint64_t *)&unk_1010EE180);
LABEL_148:
        v344 = Logger.logObject.getter(v343);
        v345 = static os_log_type_t.default.getter(v344);
        if (os_log_type_enabled(v344, v345))
        {
          v346 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v346 = 0;
          _os_log_impl((void *)&_mh_execute_header, v344, v345, "Owner accessory. Verifying FMNIDV2...", v346, 2u);
          v347 = v346;
          v340 = v415;
          swift_slowDealloc(v347, -1, -1);
        }

        v348 = sub_100B656E4();
        if (v349 >> 60 != 15)
          __asm { BR              X10 }
        v350 = Logger.logObject.getter(v348);
        v351 = static os_log_type_t.error.getter(v350);
        if (os_log_type_enabled(v350, v351))
        {
          v352 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v352 = 0;
          _os_log_impl((void *)&_mh_execute_header, v350, v351, "Unable to generate FindMyNetworkId!", v352, 2u);
          v353 = v352;
          v340 = v415;
          swift_slowDealloc(v353, -1, -1);
        }
        sub_10001BC14(v410, v408);

        v354 = v439;
        v355 = v412;
        sub_100439C44(v439, v412, v341, v340, v59);
        sub_100439C44(v354, v355, v341, v340, v59);
        sub_10001BC14(v354, v355);
        sub_1000126B0(v308, type metadata accessor for BeaconKeyManager.IndexInformation);
LABEL_95:
        v68 = 9;
        v9 = v438;
        goto LABEL_14;
      }
      sub_1000126EC(v338, v422, type metadata accessor for SharedBeaconRecord);
      v356 = *(unsigned __int8 *)(v342 + *(int *)(v337 + 64));
      v357 = v418;
      sub_10005972C(v342, v418, type metadata accessor for SharedBeaconRecord);
      if (v356 == 1)
      {
        sub_1000126B0(v357, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        v370 = *(unsigned __int8 *)(v357 + *(int *)(v337 + 64));
        sub_1000126B0(v357, type metadata accessor for SharedBeaconRecord);
        if (v370 != 4)
        {
          v343 = sub_1000126B0(v342, type metadata accessor for SharedBeaconRecord);
          goto LABEL_148;
        }
      }
      v371 = v417;
      v372 = sub_10005972C(v342, v417, type metadata accessor for SharedBeaconRecord);
      v373 = Logger.logObject.getter(v372);
      v374 = static os_log_type_t.default.getter(v373);
      if (os_log_type_enabled(v373, v374))
      {
        v375 = (uint8_t *)swift_slowAlloc(12, -1);
        v376 = swift_slowAlloc(32, -1);
        v445 = v376;
        *(_DWORD *)v375 = 136315138;
        v377 = v416;
        sub_10005972C(v371, v416, type metadata accessor for SharedBeaconRecord);
        v378 = String.init<A>(describing:)(v377, v423);
        v440 = sub_100016940(v378, v379, &v445);
        v337 = v423;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v375 + 4, v375 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v371, type metadata accessor for SharedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v373, v374, "Found sharedBeacon %s", v375, 0xCu);
        swift_arrayDestroy(v376, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v376, -1, -1);
        swift_slowDealloc(v375, -1, -1);
      }
      else
      {
        sub_1000126B0(v371, type metadata accessor for SharedBeaconRecord);
      }

      v380 = v342 + *(int *)(v337 + 28);
      v382 = *(_QWORD *)(v380 + 8);
      v381 = *(void **)(v380 + 16);
      v383 = *(_BYTE *)v380;
      swift_bridgeObjectRetain(v381);
      v384 = (void *)sub_100ACD7B4(v383, v382, v381);
      swift_bridgeObjectRelease();
      v385 = objc_msgSend(v384, "description");

      v386 = static String._unconditionallyBridgeFromObjectiveC(_:)(v385);
      v388 = v387;

      v389 = (int *)v428;
      v390 = v430;
      sub_100786FB4((char *)v430 + *(int *)(v428 + 20));
      sub_10005972C(v427, (uint64_t)v390 + v389[6], type metadata accessor for BluetoothManagerDevice);
      swift_bridgeObjectRetain(v381);
      v391 = (void *)sub_100ACD7B4(v383, v382, v381);
      v392 = objc_msgSend(v391, "description");

      v393 = static String._unconditionallyBridgeFromObjectiveC(_:)(v392);
      v395 = v394;

      v396 = sub_100C73E1C(v393, v395);
      v398 = v397;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *v390 = v386;
      v390[1] = v388;
      *((_BYTE *)v390 + v389[7]) = v429 & 1;
      v399 = (uint64_t *)((char *)v390 + v389[8]);
      *v399 = v396;
      v399[1] = v398;
      sub_100AF5980((uint64_t)v390);
      sub_10001BC14(v410, v408);
      v400 = v439;
      v401 = v412;
      v402 = v431;
      v403 = v415;
      LOBYTE(v381) = v414;
      sub_100439C44(v439, v412, v431, v415, v414);
      sub_100439C44(v400, v401, v402, v403, (char)v381);
      sub_10001BC14(v400, v401);
      sub_1000126B0((uint64_t)v390, type metadata accessor for PrivacyAlertSupport.AlertInfo);
      sub_1000126B0(v342, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(v424, type metadata accessor for BeaconKeyManager.IndexInformation);
      goto LABEL_97;
    case 1uLL:
      v415 = v442;
      v101 = v439;
      sub_10001BBBC(v439, v441[0]);
      v102 = sub_10001BBBC(v101, v38);
      static String.Encoding.utf8.getter(v102);
      v103 = String.init(data:encoding:)(v101, v38, v9);
      if (v104)
      {
        v105 = v103;
        v106 = v104;
        if (qword_1010EA1A0 != -1)
          swift_once(&qword_1010EA1A0, sub_100AEF424);
        v107 = type metadata accessor for Logger(0);
        sub_10001A9E8(v107, (uint64_t)qword_1011B7C10);
        swift_bridgeObjectRetain_n(v106, 2);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.default.getter(v109);
        if (os_log_type_enabled(v109, v110))
        {
          v111 = v40;
          v40 = swift_slowAlloc(22, -1);
          v112 = swift_slowAlloc(32, -1);
          v445 = v112;
          *(_DWORD *)v40 = 141558275;
          v440 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v40 + 4, v40 + 12);
          *(_WORD *)(v40 + 12) = 2081;
          swift_bridgeObjectRetain(v106);
          v440 = sub_100016940(v105, v106, &v445);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v40 + 14, v40 + 22);
          swift_bridgeObjectRelease_n(v106, 3);
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "iCloudIdentifier: %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v112, -1, -1);
          v113 = v40;
          LOBYTE(v40) = v111;
          swift_slowDealloc(v113, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v106, 2);
        }
        v9 = v438;
        v240 = v431;
        v241 = (int *)v428;
        v242 = v430;
        sub_100786FB4((char *)v430 + *(int *)(v428 + 20));
        sub_10005972C(v427, (uint64_t)v242 + v241[6], type metadata accessor for BluetoothManagerDevice);
        *v242 = v105;
        v242[1] = v106;
        *((_BYTE *)v242 + v241[7]) = v429 & 1;
        v243 = (uint64_t *)((char *)v242 + v241[8]);
        *v243 = 0;
        v243[1] = 0;
        sub_100AF5980((uint64_t)v242);
        v244 = v439;
        v245 = v415;
        sub_100439C44(v439, v38, v240, v415, v40);
        sub_100439C44(v244, v38, v240, v245, v40);
        sub_10001BC14(v244, v38);
        sub_1000126B0((uint64_t)v242, type metadata accessor for PrivacyAlertSupport.AlertInfo);
        v68 = 2;
        goto LABEL_14;
      }
      v9 = v438;
      if (qword_1010EA1A0 != -1)
        goto LABEL_171;
      goto LABEL_85;
    case 3uLL:
      v9 = (char *)v36;
      v86 = v439;
      v87 = v431;
      sub_100439BC4(v439, v441[0], v431, v442, v443);
      sub_10001BBBC(v86, v38);
      sub_10001BBBC(v87, v39 & 0xCFFFFFFFFFFFFFFFLL);
      v88 = sub_1002A61B4(v86, v38, v87, v39 & 0xCFFFFFFFFFFFFFFFLL);
      if ((v88 & 0xFF0000) == 0x60000)
      {
        if (qword_1010EA1A0 != -1)
          swift_once(&qword_1010EA1A0, sub_100AEF424);
        v89 = type metadata accessor for Logger(0);
        v90 = sub_10001A9E8(v89, (uint64_t)qword_1011B7C10);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.error.getter(v91);
        v93 = os_log_type_enabled(v91, v92);
        v9 = v438;
        if (v93)
        {
          v94 = v39;
          v95 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "Invalid commandResponse", v95, 2u);
          v96 = v95;
          v39 = v94;
          swift_slowDealloc(v96, -1, -1);
        }

        v97 = v439;
        sub_100439C44(v439, v38, v87, v39, v40);
        v98 = v97;
        v99 = v38;
        v100 = v87;
        goto LABEL_117;
      }
      v148 = v88;
      v415 = v39;
      if (qword_1010EA1A0 != -1)
        swift_once(&qword_1010EA1A0, sub_100AEF424);
      v149 = type metadata accessor for Logger(0);
      v430 = (uint64_t *)sub_10001A9E8(v149, (uint64_t)qword_1011B7C10);
      v150 = Logger.logObject.getter(v430);
      v151 = static os_log_type_t.default.getter(v150);
      v152 = os_log_type_enabled(v150, v151);
      v414 = v40;
      if (v152)
      {
        v153 = swift_slowAlloc(16, -1);
        v154 = swift_slowAlloc(32, -1);
        v445 = v154;
        *(_DWORD *)v153 = 33686018;
        LOWORD(v440) = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, (char *)&v440 + 2, v153 + 4, v153 + 6);
        *(_WORD *)(v153 + 6) = 2082;
        if (BYTE2(v148))
          v155 = BYTE2(v148);
        else
          v155 = 6;
        v156 = sub_1002A5C3C(v155);
        v440 = sub_100016940(v156, v157, &v445);
        v87 = v431;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v153 + 8, v153 + 16);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v150, v151, "commandResponse: Opcode %{public}hu. Status %{public}s", (uint8_t *)v153, 0x10u);
        swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v154, -1, -1);
        swift_slowDealloc(v153, -1, -1);
      }

      v158 = v436;
      v159 = v437;
      v160 = v435;
      v161 = v432;
      *(_QWORD *)v435 = v432;
      v434(v160, v433, v158);
      v162 = v161;
      LODWORD(v40) = _dispatchPreconditionTest(_:)(v160);
      v163 = ((uint64_t (*)(uint8_t *, uint64_t))v9)(v160, v158);
      if ((v40 & 1) != 0)
      {
        v164 = BYTE2(v148);
        if (BYTE2(v148) && v159[120] == 2)
        {
          v165 = Logger.logObject.getter(v163);
          v166 = static os_log_type_t.default.getter(v165);
          if (os_log_type_enabled(v165, v166))
          {
            v167 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v167 = 0;
            _os_log_impl((void *)&_mh_execute_header, v165, v166, "Accessory does not support verifyFindMyNetworkId. Getting iCloud identifier...", v167, 2u);
            swift_slowDealloc(v167, -1, -1);
          }

          sub_1004E8548();
          BinaryDecodable.init(data:)(v168, 0, 0xC000000000000000);
          v9 = v438;
          v169 = v414;
          v326 = v439;
          v327 = v415;
          sub_100439C44(v439, v38, v87, v415, v414);
          sub_100439C44(v326, v38, v87, v327, v169);
          v69 = 0;
          goto LABEL_135;
        }
        v252 = v435;
        v251 = v436;
        *(_QWORD *)v435 = v162;
        v434(v252, v433, v251);
        v253 = v162;
        v254 = _dispatchPreconditionTest(_:)(v252);
        v255 = ((uint64_t (*)(uint8_t *, uint64_t))v9)(v252, v251);
        if ((v254 & 1) != 0)
        {
          if (v164 && v159[120] == 6)
          {
            v256 = Logger.logObject.getter(v255);
            v257 = static os_log_type_t.default.getter(v256);
            if (os_log_type_enabled(v256, v257))
            {
              v258 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v258 = 0;
              _os_log_impl((void *)&_mh_execute_header, v256, v257, "Accessory does not have a PrimaryKey and does not support verifyFindMyNetworkIdV2", v258, 2u);
              swift_slowDealloc(v258, -1, -1);
            }

            v259 = sub_100B656E4();
            if (v260 >> 60 != 15)
              __asm { BR              X10 }
LABEL_104:
            v261 = Logger.logObject.getter(v259);
            v262 = static os_log_type_t.error.getter(v261);
            if (os_log_type_enabled(v261, v262))
            {
              v263 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v263 = 0;
              _os_log_impl((void *)&_mh_execute_header, v261, v262, "Unable to generate FindMyNetworkId!", v263, 2u);
              swift_slowDealloc(v263, -1, -1);
            }

            v264 = v439;
            v265 = v415;
            v266 = v414;
            sub_100439C44(v439, v38, v87, v415, v414);
            sub_100439C44(v264, v38, v87, v265, v266);
            goto LABEL_95;
          }
          v293 = v435;
          v292 = v436;
          *(_QWORD *)v435 = v253;
          v434(v293, v433, v292);
          v294 = v253;
          v295 = _dispatchPreconditionTest(_:)(v293);
          v296 = ((uint64_t (*)(uint8_t *, uint64_t))v9)(v293, v292);
          if ((v295 & 1) != 0)
          {
            if (v164 && v159[120] == 5)
            {
              v297 = Logger.logObject.getter(v296);
              v298 = static os_log_type_t.default.getter(v297);
              if (os_log_type_enabled(v297, v298))
              {
                v299 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v299 = 0;
                _os_log_impl((void *)&_mh_execute_header, v297, v298, "Accessory does not have a PrimaryKey and does not support verifyFindMyNetworkId, proceed to pairing", v299, 2u);
                swift_slowDealloc(v299, -1, -1);
              }

              v445 = 0;
              swift_retain();
              PassthroughSubject.send(_:)(&v445);
              swift_release();
              v300 = v439;
              v301 = v415;
              v302 = v414;
              sub_100439C44(v439, v38, v87, v415, v414);
              sub_100439C44(v300, v38, v87, v301, v302);
              v68 = 7;
              v9 = v438;
              goto LABEL_14;
            }
            v329 = v435;
            v328 = v436;
            *(_QWORD *)v435 = v294;
            v434(v329, v433, v328);
            v330 = v294;
            v331 = _dispatchPreconditionTest(_:)(v329);
            v332 = ((uint64_t (*)(uint8_t *, uint64_t))v9)(v329, v328);
            if ((v331 & 1) == 0)
            {
              __break(1u);
              JUMPOUT(0x100AF58B0);
            }
            if (!v164 || v159[120] != 3)
            {
              v359 = v435;
              v358 = v436;
              *(_QWORD *)v435 = v330;
              v434(v359, v433, v358);
              v360 = v330;
              v361 = _dispatchPreconditionTest(_:)(v359);
              v362 = ((uint64_t (*)(uint8_t *, uint64_t))v9)(v359, v358);
              if ((v361 & 1) == 0)
              {
                __break(1u);
                JUMPOUT(0x100AF58B8);
              }
              v363 = v159[120];
              v364 = Logger.logObject.getter(v362);
              v365 = static os_log_type_t.error.getter(v364);
              v366 = os_log_type_enabled(v364, v365);
              v9 = v438;
              if (v366)
              {
                v367 = (_DWORD *)swift_slowAlloc(12, -1);
                v445 = swift_slowAlloc(32, -1);
                *v367 = 136446210;
                __asm { BR              X9 }
              }

              v404 = v439;
              v405 = v431;
              v406 = v415;
              v407 = v414;
              sub_100439C44(v439, v38, v431, v415, v414);
              sub_100439C44(v404, v38, v405, v406, v407);
              v68 = 7;
              goto LABEL_14;
            }
            v333 = Logger.logObject.getter(v332);
            v334 = static os_log_type_t.default.getter(v333);
            if (os_log_type_enabled(v333, v334))
            {
              v335 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v335 = 0;
              _os_log_impl((void *)&_mh_execute_header, v333, v334, "Accessory does not support verifyFindMyNetworkIdV2. Falling back to verifyFindMyNetworkId...", v335, 2u);
              swift_slowDealloc(v335, -1, -1);
            }

            v259 = sub_100B656E4();
            if (v336 >> 60 != 15)
              __asm { BR              X10 }
            goto LABEL_104;
          }
          goto LABEL_174;
        }
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
        goto LABEL_175;
      }
      __break(1u);
      goto LABEL_170;
    case 5uLL:
      v114 = v36;
      if (qword_1010EA1A0 != -1)
        swift_once(&qword_1010EA1A0, sub_100AEF424);
      v115 = type metadata accessor for Logger(0);
      v116 = sub_10001A9E8(v115, (uint64_t)qword_1011B7C10);
      v117 = Logger.logObject.getter(v116);
      v118 = static os_log_type_t.default.getter(v117);
      v119 = os_log_type_enabled(v117, v118);
      v120 = v437;
      if (v119)
      {
        v121 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v121 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "Received .verifyFindMyNetworkIdResponse", v121, 2u);
        swift_slowDealloc(v121, -1, -1);
      }

      if ((v439 & 1) == 0)
      {
        v123 = Logger.logObject.getter(v122);
        v124 = static os_log_type_t.default.getter(v123);
        if (os_log_type_enabled(v123, v124))
        {
          v125 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v125 = 0;
          _os_log_impl((void *)&_mh_execute_header, v123, v124, "FindMyNetworkId verification failed! Getting iCloud identifier to show privacy alert.", v125, 2u);
          swift_slowDealloc(v125, -1, -1);
        }

        sub_1004E8548();
        BinaryDecodable.init(data:)(v126, 0, 0xC000000000000000);
        v128 = v435;
        v127 = v436;
        v129 = v432;
        *(_QWORD *)v435 = v432;
        v434(v128, v433, v127);
        v130 = v129;
        LOBYTE(v129) = _dispatchPreconditionTest(_:)(v128);
        v114(v128, v127);
        if ((v129 & 1) == 0)
          goto LABEL_173;
        v69 = 0;
        v120[120] = 4;
LABEL_132:
        v9 = v438;
LABEL_135:
        *(_QWORD *)v9 = 1;
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        *((_QWORD *)v9 + 3) = 0;
        v9[32] = 2;
        goto LABEL_16;
      }
      v40 = (uint64_t)v435;
      v189 = v436;
      v190 = v432;
      *(_QWORD *)v435 = v432;
      v434((uint8_t *)v40, v433, v189);
      v191 = v190;
      LOBYTE(v190) = _dispatchPreconditionTest(_:)(v40);
      v192 = ((uint64_t (*)(uint64_t, uint64_t))v36)(v40, v189);
      if ((v190 & 1) == 0)
      {
LABEL_170:
        __break(1u);
LABEL_171:
        swift_once(&qword_1010EA1A0, sub_100AEF424);
LABEL_85:
        v209 = type metadata accessor for Logger(0);
        sub_10001A9E8(v209, (uint64_t)qword_1011B7C10);
        v210 = v439;
        sub_10001BBBC(v439, v38);
        v211 = sub_10001BBBC(v210, v38);
        v212 = Logger.logObject.getter(v211);
        v213 = static os_log_type_t.error.getter(v212);
        if (!os_log_type_enabled(v212, v213))
        {
          v287 = v439;
          v288 = v431;
          v39 = v415;
          sub_100439C44(v439, v38, v431, v415, v40);
          sub_100439C44(v287, v38, v288, v39, v40);
          sub_10001BC14(v287, v38);
          sub_10001BC14(v287, v38);

          v98 = v287;
          v99 = v38;
          v100 = v288;
LABEL_117:
          sub_100439C44(v98, v99, v100, v39, v40);
          v68 = 9;
          goto LABEL_14;
        }
        v214 = (uint8_t *)swift_slowAlloc(12, -1);
        v215 = swift_slowAlloc(32, -1);
        v414 = v40;
        v216 = v215;
        v445 = v215;
        *(_DWORD *)v214 = 136315138;
        v217 = v38;
        v218 = v439;
        v219 = Data.hexString.getter(v439, v217);
        v440 = sub_100016940(v219, v220, &v445);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, v441, v214 + 4, v214 + 12);
        swift_bridgeObjectRelease();
        v221 = v431;
        v222 = v415;
        v223 = v414;
        sub_100439C44(v218, v217, v431, v415, v414);
        sub_100439C44(v218, v217, v221, v222, v223);
        _os_log_impl((void *)&_mh_execute_header, v212, v213, "Invalid format for icloudIdentifier %s", v214, 0xCu);
        swift_arrayDestroy(v216, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v216, -1, -1);
        swift_slowDealloc(v214, -1, -1);

        sub_100439C44(v218, v217, v221, v222, v223);
        sub_100439C44(v218, v217, v221, v222, v223);
        sub_10001BC14(v218, v217);
        v68 = 9;
LABEL_14:
        *(_QWORD *)v9 = v68;
LABEL_15:
        *(_OWORD *)(v9 + 8) = 0u;
        *(_OWORD *)(v9 + 24) = 0u;
        v9[40] = 11;
        v69 = 1;
        goto LABEL_16;
      }
      v193 = v120[120];
      v194 = Logger.logObject.getter(v192);
      v195 = static os_log_type_t.default.getter(v194);
      v196 = os_log_type_enabled(v194, v195);
      v9 = v438;
      if (v193 != 5)
      {
        if (v196)
        {
          v267 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v267 = 0;
          _os_log_impl((void *)&_mh_execute_header, v194, v195, "FindMyNetworkId verified!", v267, 2u);
          swift_slowDealloc(v267, -1, -1);
        }

        v445 = 0;
        swift_retain();
        PassthroughSubject.send(_:)(&v445);
        swift_release();
        v68 = 2;
        goto LABEL_14;
      }
      if (v196)
      {
        v197 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v197 = 0;
        _os_log_impl((void *)&_mh_execute_header, v194, v195, "FindMyNetworkId verified, but no PrimaryKey. Re-pairing both buds.", v197, 2u);
        swift_slowDealloc(v197, -1, -1);
      }

      v69 = 1;
      v445 = 1;
      swift_retain();
      PassthroughSubject.send(_:)(&v445);
      swift_release();
      *(_QWORD *)v9 = 2;
      *(_OWORD *)(v9 + 8) = 0u;
      *(_OWORD *)(v9 + 24) = 0u;
      v9[40] = 11;
LABEL_16:
      v9[41] = v69;
      return;
    case 7uLL:
      v413 = v36;
      if (qword_1010EA1A0 != -1)
        swift_once(&qword_1010EA1A0, sub_100AEF424);
      v131 = type metadata accessor for Logger(0);
      sub_10001A9E8(v131, (uint64_t)qword_1011B7C10);
      v132 = v431;
      sub_100439BC4(v439, v38, v431, v39, v40);
      swift_bridgeObjectRetain(v38);
      v134 = Logger.logObject.getter(v133);
      v135 = static os_log_type_t.default.getter(v134);
      if (os_log_type_enabled(v134, v135))
      {
        v136 = v439;
        v137 = v38;
        v138 = v439 >> 8;
        v139 = swift_slowAlloc(12, -1);
        v415 = v39;
        v140 = (uint8_t *)v139;
        v141 = swift_slowAlloc(32, -1);
        *(_DWORD *)v140 = 136315138;
        v440 = v141;
        v430 = (uint64_t *)(v140 + 4);
        LOBYTE(v445) = v136;
        BYTE1(v445) = v138;
        v446[0] = v137;
        swift_bridgeObjectRetain(v137);
        v142 = String.init<A>(describing:)(&v445, &type metadata for VerifyFindMyNetworkIdResponseV2Payload);
        v445 = sub_100016940(v142, v143, (uint64_t *)&v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v445, v446, v430, v140 + 12);
        v38 = v137;
        v132 = v431;
        swift_bridgeObjectRelease();
        sub_100439C44(v136, v137, v132, v415, v40);
        sub_100439C44(v136, v137, v132, v415, v40);
        _os_log_impl((void *)&_mh_execute_header, v134, v135, "Received .verifyFindMyNetworkIdResponseV2: %s", v140, 0xCu);
        swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v141, -1, -1);
        v144 = v140;
        v39 = v415;
        swift_slowDealloc(v144, -1, -1);
      }
      else
      {
        v199 = v439;
        sub_100439C44(v439, v38, v132, v39, v40);
        sub_100439C44(v199, v38, v132, v39, v40);
      }

      if (!(_BYTE)v439)
        goto LABEL_87;
      if (v439 == 2)
      {
        v246 = v39;
        v247 = Logger.logObject.getter(v200);
        v248 = static os_log_type_t.default.getter(v247);
        if (os_log_type_enabled(v247, v248))
        {
          v249 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v249 = 0;
          _os_log_impl((void *)&_mh_execute_header, v247, v248, "FindMyNetworkId verification failed! Getting iCloud identifier to show privacy alert.", v249, 2u);
          swift_slowDealloc(v249, -1, -1);
        }

        sub_1004E8548();
        BinaryDecodable.init(data:)(v250, 0, 0xC000000000000000);
        v304 = v435;
        v303 = v436;
        v305 = v432;
        *(_QWORD *)v435 = v432;
        v434(v304, v433, v303);
        v306 = v305;
        v307 = _dispatchPreconditionTest(_:)(v304);
        v413(v304, v303);
        if ((v307 & 1) == 0)
        {
LABEL_175:
          __break(1u);
          JUMPOUT(0x100AF58A0);
        }
        v437[120] = 4;
        sub_100439C44(v439, v38, v132, v246, v40);
        v69 = 0;
        goto LABEL_132;
      }
      if (v439 == 1)
      {
        v201 = *(_QWORD *)(v38 + 16);
        if (!v201)
        {
LABEL_81:
          v204 = Logger.logObject.getter(v200);
          v205 = static os_log_type_t.default.getter(v204);
          if (os_log_type_enabled(v204, v205))
          {
            v206 = v39;
            v207 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v207 = 0;
            _os_log_impl((void *)&_mh_execute_header, v204, v205, "FindMyNetworkId verified, all parts are paired on the accessory.", v207, 2u);
            v208 = v207;
            v39 = v206;
            swift_slowDealloc(v208, -1, -1);
          }

          v445 = 2;
          swift_retain();
          PassthroughSubject.send(_:)(&v445);
          swift_release();
          sub_100439C44(v439, v38, v132, v39, v40);
          v9 = v438;
          *(_QWORD *)v438 = 2;
          goto LABEL_15;
        }
        v202 = (unsigned __int8 *)(v38 + 56);
        while (1)
        {
          v203 = *v202;
          v202 += 32;
          if (v203 != 1)
            break;
          if (!--v201)
            goto LABEL_81;
        }
LABEL_87:
        v224 = v439;
        sub_100439BC4(v439, v38, v132, v39, v40);
        sub_100439BC4(v224, v38, v132, v39, v40);
        sub_100439BC4(v224, v38, v132, v39, v40);
        v226 = Logger.logObject.getter(v225);
        v227 = static os_log_type_t.default.getter(v226);
        if (os_log_type_enabled(v226, v227))
        {
          v228 = (uint8_t *)swift_slowAlloc(12, -1);
          v436 = swift_slowAlloc(32, -1);
          v440 = v436;
          *(_DWORD *)v228 = 136446210;
          v229 = v228 + 12;
          v434 = (void (*)(uint8_t *, _QWORD, uint64_t))(v228 + 4);
          v435 = v228;
          v445 = v38;
          v230 = v439;
          sub_100439BC4(v439, v38, v431, v39, v40);
          v231 = sub_100AF8DB4();
          v445 = CustomStringConvertible.typeDescription.getter(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus, v231);
          v446[0] = v232;
          v233._countAndFlagsBits = 8250;
          v233._object = (void *)0xE200000000000000;
          String.append(_:)(v233);
          swift_bridgeObjectRetain(v38);
          v234 = v39;
          v236 = sub_100AEF18C(v235);
          sub_100439C44(v230, v38, v431, v234, v40);
          v237._countAndFlagsBits = Array.description.getter(v236, &type metadata for String);
          String.append(_:)(v237);
          v39 = v234;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100439C44(v230, v38, v431, v234, v40);
          v445 = sub_100016940(v445, v446[0], (uint64_t *)&v440);
          v132 = v431;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v445, v446, v434, v229);
          swift_bridgeObjectRelease();
          sub_100439C44(v230, v38, v132, v39, v40);
          sub_100439C44(v230, v38, v132, v39, v40);
          v238 = v435;
          _os_log_impl((void *)&_mh_execute_header, v226, v227, "FindMyNetworkId verified, but need partial re-pair: %{public}s", v435, 0xCu);
          v239 = v436;
          swift_arrayDestroy(v436, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v239, -1, -1);
          swift_slowDealloc(v238, -1, -1);
        }
        else
        {
          v289 = v439;
          sub_100439C44(v439, v38, v132, v39, v40);
          sub_100439C44(v289, v38, v132, v39, v40);
        }

        v9 = v438;
        v445 = v38;
        swift_retain();
        PassthroughSubject.send(_:)(&v445);
        swift_release();
        v290 = v439;
        sub_100439C44(v439, v38, v132, v39, v40);
        sub_100439C44(v290, v38, v132, v39, v40);
        v68 = 2;
      }
      else
      {
        sub_100439C44(v439, v38, v132, v39, v40);
LABEL_97:
        v68 = 2;
        v9 = v438;
      }
      goto LABEL_14;
    default:
      if (qword_1010EA1A0 != -1)
        swift_once(&qword_1010EA1A0, sub_100AEF424);
      v70 = type metadata accessor for Logger(0);
      sub_10001A9E8(v70, (uint64_t)qword_1011B7C10);
      v71 = v439;
      v72 = v431;
      sub_100439BC4(v439, v38, v431, v39, v40);
      sub_100439BC4(v71, v38, v72, v39, v40);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = v72;
        v77 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = v40;
        v78 = swift_slowAlloc(32, -1);
        v440 = v78;
        v437 = v77;
        *(_DWORD *)v77 = 136315138;
        v436 = (uint64_t)(v77 + 4);
        v79 = v439;
        v445 = v439;
        v446[0] = v38;
        v446[1] = v76;
        v446[2] = v39;
        v447 = v59;
        sub_100439BC4(v439, v38, v76, v39, v59);
        v80 = String.init<A>(describing:)(&v445, &type metadata for AccessoryOwnerCommand);
        v445 = sub_100016940(v80, v81, (uint64_t *)&v440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v445, v446, v436, v77 + 12);
        swift_bridgeObjectRelease();
        sub_100439C44(v79, v38, v76, v39, v59);
        sub_100439C44(v79, v38, v76, v39, v59);
        v82 = v437;
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Received unexpected owner command %s", v437, 0xCu);
        swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v78, -1, -1);
        swift_slowDealloc(v82, -1, -1);

        v83 = v79;
        v84 = v38;
        v85 = v76;
        goto LABEL_121;
      }
      v145 = v439;
      sub_100439C44(v439, v38, v72, v39, v40);
      sub_100439C44(v145, v38, v72, v39, v40);

      v83 = v145;
      v84 = v38;
      v85 = v72;
      v146 = v39;
      v147 = v40;
      goto LABEL_122;
  }
}

void sub_100AF5980(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)();
  uint64_t v97;

  v2 = v1;
  v85 = a1;
  v3 = type metadata accessor for PrivacyAlertSupport.AlertInfo(0);
  v82 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v81 = (uint64_t)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = v5;
  __chkstk_darwin(v4);
  v83 = (uint64_t)&v76 - v6;
  v80 = type metadata accessor for LocalizationUtility.Table(0);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v79 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v76 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v2 + 24);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_1010EA1A0, sub_100AEF424);
    goto LABEL_6;
  }
  v16 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v85 + *(int *)(v3 + 20), v8);
  *(_QWORD *)&v87 = sub_100AEF6A0();
  v21 = sub_100A0EA5C((uint64_t)v14, v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  sub_100AEFAC8(v87);
  if ((v21 & 1) != 0)
  {
    v22 = (uint64_t *)(v16 + *(int *)(v3 + 32));
    v23 = v22[1];
    if (v23)
    {
      v81 = *v22;
      v24 = enum case for LocalizationUtility.Table.default(_:);
      v25 = v78;
      v26 = v79;
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 104);
      v28 = v80;
      v27(v79, enum case for LocalizationUtility.Table.default(_:), v80);
      swift_bridgeObjectRetain(v23);
      v77 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000024, 0x8000000100EEE660, v26);
      v30 = v29;
      v31 = *(void (**)(char *, uint64_t))(v25 + 8);
      v31(v26, v28);
      v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v33 = swift_allocObject(v32, 112, 7);
      *(_OWORD *)(v33 + 16) = xmmword_100E22B10;
      *(_QWORD *)(v33 + 56) = &type metadata for String;
      v34 = sub_10001AA00();
      *(_QWORD *)(v33 + 32) = v81;
      *(_QWORD *)(v33 + 40) = v23;
      v36 = *(_QWORD *)v16;
      v35 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v33 + 96) = &type metadata for String;
      *(_QWORD *)(v33 + 104) = v34;
      *(_QWORD *)(v33 + 64) = v34;
      *(_QWORD *)(v33 + 72) = v36;
      *(_QWORD *)(v33 + 80) = v35;
      swift_bridgeObjectRetain(v35);
      v37 = v77;
      v38 = v30;
      v39 = v33;
    }
    else
    {
      v24 = enum case for LocalizationUtility.Table.default(_:);
      v50 = v78;
      v26 = v79;
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 104);
      v28 = v80;
      v27(v79, enum case for LocalizationUtility.Table.default(_:), v80);
      v51 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001DLL, 0x8000000100EEE5A0, v26);
      v53 = v52;
      v31 = *(void (**)(char *, uint64_t))(v50 + 8);
      v31(v26, v28);
      v54 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v55 = swift_allocObject(v54, 72, 7);
      *(_OWORD *)(v55 + 16) = xmmword_100E22B00;
      v56 = v16;
      v57 = *(_QWORD *)v16;
      v58 = *(_QWORD *)(v56 + 8);
      *(_QWORD *)(v55 + 56) = &type metadata for String;
      *(_QWORD *)(v55 + 64) = sub_10001AA00();
      *(_QWORD *)(v55 + 32) = v57;
      *(_QWORD *)(v55 + 40) = v58;
      swift_bridgeObjectRetain(v58);
      v37 = v51;
      v38 = v53;
      v39 = v55;
    }
    v78 = String.init(format:_:)(v37, v38, v39);
    v81 = v59;
    swift_bridgeObjectRelease();
    v27(v26, v24, v28);
    v60 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001BLL, 0x8000000100EEE5C0, v26);
    v62 = v61;
    v31(v26, v28);
    v27(v26, v24, v28);
    v63 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000024, 0x8000000100EEE5E0, v26);
    v64 = v28;
    v66 = v65;
    v31(v26, v64);
    v27(v26, v24, v64);
    v67 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000022, 0x8000000100EEE610, v26);
    v69 = v68;
    v31(v26, v64);
    *(_QWORD *)&v87 = v60;
    *((_QWORD *)&v87 + 1) = v62;
    v70 = v81;
    v88 = v78;
    v89 = v81;
    v90 = v63;
    v91 = v66;
    v92 = v67;
    v93 = v69;
    v94 = 0;
    v95 = 0;
    v96 = sub_100AF6134;
    v97 = 0;
    v71 = type metadata accessor for SBAlertHelper();
    swift_allocObject(v71, 272, 7);
    sub_100C45E78(&v87);
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v69);
    sub_10001D898(0, 0);
    sub_10001D898((uint64_t)sub_100AF6134, 0);
    sub_100C468AC();
    type metadata accessor for Transaction(0);
    v72 = v83;
    sub_10005972C(v85, v83, type metadata accessor for PrivacyAlertSupport.AlertInfo);
    v73 = *(unsigned __int8 *)(v82 + 80);
    v74 = (v73 + 16) & ~v73;
    v75 = swift_allocObject(&unk_1010AB0F8, v74 + v84, v73 | 7);
    sub_1000126EC(v72, v75 + v74, type metadata accessor for PrivacyAlertSupport.AlertInfo);
    static Transaction.asyncTask(name:block:)("PrivacyAlertAnalytics", 21, 2, &unk_101113C10, v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001D8A8(0, 0);
    sub_10001D8A8((uint64_t)sub_100AF6134, 0);
    swift_release();
    swift_release();
    return;
  }
  v2 = v8;
  if (qword_1010EA1A0 != -1)
    goto LABEL_13;
LABEL_6:
  v40 = type metadata accessor for Logger(0);
  sub_10001A9E8(v40, (uint64_t)qword_1011B7C10);
  v41 = v81;
  v42 = sub_10005972C(v16, v81, type metadata accessor for PrivacyAlertSupport.AlertInfo);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.info.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v87 = v46;
    *(_DWORD *)v45 = 136446210;
    v47 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v2, v47);
    v86 = sub_100016940(v48, v49, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v41, type metadata accessor for PrivacyAlertSupport.AlertInfo);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Privacy alert has already been shown for %{public}s.", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    sub_1000126B0(v41, type metadata accessor for PrivacyAlertSupport.AlertInfo);
  }

}

