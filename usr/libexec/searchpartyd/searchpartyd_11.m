uint64_t sub_10065D2C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 584);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 592) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10065D328, v3, 0);
}

uint64_t sub_10065D328()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;

  v1 = v0[74];
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 17);
  if (v1)
  {
    v3 = v0[66];
    swift_retain();
    Identifier.id.getter(v3);
    return swift_task_switch(sub_10065D44C, v0[74], 0);
  }
  else
  {
    v5 = Logger.logObject.getter(v2);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Awaiting CentralManager", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v0[79] = type metadata accessor for CentralManager(0);
    v8 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
    v0[80] = v8;
    *v8 = v0;
    v8[1] = sub_10065D8CC;
    return static CentralManager.pairingCentralManager.getter();
  }
}

uint64_t sub_10065D44C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[74];
  v2 = v0[59];
  v4 = v0[53];
  v3 = v0[54];
  v5 = v0[52];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[60], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101084C60, v7 + v3, v6 | 7);
  v0[75] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[76] = v10;
  *v10 = v0;
  v10[1] = sub_10065D524;
  return unsafeBlocking<A>(_:)(v0[62], sub_100666AE0, v8, v0[61]);
}

uint64_t sub_10065D524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 480);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 416);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 424);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_10065D5B0, v4, 0);
}

uint64_t sub_10065D5B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;

  v1 = v0[62];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[64] + 48))(v1, 1, v0[63]) == 1)
  {
    swift_release();
    v2 = sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Awaiting CentralManager", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v0[79] = type metadata accessor for CentralManager(0);
    v6 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
    v0[80] = v6;
    *v6 = v0;
    v6[1] = sub_10065D8CC;
    return static CentralManager.pairingCentralManager.getter();
  }
  else
  {
    v8 = sub_1000126EC(v1, v0[65], type metadata accessor for LocalFindableAccessoryRecord);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "There is a local beacon identifier saved meaning that this is owner. Disable lost mode.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = (_QWORD *)swift_task_alloc(dword_1011029D4);
    v0[77] = v12;
    *v12 = v0;
    v12[1] = sub_10065D77C;
    return sub_100662594(v0[65]);
  }
}

uint64_t sub_10065D77C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 616);
  *(_QWORD *)(*v1 + 624) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10065EE04;
  else
    v4 = sub_10065D7E0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 376), 0);
}

uint64_t sub_10065D7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 520);
  swift_release_n(*(_QWORD *)(v0 + 592), 2);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 496);
  v5 = *(_QWORD *)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 480);
  v7 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v9 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 408);
  v12 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065D8CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 640);
  v3[81] = a1;
  v3[82] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10065F054;
  else
    v5 = sub_10065D93C;
  return swift_task_switch(v5, v3[47], 0);
}

uint64_t sub_10065D93C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[50] + 104))(v0[51], enum case for CentralManager.State.poweredOn(_:), v0[49]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[83] = v1;
  v2 = sub_100006C64(&qword_1010EC468, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_10065D9D4;
  return CentralManagerProtocol.await(state:)(v0[51], v0[79], v2);
}

uint64_t sub_10065D9D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  *(_QWORD *)(*(_QWORD *)v1 + 672) = v0;
  swift_task_dealloc(v3);
  v5 = v2[50];
  v4 = v2[51];
  v6 = v2[49];
  v7 = v2[47];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_10065F28C;
  else
    v8 = sub_10065DA4C;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10065DA4C(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  _QWORD *v14;
  uint64_t (*v16)(uint64_t);

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CentralManager powered on", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = v1[66];
  v6 = v1[58];
  v7 = v1[52];
  v8 = v1[53];

  Identifier.id.getter(v5);
  v9 = sub_10001A9A8(&qword_1011003C0);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v9, v11 + *(_QWORD *)(v8 + 72), v10 | 7);
  v1[85] = v12;
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  v1[86] = v13;
  v13(v12 + v11, v6, v7);
  v16 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v14 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                   + 1));
  v1[87] = v14;
  *v14 = v1;
  v14[1] = sub_10065DBA0;
  return v16(v12);
}

uint64_t sub_10065DBA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 696);
  v3[88] = a1;
  v3[89] = v1;
  swift_task_dealloc(v4);
  v5 = v3[47];
  swift_bridgeObjectRelease();
  if (v1)
    v6 = sub_10065F4D0;
  else
    v6 = sub_10065DC1C;
  return swift_task_switch(v6, v5, 0);
}

void sub_10065DC1C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (__cdecl *v62)();
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65[2];

  v1 = *(_QWORD *)(v0 + 704);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v22 = *(_QWORD *)(v0 + 704);
    else
      v22 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 704));
    v23 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease();
    v2 = (_QWORD *)(v0 + 320);
    if (v23)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001) != 0)
      {
        v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 704));
      }
      else
      {
        if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_24:
          __break(1u);
          return;
        }
        v3 = swift_retain();
      }
      *(_QWORD *)(v0 + 720) = v3;
      v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
      v6 = *(_QWORD *)(v0 + 456);
      v5 = *(_QWORD *)(v0 + 464);
      v7 = *(_QWORD *)(v0 + 416);
      swift_bridgeObjectRelease();
      v8 = v4(v6, v5, v7);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.default.getter(v9);
      v11 = os_log_type_enabled(v9, v10);
      v12 = *(_QWORD *)(v0 + 456);
      v14 = *(_QWORD *)(v0 + 416);
      v13 = *(_QWORD *)(v0 + 424);
      if (v11)
      {
        v15 = swift_slowAlloc(22, -1);
        v16 = swift_slowAlloc(32, -1);
        v65[0] = v16;
        *(_DWORD *)v15 = 141558275;
        *v2 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v0 + 328, v15 + 4, v15 + 12);
        *(_WORD *)(v15 + 12) = 2081;
        v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
        *(_QWORD *)(v0 + 328) = sub_100016940(v18, v19, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v15 + 14, v15 + 22);
        swift_bridgeObjectRelease();
        v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v20(v12, v14);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully retrieved peripheral %{private,mask.hash}s from CentralManager", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);
      }
      else
      {
        v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
        v20(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 416));
      }

      *(_QWORD *)(v0 + 728) = v20;
      sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
      if (*(_QWORD *)(v0 + 80))
      {
        sub_10000F9FC((__int128 *)(v0 + 56), v0 + 216);
        sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
        v62 = (void (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
        v21 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
        *(_QWORD *)(v0 + 736) = v21;
        *v21 = v0;
        v21[1] = sub_10065E2FC;
        v62();
        return;
      }
      goto LABEL_24;
    }
  }
  else
  {
    v2 = (_QWORD *)(v0 + 320);
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
  }
  v63 = v2;
  v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 688);
  v25 = *(_QWORD *)(v0 + 464);
  v26 = *(_QWORD *)(v0 + 440);
  v27 = *(_QWORD *)(v0 + 416);
  swift_bridgeObjectRelease();
  v28 = v24(v26, v25, v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  v31 = os_log_type_enabled(v29, v30);
  v32 = *(_QWORD *)(v0 + 440);
  v33 = *(_QWORD *)(v0 + 416);
  v34 = *(_QWORD *)(v0 + 424);
  if (v31)
  {
    v35 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(32, -1);
    v65[0] = v36;
    *(_DWORD *)v35 = 141558275;
    *(_QWORD *)(v0 + 336) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v35 + 4, v35 + 12);
    *(_WORD *)(v35 + 12) = 2081;
    v37 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v33, v37);
    *(_QWORD *)(v0 + 344) = sub_100016940(v38, v39, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease();
    v40 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v40(v32, v33);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    v40 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v40(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 416));
  }

  v41 = *(_QWORD *)(v0 + 464);
  v42 = *(_QWORD *)(v0 + 416);
  v43 = sub_1006665A8();
  v44 = swift_allocError(&type metadata for LocalFindableLostModeDetectionService.InternalError, v43, 0, 0);
  *v45 = 5;
  swift_willThrow(v44);
  swift_release();
  swift_release();
  swift_release();
  v40(v41, v42);
  swift_errorRetain(v44);
  v46 = swift_errorRetain(v44);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = swift_slowAlloc(32, -1);
    v65[0] = v50;
    *(_DWORD *)v49 = 136315138;
    swift_getErrorValue(v44, v0 + 304, v0 + 256);
    v51 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v51, v52, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v63, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v44);
    swift_errorRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Found error %s with handling lost mode", v49, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);

    swift_errorRelease(v44);
  }
  else
  {
    swift_errorRelease(v44);
    swift_errorRelease(v44);
    swift_errorRelease(v44);

  }
  v53 = *(_QWORD *)(v0 + 520);
  v54 = *(_QWORD *)(v0 + 496);
  v56 = *(_QWORD *)(v0 + 472);
  v55 = *(_QWORD *)(v0 + 480);
  v58 = *(_QWORD *)(v0 + 456);
  v57 = *(_QWORD *)(v0 + 464);
  v60 = *(_QWORD *)(v0 + 440);
  v59 = *(_QWORD *)(v0 + 448);
  v61 = *(_QWORD *)(v0 + 408);
  v64 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v64);
  (*(void (**)(void))(v0 + 8))();
}

uint64_t sub_10065E2FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 736);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 744) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10065E35C, v3, 0);
}

uint64_t sub_10065E35C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 744);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
  if (v1)
  {
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Performing local account check", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v23 = (uint64_t (*)(uint64_t))((char *)&dword_101102BE8 + dword_101102BE8);
    v6 = (_QWORD *)swift_task_alloc(unk_101102BEC);
    *(_QWORD *)(v0 + 752) = v6;
    *v6 = v0;
    v6[1] = sub_10065E5B4;
    return v23(*(_QWORD *)(v0 + 720));
  }
  else
  {
    v8 = Logger.logObject.getter(v2);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No local findable pairing service to verify FMNID!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
    v12 = *(_QWORD *)(v0 + 464);
    v13 = *(_QWORD *)(v0 + 416);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    v11(v12, v13);
    v14 = *(_QWORD *)(v0 + 520);
    v15 = *(_QWORD *)(v0 + 496);
    v17 = *(_QWORD *)(v0 + 472);
    v16 = *(_QWORD *)(v0 + 480);
    v19 = *(_QWORD *)(v0 + 456);
    v18 = *(_QWORD *)(v0 + 464);
    v21 = *(_QWORD *)(v0 + 440);
    v20 = *(_QWORD *)(v0 + 448);
    v22 = *(_QWORD *)(v0 + 408);
    v24 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10065E5B4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 752);
  *(_QWORD *)(*v2 + 760) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 376);
  if (v1)
  {
    v7 = sub_10065F72C;
  }
  else
  {
    *(_BYTE *)(v4 + 808) = a1;
    v7 = sub_10065E628;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10065E628(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint8_t *v8;
  _QWORD *v9;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _QWORD *v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;

  v2 = *(unsigned __int8 *)(v1 + 808);
  if (v2 < 2)
  {
    v3 = Logger.logObject.getter(a1);
    v4 = static os_log_type_t.default.getter(v3);
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(void (**)(uint64_t, uint64_t))(v1 + 728);
    v35 = *(_QWORD *)(v1 + 464);
    v7 = *(_QWORD *)(v1 + 416);
    if (v5)
    {
      v34 = *(void (**)(uint64_t, uint64_t))(v1 + 728);
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Not elligible for lost mode notification, remove", v8, 2u);
      swift_slowDealloc(v8, -1, -1);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v34(v35, v7);
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v6(v35, v7);
    }
LABEL_16:
    v21 = *(_QWORD *)(v1 + 520);
    v22 = *(_QWORD *)(v1 + 496);
    v24 = *(_QWORD *)(v1 + 472);
    v23 = *(_QWORD *)(v1 + 480);
    v26 = *(_QWORD *)(v1 + 456);
    v25 = *(_QWORD *)(v1 + 464);
    v28 = *(_QWORD *)(v1 + 440);
    v27 = *(_QWORD *)(v1 + 448);
    v29 = *(_QWORD *)(v1 + 408);
    v36 = *(_QWORD *)(v1 + 384);
    swift_task_dealloc(*(_QWORD *)(v1 + 544));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  if (v2 == 2)
  {
    Identifier.id.getter(*(_QWORD *)(v1 + 528));
    v9 = (_QWORD *)swift_task_alloc(dword_1011029D4);
    *(_QWORD *)(v1 + 792) = v9;
    *v9 = v1;
    v9[1] = sub_10065EC7C;
    return sub_100662594(*(_QWORD *)(v1 + 448));
  }
  v11 = sub_100663000();
  if (!(_BYTE)v11)
  {
    v15 = Logger.logObject.getter(v11);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "We have exceeded the maximum number of alerts. Return.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    v18 = *(void (**)(uint64_t, uint64_t))(v1 + 728);
    v19 = *(_QWORD *)(v1 + 464);
    v20 = *(_QWORD *)(v1 + 416);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    v18(v19, v20);
    goto LABEL_16;
  }
  if (v11 == 1)
  {
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Throttle limit not reached, continue with lookup.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
  else
  {
    v30 = Logger.logObject.getter(v11);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "We have exceeded the date interval. Reset number of alerts and date of first lookup. Continue with lost mode lookup.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    sub_100662E30();
  }
  v33 = (_QWORD *)swift_task_alloc(dword_1011029C4);
  *(_QWORD *)(v1 + 768) = v33;
  *v33 = v1;
  v33[1] = sub_10065EA70;
  return sub_100660008(*(_QWORD *)(v1 + 384), *(_QWORD *)(v1 + 720));
}

uint64_t sub_10065EA70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 768);
  v3 = *(_QWORD **)v1;
  v3[97] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10065F9A0, v3[47], 0);
  v5 = (_QWORD *)swift_task_alloc(dword_1011029CC);
  v3[98] = v5;
  *v5 = v3;
  v5[1] = sub_10065EB00;
  return sub_100662294(v3[48]);
}

uint64_t sub_10065EB00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 784));
  return swift_task_switch(sub_10065EB58, v1, 0);
}

uint64_t sub_10065EB58()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 384);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1000126B0(v4, type metadata accessor for LostModeAlertInfo);
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 520);
  v6 = *(_QWORD *)(v0 + 496);
  v8 = *(_QWORD *)(v0 + 472);
  v7 = *(_QWORD *)(v0 + 480);
  v10 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 464);
  v12 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065EC7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 792);
  *(_QWORD *)(*(_QWORD *)v1 + 800) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[91];
  v5 = v2[56];
  v6 = v2[52];
  v7 = v2[47];
  v4(v5, v6);
  if (v0)
    v8 = sub_10065FC14;
  else
    v8 = sub_10065ECF4;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10065ECF4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 744);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 568);
  v6 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 416);
  swift_release(*(_QWORD *)(v0 + 648));
  swift_release(v3);
  swift_release(v1);
  swift_release(v5);
  swift_release(v4);
  v2(v6, v7);
  v8 = *(_QWORD *)(v0 + 520);
  v9 = *(_QWORD *)(v0 + 496);
  v11 = *(_QWORD *)(v0 + 472);
  v10 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 456);
  v12 = *(_QWORD *)(v0 + 464);
  v15 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 448);
  v16 = *(_QWORD *)(v0 + 408);
  v18 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065EE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 520);
  swift_release_n(*(_QWORD *)(v0 + 592), 2);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 624);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v21 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v2, v0 + 304, v0 + 256);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v8, v9, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found error %s with handling lost mode", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v10 = *(_QWORD *)(v0 + 520);
  v11 = *(_QWORD *)(v0 + 496);
  v13 = *(_QWORD *)(v0 + 472);
  v12 = *(_QWORD *)(v0 + 480);
  v15 = *(_QWORD *)(v0 + 456);
  v14 = *(_QWORD *)(v0 + 464);
  v17 = *(_QWORD *)(v0 + 440);
  v16 = *(_QWORD *)(v0 + 448);
  v18 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065F054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 656);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v20 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 304, v0 + 256);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Found error %s with handling lost mode", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 520);
  v10 = *(_QWORD *)(v0 + 496);
  v12 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v16 = *(_QWORD *)(v0 + 440);
  v15 = *(_QWORD *)(v0 + 448);
  v17 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065F28C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  swift_release();
  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 672);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v20 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 304, v0 + 256);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v7, v8, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Found error %s with handling lost mode", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 520);
  v10 = *(_QWORD *)(v0 + 496);
  v12 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 480);
  v14 = *(_QWORD *)(v0 + 456);
  v13 = *(_QWORD *)(v0 + 464);
  v16 = *(_QWORD *)(v0 + 440);
  v15 = *(_QWORD *)(v0 + 448);
  v17 = *(_QWORD *)(v0 + 408);
  v19 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065F4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 712);
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v4, v0 + 304, v0 + 256);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found error %s with handling lost mode", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v12 = *(_QWORD *)(v0 + 520);
  v13 = *(_QWORD *)(v0 + 496);
  v15 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 456);
  v16 = *(_QWORD *)(v0 + 464);
  v19 = *(_QWORD *)(v0 + 440);
  v18 = *(_QWORD *)(v0 + 448);
  v20 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065F72C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 416);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 760);
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v4, v0 + 304, v0 + 256);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found error %s with handling lost mode", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v12 = *(_QWORD *)(v0 + 520);
  v13 = *(_QWORD *)(v0 + 496);
  v15 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 456);
  v16 = *(_QWORD *)(v0 + 464);
  v19 = *(_QWORD *)(v0 + 440);
  v18 = *(_QWORD *)(v0 + 448);
  v20 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065F9A0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 416);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 776);
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v4, v0 + 304, v0 + 256);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found error %s with handling lost mode", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v12 = *(_QWORD *)(v0 + 520);
  v13 = *(_QWORD *)(v0 + 496);
  v15 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 456);
  v16 = *(_QWORD *)(v0 + 464);
  v19 = *(_QWORD *)(v0 + 440);
  v18 = *(_QWORD *)(v0 + 448);
  v20 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065FC14()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 728);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 416);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v1(v2, v3);
  v4 = *(_QWORD *)(v0 + 800);
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v23 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v4, v0 + 304, v0 + 256);
    v10 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
    *(_QWORD *)(v0 + 312) = sub_100016940(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found error %s with handling lost mode", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v12 = *(_QWORD *)(v0 + 520);
  v13 = *(_QWORD *)(v0 + 496);
  v15 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 480);
  v17 = *(_QWORD *)(v0 + 456);
  v16 = *(_QWORD *)(v0 + 464);
  v19 = *(_QWORD *)(v0 + 440);
  v18 = *(_QWORD *)(v0 + 448);
  v20 = *(_QWORD *)(v0 + 408);
  v22 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10065FE88(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = *v1;
  return swift_task_switch(sub_10065FEA8, v1, 0);
}

uint64_t sub_10065FEA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[2];
  v4 = sub_100006C64(&qword_101102BF0, 255, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v5 = (_QWORD *)swift_task_alloc(48);
  v0[5] = v5;
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v6;
  *v6 = v0;
  v6[1] = sub_10065FF84;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 8, v1, v4, 0xD00000000000001FLL, 0x8000000100EDE280, sub_100666B20, v5, &type metadata for LocalAccountCheckResult);
}

uint64_t sub_10065FF84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 24);
    v5 = sub_1002176D8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 24);
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v5 = sub_10065FFF8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10065FFF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 64));
}

uint64_t sub_100660008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  v4 = sub_10001A9A8(&qword_1010FBA40);
  v3[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OfflineLostModeInfoLookupResponse(0);
  v3[38] = v5;
  v3[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Response(0);
  v3[40] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[41] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[42] = swift_task_alloc(v8);
  v3[43] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_101102BC0);
  v3[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OfflineLostModeInfoLookupEndpoint(0);
  v3[45] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[46] = v11;
  v3[47] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OfflineLostModeInfoLookupRequest(0);
  v3[48] = v12;
  v3[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessoryMetadata(0);
  v3[50] = v13;
  v3[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v3[52] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[53] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[54] = swift_task_alloc(v16);
  v3[55] = swift_task_alloc(v16);
  v3[56] = swift_task_alloc(v16);
  v17 = type metadata accessor for PeripheralPairingInfo(0);
  v3[57] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[58] = v18;
  v3[59] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MACAddress(0);
  v3[60] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[61] = v20;
  v3[62] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010EF7C0);
  v3[63] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v3[64] = v22;
  v3[65] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for RawAccessoryMetadata(0);
  v3[66] = v23;
  v24 = (*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[67] = swift_task_alloc(v24);
  v3[68] = swift_task_alloc(v24);
  return swift_task_switch(sub_10066024C, v2, 0);
}

uint64_t sub_10066024C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  v0[69] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Generating lost mode alert info", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10110F798 + dword_10110F798);
  v6 = (_QWORD *)swift_task_alloc(unk_10110F79C);
  v0[70] = v6;
  *v6 = v0;
  v6[1] = sub_100660368;
  return v8(v0[68], v0[35]);
}

uint64_t sub_100660368()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100661D50;
  else
    v4 = sub_1006603CC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 288), 0);
}

uint64_t sub_1006603CC()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;

  v1 = swift_retain_n(v0[35], 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[65];
    v5 = v0[63];
    v16 = v0[64];
    v15 = v0[35];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v18 = v7;
    *(_DWORD *)v6 = 136380675;
    Peripheral.id.getter();
    v8 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v4, v5);
    v0[33] = sub_100016940(v9, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v6 + 4, v6 + 12);
    swift_release_n(v15, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Retrieving Mac address for peripheral %{private}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {
    v12 = v0[35];

    swift_release_n(v12, 2);
  }
  v17 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Peripheral.pairingInfo.getter
                                       + async function pointer to dispatch thunk of Peripheral.pairingInfo.getter);
  v13 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.pairingInfo.getter
                                   + 1));
  v0[72] = v13;
  *v13 = v0;
  v13[1] = sub_1006605DC;
  return v17(v0[59]);
}

uint64_t sub_1006605DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 576);
  *(_QWORD *)(*v1 + 584) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100661E68;
  else
    v4 = sub_100660640;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 288), 0);
}

uint64_t sub_100660640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t (*v11)(void);

  v2 = *(_QWORD *)(v0 + 464);
  v1 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 456);
  PeripheralPairingInfo.remoteAddress.getter();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Retreived Mac address", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = qword_1010EA5B0;
  swift_retain();
  if (v8 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 216, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v11 = (uint64_t (*)(void))((char *)&dword_1010EBC88 + dword_1010EBC88);
    v10 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 592) = v10;
    *v10 = v0;
    v10[1] = sub_1006607E4;
    return v11();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006607E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 600) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100660844, v3, 0);
}

uint64_t sub_100660844()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = (_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v0 + 600))
  {
    v10 = *(_QWORD *)(v0 + 280);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v11 = swift_retain_n(v10, 2);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = *(_QWORD *)(v0 + 520);
      v15 = *(_QWORD *)(v0 + 504);
      v56 = *(_QWORD *)(v0 + 512);
      v54 = *(_QWORD *)(v0 + 280);
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v59 = v17;
      *(_DWORD *)v16 = 136315138;
      Peripheral.id.getter();
      v18 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v15, v18);
      v21 = v20;
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v14, v15);
      *(_QWORD *)(v0 + 248) = sub_100016940(v19, v21, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v16 + 4, v16 + 12);
      swift_release_n(v54, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No command service! %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {
      v31 = *(_QWORD *)(v0 + 280);

      swift_release_n(v31, 2);
    }
    v6 = *(_QWORD *)(v0 + 544);
    v33 = *(_QWORD *)(v0 + 488);
    v32 = *(_QWORD *)(v0 + 496);
    v34 = *(_QWORD *)(v0 + 480);
    v35 = sub_1006665A8();
    v36 = swift_allocError(&type metadata for LocalFindableLostModeDetectionService.InternalError, v35, 0, 0);
    *v37 = 0;
    swift_willThrow(v36);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    goto LABEL_10;
  }
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 408);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  sub_10005972C(v3, v4, type metadata accessor for RawAccessoryMetadata);
  sub_100133B68(v4, v5);
  v6 = *(_QWORD *)(v0 + 544);
  if (v2)
  {
    v7 = *(_QWORD *)(v0 + 488);
    v8 = *(_QWORD *)(v0 + 496);
    v9 = *(_QWORD *)(v0 + 480);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
LABEL_10:
    sub_1000126B0(v6, type metadata accessor for RawAccessoryMetadata);
    v38 = *(_QWORD *)(v0 + 536);
    v39 = *(_QWORD *)(v0 + 520);
    v40 = *(_QWORD *)(v0 + 496);
    v41 = *(_QWORD *)(v0 + 472);
    v43 = *(_QWORD *)(v0 + 440);
    v42 = *(_QWORD *)(v0 + 448);
    v44 = *(_QWORD *)(v0 + 432);
    v45 = *(_QWORD *)(v0 + 408);
    v46 = *(_QWORD *)(v0 + 392);
    v51 = *(_QWORD *)(v0 + 376);
    v52 = *(_QWORD *)(v0 + 352);
    v53 = *(_QWORD *)(v0 + 344);
    v55 = *(_QWORD *)(v0 + 336);
    v57 = *(_QWORD *)(v0 + 312);
    v58 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 544));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v22 = *(_QWORD *)(v0 + 528);
  v23 = *(_QWORD *)(v0 + 408);
  v24 = (uint64_t *)(v23 + *(int *)(*(_QWORD *)(v0 + 400) + 20));
  v25 = *v24;
  *(_QWORD *)(v0 + 608) = *v24;
  v26 = v24[1];
  *(_QWORD *)(v0 + 616) = v26;
  sub_10001BBBC(v25, v26);
  sub_1000126B0(v23, type metadata accessor for AccessoryMetadata);
  v27 = v6 + *(int *)(v22 + 44);
  v28 = *(_QWORD *)(v27 + 8);
  if (v28 >> 60 == 15)
  {
    v29 = 0;
    v30 = 0;
  }
  else
  {
    v48 = *(_QWORD *)v27;
    sub_10001BBBC(*(_QWORD *)v27, *(_QWORD *)(v27 + 8));
    v29 = Data.hexString.getter(v48, v28);
    v30 = v49;
    sub_10001EF3C(v48, v28);
  }
  *(_QWORD *)(v0 + 624) = v30;
  v50 = (_QWORD *)swift_task_alloc(dword_10111F514);
  *(_QWORD *)(v0 + 632) = v50;
  *v50 = v0;
  v50[1] = sub_100660C9C;
  return sub_100D4E324(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 496), v25, v26, v29, v30);
}

uint64_t sub_100660C9C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = v0;
  swift_task_dealloc(v3);
  v4 = v2[77];
  v5 = v2[76];
  v6 = v2[36];
  swift_bridgeObjectRelease();
  sub_10001BC14(v5, v4);
  if (v0)
    v7 = sub_100661F90;
  else
    v7 = sub_100660D28;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100660D28(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Generated serial number URL", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = objc_msgSend(v5, "bundleIdentifier");

  if (v6)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

  }
  else
  {
    v9 = 0x8000000100EC5D30;
    v7 = 0xD00000000000001DLL;
  }
  v11 = *(_QWORD *)(v1 + 440);
  v10 = *(_QWORD *)(v1 + 448);
  v12 = *(_QWORD *)(v1 + 416);
  v13 = *(_QWORD *)(v1 + 424);
  v14 = *(_QWORD *)(v1 + 384);
  v15 = *(_OWORD **)(v1 + 392);
  v16 = *(_QWORD *)(v1 + 352);
  v70 = *(_QWORD *)(v1 + 368);
  v73 = *(_QWORD *)(v1 + 360);
  type metadata accessor for ServerInteractionController(0);
  *(_QWORD *)(v1 + 648) = ServerInteractionController.__allocating_init(bundleIdentifier:)(v7, v9);
  *v15 = xmmword_100E22B20;
  v17 = (char *)v15 + *(int *)(v14 + 20);
  v18 = enum case for RequestMethod.get(_:);
  v19 = type metadata accessor for RequestMethod(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v20(v11, v10, v12);
  sub_1001F32F8(v11, v16);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v16, 1, v73) == 1)
  {
    v21 = *(_QWORD *)(v1 + 448);
    v22 = *(_QWORD *)(v1 + 432);
    v23 = *(_QWORD *)(v1 + 416);
    sub_100004048(*(_QWORD *)(v1 + 352), &qword_101102BC0);
    v24 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v22, v21, v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v1 + 424);
    v28 = *(_QWORD *)(v1 + 432);
    v30 = *(_QWORD *)(v1 + 416);
    if (v27)
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v77 = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = sub_100006C64((unint64_t *)&qword_101108070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v1 + 240) = sub_100016940(v34, v35, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 240, v1 + 248, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease();
      v71 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v71(v28, v30);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Can't create endpoint from url %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      v71 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v71(*(_QWORD *)(v1 + 432), *(_QWORD *)(v1 + 416));
    }

    v48 = *(_QWORD *)(v1 + 544);
    v49 = *(_QWORD *)(v1 + 488);
    v50 = *(_QWORD *)(v1 + 496);
    v51 = *(_QWORD *)(v1 + 480);
    v52 = *(_QWORD *)(v1 + 448);
    v53 = *(_QWORD *)(v1 + 416);
    v54 = *(_QWORD *)(v1 + 392);
    v55 = sub_1006665A8();
    v75 = swift_allocError(&type metadata for LocalFindableLostModeDetectionService.InternalError, v55, 0, 0);
    *v56 = 3;
    swift_willThrow(v75);
    swift_release();
    swift_release();
    sub_1000126B0(v54, type metadata accessor for OfflineLostModeInfoLookupRequest);
    v71(v52, v53);
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
    sub_1000126B0(v48, type metadata accessor for RawAccessoryMetadata);
    v57 = *(_QWORD *)(v1 + 536);
    v58 = *(_QWORD *)(v1 + 520);
    v59 = *(_QWORD *)(v1 + 496);
    v60 = *(_QWORD *)(v1 + 472);
    v62 = *(_QWORD *)(v1 + 440);
    v61 = *(_QWORD *)(v1 + 448);
    v63 = *(_QWORD *)(v1 + 432);
    v64 = *(_QWORD *)(v1 + 408);
    v65 = *(_QWORD *)(v1 + 392);
    v66 = *(_QWORD *)(v1 + 376);
    v67 = *(_QWORD *)(v1 + 352);
    v68 = *(_QWORD *)(v1 + 344);
    v69 = *(_QWORD *)(v1 + 336);
    v72 = *(_QWORD *)(v1 + 312);
    v76 = *(_QWORD *)(v1 + 296);
    swift_task_dealloc(*(_QWORD *)(v1 + 544));
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v72);
    swift_task_dealloc(v76);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v36 = sub_1000126EC(*(_QWORD *)(v1 + 352), *(_QWORD *)(v1 + 376), type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Sending lost mode info request", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }
    v40 = *(_QWORD *)(v1 + 384);
    v41 = *(_QWORD *)(v1 + 392);
    v42 = *(_QWORD *)(v1 + 376);
    v43 = *(_QWORD *)(v1 + 360);

    *(_QWORD *)(v1 + 200) = v43;
    *(_QWORD *)(v1 + 208) = sub_100006C64(&qword_101102BC8, 255, type metadata accessor for OfflineLostModeInfoLookupEndpoint, (uint64_t)&unk_100E2DB44);
    v44 = sub_100018F08((_QWORD *)(v1 + 176));
    sub_10005972C(v42, (uint64_t)v44, type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    *(_QWORD *)(v1 + 160) = v40;
    *(_QWORD *)(v1 + 168) = sub_100006C64(&qword_101102BD0, 255, type metadata accessor for OfflineLostModeInfoLookupRequest, (uint64_t)&unk_100E6C660);
    v45 = sub_100018F08((_QWORD *)(v1 + 136));
    sub_10005972C(v41, (uint64_t)v45, type metadata accessor for OfflineLostModeInfoLookupRequest);
    *(_OWORD *)(v1 + 72) = 0u;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_QWORD *)(v1 + 88) = 0;
    v74 = (char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
        + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:);
    v46 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                     + 1));
    *(_QWORD *)(v1 + 656) = v46;
    *v46 = v1;
    v46[1] = sub_10066138C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v74)(*(_QWORD *)(v1 + 344), v1 + 176, v1 + 136, v1 + 56);
  }
}

uint64_t sub_10066138C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)v1 + 56;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 664) = v0;
  swift_task_dealloc(v4);
  if (v0)
  {
    v5 = v2[36];
    sub_100004048((uint64_t)(v2 + 7), &qword_1010ECC38);
    v6 = sub_1006620DC;
    v7 = v5;
  }
  else
  {
    v8 = v2 + 22;
    v9 = v2 + 17;
    v10 = v2[36];
    sub_100004048(v3, &qword_1010ECC38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    v6 = sub_100661440;
    v7 = v10;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100661440()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  _QWORD *v70;
  _QWORD *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123[3];

  v1 = (void *)Response.response.getter();
  v2 = objc_msgSend(v1, "statusCode");

  if (v2 != (id)200)
  {
    v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[41] + 16))(v0[42], v0[43], v0[40]);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v21 = v0[41];
    v20 = v0[42];
    v22 = v0[40];
    if (v19)
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v123[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = sub_100006C64(&qword_101102BD8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Response, (uint64_t)&protocol conformance descriptor for Response);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
      v0[32] = sub_100016940(v26, v27, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      v99 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v99(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed response %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      v99 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v99(v0[42], v0[40]);
    }

    v116 = v0[62];
    v120 = v0[68];
    v108 = v0[61];
    v112 = v0[60];
    v104 = v0[56];
    v29 = v0[52];
    v28 = v0[53];
    v30 = v0[49];
    v31 = v0[47];
    v32 = v0[43];
    v33 = v0[40];
    v34 = sub_1006665A8();
    v35 = swift_allocError(&type metadata for LocalFindableLostModeDetectionService.InternalError, v34, 0, 0);
    *v36 = 7;
    swift_willThrow(v35);
    swift_release();
    swift_release();
    v99(v32, v33);
    sub_1000126B0(v31, type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    sub_1000126B0(v30, type metadata accessor for OfflineLostModeInfoLookupRequest);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v104, v29);
    goto LABEL_8;
  }
  v3 = v0[83];
  v4 = v0[38];
  v5 = type metadata accessor for JSONDecoder(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v7 = JSONDecoder.init()(v6);
  v8 = Response.body.getter(v7);
  v10 = v9;
  v11 = sub_100006C64(&qword_101102BE0, 255, type metadata accessor for OfflineLostModeInfoLookupResponse, (uint64_t)&unk_100E607C0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v4, v8, v10, v4, v11);
  if (v3)
  {
    v116 = v0[62];
    v120 = v0[68];
    v108 = v0[61];
    v112 = v0[60];
    v98 = v0[52];
    v103 = v0[56];
    v92 = v0[49];
    v94 = v0[53];
    v12 = v0[47];
    v13 = v0[43];
    v15 = v0[40];
    v14 = v0[41];
    sub_10001BC14(v8, v10);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    sub_1000126B0(v12, type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    sub_1000126B0(v92, type metadata accessor for OfflineLostModeInfoLookupRequest);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v103, v98);
LABEL_8:
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v116, v112);
LABEL_9:
    sub_1000126B0(v120, type metadata accessor for RawAccessoryMetadata);
    v37 = v0[67];
    v38 = v0[65];
    v39 = v0[62];
    v40 = v0[59];
    v42 = v0[55];
    v41 = v0[56];
    v43 = v0[54];
    v44 = v0[51];
    v45 = v0[49];
    v100 = v0[47];
    v105 = v0[44];
    v109 = v0[43];
    v113 = v0[42];
    v117 = v0[39];
    v121 = v0[37];
    swift_task_dealloc(v0[68]);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v100);
    swift_task_dealloc(v105);
    swift_task_dealloc(v109);
    swift_task_dealloc(v113);
    swift_task_dealloc(v117);
    swift_task_dealloc(v121);
    v46 = (uint64_t (*)(void))v0[1];
    return v46();
  }
  v48 = sub_10001BC14(v8, v10);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter(v49);
  if (os_log_type_enabled(v49, (os_log_type_t)v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v50, "Received lost mode info response", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }
  v52 = v0[39];

  LODWORD(v52) = *(unsigned __int8 *)(v52 + 16);
  v54 = Logger.logObject.getter(v53);
  v55 = v54;
  if ((_DWORD)v52 != 1)
  {
    v72 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v55, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v72, "Device is not in lost mode", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }
    v74 = v0[61];
    v119 = v0[62];
    v120 = v0[68];
    v111 = v0[56];
    v115 = v0[60];
    v75 = v0[53];
    v102 = v0[49];
    v107 = v0[52];
    v93 = v0[43];
    v96 = v0[47];
    v77 = v0[40];
    v76 = v0[41];
    v78 = v0[39];

    v79 = sub_1006665A8();
    v80 = swift_allocError(&type metadata for LocalFindableLostModeDetectionService.InternalError, v79, 0, 0);
    *v81 = 4;
    swift_willThrow(v80);
    swift_release();
    swift_release();
    swift_release();
    sub_1000126B0(v78, type metadata accessor for OfflineLostModeInfoLookupResponse);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v93, v77);
    sub_1000126B0(v96, type metadata accessor for OfflineLostModeInfoLookupEndpoint);
    sub_1000126B0(v102, type metadata accessor for OfflineLostModeInfoLookupRequest);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v111, v107);
    (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v119, v115);
    goto LABEL_9;
  }
  v56 = static os_log_type_t.default.getter(v54);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Device is in lost mode, creating lost mode alert info", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }
  v91 = v0[67];
  v88 = v0[62];
  v89 = v0[68];
  v86 = v0[61];
  v87 = v0[60];
  v95 = v0[65];
  v97 = v0[59];
  v122 = v0[56];
  v101 = v0[55];
  v106 = v0[54];
  v82 = v0[53];
  v83 = v0[52];
  v110 = v0[51];
  v58 = v0[49];
  v59 = v0[47];
  v90 = v58;
  v60 = v0[43];
  v114 = v0[44];
  v61 = v0[41];
  v118 = v0[42];
  v63 = (uint64_t *)v0[39];
  v62 = v0[40];
  v84 = v0[38];
  v85 = v0[37];
  v64 = v0[34];

  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  sub_1000126B0(v59, type metadata accessor for OfflineLostModeInfoLookupEndpoint);
  sub_1000126B0(v58, type metadata accessor for OfflineLostModeInfoLookupRequest);
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v122, v83);
  (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v88, v87);
  sub_1000126B0(v89, type metadata accessor for RawAccessoryMetadata);
  sub_10000F9B8((uint64_t)v63 + *(int *)(v84 + 36), v85, &qword_1010FBA40);
  v66 = v63[3];
  v65 = v63[4];
  v68 = *v63;
  v67 = v63[1];
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRetain(v65);
  sub_1000126B0((uint64_t)v63, type metadata accessor for OfflineLostModeInfoLookupResponse);
  sub_100005CF0(v85, v64, &qword_1010FBA40);
  v69 = (int *)type metadata accessor for LostModeAlertInfo(0);
  v70 = (_QWORD *)(v64 + v69[5]);
  *v70 = v66;
  v70[1] = v65;
  v71 = (_QWORD *)(v64 + v69[6]);
  *v71 = v68;
  v71[1] = v67;
  *(_BYTE *)(v64 + v69[7]) = 1;
  swift_task_dealloc(v89);
  swift_task_dealloc(v91);
  swift_task_dealloc(v95);
  swift_task_dealloc(v88);
  swift_task_dealloc(v97);
  swift_task_dealloc(v122);
  swift_task_dealloc(v101);
  swift_task_dealloc(v106);
  swift_task_dealloc(v110);
  swift_task_dealloc(v90);
  swift_task_dealloc(v59);
  swift_task_dealloc(v114);
  swift_task_dealloc(v60);
  swift_task_dealloc(v118);
  swift_task_dealloc(v63);
  swift_task_dealloc(v85);
  v46 = (uint64_t (*)(void))v0[1];
  return v46();
}

uint64_t sub_100661D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v8 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 352);
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100661E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1000126B0(*(_QWORD *)(v0 + 544), type metadata accessor for RawAccessoryMetadata);
  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 432);
  v8 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 352);
  v13 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 312);
  v16 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100661F90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 480);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000126B0(v1, type metadata accessor for RawAccessoryMetadata);
  v5 = *(_QWORD *)(v0 + 536);
  v6 = *(_QWORD *)(v0 + 520);
  v7 = *(_QWORD *)(v0 + 496);
  v8 = *(_QWORD *)(v0 + 472);
  v10 = *(_QWORD *)(v0 + 440);
  v9 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 432);
  v12 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 312);
  v20 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006620DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v23 = *(_QWORD *)(v0 + 544);
  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 376);
  swift_release();
  swift_release();
  sub_1000126B0(v8, type metadata accessor for OfflineLostModeInfoLookupEndpoint);
  sub_1000126B0(v7, type metadata accessor for OfflineLostModeInfoLookupRequest);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  sub_1000126B0(v23, type metadata accessor for RawAccessoryMetadata);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  v9 = *(_QWORD *)(v0 + 536);
  v10 = *(_QWORD *)(v0 + 520);
  v11 = *(_QWORD *)(v0 + 496);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 392);
  v19 = *(_QWORD *)(v0 + 376);
  v20 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 344);
  v22 = *(_QWORD *)(v0 + 336);
  v24 = *(_QWORD *)(v0 + 312);
  v25 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 544));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100662294(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for FMRemoteUILauncher.AlertType(0);
  v2[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006622EC, v1, 0);
}

uint64_t sub_1006622EC()
{
  objc_super *v0;
  uint64_t receiver;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Class super_class;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  receiver = (uint64_t)v0[3].receiver;
  v2 = (uint64_t)v0[2].receiver;
  sub_100666830();
  sub_10005972C(v2, receiver, type metadata accessor for LostModeAlertInfo);
  v4 = sub_100006C64(&qword_101102BB8, v3, (uint64_t (*)(uint64_t))type metadata accessor for LocalFindableLostModeDetectionService, (uint64_t)&unk_100E470F8);
  v5 = type metadata accessor for FMRemoteUILauncher(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v0[3].super_class = (Class)v6;
  swift_retain();
  swift_defaultActor_initialize(v6);
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandle) = 0;
  v7 = OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_logger;
  if (qword_1010E9BF8 != -1)
    swift_once(&qword_1010E9BF8, sub_100438C04);
  super_class = v0[2].super_class;
  v8 = (uint64_t)v0[3].receiver;
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v6 + v7, v11, v10);
  sub_10005972C(v8, v6 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertType, type metadata accessor for FMRemoteUILauncher.AlertType);
  v12 = (objc_class *)type metadata accessor for RemoteHandleObserverDelegateTrampoline();
  v13 = (char *)objc_allocWithZone(v12);
  v14 = &v13[OBJC_IVAR____TtC12searchpartydP33_B6591815384A8DEB8885452F1FDF33D538RemoteHandleObserverDelegateTrampoline_delegate];
  *((_QWORD *)v14 + 1) = 0;
  v15 = swift_unknownObjectWeakInit(v14, 0);
  *(_QWORD *)(v15 + 8) = v4;
  swift_unknownObjectWeakAssign(v15, super_class);
  v0[1].receiver = v13;
  v0[1].super_class = v12;
  *(_QWORD *)(v6 + OBJC_IVAR____TtC12searchpartyd18FMRemoteUILauncher_alertHandleDelegateTrampoline) = objc_msgSendSuper2(v0 + 1, "init");
  return swift_task_switch(sub_10066248C, v6, 0);
}

uint64_t sub_10066248C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release();
  sub_1000126B0(v2, type metadata accessor for FMRemoteUILauncher.AlertType);
  return swift_task_switch(sub_1006624DC, v1, 0);
}

uint64_t sub_1006624DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 128) = *(_QWORD *)(v0 + 56);
  swift_release();
  v2 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v0 + 64) = v2;
  if (v2)
  {
    swift_retain();
    return swift_task_switch(sub_100662554, v2, 0);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100662554()
{
  uint64_t v0;

  sub_100437150();
  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100662594(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[15] = a1;
  v2[16] = v1;
  v2[17] = *v1;
  v3 = type metadata accessor for UUID(0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[20] = v5;
  v2[21] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100662600, v1, 0);
}

uint64_t sub_100662600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (__cdecl *v9)();

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  *(_QWORD *)(v0 + 176) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "This pencil belongs to the owner, disabling lost mode automatically", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = qword_1010EA5B0;
  swift_retain();
  if (v6 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v8 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 184) = v8;
    *v8 = v0;
    v8[1] = sub_1006627BC;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006627BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10066281C, v3, 0);
}

uint64_t sub_10066281C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 192);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v8, v5);
    v9 = *(unsigned __int8 *)(v6 + 80);
    v10 = (v9 + 24) & ~v9;
    v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = swift_allocObject(&unk_101084C10, v11 + 8, v9 | 7);
    *(_QWORD *)(v0 + 200) = v12;
    *(_QWORD *)(v12 + 16) = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v10, v3, v5);
    *(_QWORD *)(v12 + v11) = v7;
    v13 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 208) = v14;
    *v14 = v0;
    v14[1] = sub_100662A00;
    return unsafeBlocking<A>(_:)(v14, sub_10066666C, v12, &type metadata for () + 1);
  }
  else
  {
    v16 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to get beacon manager service", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v20 = *(_QWORD *)(v0 + 168);

    v21 = sub_1006665A8();
    v22 = swift_allocError(&type metadata for LocalFindableLostModeDetectionService.InternalError, v21, 0, 0);
    *v23 = 1;
    swift_willThrow(v22);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100662A00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release();
  return swift_task_switch(sub_100662A60, v1, 0);
}

uint64_t sub_100662A60()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100662AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LostModeRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v42 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v43 = (uint64_t)&v38 - v11;
  v12 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v13 = qword_1011B7DC8;
  v41 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v41, 72, 7);
  v40 = xmmword_100E22B00;
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v39 = sub_10001AA00();
  *(_QWORD *)(v14 + 64) = v39;
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v17;
  v18 = a2;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "disableLostMode for beacon %@.", 30, 2, v14);
  swift_bridgeObjectRelease();
  v19 = v44;
  v20 = sub_100889F60(v18);
  if (v20[2])
  {
    sub_10005972C((uint64_t)v20 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), (uint64_t)v5, type metadata accessor for LostModeRecord);
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, v21, 1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    v22 = sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F47F0);
    v23 = static os_log_type_t.error.getter(v22);
    v24 = qword_1011B7DC8;
    v25 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v25 + 16) = v40;
    v26 = UUID.uuidString.getter(v25);
    v27 = v39;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    *(_QWORD *)(v25 + 64) = v27;
    *(_QWORD *)(v25 + 32) = v26;
    *(_QWORD *)(v25 + 40) = v28;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "lostModeRecord not found for %@.", 32, 2, v25);
    swift_bridgeObjectRelease();
    v29 = sub_1006666C0();
    v30 = swift_allocError(&_s13LostModeErrorON, v29, 0, 0);
    *v31 = 0;
    sub_1006660BC(v30);
    return swift_errorRelease(v30);
  }
  else
  {
    v33 = v43;
    sub_1000126EC((uint64_t)v5, v43, type metadata accessor for LostModeRecord);
    v34 = v42;
    sub_10005972C(v33, v42, type metadata accessor for LostModeRecord);
    v35 = *(unsigned __int8 *)(v7 + 80);
    v36 = (v35 + 40) & ~v35;
    v37 = (_QWORD *)swift_allocObject(&unk_101084C38, v36 + v8, v35 | 7);
    v37[2] = sub_1006660BC;
    v37[3] = 0;
    v37[4] = v19;
    sub_1000126EC(v34, (uint64_t)v37 + v36, type metadata accessor for LostModeRecord);
    swift_retain();
    sub_100687218(v33, 0, (void (*)(void))sub_1006667EC, (uint64_t)v37);
    swift_release();
    return sub_1000126B0(v33, type metadata accessor for LostModeRecord);
  }
}

uint64_t sub_100662E30()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  Class isa;
  NSString v10;
  uint64_t v11;
  uint64_t v13;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100663F40(0xD000000000000015, 0x8000000100EDE210);
  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_101102948);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Resetting throttling values", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = UInt._bridgeToObjectiveC()().super.super.isa;
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setObject:forKey:", isa, v10);

  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v2, 1, 1, v11);
  return sub_100666468((uint64_t)v2);
}

uint64_t sub_100663000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(char *, uint64_t, uint64_t);
  int v41;
  uint64_t v42;
  char *v43;
  os_log_t v44;
  int v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  char *v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  os_log_t v59;
  char *v60;
  uint8_t *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  char *v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  os_log_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  os_log_t v97;
  char *v98;
  char *v99;
  uint64_t *v100;
  double v101;
  double v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  unint64_t v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  char *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  id v124;
  Class isa;
  NSString v126;
  NSObject *v127;
  os_log_type_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint8_t *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  os_log_t v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE v152[16];

  v146 = type metadata accessor for DateInterval(0);
  v139 = *(_QWORD *)(v146 - 8);
  v1 = __chkstk_darwin(v146);
  v142 = (os_log_t)((char *)&v131 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v1);
  v144 = (char *)&v131 - v3;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v136 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v131 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v131 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v131 - v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v140 = (char *)&v131 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v138 = (char *)&v131 - v20;
  v21 = __chkstk_darwin(v19);
  v137 = (char *)&v131 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v131 - v24;
  v26 = __chkstk_darwin(v23);
  v135 = (char *)&v131 - v27;
  v28 = __chkstk_darwin(v26);
  v134 = (char *)&v131 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v131 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v131 - v34;
  __chkstk_darwin(v33);
  v147 = (char *)&v131 - v36;
  v133 = v0;
  sub_100663F40(0xD000000000000011, 0x8000000100EDE160);
  v37 = sub_100657F6C((uint64_t)v14);
  static Date.now.getter(v37);
  v143 = v14;
  v38 = (uint64_t)v14;
  v39 = v16;
  sub_10000F9B8(v38, (uint64_t)v12, (uint64_t *)&unk_1010EA690);
  v40 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v41 = v40(v12, 1, v15);
  v145 = v35;
  v141 = v16;
  if (v41 == 1)
  {
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v32, v12, v15);
    v42 = sub_100006C64((unint64_t *)&qword_1010F4820, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v35, v32, v15, v42) & 1) == 0)
    {
      v49 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      v49(v147, v32, v15);
      if (qword_1010E9E00 != -1)
        swift_once(&qword_1010E9E00, sub_1006580C0);
      v62 = type metadata accessor for Logger(0);
      sub_10001A9E8(v62, (uint64_t)qword_101102948);
      v63 = v134;
      v64 = ((uint64_t (*)(char *, char *, uint64_t))v49)(v134, v32, v15);
      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.default.getter(v65);
      if (os_log_type_enabled(v65, v66))
      {
        v67 = (uint8_t *)swift_slowAlloc(12, -1);
        v68 = swift_slowAlloc(32, -1);
        v149 = (char *)v68;
        *(_DWORD *)v67 = 136446210;
        v136 = (char *)(v67 + 4);
        v69 = sub_100006C64(&qword_1010EE0F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v70 = dispatch thunk of CustomStringConvertible.description.getter(v15, v69);
        v151 = sub_100016940(v70, v71, (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v136, v67 + 12);
        swift_bridgeObjectRelease();
        v72 = *(void (**)(char *, uint64_t))(v141 + 8);
        v72(v63, v15);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Fetched a saved dateOfFirstLookup %{public}s", v67, 0xCu);
        swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v67, -1, -1);

        v72(v32, v15);
      }
      else
      {

        v80 = *(void (**)(char *, uint64_t))(v16 + 8);
        v80(v63, v15);
        v80(v32, v15);
      }
      v46 = v146;
      v78 = v147;
      v43 = v144;
      v35 = v145;
      v44 = v142;
      goto LABEL_26;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v32, v15);
  }
  v43 = v144;
  v44 = v142;
  sub_10000F9B8((uint64_t)v143, (uint64_t)v9, (uint64_t *)&unk_1010EA690);
  v45 = v40(v9, 1, v15);
  v46 = v146;
  if (v45 == 1)
  {
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010EA690);
LABEL_17:
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v73 = type metadata accessor for Logger(0);
    v74 = sub_10001A9E8(v73, (uint64_t)qword_101102948);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Saved date is nil, so setting it as the current date", v77, 2u);
      swift_slowDealloc(v77, -1, -1);
    }

    v49 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
    v78 = v147;
    v49(v147, v35, v15);
    v79 = (uint64_t)v136;
    v49(v136, v35, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v79, 0, 1, v15);
    sub_100666468(v79);
    goto LABEL_26;
  }
  v47 = v135;
  (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v135, v9, v15);
  if ((static Date.> infix(_:_:)(v47, v35) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v39 + 8))(v47, v15);
    goto LABEL_17;
  }
  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v48 = type metadata accessor for Logger(0);
  sub_10001A9E8(v48, (uint64_t)qword_101102948);
  v49 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v50 = ((uint64_t (*)(char *, char *, uint64_t))v49)(v25, v47, v15);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.error.getter(v51);
  v53 = v25;
  if (os_log_type_enabled(v51, v52))
  {
    v142 = v51;
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v134 = (char *)swift_slowAlloc(32, -1);
    v149 = v134;
    *(_DWORD *)v54 = 136446210;
    v132 = v54 + 4;
    v55 = sub_100006C64(&qword_1010EE0F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v15, v55);
    v151 = sub_100016940(v56, v57, (uint64_t *)&v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v132, v54 + 12);
    swift_bridgeObjectRelease();
    v58 = *(void (**)(char *, uint64_t))(v39 + 8);
    v58(v53, v15);
    v59 = v142;
    _os_log_impl((void *)&_mh_execute_header, v142, v52, "dateOfFirstLookup %{public}s is greater than current date for some reason, so setting it to current date and resetting throttling avlues", v54, 0xCu);
    v60 = v134;
    swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    v61 = v54;
    v46 = v146;
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {
    v58 = *(void (**)(char *, uint64_t))(v39 + 8);
    v58(v53, v15);

  }
  v43 = v144;
  sub_100662E30();
  v78 = v147;
  v49(v147, v35, v15);
  v81 = (uint64_t)v136;
  v49(v136, v35, v15);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v81, 0, 1, v15);
  sub_100666468(v81);
  v58(v135, v15);
LABEL_26:
  v82 = v137;
  v49(v137, v78, v15);
  v83 = v138;
  v49(v138, v35, v15);
  DateInterval.init(start:end:)(v82, v83);
  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v84 = type metadata accessor for Logger(0);
  v85 = sub_10001A9E8(v84, (uint64_t)qword_101102948);
  v86 = v139;
  v87 = (*(uint64_t (**)(os_log_t, char *, uint64_t))(v139 + 16))(v44, v43, v46);
  v142 = v85;
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.default.getter(v88);
  if (os_log_type_enabled(v88, v89))
  {
    v90 = swift_slowAlloc(12, -1);
    v138 = (char *)v49;
    v91 = v44;
    v92 = (uint8_t *)v90;
    v93 = swift_slowAlloc(32, -1);
    v149 = (char *)v93;
    *(_DWORD *)v92 = 136315138;
    v94 = sub_100006C64(&qword_1010F2168, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
    v95 = dispatch thunk of CustomStringConvertible.description.getter(v146, v94);
    v151 = sub_100016940(v95, v96, (uint64_t *)&v149);
    v46 = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v92 + 4, v92 + 12);
    swift_bridgeObjectRelease();
    v97 = v91;
    v49 = (void (*)(char *, char *, uint64_t))v138;
    v139 = *(_QWORD *)(v86 + 8);
    ((void (*)(os_log_t, uint64_t))v139)(v97, v46);
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "Date interval is %s", v92, 0xCu);
    swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v92, -1, -1);
  }
  else
  {
    v139 = *(_QWORD *)(v86 + 8);
    ((void (*)(os_log_t, uint64_t))v139)(v44, v46);
  }

  v98 = v140;
  v99 = v145;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v100 = qword_1011B7000;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1AEC4((uint64_t)v149);
  v102 = v101;
  swift_bridgeObjectRelease();
  v103 = ((uint64_t (*)(char *, char *, uint64_t))v49)(v98, v99, v15);
  v104 = Logger.logObject.getter(v103);
  v105 = static os_log_type_t.default.getter(v104);
  if (os_log_type_enabled(v104, v105))
  {
    v106 = swift_slowAlloc(32, -1);
    v107 = swift_slowAlloc(64, -1);
    v140 = 0;
    v108 = v107;
    v151 = v107;
    *(_DWORD *)v106 = 136315650;
    v109 = sub_100006C64(&qword_1010EE0F0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v110 = dispatch thunk of CustomStringConvertible.description.getter(v15, v109);
    v149 = (char *)sub_100016940(v110, v111, &v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v106 + 4, v106 + 12);
    swift_bridgeObjectRelease();
    v112 = *(void (**)(char *, uint64_t))(v141 + 8);
    v112(v98, v15);
    *(_WORD *)(v106 + 12) = 2080;
    swift_beginAccess(v147, &v149, 0, 0);
    v113 = dispatch thunk of CustomStringConvertible.description.getter(v15, v109);
    v148 = sub_100016940(v113, v114, &v151);
    v46 = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v106 + 14, v106 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v106 + 22) = 2048;
    v148 = *(_QWORD *)&v102;
    v115 = v112;
    v100 = qword_1011B7000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v106 + 24, v106 + 32);
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "Comparing current date %s with date of first lookup %s using a time interval %f", (uint8_t *)v106, 0x20u);
    swift_arrayDestroy(v108, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1, -1);
    v116 = v106;
    v99 = v145;
    swift_slowDealloc(v116, -1, -1);
  }
  else
  {
    v115 = *(void (**)(char *, uint64_t))(v141 + 8);
    v115(v98, v15);
  }

  v117 = v144;
  if (DateInterval.duration.getter(v118) >= v102)
  {
    ((void (*)(char *, uint64_t))v139)(v117, v46);
    v115(v99, v15);
    sub_100004048((uint64_t)v143, (uint64_t *)&unk_1010EA690);
    v115(v147, v15);
    return 2;
  }
  else
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, v100[53], &type metadata for Configuration);
    v119 = sub_100C1AEB0(v151);
    swift_bridgeObjectRelease();
    v120 = sub_100666340();
    if ((v121 & 1) != 0)
    {
      v124 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      isa = UInt._bridgeToObjectiveC()().super.super.isa;
      v126 = String._bridgeToObjectiveC()();
      objc_msgSend(v124, "setObject:forKey:", isa, v126);

      v99 = v145;
      v122 = 0;
    }
    else
    {
      v122 = v120;
    }
    v127 = Logger.logObject.getter(v120);
    v128 = static os_log_type_t.default.getter(v127);
    if (os_log_type_enabled(v127, v128))
    {
      v129 = swift_slowAlloc(22, -1);
      *(_DWORD *)v129 = 134218240;
      v151 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v129 + 4, v129 + 12);
      *(_WORD *)(v129 + 12) = 2048;
      v151 = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v152, v129 + 14, v129 + 22);
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "Comparing current number of alerts %lu with max alerts %lu", (uint8_t *)v129, 0x16u);
      v130 = v129;
      v99 = v145;
      swift_slowDealloc(v130, -1, -1);
    }

    ((void (*)(char *, uint64_t))v139)(v117, v46);
    v115(v99, v15);
    sub_100004048((uint64_t)v143, (uint64_t *)&unk_1010EA690);
    v115(v147, v15);
    return v122 < v119;
  }
}

void sub_100663F40(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a1;
  v32 = a2;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v31 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v31 - v17;
  WorkItemQueue.id.getter(v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v18, 0, 1, v2);
  type metadata accessor for WorkItemQueue(0);
  static WorkItemQueue.currentWorkItemQueueIdentifier.getter();
  v19 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_10000F9B8((uint64_t)v18, (uint64_t)v8, &qword_1010ED860);
  sub_10000F9B8((uint64_t)v15, v19, &qword_1010ED860);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v20((uint64_t)v8, 1, v2) == 1)
  {
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    sub_100004048((uint64_t)v18, &qword_1010ED860);
    if (v20(v19, 1, v2) == 1)
    {
      sub_100004048((uint64_t)v8, &qword_1010ED860);
      return;
    }
  }
  else
  {
    sub_10000F9B8((uint64_t)v8, (uint64_t)v12, &qword_1010ED860);
    if (v20(v19, 1, v2) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v19, v2);
      v28 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v5, v2, v28);
      v30 = *(void (**)(char *, uint64_t))(v3 + 8);
      v30(v5, v2);
      sub_100004048((uint64_t)v15, &qword_1010ED860);
      sub_100004048((uint64_t)v18, &qword_1010ED860);
      v30(v12, v2);
      sub_100004048((uint64_t)v8, &qword_1010ED860);
      if ((v29 & 1) != 0)
        return;
      goto LABEL_7;
    }
    sub_100004048((uint64_t)v15, &qword_1010ED860);
    sub_100004048((uint64_t)v18, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
  }
  sub_100004048((uint64_t)v8, (uint64_t *)&unk_10110EE90);
LABEL_7:
  if (qword_1010E9E08 != -1)
    swift_once(&qword_1010E9E08, sub_100664AC8);
  v21 = type metadata accessor for Logger(0);
  sub_10001A9E8(v21, (uint64_t)qword_1011B73C0);
  v22 = v32;
  swift_bridgeObjectRetain_n(v32, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.fault.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v34 = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain(v22);
    v33 = sub_100016940(v31, v22, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(v22, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "\"%s\" is required to be called from a WorkItemQueue context!", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
  }
}

uint64_t sub_100664390()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1006643A8, v0, 0);
}

uint64_t sub_1006643A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "System onboarding is being presented, setting onboardingIsShowing to true", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  *(_BYTE *)(v6 + 145) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006645B0(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1011029DC;
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1006676F0;
  v5[2] = a2;
  return swift_task_switch(sub_1006643A8, a2, 0);
}

uint64_t sub_100664628()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_100664640, v0, 0);
}

uint64_t sub_100664640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_101102948);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "System onboarding is no longer presented, setting onboardingIsShowing to false", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 16);

  *(_BYTE *)(v6 + 145) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100664844(const void *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1011029E4;
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1006648BC;
  v5[2] = a2;
  return swift_task_switch(sub_100664640, a2, 0);
}

uint64_t sub_1006648BC()
{
  uint64_t *v0;
  void (**v1)(_QWORD);
  uint64_t v2;
  uint64_t v4;

  v1 = *(void (***)(_QWORD))(*v0 + 24);
  v2 = *(_QWORD *)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100664924(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100664960 + 4 * byte_100E47090[a1]))(0xD00000000000001FLL, 0x8000000100EDE3E0);
}

uint64_t sub_100664960()
{
  uint64_t v0;

  return v0 + 16;
}

uint64_t sub_100664A20()
{
  unsigned __int8 *v0;

  return sub_100664924(*v0);
}

uint64_t type metadata accessor for LocalFindableLostModeDetectionService()
{
  return objc_opt_self(_TtC12searchpartyd37LocalFindableLostModeDetectionService);
}

uint64_t sub_100664A48()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10110298C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100658150();
}

uint64_t sub_100664A8C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_101102B98, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalFindableLostModeDetectionService, (uint64_t)&unk_100E47140);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100664AC8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B73C0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B73C0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000025, 0x8000000100EDE130);
}

uint64_t sub_100664B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t v22;

  v22 = a4;
  v7 = sub_10001A9A8(&qword_101102BF8);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v15 = sub_100006C64(&qword_101102BF0, 255, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v16 = *(unsigned __int8 *)(v8 + 80);
  v17 = (v16 + 48) & ~v16;
  v18 = (v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (char *)swift_allocObject(&unk_101084C88, v18 + 8, v16 | 7);
  *((_QWORD *)v19 + 2) = a2;
  *((_QWORD *)v19 + 3) = v15;
  *((_QWORD *)v19 + 4) = a2;
  *((_QWORD *)v19 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v19[v17], v10, v7);
  *(_QWORD *)&v19[v18] = v22;
  swift_retain_n(a2, 2);
  swift_retain();
  sub_100691AC0((uint64_t)v13, (uint64_t)&unk_101102C08, (uint64_t)v19);
  return swift_release();
}

uint64_t sub_100664CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v9 = type metadata accessor for UUID(0);
  v7[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101102BF8);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v7[8] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v7[9] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[10] = swift_task_alloc(v13);
  v7[11] = swift_task_alloc(v13);
  return swift_task_switch(sub_100664D84, a4, 0);
}

uint64_t sub_100664D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 56);
  v26 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 32);
  v24 = *(_QWORD *)(v0 + 40);
  v25 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(_QWORD *)(v0 + 24);
  v22 = v5;
  v23 = v6;
  v27 = v1;
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v21(v1, v5, v4);
  v8 = *(unsigned __int8 *)(v2 + 80);
  v9 = (v8 + 32) & ~v8;
  v20 = v8 | 7;
  v10 = v3 + 7;
  v11 = (v9 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_101084CB0, v11 + 8, v8 | 7);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v6;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v13(v12 + v9, v27, v4);
  *(_QWORD *)(v12 + v11) = v24;
  v21(v25, v22, v4);
  v14 = (v8 + 24) & ~v8;
  v15 = (v14 + v10) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_101084CD8, v15 + 8, v20);
  *(_QWORD *)(v16 + 16) = v7;
  v13(v16 + v14, v25, v4);
  *(_QWORD *)(v16 + v15) = v24;
  swift_retain_n(v7, 2);
  v17 = swift_retain(v23);
  UUID.init()(v17);
  v18 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v26, &unk_101102C18, v12, &unk_101102C28, v16);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v18);
  swift_release(v18);
  swift_task_dealloc(v27);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100664F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  v4 = sub_10001A9A8(&qword_1010EF7C0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v3[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100664FA4, 0, 0);
}

uint64_t sub_100664FA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[7];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[12];
    v21 = v0[11];
    v20 = v0[10];
    v7 = v0[7];
    v8 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v23 = v22;
    *(_DWORD *)v8 = 136446466;
    v0[5] = sub_100016940(0xD00000000000001FLL, 0x8000000100EDE280, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    v9 = type metadata accessor for Peripheral(0);
    v10 = sub_100006C64(&qword_1010EC4A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v11 = v7;
    dispatch thunk of PeripheralProtocol.id.getter(v9, v10);
    v12 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v20, v12);
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v6, v20);
    v0[6] = sub_100016940(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v11, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s for peripheral: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_release_n(v0[7], 2);
  }

  v16 = (_QWORD *)swift_task_alloc(dword_101102C34);
  v0[13] = v16;
  *v16 = v0;
  v16[1] = sub_100665278;
  v17 = v0[7];
  v16[3] = v0[8];
  v18 = (_QWORD *)swift_task_alloc(dword_10110F89C);
  v16[4] = v18;
  *v18 = v16;
  v18[1] = sub_1006653D0;
  return sub_1009E324C(v17);
}

uint64_t sub_100665278(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  *(_QWORD *)(v3 + 32) = v1;
  *(_BYTE *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = *(_QWORD *)(v3 + 104);
  v5 = *v2;
  *(_QWORD *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  if (!v1)
    return swift_task_switch(sub_1006652F8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 96));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_1006652F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 112);
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    swift_task_dealloc(*(_QWORD *)(v1 + 96));
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 96);
    *(_BYTE *)(v1 + 120) = *(_BYTE *)(v1 + 24);
    v4 = sub_10001A9A8(&qword_101102BF8);
    CheckedContinuation.resume(returning:)(v1 + 120, v4);
    swift_task_dealloc(v3);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100665380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  *(_QWORD *)(v2 + 24) = v1;
  v4 = (_QWORD *)swift_task_alloc(dword_10110F89C);
  *(_QWORD *)(v2 + 32) = v4;
  *v4 = v2;
  v4[1] = sub_1006653D0;
  return sub_1009E324C(a1);
}

uint64_t sub_1006653D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v3 + 32);
  v5 = *v3;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  swift_task_dealloc(v4);
  if (v2)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return swift_task_switch(sub_100665444, *(_QWORD *)(v5 + 24), 0);
}

uint64_t sub_100665444()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v20;

  if ((*(_QWORD *)(v0 + 48) & 0x3000000000000000) == 0x1000000000000000)
  {
    v1 = *(unsigned __int8 *)(v0 + 40);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = 0xD000000000000010;
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v20 = v8;
      *(_DWORD *)v7 = 136446210;
      if ((_BYTE)v1)
      {
        if (v1 == 1)
          v6 = 0xD000000000000014;
        else
          v6 = 0xD000000000000017;
        if (v1 == 1)
          v9 = 0x8000000100EDE2C0;
        else
          v9 = 0x8000000100EDE2A0;
      }
      else
      {
        v9 = 0x8000000100EDE2E0;
      }
      *(_QWORD *)(v0 + 16) = sub_100016940(v6, v9, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "FMND status: %{public}s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v18 = (v1 + 1);
  }
  else
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_10110F2A8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v16 = *(_QWORD *)(v0 + 40);
    v15 = *(_QWORD *)(v0 + 48);
    if (v14)
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unexpected FMND ID response!", v17, 2u);
      swift_slowDealloc(v17, -1, -1);

      sub_100666EC8(v16, v15);
    }
    else
    {
      sub_100666EC8(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));

    }
    v18 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v18);
}

uint64_t sub_100665708(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 136) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 128) = swift_task_alloc(v7);
  return swift_task_switch(sub_100665790, 0, 0);
}

uint64_t sub_100665790()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v1 = *(_BYTE *)(v0 + 136);
  v2 = type metadata accessor for Peripheral(0);
  v3 = sub_100006C64(&qword_1010EC4A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  dispatch thunk of PeripheralProtocol.id.getter(v2, v3);
  if ((v1 & 1) != 0)
  {
    v23 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v23);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v24 = *(_QWORD *)(v0 + 128);
    v26 = *(_QWORD *)(v0 + 104);
    v25 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 96);
    v28 = *(_QWORD *)(v0 + 72);
    v29 = type metadata accessor for Logger(0);
    sub_10001A9E8(v29, (uint64_t)qword_10110F2A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v24, v27);
    sub_1002437C4(v28, 1);
    v30 = swift_errorRetain(v23);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v34 = v23;
    v36 = *(_QWORD *)(v0 + 104);
    v35 = *(_QWORD *)(v0 + 112);
    v37 = *(_QWORD *)(v0 + 96);
    v38 = *(_QWORD *)(v0 + 72);
    if (v33)
    {
      v39 = swift_slowAlloc(32, -1);
      v64 = (uint64_t *)swift_slowAlloc(8, -1);
      v65 = swift_slowAlloc(64, -1);
      v70 = v65;
      *(_DWORD *)v39 = 136446723;
      *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001FLL, 0x8000000100EDE280, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2081;
      v40 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v37, v40);
      *(_QWORD *)(v0 + 40) = sub_100016940(v41, v42, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease();
      v43 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v43(v35, v37);
      *(_WORD *)(v39 + 22) = 2114;
      swift_errorRetain(v34);
      v44 = _swift_stdlib_bridgeErrorToNSError(v34);
      *(_QWORD *)(v0 + 48) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v39 + 24, v39 + 32);
      *v64 = v44;
      sub_10010F948(v38, 1);
      sub_10010F948(v38, 1);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s failed for %{private}s. Error %{public}@", (uint8_t *)v39, 0x20u);
      v45 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v64, 1, v45);
      swift_slowDealloc(v64, -1, -1);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v46 = static Task<>.isCancelled.getter();
      if ((v46 & 1) == 0)
      {
LABEL_10:
        v47 = *(_QWORD *)(v0 + 128);
        v48 = *(_QWORD *)(v0 + 96);
        *(_QWORD *)(v0 + 16) = v34;
        v49 = sub_10001A9A8(&qword_101102BF8);
        CheckedContinuation.resume(throwing:)(v0 + 16, v49);
        v50 = v47;
        v51 = v48;
        goto LABEL_16;
      }
    }
    else
    {
      v43 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
      v43(v35, v37);
      sub_10010F948(v38, 1);
      sub_10010F948(v38, 1);

      v46 = static Task<>.isCancelled.getter();
      if ((v46 & 1) == 0)
        goto LABEL_10;
    }
    v53 = Logger.logObject.getter(v46);
    v54 = static os_log_type_t.error.getter(v53);
    v55 = os_log_type_enabled(v53, v54);
    v56 = *(_QWORD *)(v0 + 128);
    v57 = *(_QWORD *)(v0 + 96);
    v58 = *(_QWORD *)(v0 + 72);
    if (v55)
    {
      v69 = *(_QWORD *)(v0 + 128);
      v66 = v43;
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v70 = v60;
      *(_DWORD *)v59 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD00000000000001FLL, 0x8000000100EDE280, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v59 + 4, v59 + 12);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%{public}s Not resuming continuation in cancelled task.", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      sub_10010F948(v58, 1);
      v66(v69, v57);
      goto LABEL_17;
    }

    sub_10010F948(v58, 1);
    v50 = v56;
    v51 = v57;
LABEL_16:
    v43(v50, v51);
    goto LABEL_17;
  }
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_10110F2A8);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v5, v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  if (v12)
  {
    v67 = *(_QWORD *)(v0 + 104);
    v17 = swift_slowAlloc(22, -1);
    v68 = v14;
    v70 = swift_slowAlloc(64, -1);
    v18 = v70;
    *(_DWORD *)v17 = 136446467;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001FLL, 0x8000000100EDE280, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    v19 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    *(_QWORD *)(v0 + 64) = sub_100016940(v20, v21, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    v22 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v22(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%{public}s succeeded for %{private}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v22(v68, v15);
  }
  else
  {

    v52 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v52(v13, v15);
    v52(v14, v15);
  }
LABEL_17:
  v61 = *(_QWORD *)(v0 + 120);
  v62 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100665EC8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100004A74;
  return v6();
}

uint64_t sub_100665F1C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100004A74;
  return v7();
}

uint64_t sub_100665F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100004048(a1, &qword_1010F46C0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_101084EB8, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, &type metadata for () + 1, &unk_101102CE0, v17);
}

void sub_1006660BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_101102948);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      swift_errorRetain(a1);
      v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);
      *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error with disabling lost mode %@", v5, 0xCu);
      v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1010E9E00 != -1)
      swift_once(&qword_1010E9E00, sub_1006580C0);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_101102948);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Disabled lost mode", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

uint64_t sub_100666340()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v5, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  sub_100005CF0((uint64_t)v5, (uint64_t)v6, (uint64_t *)&unk_1010F6390);
  if (v7)
  {
    if (swift_dynamicCast(&v4, v6, (char *)&type metadata for Any + 8, &type metadata for UInt, 6))
      return v4;
    else
      return 0;
  }
  else
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010F6390);
    return 0;
  }
}

uint64_t sub_100666468(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  NSString v9;
  uint64_t v11;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10000F9B8(a1, (uint64_t)v4, (uint64_t *)&unk_1010EA690);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v9);

  swift_unknownObjectRelease(isa);
  return sub_100004048(a1, (uint64_t *)&unk_1010EA690);
}

unint64_t sub_1006665A8()
{
  unint64_t result;

  result = qword_101102BA8;
  if (!qword_101102BA8)
  {
    result = swift_getWitnessTable(byte_100E47208, &type metadata for LocalFindableLostModeDetectionService.InternalError);
    atomic_store(result, (unint64_t *)&qword_101102BA8);
  }
  return result;
}

uint64_t sub_1006665EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10066666C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100662AA0(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

unint64_t sub_1006666C0()
{
  unint64_t result;

  result = qword_101102BB0;
  if (!qword_101102BB0)
  {
    result = swift_getWitnessTable(asc_100E47E04, &_s13LostModeErrorON);
    atomic_store(result, (unint64_t *)&qword_101102BB0);
  }
  return result;
}

uint64_t sub_100666704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1006667EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LostModeRecord(0) - 8) + 80);
  return sub_10068A164(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

void sub_100666830()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  id v3;
  Class isa;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  id v13;
  Class v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;

  v0 = sub_100666340();
  if ((v1 & 1) != 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    isa = UInt._bridgeToObjectiveC()().super.super.isa;
    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setObject:forKey:", isa, v5);

    v2 = 0;
  }
  else
  {
    v2 = v0;
  }
  if (qword_1010E9E00 != -1)
    swift_once(&qword_1010E9E00, sub_1006580C0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_101102948);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    *(_DWORD *)v10 = 134218240;
    v16 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2048;
    v11 = __CFADD__(v2, 1);
    v12 = v2 + 1;
    if (!v11)
    {
      v16 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v10 + 14, v10 + 22);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Incrementing number of alerts from %lu to %lu", (uint8_t *)v10, 0x16u);
      swift_slowDealloc(v10, -1, -1);

LABEL_10:
      v13 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      v14 = UInt._bridgeToObjectiveC()().super.super.isa;
      v15 = String._bridgeToObjectiveC()();
      objc_msgSend(v13, "setObject:forKey:", v14, v15);

      return;
    }
  }
  else
  {

    if (v2 != -1)
      goto LABEL_10;
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100666A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100666AE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A831BC(*(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_100666B20(uint64_t a1)
{
  uint64_t *v1;

  return sub_100664B44(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100666B2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_101102BF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100666BC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_101102BF8) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_101102C04);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100004C28;
  return sub_100664CE4(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100666C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_101102BF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100666D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_101102BF8) - 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6 = (_QWORD *)swift_task_alloc(dword_101102C14);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004C28;
  return sub_100664F3C(v3, v4, v5);
}

uint64_t sub_100666D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_101102BF8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100666E20(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_101102BF8) - 8);
  v7 = *(_QWORD *)(v2 + 16);
  v8 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v9 = (_QWORD *)swift_task_alloc(dword_101102C24);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100004A74;
  return sub_100665708(a1, v5, v7, v8);
}

uint64_t sub_100666EC8(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 60) & 3;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 2)
      return result;
    a2 &= 0xCFFFFFFFFFFFFFFFLL;
  }
  return sub_10001BC14(result, a2);
}

uint64_t sub_100666EE4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100666F08()
{
  return sub_1006672E4((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 56);
}

uint64_t sub_100666F20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_101102C3C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_10065B668(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100666FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_10001A9A8((uint64_t *)&unk_1010EF7F0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 48));
  v7 = sub_10001A9A8(&qword_1010EF7C8);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    swift_errorRelease(*v6);
  }
  else
  {
    type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
    v8 = sub_10001A9A8(&qword_1010EF7C0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
  }
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100667084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EF7F0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_101102C4C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  return sub_10065BDC4(v4, v5);
}

uint64_t sub_10066711C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _QWORD *v6;

  v5 = a2 & 1;
  v6 = (_QWORD *)swift_task_alloc(dword_101102C5C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_10065C580(a1, v5, v2);
}

uint64_t sub_10066717C()
{
  return sub_1006672E4((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 56);
}

uint64_t sub_100667194(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_101102C6C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100004A74;
  return sub_100658874(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100667214()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100667238()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100667264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc(dword_101102C84);
  v4 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_OWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 24) = v2;
  return swift_task_switch(sub_100659348, 0, 0);
}

uint64_t sub_1006672CC()
{
  return sub_1006672E4((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 48);
}

uint64_t sub_1006672E4(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;

  a1(v3[2]);
  a2(v3[4]);
  swift_release(v3[5]);
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_100667334(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v5 = a2 & 1;
  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_101102C94);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_100004A74;
  return sub_100659BDC(a1, v5, v6, v7, v9, v8);
}

uint64_t sub_1006673B0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1006673DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_101102CAC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[5] = v2;
  return swift_task_switch(sub_100658338, 0, 0);
}

uint64_t sub_100667440()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101102CBC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_101102CB8 + dword_101102CB8))(v2, v3);
}

uint64_t sub_1006674AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1006674D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_101102CDC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_101102CD8 + dword_101102CD8))(a1, v4);
}

uint64_t sub_100667544()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100667570()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101102CEC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_101102CE8 + dword_101102CE8))(v2, v3);
}

uint64_t storeEnumTagSinglePayload for LocalFindableLostModeDetectionService.InternalError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100667628 + 4 * byte_100E4709E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_10066765C + 4 * byte_100E47099[v4]))();
}

uint64_t sub_10066765C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100667664(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10066766CLL);
  return result;
}

uint64_t sub_100667678(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100667680);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100667684(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10066768C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableLostModeDetectionService.InternalError()
{
  return &type metadata for LocalFindableLostModeDetectionService.InternalError;
}

unint64_t sub_1006676AC()
{
  unint64_t result;

  result = qword_101102D08;
  if (!qword_101102D08)
  {
    result = swift_getWitnessTable(aI_26, &type metadata for LocalFindableLostModeDetectionService.InternalError);
    atomic_store(result, &qword_101102D08);
  }
  return result;
}

uint64_t sub_1006676F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[7] = v7;
  v3[8] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100667764, a3, 0);
}

uint64_t sub_100667764()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[6];
  v5 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101085088, v7 + v2, v6 | 7);
  v0[9] = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[10] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *v10 = v0;
  v10[1] = sub_1001BE938;
  return unsafeBlocking<A>(_:)(v0[2], sub_1001C09C8, v8, v11);
}

void sub_100667848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100ADDC30(a3);
}

uint64_t sub_100667868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1006678DC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10066790C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return 2;
  else
    return 1;
}

unint64_t sub_100667984()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EB490;
  if (!qword_1010EB490)
  {
    type metadata accessor for SPBeaconSharingError(255);
    result = swift_getWitnessTable(byte_100E21930, v1);
    atomic_store(result, (unint64_t *)&qword_1010EB490);
  }
  return result;
}

uint64_t sub_1006679CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v35[2];
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2);
  v40 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v36 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v12 = qword_1011B7D50;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "#Durian: Will try to connect async on the queue for device %@.", 62, 2, v14);
  swift_bridgeObjectRelease();
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = Future.init()();
  v20 = v37;
  v35[1] = *(_QWORD *)&v37[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v8 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1010852D8, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v24 + v22, v10, v6);
  *(_QWORD *)(v24 + v23) = v19;
  aBlock[4] = sub_100677C78;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010852F0;
  v25 = _Block_copy(aBlock);
  v26 = v20;
  v27 = swift_retain();
  v28 = v36;
  static DispatchQoS.unspecified.getter(v27);
  v43 = _swiftEmptyArrayStorage;
  v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v32 = v40;
  v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v30, v31, v42, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
  swift_release();
  return v19;
}

uint64_t sub_100667D40(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7D50, "#Durian: Will call unpair async on queue.", 41, 2, _swiftEmptyArrayStorage);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = Future.init()();
  v30 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_101085210, v20 + 8, v18 | 7);
  *(_QWORD *)(v21 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21 + v19, v14, v10);
  *(_QWORD *)(v21 + v20) = v17;
  aBlock[4] = sub_100677C20;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085228;
  v22 = _Block_copy(aBlock);
  v23 = v2;
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v35 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v28 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v26, v27, v34, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v28);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  swift_release();
  return v17;
}

uint64_t sub_100668048()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = static os_log_type_t.default.getter(v6);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D50, "#Durian: scan for tags nearby owner.", 36, 2, _swiftEmptyArrayStorage, v16);
  v10 = swift_allocObject(&unk_1010851C0, 24, 7);
  *(_QWORD *)(v10 + 16) = v0;
  aBlock[4] = sub_10001EBB4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010851D8;
  v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v14 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v3, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return swift_release();
}

uint64_t sub_100668290(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD v35[2];
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2);
  v40 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v36 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v12 = qword_1011B7D50;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "#Durian: Will fetch firwmare version for device %@.", 51, 2, v14);
  swift_bridgeObjectRelease();
  v18 = sub_10001A9A8(&qword_101102F88);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = Future.init()();
  v20 = v37;
  v35[1] = *(_QWORD *)&v37[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v8 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1010853C8, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v24 + v22, v10, v6);
  *(_QWORD *)(v24 + v23) = v19;
  aBlock[4] = sub_100677CBC;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010853E0;
  v25 = _Block_copy(aBlock);
  v26 = v20;
  v27 = swift_retain();
  v28 = v36;
  static DispatchQoS.unspecified.getter(v27);
  v43 = _swiftEmptyArrayStorage;
  v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v32 = v40;
  v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v30, v31, v42, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v28, v32, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v39);
  swift_release();
  return v19;
}

uint64_t sub_100668604(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7D50, "#Durian: Will call fetch user stats async on queue.", 51, 2, _swiftEmptyArrayStorage);
  v16 = sub_10001A9A8(&qword_101102F98);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = Future.init()();
  v30 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1010854B8, v20 + 8, v18 | 7);
  *(_QWORD *)(v21 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21 + v19, v14, v10);
  *(_QWORD *)(v21 + v20) = v17;
  aBlock[4] = sub_100677CEC;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010854D0;
  v22 = _Block_copy(aBlock);
  v23 = v2;
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v35 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v28 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v26, v27, v34, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v28);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  swift_release();
  return v17;
}

_QWORD *sub_10066890C()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  return v0;
}

uint64_t sub_100668968()
{
  uint64_t v0;

  sub_10066890C();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for CommandCompletion()
{
  return objc_opt_self(_TtC12searchpartyd17CommandCompletion);
}

id sub_1006689D4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TagCommandManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TagCommandManager()
{
  return objc_opt_self(_TtC12searchpartyd17TagCommandManager);
}

uint64_t sub_100668AA0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  uint64_t ObjectType;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75[80];
  _QWORD aBlock[6];
  uint64_t v77;
  char v78[8];

  v74 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v73 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v72 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = type metadata accessor for DispatchTimeInterval(0);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v64 = (char **)((char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v68 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v68 - 8);
  v10 = __chkstk_darwin(v68);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v67 = (char *)&v60 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v63 = v16;
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v78, 0, 0);
  v19 = *v18;
  if (!*(_QWORD *)(*v18 + 16))
    goto LABEL_8;
  v60 = a1;
  swift_bridgeObjectRetain(v19);
  v20 = sub_100003FB0(a2);
  if ((v21 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    a1 = v60;
LABEL_8:
    v61 = v9;
    v62 = v5;
    v33 = type metadata accessor for CommandCompletion();
    v34 = swift_allocObject(v33, 104, 7);
    *(_QWORD *)(v34 + 16) = 0;
    *(_BYTE *)(v34 + 24) = 1;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_OWORD *)(v34 + 64) = 0u;
    *(_OWORD *)(v34 + 80) = 0u;
    *(_QWORD *)(v34 + 96) = 0;
    *(_QWORD *)(v34 + 64) = v74;
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    swift_retain();
    v35(v17, a2, v14);
    swift_beginAccess(v18, aBlock, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
    v77 = *v18;
    *v18 = 0x8000000000000000;
    sub_10010D7D4(v34, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
    *v18 = v77;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_endAccess(aBlock);
    swift_release();
LABEL_9:
    v74 = sub_100008644();
    v38 = v37;
    ObjectType = swift_getObjectType(v74);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 24))(a2, ObjectType, v38);
    sub_1006691B4(a2);
    static DispatchTime.now()(v40);
    v41 = v64;
    *v64 = 62;
    v42 = v65;
    v43 = v66;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v65 + 104))(v41, enum case for DispatchTimeInterval.seconds(_:), v66);
    v44 = v67;
    + infix(_:_:)(v12, v41);
    (*(void (**)(_QWORD *, uint64_t))(v42 + 8))(v41, v43);
    v45 = *(void (**)(char *, uint64_t))(v61 + 8);
    v46 = v68;
    v45(v12, v68);
    v66 = *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
    v47 = *(unsigned __int8 *)(v15 + 80);
    v48 = (v47 + 24) & ~v47;
    v49 = swift_allocObject(&unk_101085328, v48 + v63, v47 | 7);
    *(_QWORD *)(v49 + 16) = a1;
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v49 + v48, v17, v14);
    aBlock[4] = sub_100677C88;
    aBlock[5] = v49;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101085340;
    v50 = _Block_copy(aBlock);
    v51 = a1;
    v52 = v69;
    static DispatchQoS.unspecified.getter(v51);
    v77 = (uint64_t)_swiftEmptyArrayStorage;
    v53 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v54 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v55 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v56 = v72;
    v57 = v54;
    v58 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v77, v57, v55, v62, v53);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v44, v52, v56, v50);
    _Block_release(v50);
    swift_unknownObjectRelease(v74);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v56, v58);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v52, v71);
    v45(v44, v46);
    return swift_release();
  }
  v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
  swift_retain();
  v23 = swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v22 + 64))
  {
    v61 = v9;
    v62 = v5;
    *(_QWORD *)(v22 + 64) = v74;
    swift_retain();
    swift_release();
    a1 = v60;
    goto LABEL_9;
  }
  v24 = static os_log_type_t.error.getter(v23);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D50, "#Durian: Connect already pending.", 33, 2, _swiftEmptyArrayStorage);
  type metadata accessor for CommandError(0);
  v26 = v25;
  v77 = 1;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v27, v75);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v29;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD00000000000003ALL;
  *(_QWORD *)(inited + 56) = 0x8000000100EDE7A0;
  v30 = sub_1006B8B10(inited);
  v31 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v77, v30, v26, v31);
  v32 = (void *)aBlock[0];
  Future.finish(error:)(aBlock[0]);

  return swift_release();
}

void sub_1006691B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t inited;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  void *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  void (*v104)(char *, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  char v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  double v130;
  double v131;
  uint64_t v132;
  double v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t ObjectType;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170[3];
  char v171[56];
  uint64_t v172;
  uint64_t v173;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v168 = *(_QWORD *)(v4 - 8);
  v169 = v4;
  v5 = __chkstk_darwin(v4);
  v166 = (uint64_t)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v165 = (char *)&v151 - v8;
  v9 = __chkstk_darwin(v7);
  v156 = (char *)&v151 - v10;
  v11 = __chkstk_darwin(v9);
  v155 = (char *)&v151 - v12;
  v13 = __chkstk_darwin(v11);
  v157 = (char *)&v151 - v14;
  v15 = __chkstk_darwin(v13);
  v158 = (uint64_t)&v151 - v16;
  __chkstk_darwin(v15);
  v152 = (char *)&v151 - v17;
  v18 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  __chkstk_darwin(v18);
  v159 = (uint64_t)&v151 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010F2CA8);
  __chkstk_darwin(v20);
  v160 = (uint64_t)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v22);
  v161 = (char *)&v151 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for Date(0);
  v162 = *(_QWORD *)(v163 - 8);
  v24 = __chkstk_darwin(v163);
  v153 = (uint64_t)&v151 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v154 = (char *)&v151 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v27);
  v29 = (char *)&v151 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for OwnedBeaconRecord(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v164 = (uint64_t)&v151 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v151 - v35;
  __chkstk_darwin(v34);
  v167 = (uint64_t)&v151 - v37;
  v38 = type metadata accessor for DispatchPredicate(0);
  v39 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v41 = (uint64_t *)((char *)&v151 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = *(void **)(v2 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue);
  *v41 = v42;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v39 + 104))(v41, enum case for DispatchPredicate.onQueue(_:), v38);
  v43 = v42;
  LOBYTE(v42) = _dispatchPreconditionTest(_:)(v41);
  (*(void (**)(_QWORD *, uint64_t))(v39 + 8))(v41, v38);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_49;
  }
  swift_retain();
  sub_10080B950(a1, (uint64_t)v29);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) != 1)
  {
    v151 = v2;
    v166 = a1;
    v56 = (uint64_t)v29;
    v57 = v167;
    sub_1000126EC(v56, v167, type metadata accessor for OwnedBeaconRecord);
    v58 = sub_10001A9A8(&qword_1011002F0);
    inited = swift_initStackObject(v58, v171);
    *(_OWORD *)(inited + 16) = xmmword_100E221E0;
    v60 = (void *)SPBeaconTypeDurian;
    v61 = (void *)SPBeaconTypeAccessory;
    *(_QWORD *)(inited + 32) = SPBeaconTypeDurian;
    *(_QWORD *)(inited + 40) = v61;
    v62 = (void *)SPBeaconTypeHele;
    *(_QWORD *)(inited + 48) = SPBeaconTypeHele;
    v63 = *(_QWORD *)(v57 + *(int *)(v30 + 64));
    v64 = *(_QWORD *)(v57 + *(int *)(v30 + 68));
    v65 = v60;
    v66 = v61;
    v67 = v62;
    LOBYTE(v63) = sub_100A2D38C(v63, v64);
    sub_10005972C(v57, (uint64_t)v36, type metadata accessor for OwnedBeaconRecord);
    if ((v63 & 1) != 0)
    {
      sub_1000126B0((uint64_t)v36, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
LABEL_13:
      v78 = v168;
      if (qword_1010E9930 != -1)
        swift_once(&qword_1010E9930, sub_1000AEA0C);
      v79 = type metadata accessor for Logger(0);
      sub_10001A9E8(v79, (uint64_t)qword_1011B6730);
      v80 = v165;
      v81 = v169;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v165, v166, v169);
      v82 = v164;
      v83 = sub_10005972C(v57, v164, type metadata accessor for OwnedBeaconRecord);
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.default.getter(v84);
      if (os_log_type_enabled(v84, v85))
      {
        v86 = swift_slowAlloc(32, -1);
        v166 = swift_slowAlloc(64, -1);
        v170[0] = v166;
        *(_DWORD *)v86 = 141558531;
        v172 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v86 + 4, v86 + 12);
        *(_WORD *)(v86 + 12) = 2081;
        v87 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v88 = dispatch thunk of CustomStringConvertible.description.getter(v81, v87);
        v172 = sub_100016940(v88, v89, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v86 + 14, v86 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v81);
        *(_WORD *)(v86 + 22) = 2082;
        sub_1009A2CF8();
        v91 = (void *)v90;
        v92 = SPBeaconType.description.getter(v90);
        v94 = v93;

        v172 = sub_100016940(v92, v94, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v86 + 24, v86 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0(v82, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "#Durian: TagCommandManager: skip fetch battery state for beacon: %{private,mask.hash}s of unsupported type %{public}s.", (uint8_t *)v86, 0x20u);
        v95 = v166;
        swift_arrayDestroy(v166, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1, -1);
        swift_slowDealloc(v86, -1, -1);

        v96 = v167;
      }
      else
      {

        sub_1000126B0(v82, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v81);
        v96 = v57;
      }
      goto LABEL_18;
    }
    sub_1009A2CF8();
    v69 = (void *)v68;
    v70 = sub_1001C0B20(v68, inited);

    sub_1000126B0((uint64_t)v36, type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRelease();
    if ((v70 & 1) == 0)
      goto LABEL_13;
    v71 = v151;
    swift_retain();
    v72 = v159;
    sub_1008202EC(v166, v159);
    v73 = sub_10001A9A8(&qword_101102F80);
    v74 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v72, 1, v73);
    v75 = v168;
    if (v74 == 1)
    {
      sub_100004048(v72, (uint64_t *)&unk_101102F70);
      v76 = type metadata accessor for BeaconStatus(0);
      v77 = v160;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v160, 1, 1, v76);
    }
    else
    {
      v77 = v160;
      sub_1000126EC(v72, v160, type metadata accessor for BeaconStatus);
      v76 = type metadata accessor for BeaconStatus(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v77, 0, 1, v76);
    }
    v97 = v163;
    v98 = v162;
    swift_release();
    type metadata accessor for BeaconStatus(0);
    v99 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v77, 1, v76);
    v100 = v169;
    if (v99 == 1)
    {
      sub_100004048(v77, &qword_1010F2CA8);
      v101 = (uint64_t)v161;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v161, 1, 1, v97);
      v102 = v166;
    }
    else
    {
      v101 = (uint64_t)v161;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v161, v77 + *(int *)(v76 + 24), v97);
      sub_1000126B0(v77, type metadata accessor for BeaconStatus);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v98 + 56))(v101, 0, 1, v97);
      v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v101, 1, v97);
      v102 = v166;
      if (v103 != 1)
      {
        v129 = v154;
        (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v154, v101, v97);
        if (qword_1010E9D08 != -1)
          swift_once(&qword_1010E9D08, sub_10059A6E0);
        OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
        sub_100C1B7BC(v170[0]);
        v131 = v130;
        swift_bridgeObjectRelease();
        v132 = v153;
        static Date.trustedNow.getter(v153);
        v133 = Date.timeIntervalSince(_:)(v132);
        v108 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
        v108(v132, v97);
        if (v131 >= v133)
        {
          v140 = v166;
          if (qword_1010E9930 != -1)
            swift_once(&qword_1010E9930, sub_1000AEA0C);
          v141 = type metadata accessor for Logger(0);
          sub_10001A9E8(v141, (uint64_t)qword_1011B6730);
          v142 = v152;
          v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 16))(v152, v140, v100);
          v144 = Logger.logObject.getter(v143);
          v145 = static os_log_type_t.default.getter(v144);
          if (os_log_type_enabled(v144, v145))
          {
            v146 = swift_slowAlloc(22, -1);
            v166 = swift_slowAlloc(32, -1);
            v170[0] = v166;
            *(_DWORD *)v146 = 141558275;
            v172 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v146 + 4, v146 + 12);
            *(_WORD *)(v146 + 12) = 2081;
            v147 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v148 = dispatch thunk of CustomStringConvertible.description.getter(v100, v147);
            v172 = sub_100016940(v148, v149, v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v146 + 14, v146 + 22);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v75 + 8))(v142, v100);
            _os_log_impl((void *)&_mh_execute_header, v144, v145, "#Durian: TagCommandManager: skip fetch battery state for: %{private,mask.hash}s.", (uint8_t *)v146, 0x16u);
            v150 = v166;
            swift_arrayDestroy(v166, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v150, -1, -1);
            swift_slowDealloc(v146, -1, -1);

            v108((uint64_t)v154, v163);
            goto LABEL_44;
          }

          (*(void (**)(char *, uint64_t))(v75 + 8))(v142, v100);
          v138 = v154;
          v139 = v97;
LABEL_46:
          v108((uint64_t)v138, v139);
LABEL_47:
          v96 = v57;
          goto LABEL_18;
        }
        v108((uint64_t)v129, v97);
        v102 = v166;
LABEL_24:
        v104 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
        v105 = v157;
        v104(v157, v102, v100);
        swift_beginAccess(v71 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_batteryFetchInFlight, v170, 33, 0);
        v106 = v158;
        v107 = sub_100A09F38(v158, v105);
        v108 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
        v108(v106, v100);
        swift_endAccess(v170);
        if ((v107 & 1) != 0)
        {
          if (qword_1010E9930 != -1)
            swift_once(&qword_1010E9930, sub_1000AEA0C);
          v109 = type metadata accessor for Logger(0);
          sub_10001A9E8(v109, (uint64_t)qword_1011B6730);
          v110 = v155;
          v111 = ((uint64_t (*)(char *, uint64_t, uint64_t))v104)(v155, v166, v100);
          v112 = Logger.logObject.getter(v111);
          v113 = static os_log_type_t.default.getter(v112);
          if (os_log_type_enabled(v112, v113))
          {
            v114 = swift_slowAlloc(22, -1);
            v115 = swift_slowAlloc(32, -1);
            v170[0] = v115;
            *(_DWORD *)v114 = 141558275;
            v172 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v114 + 4, v114 + 12);
            *(_WORD *)(v114 + 12) = 2081;
            v116 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v117 = dispatch thunk of CustomStringConvertible.description.getter(v100, v116);
            v172 = sub_100016940(v117, v118, v170);
            v57 = v167;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v114 + 14, v114 + 22);
            swift_bridgeObjectRelease();
            v108((uint64_t)v110, v100);
            _os_log_impl((void *)&_mh_execute_header, v112, v113, "#Durian: TagCommandManager: fetch battery state for: %{private,mask.hash}s.", (uint8_t *)v114, 0x16u);
            swift_arrayDestroy(v115, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v115, -1, -1);
            swift_slowDealloc(v114, -1, -1);
          }
          else
          {
            v108((uint64_t)v110, v100);
          }

          v134 = sub_100008644();
          v136 = v135;
          ObjectType = swift_getObjectType(v134);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v136 + 16))(v166, ObjectType, v136);
          swift_unknownObjectRelease(v134);
          goto LABEL_47;
        }
        if (qword_1010E9930 != -1)
          swift_once(&qword_1010E9930, sub_1000AEA0C);
        v119 = type metadata accessor for Logger(0);
        sub_10001A9E8(v119, (uint64_t)qword_1011B6730);
        v120 = v156;
        v121 = ((uint64_t (*)(char *, uint64_t, uint64_t))v104)(v156, v166, v100);
        v122 = Logger.logObject.getter(v121);
        v123 = static os_log_type_t.default.getter(v122);
        if (os_log_type_enabled(v122, v123))
        {
          v124 = swift_slowAlloc(22, -1);
          v125 = swift_slowAlloc(32, -1);
          v170[0] = v125;
          *(_DWORD *)v124 = 141558275;
          v172 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v124 + 4, v124 + 12);
          *(_WORD *)(v124 + 12) = 2081;
          v126 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v127 = dispatch thunk of CustomStringConvertible.description.getter(v100, v126);
          v172 = sub_100016940(v127, v128, v170);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v124 + 14, v124 + 22);
          swift_bridgeObjectRelease();
          v108((uint64_t)v120, v100);
          _os_log_impl((void *)&_mh_execute_header, v122, v123, "#Durian: TagCommandManager: skip fetch battery state for beacon: %{private,mask.hash}s - already fetching.", (uint8_t *)v124, 0x16u);
          swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v125, -1, -1);
          swift_slowDealloc(v124, -1, -1);

LABEL_44:
          v96 = v167;
LABEL_18:
          sub_1000126B0(v96, type metadata accessor for OwnedBeaconRecord);
          return;
        }

        v138 = v120;
        v139 = v100;
        goto LABEL_46;
      }
    }
    sub_100004048(v101, (uint64_t *)&unk_1010EA690);
    goto LABEL_24;
  }
  sub_100004048((uint64_t)v29, (uint64_t *)&unk_1010F47C0);
  if (qword_1010E9930 != -1)
LABEL_49:
    swift_once(&qword_1010E9930, sub_1000AEA0C);
  v44 = type metadata accessor for Logger(0);
  sub_10001A9E8(v44, (uint64_t)qword_1011B6730);
  v46 = v168;
  v45 = v169;
  v47 = v166;
  v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v168 + 16))(v166, a1, v169);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = swift_slowAlloc(22, -1);
    v52 = swift_slowAlloc(32, -1);
    v170[0] = v52;
    *(_DWORD *)v51 = 141558275;
    v172 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v51 + 4, v51 + 12);
    *(_WORD *)(v51 + 12) = 2081;
    v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(v45, v53);
    v172 = sub_100016940(v54, v55, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v51 + 14, v51 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v45);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "#Durian: TagCommandManager: skip fetch battery state for non-owned device: %{private,mask.hash}s.", (uint8_t *)v51, 0x16u);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v47, v45);
  }

}

void sub_10066A3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD aBlock[6];
  char v46[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v41 = *(_QWORD *)(v7 - 8);
  v42 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v46, 0, 0);
  v15 = *v14;
  if (*(_QWORD *)(*v14 + 16))
  {
    swift_bridgeObjectRetain(*v14);
    v16 = sub_100003FB0(a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      v40 = v4;
      v19 = *(_QWORD *)(v18 + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v19 + 64);
      swift_retain();
      v21 = swift_release();
      if (v20)
      {
        v39 = v20;
        v22 = static os_log_type_t.error.getter(v21);
        if (qword_1010EA270 != -1)
        {
          v37 = v22;
          swift_once(&qword_1010EA270, sub_100B5DAF0);
          v22 = v37;
        }
        os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D50, "#Durian: Finished waiting to connect. #Bug: CL should have completed.", 69, 2, _swiftEmptyArrayStorage);
        v23 = *v14;
        if (*(_QWORD *)(*v14 + 16))
        {
          swift_bridgeObjectRetain(*v14);
          v24 = sub_100003FB0(a2);
          if ((v25 & 1) != 0)
          {
            v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v26 + 64) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v27 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        *v27 = 0;
        v27[1] = 0;
        swift_unknownObjectRelease(v28);
        sub_10001F6FC();
        (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        v29 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        v30 = swift_allocObject(&unk_101085378, 24, 7);
        *(_QWORD *)(v30 + 16) = v39;
        aBlock[4] = sub_100677C94;
        aBlock[5] = v30;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_101085390;
        v31 = _Block_copy(aBlock);
        v32 = swift_retain();
        static DispatchQoS.unspecified.getter(v32);
        v44 = _swiftEmptyArrayStorage;
        v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v36 = v40;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v34, v35, v40, v33);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v31);
        _Block_release(v31);
        swift_release();

        (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v36);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10066A780(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  void *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char v83[80];
  id aBlock[6];
  uint64_t v85;
  char v86[8];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v82 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v81 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for DispatchQoS(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for DispatchTimeInterval(0);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v10 = (uint64_t *)((char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v77 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v77 - 8);
  v12 = __chkstk_darwin(v77);
  v71 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v76 = (char *)&v66 - v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v72 = v17;
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = a1;
  v19 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v86, 0, 0);
  v20 = *v19;
  if (!*(_QWORD *)(*v19 + 16))
    goto LABEL_8;
  swift_bridgeObjectRetain(*v19);
  v21 = sub_100003FB0(a2);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v69 = v11;
    v70 = v6;
    v34 = type metadata accessor for CommandCompletion();
    v35 = swift_allocObject(v34, 104, 7);
    v36 = a3;
    v37 = v35;
    *(_QWORD *)(v35 + 16) = 0;
    *(_BYTE *)(v35 + 24) = 1;
    *(_OWORD *)(v35 + 32) = 0u;
    *(_OWORD *)(v35 + 48) = 0u;
    *(_OWORD *)(v35 + 64) = 0u;
    *(_OWORD *)(v35 + 80) = 0u;
    *(_QWORD *)(v35 + 88) = v36;
    *(_QWORD *)(v35 + 96) = 0;
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v68 = v36;
    swift_retain();
    v38(v18, a2, v15);
    swift_beginAccess(v19, aBlock, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    v85 = *v19;
    *v19 = 0x8000000000000000;
    sub_10010D7D4(v37, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    *v19 = v85;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    swift_endAccess(aBlock);
    swift_release();
LABEL_9:
    v40 = v75;
    v67 = sub_100008644();
    v42 = v41;
    ObjectType = swift_getObjectType(v67);
    v44 = a2;
    v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 88))(a2, ObjectType, v42);
    v46 = v71;
    static DispatchTime.now()(v45);
    *v10 = 62;
    v47 = v73;
    v48 = v74;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v73 + 104))(v10, enum case for DispatchTimeInterval.seconds(_:), v74);
    v49 = v76;
    + infix(_:_:)(v46, v10);
    (*(void (**)(_QWORD *, uint64_t))(v47 + 8))(v10, v48);
    v50 = *(void (**)(char *, uint64_t))(v69 + 8);
    v51 = v77;
    v50(v46, v77);
    v52 = v50;
    v74 = *(_QWORD *)&v40[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v44, v15);
    v53 = *(unsigned __int8 *)(v16 + 80);
    v54 = (v53 + 24) & ~v53;
    v55 = (v72 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (char *)swift_allocObject(&unk_101085418, v55 + 8, v53 | 7);
    *((_QWORD *)v56 + 2) = v40;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v56[v54], v18, v15);
    *(_QWORD *)&v56[v55] = v68;
    aBlock[4] = sub_100677CD4;
    aBlock[5] = v56;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101085430;
    v57 = _Block_copy(aBlock);
    swift_retain();
    v58 = v40;
    v59 = v78;
    static DispatchQoS.unspecified.getter(v58);
    v85 = (uint64_t)_swiftEmptyArrayStorage;
    v60 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v62 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v63 = v81;
    v64 = v61;
    v65 = v70;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v64, v62, v70, v60);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v49, v59, v63, v57);
    _Block_release(v57);
    swift_unknownObjectRelease(v67);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v65);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v59, v80);
    v52(v49, v51);
    swift_release();
    return;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
  swift_retain();
  v24 = swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v23 + 88))
  {
    v69 = v11;
    v70 = v6;
    *(_QWORD *)(v23 + 88) = a3;
    swift_retain();
    swift_release();
    v68 = a3;
    goto LABEL_9;
  }
  v25 = static os_log_type_t.error.getter(v24);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D50, "#Durian: fetch firwmare already pending.", 40, 2, _swiftEmptyArrayStorage);
  type metadata accessor for CommandError(0);
  v27 = v26;
  v85 = 1;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v28, v83);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v30;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD000000000000036;
  *(_QWORD *)(inited + 56) = 0x8000000100EDE8A0;
  v31 = sub_1006B8B10(inited);
  v32 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v85, v31, v27, v32);
  v33 = aBlock[0];
  Future.finish(error:)(v33);
  swift_release();

}

void sub_10066AEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD aBlock[6];
  _QWORD *v51;
  char v52[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v48 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v8 - 8);
  v47 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v52, 0, 0);
  v16 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    swift_bridgeObjectRetain(*v15);
    v17 = sub_100003FB0(a2);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v16 + 56);
      v45 = v6;
      v20 = *(_QWORD *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      v21 = *(_QWORD **)(v20 + 88);
      swift_retain();
      swift_release();
      if (v21)
      {
        aBlock[0] = a3;
        v51 = v21;
        v22 = sub_10001A9A8(&qword_101102F88);
        v44 = v21;
        v23 = v22;
        v24 = sub_1000193A4(&qword_101102F90, &qword_101102F88, (const char *)&protocol conformance descriptor for Future<A>);
        swift_retain_n(a3, 2);
        LOBYTE(v24) = dispatch thunk of static Equatable.== infix(_:_:)(aBlock, &v51, v23, v24);
        swift_release();
        v25 = swift_release();
        if ((v24 & 1) != 0)
        {
          v26 = v44;
          v27 = static os_log_type_t.error.getter(v25);
          if (qword_1010EA270 != -1)
          {
            v43 = v27;
            swift_once(&qword_1010EA270, sub_100B5DAF0);
            v27 = v43;
          }
          os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D50, "#Durian: Finished waiting to fetch firwmare version. #Bug: CL should have completed.", 84, 2, _swiftEmptyArrayStorage);
          v28 = *v15;
          if (*(_QWORD *)(*v15 + 16))
          {
            swift_bridgeObjectRetain(*v15);
            v29 = sub_100003FB0(a2);
            if ((v30 & 1) != 0)
            {
              v31 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v29);
              swift_retain();
              swift_bridgeObjectRelease();
              *(_QWORD *)(v31 + 88) = 0;
              swift_release();
              swift_release();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          v32 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
          v33 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
          *v32 = 0;
          v32[1] = 0;
          swift_unknownObjectRelease(v33);
          sub_10001F6FC();
          (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
          v34 = (void *)static OS_dispatch_queue.global(qos:)(v14);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
          v35 = swift_allocObject(&unk_101085468, 24, 7);
          *(_QWORD *)(v35 + 16) = v26;
          aBlock[4] = sub_10067CE2C;
          aBlock[5] = v35;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100016FB8;
          aBlock[3] = &unk_101085480;
          v36 = _Block_copy(aBlock);
          v37 = swift_retain();
          static DispatchQoS.unspecified.getter(v37);
          v51 = _swiftEmptyArrayStorage;
          v38 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
          v40 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
          v41 = v48;
          v42 = v45;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v39, v40, v45, v38);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v41, v36);
          _Block_release(v36);
          swift_release();

          (*(void (**)(char *, uint64_t))(v49 + 8))(v41, v42);
          (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
        }
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10066B318(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  if (a1)
  {
    type metadata accessor for CommandError(0);
    v4 = v3;
    v8 = a2;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(&v9, &v8, v5, v4, v6);
    v7 = v9;
    Future.finish(error:)(v9);

  }
}

uint64_t sub_10066B3BC(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD aBlock[6];

  v3 = v2;
  v44 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5);
  v48 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v7 - 8);
  v47 = v7;
  __chkstk_darwin(v7);
  v45 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v43 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v43);
  v42 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: Will call play sound async on queue for device %@.", 59, 2, v15);
  swift_bridgeObjectRelease();
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v41[0] = Future.init()();
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = Future.init()();
  v41[1] = *(_QWORD *)&v3[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  v21 = v42;
  v22 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v42, a1, v43);
  v23 = *(unsigned __int8 *)(v9 + 80);
  v24 = (v23 + 24) & ~v23;
  v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = v3;
  v28 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_101085648, v28 + 8, v23 | 7);
  *(_QWORD *)(v29 + 16) = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v29 + v24, v21, v22);
  *(_QWORD *)(v29 + v25) = v44;
  v30 = v41[0];
  *(_QWORD *)(v29 + v26) = v41[0];
  *(_QWORD *)(v29 + v28) = v20;
  aBlock[4] = sub_100677E20;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085660;
  v31 = _Block_copy(aBlock);
  v32 = v27;
  swift_retain();
  v33 = swift_retain();
  v34 = v45;
  static DispatchQoS.unspecified.getter(v33);
  v51 = _swiftEmptyArrayStorage;
  v35 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v37 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v38 = v48;
  v39 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v36, v37, v50, v35);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v34, v38, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v47);
  swift_release();
  return v30;
}

uint64_t sub_10066B790(char *a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void (*v71)(void);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  void *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  void (*v110)(char *, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(_QWORD, _QWORD);
  void **aBlock;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  void *v128;
  uint64_t (*v129)();
  uint64_t v130;
  _QWORD *v131;
  char v132[8];

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v116 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v115 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DispatchTimeInterval(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v104 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for DispatchTime(0);
  v103 = *(_QWORD *)(v123 - 8);
  v17 = __chkstk_darwin(v123);
  v102 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v114 = (char *)&v100 - v19;
  v20 = type metadata accessor for UUID(0);
  v121 = *(_QWORD *)(v20 - 8);
  v122 = v20;
  __chkstk_darwin(v20);
  v111 = v21;
  v120 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = a2;
  sub_10066C220((uint64_t)a2);
  v22 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v132, 0, 0);
  v23 = *(_QWORD *)v22;
  v24 = *(_QWORD *)(*(_QWORD *)v22 + 16);
  v117 = v14;
  if (v24)
  {
    swift_bridgeObjectRetain(v23);
    v25 = sub_100003FB0((uint64_t)v124);
    if ((v26 & 1) != 0)
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v25);
      swift_retain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v28 = type metadata accessor for CommandCompletion();
  v27 = swift_allocObject(v28, 104, 7);
  *(_QWORD *)(v27 + 16) = 0;
  *(_BYTE *)(v27 + 24) = 1;
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_QWORD *)(v27 + 96) = 0;
LABEL_6:
  v108 = v13;
  v118 = v11;
  v109 = v10;
  *(_QWORD *)(v27 + 16) = a3;
  *(_BYTE *)(v27 + 24) = 0;
  *(_QWORD *)(v27 + 32) = a4;
  v113 = a4;
  swift_retain();
  swift_release();
  *(_QWORD *)(v27 + 40) = a5;
  swift_retain();
  swift_release();
  v30 = (uint64_t)v120;
  v29 = v121;
  v31 = v122;
  v110 = *(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v121 + 16);
  v110(v120, v124, v122);
  swift_beginAccess(v22, &aBlock, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v22);
  v131 = *(_QWORD **)v22;
  *(_QWORD *)v22 = 0x8000000000000000;
  sub_10010D7D4(v27, v30, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)v22 = v131;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v31);
  swift_endAccess(&aBlock);
  v107 = a1;
  v33 = sub_100008644();
  v35 = v34;
  v36 = static os_log_type_t.default.getter(v33);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v37 = qword_1011B7D50;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v39 = swift_allocObject(v38, 72, 7);
  v100 = xmmword_100E22B00;
  *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
  aBlock = (void **)v33;
  v126 = v35;
  v101 = v35;
  v119 = v33;
  swift_unknownObjectRetain(v33);
  v40 = sub_10001A9A8(&qword_101102F58);
  v41 = String.init<A>(describing:)(&aBlock, v40);
  v43 = v42;
  *(_QWORD *)(v39 + 56) = &type metadata for String;
  v44 = sub_10001AA00();
  *(_QWORD *)(v39 + 64) = v44;
  *(_QWORD *)(v39 + 32) = v41;
  *(_QWORD *)(v39 + 40) = v43;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "#Durian: Playing sound using [%@]", 33, 2, v39);
  v45 = swift_bridgeObjectRelease();
  v112 = v27;
  switch(a3)
  {
    case 0:
      v46 = static os_log_type_t.default.getter(v45);
      v47 = qword_1011B7D50;
      v48 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v48 + 16) = v100;
      v49 = v124;
      v50 = UUID.uuidString.getter(v48);
      *(_QWORD *)(v48 + 56) = &type metadata for String;
      *(_QWORD *)(v48 + 64) = v44;
      *(_QWORD *)(v48 + 32) = v50;
      *(_QWORD *)(v48 + 40) = v51;
      os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "#Durian: Playing default sound sequence on %@.", 46, 2, v48);
      swift_bridgeObjectRelease();
      swift_getObjectType(v119);
      v52 = objc_msgSend((id)objc_opt_self(CLFindMyAccessorySoundSequence), "defaultSequence");
      goto LABEL_13;
    case 1:
      v53 = static os_log_type_t.default.getter(v45);
      v54 = qword_1011B7D50;
      v55 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v55 + 16) = v100;
      v49 = v124;
      v56 = UUID.uuidString.getter(v55);
      *(_QWORD *)(v55 + 56) = &type metadata for String;
      *(_QWORD *)(v55 + 64) = v44;
      *(_QWORD *)(v55 + 32) = v56;
      *(_QWORD *)(v55 + 40) = v57;
      os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "#Durian: Playing ranging sound sequence on %@.", 46, 2, v55);
      swift_bridgeObjectRelease();
      swift_getObjectType(v119);
      v52 = objc_msgSend((id)objc_opt_self(CLFindMyAccessorySoundSequence), "rangingSequence");
      goto LABEL_13;
    case 2:
      v58 = static os_log_type_t.default.getter(v45);
      v59 = qword_1011B7D50;
      v60 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v60 + 16) = v100;
      v49 = v124;
      v61 = UUID.uuidString.getter(v60);
      *(_QWORD *)(v60 + 56) = &type metadata for String;
      *(_QWORD *)(v60 + 64) = v44;
      *(_QWORD *)(v60 + 32) = v61;
      *(_QWORD *)(v60 + 40) = v62;
      os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v59, "#Durian: Playing unauthorized sound sequence on %@.", 51, 2, v60);
      swift_bridgeObjectRelease();
      ObjectType = swift_getObjectType(v119);
      v64 = (*(uint64_t (**)(_QWORD, uint64_t))(v101 + 48))(v49, ObjectType);
      goto LABEL_16;
    case 5:
      v72 = static os_log_type_t.default.getter(v45);
      v73 = qword_1011B7D50;
      v74 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v74 + 16) = v100;
      v49 = v124;
      v75 = UUID.uuidString.getter(v74);
      *(_QWORD *)(v74 + 56) = &type metadata for String;
      *(_QWORD *)(v74 + 64) = v44;
      *(_QWORD *)(v74 + 32) = v75;
      *(_QWORD *)(v74 + 40) = v76;
      os_log(_:dso:log:_:_:)(v72, &_mh_execute_header, v73, "#Durian: Playing unauthorized short sound sequence on %@.", 57, 2, v74);
      swift_bridgeObjectRelease();
      swift_getObjectType(v119);
      v70 = objc_msgSend((id)objc_opt_self(CLFindMyAccessorySoundSequence), "shortSequence");
      v71 = *(void (**)(void))(v101 + 56);
      goto LABEL_15;
    default:
      v65 = static os_log_type_t.default.getter(v45);
      v66 = qword_1011B7D50;
      v67 = swift_allocObject(v38, 72, 7);
      *(_OWORD *)(v67 + 16) = v100;
      v49 = v124;
      v68 = UUID.uuidString.getter(v67);
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      *(_QWORD *)(v67 + 64) = v44;
      *(_QWORD *)(v67 + 32) = v68;
      *(_QWORD *)(v67 + 40) = v69;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "#Durian: Unknown context. Playing default sound sequence on %@.", 63, 2, v67);
      swift_bridgeObjectRelease();
      swift_getObjectType(v119);
      v52 = objc_msgSend((id)objc_opt_self(CLFindMyAccessorySoundSequence), "defaultSequence");
LABEL_13:
      v70 = v52;
      v71 = *(void (**)(void))(v101 + 40);
LABEL_15:
      v71();

LABEL_16:
      v77 = v109;
      v78 = v108;
      v79 = v107;
      v80 = v106;
      v81 = v105;
      v82 = v104;
      v83 = v103;
      v84 = v102;
      static DispatchTime.now()(v64);
      *v82 = 62;
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(v81 + 104))(v82, enum case for DispatchTimeInterval.seconds(_:), v80);
      v85 = v114;
      + infix(_:_:)(v84, v82);
      (*(void (**)(_QWORD *, uint64_t))(v81 + 8))(v82, v80);
      v124 = *(void (**)(_QWORD, _QWORD))(v83 + 8);
      v124(v84, v123);
      v109 = *(_QWORD *)&v79[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
      v86 = v120;
      v87 = v122;
      v110(v120, v49, v122);
      v88 = v121;
      v89 = *(unsigned __int8 *)(v121 + 80);
      v90 = (v89 + 24) & ~v89;
      v91 = (v111 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
      v92 = swift_allocObject(&unk_101085698, v91 + 8, v89 | 7);
      *(_QWORD *)(v92 + 16) = v79;
      (*(void (**)(uint64_t, char *, uint64_t))(v88 + 32))(v92 + v90, v86, v87);
      *(_QWORD *)(v92 + v91) = v113;
      v129 = sub_100677E88;
      v130 = v92;
      aBlock = _NSConcreteStackBlock;
      v126 = 1107296256;
      v127 = sub_100016FB8;
      v128 = &unk_1010856B0;
      v93 = _Block_copy(&aBlock);
      swift_retain();
      v94 = v79;
      v95 = v115;
      static DispatchQoS.unspecified.getter(v94);
      v131 = _swiftEmptyArrayStorage;
      v96 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v97 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v98 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v131, v97, v98, v77, v96);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v85, v95, v78, v93);
      _Block_release(v93);
      swift_release();
      swift_unknownObjectRelease(v119);
      (*(void (**)(char *, uint64_t))(v118 + 8))(v78, v77);
      (*(void (**)(char *, uint64_t))(v116 + 8))(v95, v117);
      v124(v85, v123);
      return swift_release();
  }
}

void sub_10066C220(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(v3, v16, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain(v4);
    v5 = sub_100003FB0(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD **)(*(_QWORD *)(v4 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRelease();
      if (v7[4])
      {
        v8 = swift_retain();
        v9 = static os_log_type_t.default.getter(v8);
        if (qword_1010EA228 != -1)
        {
          LODWORD(v15) = v9;
          swift_once(&qword_1010EA228, sub_100B5D7D4);
          v9 = v15;
        }
        os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7CF8, "#Durian: Previous play sound exists. Completing it as success.", 62, 2, _swiftEmptyArrayStorage, v15);
        HIBYTE(v15) = 0;
        Future.finish(result:)((char *)&v15 + 7);
        swift_release();
      }
      if (v7[5])
      {
        v10 = swift_retain();
        v11 = static os_log_type_t.default.getter(v10);
        if (qword_1010EA228 != -1)
        {
          LODWORD(v15) = v11;
          swift_once(&qword_1010EA228, sub_100B5D7D4);
          v11 = v15;
        }
        os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7CF8, "#Durian: Previous play sound completion exists. Completing it as success.", 73, 2, _swiftEmptyArrayStorage, v15);
        HIBYTE(v15) = 0;
        Future.finish(result:)((char *)&v15 + 7);
        swift_release();
      }
      if (v7[6])
      {
        v12 = swift_retain();
        v13 = static os_log_type_t.default.getter(v12);
        if (qword_1010EA228 != -1)
        {
          v14 = v13;
          swift_once(&qword_1010EA228, sub_100B5D7D4);
          v13 = v14;
        }
        os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7CF8, "#Durian: Previous stop sound exists. Completing it as success.", 62, 2, _swiftEmptyArrayStorage);
        HIBYTE(v15) = 0;
        Future.finish(result:)((char *)&v15 + 7);
        swift_release();
      }
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10066C448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD aBlock[6];
  _QWORD *v71;
  char v72[32];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v10 - 8);
  v69 = v10;
  __chkstk_darwin(v10);
  v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v64 = *(_QWORD *)(v12 - 8);
  v65 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a1;
  v15 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(v15, v72, 0, 0);
  v16 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    swift_bridgeObjectRetain(*v15);
    v17 = sub_100003FB0(a2);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD **)(v19 + 32);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v20 = 0;
LABEL_6:
  v21 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    swift_bridgeObjectRetain(*v15);
    v22 = sub_100003FB0(a2);
    if ((v23 & 1) != 0)
    {
      v24 = v14;
      v25 = a2;
      v26 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v22);
      swift_retain();
      swift_bridgeObjectRelease();
      v27 = *(_QWORD *)(v26 + 40);
      swift_retain();
      a2 = v25;
      v14 = v24;
      v28 = v27;
      swift_release();
      if (!v20)
        return swift_release();
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
  }
  v28 = 0;
  if (!v20)
    return swift_release();
LABEL_12:
  v62 = v9;
  v63 = a2;
  v29 = v7;
  v30 = v6;
  aBlock[0] = a3;
  v71 = v20;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  v32 = sub_1000193A4((unint64_t *)&unk_101102FA0, (uint64_t *)&unk_1010F4790, (const char *)&protocol conformance descriptor for Future<A>);
  swift_retain_n(a3, 2);
  v33 = dispatch thunk of static Equatable.== infix(_:_:)(aBlock, &v71, v31, v32);
  swift_release();
  v34 = swift_release();
  if ((v33 & 1) != 0)
  {
    v35 = static os_log_type_t.error.getter(v34);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, qword_1011B7D50, "#Durian: Finished waiting to play sound. #Bug: CL should have completed.", 72, 2, _swiftEmptyArrayStorage);
    v36 = *v15;
    v37 = *(_QWORD *)(*v15 + 16);
    v38 = v30;
    v61 = v29;
    v39 = v63;
    if (v37)
    {
      swift_bridgeObjectRetain(v36);
      v40 = sub_100003FB0(v39);
      if ((v41 & 1) != 0)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v40);
        swift_retain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v42 + 40) = 0;
        v39 = v63;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v43 = *v15;
    if (*(_QWORD *)(*v15 + 16))
    {
      swift_bridgeObjectRetain(*v15);
      v44 = sub_100003FB0(v39);
      if ((v45 & 1) != 0)
      {
        v46 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v44);
        swift_retain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v46 + 32) = 0;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    v47 = (_QWORD *)(v66 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    v48 = *(_QWORD *)(v66 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    *v47 = 0;
    v47[1] = 0;
    swift_unknownObjectRelease(v48);
    sub_10001F6FC();
    v50 = v64;
    v49 = v65;
    (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v65);
    v51 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v49);
    v52 = swift_allocObject(&unk_1010856E8, 32, 7);
    *(_QWORD *)(v52 + 16) = v20;
    *(_QWORD *)(v52 + 24) = v28;
    aBlock[4] = sub_100677EA4;
    aBlock[5] = v52;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101085700;
    v53 = _Block_copy(aBlock);
    swift_retain();
    v54 = swift_retain();
    v55 = v67;
    static DispatchQoS.unspecified.getter(v54);
    v71 = _swiftEmptyArrayStorage;
    v56 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v57 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v58 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v59 = v62;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v57, v58, v38, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v55, v59, v53);
    _Block_release(v53);
    swift_release();
    swift_release();

    (*(void (**)(char *, uint64_t))(v61 + 8))(v59, v38);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v69);
  }
  else
  {
    swift_release();
  }
  return swift_release();
}

void sub_10066C9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;

  if (a1)
  {
    type metadata accessor for CommandError(0);
    v4 = v3;
    v13 = 2;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(&v14, &v13, v5, v4, v6);
    v7 = v14;
    Future.finish(error:)(v14);

  }
  if (a2)
  {
    type metadata accessor for CommandError(0);
    v9 = v8;
    v13 = 2;
    v10 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v11 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(&v14, &v13, v10, v9, v11);
    v12 = v14;
    Future.finish(error:)(v14);

  }
}

uint64_t sub_10066CAC8(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v7 - 8);
  v32 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7D50, "#Durian: Will call stop sound async on queue.", 45, 2, _swiftEmptyArrayStorage);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = Future.init()();
  v30 = *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v18 = *(unsigned __int8 *)(v11 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_101085580, v20 + 8, v18 | 7);
  *(_QWORD *)(v21 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21 + v19, v14, v10);
  *(_QWORD *)(v21 + v20) = v17;
  aBlock[4] = sub_100677D2C;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085598;
  v22 = _Block_copy(aBlock);
  v23 = v2;
  v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  v35 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v28 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v26, v27, v34, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v28);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  swift_release();
  return v17;
}

uint64_t sub_10066CDD0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void **aBlock;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  void *v88;
  uint64_t (*v89)();
  uint64_t v90;
  _QWORD *v91;
  char v92[32];

  v68 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v77 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = (_QWORD *)type metadata accessor for DispatchTimeInterval(0);
  v73 = *(v74 - 1);
  __chkstk_darwin(v74);
  v72 = (uint64_t *)((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for DispatchTime(0);
  v71 = *(_QWORD *)(v84 - 8);
  v13 = __chkstk_darwin(v84);
  v70 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v76 = (char *)&v66 - v15;
  v83 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v69 = v17;
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a2;
  sub_10066C220(a2);
  v75 = a1;
  v20 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v92, 0, 0);
  v21 = *(_QWORD *)v20;
  v22 = *(_QWORD *)(*(_QWORD *)v20 + 16);
  v81 = v6;
  v82 = v5;
  v79 = v9;
  v80 = v8;
  v78 = v10;
  if (v22)
  {
    swift_bridgeObjectRetain(v21);
    v23 = sub_100003FB0(v19);
    if ((v24 & 1) != 0)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v23);
      swift_retain();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v26 = type metadata accessor for CommandCompletion();
  v25 = swift_allocObject(v26, 104, 7);
  *(_QWORD *)(v25 + 16) = 0;
  *(_BYTE *)(v25 + 24) = 1;
  *(_OWORD *)(v25 + 32) = 0u;
  *(_OWORD *)(v25 + 48) = 0u;
  *(_OWORD *)(v25 + 64) = 0u;
  *(_OWORD *)(v25 + 80) = 0u;
  *(_QWORD *)(v25 + 96) = 0;
LABEL_6:
  *(_QWORD *)(v25 + 48) = v68;
  swift_retain();
  swift_release();
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v66 = v19;
  v28 = v19;
  v29 = v83;
  v67 = v27;
  v27(v18, v28, v83);
  swift_beginAccess(v20, &aBlock, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v20);
  v91 = *(_QWORD **)v20;
  *(_QWORD *)v20 = 0x8000000000000000;
  sub_10010D7D4(v25, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)v20 = v91;
  swift_bridgeObjectRelease();
  v68 = v16;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v29);
  swift_endAccess(&aBlock);
  v31 = v75;
  v32 = sub_100008644();
  v34 = v33;
  v35 = static os_log_type_t.default.getter(v32);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v36 = qword_1011B7D50;
  v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v38 = swift_allocObject(v37, 72, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
  aBlock = (void **)v32;
  v86 = v34;
  swift_unknownObjectRetain(v32);
  v39 = sub_10001A9A8(&qword_101102F58);
  v40 = String.init<A>(describing:)(&aBlock, v39);
  v42 = v41;
  *(_QWORD *)(v38 + 56) = &type metadata for String;
  *(_QWORD *)(v38 + 64) = sub_10001AA00();
  *(_QWORD *)(v38 + 32) = v40;
  *(_QWORD *)(v38 + 40) = v42;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "#Durian: Stoping sound using [%@]", 33, 2, v38);
  swift_bridgeObjectRelease();
  ObjectType = swift_getObjectType(v32);
  v44 = v66;
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 64))(v66, ObjectType, v34);
  v46 = v70;
  static DispatchTime.now()(v45);
  v47 = v72;
  *v72 = 62;
  v48 = v73;
  v49 = v74;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v73 + 104))(v47, enum case for DispatchTimeInterval.seconds(_:), v74);
  v50 = v76;
  + infix(_:_:)(v46, v47);
  (*(void (**)(_QWORD *, _QWORD *))(v48 + 8))(v47, v49);
  v74 = *(_QWORD **)(v71 + 8);
  ((void (*)(char *, uint64_t))v74)(v46, v84);
  v73 = *(_QWORD *)&v31[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  v51 = v83;
  v67(v18, v44, v83);
  v52 = v68;
  v53 = *(unsigned __int8 *)(v68 + 80);
  v54 = (v53 + 24) & ~v53;
  v55 = swift_allocObject(&unk_1010855D0, v54 + v69, v53 | 7);
  *(_QWORD *)(v55 + 16) = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 32))(v55 + v54, v18, v51);
  v89 = sub_100677D3C;
  v90 = v55;
  aBlock = _NSConcreteStackBlock;
  v86 = 1107296256;
  v87 = sub_100016FB8;
  v88 = &unk_1010855E8;
  v56 = _Block_copy(&aBlock);
  v57 = v31;
  v58 = v77;
  static DispatchQoS.unspecified.getter(v57);
  v91 = _swiftEmptyArrayStorage;
  v59 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v60 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v61 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v62 = v80;
  v63 = v60;
  v64 = v82;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v91, v63, v61, v82, v59);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v50, v58, v62, v56);
  _Block_release(v56);
  swift_release();
  swift_unknownObjectRelease(v32);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v62, v64);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v58, v79);
  ((void (*)(char *, uint64_t))v74)(v50, v84);
  return swift_release();
}

void sub_10066D450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];
  char v45[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v45, 0, 0);
  v15 = *v14;
  if (*(_QWORD *)(*v14 + 16))
  {
    swift_bridgeObjectRetain(*v14);
    v16 = sub_100003FB0(a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      v39 = v4;
      v19 = *(_QWORD *)(v18 + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v19 + 48);
      swift_retain();
      v21 = swift_release();
      if (v20)
      {
        v38 = v20;
        v22 = static os_log_type_t.error.getter(v21);
        if (qword_1010EA270 != -1)
        {
          v36 = v22;
          swift_once(&qword_1010EA270, sub_100B5DAF0);
          v22 = v36;
        }
        os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D50, "#Durian: Finished waiting to stop sound. #Bug: CL should have completed.", 72, 2, _swiftEmptyArrayStorage);
        v23 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        *v23 = 0;
        v23[1] = 0;
        swift_unknownObjectRelease(v24);
        v25 = *v14;
        if (*(_QWORD *)(*v14 + 16))
        {
          swift_bridgeObjectRetain(*v14);
          v26 = sub_100003FB0(a2);
          if ((v27 & 1) != 0)
          {
            v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v28 + 48) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        sub_10001F6FC();
        (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        v29 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        aBlock[4] = sub_100677D48;
        aBlock[5] = v38;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_101085610;
        v30 = _Block_copy(aBlock);
        v31 = swift_retain();
        static DispatchQoS.unspecified.getter(v31);
        v43 = _swiftEmptyArrayStorage;
        v32 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v33 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v34 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v35 = v39;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v33, v34, v39, v32);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v30);
        _Block_release(v30);
        swift_release();

        (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v35);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10066D810(char *a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t inited;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93[80];
  void **aBlock;
  uint64_t v95;
  uint64_t (*v96)(uint64_t);
  void *v97;
  uint64_t (*v98)();
  uint64_t v99;
  uint64_t v100;
  char v101[8];

  v89 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v88 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v87 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = (_QWORD *)type metadata accessor for DispatchTimeInterval(0);
  v83 = *(v84 - 1);
  __chkstk_darwin(v84);
  v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for DispatchTime(0);
  v82 = *(_QWORD *)(v92 - 8);
  v13 = __chkstk_darwin(v92);
  v81 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v86 = (char *)&v76 - v15;
  v91 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v80 = v16;
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v101, 0, 0);
  v19 = *v18;
  v20 = *(_QWORD *)(*v18 + 16);
  v85 = a2;
  if (!v20)
    goto LABEL_8;
  swift_bridgeObjectRetain(v19);
  v21 = sub_100003FB0(a2);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v76 = v12;
    v79 = v5;
    v35 = type metadata accessor for CommandCompletion();
    v36 = a2;
    v37 = swift_allocObject(v35, 104, 7);
    *(_QWORD *)(v37 + 16) = 0;
    *(_BYTE *)(v37 + 24) = 1;
    *(_OWORD *)(v37 + 32) = 0u;
    *(_OWORD *)(v37 + 48) = 0u;
    *(_OWORD *)(v37 + 64) = 0u;
    *(_OWORD *)(v37 + 80) = 0u;
    *(_QWORD *)(v37 + 96) = 0;
    *(_QWORD *)(v37 + 56) = v89;
    v38 = v90;
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v90 + 16);
    swift_retain();
    swift_retain();
    v40 = v36;
    v41 = v91;
    v39(v17, v40, v91);
    swift_beginAccess(v18, &aBlock, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v18);
    v100 = *v18;
    *v18 = 0x8000000000000000;
    sub_10010D7D4(v37, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
    *v18 = v100;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v41);
    swift_endAccess(&aBlock);
    goto LABEL_9;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v21);
  swift_retain();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v23 + 56))
  {
    v24 = swift_retain();
    v25 = static os_log_type_t.error.getter(v24);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D50, "#Durian: Unpair already pending.", 32, 2, _swiftEmptyArrayStorage);
    type metadata accessor for CommandError(0);
    v27 = v26;
    v100 = 1;
    v28 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    inited = swift_initStackObject(v28, v93);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v30;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000035;
    *(_QWORD *)(inited + 56) = 0x8000000100EDE670;
    v31 = sub_1006B8B10(inited);
    v32 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v100, v31, v27, v32);
    v33 = aBlock;
    Future.finish(error:)(aBlock);

    return swift_release_n(v23, 2);
  }
  v76 = v12;
  v79 = v5;
  *(_QWORD *)(v23 + 56) = v89;
  swift_retain();
LABEL_9:
  v77 = v9;
  v78 = v8;
  v89 = v7;
  v43 = sub_100008644();
  v45 = v44;
  v46 = static os_log_type_t.default.getter(v43);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v47 = qword_1011B7D50;
  v48 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v49 = swift_allocObject(v48, 72, 7);
  *(_OWORD *)(v49 + 16) = xmmword_100E22B00;
  aBlock = (void **)v43;
  v95 = v45;
  swift_unknownObjectRetain(v43);
  v50 = sub_10001A9A8(&qword_101102F58);
  v51 = String.init<A>(describing:)(&aBlock, v50);
  v53 = v52;
  *(_QWORD *)(v49 + 56) = &type metadata for String;
  *(_QWORD *)(v49 + 64) = sub_10001AA00();
  *(_QWORD *)(v49 + 32) = v51;
  *(_QWORD *)(v49 + 40) = v53;
  os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, v47, "#Durian: Unpairing using [%@]", 29, 2, v49);
  swift_bridgeObjectRelease();
  ObjectType = swift_getObjectType(v43);
  v55 = v85;
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 72))(v85, ObjectType, v45);
  v57 = v81;
  static DispatchTime.now()(v56);
  v58 = v76;
  *v76 = 62;
  v59 = v83;
  v60 = v84;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v83 + 104))(v58, enum case for DispatchTimeInterval.seconds(_:), v84);
  v61 = v86;
  + infix(_:_:)(v57, v58);
  (*(void (**)(_QWORD *, _QWORD *))(v59 + 8))(v58, v60);
  v84 = *(_QWORD **)(v82 + 8);
  ((void (*)(char *, uint64_t))v84)(v57, v92);
  v83 = *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  v62 = v90;
  v63 = v55;
  v64 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v17, v63, v91);
  v65 = *(unsigned __int8 *)(v62 + 80);
  v66 = (v65 + 24) & ~v65;
  v67 = swift_allocObject(&unk_101085260, v66 + v80, v65 | 7);
  *(_QWORD *)(v67 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v67 + v66, v17, v64);
  v98 = sub_100677C30;
  v99 = v67;
  aBlock = _NSConcreteStackBlock;
  v95 = 1107296256;
  v96 = sub_100016FB8;
  v97 = &unk_101085278;
  v68 = _Block_copy(&aBlock);
  v69 = a1;
  v70 = v87;
  static DispatchQoS.unspecified.getter(v69);
  v100 = (uint64_t)_swiftEmptyArrayStorage;
  v71 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v72 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v73 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v74 = v89;
  v75 = v79;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v100, v72, v73, v79, v71);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v61, v70, v74, v68);
  _Block_release(v68);
  swift_release();
  swift_unknownObjectRelease(v43);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v74, v75);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v70, v78);
  ((void (*)(char *, uint64_t))v84)(v61, v92);
  return swift_release();
}

void sub_10066E038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];
  char v45[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v45, 0, 0);
  v15 = *v14;
  if (*(_QWORD *)(*v14 + 16))
  {
    swift_bridgeObjectRetain(*v14);
    v16 = sub_100003FB0(a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      v39 = v4;
      v19 = *(_QWORD *)(v18 + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v19 + 56);
      swift_retain();
      v21 = swift_release();
      if (v20)
      {
        v38 = v20;
        v22 = static os_log_type_t.error.getter(v21);
        if (qword_1010EA270 != -1)
        {
          v36 = v22;
          swift_once(&qword_1010EA270, sub_100B5DAF0);
          v22 = v36;
        }
        os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D50, "#Durian: Finished waiting for unpair. #Bug: CL should have completed.", 69, 2, _swiftEmptyArrayStorage);
        v23 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        *v23 = 0;
        v23[1] = 0;
        swift_unknownObjectRelease(v24);
        v25 = *v14;
        if (*(_QWORD *)(*v14 + 16))
        {
          swift_bridgeObjectRetain(*v14);
          v26 = sub_100003FB0(a2);
          if ((v27 & 1) != 0)
          {
            v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v28 + 56) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        sub_10001F6FC();
        (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        v29 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        aBlock[4] = sub_100677C3C;
        aBlock[5] = v38;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_1010852A0;
        v30 = _Block_copy(aBlock);
        v31 = swift_retain();
        static DispatchQoS.unspecified.getter(v31);
        v43 = _swiftEmptyArrayStorage;
        v32 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v33 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v34 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v35 = v39;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v33, v34, v39, v32);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v30);
        _Block_release(v30);
        swift_release();

        (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v35);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10066E3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  type metadata accessor for CommandError(0);
  v6 = v5;
  v14 = 2;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v7, &v13);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = a2;
  *(_QWORD *)(inited + 56) = a3;
  v10 = sub_1006B8B10(inited);
  v11 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(&v15, &v14, v10, v6, v11);
  v12 = v15;
  Future.finish(error:)(v15);

}

uint64_t sub_10066E4EC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t ObjectType;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  void (*v56)(_QWORD, _QWORD);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_QWORD, _QWORD);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void **aBlock;
  uint64_t v91;
  uint64_t (*v92)(uint64_t);
  void *v93;
  uint64_t (*v94)();
  uint64_t v95;
  uint64_t v96;
  char v97[32];

  v86 = a3;
  v85 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v7 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v84 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v83 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v79 = *(_QWORD *)(v10 - 8);
  v80 = (void (*)(_QWORD, _QWORD))v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for DispatchTime(0);
  v78 = *(_QWORD *)(v89 - 8);
  v13 = __chkstk_darwin(v89);
  v77 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v82 = (char *)&v73 - v15;
  v16 = type metadata accessor for UUID(0);
  v87 = *(_QWORD *)(v16 - 8);
  v88 = v16;
  __chkstk_darwin(v16);
  v76 = v17;
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v97, 0, 0);
  v20 = *v19;
  v21 = *(_QWORD *)(*v19 + 16);
  v81 = a2;
  if (!v21)
    goto LABEL_8;
  swift_bridgeObjectRetain(v20);
  v22 = sub_100003FB0(a2);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    v73 = v12;
    v33 = type metadata accessor for CommandCompletion();
    v34 = swift_allocObject(v33, 104, 7);
    *(_QWORD *)(v34 + 16) = 0;
    *(_BYTE *)(v34 + 24) = 1;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_OWORD *)(v34 + 48) = 0u;
    *(_OWORD *)(v34 + 64) = 0u;
    *(_OWORD *)(v34 + 80) = 0u;
    *(_QWORD *)(v34 + 96) = 0;
    v35 = v87;
    *(_QWORD *)(v34 + 72) = v86;
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 16);
    swift_retain();
    swift_retain();
    v37 = a2;
    v38 = v88;
    v36(v18, v37, v88);
    swift_beginAccess(v19, &aBlock, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    v96 = *v19;
    *v19 = 0x8000000000000000;
    sub_10010D7D4(v34, (uint64_t)v18, isUniquelyReferenced_nonNull_native);
    *v19 = v96;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v38);
    swift_endAccess(&aBlock);
    goto LABEL_9;
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v22);
  swift_retain();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v24 + 72))
  {
    v25 = swift_retain();
    v26 = static os_log_type_t.error.getter(v25);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7D50, "#Durian: Fetch user stats already pending.", 42, 2, _swiftEmptyArrayStorage);
    type metadata accessor for CommandError(0);
    v28 = v27;
    v96 = 1;
    v29 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v30 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v96, v29, v28, v30);
    v31 = aBlock;
    Future.finish(error:)(aBlock);

    return swift_release_n(v24, 2);
  }
  v73 = v12;
  *(_QWORD *)(v24 + 72) = v86;
  swift_retain();
LABEL_9:
  v74 = v8;
  v75 = v7;
  v86 = v5;
  v40 = sub_100008644();
  v42 = v41;
  v43 = static os_log_type_t.default.getter(v40);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v44 = qword_1011B7D50;
  v45 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v46 = swift_allocObject(v45, 72, 7);
  *(_OWORD *)(v46 + 16) = xmmword_100E22B00;
  aBlock = (void **)v40;
  v91 = v42;
  swift_unknownObjectRetain(v40);
  v47 = sub_10001A9A8(&qword_101102F58);
  v48 = String.init<A>(describing:)(&aBlock, v47);
  v50 = v49;
  *(_QWORD *)(v46 + 56) = &type metadata for String;
  *(_QWORD *)(v46 + 64) = sub_10001AA00();
  *(_QWORD *)(v46 + 32) = v48;
  *(_QWORD *)(v46 + 40) = v50;
  os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v44, "#Durian: Fetching User Stats using [%@]", 39, 2, v46);
  swift_bridgeObjectRelease();
  ObjectType = swift_getObjectType(v40);
  v52 = v81;
  v53 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v42 + 80))(0, v81, ObjectType, v42);
  v54 = v77;
  static DispatchTime.now()(v53);
  v55 = v73;
  *v73 = 62;
  v57 = v79;
  v56 = v80;
  (*(void (**)(_QWORD *, _QWORD, void (*)(_QWORD, _QWORD)))(v79 + 104))(v55, enum case for DispatchTimeInterval.seconds(_:), v80);
  v58 = v82;
  + infix(_:_:)(v54, v55);
  (*(void (**)(_QWORD *, _QWORD))(v57 + 8))(v55, v56);
  v80 = *(void (**)(_QWORD, _QWORD))(v78 + 8);
  v80(v54, v89);
  v79 = *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  v59 = v87;
  v60 = v52;
  v61 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v18, v60, v88);
  v62 = *(unsigned __int8 *)(v59 + 80);
  v63 = (v62 + 24) & ~v62;
  v64 = swift_allocObject(&unk_101085508, v63 + v76, v62 | 7);
  *(_QWORD *)(v64 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v64 + v63, v18, v61);
  v94 = sub_100677CFC;
  v95 = v64;
  aBlock = _NSConcreteStackBlock;
  v91 = 1107296256;
  v92 = sub_100016FB8;
  v93 = &unk_101085520;
  v65 = _Block_copy(&aBlock);
  v66 = a1;
  v67 = v83;
  static DispatchQoS.unspecified.getter(v66);
  v96 = (uint64_t)_swiftEmptyArrayStorage;
  v68 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v69 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v70 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v71 = v75;
  v72 = v85;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v96, v69, v70, v85, v68);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v58, v67, v71, v65);
  _Block_release(v65);
  swift_release();
  swift_unknownObjectRelease(v40);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v71, v72);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v67, v74);
  v80(v58, v89);
  return swift_release();
}

void sub_10066EC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[6];
  char v45[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v7 - 8);
  v41 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v45, 0, 0);
  v15 = *v14;
  if (*(_QWORD *)(*v14 + 16))
  {
    swift_bridgeObjectRetain(*v14);
    v16 = sub_100003FB0(a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v15 + 56);
      v39 = v4;
      v19 = *(_QWORD *)(v18 + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      v20 = *(_QWORD *)(v19 + 72);
      swift_retain();
      v21 = swift_release();
      if (v20)
      {
        v38 = v20;
        v22 = static os_log_type_t.error.getter(v21);
        if (qword_1010EA270 != -1)
        {
          v36 = v22;
          swift_once(&qword_1010EA270, sub_100B5DAF0);
          v22 = v36;
        }
        os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D50, "#Durian: Finished waiting for fetch user stats. #Bug: CL should have completed.", 79, 2, _swiftEmptyArrayStorage);
        v23 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        v24 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
        *v23 = 0;
        v23[1] = 0;
        swift_unknownObjectRelease(v24);
        v25 = *v14;
        if (*(_QWORD *)(*v14 + 16))
        {
          swift_bridgeObjectRetain(*v14);
          v26 = sub_100003FB0(a2);
          if ((v27 & 1) != 0)
          {
            v28 = *(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v26);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v28 + 72) = 0;
            swift_release();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        sub_10001F6FC();
        (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
        v29 = (void *)static OS_dispatch_queue.global(qos:)(v13);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        aBlock[4] = sub_100677D08;
        aBlock[5] = v38;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_101085548;
        v30 = _Block_copy(aBlock);
        v31 = swift_retain();
        static DispatchQoS.unspecified.getter(v31);
        v43 = _swiftEmptyArrayStorage;
        v32 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v33 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v34 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v35 = v39;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v33, v34, v39, v32);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v30);
        _Block_release(v30);
        swift_release();

        (*(void (**)(char *, uint64_t))(v42 + 8))(v6, v35);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v9, v41);
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10066EFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD aBlock[6];
  char v72[32];

  v66 = a4;
  v67 = a5;
  v65 = a3;
  v69 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v68 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v72, 0, 0);
  v19 = *v17;
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(*v17);
    v20 = sub_100003FB0(v69);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(v19 + 56);
      v63 = v11;
      v64 = v17;
      v23 = v9;
      v24 = v6;
      v25 = v10;
      v26 = v7;
      v27 = *(_QWORD *)(v22 + 8 * v20);
      swift_retain();
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v27 + 88);
      swift_retain();
      v29 = v26;
      v17 = v64;
      v18 = swift_release();
      if (v28)
      {
        sub_10001F6FC();
        v62 = v25;
        (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
        v61 = static OS_dispatch_queue.global(qos:)(v16);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        v30 = (_QWORD *)swift_allocObject(&unk_1010861D8, 48, 7);
        v32 = v65;
        v31 = v66;
        v30[2] = v65;
        v30[3] = v28;
        v33 = v67;
        v30[4] = v31;
        v30[5] = v33;
        aBlock[4] = sub_10067CC04;
        aBlock[5] = v30;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_1010861F0;
        v34 = _Block_copy(aBlock);
        swift_retain();
        swift_errorRetain(v32);
        v35 = sub_10001BBBC(v31, v33);
        v36 = v68;
        static DispatchQoS.unspecified.getter(v35);
        v70 = _swiftEmptyArrayStorage;
        v37 = v29;
        v38 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v40 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v39, v40, v24, v38);
        v41 = (void *)v61;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v23, v34);
        _Block_release(v34);
        swift_release();

        (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v24);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v62);
        result = swift_release();
        v43 = *v17;
        v44 = v69;
        if (!*(_QWORD *)(*v17 + 16))
          return result;
        swift_bridgeObjectRetain(*v17);
        v45 = sub_100003FB0(v44);
        if ((v46 & 1) != 0)
        {
          v47 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v45);
          swift_retain();
LABEL_13:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v47 + 88) = 0;
          swift_release();
          return swift_release();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v18 = swift_bridgeObjectRelease();
    }
  }
  v48 = static os_log_type_t.error.getter(v18);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v49 = qword_1011B7D50;
  v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v51 = swift_allocObject(v50, 72, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
  v52 = type metadata accessor for UUID(0);
  v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v54 = v69;
  v55 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
  v57 = v56;
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  *(_QWORD *)(v51 + 64) = sub_10001AA00();
  *(_QWORD *)(v51 + 32) = v55;
  *(_QWORD *)(v51 + 40) = v57;
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "#Durian: fetchFirmwareVersionFuture not found for [%@]. #Bug: command's future is missing.", 90, 2, v51);
  result = swift_bridgeObjectRelease();
  v58 = *v17;
  if (*(_QWORD *)(v58 + 16))
  {
    swift_bridgeObjectRetain(v58);
    v59 = sub_100003FB0(v54);
    if ((v60 & 1) != 0)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v59);
      swift_retain();
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10066F4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD aBlock[6];
  char v71[24];

  v66 = a3;
  v68 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v67 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v71, 0, 0);
  v17 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    swift_bridgeObjectRetain(*v15);
    v18 = sub_100003FB0(v68);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(v17 + 56);
      v64 = v9;
      v65 = v15;
      v21 = v7;
      v22 = v4;
      v23 = v8;
      v24 = v5;
      v25 = *(_QWORD *)(v20 + 8 * v18);
      swift_retain();
      swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(v25 + 80);
      swift_retain();
      v27 = v24;
      v28 = v23;
      v29 = v22;
      v30 = v21;
      v15 = v65;
      v16 = swift_release();
      if (v26)
      {
        v31 = v26;
        sub_10001F6FC();
        v63 = v28;
        (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
        v62 = static OS_dispatch_queue.global(qos:)(v14);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        v32 = swift_allocObject(&unk_101086138, 32, 7);
        v33 = v66;
        *(_QWORD *)(v32 + 16) = v66;
        *(_QWORD *)(v32 + 24) = v31;
        aBlock[4] = sub_10067CAAC;
        aBlock[5] = v32;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_101086150;
        v34 = _Block_copy(aBlock);
        swift_retain();
        v35 = swift_errorRetain(v33);
        v36 = v67;
        static DispatchQoS.unspecified.getter(v35);
        v69 = _swiftEmptyArrayStorage;
        v37 = v27;
        v38 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v40 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v39, v40, v29, v38);
        v41 = (void *)v62;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v30, v34);
        _Block_release(v34);
        swift_release();

        (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v29);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v63);
        result = swift_release();
        v43 = *v15;
        v44 = v68;
        if (!*(_QWORD *)(*v15 + 16))
          return result;
        swift_bridgeObjectRetain(*v15);
        v45 = sub_100003FB0(v44);
        if ((v46 & 1) != 0)
        {
          v47 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v45);
          swift_retain();
LABEL_13:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v47 + 80) = 0;
          swift_release();
          return swift_release();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v16 = swift_bridgeObjectRelease();
    }
  }
  v48 = static os_log_type_t.error.getter(v16);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v49 = qword_1011B7D50;
  v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v51 = swift_allocObject(v50, 72, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
  v52 = type metadata accessor for UUID(0);
  v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v54 = v68;
  v55 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
  v57 = v56;
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  *(_QWORD *)(v51 + 64) = sub_10001AA00();
  *(_QWORD *)(v51 + 32) = v55;
  *(_QWORD *)(v51 + 40) = v57;
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "#Durian: setIdentifierFuture not found for [%@]. #Bug: command's future is missing.", 83, 2, v51);
  result = swift_bridgeObjectRelease();
  v58 = *v15;
  if (*(_QWORD *)(v58 + 16))
  {
    swift_bridgeObjectRetain(v58);
    v59 = sub_100003FB0(v54);
    if ((v60 & 1) != 0)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v59);
      swift_retain();
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10066F978(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];
  _BYTE v13[15];
  char v14;

  if (a1)
  {
    v2 = swift_errorRetain(a1);
    v3 = static os_log_type_t.error.getter(v2);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v4 = qword_1011B7D50;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v13, v12);
    v7 = Error.localizedDescription.getter(v12[1], v12[2]);
    v9 = v8;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = sub_10001AA00();
    *(_QWORD *)(v6 + 32) = v7;
    *(_QWORD *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "#Durian: setObfuscatedIdentifier completed with error - %@", 58, 2, v6);
    swift_bridgeObjectRelease();
    Future.finish(error:)(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v11 = static os_log_type_t.default.getter(0);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7D50, "#Durian: setObfuscatedIdentifier completed successfully.", 56, 2, _swiftEmptyArrayStorage);
    v14 = 1;
    return Future.finish(result:)(&v14);
  }
}

uint64_t sub_10066FB18(char *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD, _QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  void (**v112)(char *, uint64_t);
  void (**v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  char *v126;
  char *v127;
  void *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  void *v137;
  id v138;
  char *v139;
  char *v140;
  uint64_t v141;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (**v173)(char *, uint64_t);
  void (**v174)(char *, uint64_t);
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(_QWORD, _QWORD, _QWORD);
  _QWORD v182[3];
  char v183[8];
  _QWORD *v184;
  void **aBlock;
  uint64_t v186;
  uint64_t (*v187)(uint64_t);
  void *v188;
  uint64_t (*v189)();
  _QWORD *v190;
  char v191[8];

  v181 = a3;
  v156 = type metadata accessor for DispatchTimeInterval(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v163 = (char *)&v143 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTime(0);
  v162 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v161 = (char *)&v143 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v164 = (char *)&v143 - v9;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v153 = (uint64_t)&v143 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for UUID(0);
  v170 = *(_QWORD *)(v175 - 8);
  v12 = __chkstk_darwin(v175);
  v160 = (char *)&v143 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v143 - v14;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v16);
  v18 = (char *)&v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for OwnedBeaconRecord(0);
  v157 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v154 = (uint64_t)&v143 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for BeaconObservation(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v152 = (char *)&v143 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v166 = (uint64_t)&v143 - v24;
  v169 = type metadata accessor for Date(0);
  v165 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v168 = (uint64_t)&v143 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for DispatchWorkItemFlags(0);
  v174 = *(void (***)(char *, uint64_t))(v180 - 8);
  __chkstk_darwin(v180);
  v178 = (char *)&v143 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for DispatchQoS(0);
  v173 = *(void (***)(char *, uint64_t))(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = type metadata accessor for DispatchQoS.QoSClass(0);
  v172 = *(_QWORD *)(v171 - 8);
  __chkstk_darwin(v171);
  v29 = (char *)&v143 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = a1;
  v30 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v191, 0, 0);
  v31 = *(_QWORD *)v30;
  if (*(_QWORD *)(*(_QWORD *)v30 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)v30);
    v32 = sub_100003FB0(a2);
    if ((v33 & 1) != 0)
    {
      v34 = a2;
      v35 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
      swift_retain();
      swift_bridgeObjectRelease();
      v176 = *(_QWORD *)(v35 + 32);
      swift_retain();
      a2 = v34;
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v176 = 0;
LABEL_6:
  v36 = *(_QWORD *)v30;
  if (*(_QWORD *)(*(_QWORD *)v30 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)v30);
    v37 = sub_100003FB0(a2);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      v41 = v181;
      if (v181)
        goto LABEL_10;
      goto LABEL_14;
    }
    v39 = a2;
    v40 = *(_QWORD *)(*(_QWORD *)(v36 + 56) + 8 * v37);
    swift_retain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v40 + 32) = 0;
    a2 = v39;
    swift_release();
    swift_release();
  }
  v41 = v181;
  if (v181)
  {
LABEL_10:
    v42 = *(_QWORD *)v30;
    v43 = *(_QWORD *)(*(_QWORD *)v30 + 16);
    v44 = swift_errorRetain(v41);
    if (v43)
    {
      swift_bridgeObjectRetain(v42);
      v45 = sub_100003FB0(a2);
      if ((v46 & 1) != 0)
      {
        v47 = a2;
        v48 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v45);
        swift_retain();
        swift_bridgeObjectRelease();
        v43 = *(_QWORD *)(v48 + 40);
        swift_retain();
        a2 = v47;
        v44 = swift_release();
      }
      else
      {
        v44 = swift_bridgeObjectRelease();
        v43 = 0;
      }
    }
    v64 = v171;
    v65 = *(_QWORD *)v30;
    if (*(_QWORD *)(*(_QWORD *)v30 + 16))
    {
      swift_bridgeObjectRetain(*(_QWORD *)v30);
      v66 = sub_100003FB0(a2);
      if ((v67 & 1) != 0)
      {
        v68 = *(_QWORD *)(*(_QWORD *)(v65 + 56) + 8 * v66);
        swift_retain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v68 + 40) = 0;
        swift_release();
        v44 = swift_release();
      }
      else
      {
        v44 = swift_bridgeObjectRelease();
      }
    }
    v69 = static os_log_type_t.error.getter(v44);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v70 = qword_1011B7D50;
    v71 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v72 = swift_allocObject(v71, 72, 7);
    *(_OWORD *)(v72 + 16) = xmmword_100E22B00;
    v73 = v181;
    swift_getErrorValue(v181, v183, v182);
    v74 = Error.localizedDescription.getter(v182[1], v182[2]);
    v76 = v75;
    *(_QWORD *)(v72 + 56) = &type metadata for String;
    *(_QWORD *)(v72 + 64) = sub_10001AA00();
    *(_QWORD *)(v72 + 32) = v74;
    *(_QWORD *)(v72 + 40) = v76;
    os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "#Durian: playSound started with error - %@", 42, 2, v72);
    swift_bridgeObjectRelease();
    sub_10001F6FC();
    v77 = v172;
    (*(void (**)(char *, _QWORD, uint64_t))(v172 + 104))(v29, enum case for DispatchQoS.QoSClass.default(_:), v64);
    v78 = (void *)static OS_dispatch_queue.global(qos:)(v29);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v64);
    v79 = (_QWORD *)swift_allocObject(&unk_101086070, 40, 7);
    v79[2] = v176;
    v79[3] = v73;
    v79[4] = v43;
    v189 = sub_10067C97C;
    v190 = v79;
    aBlock = _NSConcreteStackBlock;
    v186 = 1107296256;
    v187 = sub_100016FB8;
    v188 = &unk_101086088;
    v80 = _Block_copy(&aBlock);
    swift_errorRetain(v73);
    swift_retain();
    v81 = swift_retain();
    v82 = v177;
    static DispatchQoS.unspecified.getter(v81);
    v184 = _swiftEmptyArrayStorage;
    v83 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v84 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v85 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v86 = v178;
    v87 = v84;
    v88 = v180;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v87, v85, v180, v83);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v82, v86, v80);
    _Block_release(v80);
    swift_release();

    swift_errorRelease(v73);
    swift_release();
    v174[1](v86, v88);
    v173[1](v82, v179);
    return swift_release();
  }
LABEL_14:
  v49 = static os_log_type_t.default.getter(v41);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v149 = v15;
  v151 = v6;
  os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, qword_1011B7D50, "#Durian: playSound started.", 27, 2, _swiftEmptyArrayStorage);
  v50 = v168;
  static Date.trustedNow.getter(v168);
  v51 = v166;
  v181 = *(void (**)(_QWORD, _QWORD, _QWORD))(v170 + 16);
  v181(v166, a2, v175);
  v52 = v51 + *(int *)(v20 + 20);
  v148 = *(void (**)(uint64_t, uint64_t, uint64_t))(v165 + 16);
  v148(v52, v50, v169);
  *(_BYTE *)(v51 + *(int *)(v20 + 24)) = 25;
  v53 = a2;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v54 = qword_1011B7160;
  v55 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v56 = *(_QWORD *)(v21 + 72);
  v57 = *(unsigned __int8 *)(v21 + 80);
  v58 = (v57 + 32) & ~v57;
  v146 = v55;
  v145 = v58 + v56;
  v144 = v57 | 7;
  v59 = swift_allocObject(v55, v58 + v56, v57 | 7);
  v143 = xmmword_100E22B00;
  *(_OWORD *)(v59 + 16) = xmmword_100E22B00;
  sub_10005972C(v51, v59 + v58, type metadata accessor for BeaconObservation);
  v60 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v60);
  *((_QWORD *)&v143 - 4) = v54;
  *((_QWORD *)&v143 - 3) = v59;
  *((_QWORD *)&v143 - 2) = 0;
  *((_QWORD *)&v143 - 1) = 0;
  v147 = v61;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v143 - 3, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_10080B950(v53, (uint64_t)v18);
  swift_release();
  v62 = v158;
  v63 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v157 + 48))(v18, 1, v158);
  v150 = v53;
  if (v63 == 1)
  {
    sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F47C0);
  }
  else
  {
    v89 = v154;
    sub_1000126EC((uint64_t)v18, v154, type metadata accessor for OwnedBeaconRecord);
    v90 = v153;
    sub_10000F9B8(v89 + *(int *)(v62 + 28), v153, &qword_1010ED860);
    v91 = v170;
    v92 = v175;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v170 + 48))(v90, 1, v175) == 1)
    {
      sub_1000126B0(v89, type metadata accessor for OwnedBeaconRecord);
      sub_100004048(v90, &qword_1010ED860);
    }
    else
    {
      v93 = v149;
      (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v149, v90, v92);
      v94 = v92;
      v95 = qword_1011B7160;
      v96 = (uint64_t)v152;
      v181(v152, v93, v94);
      v148(v96 + *(int *)(v20 + 20), v168, v169);
      *(_BYTE *)(v96 + *(int *)(v20 + 24)) = 25;
      v97 = v91;
      v98 = swift_allocObject(v146, v145, v144);
      *(_OWORD *)(v98 + 16) = v143;
      v99 = sub_10005972C(v96, v98 + v58, type metadata accessor for BeaconObservation);
      __chkstk_darwin(v99);
      *((_QWORD *)&v143 - 4) = v95;
      *((_QWORD *)&v143 - 3) = v98;
      *((_QWORD *)&v143 - 2) = 0;
      *((_QWORD *)&v143 - 1) = 0;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v143 - 3, &type metadata for () + 1);
      swift_bridgeObjectRelease();
      sub_1000126B0(v96, type metadata accessor for BeaconObservation);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v93, v175);
      sub_1000126B0(v154, type metadata accessor for OwnedBeaconRecord);
    }
  }
  v100 = v180;
  sub_10001F6FC();
  v101 = v172;
  v102 = v171;
  (*(void (**)(char *, _QWORD, uint64_t))(v172 + 104))(v29, enum case for DispatchQoS.QoSClass.default(_:), v171);
  v103 = (void *)static OS_dispatch_queue.global(qos:)(v29);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v29, v102);
  v104 = swift_allocObject(&unk_101085FD0, 24, 7);
  *(_QWORD *)(v104 + 16) = v176;
  v189 = sub_10067C744;
  v190 = (_QWORD *)v104;
  aBlock = _NSConcreteStackBlock;
  v186 = 1107296256;
  v187 = sub_100016FB8;
  v188 = &unk_101085FE8;
  v105 = _Block_copy(&aBlock);
  v106 = swift_retain();
  v107 = v177;
  static DispatchQoS.unspecified.getter(v106);
  v184 = _swiftEmptyArrayStorage;
  v108 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v109 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v110 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v111 = v178;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v109, v110, v100, v108);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v107, v111, v105);
  _Block_release(v105);

  v112 = (void (**)(char *, uint64_t))v174[1];
  ((void (*)(char *, uint64_t))v112)(v111, v100);
  v113 = (void (**)(char *, uint64_t))v173[1];
  ((void (*)(char *, uint64_t))v113)(v107, v179);
  v114 = swift_release();
  v115 = *(_QWORD *)v30;
  v116 = *(_QWORD *)(*(_QWORD *)v30 + 16);
  v172 = v108;
  v171 = v109;
  v158 = v110;
  v174 = v112;
  v173 = v113;
  if (v116)
  {
    swift_bridgeObjectRetain(v115);
    v117 = v150;
    v118 = sub_100003FB0(v150);
    v119 = v151;
    if ((v120 & 1) != 0)
    {
      v121 = *(_QWORD *)(*(_QWORD *)(v115 + 56) + 8 * v118);
      swift_retain();
      swift_bridgeObjectRelease();
      v122 = *(_QWORD *)(v121 + 40);
      swift_retain();
      v114 = swift_release();
    }
    else
    {
      v114 = swift_bridgeObjectRelease();
      v122 = 0;
    }
  }
  else
  {
    v122 = 0;
    v119 = v151;
    v117 = v150;
  }
  v123 = v156;
  v124 = v155;
  v125 = v161;
  static DispatchTime.now()(v114);
  v126 = v163;
  *(_QWORD *)v163 = 40;
  (*(void (**)(char *, _QWORD, uint64_t))(v124 + 104))(v126, enum case for DispatchTimeInterval.seconds(_:), v123);
  v127 = v164;
  + infix(_:_:)(v125, v126);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v126, v123);
  v163 = *(char **)(v162 + 8);
  ((void (*)(char *, uint64_t))v163)(v125, v119);
  v128 = v167;
  v162 = *(_QWORD *)&v167[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  v129 = v160;
  v130 = v119;
  v131 = v175;
  v181(v160, v117, v175);
  v132 = v170;
  v133 = *(unsigned __int8 *)(v170 + 80);
  v134 = (v133 + 24) & ~v133;
  v135 = (v159 + v134 + 7) & 0xFFFFFFFFFFFFFFF8;
  v136 = swift_allocObject(&unk_101086020, v135 + 8, v133 | 7);
  *(_QWORD *)(v136 + 16) = v128;
  (*(void (**)(uint64_t, char *, uint64_t))(v132 + 32))(v136 + v134, v129, v131);
  *(_QWORD *)(v136 + v135) = v122;
  v189 = sub_10067C938;
  v190 = (_QWORD *)v136;
  aBlock = _NSConcreteStackBlock;
  v186 = 1107296256;
  v187 = sub_100016FB8;
  v188 = &unk_101086038;
  v137 = _Block_copy(&aBlock);
  swift_retain();
  v138 = v128;
  v139 = v177;
  static DispatchQoS.unspecified.getter(v138);
  v184 = _swiftEmptyArrayStorage;
  v140 = v178;
  v141 = v180;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v184, v171, v158, v180, v172);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v127, v139, v140, v137);
  _Block_release(v137);
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t))v174)(v140, v141);
  ((void (*)(char *, uint64_t))v173)(v139, v179);
  ((void (*)(char *, uint64_t))v163)(v127, v130);
  sub_1000126B0(v166, type metadata accessor for BeaconObservation);
  (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v168, v169);
  return swift_release();
}

void sub_100670C68(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD aBlock[6];
  _QWORD *v48;
  char v49[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v46 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v49, 0, 0);
  v16 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    swift_bridgeObjectRetain(*v15);
    v17 = sub_100003FB0(a2);
    if ((v18 & 1) != 0)
    {
      v19 = *(_QWORD *)(v16 + 56);
      v42 = v6;
      v20 = *(_QWORD *)(v19 + 8 * v17);
      swift_retain();
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v20 + 40);
      swift_retain();
      v22 = v21;
      swift_release();
      if (v21)
      {
        aBlock[0] = v21;
        if (a3)
        {
          v48 = a3;
          v23 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
          v24 = sub_1000193A4((unint64_t *)&unk_101102FA0, (uint64_t *)&unk_1010F4790, (const char *)&protocol conformance descriptor for Future<A>);
          swift_retain_n(v22, 2);
          LOBYTE(v24) = dispatch thunk of static Equatable.== infix(_:_:)(aBlock, &v48, v23, v24);
          swift_release();
          v25 = swift_release();
          if ((v24 & 1) != 0)
          {
            v26 = static os_log_type_t.error.getter(v25);
            if (qword_1010EA270 != -1)
              swift_once(&qword_1010EA270, sub_100B5DAF0);
            os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7D50, "#Durian: Finished waiting to play sound to complete. #Bug: CL should have completed.", 84, 2, _swiftEmptyArrayStorage);
            v27 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
            v28 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
            *v27 = 0;
            v27[1] = 0;
            swift_unknownObjectRelease(v28);
            v29 = *v15;
            if (*(_QWORD *)(*v15 + 16))
            {
              swift_bridgeObjectRetain(*v15);
              v30 = sub_100003FB0(a2);
              if ((v31 & 1) != 0)
              {
                v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
                swift_retain();
                swift_bridgeObjectRelease();
                *(_QWORD *)(v32 + 40) = 0;
                swift_release();
                swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            sub_10001F6FC();
            (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
            v33 = (void *)static OS_dispatch_queue.global(qos:)(v14);
            (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
            aBlock[4] = sub_100677D08;
            aBlock[5] = v22;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = sub_100016FB8;
            aBlock[3] = &unk_1010860B0;
            v34 = _Block_copy(aBlock);
            v35 = swift_retain();
            static DispatchQoS.unspecified.getter(v35);
            v48 = _swiftEmptyArrayStorage;
            v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v39 = v45;
            v40 = v42;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v37, v38, v42, v36);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v39, v34);
            _Block_release(v34);
            swift_release();

            (*(void (**)(char *, uint64_t))(v46 + 8))(v39, v40);
            (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
          }
        }
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_1006710B0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  type metadata accessor for CommandError(0);
  v1 = v0;
  v5 = 2;
  v2 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v3 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  _BridgedStoredNSError.init(_:userInfo:)(&v6, &v5, v2, v1, v3);
  v4 = v6;
  Future.finish(error:)(v6);

}

uint64_t sub_10067114C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  _BYTE v27[24];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v4);
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for WildModeAssociationRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = *(void **)(v2 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue);
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
    swift_beginAccess(v2 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v27, 0, 0);
    v19 = *v18;
    if (*(_QWORD *)(v19 + 16))
    {
      swift_bridgeObjectRetain(v19);
      v20 = sub_100003FB0(a1);
      if ((v21 & 1) != 0)
      {
        v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
        swift_retain();
        swift_bridgeObjectRelease();
        v23 = *(_QWORD *)(v22 + 16);
        v24 = *(_BYTE *)(v22 + 24);
        swift_release();
        if ((v24 & 1) == 0 && v23 == 2)
        {
          swift_retain();
          sub_10081C0CC(a1, (uint64_t)v6);
          swift_release();
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
          {
            sub_100004048((uint64_t)v6, &qword_101102FB0);
          }
          else
          {
            sub_1000126EC((uint64_t)v6, (uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
            v25 = v10[*(int *)(v7 + 52)];
            sub_1000126B0((uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
            if (v25 == 1)
              return 1;
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006713A4(char *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  BOOL v55;
  uint64_t v56;
  void **v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  void **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  void **v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  void *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  unint64_t v135;
  void *v136;
  id v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  void (*v142)(char *, uint64_t);
  _QWORD v144[2];
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  _QWORD *v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t (*v167)(_QWORD, _QWORD, _QWORD);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD v177[3];
  char v178[8];
  uint64_t v179;
  void **aBlock;
  uint64_t v181;
  uint64_t (*v182)(uint64_t);
  void *v183;
  uint64_t (*v184)();
  _QWORD *v185;
  char v186[8];

  v167 = a3;
  v156 = type metadata accessor for DispatchTimeInterval(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v153 = (_QWORD *)((char *)v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for DispatchTime(0);
  v154 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v157 = (char *)v144 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v164 = (char *)v144 - v9;
  v149 = type metadata accessor for BeaconObservation(0);
  v150 = *(_QWORD *)(v149 - 8);
  __chkstk_darwin(v149);
  v162 = (uint64_t)v144 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for Date(0);
  v161 = *(_QWORD *)(v163 - 8);
  __chkstk_darwin(v163);
  v159 = (uint64_t)v144 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for DispatchWorkItemFlags(0);
  v172 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v13 = (char *)v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v171 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)v144 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for DispatchQoS.QoSClass(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = (_QWORD *)type metadata accessor for UUID(0);
  v18 = *(v158 - 1);
  v19 = __chkstk_darwin(v158);
  v152 = (char *)v144 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)v144 - v22;
  v151 = v24;
  __chkstk_darwin(v21);
  v26 = (char *)v144 - v25;
  v160 = a1;
  v27 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v186, 0, 0);
  v28 = *(_QWORD *)v27;
  v29 = *(_QWORD *)(*(_QWORD *)v27 + 16);
  v176 = a2;
  v174 = v14;
  v148 = v23;
  if (v29)
  {
    swift_bridgeObjectRetain(v28);
    v30 = sub_100003FB0(a2);
    if ((v31 & 1) != 0)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v30);
      swift_retain();
      swift_bridgeObjectRelease();
      v33 = *(_QWORD *)(v32 + 32);
      swift_retain();
      a2 = v176;
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v33 = 0;
LABEL_6:
  v34 = *(_QWORD *)v27;
  if (*(_QWORD *)(*(_QWORD *)v27 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)v27);
    v35 = sub_100003FB0(a2);
    if ((v36 & 1) != 0)
    {
      v37 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v35);
      swift_retain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v37 + 32) = 0;
      a2 = v176;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v38 = *(_QWORD *)v27;
  if (*(_QWORD *)(*(_QWORD *)v27 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)v27);
    v39 = sub_100003FB0(a2);
    if ((v40 & 1) != 0)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
      swift_retain();
      swift_bridgeObjectRelease();
      v173 = *(_QWORD *)(v41 + 40);
      swift_retain();
      a2 = v176;
      swift_release();
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
  }
  v173 = 0;
LABEL_15:
  v42 = v167;
  if (v167)
  {
    v43 = *(_QWORD *)v27;
    v44 = *(_QWORD *)(*(_QWORD *)v27 + 16);
    swift_errorRetain(v167);
    if (v44)
    {
      swift_bridgeObjectRetain(v43);
      v45 = sub_100003FB0(a2);
      if ((v46 & 1) != 0)
      {
        v47 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v45);
        swift_retain();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v47 + 40) = 0;
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    if (qword_1010EA320 != -1)
      swift_once(&qword_1010EA320, sub_100B5E35C);
    v62 = type metadata accessor for Logger(0);
    sub_10001A9E8(v62, (uint64_t)qword_1011B7E10);
    swift_errorRetain(v42);
    v63 = swift_errorRetain(v42);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = (void **)swift_slowAlloc(32, -1);
      aBlock = v67;
      *(_DWORD *)v66 = 136446210;
      v165 = v33;
      v166 = v16;
      swift_getErrorValue(v42, v178, v177);
      v68 = Error.localizedDescription.getter(v177[1], v177[2]);
      v179 = sub_100016940(v68, v69, (uint64_t *)&aBlock);
      v16 = v166;
      v33 = v165;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v42);
      swift_errorRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "#Durian: Unauthorized playSound started with error - %{public}s", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      swift_errorRelease(v42);
      swift_errorRelease(v42);
    }

    sub_10001F6FC();
    v70 = v169;
    v71 = v168;
    v72 = v170;
    (*(void (**)(char *, _QWORD, uint64_t))(v169 + 104))(v168, enum case for DispatchQoS.QoSClass.default(_:), v170);
    v73 = (void *)static OS_dispatch_queue.global(qos:)(v71);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v71, v72);
    v74 = (_QWORD *)swift_allocObject(&unk_101085EE0, 40, 7);
    v74[2] = v33;
    v74[3] = v42;
    v74[4] = v173;
    v184 = sub_10067CEE0;
    v185 = v74;
    aBlock = _NSConcreteStackBlock;
    v181 = 1107296256;
    v182 = sub_100016FB8;
    v183 = &unk_101085EF8;
    v75 = _Block_copy(&aBlock);
    swift_errorRetain(v42);
    swift_retain();
    v76 = swift_retain();
    static DispatchQoS.unspecified.getter(v76);
    v179 = (uint64_t)_swiftEmptyArrayStorage;
    v77 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v78 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v79 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v80 = v78;
    v81 = v175;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v80, v79, v175, v77);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v75);
    _Block_release(v75);

    swift_errorRelease(v42);
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v13, v81);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v16, v174);
  }
  else
  {
    v166 = v16;
    v165 = v33;
    if (qword_1010EA320 != -1)
      swift_once(&qword_1010EA320, sub_100B5E35C);
    v48 = type metadata accessor for Logger(0);
    v49 = sub_10001A9E8(v48, (uint64_t)qword_1011B7E10);
    v50 = v158;
    v167 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v18 + 16);
    v51 = v167(v26, a2, v158);
    v144[1] = v49;
    v52 = Logger.logObject.getter(v51);
    v53 = v18;
    v54 = static os_log_type_t.default.getter(v52);
    v55 = os_log_type_enabled(v52, v54);
    v147 = v13;
    v146 = v6;
    v145 = v53;
    if (v55)
    {
      v56 = swift_slowAlloc(22, -1);
      v57 = (void **)swift_slowAlloc(32, -1);
      *(_DWORD *)v56 = 141558275;
      v179 = 1752392040;
      aBlock = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v56 + 4, v56 + 12);
      *(_WORD *)(v56 + 12) = 2081;
      v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v50, v58);
      v179 = sub_100016940(v59, v60, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v56 + 14, v56 + 22);
      swift_bridgeObjectRelease();
      v144[0] = *(_QWORD *)(v53 + 8);
      ((void (*)(char *, _QWORD *))v144[0])(v26, v50);
      _os_log_impl((void *)&_mh_execute_header, v52, v54, "#Durian: Unauthorized playSound started for %{private,mask.hash}s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      v61 = v57;
      a2 = v176;
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      v144[0] = *(_QWORD *)(v53 + 8);
      ((void (*)(char *, _QWORD *))v144[0])(v26, v50);
    }

    v82 = v174;
    v83 = v159;
    static Date.trustedNow.getter(v159);
    v84 = v162;
    v167(v162, a2, v50);
    v85 = v149;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v161 + 16))(v84 + *(int *)(v149 + 20), v83, v163);
    *(_BYTE *)(v84 + *(int *)(v85 + 24)) = 25;
    v86 = a2;
    v87 = v166;
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v88 = qword_1011B7160;
    v89 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v90 = *(unsigned __int8 *)(v150 + 80);
    v91 = (v90 + 32) & ~v90;
    v92 = swift_allocObject(v89, v91 + *(_QWORD *)(v150 + 72), v90 | 7);
    *(_OWORD *)(v92 + 16) = xmmword_100E22B00;
    sub_10005972C(v84, v92 + v91, type metadata accessor for BeaconObservation);
    v93 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v93);
    v144[-4] = v88;
    v144[-3] = v92;
    v144[-2] = 0;
    v144[-1] = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v144[-6], &type metadata for () + 1);
    swift_bridgeObjectRelease();
    sub_10001F6FC();
    v94 = v169;
    v95 = v168;
    v96 = v170;
    (*(void (**)(char *, _QWORD, uint64_t))(v169 + 104))(v168, enum case for DispatchQoS.QoSClass.default(_:), v170);
    v97 = (void *)static OS_dispatch_queue.global(qos:)(v95);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v95, v96);
    v98 = swift_allocObject(&unk_101085E40, 24, 7);
    *(_QWORD *)(v98 + 16) = v165;
    v184 = sub_10067C744;
    v185 = (_QWORD *)v98;
    aBlock = _NSConcreteStackBlock;
    v181 = 1107296256;
    v182 = sub_100016FB8;
    v183 = &unk_101085E58;
    v99 = _Block_copy(&aBlock);
    v100 = swift_retain();
    static DispatchQoS.unspecified.getter(v100);
    v179 = (uint64_t)_swiftEmptyArrayStorage;
    v101 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v102 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v103 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v104 = v147;
    v169 = v102;
    v105 = v102;
    v168 = (char *)v103;
    v106 = v175;
    v170 = v101;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v105, v103, v175, v101);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v87, v104, v99);
    _Block_release(v99);

    v172 = *(_QWORD *)(v172 + 8);
    ((void (*)(char *, uint64_t))v172)(v104, v106);
    v171 = *(_QWORD *)(v171 + 8);
    ((void (*)(char *, uint64_t))v171)(v87, v82);
    swift_release();
    v107 = sub_10067114C(v86);
    if ((v107 & 1) != 0)
    {
      v108 = v148;
      v109 = v167(v148, v86, v50);
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.default.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        v112 = swift_slowAlloc(32, -1);
        v113 = (void **)swift_slowAlloc(32, -1);
        *(_DWORD *)v112 = 141558531;
        v179 = 1752392040;
        aBlock = v113;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v112 + 4, v112 + 12);
        *(_WORD *)(v112 + 12) = 2081;
        v114 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v115 = dispatch thunk of CustomStringConvertible.description.getter(v158, v114);
        v179 = sub_100016940(v115, v116, (uint64_t *)&aBlock);
        v50 = v158;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v112 + 14, v112 + 22);
        swift_bridgeObjectRelease();
        ((void (*)(char *, _QWORD *))v144[0])(v108, v50);
        *(_WORD *)(v112 + 22) = 2048;
        v117 = 14;
        v179 = 14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v179, &aBlock, v112 + 24, v112 + 32);
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "#Durian: Forcing play sound complete future for %{private,mask.hash}s in %ld seconds.", (uint8_t *)v112, 0x20u);
        swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v113, -1, -1);
        swift_slowDealloc(v112, -1, -1);

        v149 = 0;
        v150 = 0;
      }
      else
      {
        ((void (*)(char *, _QWORD *))v144[0])(v108, v50);

        v149 = 0;
        v150 = 0;
        v117 = 14;
      }
    }
    else
    {
      v150 = 0x8000000100EDF260;
      v149 = 0xD00000000000001FLL;
      v117 = 40;
    }
    v118 = v146;
    v119 = v157;
    static DispatchTime.now()(v107);
    v120 = v153;
    *v153 = v117;
    v121 = v155;
    v122 = v156;
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(v155 + 104))(v120, enum case for DispatchTimeInterval.seconds(_:), v156);
    v123 = v164;
    + infix(_:_:)(v119, v120);
    (*(void (**)(uint64_t *, uint64_t))(v121 + 8))(v120, v122);
    v124 = v154;
    v158 = *(_QWORD **)(v154 + 8);
    ((void (*)(char *, uint64_t))v158)(v119, v118);
    v125 = v160;
    v156 = *(_QWORD *)&v160[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
    (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v119, v123, v118);
    v126 = v152;
    v167(v152, v176, v50);
    v127 = v145;
    v128 = *(unsigned __int8 *)(v145 + 80);
    v129 = v50;
    v130 = (v128 + 24) & ~v128;
    v131 = (v151 + v130 + 7) & 0xFFFFFFFFFFFFFFF8;
    v132 = (v131 + 15) & 0xFFFFFFFFFFFFFFF8;
    v133 = swift_allocObject(&unk_101085E90, v132 + 16, v128 | 7);
    *(_QWORD *)(v133 + 16) = v125;
    (*(void (**)(uint64_t, char *, _QWORD *))(v127 + 32))(v133 + v130, v126, v129);
    *(_QWORD *)(v133 + v131) = v173;
    v134 = (uint64_t *)(v133 + v132);
    v135 = v150;
    *v134 = v149;
    v134[1] = v135;
    v184 = sub_10067C894;
    v185 = (_QWORD *)v133;
    aBlock = _NSConcreteStackBlock;
    v181 = 1107296256;
    v182 = sub_100016FB8;
    v183 = &unk_101085EA8;
    v136 = _Block_copy(&aBlock);
    swift_retain();
    v137 = v125;
    v138 = v166;
    static DispatchQoS.unspecified.getter(v137);
    v179 = (uint64_t)_swiftEmptyArrayStorage;
    v139 = v147;
    v140 = v175;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v179, v169, v168, v175, v170);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v119, v138, v139, v136);
    _Block_release(v136);
    swift_release();
    swift_release();
    ((void (*)(char *, uint64_t))v172)(v139, v140);
    ((void (*)(char *, uint64_t))v171)(v138, v174);
    v141 = v119;
    v142 = (void (*)(char *, uint64_t))v158;
    ((void (*)(char *, uint64_t))v158)(v141, v118);
    v142(v164, v118);
    sub_1000126B0(v162, type metadata accessor for BeaconObservation);
    (*(void (**)(uint64_t, uint64_t))(v161 + 8))(v159, v163);
  }
  return swift_release();
}

void sub_100672600(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint8_t *v33;
  uint64_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v37;
  unint64_t v38;
  os_log_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint8_t *v58;
  uint8_t *v59;
  int v60;
  uint64_t v61;
  os_log_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t aBlock[6];
  _QWORD *v72;
  _BYTE v73[32];

  v69 = a4;
  v70 = a5;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v67 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v65 = *(_QWORD *)(v10 - 8);
  v66 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v73, 0, 0);
  v18 = *v17;
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(*v17);
    v19 = sub_100003FB0(a2);
    if ((v20 & 1) != 0)
    {
      v21 = *(_QWORD *)(v18 + 56);
      v64 = v8;
      v22 = *(_QWORD *)(v21 + 8 * v19);
      swift_retain();
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v22 + 40);
      swift_retain();
      swift_release();
      if (v23)
      {
        aBlock[0] = v23;
        if (a3)
        {
          v72 = a3;
          v24 = v23;
          v25 = sub_10001A9A8((uint64_t *)&unk_1010F4790);
          v26 = sub_1000193A4((unint64_t *)&unk_101102FA0, (uint64_t *)&unk_1010F4790, (const char *)&protocol conformance descriptor for Future<A>);
          swift_retain_n(v24, 2);
          LOBYTE(v26) = dispatch thunk of static Equatable.== infix(_:_:)(aBlock, &v72, v25, v26);
          swift_release();
          swift_release();
          if ((v26 & 1) != 0)
          {
            v63 = v24;
            if (qword_1010EA320 != -1)
              swift_once(&qword_1010EA320, sub_100B5E35C);
            v27 = type metadata accessor for Logger(0);
            sub_10001A9E8(v27, (uint64_t)qword_1011B7E10);
            v28 = v70;
            swift_bridgeObjectRetain_n(v70, 2);
            v30 = Logger.logObject.getter(v29);
            v31 = static os_log_type_t.error.getter(v30);
            v32 = v31;
            if (os_log_type_enabled(v30, v31))
            {
              v62 = v30;
              v33 = (uint8_t *)swift_slowAlloc(12, -1);
              v34 = swift_slowAlloc(32, -1);
              v61 = v34;
              v35 = v33;
              v59 = v33;
              *(_DWORD *)v33 = 136315138;
              v36 = v33 + 12;
              aBlock[0] = v34;
              if (v70)
                v37 = v69;
              else
                v37 = 0;
              v60 = v32;
              if (v70)
                v38 = v70;
              else
                v38 = 0xE000000000000000;
              v58 = v35 + 4;
              swift_bridgeObjectRetain(v70);
              v72 = (_QWORD *)sub_100016940(v37, v38, aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v73, v58, v36);
              swift_bridgeObjectRelease_n(v70, 2);
              swift_bridgeObjectRelease();
              v39 = v62;
              v40 = v59;
              _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v60, "#Durian: Finished waiting for Unauthorized play sound to complete. %s", v59, 0xCu);
              v41 = v61;
              swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
              v42 = v41;
              v28 = v70;
              swift_slowDealloc(v42, -1, -1);
              swift_slowDealloc(v40, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v28, 2);
            }
            v43 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
            v44 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
            *v43 = 0;
            v43[1] = 0;
            swift_unknownObjectRelease(v44);
            v45 = *v17;
            if (*(_QWORD *)(*v17 + 16))
            {
              swift_bridgeObjectRetain(*v17);
              v46 = sub_100003FB0(a2);
              if ((v47 & 1) != 0)
              {
                v48 = *(_QWORD *)(*(_QWORD *)(v45 + 56) + 8 * v46);
                swift_retain();
                swift_bridgeObjectRelease();
                *(_QWORD *)(v48 + 40) = 0;
                v28 = v70;
                swift_release();
                swift_release();
              }
              else
              {
                swift_bridgeObjectRelease();
              }
            }
            sub_10001F6FC();
            (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
            v49 = (void *)static OS_dispatch_queue.global(qos:)(v16);
            (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
            v50 = (_QWORD *)swift_allocObject(&unk_101085F30, 40, 7);
            v50[2] = v69;
            v50[3] = v28;
            v50[4] = v63;
            aBlock[4] = (uint64_t)sub_10067C8D0;
            aBlock[5] = (uint64_t)v50;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            aBlock[2] = (uint64_t)sub_100016FB8;
            aBlock[3] = (uint64_t)&unk_101085F48;
            v51 = _Block_copy(aBlock);
            swift_retain();
            swift_bridgeObjectRetain(v28);
            static DispatchQoS.unspecified.getter(v52);
            v72 = _swiftEmptyArrayStorage;
            v53 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v54 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v55 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v56 = v67;
            v57 = v64;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v72, v54, v55, v64, v53);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v56, v51);
            _Block_release(v51);
            swift_release();

            (*(void (**)(char *, uint64_t))(v68 + 8))(v56, v57);
            (*(void (**)(char *, uint64_t))(v65 + 8))(v12, v66);
          }
        }
        swift_release();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_100672BD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  if (a2)
  {
    type metadata accessor for CommandError(0);
    v3 = v2;
    v7 = 2;
    v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v5 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
    v6 = v8;
    Future.finish(error:)(v8);

  }
  else
  {
    LOBYTE(v8) = 1;
    Future.finish(result:)(&v8);
  }
}

uint64_t sub_100672C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  char v74[8];
  _QWORD *v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)();
  _QWORD *v81;
  char v82[32];

  v72 = type metadata accessor for DispatchWorkItemFlags(0);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v69 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(v13, v82, 0, 0);
  v15 = *v13;
  if (*(_QWORD *)(*v13 + 16))
  {
    swift_bridgeObjectRetain(*v13);
    v16 = sub_100003FB0(a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v18 + 40);
      swift_retain();
      v14 = swift_release();
      goto LABEL_6;
    }
    v14 = swift_bridgeObjectRelease();
  }
  v19 = 0;
LABEL_6:
  v20 = *v13;
  if (!*(_QWORD *)(*v13 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain(*v13);
  v21 = sub_100003FB0(a2);
  if ((v22 & 1) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
    swift_retain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v23 + 40) = 0;
    swift_release();
    v14 = swift_release();
LABEL_9:
    if (a3)
      goto LABEL_10;
    goto LABEL_14;
  }
  v14 = swift_bridgeObjectRelease();
  if (a3)
  {
LABEL_10:
    v66 = v19;
    v24 = *v13;
    v25 = *(_QWORD *)(*v13 + 16);
    v26 = swift_errorRetain(a3);
    if (v25)
    {
      swift_bridgeObjectRetain(v24);
      v27 = sub_100003FB0(a2);
      if ((v28 & 1) != 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v27);
        swift_retain();
        swift_bridgeObjectRelease();
        v30 = *(_QWORD *)(v29 + 32);
        swift_retain();
        v26 = swift_release();
LABEL_19:
        v43 = *v13;
        if (*(_QWORD *)(*v13 + 16))
        {
          swift_bridgeObjectRetain(*v13);
          v44 = sub_100003FB0(a2);
          if ((v45 & 1) != 0)
          {
            v46 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v44);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v46 + 32) = 0;
            swift_release();
            v26 = swift_release();
          }
          else
          {
            v26 = swift_bridgeObjectRelease();
          }
        }
        v67 = v8;
        v47 = static os_log_type_t.error.getter(v26);
        if (qword_1010EA270 != -1)
          swift_once(&qword_1010EA270, sub_100B5DAF0);
        v48 = qword_1011B7D50;
        v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v50 = swift_allocObject(v49, 72, 7);
        *(_OWORD *)(v50 + 16) = xmmword_100E22B00;
        swift_getErrorValue(a3, v74, v73);
        v51 = Error.localizedDescription.getter(v73[1], v73[2]);
        v53 = v52;
        *(_QWORD *)(v50 + 56) = &type metadata for String;
        *(_QWORD *)(v50 + 64) = sub_10001AA00();
        *(_QWORD *)(v50 + 32) = v51;
        *(_QWORD *)(v50 + 40) = v53;
        os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "#Durian: Unauthorized playSound completed with error - %@", 57, 2, v50);
        swift_bridgeObjectRelease();
        sub_10001F6FC();
        (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
        v54 = (void *)static OS_dispatch_queue.global(qos:)(v12);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        v55 = (_QWORD *)swift_allocObject(&unk_101085DA0, 40, 7);
        v55[2] = v30;
        v55[3] = a3;
        v55[4] = v66;
        v80 = sub_10067CEE0;
        v81 = v55;
        aBlock = _NSConcreteStackBlock;
        v77 = 1107296256;
        v78 = sub_100016FB8;
        v79 = &unk_101085DB8;
        v56 = _Block_copy(&aBlock);
        swift_errorRetain(a3);
        swift_retain();
        v57 = swift_retain();
        v58 = v67;
        static DispatchQoS.unspecified.getter(v57);
        v75 = _swiftEmptyArrayStorage;
        v59 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v60 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v61 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v62 = v69;
        v63 = v60;
        v64 = v72;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v63, v61, v72, v59);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v58, v62, v56);
        _Block_release(v56);

        swift_errorRelease(a3);
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v62, v64);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v58, v71);
        return swift_release();
      }
      v26 = swift_bridgeObjectRelease();
    }
    v30 = 0;
    goto LABEL_19;
  }
LABEL_14:
  v31 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B7D50, "#Durian: Unauthorized playSound completed.", 42, 2, _swiftEmptyArrayStorage);
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v32 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v33 = swift_allocObject(&unk_101085D50, 24, 7);
  *(_QWORD *)(v33 + 16) = v19;
  v80 = sub_10067C744;
  v81 = (_QWORD *)v33;
  aBlock = _NSConcreteStackBlock;
  v77 = 1107296256;
  v78 = sub_100016FB8;
  v79 = &unk_101085D68;
  v34 = _Block_copy(&aBlock);
  v35 = swift_retain();
  static DispatchQoS.unspecified.getter(v35);
  v75 = _swiftEmptyArrayStorage;
  v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = v8;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v40 = v69;
  v41 = v38;
  v42 = v72;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v41, v39, v72, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v40, v34);
  _Block_release(v34);
  swift_release();

  (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v42);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v37, v71);
  return swift_release();
}

uint64_t sub_100673398(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  char v74[8];
  _QWORD *v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)();
  _QWORD *v81;
  char v82[32];

  v72 = type metadata accessor for DispatchWorkItemFlags(0);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v69 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a1;
  v13 = &a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers];
  swift_beginAccess(&a1[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers], v82, 0, 0);
  v15 = *(_QWORD *)v13;
  if (*(_QWORD *)(*(_QWORD *)v13 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)v13);
    v16 = sub_100003FB0(a2);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v18 + 40);
      swift_retain();
      v14 = swift_release();
      goto LABEL_6;
    }
    v14 = swift_bridgeObjectRelease();
  }
  v19 = 0;
LABEL_6:
  v20 = *(_QWORD *)v13;
  if (!*(_QWORD *)(*(_QWORD *)v13 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain(*(_QWORD *)v13);
  v21 = sub_100003FB0(a2);
  if ((v22 & 1) != 0)
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
    swift_retain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v23 + 40) = 0;
    swift_release();
    v14 = swift_release();
LABEL_9:
    if (a3)
      goto LABEL_10;
    goto LABEL_14;
  }
  v14 = swift_bridgeObjectRelease();
  if (a3)
  {
LABEL_10:
    v66 = v19;
    v24 = *(_QWORD *)v13;
    v25 = *(_QWORD *)(*(_QWORD *)v13 + 16);
    v26 = swift_errorRetain(a3);
    if (v25)
    {
      swift_bridgeObjectRetain(v24);
      v27 = sub_100003FB0(a2);
      if ((v28 & 1) != 0)
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v27);
        swift_retain();
        swift_bridgeObjectRelease();
        v30 = *(_QWORD *)(v29 + 32);
        swift_retain();
        v26 = swift_release();
LABEL_19:
        v43 = *(_QWORD *)v13;
        if (*(_QWORD *)(*(_QWORD *)v13 + 16))
        {
          swift_bridgeObjectRetain(*(_QWORD *)v13);
          v44 = sub_100003FB0(a2);
          if ((v45 & 1) != 0)
          {
            v46 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v44);
            swift_retain();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v46 + 32) = 0;
            swift_release();
            v26 = swift_release();
          }
          else
          {
            v26 = swift_bridgeObjectRelease();
          }
        }
        v67 = v8;
        v47 = static os_log_type_t.error.getter(v26);
        if (qword_1010EA270 != -1)
          swift_once(&qword_1010EA270, sub_100B5DAF0);
        v48 = qword_1011B7D50;
        v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v50 = swift_allocObject(v49, 72, 7);
        *(_OWORD *)(v50 + 16) = xmmword_100E22B00;
        swift_getErrorValue(a3, v74, v73);
        v51 = Error.localizedDescription.getter(v73[1], v73[2]);
        v53 = v52;
        *(_QWORD *)(v50 + 56) = &type metadata for String;
        *(_QWORD *)(v50 + 64) = sub_10001AA00();
        *(_QWORD *)(v50 + 32) = v51;
        *(_QWORD *)(v50 + 40) = v53;
        os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "#Durian: playSound completed with error - %@", 44, 2, v50);
        swift_bridgeObjectRelease();
        sub_10001F6FC();
        (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
        v54 = (void *)static OS_dispatch_queue.global(qos:)(v12);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        v55 = (_QWORD *)swift_allocObject(&unk_101085CB0, 40, 7);
        v55[2] = v30;
        v55[3] = a3;
        v55[4] = v66;
        v80 = sub_10067CEE0;
        v81 = v55;
        aBlock = _NSConcreteStackBlock;
        v77 = 1107296256;
        v78 = sub_100016FB8;
        v79 = &unk_101085CC8;
        v56 = _Block_copy(&aBlock);
        swift_errorRetain(a3);
        swift_retain();
        v57 = swift_retain();
        v58 = v67;
        static DispatchQoS.unspecified.getter(v57);
        v75 = _swiftEmptyArrayStorage;
        v59 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v60 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v61 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v62 = v69;
        v63 = v60;
        v64 = v72;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v63, v61, v72, v59);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v58, v62, v56);
        _Block_release(v56);

        swift_errorRelease(a3);
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v70 + 8))(v62, v64);
        (*(void (**)(char *, uint64_t))(v68 + 8))(v58, v71);
        return swift_release();
      }
      v26 = swift_bridgeObjectRelease();
    }
    v30 = 0;
    goto LABEL_19;
  }
LABEL_14:
  v31 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B7D50, "#Durian: playSound completed.", 29, 2, _swiftEmptyArrayStorage);
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v32 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v33 = swift_allocObject(&unk_101085C60, 24, 7);
  *(_QWORD *)(v33 + 16) = v19;
  v80 = sub_10067C744;
  v81 = (_QWORD *)v33;
  aBlock = _NSConcreteStackBlock;
  v77 = 1107296256;
  v78 = sub_100016FB8;
  v79 = &unk_101085C78;
  v34 = _Block_copy(&aBlock);
  v35 = swift_retain();
  static DispatchQoS.unspecified.getter(v35);
  v75 = _swiftEmptyArrayStorage;
  v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = v8;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v40 = v69;
  v41 = v38;
  v42 = v72;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v41, v39, v72, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v37, v40, v34);
  _Block_release(v34);

  (*(void (**)(char *, uint64_t))(v70 + 8))(v40, v42);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v37, v71);
  swift_release();
  sub_1006691B4(a2);
  return swift_release();
}

uint64_t sub_100673AC0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
    result = Future.finish(error:)(a2);
  if (a3)
    return Future.finish(error:)(a2);
  return result;
}

uint64_t sub_100673B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t);
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  _QWORD v109[3];
  char v110[8];
  _QWORD *v111;
  void **aBlock;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  void *v115;
  void *v116;
  uint64_t v117;
  char v118[16];

  v95 = a3;
  v5 = type metadata accessor for BeaconObservation(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  *(_QWORD *)&v107 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DispatchWorkItemFlags(0);
  v104 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v103 = (char *)&v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for DispatchQoS(0);
  v102 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v101 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DispatchQoS.QoSClass(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v11 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = a1;
  v12 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v118, 0, 0);
  v13 = *v12;
  if (*(_QWORD *)(*v12 + 16))
  {
    swift_bridgeObjectRetain(*v12);
    v14 = sub_100003FB0(a2);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
      swift_retain();
      swift_bridgeObjectRelease();
      v108 = *(_QWORD *)(v16 + 48);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v108 = 0;
LABEL_6:
  v17 = *v12;
  if (*(_QWORD *)(*v12 + 16))
  {
    swift_bridgeObjectRetain(*v12);
    v18 = sub_100003FB0(a2);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
      swift_retain();
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v20 + 32);
      swift_retain();
      swift_release();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  v21 = 0;
LABEL_11:
  v22 = *v12;
  if (*(_QWORD *)(*v12 + 16))
  {
    swift_bridgeObjectRetain(*v12);
    v23 = sub_100003FB0(a2);
    v24 = v107;
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_retain();
      swift_bridgeObjectRelease();
      v27 = *(_QWORD *)(v26 + 40);
      swift_retain();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      v27 = 0;
    }
  }
  else
  {
    v27 = 0;
    v24 = v107;
  }
  v100 = v27;
  v96 = v21;
  if (v21 | v27)
  {
    sub_10001F6FC();
    v94 = v6;
    v28 = v98;
    v29 = *(void (**)(char *, _QWORD, uint64_t))(v98 + 104);
    v93 = v5;
    v30 = v99;
    v29(v11, enum case for DispatchQoS.QoSClass.default(_:), v99);
    v31 = (void *)static OS_dispatch_queue.global(qos:)(v11);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v11, v30);
    v32 = swift_allocObject(&unk_101085BC0, 32, 7);
    v33 = v100;
    *(_QWORD *)(v32 + 16) = v21;
    *(_QWORD *)(v32 + 24) = v33;
    v116 = sub_10067C798;
    v117 = v32;
    aBlock = _NSConcreteStackBlock;
    v113 = 1107296256;
    v114 = sub_100016FB8;
    v115 = &unk_101085BD8;
    v34 = _Block_copy(&aBlock);
    swift_retain();
    v35 = swift_retain();
    v36 = v101;
    static DispatchQoS.unspecified.getter(v35);
    v111 = _swiftEmptyArrayStorage;
    v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v38 = a2;
    v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v40 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v41 = v103;
    v42 = v39;
    a2 = v38;
    v43 = v106;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v42, v40, v106, v37);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v41, v34);
    _Block_release(v34);

    v24 = v107;
    v44 = v102;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v41, v43);
    v45 = *(void (**)(char *, uint64_t))(v44 + 8);
    v6 = v94;
    v46 = v36;
    v5 = v93;
    v45(v46, v105);
    swift_release();
  }
  v47 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v24, a2, v47);
  static Date.trustedNow.getter(v24 + *(int *)(v5 + 20));
  *(_BYTE *)(v24 + *(int *)(v5 + 24)) = 27;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v48 = qword_1011B7160;
  v49 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v50 = *(unsigned __int8 *)(v6 + 80);
  v51 = (v50 + 32) & ~v50;
  v52 = swift_allocObject(v49, v51 + *(_QWORD *)(v6 + 72), v50 | 7);
  v107 = xmmword_100E22B00;
  *(_OWORD *)(v52 + 16) = xmmword_100E22B00;
  sub_10005972C(v24, v52 + v51, type metadata accessor for BeaconObservation);
  v53 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v53);
  *(&v93 - 4) = v48;
  *(&v93 - 3) = v52;
  *(&v93 - 2) = 0;
  *(&v93 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001523C8, &v93 - 6, &type metadata for () + 1);
  v54 = swift_bridgeObjectRelease();
  v55 = v95;
  if (v95)
  {
    v94 = a2;
    v56 = swift_errorRetain(v95);
    v57 = static os_log_type_t.error.getter(v56);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v58 = qword_1011B7D50;
    v59 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v60 = swift_allocObject(v59, 72, 7);
    *(_OWORD *)(v60 + 16) = v107;
    swift_getErrorValue(v55, v110, v109);
    v61 = Error.localizedDescription.getter(v109[1], v109[2]);
    v63 = v62;
    *(_QWORD *)(v60 + 56) = &type metadata for String;
    *(_QWORD *)(v60 + 64) = sub_10001AA00();
    *(_QWORD *)(v60 + 32) = v61;
    *(_QWORD *)(v60 + 40) = v63;
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v58, "#Durian: stopSound completed with error - %@", 44, 2, v60);
    swift_bridgeObjectRelease();
    sub_10001F6FC();
    v64 = v98;
    v65 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v99);
    v66 = (void *)static OS_dispatch_queue.global(qos:)(v11);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v11, v65);
    v67 = swift_allocObject(&unk_101085B70, 32, 7);
    *(_QWORD *)(v67 + 16) = v108;
    *(_QWORD *)(v67 + 24) = v55;
    v116 = sub_10067C75C;
    v117 = v67;
    aBlock = _NSConcreteStackBlock;
    v113 = 1107296256;
    v114 = sub_100016FB8;
    v115 = &unk_101085B88;
    v68 = v55;
    v69 = _Block_copy(&aBlock);
    swift_errorRetain(v68);
    v70 = swift_retain();
    v71 = v101;
    static DispatchQoS.unspecified.getter(v70);
    v111 = _swiftEmptyArrayStorage;
    v72 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v73 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v74 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v75 = v103;
    v76 = v73;
    v77 = v106;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v76, v74, v106, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v71, v75, v69);
    _Block_release(v69);

    swift_release();
    swift_release();
    swift_errorRelease(v68);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v75, v77);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v71, v105);
    sub_1000126B0(v24, type metadata accessor for BeaconObservation);
    swift_release();
    a2 = v94;
    v78 = v97;
  }
  else
  {
    v79 = static os_log_type_t.default.getter(v54);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, qword_1011B7D50, "#Durian: stopSound completed.", 29, 2, _swiftEmptyArrayStorage);
    sub_10001F6FC();
    v80 = v98;
    v81 = v99;
    (*(void (**)(char *, _QWORD, uint64_t))(v98 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v99);
    v82 = (void *)static OS_dispatch_queue.global(qos:)(v11);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v11, v81);
    v83 = swift_allocObject(&unk_101085B20, 24, 7);
    *(_QWORD *)(v83 + 16) = v108;
    v116 = sub_10067C744;
    v117 = v83;
    aBlock = _NSConcreteStackBlock;
    v113 = 1107296256;
    v114 = sub_100016FB8;
    v115 = &unk_101085B38;
    v84 = _Block_copy(&aBlock);
    v85 = swift_retain();
    v86 = v101;
    static DispatchQoS.unspecified.getter(v85);
    v111 = _swiftEmptyArrayStorage;
    v87 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v88 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v89 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v90 = v103;
    v91 = v106;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v111, v88, v89, v106, v87);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v86, v90, v84);
    _Block_release(v84);

    (*(void (**)(char *, uint64_t))(v104 + 8))(v90, v91);
    (*(void (**)(char *, uint64_t))(v102 + 8))(v86, v105);
    swift_release();
    v78 = v97;
    sub_1006691B4(a2);
    swift_release();
    swift_release();
    sub_1000126B0(v24, type metadata accessor for BeaconObservation);
  }
  sub_100674608(v78, a2);
  return swift_release();
}

void sub_100674608(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v12, 0, 0);
  v4 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain(*v3);
    v5 = sub_100003FB0(a2);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
      swift_retain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v7 + 32) = 0;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v8 = *v3;
  if (*(_QWORD *)(*v3 + 16))
  {
    swift_bridgeObjectRetain(*v3);
    v9 = sub_100003FB0(a2);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_retain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v11 + 48) = 0;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10067470C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  _BYTE v19[80];
  _BYTE v20[80];
  uint64_t v21;
  _QWORD v22[2];

  if (a1)
  {
    type metadata accessor for CommandError(0);
    v4 = v3;
    v21 = 4;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    inited = swift_initStackObject(v5, v19);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v7;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000028;
    *(_QWORD *)(inited + 56) = 0x8000000100EDF100;
    v8 = sub_1006B8B10(inited);
    v9 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(v22, &v21, v8, v4, v9);
    v10 = (void *)v22[0];
    Future.finish(error:)(v22[0]);

  }
  if (a2)
  {
    type metadata accessor for CommandError(0);
    v12 = v11;
    v21 = 4;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v14 = swift_initStackObject(v13, v20);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v14 + 40) = v15;
    *(_QWORD *)(v14 + 72) = &type metadata for String;
    *(_QWORD *)(v14 + 48) = 0xD000000000000028;
    *(_QWORD *)(v14 + 56) = 0x8000000100EDF100;
    v16 = sub_1006B8B10(v14);
    v17 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
    _BridgedStoredNSError.init(_:userInfo:)(v22, &v21, v16, v12, v17);
    v18 = (void *)v22[0];
    Future.finish(error:)(v22[0]);

  }
}

uint64_t sub_1006748D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD aBlock[6];
  _BYTE v43[24];

  v37 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v43, 0, 0);
  v16 = *v15;
  v17 = *(_QWORD *)(*v15 + 16);
  v36 = a2;
  if (v17)
  {
    swift_bridgeObjectRetain(v16);
    v18 = sub_100003FB0(a2);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v18);
      swift_retain();
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v20 + 56);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v21 = 0;
LABEL_6:
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v22 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v23 = swift_allocObject(&unk_101085A80, 32, 7);
  v24 = v37;
  *(_QWORD *)(v23 + 16) = v37;
  *(_QWORD *)(v23 + 24) = v21;
  aBlock[4] = sub_10067C724;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085A98;
  v25 = _Block_copy(aBlock);
  swift_errorRetain(v24);
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v41 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v5, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v25);
  _Block_release(v25);
  swift_release();

  (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
  result = swift_release();
  v31 = *v15;
  if (*(_QWORD *)(*v15 + 16))
  {
    swift_bridgeObjectRetain(*v15);
    v32 = sub_100003FB0(v36);
    if ((v33 & 1) != 0)
    {
      v34 = *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32);
      swift_retain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v34 + 56) = 0;
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100674C30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _QWORD v14[3];
  _BYTE v15[15];
  char v16;

  if (a1)
  {
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v6 = qword_1011B7D50;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v15, v14);
    v9 = Error.localizedDescription.getter(v14[1], v14[2]);
    v11 = v10;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_10001AA00();
    *(_QWORD *)(v8 + 32) = v9;
    *(_QWORD *)(v8 + 40) = v11;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "#Durian: Unpair completed with error - %@", 41, 2, v8);
    swift_bridgeObjectRelease();
    if (a2)
      Future.finish(error:)(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v13 = static os_log_type_t.default.getter(0);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    result = os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7D50, "#Durian: Unpair completed.", 26, 2, _swiftEmptyArrayStorage);
    if (a2)
    {
      v16 = 1;
      return Future.finish(result:)(&v16);
    }
  }
  return result;
}

uint64_t sub_100674DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t aBlock[7];

  v47 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v6 - 8);
  v50 = v6;
  __chkstk_darwin(v6);
  v48 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v44 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - v12;
  if (qword_1010EA320 != -1)
    swift_once(&qword_1010EA320, sub_100B5E35C);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B7E10);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v45 = a1;
  v43 = v15;
  v16 = ((uint64_t (*)(char *, uint64_t, uint64_t))v15)(v13, a1, v8);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    v40 = v20;
    *(_DWORD *)v19 = 141558275;
    v52 = 1752392040;
    aBlock[0] = v20;
    v42 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v41 = v5;
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v8, v21);
    v52 = sub_100016940(v22, v23, aBlock);
    v5 = v41;
    v3 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "TagCommandManager handling user stats fetch result. Beacon: %{private,mask.hash}s.", (uint8_t *)v19, 0x16u);
    v24 = v40;
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }

  v25 = v46;
  v26 = v44;
  v43(v44, v45, v8);
  v27 = *(unsigned __int8 *)(v9 + 80);
  v28 = (v27 + 24) & ~v27;
  v29 = (v10 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(&unk_101085990, v29 + 66, v27 | 7);
  *(_QWORD *)(v30 + 16) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v30 + v28, v26, v8);
  v31 = v47;
  sub_10067C4CC(v47, v30 + v29);
  aBlock[4] = (uint64_t)sub_10067C514;
  aBlock[5] = v30;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_1010859A8;
  v32 = _Block_copy(aBlock);
  v33 = v25;
  v34 = sub_10067C660(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C558);
  v35 = v48;
  static DispatchQoS.unspecified.getter(v34);
  v52 = (uint64_t)_swiftEmptyArrayStorage;
  v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v37, v38, v3, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v5, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v50);
  return swift_release();
}

uint64_t sub_100675258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD aBlock[6];
  char v55[32];

  v44 = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v5 - 8);
  v51 = v5;
  __chkstk_darwin(v5);
  v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  __chkstk_darwin(v7);
  v46 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(v17, v55, 0, 0);
  v45 = v17;
  v18 = *v17;
  v19 = *(_QWORD *)(v18 + 16);
  v52 = a2;
  if (v19)
  {
    swift_bridgeObjectRetain(v18);
    v20 = sub_100003FB0(a2);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v20);
      swift_retain();
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v22 + 72);
      swift_retain();
      swift_release();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  v23 = 0;
LABEL_6:
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
  v24 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v25 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v52, v9);
  v26 = *(unsigned __int8 *)(v10 + 80);
  v27 = (v26 + 82) & ~v26;
  v28 = (v11 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_1010859E0, v28 + 8, v26 | 7);
  v30 = v44;
  sub_10067C4CC(v44, v29 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v29 + v27, v12, v9);
  *(_QWORD *)(v29 + v28) = v23;
  aBlock[4] = sub_10067C61C;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010859F8;
  v31 = _Block_copy(aBlock);
  sub_10067C660(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C558);
  v32 = swift_retain();
  v33 = v46;
  static DispatchQoS.unspecified.getter(v32);
  v53 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v37 = v49;
  v38 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v35, v36, v51, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v31);
  _Block_release(v31);
  swift_release();

  (*(void (**)(char *, uint64_t))(v50 + 8))(v37, v38);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v33, v48);
  result = swift_release();
  v40 = *v45;
  if (*(_QWORD *)(*v45 + 16))
  {
    swift_bridgeObjectRetain(*v45);
    v41 = sub_100003FB0(v25);
    if ((v42 & 1) != 0)
    {
      v43 = *(_QWORD *)(*(_QWORD *)(v40 + 56) + 8 * v41);
      swift_retain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v43 + 72) = 0;
      swift_release();
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100675664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[4];
  char v50;
  _QWORD v51[9];
  _OWORD v52[4];
  char v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;

  v47 = a3;
  v4 = a1;
  sub_10067C4CC(a1, (uint64_t)v51);
  v6 = v51[0];
  v5 = v51[1];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v43 - v12;
  sub_10067C4CC(v4, (uint64_t)v52);
  if ((v54 & 1) != 0)
  {
    v14 = *(_QWORD *)&v52[0];
    swift_errorRetain(v6);
    if (qword_1010EA320 != -1)
      swift_once(&qword_1010EA320, sub_100B5E35C);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7E10);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v7);
    sub_10067C660(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C558);
    v16 = swift_errorRetain(v6);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v45 = v14;
    if (v19)
    {
      v20 = swift_slowAlloc(32, -1);
      v46 = v4;
      v21 = v20;
      v22 = swift_slowAlloc(8, -1);
      v43 = v17;
      v23 = (_QWORD *)v22;
      v44 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v55 = v44;
      *(_DWORD *)v21 = 138543875;
      swift_errorRetain(v6);
      v24 = _swift_stdlib_bridgeErrorToNSError(v14);
      *(_QWORD *)&v49[0] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, (char *)v49 + 8, v21 + 4, v21 + 12);
      *v23 = v24;
      sub_10067C660(v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C4BC);
      sub_10067C660(v46, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C4BC);
      *(_WORD *)(v21 + 12) = 2160;
      *(_QWORD *)&v49[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, (char *)v49 + 8, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2081;
      v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v7, v25);
      *(_QWORD *)&v49[0] = sub_100016940(v26, v27, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v49, (char *)v49 + 8, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v28 = v43;
      _os_log_impl((void *)&_mh_execute_header, v43, v18, "#Durian: Fetch user stats completed with error - %{public}@, device: %{private,mask.hash}s.", (uint8_t *)v21, 0x20u);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v23, 1, v29);
      swift_slowDealloc(v23, -1, -1);
      v30 = v44;
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      v31 = v21;
      v4 = v46;
      swift_slowDealloc(v31, -1, -1);

      if (!v47)
        return sub_10067C660(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C4BC);
      goto LABEL_12;
    }
    sub_10067C660(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C4BC);
    sub_10067C660(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C4BC);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);

    if (v47)
LABEL_12:
      Future.finish(error:)(v45);
  }
  else
  {
    v57 = v52[2];
    v58 = v52[3];
    v59 = v53;
    v55 = v52[0];
    v56 = v52[1];
    sub_10001BD08(v6, v5);
    if (qword_1010EA320 != -1)
      swift_once(&qword_1010EA320, sub_100B5E35C);
    v32 = type metadata accessor for Logger(0);
    sub_10001A9E8(v32, (uint64_t)qword_1011B7E10);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, a2, v7);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      v37 = swift_slowAlloc(32, -1);
      v45 = v37;
      *(_DWORD *)v36 = 141558275;
      v48 = 1752392040;
      *(_QWORD *)&v49[0] = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2081;
      v46 = v4;
      v38 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v7, v38);
      v48 = sub_100016940(v39, v40, (uint64_t *)v49);
      v4 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "#Durian: Fetch user stats completed: device: %{private,mask.hash}s.", (uint8_t *)v36, 0x16u);
      v41 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }

    if (v47)
    {
      v49[2] = v57;
      v49[3] = v58;
      v50 = v59;
      v49[0] = v55;
      v49[1] = v56;
      Future.finish(result:)(v49);
    }
  }
  return sub_10067C660(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10067C4BC);
}

uint64_t sub_100675C20(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v3 + 296) = a2;
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = a3;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v3 + 192) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 200) = v5;
  *(_QWORD *)(v3 + 208) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v3 + 216) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 224) = v7;
  *(_QWORD *)(v3 + 232) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 240) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 248) = v9;
  v10 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v3 + 256) = v10;
  *(_QWORD *)(v3 + 264) = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100675CD8, 0, 0);
}

uint64_t sub_100675CD8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 144, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 104, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC((__int128 *)(v0 + 104), v0 + 64);
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBE8 + dword_1010EBBE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBEC);
    *(_QWORD *)(v0 + 272) = v2;
    *v2 = v0;
    v2[1] = sub_100675DC4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100675DC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100675E20, 0, 0);
}

uint64_t sub_100675E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  if (v1)
  {
    v2 = dword_101118704;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 288) = v3;
    *v3 = v0;
    v3[1] = sub_100676094;
    return sub_100BE5B24(*(_QWORD *)(v0 + 176), *(_BYTE *)(v0 + 296));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 256);
    v6 = *(_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 248);
    v9 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 224);
    v10 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 216);
    v11 = *(void **)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 192);
    v20 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v0 + 176), v7);
    v12 = *(unsigned __int8 *)(v8 + 80);
    v13 = (v12 + 24) & ~v12;
    v14 = swift_allocObject(&unk_101085940, v13 + v5, v12 | 7);
    *(_QWORD *)(v14 + 16) = v11;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v14 + v13, v6, v7);
    *(_QWORD *)(v0 + 48) = sub_10067C3F8;
    *(_QWORD *)(v0 + 56) = v14;
    *(_QWORD *)(v0 + 16) = _NSConcreteStackBlock;
    *(_QWORD *)(v0 + 24) = 1107296256;
    *(_QWORD *)(v0 + 32) = sub_100016FB8;
    *(_QWORD *)(v0 + 40) = &unk_101085958;
    v15 = _Block_copy((const void *)(v0 + 16));
    static DispatchQoS.unspecified.getter(v11);
    *(_QWORD *)(v0 + 168) = _swiftEmptyArrayStorage;
    v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 168, v17, v18, v19, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v10, v15);
    _Block_release(v15);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v19);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v9, v22);
    swift_release();
    swift_task_dealloc(v6);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100676094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 288));
  swift_release();
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_10067CD1C;
  }
  else
  {
    v2 = sub_100676108;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100676108()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = v0[32];
  v2 = v0[33];
  v3 = v0[30];
  v4 = v0[31];
  v5 = v0[29];
  v18 = v0[28];
  v6 = v0[26];
  v19 = v0[27];
  v7 = (void *)v0[23];
  v16 = v0[24];
  v17 = v0[25];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[22], v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101085940, v9 + v1, v8 | 7);
  *(_QWORD *)(v10 + 16) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v3);
  v0[6] = sub_10067C3F8;
  v0[7] = v10;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100016FB8;
  v0[5] = &unk_101085958;
  v11 = _Block_copy(v0 + 2);
  static DispatchQoS.unspecified.getter(v7);
  v0[21] = _swiftEmptyArrayStorage;
  v12 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v14 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 21, v13, v14, v16, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v5, v6, v11);
  _Block_release(v11);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v6, v16);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v5, v19);
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100676314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE v9[24];

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_batteryFetchInFlight, v9, 33, 0);
  sub_100C81CDC(a2, (uint64_t)v6);
  sub_100004048((uint64_t)v6, &qword_1010ED860);
  return swift_endAccess(v9);
}

uint64_t sub_1006763C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD v59[3];
  char v60[8];
  _QWORD *v61;
  _QWORD aBlock[6];
  char v63[32];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  __chkstk_darwin(v6);
  v54 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v63, 0, 0);
  v57 = v18;
  v58 = a2;
  v19 = *v18;
  if (*(_QWORD *)(v19 + 16))
  {
    swift_bridgeObjectRetain(v19);
    v20 = sub_100003FB0(a2);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      swift_retain();
      swift_bridgeObjectRelease();
      v23 = *(_QWORD *)(v22 + 64);
      swift_retain();
      a2 = v58;
      swift_release();
      if (!a3)
        goto LABEL_4;
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  v23 = 0;
  if (!a3)
  {
LABEL_4:
    swift_retain();
    sub_10080B950(a2, (uint64_t)v17);
    swift_release();
    v24 = type metadata accessor for OwnedBeaconRecord(0);
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v17, 1, v24);
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010F47C0);
    if (v25 != 1)
      sub_1006691B4(a2);
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    v26 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v27 = swift_allocObject(&unk_1010858C8, 24, 7);
    *(_QWORD *)(v27 + 16) = v23;
    aBlock[4] = sub_10067C278;
    aBlock[5] = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010858E0;
    v28 = _Block_copy(aBlock);
    v29 = swift_retain();
    static DispatchQoS.unspecified.getter(v29);
    v61 = _swiftEmptyArrayStorage;
    v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v33 = v54;
    v34 = v31;
    v35 = v56;
    v36 = v58;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v34, v32, v56, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v33, v28);
    _Block_release(v28);
    swift_release();

    (*(void (**)(char *, uint64_t))(v55 + 8))(v33, v35);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v53);
    result = swift_release();
    v38 = *v57;
    if (*(_QWORD *)(*v57 + 16))
    {
      swift_bridgeObjectRetain(*v57);
      v39 = sub_100003FB0(v36);
      if ((v40 & 1) == 0)
        return swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    return result;
  }
LABEL_11:
  v41 = swift_errorRetain(a3);
  v42 = static os_log_type_t.error.getter(v41);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v43 = qword_1011B7D50;
  v44 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v45 = swift_allocObject(v44, 72, 7);
  *(_OWORD *)(v45 + 16) = xmmword_100E22B00;
  swift_getErrorValue(a3, v60, v59);
  v46 = Error.localizedDescription.getter(v59[1], v59[2]);
  v48 = v47;
  *(_QWORD *)(v45 + 56) = &type metadata for String;
  *(_QWORD *)(v45 + 64) = sub_10001AA00();
  *(_QWORD *)(v45 + 32) = v46;
  *(_QWORD *)(v45 + 40) = v48;
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v43, "#Durian: Connect finished with error - %@", 41, 2, v45);
  swift_bridgeObjectRelease();
  if (v23)
  {
    swift_retain();
    Future.finish(error:)(a3);
    swift_release();
    swift_errorRelease(a3);
    result = swift_release();
  }
  else
  {
    result = swift_errorRelease(a3);
  }
  v49 = v58;
  v38 = *v57;
  if (*(_QWORD *)(*v57 + 16))
  {
    swift_bridgeObjectRetain(*v57);
    v39 = sub_100003FB0(v49);
    if ((v50 & 1) == 0)
      return swift_bridgeObjectRelease();
LABEL_18:
    v51 = *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39);
    swift_retain();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v51 + 64) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100676908(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  result = os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D50, "#Durian: Device is connected.", 29, 2, _swiftEmptyArrayStorage);
  if (a1)
  {
    v4 = 1;
    return Future.finish(result:)(&v4);
  }
  return result;
}

void sub_1006769A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  _QWORD *v54;
  _QWORD aBlock[7];
  char v56[24];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v53 = ((char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v7 - 8);
  v52 = v7;
  __chkstk_darwin(v7);
  v50 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BeaconObservation(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10067114C(a2) & 1) != 0)
  {
    if (qword_1010EA320 != -1)
      swift_once(&qword_1010EA320, sub_100B5E35C);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7E10);
    v53 = Logger.logObject.getter(v18);
    v19 = static os_log_type_t.default.getter(v53);
    if (os_log_type_enabled(v53, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v19, "#Durian: AirTag is playing unauthorized sound. Not forcing completion.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    return;
  }
  v48 = v5;
  v49 = v4;
  v21 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v56, 0, 0);
  v22 = *v21;
  if (!*(_QWORD *)(*v21 + 16))
    goto LABEL_11;
  swift_bridgeObjectRetain(*v21);
  v23 = sub_100003FB0(a2);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_11:
    v47 = 0;
    goto LABEL_12;
  }
  v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
  swift_retain();
  swift_bridgeObjectRelease();
  v47 = *(_QWORD *)(v25 + 40);
  swift_retain();
  swift_release();
LABEL_12:
  v26 = *v21;
  if (*(_QWORD *)(*v21 + 16))
  {
    swift_bridgeObjectRetain(*v21);
    v27 = sub_100003FB0(a2);
    if ((v28 & 1) != 0)
    {
      v29 = *(_QWORD *)(*(_QWORD *)(v26 + 56) + 8 * v27);
      swift_retain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v29 + 40) = 0;
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v30 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v16, a2, v30);
  static Date.trustedNow.getter((uint64_t)&v16[*(int *)(v13 + 20)]);
  v16[*(int *)(v13 + 24)] = 29;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v31 = qword_1011B7160;
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v33 = *(unsigned __int8 *)(v14 + 80);
  v34 = (v33 + 32) & ~v33;
  v35 = swift_allocObject(v32, v34 + *(_QWORD *)(v14 + 72), v33 | 7);
  *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v16, v35 + v34, type metadata accessor for BeaconObservation);
  v36 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v36);
  *(&v47 - 4) = v31;
  *(&v47 - 3) = v35;
  *(&v47 - 2) = 0;
  *(&v47 - 1) = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v47 - 6, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v37 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v38 = swift_allocObject(&unk_101085828, 24, 7);
  *(_QWORD *)(v38 + 16) = v47;
  aBlock[4] = sub_10067C244;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085840;
  v39 = _Block_copy(aBlock);
  v40 = swift_retain();
  v41 = v50;
  static DispatchQoS.unspecified.getter(v40);
  v54 = _swiftEmptyArrayStorage;
  v42 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v43 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v44 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v45 = v53;
  v46 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v43, v44, v49, v42);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v41, v45, v39);
  _Block_release(v39);
  swift_release();

  (*(void (**)(NSObject *, uint64_t))(v48 + 8))(v45, v46);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v41, v52);
  sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconObservation);
  swift_release();
}

uint64_t sub_100676F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t result;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD aBlock[6];
  char v72[32];

  v66 = a4;
  v67 = a5;
  v65 = a3;
  v69 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v68 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers, v72, 0, 0);
  v19 = *v17;
  if (*(_QWORD *)(*v17 + 16))
  {
    swift_bridgeObjectRetain(*v17);
    v20 = sub_100003FB0(v69);
    if ((v21 & 1) != 0)
    {
      v22 = *(_QWORD *)(v19 + 56);
      v63 = v11;
      v64 = v17;
      v23 = v9;
      v24 = v6;
      v25 = v10;
      v26 = v7;
      v27 = *(_QWORD *)(v22 + 8 * v20);
      swift_retain();
      swift_bridgeObjectRelease();
      v28 = *(_QWORD *)(v27 + 96);
      swift_retain();
      v29 = v26;
      v17 = v64;
      v18 = swift_release();
      if (v28)
      {
        sub_10001F6FC();
        v62 = v25;
        (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
        v61 = static OS_dispatch_queue.global(qos:)(v16);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        v30 = (_QWORD *)swift_allocObject(&unk_101085788, 48, 7);
        v32 = v65;
        v31 = v66;
        v30[2] = v65;
        v30[3] = v28;
        v33 = v67;
        v30[4] = v31;
        v30[5] = v33;
        aBlock[4] = sub_10067C1DC;
        aBlock[5] = v30;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_1010857A0;
        v34 = _Block_copy(aBlock);
        swift_retain();
        swift_errorRetain(v32);
        v35 = sub_10001BBBC(v31, v33);
        v36 = v68;
        static DispatchQoS.unspecified.getter(v35);
        v70 = _swiftEmptyArrayStorage;
        v37 = v29;
        v38 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v39 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v40 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v39, v40, v24, v38);
        v41 = (void *)v61;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v23, v34);
        _Block_release(v34);
        swift_release();

        (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v24);
        (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v62);
        result = swift_release();
        v43 = *v17;
        v44 = v69;
        if (!*(_QWORD *)(*v17 + 16))
          return result;
        swift_bridgeObjectRetain(*v17);
        v45 = sub_100003FB0(v44);
        if ((v46 & 1) != 0)
        {
          v47 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v45);
          swift_retain();
LABEL_13:
          swift_bridgeObjectRelease();
          *(_QWORD *)(v47 + 96) = 0;
          swift_release();
          return swift_release();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      v18 = swift_bridgeObjectRelease();
    }
  }
  v48 = static os_log_type_t.error.getter(v18);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v49 = qword_1011B7D50;
  v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v51 = swift_allocObject(v50, 72, 7);
  *(_OWORD *)(v51 + 16) = xmmword_100E22B00;
  v52 = type metadata accessor for UUID(0);
  v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v54 = v69;
  v55 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
  v57 = v56;
  *(_QWORD *)(v51 + 56) = &type metadata for String;
  *(_QWORD *)(v51 + 64) = sub_10001AA00();
  *(_QWORD *)(v51 + 32) = v55;
  *(_QWORD *)(v51 + 40) = v57;
  os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "#Durian: fetchHawkeyeSerialNumberFuture not found for [%@]. #Bug: command's future is missing.", 94, 2, v51);
  result = swift_bridgeObjectRelease();
  v58 = *v17;
  if (*(_QWORD *)(v58 + 16))
  {
    swift_bridgeObjectRetain(v58);
    v59 = sub_100003FB0(v54);
    if ((v60 & 1) != 0)
    {
      v47 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v59);
      swift_retain();
      goto LABEL_13;
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100677418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, const char *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v24;
  _QWORD v25[3];
  _BYTE v26[8];
  _QWORD v27[2];

  if (a1)
  {
    v11 = swift_errorRetain(a1);
    v12 = static os_log_type_t.error.getter(v11);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    v13 = qword_1011B7D50;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    swift_getErrorValue(a1, v26, v25);
    v16 = Error.localizedDescription.getter(v25[1], v25[2]);
    v18 = v17;
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    *(_QWORD *)(v15 + 64) = sub_10001AA00();
    *(_QWORD *)(v15 + 32) = v16;
    *(_QWORD *)(v15 + 40) = v18;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, a5, a6, 2, v15);
    swift_bridgeObjectRelease();
    Future.finish(error:)(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v24 = static os_log_type_t.default.getter(0);
    if (qword_1010EA270 != -1)
      swift_once(&qword_1010EA270, sub_100B5DAF0);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7D50, a7, a8, 2, _swiftEmptyArrayStorage);
    v27[0] = a3;
    v27[1] = a4;
    return Future.finish(result:)(v27);
  }
}

uint64_t sub_100677AD0(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void (*a7)(uint64_t, unint64_t, char *, void *, id))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void (*v24)(uint64_t, unint64_t, char *, void *, id);
  uint64_t v25;

  v24 = a7;
  v25 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a3;
  v16 = a4;
  v17 = a5;
  v18 = a1;
  v19 = a6;
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v22 = v21;

  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v24(v20, v22, v14, a6, v18);

  sub_10001BC14(v20, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v25);
}

uint64_t sub_100677BF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100677C14()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100677C20()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066D810);
}

uint64_t sub_100677C30()
{
  return sub_100264E14((uint64_t (*)(_QWORD, uint64_t))sub_10066E038);
}

void sub_100677C3C()
{
  uint64_t v0;

  sub_10066E3F8(v0, 0xD000000000000025, 0x8000000100EDE700);
}

uint64_t sub_100677C6C()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100677C78()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_100668AA0);
}

uint64_t sub_100677C88()
{
  return sub_100264E14((uint64_t (*)(_QWORD, uint64_t))sub_10066A3A8);
}

void sub_100677C94()
{
  uint64_t v0;

  sub_10066B318(*(_QWORD *)(v0 + 16), 2);
}

uint64_t sub_100677CB0()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100677CBC()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066A780);
}

uint64_t sub_100677CC8()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100677CD4()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066AEB4);
}

uint64_t sub_100677CE0()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100677CEC()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066E4EC);
}

uint64_t sub_100677CFC()
{
  return sub_100264E14((uint64_t (*)(_QWORD, uint64_t))sub_10066EC28);
}

void sub_100677D08()
{
  sub_1006710B0();
}

uint64_t sub_100677D20()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100677D2C()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066CDD0);
}

uint64_t sub_100677D3C()
{
  return sub_100264E14((uint64_t (*)(_QWORD, uint64_t))sub_10066D450);
}

void sub_100677D48()
{
  uint64_t v0;

  sub_10066E3F8(v0, 0xD000000000000029, 0x8000000100EDEAE0);
}

uint64_t sub_100677D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100677E20()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10066B790(*(char **)(v0 + 16), (void (*)(_QWORD, _QWORD))(v0 + v2), *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100677E7C()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100677E88()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066C448);
}

uint64_t sub_100677E94()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

void sub_100677EA4()
{
  uint64_t v0;

  sub_10066C9A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_100677EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  objc_class *v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  objc_super v30;
  _QWORD *v31;

  v28 = a2;
  v29 = a3;
  v27 = a1;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue;
  v25 = sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  v14 = v3;
  static DispatchQoS.unspecified.getter(v14);
  v31 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v16, v17, v4, v15);
  v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100EDF5A0, v9, v6, v13, 0);
  *(_QWORD *)&v3[v26] = v18;
  *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_batteryFetchInFlight] = &_swiftEmptySetSingleton;
  v19 = &v14[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_tagCommandHandlers] = _swiftEmptyDictionarySingleton;
  v20 = v28;
  *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_beaconStore] = v27;
  v21 = &v14[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManagerCreator];
  v22 = v29;
  *(_QWORD *)v21 = v20;
  *((_QWORD *)v21 + 1) = v22;
  swift_retain();
  swift_retain();

  v23 = (objc_class *)type metadata accessor for TagCommandManager();
  v30.receiver = v14;
  v30.super_class = v23;
  return objc_msgSendSuper2(&v30, "init");
}

uint64_t sub_100678118(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[6];

  v45 = a5;
  v46 = a4;
  v47 = a1;
  v48 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  __chkstk_darwin(v6);
  v51 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  __chkstk_darwin(v8);
  v44 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v16 = qword_1011B7D50;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v20 = dispatch thunk of CustomStringConvertible.description.getter(v10, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "#Durian: didFetchFirmwareVersion: %@", 36, 2, v18);
  swift_bridgeObjectRelease();
  v23 = v45;
  v43 = *(_QWORD *)&v45[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
  v24 = *(unsigned __int8 *)(v11 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_101086188, v27 + 16, v24 | 7);
  *(_QWORD *)(v28 + 16) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v28 + v25, v14, v10);
  v30 = v46;
  v29 = v47;
  *(_QWORD *)(v28 + v26) = v46;
  v31 = (uint64_t *)(v28 + v27);
  v32 = v48;
  *v31 = v29;
  v31[1] = v32;
  aBlock[4] = sub_10067CB5C;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010861A0;
  v33 = _Block_copy(aBlock);
  v34 = v23;
  swift_errorRetain(v30);
  v35 = sub_10001BBBC(v29, v32);
  v36 = v44;
  static DispatchQoS.unspecified.getter(v35);
  v54 = _swiftEmptyArrayStorage;
  v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v40 = v51;
  v41 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v38, v39, v53, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
  return swift_release();
}

uint64_t sub_1006784B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: didSetObfuscatedIdentifierOnDevice: %@", 47, 2, v15);
  swift_bridgeObjectRelease();
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1010860E8, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v25 = v39;
  *(_QWORD *)(v24 + v23) = v39;
  aBlock[4] = sub_10067CA38;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101086100;
  v26 = _Block_copy(aBlock);
  v27 = v20;
  v28 = swift_errorRetain(v25);
  v29 = v37;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_100678820(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: didStartPlayingSoundOnDevice: %@", 41, 2, v15);
  swift_bridgeObjectRelease();
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101085F80, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v25 = v39;
  *(_QWORD *)(v24 + v23) = v39;
  aBlock[4] = sub_10067C8E8;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085F98;
  v26 = _Block_copy(aBlock);
  v27 = v20;
  v28 = swift_errorRetain(v25);
  v29 = v37;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_100678B90(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t aBlock[7];

  v47 = a3;
  v48 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v7 - 8);
  v51 = v7;
  __chkstk_darwin(v7);
  v49 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v45 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v41 - v13;
  if (qword_1010EA320 != -1)
    swift_once(&qword_1010EA320, sub_100B5E35C);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B7E10);
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v46 = a1;
  v44 = v16;
  v17 = ((uint64_t (*)(char *, uint64_t, uint64_t))v16)(v14, a1, v9);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(32, -1);
    v41 = v21;
    *(_DWORD *)v20 = 141558275;
    v53 = 1752392040;
    aBlock[0] = v21;
    v43 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v42 = v6;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v9, v22);
    v53 = sub_100016940(v23, v24, aBlock);
    v6 = v42;
    v4 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "#Durian: didStartPlayingUnauthorizedSoundOnDevice: %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
    v25 = v41;
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  }

  v26 = v47;
  v27 = v45;
  v44(v45, v46, v9);
  v28 = *(unsigned __int8 *)(v10 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = (v11 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(&unk_101085DF0, v30 + 8, v28 | 7);
  *(_QWORD *)(v31 + 16) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v31 + v29, v27, v9);
  v32 = v48;
  *(_QWORD *)(v31 + v30) = v48;
  aBlock[4] = (uint64_t)sub_10067C7E4;
  aBlock[5] = v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100016FB8;
  aBlock[3] = (uint64_t)&unk_101085E08;
  v33 = _Block_copy(aBlock);
  v34 = v26;
  v35 = swift_errorRetain(v32);
  v36 = v49;
  static DispatchQoS.unspecified.getter(v35);
  v53 = (uint64_t)_swiftEmptyArrayStorage;
  v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v38, v39, v4, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v6, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v36, v51);
  return swift_release();
}

uint64_t sub_100679000(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: didCompletePlayingUnauthorizedSoundOnDevice: %@", 56, 2, v15);
  swift_bridgeObjectRelease();
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101085D00, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v25 = v39;
  *(_QWORD *)(v24 + v23) = v39;
  aBlock[4] = sub_10067C7C8;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085D18;
  v26 = _Block_copy(aBlock);
  v27 = v20;
  v28 = swift_errorRetain(v25);
  v29 = v37;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_100679370(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: didCompletePlayingSoundOnDevice: %@", 44, 2, v15);
  swift_bridgeObjectRelease();
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101085C10, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v25 = v39;
  *(_QWORD *)(v24 + v23) = v39;
  aBlock[4] = sub_10067C7AC;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085C28;
  v26 = _Block_copy(aBlock);
  v27 = v20;
  v28 = swift_errorRetain(v25);
  v29 = v37;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_1006796E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: didStopPlayingSoundOnDevice: %@", 40, 2, v15);
  swift_bridgeObjectRelease();
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101085AD0, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v25 = v39;
  *(_QWORD *)(v24 + v23) = v39;
  aBlock[4] = sub_10067C738;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085AE8;
  v26 = _Block_copy(aBlock);
  v27 = v20;
  v28 = swift_errorRetain(v25);
  v29 = v37;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_100679A50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: TagCommandManager: didUnpairFromDevice: %@", 51, 2, v15);
  swift_bridgeObjectRelease();
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101085A30, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v25 = v39;
  *(_QWORD *)(v24 + v23) = v39;
  aBlock[4] = sub_10067C704;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085A48;
  v26 = _Block_copy(aBlock);
  v27 = v20;
  v28 = swift_errorRetain(v25);
  v29 = v37;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_100679DC0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  int v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  unsigned __int8 v45;
  unsigned __int16 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  _BYTE v51[24];
  __int128 v52;
  _BYTE v53[26];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v42 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v32 - v14;
  if (qword_1010EA320 != -1)
    swift_once(&qword_1010EA320, sub_100B5E35C);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7E10);
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v38(v15, a3, v10);
  sub_10001BD08(a1, a2);
  swift_errorRetain(a4);
  sub_10001BD08(a1, a2);
  v18 = swift_errorRetain(a4);
  v39 = v17;
  v19 = Logger.logObject.getter(v18);
  v40 = static os_log_type_t.default.getter(v19);
  v20 = a2 >> 60;
  if (os_log_type_enabled(v19, (os_log_type_t)v40))
  {
    v43 = a1;
    v37 = a3;
    v35 = a5;
    v21 = swift_slowAlloc(42, -1);
    v33 = (uint64_t *)swift_slowAlloc(8, -1);
    v34 = swift_slowAlloc(32, -1);
    *(_QWORD *)v51 = v34;
    *(_DWORD *)v21 = 141558787;
    *(_QWORD *)&v44 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v41 = a2 >> 60;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v10, v22);
    *(_QWORD *)&v44 = sub_100016940(v23, v24, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    v36 = *(void (**)(char *, uint64_t))(v11 + 8);
    v36(v15, v10);
    *(_WORD *)(v21 + 22) = 2048;
    if (v41 <= 0xE)
      __asm { BR              X10 }
    a3 = v37;
    *(_QWORD *)&v44 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v21 + 24, v21 + 32);
    sub_10001EF3C(v43, a2);
    *(_WORD *)(v21 + 32) = 2114;
    if (a4)
    {
      swift_errorRetain(a4);
      v25 = _swift_stdlib_bridgeErrorToNSError(a4);
      *(_QWORD *)&v44 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v21 + 34, v21 + 42);
    }
    else
    {
      *(_QWORD *)&v44 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 8, v21 + 34, v21 + 42);
      v25 = 0;
    }
    v26 = v33;
    *v33 = v25;
    swift_errorRelease(a4);
    swift_errorRelease(a4);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v40, "#Durian: TagCommandManager: didFetchUserStats: %{private,mask.hash}s, statsData: %ld, error: %{public}@.", (uint8_t *)v21, 0x2Au);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v26, 1, v27);
    swift_slowDealloc(v26, -1, -1);
    v28 = v34;
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    a1 = v43;
    v20 = v41;
  }
  else
  {
    sub_10001EF3C(a1, a2);
    v36 = *(void (**)(char *, uint64_t))(v11 + 8);
    v36(v15, v10);
    sub_10001EF3C(a1, a2);
    swift_errorRelease(a4);
    swift_errorRelease(a4);

  }
  if (v20 <= 0xE)
  {
    sub_10001BD08(a1, a2);
    sub_10001BBBC(a1, a2);
    sub_100C57CFC(a1, a2);
    *(_OWORD *)v51 = v44;
    *(_QWORD *)&v51[16] = v45 | ((unint64_t)v46 << 16);
    v52 = v47;
    *(_OWORD *)v53 = v48;
    *(_QWORD *)&v53[16] = v49;
    *(_WORD *)&v53[24] = v50;
    sub_1002B1E20((uint64_t)&v44);
    sub_100674DD8(a3, (uint64_t)v51);
    sub_10001EF3C(a1, a2);
    sub_1002B1E4C((uint64_t)&v44);
    return sub_1002B1E4C((uint64_t)&v44);
  }
  else
  {
    v29 = a4;
    if (!a4)
    {
      v30 = sub_10067C6B4();
      v29 = swift_allocError(&type metadata for TagCommandManager.TagCommandManagerError, v30, 0, 0);
    }
    *(_QWORD *)v51 = v29;
    *(_OWORD *)&v51[8] = 0u;
    v52 = 0u;
    memset(v53, 0, 25);
    v53[25] = 1;
    swift_errorRetain(a4);
    swift_errorRetain(v29);
    sub_100674DD8(a3, (uint64_t)v51);
    swift_errorRelease(v29);
    return swift_errorRelease(v29);
  }
}

uint64_t sub_10067A718(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  __int128 v38;
  unsigned __int8 v39;
  unsigned __int16 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unsigned __int8 v44;
  _BYTE v45[24];
  __int128 v46;
  _BYTE v47[26];

  v37 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v28 - v12;
  if (qword_1010EA320 != -1)
    swift_once(&qword_1010EA320, sub_100B5E35C);
  v34 = v11;
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7E10);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v31(v13, a2, v7);
  swift_errorRetain(a3);
  v16 = swift_errorRetain(a3);
  v32 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v35 = a2;
    v36 = a4;
    v19 = swift_slowAlloc(32, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    v30 = swift_slowAlloc(32, -1);
    *(_QWORD *)v45 = v30;
    *(_DWORD *)v19 = 141558531;
    *(_QWORD *)&v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 8, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v7, v20);
    *(_QWORD *)&v38 = sub_100016940(v21, v22, (uint64_t *)v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 8, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    v33 = *(void (**)(char *, uint64_t))(v8 + 8);
    v33(v13, v7);
    *(_WORD *)(v19 + 22) = 2114;
    if (a3)
    {
      swift_errorRetain(a3);
      v23 = _swift_stdlib_bridgeErrorToNSError(a3);
      *(_QWORD *)&v38 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 8, v19 + 24, v19 + 32);
    }
    else
    {
      *(_QWORD *)&v38 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 8, v19 + 24, v19 + 32);
      v23 = 0;
    }
    v24 = v29;
    *v29 = v23;
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "#Durian: TagCommandManager: didFetchUserStats object: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v19, 0x20u);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v24, 1, v25);
    swift_slowDealloc(v24, -1, -1);
    v26 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    a2 = v35;
    if (!a3)
      goto LABEL_10;
LABEL_7:
    *(_QWORD *)v45 = a3;
    *(_OWORD *)&v45[8] = 0u;
    v46 = 0u;
    memset(v47, 0, 25);
    v47[25] = 1;
    swift_errorRetain(a3);
    sub_100674DD8(a2, (uint64_t)v45);
    return swift_errorRelease(a3);
  }
  v33 = *(void (**)(char *, uint64_t))(v8 + 8);
  v33(v13, v7);
  swift_errorRelease(a3);
  swift_errorRelease(a3);

  if (a3)
    goto LABEL_7;
LABEL_10:
  sub_1006B0A68(v37, (uint64_t)&v38);
  *(_OWORD *)v45 = v38;
  *(_QWORD *)&v45[16] = v39 | ((unint64_t)v40 << 16);
  v46 = v41;
  *(_OWORD *)v47 = v42;
  *(_QWORD *)&v47[16] = v43;
  *(_WORD *)&v47[24] = v44;
  sub_1002B1E20((uint64_t)&v38);
  sub_100674DD8(a2, (uint64_t)v45);
  sub_1002B1E4C((uint64_t)&v38);
  return sub_1002B1E4C((uint64_t)&v38);
}

uint64_t sub_10067AE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = static os_log_type_t.error.getter(v5);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v9 = qword_1011B7D50;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  v21 = a1;
  swift_errorRetain(a1);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v13 = String.init<A>(describing:)(&v21, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  sub_10000F9B8(a2, (uint64_t)v7, &qword_1010ED860);
  v17 = String.init<A>(describing:)(v7, v4);
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 72) = v17;
  *(_QWORD *)(v11 + 80) = v18;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "#Durian: TagCommandManager: didFailWithError: %@, forDevice: %@", 63, 2, v11);
  return swift_bridgeObjectRelease();
}

void sub_10067B000(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v69 = a4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v70 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v10);
  v68 = (char *)&v65 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v65 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v65 - v16;
  if (qword_1010E9930 != -1)
    swift_once(&qword_1010E9930, sub_1000AEA0C);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B6730);
  v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v74 = a2;
  v20 = v73(v17, a2, v7);
  v72 = v19;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v71 = a1;
  if (v23)
  {
    v24 = swift_slowAlloc(32, -1);
    v66 = a3;
    v25 = v24;
    v65 = swift_slowAlloc(32, -1);
    v75 = a1;
    v76 = v65;
    *(_DWORD *)v25 = 134218499;
    v67 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2160;
    v75 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v25 + 14, v25 + 22);
    *(_WORD *)(v25 + 22) = 2081;
    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v26);
    v75 = sub_100016940(v27, v28, &v76);
    v15 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v25 + 24, v25 + 32);
    swift_bridgeObjectRelease();
    v29 = *(void (**)(char *, uint64_t))(v8 + 8);
    v29(v17, v7);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "        #Durian: TagCommandManager: didFetch batteryStatus: [%lu] for device: %{private,mask.hash}s.", (uint8_t *)v25, 0x20u);
    v30 = v65;
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v31 = v25;
    a3 = v66;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    v29 = *(void (**)(char *, uint64_t))(v8 + 8);
    v29(v17, v7);
  }

  v32 = v74;
  if (a3)
  {
    v73(v15, v74, v7);
    swift_errorRetain(a3);
    v33 = swift_errorRetain(a3);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(32, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      v38 = swift_slowAlloc(32, -1);
      v73 = (uint64_t (*)(char *, uint64_t, uint64_t))v29;
      v74 = v38;
      v76 = v38;
      *(_DWORD *)v36 = 138543875;
      swift_errorRetain(a3);
      v39 = _swift_stdlib_bridgeErrorToNSError(a3);
      v75 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 4, v36 + 12);
      *v37 = v39;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      *(_WORD *)(v36 + 12) = 2160;
      v75 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 14, v36 + 22);
      *(_WORD *)(v36 + 22) = 2081;
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v7, v40);
      v75 = sub_100016940(v41, v42, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v73)(v15, v7);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "            #Durian: TagCommandManager: didFetch batteryStatus error: %{public}@ for device: %{private,mask.hash}s.", (uint8_t *)v36, 0x20u);
      v43 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v37, 1, v43);
      swift_slowDealloc(v37, -1, -1);
      v44 = v74;
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      v29(v15, v7);
    }

  }
  else
  {
    v45 = sub_100DC731C(v71);
    if (v45 == 7)
    {
      v46 = v29;
      v47 = v73(v70, v32, v7);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.error.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(32, -1);
        v51 = swift_slowAlloc(32, -1);
        *(_DWORD *)v50 = 134218499;
        v75 = v71;
        v76 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v50 + 4, v50 + 12);
        *(_WORD *)(v50 + 12) = 2160;
        v75 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v50 + 14, v50 + 22);
        *(_WORD *)(v50 + 22) = 2081;
        v52 = v70;
        v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v54 = dispatch thunk of CustomStringConvertible.description.getter(v7, v53);
        v75 = sub_100016940(v54, v55, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v50 + 24, v50 + 32);
        swift_bridgeObjectRelease();
        v46(v52, v7);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "            Unable to init BatteryLevel from CLFindMyAccessoryBatteryStatus %lu for beacon %{private,mask.hash}s.", (uint8_t *)v50, 0x20u);
        swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v50, -1, -1);
      }
      else
      {
        v46(v70, v7);
      }

    }
    else
    {
      v56 = v45;
      type metadata accessor for Transaction(0);
      v57 = v68;
      v73(v68, v32, v7);
      v58 = *(unsigned __int8 *)(v8 + 80);
      v59 = (v58 + 16) & ~v58;
      v60 = v7;
      v61 = (v59 + v9) & 0xFFFFFFFFFFFFFFF8;
      v62 = swift_allocObject(&unk_101085918, v61 + 16, v58 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v62 + v59, v57, v60);
      *(_BYTE *)(v62 + v59 + v9) = v56;
      v63 = v69;
      *(_QWORD *)(v61 + v62 + 8) = v69;
      v64 = v63;
      static Transaction.asyncTask(name:block:)("didFetchBattery", 15, 2, &unk_101102FC0, v62);
      swift_release();
    }
  }
}

uint64_t sub_10067B76C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];

  v38 = a3;
  v39 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v8, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "#Durian: TagCommandManager: didConnectDevice: %@", 48, 2, v15);
  swift_bridgeObjectRelease();
  v20 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101085878, v23 + 8, v21 | 7);
  *(_QWORD *)(v24 + 16) = v20;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v22, (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v25 = v39;
  *(_QWORD *)(v24 + v23) = v39;
  aBlock[4] = sub_10067C26C;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085890;
  v26 = _Block_copy(aBlock);
  v27 = v20;
  v28 = swift_errorRetain(v25);
  v29 = v37;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release();
}

uint64_t sub_10067BADC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[6];

  v33 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  __chkstk_darwin(v3);
  v36 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  __chkstk_darwin(v5);
  v32 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v12 = qword_1011B7D50;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of CustomStringConvertible.description.getter(v7, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "#Durian: didDisconnectDevice: %@", 32, 2, v14);
  swift_bridgeObjectRelease();
  v19 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  v20 = *(unsigned __int8 *)(v8 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = swift_allocObject(&unk_1010857D8, v21 + v9, v20 | 7);
  *(_QWORD *)(v22 + 16) = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v22 + v21, (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_10067C214;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010857F0;
  v23 = _Block_copy(aBlock);
  v24 = v19;
  v25 = v32;
  static DispatchQoS.unspecified.getter(v24);
  v39 = _swiftEmptyArrayStorage;
  v26 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v28 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v29 = v36;
  v30 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v27, v28, v38, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v25, v29, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v25, v35);
  return swift_release();
}

uint64_t sub_10067BE30(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[6];

  v45 = a5;
  v46 = a4;
  v47 = a1;
  v48 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v6 - 8);
  v53 = v6;
  __chkstk_darwin(v6);
  v51 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v8 - 8);
  v50 = v8;
  __chkstk_darwin(v8);
  v44 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v16 = qword_1011B7D50;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v20 = dispatch thunk of CustomStringConvertible.description.getter(v10, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "#Durian: didFetchHawkeyeSerialNumber: %@", 40, 2, v18);
  swift_bridgeObjectRelease();
  v23 = v45;
  v43 = *(_QWORD *)&v45[OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v10);
  v24 = *(unsigned __int8 *)(v11 + 80);
  v25 = (v24 + 24) & ~v24;
  v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_101085738, v27 + 16, v24 | 7);
  *(_QWORD *)(v28 + 16) = v23;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v28 + v25, v14, v10);
  v30 = v46;
  v29 = v47;
  *(_QWORD *)(v28 + v26) = v46;
  v31 = (uint64_t *)(v28 + v27);
  v32 = v48;
  *v31 = v29;
  v31[1] = v32;
  aBlock[4] = sub_10067C1CC;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101085750;
  v33 = _Block_copy(aBlock);
  v34 = v23;
  swift_errorRetain(v30);
  v35 = sub_10001BBBC(v29, v32);
  v36 = v44;
  static DispatchQoS.unspecified.getter(v35);
  v54 = _swiftEmptyArrayStorage;
  v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v40 = v51;
  v41 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v38, v39, v53, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
  return swift_release();
}

uint64_t sub_10067C1CC()
{
  return sub_10067CB68((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100676F44);
}

uint64_t sub_10067C1DC()
{
  uint64_t *v0;

  return sub_100677418(v0[2], v0[3], v0[4], v0[5], "#Durian: fetchHawkeyeSerialNumberFuture completed with error - %@", 65, "#Durian: fetchHawkeyeSerialNumberFuture completed successfully.", 63);
}

uint64_t sub_10067C214()
{
  return sub_100264E14((uint64_t (*)(_QWORD, uint64_t))sub_1006769A0);
}

uint64_t sub_10067C220()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10067C244()
{
  uint64_t v0;

  sub_10066B318(*(_QWORD *)(v0 + 16), 0);
}

uint64_t sub_10067C260()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C26C()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_1006763C0);
}

uint64_t sub_10067C278()
{
  uint64_t v0;

  return sub_100676908(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10067C280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + v0;
  v8 = v6 + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v8, v5);
}

uint64_t sub_10067C2F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = v0 + v3;
  v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + v0 + 8);
  v7 = *(_BYTE *)(v0 + v4);
  v8 = (_QWORD *)swift_task_alloc(dword_101102FBC);
  *(_QWORD *)(v1 + 16) = v8;
  *v8 = v1;
  v8[1] = sub_100004C28;
  return sub_100675C20(v5, v7, v6);
}

uint64_t sub_10067C384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10067C3F8()
{
  return sub_100264E14(sub_100676314);
}

uint64_t sub_10067C404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10067C4BC(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8), *(_QWORD *)(v0 + v6 + 16), *(_QWORD *)(v0 + v6 + 24), *(_QWORD *)(v0 + v6 + 32), *(_QWORD *)(v0 + v6 + 40), *(_QWORD *)(v0 + v6 + 48), *(_QWORD *)(v0 + v6 + 56), *(_BYTE *)(v0 + v6 + 64), *(_BYTE *)(v0 + v6 + 65));
  return swift_deallocObject(v0, v6 + 66, v5);
}

uint64_t sub_10067C4BC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return sub_10001EF3C(a1, a2);
}

uint64_t sub_10067C4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101102FC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10067C514()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100675258(*(_QWORD *)(v0 + 16), v0 + v2, v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_10067C558(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, char a10)
{
  if ((a10 & 1) != 0)
    return swift_errorRetain(a1);
  else
    return sub_10001BD08(a1, a2);
}

uint64_t sub_10067C568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 82) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10067C4BC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_BYTE *)(v0 + 80), *(_BYTE *)(v0 + 81));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10067C61C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 82) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100675664(v0 + 16, v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10067C660(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_WORD *)(a1 + 64));
  return a1;
}

unint64_t sub_10067C6B4()
{
  unint64_t result;

  result = qword_101102FD0;
  if (!qword_101102FD0)
  {
    result = swift_getWitnessTable(byte_100E474B0, &type metadata for TagCommandManager.TagCommandManagerError);
    atomic_store(result, (unint64_t *)&qword_101102FD0);
  }
  return result;
}

uint64_t sub_10067C6F8()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C704()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_1006748D0);
}

uint64_t sub_10067C710()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_errorRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10067C724()
{
  uint64_t v0;

  return sub_100674C30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10067C72C()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C738()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_100673B08);
}

uint64_t sub_10067C748()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C75C()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 16))
    return Future.finish(error:)(*(_QWORD *)(v0 + 24));
  return result;
}

uint64_t sub_10067C788()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release);
}

void sub_10067C798()
{
  uint64_t v0;

  sub_10067470C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10067C7A0()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C7AC()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_100673398);
}

uint64_t sub_10067C7BC()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C7C8()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_100672C8C);
}

uint64_t sub_10067C7D8()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C7E4()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_1006713A4);
}

uint64_t sub_10067C7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10067C894()
{
  return sub_10067CB68((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100672600);
}

uint64_t sub_10067C8A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10067C8D0()
{
  uint64_t v0;

  sub_100672BD4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10067C8DC()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C8E8()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066FB18);
}

uint64_t sub_10067C8F4()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  if (*(_QWORD *)(v0 + 16))
  {
    v2 = 1;
    return Future.finish(result:)(&v2);
  }
  return result;
}

uint64_t sub_10067C92C()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10067C938()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_100670C68);
}

uint64_t sub_10067C948()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_errorRelease(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10067C97C()
{
  uint64_t *v0;

  return sub_100673AC0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10067C998()
{
  return sub_10067C9A4((void (*)(_QWORD))&_swift_errorRelease);
}

uint64_t sub_10067C9A4(void (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = v5 | 7;
  v8 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  a1(*(_QWORD *)(v1 + v8));
  return swift_deallocObject(v1, v8 + 8, v7);
}

uint64_t sub_10067CA38()
{
  return sub_10067CA44((uint64_t (*)(_QWORD, unint64_t, _QWORD))sub_10066F4BC);
}

uint64_t sub_10067CA44(uint64_t (*a1)(_QWORD, unint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10067CA98()
{
  return sub_100330A28((void (*)(_QWORD))&_swift_errorRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10067CAAC()
{
  uint64_t v0;

  return sub_10066F978(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10067CAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(_QWORD *)(v0 + v6));
  sub_10001BC14(*(_QWORD *)(v0 + v7), *(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10067CB5C()
{
  return sub_10067CB68((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_10066EFE8);
}

uint64_t sub_10067CB68(uint64_t (*a1)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a1(*(_QWORD *)(v1 + 16), v1 + v3, *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10067CBD0()
{
  _QWORD *v0;

  swift_errorRelease(v0[2]);
  swift_release();
  sub_10001BC14(v0[4], v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10067CC04()
{
  uint64_t *v0;

  return sub_100677418(v0[2], v0[3], v0[4], v0[5], "#Durian: fetchFirmwareVersion completed with error - %@", 55, "#Durian: fetchFirmwareVersion completed successfully.", 53);
}

uint64_t storeEnumTagSinglePayload for TagCommandManager.TagCommandManagerError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10067CC78 + 4 * asc_100E47260[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10067CC98 + 4 * byte_100E47265[v4]))();
}

_BYTE *sub_10067CC78(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10067CC98(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10067CCA0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10067CCA8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10067CCB0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10067CCB8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TagCommandManager.TagCommandManagerError()
{
  return &type metadata for TagCommandManager.TagCommandManagerError;
}

unint64_t sub_10067CCD8()
{
  unint64_t result;

  result = qword_101102FE0;
  if (!qword_101102FE0)
  {
    result = swift_getWitnessTable(aY_46, &type metadata for TagCommandManager.TagCommandManagerError);
    atomic_store(result, (unint64_t *)&qword_101102FE0);
  }
  return result;
}

uint64_t sub_10067CEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10067CF20()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B73D8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B73D8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000015, 0x8000000100EDF690);
}

uint64_t sub_10067CFA0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t result;
  char v12;

  v1 = v0;
  swift_defaultActor_initialize(v0);
  v12 = 0;
  v2 = sub_10001A9A8(&qword_101103188);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v0[15] = CurrentValueSubject.init(_:)(&v12);
  v3 = objc_msgSend((id)objc_opt_self(NRPairedDeviceRegistry), "sharedInstance");
  if (v3)
  {
    v0[16] = v3;
    v0[17] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NetworkMonitor()), "init");
    v0[18] = _swiftEmptyArrayStorage;
    v0[19] = 0;
    v0[20] = _swiftEmptyArrayStorage;
    v4 = swift_retain();
    v5 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v4);
    swift_release();
    v0[14] = v5;
    if (qword_1010E9E10 != -1)
      swift_once(&qword_1010E9E10, sub_10067CF20);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B73D8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Created iOS Maintenance Connection Observer", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    return (uint64_t)v1;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x8000000100EDF780, "searchpartyd/MaintenanceConnectionObserver.swift", 48, 2, 72, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10067D16C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  int v4;
  _BYTE v6[24];

  swift_beginAccess(v0 + 144, v6, 0, 0);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 144));
    for (i = 0; i != v2; ++i)
    {
      v4 = *(_DWORD *)(v1 + 4 * i + 32);
      notify_cancel(v4);
    }
    swift_bridgeObjectRelease(v1);
  }
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10067D224()
{
  uint64_t v0;

  sub_10067D16C();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for MaintenanceConnectionObserveriOS()
{
  return objc_opt_self(_TtC12searchpartyd32MaintenanceConnectionObserveriOS);
}

uint64_t sub_10067D25C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110301C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10067D2B0(a2);
}

uint64_t sub_10067D2B0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_10001A9A8(&qword_1010EECC8);
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS.QoSClass(0);
  v2[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[11] = v5;
  v2[12] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101107E90);
  v2[13] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[14] = v7;
  v2[15] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10067D360, v1, 0);
}

uint64_t sub_10067D360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v5 + 152) = *(_QWORD *)(v0 + 56);
  swift_retain();
  v7 = swift_release();
  *(_QWORD *)(v0 + 40) = AnyCurrentValuePublisher.publisher.getter(v7);
  v8 = sub_10001F6FC();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for DispatchQoS.QoSClass.default(_:), v4);
  v9 = static OS_dispatch_queue.global(qos:)(v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  *(_QWORD *)(v0 + 48) = v9;
  v10 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FAAC0);
  v12 = sub_1000193A4((unint64_t *)&unk_101107EC0, (uint64_t *)&unk_1010FAAC0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v13 = sub_1001C7EF4();
  Publisher.receive<A>(on:options:)(v0 + 48, v6, v11, v8, v12, v13);
  sub_1002ACC2C(v6);

  swift_release();
  v14 = swift_allocObject(&unk_101086338, 24, 7);
  swift_weakInit(v14 + 16, v5);
  v15 = sub_1000193A4(&qword_101107ED0, (uint64_t *)&unk_101107E90, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  Publisher<>.sink(receiveValue:)(sub_10067F0E0, v14, v21, v15);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v1, v21);
  swift_beginAccess(v5 + 160, v0 + 16, 33, 0);
  v16 = sub_10001A9A8(&qword_1010ECF68);
  v17 = sub_1000193A4(&qword_1010ECF70, &qword_1010ECF68, (const char *)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v5 + 160, v16, v17);
  swift_endAccess(v0 + 16);
  swift_release();
  sub_10067E274();
  v18 = swift_allocObject(&unk_101086338, 24, 7);
  swift_weakInit(v18 + 16, v5);
  swift_retain();
  NetworkMonitor.startMonitoring(block:)((uint64_t)sub_10067F0E8, v18);
  swift_release_n(v18, 2);
  v19 = (_QWORD *)swift_task_alloc(dword_101103024);
  *(_QWORD *)(v0 + 128) = v19;
  *v19 = v0;
  v19[1] = sub_10067D628;
  return sub_10067D7F0();
}

uint64_t sub_10067D628()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 120);
  v2 = *(_QWORD *)(*v0 + 96);
  v3 = *(_QWORD *)(*v0 + 72);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10067D698(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v4);
    static Transaction.asyncTask(name:block:)("UpdateMaintenancePolicy.DevicesChanged", 38, 2, &unk_101103180, v4);
    return swift_release_n(v4, 2);
  }
  return result;
}

uint64_t sub_10067D720()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101103024);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_10067D7F0();
}

uint64_t sub_10067D768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v4);
    static Transaction.asyncTask(name:block:)("UpdateMaintenancePolicy.networkMonitor", 38, 2, &unk_101103170, v4);
    return swift_release_n(v4, 2);
  }
  return result;
}

uint64_t sub_10067D7F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[6] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010ED860);
  v1[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v1[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[12] = v6;
  v1[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10067D89C, v0, 0);
}

void sub_10067D89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t v51;
  NSObject *log;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v0 + 112) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 136);
    v4 = unk_101103164;
    v53 = (void (*)(uint64_t, uint64_t))((char *)&dword_101103160 + dword_101103160);
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 120) = v5;
    *v5 = v0;
    v5[1] = sub_10067DD78;
    v53(v3, v2);
    return;
  }
  v6 = objc_msgSend(*(id *)(v1 + 128), "getActivePairedDevice");
  v7 = v6;
  if (v6)
    v8 = 1;
  else
    v8 = 2;
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 128), v6);
  v9 = *(unsigned __int8 *)(v0 + 128);
  *(_BYTE *)(v0 + 129) = v8;
  CurrentValueSubject.send(_:)(v0 + 129);
  if (qword_1010E9E10 != -1)
    swift_once(&qword_1010E9E10, sub_10067CF20);
  v11 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 104);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B73D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  v14 = v7;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (!os_log_type_enabled(v15, v16))
  {
    v39 = *(_QWORD *)(v0 + 96);
    v38 = *(_QWORD *)(v0 + 104);
    v40 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
LABEL_31:
    v44 = *(_QWORD *)(v0 + 72);
    v45 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v45);
    swift_task_dealloc(v44);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  log = v15;
  v51 = v16;
  v17 = swift_slowAlloc(42, -1);
  v50 = swift_slowAlloc(96, -1);
  v54 = v50;
  *(_DWORD *)v17 = 136446979;
  if (v7)
    v18 = 1684826487;
  else
    v18 = 7105633;
  if (v7)
    v19 = 0xE400000000000000;
  else
    v19 = 0xE300000000000000;
  *(_QWORD *)(v0 + 32) = sub_100016940(v18, v19, &v54);
  v49 = v0 + 32;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 4, v17 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v17 + 12) = 2082;
  v20 = 0xE400000000000000;
  v21 = 7105633;
  if (v9 == 1)
    v21 = 1684826487;
  else
    v20 = 0xE300000000000000;
  if (v9)
    v22 = v21;
  else
    v22 = 1701736302;
  if (v9)
    v23 = v20;
  else
    v23 = 0xE400000000000000;
  *(_QWORD *)(v0 + 16) = sub_100016940(v22, v23, &v54);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 14, v17 + 22);
  swift_bridgeObjectRelease();
  *(_WORD *)(v17 + 22) = 2160;
  *(_QWORD *)(v0 + 40) = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v17 + 24, v17 + 32);
  *(_WORD *)(v17 + 32) = 2081;
  v24 = v0 + 24;
  if (!v7)
  {
    v37 = 0xE400000000000000;
    v35 = 1701736302;
    goto LABEL_30;
  }
  v25 = objc_msgSend(v14, "pairingID", v49);
  v26 = *(_QWORD *)(v0 + 80);
  if (v25)
  {
    v27 = v25;
    v29 = *(_QWORD *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 72);
    v30 = *(_QWORD *)(v0 + 56);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v26, v28, v30);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v30);
    v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v26, 1, v30);
    if ((_DWORD)v31 != 1)
    {
      v32 = *(_QWORD *)(v0 + 80);
      v33 = *(_QWORD *)(v0 + 56);
      v34 = *(_QWORD *)(v0 + 64);
      v35 = UUID.uuidString.getter(v31);
      v37 = v36;
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
      v24 = v0 + 24;
LABEL_30:
      v41 = *(_QWORD *)(v0 + 96);
      v42 = *(_QWORD *)(v0 + 104);
      v43 = *(_QWORD *)(v0 + 88);
      *(_QWORD *)(v0 + 24) = sub_100016940(v35, v37, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, v49, v17 + 34, v17 + 42);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, log, v51, "Updated iOS Maintenance Connection policy (New: %{public}s, Old: %{public}s) - activePairedDevice:%{private,mask.hash}s.", (uint8_t *)v17, 0x2Au);
      swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
      goto LABEL_31;
    }
  }
  else
  {
    v48 = v0 + 56;
    v47 = *(_QWORD *)(v0 + 56);
    v46 = *(_QWORD *)(v48 + 8);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v26, 1, 1, v47);
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_10067DD78(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 131) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10067DDD8, v3, 0);
}

void sub_10067DDD8()
{
  uint64_t v0;
  int v1;
  id v2;
  void *v3;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_type_t v47;
  NSObject *log;
  uint64_t v49;

  v1 = *(unsigned __int8 *)(v0 + 131);
  if (v1 != 3)
  {
    *(_BYTE *)(v0 + 130) = v1;
    CurrentValueSubject.send(_:)(v0 + 130);
    swift_release();
LABEL_31:
    v40 = *(_QWORD *)(v0 + 72);
    v41 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v41);
    swift_task_dealloc(v40);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  swift_release();
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 48) + 128), "getActivePairedDevice");
  v3 = v2;
  if (v2)
    v4 = 1;
  else
    v4 = 2;
  AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 128), v2);
  v5 = *(unsigned __int8 *)(v0 + 128);
  *(_BYTE *)(v0 + 129) = v4;
  CurrentValueSubject.send(_:)(v0 + 129);
  if (qword_1010E9E10 != -1)
    swift_once(&qword_1010E9E10, sub_10067CF20);
  v7 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B73D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  v10 = v3;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (!os_log_type_enabled(v11, v12))
  {
    v35 = *(_QWORD *)(v0 + 96);
    v34 = *(_QWORD *)(v0 + 104);
    v36 = *(_QWORD *)(v0 + 88);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    goto LABEL_31;
  }
  log = v11;
  v47 = v12;
  v13 = swift_slowAlloc(42, -1);
  v46 = swift_slowAlloc(96, -1);
  v49 = v46;
  *(_DWORD *)v13 = 136446979;
  if (v3)
    v14 = 1684826487;
  else
    v14 = 7105633;
  if (v3)
    v15 = 0xE400000000000000;
  else
    v15 = 0xE300000000000000;
  *(_QWORD *)(v0 + 32) = sub_100016940(v14, v15, &v49);
  v45 = v0 + 32;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 4, v13 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v13 + 12) = 2082;
  v16 = 0xE400000000000000;
  v17 = 7105633;
  if (v5 == 1)
    v17 = 1684826487;
  else
    v16 = 0xE300000000000000;
  if (v5)
    v18 = v17;
  else
    v18 = 1701736302;
  if (v5)
    v19 = v16;
  else
    v19 = 0xE400000000000000;
  *(_QWORD *)(v0 + 16) = sub_100016940(v18, v19, &v49);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 14, v13 + 22);
  swift_bridgeObjectRelease();
  *(_WORD *)(v13 + 22) = 2160;
  *(_QWORD *)(v0 + 40) = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 24, v13 + 32);
  *(_WORD *)(v13 + 32) = 2081;
  v20 = v0 + 24;
  if (!v3)
  {
    v33 = 0xE400000000000000;
    v31 = 1701736302;
    goto LABEL_30;
  }
  v21 = objc_msgSend(v10, "pairingID", v45);
  v22 = *(_QWORD *)(v0 + 80);
  if (v21)
  {
    v23 = v21;
    v25 = *(_QWORD *)(v0 + 64);
    v24 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 56);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v22, v24, v26);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v26);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v26);
    if ((_DWORD)v27 != 1)
    {
      v28 = *(_QWORD *)(v0 + 80);
      v29 = *(_QWORD *)(v0 + 56);
      v30 = *(_QWORD *)(v0 + 64);
      v31 = UUID.uuidString.getter(v27);
      v33 = v32;
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
      v20 = v0 + 24;
LABEL_30:
      v37 = *(_QWORD *)(v0 + 96);
      v38 = *(_QWORD *)(v0 + 104);
      v39 = *(_QWORD *)(v0 + 88);
      *(_QWORD *)(v0 + 24) = sub_100016940(v31, v33, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v20, v45, v13 + 34, v13 + 42);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, log, v47, "Updated iOS Maintenance Connection policy (New: %{public}s, Old: %{public}s) - activePairedDevice:%{private,mask.hash}s.", (uint8_t *)v13, 0x2Au);
      swift_arrayDestroy(v46, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v39);
      goto LABEL_31;
    }
  }
  else
  {
    v44 = v0 + 56;
    v43 = *(_QWORD *)(v0 + 56);
    v42 = *(_QWORD *)(v44 + 8);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v22, 1, 1, v43);
    __break(1u);
  }

  __break(1u);
}

void sub_10067E274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  id v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  void (*v48)(char *, _QWORD, uint64_t);
  unsigned int v49;
  _QWORD *v50;
  int out_token[2];
  uint64_t aBlock[6];
  __int128 v53;
  uint64_t v54;
  _QWORD v55[5];

  v46 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v43 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v44 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS.QoSClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = xmmword_100E221E0;
  v47 = &v54;
  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(NRPairedDeviceRegistryDeviceDidBecomeActive);
  v55[0] = v8;
  v55[1] = static String._unconditionallyBridgeFromObjectiveC(_:)(NRPairedDeviceRegistryDeviceDidBecomeInactive);
  v55[2] = v9;
  v55[3] = static String._unconditionallyBridgeFromObjectiveC(_:)(NRPairedDeviceRegistryWatchDidBecomeActiveDarwinNotification);
  v55[4] = v10;
  sub_10001F6FC();
  v11 = 0;
  v50 = (_QWORD *)(v0 + 144);
  v49 = enum case for DispatchQoS.QoSClass.default(_:);
  v12 = v5;
  v48 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  do
  {
    v14 = v55[v11 - 1];
    v13 = v55[v11];
    out_token[0] = 0;
    v48(v7, v49, v4);
    swift_bridgeObjectRetain(v13);
    v15 = static OS_dispatch_queue.global(qos:)(v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v4);
    v16 = swift_allocObject(&unk_101086338, 24, 7);
    swift_weakInit(v16 + 16, v0);
    aBlock[4] = (uint64_t)sub_10067E93C;
    aBlock[5] = v16;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_10067CEE4;
    aBlock[3] = (uint64_t)&unk_101086350;
    v17 = _Block_copy(aBlock);
    swift_release();
    v18 = String.utf8CString.getter(v14, v13);
    swift_bridgeObjectRelease();
    notify_register_dispatch((const char *)(v18 + 32), out_token, v15, v17);
    swift_release();
    _Block_release(v17);

    v19 = out_token[0];
    swift_beginAccess(v50, aBlock, 33, 0);
    v20 = *(_QWORD **)(v0 + 144);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    *(_QWORD *)(v0 + 144) = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v20 = sub_1007CA170(0, v20[2] + 1, 1, v20);
      *v50 = v20;
    }
    v23 = v20[2];
    v22 = v20[3];
    if (v23 >= v22 >> 1)
    {
      v20 = sub_1007CA170((_QWORD *)(v22 > 1), v23 + 1, 1, v20);
      *v50 = v20;
    }
    v20[2] = v23 + 1;
    *((_DWORD *)v20 + v23 + 8) = v19;
    swift_endAccess(aBlock);
    v11 += 2;
  }
  while (v11 != 6);
  swift_arrayDestroy(v47, v53, &type metadata for String);
  v24 = objc_msgSend(*(id *)(v0 + 128), "getActivePairedDevice");
  if (!v24)
  {
    v35 = 0xE400000000000000;
    v33 = 1701736302;
    goto LABEL_12;
  }
  v25 = v24;
  v26 = objc_msgSend(v24, "pairingID");

  if (!v26)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))(v44, 1, 1, v46);
    goto LABEL_19;
  }
  v27 = v43;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

  v28 = v45;
  v29 = v44;
  v30 = v27;
  v31 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v44, v30, v46);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v31);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v29, 1, v31);
  if ((_DWORD)v32 == 1)
  {
LABEL_19:
    __break(1u);
    return;
  }
  v33 = UUID.uuidString.getter(v32);
  v35 = v34;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v31);
LABEL_12:
  if (qword_1010E9E10 != -1)
    swift_once(&qword_1010E9E10, sub_10067CF20);
  v36 = type metadata accessor for Logger(0);
  sub_10001A9E8(v36, (uint64_t)qword_1011B73D8);
  swift_bridgeObjectRetain(v35);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(32, -1);
    *(_DWORD *)v40 = 141558275;
    *(_QWORD *)out_token = 1752392040;
    aBlock[0] = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(out_token, aBlock, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2081;
    swift_bridgeObjectRetain(v35);
    *(_QWORD *)out_token = sub_100016940(v33, v35, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(out_token, aBlock, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease_n(v35, 3);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Registered active paired device changed handlers. Current device: %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v35, 2);
  }

}

uint64_t sub_10067E890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v4);
    static Transaction.asyncTask(name:block:)("UpdateMaintenancePolicy.pairedDevice", 36, 2, &unk_101103158, v4);
    return swift_release_n(v4, 2);
  }
  return result;
}

uint64_t sub_10067E918()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10067E93C(uint64_t a1)
{
  uint64_t v1;

  return sub_10067E890(a1, v1);
}

uint64_t sub_10067E944()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_101103154);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  v2 = (_QWORD *)swift_task_alloc(dword_101103024);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_10067D7F0();
}

uint64_t sub_10067E9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  return swift_task_switch(sub_10067E9C0, 0, 0);
}

uint64_t sub_10067E9C0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 168) = v2;
    *v2 = v0;
    v2[1] = sub_10067EAA4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10067EAA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10067EB00, 0, 0);
}

uint64_t sub_10067EB00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_10067EB5C, *(_QWORD *)(v0 + 176), 0);
  else
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(3);
}

uint64_t sub_10067EB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 184) = v3;
  v4 = sub_10001A9A8(&qword_1010EC840);
  *v3 = v0;
  v3[1] = sub_10067EBE4;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10001ED30, v1, v4);
}

uint64_t sub_10067EBE4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  swift_release();
  return swift_task_switch(sub_10067EC3C, *(_QWORD *)(v1 + 176), 0);
}

uint64_t sub_10067EC3C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 120);
  return swift_task_switch(sub_10067EC58, 0, 0);
}

uint64_t sub_10067EC58()
{
  _QWORD *v0;

  v0[25] = *(_QWORD *)(v0[24] + 16);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10067EC9C, v0[22], 0);
}

uint64_t sub_10067EC9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 208) = v3;
  v4 = sub_10001A9A8(&qword_1010EE100);
  *v3 = v0;
  v3[1] = sub_10067ED24;
  return unsafeBlocking<A>(_:)(v0 + 128, sub_100068004, v1, v4);
}

uint64_t sub_10067ED24()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 208));
  swift_release();
  return swift_task_switch(sub_10067ED80, *(_QWORD *)(v1 + 176), 0);
}

uint64_t sub_10067ED80()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 128);
  return swift_task_switch(sub_10067ED9C, 0, 0);
}

uint64_t sub_10067ED9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[25];
  v2 = *(_QWORD *)(v0[27] + 16);
  swift_bridgeObjectRelease();
  if (__OFADD__(v1, v2))
  {
    __break(1u);
    goto LABEL_5;
  }
  v0[28] = v1 + v2;
  if (qword_1010E9D08 != -1)
LABEL_5:
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v3 = qword_1011B71A8;
  v0[29] = qword_1011B71A8;
  v4 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[30] = v5;
  *v5 = v0;
  v5[1] = sub_10067EE6C;
  return unsafeBlocking<A>(_:)(v0 + 17, sub_100033264, v3, &type metadata for Configuration);
}

uint64_t sub_10067EE6C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  swift_release();
  return swift_task_switch(sub_10067EEC8, 0, 0);
}

uint64_t sub_10067EEC8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  _BOOL4 v3;
  void *v4;
  id v5;
  id v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;

  v1 = sub_100C1BB54(*(_QWORD *)(v0 + 136));
  v2 = swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    AnyCurrentValuePublisher.value.getter((_QWORD *)(v0 + 144), v2);
    v3 = *(_QWORD *)(v0 + 144) > 0;
  }
  else
  {
    v3 = 0;
  }
  v4 = *(void **)(*(_QWORD *)(v0 + 152) + OBJC_IVAR____TtC12searchpartyd14NetworkMonitor_evaluator);
  if (v4
    && ((v5 = objc_msgSend(v4, "path"),
         v6 = objc_msgSend(v5, "status"),
         v5,
         v6 == (id)1)
     || v6 == (id)3)
    || (*(uint64_t *)(v0 + 224) > 0 ? (v7 = 1) : (v7 = v3), v7 != 1))
  {
    swift_release();
    v14 = 3;
  }
  else
  {
    if (qword_1010E9E10 != -1)
      swift_once(&qword_1010E9E10, sub_10067CF20);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B73D8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *(_QWORD *)(v0 + 224) > 0;
      v13 = swift_slowAlloc(14, -1);
      *(_DWORD *)v13 = 67109376;
      *(_DWORD *)(v0 + 248) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 252, v13 + 4, v13 + 8);
      *(_WORD *)(v13 + 8) = 1024;
      *(_DWORD *)(v0 + 252) = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 252, v0 + 256, v13 + 10, v13 + 14);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Network is down - policy is no maintenance. hasShares: %{BOOL}d, hasOtherDeviecs: %{BOOL}d.", (uint8_t *)v13, 0xEu);
      swift_slowDealloc(v13, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v14 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_10067F0E0(uint64_t a1)
{
  uint64_t v1;

  return sub_10067D698(a1, v1);
}

uint64_t sub_10067F0E8(uint64_t a1)
{
  uint64_t v1;

  return sub_10067D768(a1, v1);
}

uint64_t sub_10067F0F0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110316C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_101103024);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_10067D7F0();
}

uint64_t sub_10067F154()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110317C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_101103024);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_10067D7F0();
}

uint64_t *sub_10067F1B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UUID(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10067F254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10067F29C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10067F30C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_OWORD *sub_10067F388(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_10067F3E4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10067F450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10067F45C);
}

uint64_t sub_10067F45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10067F4D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10067F4E4);
}

uint64_t sub_10067F4E4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockAckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1011031E8;
  if (!qword_1011031E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryPairingLockAckResponse);
  return result;
}

uint64_t sub_10067F594(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E475E0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10067F608@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v23 = a2;
  v25 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v24 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_101103220);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessoryPairingLockAckResponse(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_10067F8FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryPairingLockAckResponse.CodingKeys, &type metadata for AccessoryPairingLockAckResponse.CodingKeys, v13, v11, v12);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v21 = a1;
  v14 = v10;
  v16 = v24;
  v15 = v25;
  v28 = 0;
  v17 = v26;
  *(_QWORD *)v14 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v26);
  *((_QWORD *)v14 + 1) = v18;
  v27 = 1;
  v19 = sub_100252A08();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v27, v17, v15, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
  (*(void (**)(char *, _QWORD *, uint64_t))(v22 + 32))(&v14[*(int *)(v8 + 20)], v16, v15);
  sub_10067F940((uint64_t)v14, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
  return sub_10067F984((uint64_t)v14);
}

uint64_t sub_10067F838()
{
  _BYTE *v0;

  if (*v0)
    return 0x6449616E6D66;
  else
    return 0xD000000000000010;
}

uint64_t sub_10067F874@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10067FB64(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10067F898(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10067F8FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10067F8C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10067F8FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10067F8E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10067F608(a1, a2);
}

unint64_t sub_10067F8FC()
{
  unint64_t result;

  result = qword_101103228;
  if (!qword_101103228)
  {
    result = swift_getWitnessTable(byte_100E476E4, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103228);
  }
  return result;
}

uint64_t sub_10067F940(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10067F984(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessoryPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingLockAckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10067FA0C + 4 * byte_100E475B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10067FA40 + 4 * byte_100E475B0[v4]))();
}

uint64_t sub_10067FA40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10067FA48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10067FA50);
  return result;
}

uint64_t sub_10067FA5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10067FA64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10067FA68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10067FA70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AccessoryPairingLockAckResponse.CodingKeys;
}

unint64_t sub_10067FA90()
{
  unint64_t result;

  result = qword_101103230;
  if (!qword_101103230)
  {
    result = swift_getWitnessTable(byte_100E476BC, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103230);
  }
  return result;
}

unint64_t sub_10067FAD8()
{
  unint64_t result;

  result = qword_101103238;
  if (!qword_101103238)
  {
    result = swift_getWitnessTable(byte_100E4762C, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103238);
  }
  return result;
}

unint64_t sub_10067FB20()
{
  unint64_t result;

  result = qword_101103240;
  if (!qword_101103240)
  {
    result = swift_getWitnessTable(byte_100E47654, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103240);
  }
  return result;
}

uint64_t sub_10067FB64(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC5420;
    if (a2 == 0x8000000100EC5420)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC5420, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t destroy for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_10001BC14(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_10001BC14(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_10001BC14(*(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120));
  sub_10001BC14(*(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  sub_10001BC14(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152));
  return sub_10001BC14(*(_QWORD *)(a1 + 168), *(_QWORD *)(a1 + 176));
}

uint64_t initializeWithCopy for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v12, v13);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v14, v15);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v16, v17);
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v18, v19);
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v20, v21);
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v22, v23);
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  sub_10001BBBC(v25, v24);
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v24;
  return a1;
}

uint64_t assignWithCopy for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  sub_10001BBBC(v12, v13);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a2 + 48);
  v17 = *(_QWORD *)(a2 + 56);
  sub_10001BBBC(v16, v17);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v17;
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a2 + 64);
  v21 = *(_QWORD *)(a2 + 72);
  sub_10001BBBC(v20, v21);
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v20;
  *(_QWORD *)(a1 + 72) = v21;
  sub_10001BC14(v22, v23);
  v24 = *(_QWORD *)(a2 + 80);
  v25 = *(_QWORD *)(a2 + 88);
  sub_10001BBBC(v24, v25);
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  sub_10001BC14(v26, v27);
  v28 = *(_QWORD *)(a2 + 96);
  v29 = *(_QWORD *)(a2 + 104);
  sub_10001BBBC(v28, v29);
  v30 = *(_QWORD *)(a1 + 96);
  v31 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v28;
  *(_QWORD *)(a1 + 104) = v29;
  sub_10001BC14(v30, v31);
  v32 = *(_QWORD *)(a2 + 112);
  v33 = *(_QWORD *)(a2 + 120);
  sub_10001BBBC(v32, v33);
  v34 = *(_QWORD *)(a1 + 112);
  v35 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = v32;
  *(_QWORD *)(a1 + 120) = v33;
  sub_10001BC14(v34, v35);
  v36 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(a2 + 136);
  sub_10001BBBC(v36, v37);
  v38 = *(_QWORD *)(a1 + 128);
  v39 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v36;
  *(_QWORD *)(a1 + 136) = v37;
  sub_10001BC14(v38, v39);
  v40 = *(_QWORD *)(a2 + 144);
  v41 = *(_QWORD *)(a2 + 152);
  sub_10001BBBC(v40, v41);
  v42 = *(_QWORD *)(a1 + 144);
  v43 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v40;
  *(_QWORD *)(a1 + 152) = v41;
  sub_10001BC14(v42, v43);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v45 = *(_QWORD *)(a2 + 168);
  v44 = *(_QWORD *)(a2 + 176);
  sub_10001BBBC(v45, v44);
  v46 = *(_QWORD *)(a1 + 168);
  v47 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v45;
  *(_QWORD *)(a1 + 176) = v44;
  sub_10001BC14(v46, v47);
  return a1;
}

__n128 initializeWithTake for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v16, v17);
  v18 = *(_QWORD *)(a1 + 112);
  v19 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a1 + 128);
  v21 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001BC14(v20, v21);
  v22 = *(_QWORD *)(a1 + 144);
  v23 = *(_QWORD *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001BC14(v22, v23);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  v24 = *(_QWORD *)(a1 + 168);
  v25 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  sub_10001BC14(v24, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSendPairingDataCommandPayloadv2(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 184))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSendPairingDataCommandPayloadv2(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 184) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSendPairingDataCommandPayloadv2()
{
  return &type metadata for AirPodsSendPairingDataCommandPayloadv2;
}

uint64_t sub_100680130(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v28, v3, v4);
  v27 = *v1;
  v5 = v29;
  v6 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v27 = v1[2];
    v8 = v29;
    v9 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v8, v9);
    v27 = v1[4];
    v10 = v29;
    v11 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v10, v11);
    v27 = v1[5];
    v12 = v29;
    v13 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v12, v13);
    v27 = v1[1];
    v14 = v29;
    v15 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v14, v15);
    v27 = v1[3];
    v16 = v29;
    v17 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v16, v17);
    v27 = v1[6];
    v18 = v29;
    v19 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v18, v19);
    v27 = v1[7];
    v20 = v29;
    v21 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v20, v21);
    v27 = v1[8];
    v22 = v29;
    v23 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v22, v23);
    v27 = v1[9];
    v24 = v29;
    v25 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v27, &type metadata for Data, v7, v24, v25);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
}

double sub_100680440@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  sub_1006806D0(a1, (uint64_t)v10);
  if (!v2)
  {
    v5 = v18;
    *(_OWORD *)(a2 + 128) = v17;
    *(_OWORD *)(a2 + 144) = v5;
    *(_OWORD *)(a2 + 160) = v19;
    *(_QWORD *)(a2 + 176) = v20;
    v6 = v14;
    *(_OWORD *)(a2 + 64) = v13;
    *(_OWORD *)(a2 + 80) = v6;
    v7 = v16;
    *(_OWORD *)(a2 + 96) = v15;
    *(_OWORD *)(a2 + 112) = v7;
    v8 = v10[1];
    *(_OWORD *)a2 = v10[0];
    *(_OWORD *)(a2 + 16) = v8;
    result = *(double *)&v11;
    v9 = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(_OWORD *)(a2 + 48) = v9;
  }
  return result;
}

uint64_t sub_1006804BC(_QWORD *a1)
{
  return sub_100680130(a1);
}

unint64_t sub_1006804D0(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1006804FC();
  result = sub_100680540();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006804FC()
{
  unint64_t result;

  result = qword_101103248;
  if (!qword_101103248)
  {
    result = swift_getWitnessTable(byte_100E47790, &type metadata for AirPodsSendPairingDataCommandPayloadv2);
    atomic_store(result, (unint64_t *)&qword_101103248);
  }
  return result;
}

unint64_t sub_100680540()
{
  unint64_t result;

  result = qword_101103250;
  if (!qword_101103250)
  {
    result = swift_getWitnessTable(a1_21, &type metadata for AirPodsSendPairingDataCommandPayloadv2);
    atomic_store(result, (unint64_t *)&qword_101103250);
  }
  return result;
}

void sub_100680584(uint64_t a1, uint64_t a2)
{
  __asm { BR              X27 }
}

void sub_1006805D4(uint64_t a1, uint64_t a2)
{
  if (BYTE6(a2) == 32)
    __asm { BR              X27 }
  __break(1u);
  JUMPOUT(0x1006806ACLL);
}

uint64_t sub_1006806D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t result;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  int64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD v101[3];
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v101, v5, v6);
  v7 = v102;
  v8 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v7, v8);
  if (v2)
  {
LABEL_15:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  v11 = v9;
  v12 = v10;
  v13 = v102;
  v14 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20, v13, v14);
  v116 = v16;
  v18 = v102;
  v17 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v97 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v18, v17);
  v98 = v19;
  v20 = v102;
  v21 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v95 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2, v20, v21);
  v96 = v22;
  v23 = v102;
  v24 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v25 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v23, v24);
  v27 = v26;
  v28 = static MACAddress.length.getter(v25);
  v29 = 3 * v28;
  if ((unsigned __int128)(v28 * (__int128)3) >> 64 != (3 * v28) >> 63)
  {
    __break(1u);
    goto LABEL_17;
  }
  v93 = v25;
  v94 = v27;
  v30 = v29 + 60;
  if (__OFADD__(v29, 60))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v31 = v102;
  v32 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v24 = dispatch thunk of BinaryDecodingContaining.decode(length:)(v30, v31, v32);
  v34 = v33;
  v99 = v93;
  v100 = v94;
  v88 = sub_100035530();
  v35 = DataProtocol.intValue.getter(&type metadata for Data, v88);
  v36 = v35 - 1;
  if (__OFSUB__(v35, 1))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v37 = static MACAddress.length.getter(v35);
  v38 = v37 + 20;
  if (__OFADD__(v37, 20))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v39 = v36 * v38;
  if ((unsigned __int128)(v36 * (__int128)v38) >> 64 != (v36 * v38) >> 63)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (v39 < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v89 = Data.subdata(in:)(0, v39, v24, v34);
  v90 = v40;
  v91 = v24;
  v92 = v34;
  v41 = v102;
  v42 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v86 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v41, v42);
  v87 = v43;
  v44 = v102;
  v45 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v84 = dispatch thunk of BinaryDecodingContaining.decode(length:)(2048, v44, v45);
  v85 = v46;
  v47 = v102;
  v48 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v82 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v47, v48);
  v83 = v49;
  v50 = v102;
  v51 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v80 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v50, v51);
  v81 = v52;
  v53 = v102;
  v54 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v78 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v53, v54);
  v79 = v55;
  v99 = v78;
  v100 = v55;
  v88 = DataProtocol.intValue.getter(&type metadata for Data, v88);
  v56 = v102;
  v57 = v103;
  sub_10009F5D0((uint64_t)v101, v102);
  v58 = dispatch thunk of BinaryDecodingContaining.decode(length:)(10, v56, v57);
  v77 = v59;
  v24 = v58;
  if (v88 > 3)
  {
    if (qword_1010EA318 == -1)
    {
LABEL_12:
      v68 = type metadata accessor for Logger(0);
      v69 = sub_10001A9E8(v68, (uint64_t)qword_1011B7DF8);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.error.getter(v70);
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v72 = 134217984;
        v99 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v72 + 4, v72 + 12);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Invalid beaconPartId %ld!", v72, 0xCu);
        swift_slowDealloc(v72, -1, -1);
      }

      v73 = type metadata accessor for BinaryDecodingError(0);
      v74 = sub_100345C00();
      swift_allocError(v73, v74, 0, 0);
      v76 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v73 - 8) + 104))(v75, enum case for BinaryDecodingError.decodingError(_:), v73);
      swift_willThrow(v76);
      sub_10001BC14(v24, v77);
      sub_10001BC14(v78, v79);
      sub_10001BC14(v80, v81);
      sub_10001BC14(v82, v83);
      sub_10001BC14(v84, v85);
      sub_10001BC14(v86, v87);
      sub_10001BC14(v89, v90);
      sub_10001BC14(v91, v92);
      sub_10001BC14(v93, v94);
      sub_10001BC14(v95, v96);
      sub_10001BC14(v97, v98);
      sub_10001BC14(v15, v116);
      sub_10001BC14(v11, v12);
      goto LABEL_15;
    }
LABEL_22:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_12;
  }
  sub_10001BC14(v78, v79);
  sub_10001BC14(v91, v92);
  if (v88 < 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    sub_100680584(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v61 = v113;
    v62 = v114;
    v63 = v111;
    *(_OWORD *)(a2 + 128) = v112;
    *(_OWORD *)(a2 + 144) = v61;
    *(_OWORD *)(a2 + 160) = v62;
    v64 = v109;
    v65 = v110;
    *(_OWORD *)(a2 + 64) = v108;
    *(_OWORD *)(a2 + 80) = v64;
    *(_QWORD *)(a2 + 176) = v115;
    *(_OWORD *)(a2 + 96) = v65;
    *(_OWORD *)(a2 + 112) = v63;
    v66 = v105;
    *(_OWORD *)a2 = v104;
    *(_OWORD *)(a2 + 16) = v66;
    v67 = v107;
    *(_OWORD *)(a2 + 32) = v106;
    *(_OWORD *)(a2 + 48) = v67;
  }
  return result;
}

uint64_t *sub_100680D6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_10001BBBC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_10001BBBC(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = *(int *)(a3 + 28);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_100680E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_100680E94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_10001BBBC(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_100680F34(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10001BBBC(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001BC14(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_10001BBBC(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001BC14(v16, v17);
  v18 = *(int *)(a3 + 28);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_100680FEC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_100681050(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v10, v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1006810E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006810EC);
}

uint64_t sub_1006810EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_100681174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100681180);
}

char *sub_100681180(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockAckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1011032B0;
  if (!qword_1011032B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsPairingLockAckResponse);
  return result;
}

uint64_t sub_100681238(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E47810;
  v4[1] = &unk_100E47810;
  v4[2] = &unk_100E47810;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1006812B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;
  char v33;

  v27 = a2;
  v28 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v4 = (uint64_t *)((char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_10001A9A8(&qword_1011032F0);
  v5 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AirPodsPairingLockAckResponse(0);
  __chkstk_darwin(v8);
  v10 = (_OWORD *)((char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_1006816B4();
  v29 = v7;
  v14 = v31;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirPodsPairingLockAckResponse.CodingKeys, &type metadata for AirPodsPairingLockAckResponse.CodingKeys, v13, v11, v12);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = v8;
  v25 = v4;
  v15 = v5;
  v31 = a1;
  v16 = v28;
  v33 = 0;
  v17 = sub_100036994();
  v18 = v29;
  v19 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for Data, &v33, v30, &type metadata for Data, v17);
  v20 = (uint64_t)v10;
  *v10 = v32;
  v33 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for Data, &v33, v19, &type metadata for Data, v17);
  v10[1] = v32;
  v33 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for Data, &v33, v19, &type metadata for Data, v17);
  v10[2] = v32;
  LOBYTE(v32) = 3;
  v21 = sub_100252A08();
  v22 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v25, v16, &v32, v19, v16, v21);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v19);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v26 + 32))(v20 + *(int *)(v24 + 28), v22, v16);
  sub_1006816F8(v20, v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  return sub_10068173C(v20);
}

uint64_t sub_1006815E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100681608 + 4 * byte_100E477E0[*v0]))(1684628325, 0xE400000000000000);
}

uint64_t sub_100681608()
{
  return 0x644970696863;
}

uint64_t sub_10068161C()
{
  return 0x754E6C6169726573;
}

uint64_t sub_10068163C()
{
  return 0x6449616E6D66;
}

uint64_t sub_100681650(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006816B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100681678(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006816B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006816A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1006812B0(a1, a2);
}

unint64_t sub_1006816B4()
{
  unint64_t result;

  result = qword_1011032F8;
  if (!qword_1011032F8)
  {
    result = swift_getWitnessTable(byte_100E47914, &type metadata for AirPodsPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011032F8);
  }
  return result;
}

uint64_t sub_1006816F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirPodsPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10068173C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirPodsPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingLockAckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1006817C4 + 4 * byte_100E477E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1006817F8 + 4 * byte_100E477E4[v4]))();
}

uint64_t sub_1006817F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100681800(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100681808);
  return result;
}

uint64_t sub_100681814(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10068181CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100681820(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100681828(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AirPodsPairingLockAckResponse.CodingKeys;
}

unint64_t sub_100681848()
{
  unint64_t result;

  result = qword_101103300;
  if (!qword_101103300)
  {
    result = swift_getWitnessTable(byte_100E478EC, &type metadata for AirPodsPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103300);
  }
  return result;
}

unint64_t sub_100681890()
{
  unint64_t result;

  result = qword_101103308;
  if (!qword_101103308)
  {
    result = swift_getWitnessTable(byte_100E4785C, &type metadata for AirPodsPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103308);
  }
  return result;
}

unint64_t sub_1006818D8()
{
  unint64_t result;

  result = qword_101103310;
  if (!qword_101103310)
  {
    result = swift_getWitnessTable(byte_100E47884, &type metadata for AirPodsPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103310);
  }
  return result;
}

uint64_t sub_10068191C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100681A54();
  sub_100681A40();
  sub_1002EB2D8(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 32));

  v1 = v0 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();

  sub_1000126B0(v0 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, type metadata accessor for Intent);
  return v0;
}

uint64_t sub_1006819D8()
{
  uint64_t v0;

  sub_10068191C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1006819FC()
{
  return type metadata accessor for IntentSession(0);
}

uint64_t type metadata accessor for IntentSession(uint64_t a1)
{
  uint64_t result;

  result = qword_101103370;
  if (!qword_101103370)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IntentSession);
  return result;
}

uint64_t sub_100681A40()
{
  return sub_100681A68((uint64_t)sub_1006863D4, (uint64_t)&unk_101086948);
}

uint64_t sub_100681A54()
{
  return sub_100681A68((uint64_t)sub_1006863B4, (uint64_t)&unk_101086920);
}

uint64_t sub_100681A68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v5 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v12 = (void *)static OS_dispatch_queue.main.getter();
  v13 = swift_allocObject(&unk_101086700, 24, 7);
  swift_weakInit(v13 + 16, v5);
  aBlock[4] = a1;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a2;
  v14 = _Block_copy(aBlock);
  v15 = swift_release();
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v20);
}

void sub_100681C68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *a2;
    objc_msgSend(*(id *)(Strong + v6), "invalidate");
    v7 = *(void **)(v5 + v6);
    *(_QWORD *)(v5 + v6) = 0;
    swift_release(v5);

  }
}

_QWORD *sub_100681CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v74;
  char *v75;
  __int128 v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95[2];
  _QWORD v96[5];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100[8];
  _QWORD *v101;

  v1 = v0;
  v80 = type metadata accessor for UUID(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v78 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for SharedBeaconRecord(0);
  v3 = __chkstk_darwin(v87);
  v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v86 = (char *)&v74 - v7;
  __chkstk_darwin(v6);
  v85 = (char *)&v74 - v8;
  v94 = type metadata accessor for ShareRecord(0);
  v81 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = __chkstk_darwin(v93);
  v92 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v74 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v1 + 72);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) == 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  v91 = v14;
  v101 = _swiftEmptyArrayStorage;
  v84 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_beaconStore);
  v22 = sub_100017368();
  v23 = v1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, v100, 0, 0);
  v46 = *(_BYTE *)(v23 + 41) == 1;
  v88 = v22;
  if (v46)
  {
    v15 = static os_log_type_t.default.getter(v24);
    if (qword_1010EA290 == -1)
    {
LABEL_5:
      v25 = qword_1011B7D70;
      v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v27 = swift_allocObject(v26, 72, 7);
      *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
      v28 = UUID.uuidString.getter(v27);
      v30 = v29;
      *(_QWORD *)(v27 + 56) = &type metadata for String;
      *(_QWORD *)(v27 + 64) = sub_10001AA00();
      *(_QWORD *)(v27 + 32) = v28;
      *(_QWORD *)(v27 + 40) = v30;
      os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v25, "- Session: %@ - Monitoring all beacon records since the intent is from user's own device", 88, 2, v27);
      swift_bridgeObjectRelease();
      sub_1000175CC(v88);
      return v101;
    }
LABEL_52:
    swift_once(&qword_1010EA290, sub_100B5DC7C);
    goto LABEL_5;
  }
  v90 = *(_QWORD *)(v22 + 16);
  if (v90)
  {
    v75 = v5;
    v31 = 0;
    v77 = v1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID;
    v89 = v22 + 32;
    v76 = xmmword_100E22B10;
    v32 = (uint64_t)v86;
    v33 = (uint64_t)v85;
    v34 = v93;
    do
    {
      if (v31 >= *(_QWORD *)(v22 + 16))
      {
        __break(1u);
        goto LABEL_51;
      }
      sub_100030784(v89 + 40 * v31, (uint64_t)&v97);
      sub_100030784((uint64_t)&v97, (uint64_t)v96);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v38 = (uint64_t)v91;
      if (swift_dynamicCast(v91, v96, v37, v34, 0))
      {
        v15 = v92;
        sub_1000126EC(v38, v92, type metadata accessor for OwnedBeaconRecord);
        v39 = sub_10088A6EC();
        v40 = v39[2];
        if (v40)
        {
          v15 = (uint64_t)v39
              + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80));
          v41 = *(_QWORD *)(v81 + 72);
          while (1)
          {
            sub_10005972C(v15, (uint64_t)v10, type metadata accessor for ShareRecord);
            v42 = &v10[*(int *)(v94 + 40)];
            v43 = *((_QWORD *)v42 + 1);
            v44 = *(_QWORD *)(v23 + 24);
            v45 = *(_QWORD *)(v23 + 32);
            v46 = *(_QWORD *)v42 == v44 && v43 == v45;
            if (v46)
              break;
            v47 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v42, v43, v44, v45, 0);
            sub_1000126B0((uint64_t)v10, type metadata accessor for ShareRecord);
            if ((v47 & 1) != 0)
              goto LABEL_43;
            v15 += v41;
            if (!--v40)
            {
              swift_bridgeObjectRelease();
              v32 = (uint64_t)v86;
              v33 = (uint64_t)v85;
              goto LABEL_9;
            }
          }
          sub_1000126B0((uint64_t)v10, type metadata accessor for ShareRecord);
LABEL_43:
          swift_bridgeObjectRelease();
          sub_100030784((uint64_t)&v97, (uint64_t)v95);
          v15 = (uint64_t)v101;
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v15 = (uint64_t)sub_10001BC00(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
          v32 = (uint64_t)v86;
          v72 = *(_QWORD *)(v15 + 16);
          v71 = *(_QWORD *)(v15 + 24);
          if (v72 >= v71 >> 1)
            v15 = (uint64_t)sub_10001BC00((_QWORD *)(v71 > 1), v72 + 1, 1, (_QWORD *)v15);
          v33 = (uint64_t)v85;
          *(_QWORD *)(v15 + 16) = v72 + 1;
          sub_10000F9FC(v95, v15 + 40 * v72 + 32);
          v101 = (_QWORD *)v15;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
LABEL_9:
        v35 = v92;
        v36 = type metadata accessor for OwnedBeaconRecord;
      }
      else
      {
        v48 = v37;
        v49 = v87;
        v50 = swift_dynamicCast(v33, v96, v48, v87, 0);
        if (!(_DWORD)v50)
        {
          v83 = static os_log_type_t.error.getter(v50);
          if (qword_1010EA290 != -1)
            swift_once(&qword_1010EA290, sub_100B5DC7C);
          v82 = qword_1011B7D70;
          v57 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v15 = swift_allocObject(v57, 112, 7);
          *(_OWORD *)(v15 + 16) = v76;
          v58 = UUID.uuidString.getter(v15);
          v60 = v59;
          *(_QWORD *)(v15 + 56) = &type metadata for String;
          v61 = sub_10001AA00();
          *(_QWORD *)(v15 + 64) = v61;
          *(_QWORD *)(v15 + 32) = v58;
          *(_QWORD *)(v15 + 40) = v60;
          v63 = v98;
          v62 = v99;
          sub_10001AA44(&v97, v98);
          v64 = v78;
          v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v62 + 8) + 8) + 32))(v63);
          v66 = UUID.uuidString.getter(v65);
          v68 = v67;
          (*(void (**)(char *, uint64_t))(v79 + 8))(v64, v80);
          *(_QWORD *)(v15 + 96) = &type metadata for String;
          *(_QWORD *)(v15 + 104) = v61;
          *(_QWORD *)(v15 + 72) = v66;
          *(_QWORD *)(v15 + 80) = v68;
          os_log(_:dso:log:_:_:)(v83, &_mh_execute_header, v82, "- Session: %@ - Unknown beacon record: %@", 41, 2, v15);
          swift_bridgeObjectRelease();
          v32 = (uint64_t)v86;
          v33 = (uint64_t)v85;
          goto LABEL_11;
        }
        sub_1000126EC(v33, v32, type metadata accessor for SharedBeaconRecord);
        v51 = (_QWORD *)(v32 + *(int *)(v49 + 32));
        v52 = v51[1];
        v53 = *(_QWORD *)(v23 + 24);
        v54 = *(_QWORD *)(v23 + 32);
        if (*v51 == v53 && v52 == v54)
        {
          v56 = (uint64_t)v75;
          sub_10005972C(v32, (uint64_t)v75, type metadata accessor for SharedBeaconRecord);
        }
        else
        {
          v15 = _stringCompareWithSmolCheck(_:_:expecting:)(*v51, v52, v53, v54, 0);
          v56 = (uint64_t)v75;
          sub_10005972C(v32, (uint64_t)v75, type metadata accessor for SharedBeaconRecord);
          if ((v15 & 1) == 0)
          {
            sub_1000126B0(v56, type metadata accessor for SharedBeaconRecord);
LABEL_41:
            sub_1000126B0(v32, type metadata accessor for SharedBeaconRecord);
            goto LABEL_12;
          }
        }
        v15 = *(unsigned __int8 *)(v56 + *(int *)(v87 + 52));
        sub_1000126B0(v56, type metadata accessor for SharedBeaconRecord);
        if ((v15 & 1) == 0)
          goto LABEL_41;
        sub_100030784((uint64_t)&v97, (uint64_t)v95);
        v15 = (uint64_t)v101;
        if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
          v15 = (uint64_t)sub_10001BC00(0, *(_QWORD *)(v15 + 16) + 1, 1, (_QWORD *)v15);
        v70 = *(_QWORD *)(v15 + 16);
        v69 = *(_QWORD *)(v15 + 24);
        if (v70 >= v69 >> 1)
          v15 = (uint64_t)sub_10001BC00((_QWORD *)(v69 > 1), v70 + 1, 1, (_QWORD *)v15);
        *(_QWORD *)(v15 + 16) = v70 + 1;
        sub_10000F9FC(v95, v15 + 40 * v70 + 32);
        v101 = (_QWORD *)v15;
        v35 = v32;
        v36 = type metadata accessor for SharedBeaconRecord;
      }
      sub_1000126B0(v35, v36);
LABEL_11:
      v22 = v88;
LABEL_12:
      v34 = v93;
      ++v31;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v96);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v97);
    }
    while (v31 != v90);
  }
  swift_bridgeObjectRelease();
  return v101;
}

uint64_t sub_1006825BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(v3 + 72);
  v14 = swift_allocObject(&unk_101086700, 24, 7);
  swift_weakInit(v14 + 16, v3);
  v15 = (_QWORD *)swift_allocObject(&unk_101086890, 48, 7);
  v15[2] = v14;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a1;
  aBlock[4] = sub_100686364;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010868A8;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v24 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_1006827F8(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t Strong;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(void);
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102[3];
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char v106[24];
  char v107[32];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v98 = *(_QWORD *)(v12 - 8);
  v99 = v12;
  __chkstk_darwin(v12);
  v97 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101103560);
  v101 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v100 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Intent(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v107, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong)
    return a2();
  v20 = Strong;
  v95 = v14;
  v21 = sub_100681CE4();
  if (v21[2])
  {
    v93 = a3;
    v94 = a2;
    v96 = v21;
    v91 = v18;
    v92 = a4;
    v90 = static os_log_type_t.default.getter(v21);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v89 = qword_1011B7D70;
    v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v23 = swift_allocObject(v22, 192, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E26E00;
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    *(_QWORD *)(v23 + 56) = &type metadata for String;
    v27 = sub_10001AA00();
    *(_QWORD *)(v23 + 64) = v27;
    *(_QWORD *)(v23 + 32) = v24;
    *(_QWORD *)(v23 + 40) = v26;
    v28 = (_QWORD *)(v20 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent);
    swift_beginAccess(v20 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, v106, 0, 0);
    v29 = v28[1];
    v30 = (void *)v28[2];
    v31 = *(unsigned __int8 *)v28;
    swift_bridgeObjectRetain(v30);
    sub_1008A4DC4(v31, v29, v30);
    v33 = v32;
    v35 = v34;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v23 + 96) = &type metadata for String;
    *(_QWORD *)(v23 + 104) = v27;
    *(_QWORD *)(v23 + 72) = v33;
    *(_QWORD *)(v23 + 80) = v35;
    v37 = v28[3];
    v36 = v28[4];
    v87 = v28;
    *(_QWORD *)(v23 + 136) = &type metadata for String;
    *(_QWORD *)(v23 + 144) = v27;
    v86 = v27;
    *(_QWORD *)(v23 + 112) = v37;
    *(_QWORD *)(v23 + 120) = v36;
    v88 = (_QWORD *)v23;
    v38 = v96;
    v39 = v96[2];
    if (v39)
    {
      v85 = v20;
      v105 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v36);
      sub_10009A2F4(0, v39, 0);
      v40 = (uint64_t)(v38 + 4);
      do
      {
        sub_100030784(v40, (uint64_t)v102);
        v42 = v103;
        v41 = v104;
        sub_10001AA44(v102, v103);
        v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v41 + 8) + 8) + 32))(v42);
        v44 = UUID.uuidString.getter(v43);
        v46 = v45;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v102);
        v47 = v105;
        if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
        {
          sub_10009A2F4(0, v47[2] + 1, 1);
          v47 = v105;
        }
        v49 = v47[2];
        v48 = v47[3];
        if (v49 >= v48 >> 1)
        {
          sub_10009A2F4(v48 > 1, v49 + 1, 1);
          v47 = v105;
        }
        v47[2] = v49 + 1;
        v50 = &v47[2 * v49];
        v50[4] = v44;
        v50[5] = v46;
        v40 += 40;
        --v39;
      }
      while (v39);
      swift_bridgeObjectRelease();
      a2 = v94;
      v20 = v85;
    }
    else
    {
      swift_bridgeObjectRetain(v36);
      swift_bridgeObjectRelease();
      v47 = _swiftEmptyArrayStorage;
      a2 = v94;
    }
    v65 = Array.description.getter(v47, &type metadata for String);
    v67 = v66;
    swift_bridgeObjectRelease();
    v68 = v88;
    v69 = v86;
    v88[22] = &type metadata for String;
    v68[23] = v69;
    v68[19] = v65;
    v68[20] = v67;
    os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v89, "- Session: %@ from: %@ correlationID: %@ - Start monitoring beacon records: %@", 78, 2, v68);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v20 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) = 0;
    v70 = (uint64_t)v91;
    sub_10005972C((uint64_t)v87, (uint64_t)v91, type metadata accessor for Intent);
    sub_100684A88(v70);
    sub_1000126B0(v70, type metadata accessor for Intent);
    sub_100684798();
    v71 = v92;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B6EC(v102[0]);
    v73 = v72;
    swift_bridgeObjectRelease();
    v102[0] = *(_QWORD *)(v71 + 48);
    v74 = swift_retain();
    v75 = v97;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v74, v73);
    v105 = *(_QWORD **)(v20 + 72);
    v76 = sub_10001A9A8(&qword_101103568);
    v77 = sub_10001F6FC();
    v78 = sub_1000193A4(&qword_101103570, &qword_101103568, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v79 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v80 = v100;
    Publisher.throttle<A>(for:scheduler:latest:)(v75, &v105, 0, v76, v77, v78, v79);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v75, v99);
    swift_release();
    v81 = sub_1000193A4(&qword_101103578, &qword_101103560, (const char *)&protocol conformance descriptor for Publishers.Throttle<A, B>);
    swift_retain();
    v82 = v95;
    v83 = Publisher<>.sink(receiveValue:)(sub_100686370, v20, v95, v81);
    swift_release();
    (*(void (**)(char *, uint64_t))(v101 + 8))(v80, v82);
    *(_QWORD *)(v20 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerServiceSubscription) = v83;
    swift_release();
    swift_retain();
    sub_100263344((uint64_t)sub_100686378, v20);
    v62 = swift_release();
  }
  else
  {
    v52 = swift_bridgeObjectRelease();
    v53 = static os_log_type_t.error.getter(v52);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v54 = qword_1011B7D70;
    v55 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v56 = swift_allocObject(v55, 72, 7);
    *(_OWORD *)(v56 + 16) = xmmword_100E22B00;
    v57 = UUID.uuidString.getter(v56);
    v59 = v58;
    *(_QWORD *)(v56 + 56) = &type metadata for String;
    *(_QWORD *)(v56 + 64) = sub_10001AA00();
    *(_QWORD *)(v56 + 32) = v57;
    *(_QWORD *)(v56 + 40) = v59;
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "- Session: %@ - No monitored beacons set", 40, 2, v56);
    swift_bridgeObjectRelease();
    v60 = swift_allocObject(&unk_101086700, 24, 7);
    swift_weakInit(v60 + 16, v20);
    v61 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v61);
    *(&v84 - 4) = v20;
    *(&v84 - 3) = (uint64_t)sub_100686380;
    *(&v84 - 2) = v60;
    swift_retain();
    static Transaction.named<A>(_:with:)("IntentSession.intentAsync", 25, 2, sub_100686388, &v84 - 6, &type metadata for () + 1);
    swift_release_n(v60, 2);
    v62 = swift_unknownObjectWeakLoadStrong(v20 + 16);
    if (v62)
    {
      v63 = v62;
      v64 = v20 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
      swift_beginAccess(v20 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, v102, 0, 0);
      sub_10005972C(v64, (uint64_t)v18, type metadata accessor for Intent);
      sub_100AED1EC((uint64_t)v18);
      swift_unknownObjectRelease(v63);
      v62 = sub_1000126B0((uint64_t)v18, type metadata accessor for Intent);
    }
  }
  ((void (*)(uint64_t))a2)(v62);
  return swift_release();
}

uint64_t sub_1006830A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v3 = *a1;
  v4 = swift_allocObject(&unk_101086700, 24, 7);
  swift_weakInit(v4 + 16, a2);
  v5 = swift_allocObject(&unk_101086908, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  type metadata accessor for Transaction(0);
  v7[2] = a2;
  v7[3] = sub_1006863FC;
  v7[4] = v5;
  swift_retain();
  swift_bridgeObjectRetain(v3);
  static Transaction.named<A>(_:with:)("IntentSession.intentAsync", 25, 2, sub_10068642C, v7, &type metadata for () + 1);
  swift_release();
  return swift_release();
}

uint64_t sub_100683190(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[6];

  v4 = swift_allocObject(&unk_101086700, 24, 7);
  swift_weakInit(v4 + 16, a2);
  v5 = swift_allocObject(&unk_1010868E0, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = a1;
  type metadata accessor for Transaction(0);
  v7[2] = a2;
  v7[3] = sub_1006863A8;
  v7[4] = v5;
  swift_retain();
  swift_bridgeObjectRetain(a1);
  static Transaction.named<A>(_:with:)("IntentSession.intentAsync", 25, 2, sub_10068642C, v7, &type metadata for () + 1);
  swift_release();
  return swift_release();
}

uint64_t sub_100683278(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t Strong;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v28[24];
  _BYTE v29[24];

  v7 = type metadata accessor for Intent(0);
  __chkstk_darwin(v7);
  v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v29, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (Strong)
  {
    v15 = Strong;
    v16 = *(void **)(Strong + 72);
    *v13 = v16;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
    v17 = v16;
    LOBYTE(v16) = _dispatchPreconditionTest(_:)(v13);
    v18 = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
    if ((v16 & 1) != 0)
    {
      v13 = (_QWORD *)static os_log_type_t.default.getter(v18);
      if (qword_1010EA290 == -1)
      {
LABEL_4:
        v19 = qword_1011B7D70;
        v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v21 = swift_allocObject(v20, 72, 7);
        *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
        v22 = UUID.uuidString.getter(v21);
        v24 = v23;
        *(_QWORD *)(v21 + 56) = &type metadata for String;
        *(_QWORD *)(v21 + 64) = sub_10001AA00();
        *(_QWORD *)(v21 + 32) = v22;
        *(_QWORD *)(v21 + 40) = v24;
        os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v19, "- Session: %@ - Update monitoring", 33, 2, v21);
        swift_bridgeObjectRelease();
        sub_10005972C(a4, (uint64_t)v9, type metadata accessor for Intent);
        v25 = v15 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
        swift_beginAccess(v15 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, v28, 33, 0);
        sub_100686074((uint64_t)v9, v25);
        swift_endAccess(v28);
        v26 = sub_100684A88(a4);
        ((void (*)(uint64_t))a2)(v26);
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1010EA290, sub_100B5DC7C);
    goto LABEL_4;
  }
  return a2();
}

uint64_t sub_1006834D8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (!Strong)
    return a2();
  v5 = Strong;
  *(_BYTE *)(Strong + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) = 1;
  sub_100681A54();
  sub_100681A40();
  *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerServiceSubscription) = 0;
  v6 = swift_release();
  ((void (*)(uint64_t))a2)(v6);
  return swift_release();
}

uint64_t sub_10068357C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];
  _QWORD *v26;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(a2 + 72);
  v14 = swift_allocObject(&unk_101086700, 24, 7);
  swift_weakInit(v14 + 16, a2);
  v15 = (_QWORD *)swift_allocObject(&unk_101086728, 48, 7);
  v15[2] = v14;
  v15[3] = a1;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_100685638;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101086740;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v26 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v8, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  swift_release();
  return swift_release();
}

uint64_t sub_1006837C4(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _BYTE v7[24];

  v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    Transaction.capture()();
    if ((*(_BYTE *)(v6 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorStopped) & 1) == 0)
      a3();
    return swift_release(v6);
  }
  return result;
}

void sub_100683844(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t (*v28)();
  unint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  int64_t v69;
  unint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t Strong;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  id v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  int64_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int64_t v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  _QWORD *v131;
  __int128 aBlock;
  uint64_t (*v133)(uint64_t);
  void *v134;
  uint64_t (*v135)();
  _QWORD *v136;
  _QWORD *v137;
  char v138[8];
  char v139[8];

  v2 = v1;
  v113 = type metadata accessor for DispatchWorkItemFlags(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v111 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for DispatchQoS(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v108 = (char *)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Intent(0);
  v107 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v105 = (uint64_t)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = v8;
  __chkstk_darwin(v7);
  v104 = (int64_t *)((char *)&v98 - v9);
  v123 = type metadata accessor for DispatchPredicate(0);
  v124 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123);
  v125 = (int64_t *)((char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_10001A9A8(&qword_101103550);
  v12 = __chkstk_darwin(v11);
  v115 = (char *)&v98 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v114 = (char *)&v98 - v14;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v15);
  v126 = (int64_t)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v128 - 8);
  v17 = __chkstk_darwin(v128);
  v127 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v98 - v19;
  v21 = (char *)sub_1003D7E90((uint64_t)&off_10104DA40);
  v129 = v21;
  v22 = *(char **)(a1 + 16);
  v23 = _swiftEmptyArrayStorage;
  if (v22)
  {
    v24 = v1;
    v137 = _swiftEmptyArrayStorage;
    sub_10009A578(0, (int64_t)v22, 0);
    v25 = a1 + 32;
    v23 = v137;
    v26 = v22;
    do
    {
      sub_100030784(v25, (uint64_t)&aBlock);
      v27 = v134;
      v28 = v135;
      sub_10001AA44(&aBlock, (uint64_t)v134);
      (*(void (**)(void *))(*(_QWORD *)(*((_QWORD *)v28 + 1) + 8) + 32))(v27);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
      {
        sub_10009A578(0, v23[2] + 1, 1);
        v23 = v137;
      }
      v30 = v23[2];
      v29 = v23[3];
      if (v30 >= v29 >> 1)
      {
        sub_10009A578(v29 > 1, v30 + 1, 1);
        v23 = v137;
      }
      v23[2] = v30 + 1;
      v21 = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v130 + 32))((unint64_t)v23+ ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80))+ *(_QWORD *)(v130 + 72) * v30, v20, v128);
      v137 = v23;
      v25 += 40;
      --v26;
    }
    while (v26);
    v2 = v24;
  }
  if (v23[2])
  {
    v31 = (void *)static os_log_type_t.default.getter(v21);
    if (qword_1010EA290 == -1)
      goto LABEL_11;
    while (1)
    {
      swift_once(&qword_1010EA290, sub_100B5DC7C);
LABEL_11:
      v32 = qword_1011B7D70;
      v122 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v33 = swift_allocObject(v122, 112, 7);
      *(_OWORD *)(v33 + 16) = xmmword_100E22B10;
      v121 = v2 + OBJC_IVAR____TtC12searchpartyd13IntentSession_sessionID;
      v34 = UUID.uuidString.getter(v33);
      v36 = v35;
      *(_QWORD *)(v33 + 56) = &type metadata for String;
      v37 = sub_10001AA00();
      *(_QWORD *)(v33 + 32) = v34;
      *(_QWORD *)(v33 + 40) = v36;
      v117 = v2;
      *(_QWORD *)(v33 + 96) = &type metadata for Int;
      *(_QWORD *)(v33 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v33 + 64) = v37;
      *(_QWORD *)(v33 + 72) = v22;
      os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Session: %@ - request latest locations for beacons: %llu.", 57, 2, v33);
      swift_bridgeObjectRelease();
      v38 = v22;
      v39 = swift_allocObject(&unk_1010867F0, 24, 7);
      *(_QWORD *)(v39 + 16) = _swiftEmptyDictionarySingleton;
      v40 = v39 + 16;
      v41 = dispatch_group_create();
      dispatch_group_enter(v41);
      sub_10001AA44((_QWORD *)(v117 + 32), *(_QWORD *)(v117 + 56));
      v42 = type metadata accessor for Date(0);
      v31 = (void *)v126;
      (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v126, 1, 1, v42);
      v43 = (_QWORD *)swift_allocObject(&unk_101086818, 48, 7);
      v44 = v117;
      v43[2] = v39;
      v43[3] = v44;
      v43[4] = a1;
      v43[5] = v41;
      v100 = v39;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(a1);
      v45 = v41;
      sub_100309F78((uint64_t)v23, (uint64_t)v31, v129, 0, (uint64_t)sub_100686218, (uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      v46 = sub_100004048((uint64_t)v31, (uint64_t *)&unk_1010EA690);
      v47 = static os_log_type_t.default.getter(v46);
      v23 = (_QWORD *)qword_1011B7D70;
      v48 = swift_allocObject(v122, 152, 7);
      *(_OWORD *)(v48 + 16) = xmmword_100E221E0;
      v49 = UUID.uuidString.getter(v48);
      *(_QWORD *)(v48 + 56) = &type metadata for String;
      *(_QWORD *)(v48 + 64) = v37;
      *(_QWORD *)(v48 + 32) = v49;
      *(_QWORD *)(v48 + 40) = v50;
      *(_QWORD *)&v51 = swift_beginAccess(v40, v139, 0, 0).n128_u64[0];
      v52 = *(_QWORD *)(*(_QWORD *)v40 + 16);
      *(_QWORD *)(v48 + 96) = &type metadata for Int;
      *(_QWORD *)(v48 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v48 + 112) = v38;
      *(_QWORD *)(v48 + 72) = v52;
      *(_QWORD *)(v48 + 136) = &type metadata for Int;
      *(_QWORD *)(v48 + 144) = &protocol witness table for Int;
      v53 = v117;
      os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v23, "Session: %@ - waiting for latest locations for beacons: %llu.", 61, 2, v48, v51);
      swift_bridgeObjectRelease();
      v99 = v45;
      OS_dispatch_group.wait()();
      v54 = *(_QWORD *)v40;
      v55 = *(_QWORD *)(*(_QWORD *)v40 + 64);
      v101 = *(_QWORD *)v40 + 64;
      v56 = 1 << *(_BYTE *)(v54 + 32);
      v57 = -1;
      if (v56 < 64)
        v57 = ~(-1 << v56);
      v2 = v57 & v55;
      v121 = OBJC_IVAR____TtC12searchpartyd13IntentSession_beaconStore;
      v118 = v53 + 16;
      v58 = v53 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
      v120 = v54;
      swift_bridgeObjectRetain(v54);
      v103 = v58;
      swift_beginAccess(v58, v138, 0, 0);
      v126 = 0;
      LODWORD(v122) = enum case for DispatchPredicate.onQueue(_:);
      v116 = (unint64_t)(v56 + 63) >> 6;
      v98 = v116 - 1;
      v22 = (char *)&qword_101103558;
      v102 = xmmword_100E22B00;
      a1 = (uint64_t)v115;
      v59 = (uint64_t)v114;
      v60 = (void *)v128;
      if (!v2)
        break;
      while (1)
      {
        v61 = __clz(__rbit64(v2));
        v62 = (char *)((v2 - 1) & v2);
        v63 = v61 | (v126 << 6);
LABEL_17:
        v64 = v120;
        (*(void (**)(uint64_t, unint64_t, void *))(v130 + 16))(a1, *(_QWORD *)(v120 + 48) + *(_QWORD *)(v130 + 72) * v63, v60);
        v65 = *(_QWORD *)(v64 + 56);
        v66 = sub_10001A9A8(&qword_101103558);
        v67 = *(void **)(v65 + 8 * v63);
        *(_QWORD *)(a1 + *(int *)(v66 + 48)) = v67;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(a1, 0, 1, v66);
        v68 = v67;
LABEL_36:
        sub_100005CF0(a1, v59, &qword_101103550);
        v73 = sub_10001A9A8(&qword_101103558);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v59, 1, v73) == 1)
        {
          swift_release();

          swift_release();
          return;
        }
        v129 = v62;
        v2 = *(_QWORD *)(v59 + *(int *)(v73 + 48));
        v22 = v127;
        v23 = (_QWORD *)v59;
        v31 = v60;
        (*(void (**)(char *, uint64_t, void *))(v130 + 32))(v127, v59, v60);
        v74 = *(void **)(v53 + 72);
        v75 = v125;
        *v125 = v74;
        v76 = v124;
        v77 = v123;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v124 + 104))(v75, v122, v123);
        v78 = v74;
        LOBYTE(v74) = _dispatchPreconditionTest(_:)(v75);
        (*(void (**)(_QWORD *, uint64_t))(v76 + 8))(v75, v77);
        if ((v74 & 1) == 0)
          break;
        sub_10080B648((uint64_t)v22, (uint64_t)&aBlock);
        if (v134)
        {
          sub_10000F9FC(&aBlock, (uint64_t)&v137);
          Strong = swift_unknownObjectWeakLoadStrong(v118);
          if (Strong)
          {
            v80 = Strong;
            v81 = sub_10001A9A8(&qword_1010F7A80);
            v82 = swift_allocObject(v81, 72, 7);
            *(_OWORD *)(v82 + 16) = v102;
            sub_100030784((uint64_t)&v137, v82 + 32);
            v23 = v104;
            sub_10005972C(v103, (uint64_t)v104, type metadata accessor for Intent);
            v119 = *(_QWORD *)(v80 + 72);
            v83 = v105;
            sub_10005972C((uint64_t)v23, v105, type metadata accessor for Intent);
            v84 = *(unsigned __int8 *)(v107 + 80);
            v85 = (v84 + 40) & ~v84;
            v86 = (_QWORD *)swift_allocObject(&unk_101086840, v85 + v106, v84 | 7);
            v86[2] = v82;
            v86[3] = v2;
            v86[4] = v80;
            sub_1000126EC(v83, (uint64_t)v86 + v85, type metadata accessor for Intent);
            v135 = sub_1006862FC;
            v136 = v86;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            v133 = sub_100016FB8;
            v134 = &unk_101086858;
            v31 = _Block_copy(&aBlock);
            swift_bridgeObjectRetain(v82);
            v87 = (id)v2;
            v88 = swift_unknownObjectRetain(v80);
            v89 = v108;
            static DispatchQoS.unspecified.getter(v88);
            v131 = _swiftEmptyArrayStorage;
            v90 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v91 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
            v92 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
            v93 = v111;
            v94 = v113;
            v95 = v90;
            v53 = v117;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v131, v91, v92, v113, v95);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v89, v93, v31);
            _Block_release(v31);
            (*(void (**)(char *, uint64_t))(v112 + 8))(v93, v94);
            (*(void (**)(char *, uint64_t))(v109 + 8))(v89, v110);
            swift_unknownObjectRelease(v80);
            v59 = (uint64_t)v114;
            a1 = (uint64_t)v115;
            swift_bridgeObjectRelease();

            swift_release();
            sub_1000126B0((uint64_t)v23, type metadata accessor for Intent);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
            v96 = *(void (**)(char *, uint64_t))(v130 + 8);
            v97 = v127;
          }
          else
          {
            v59 = (uint64_t)v23;

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
            v96 = *(void (**)(char *, uint64_t))(v130 + 8);
            v97 = v22;
          }
          v60 = (void *)v128;
          v96(v97, v128);
          v22 = (char *)&qword_101103558;
          v2 = (unint64_t)v129;
          if (!v129)
            goto LABEL_18;
        }
        else
        {
          v60 = v31;
          (*(void (**)(char *, void *))(v130 + 8))(v22, v31);

          sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
          v22 = (char *)&qword_101103558;
          v2 = (unint64_t)v129;
          v59 = (uint64_t)v23;
          if (!v129)
            goto LABEL_18;
        }
      }
      __break(1u);
LABEL_47:
      __break(1u);
    }
LABEL_18:
    v69 = v126 + 1;
    if (__OFADD__(v126, 1))
      goto LABEL_47;
    if (v69 >= v116)
      goto LABEL_35;
    v70 = *(_QWORD *)(v101 + 8 * v69);
    if (v70)
    {
LABEL_21:
      v62 = (char *)((v70 - 1) & v70);
      v63 = __clz(__rbit64(v70)) + (v69 << 6);
      v126 = v69;
      goto LABEL_17;
    }
    v71 = v126 + 2;
    ++v126;
    if (v69 + 1 >= v116)
      goto LABEL_35;
    v70 = *(_QWORD *)(v101 + 8 * v71);
    if (v70)
    {
LABEL_24:
      v69 = v71;
      goto LABEL_21;
    }
    v126 = v69 + 1;
    if (v69 + 2 >= v116)
      goto LABEL_35;
    v70 = *(_QWORD *)(v101 + 8 * (v69 + 2));
    if (v70)
    {
      v69 += 2;
      goto LABEL_21;
    }
    v71 = v69 + 3;
    v126 = v69 + 2;
    if (v69 + 3 >= v116)
    {
LABEL_35:
      v72 = sub_10001A9A8(&qword_101103558);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(a1, 1, 1, v72);
      v62 = 0;
      goto LABEL_36;
    }
    v70 = *(_QWORD *)(v101 + 8 * v71);
    if (v70)
      goto LABEL_24;
    while (1)
    {
      v69 = v71 + 1;
      if (__OFADD__(v71, 1))
        break;
      if (v69 >= v116)
      {
        v126 = v98;
        goto LABEL_35;
      }
      v70 = *(_QWORD *)(v101 + 8 * v69);
      ++v71;
      if (v70)
        goto LABEL_21;
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_100684634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];

  swift_beginAccess(a2 + 16, v20, 1, 0);
  *(_QWORD *)(a2 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  v9 = swift_bridgeObjectRelease();
  v10 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v11 = qword_1011B7D70;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 152, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E221E0;
  v14 = UUID.uuidString.getter(v13);
  v16 = v15;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v17 = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v13 + 96) = &type metadata for Int;
  *(_QWORD *)(v13 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 64) = v17;
  *(_QWORD *)(v13 + 72) = v18;
  v19 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(v13 + 136) = &type metadata for Int;
  *(_QWORD *)(v13 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v13 + 112) = v19;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Session: %@ - Found %llu latest locations for beacons: %llu.", 60, 2, v13);
  swift_bridgeObjectRelease();
  dispatch_group_leave(a5);
}

uint64_t sub_100684798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v8 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_1006861B0;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010867B8;
  v9 = _Block_copy(aBlock);
  swift_retain();
  v10 = swift_release();
  static DispatchQoS.unspecified.getter(v10);
  aBlock[0] = _swiftEmptyArrayStorage;
  v11 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v13 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v9);
  _Block_release(v9);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_100684988(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  double v4;
  double v5;
  id v6;
  void *v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer;
  if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer))
  {
    v3 = (void *)objc_opt_self(NSTimer);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B698(v8);
    v5 = v4;
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v3, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", a1, "nearOwnerBeaconNotObserved", 0, 1, v5);
    v7 = *(void **)(a1 + v1);
    *(_QWORD *)(a1 + v1) = v6;

  }
}

uint64_t sub_100684A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v5 - 8);
  v23 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Intent(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  sub_10001F6FC();
  v11 = (void *)static OS_dispatch_queue.main.getter();
  sub_10005972C(a1, (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for Intent);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_101086778, v13 + v10, v12 | 7);
  *(_QWORD *)(v14 + 16) = v21;
  sub_1000126EC((uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, type metadata accessor for Intent);
  aBlock[4] = sub_100686180;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101086790;
  v15 = _Block_copy(aBlock);
  swift_retain();
  v16 = swift_release();
  static DispatchQoS.unspecified.getter(v16);
  aBlock[0] = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v18, v19, v2, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v23);
}

uint64_t sub_100684D00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unsigned int v29;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer;
  v9 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer);
  if (v9)
  {
    objc_msgSend(v9, "invalidate");
    v10 = *(void **)(a1 + v8);
    *(_QWORD *)(a1 + v8) = 0;

  }
  v11 = objc_msgSend((id)objc_opt_self(NSTimer), "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", a1, "intentTimerFiredWithTimer:", 0, 0, *(double *)(a2 + 48));
  v12 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v11;
  v13 = v11;

  v29 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA290 != -1)
    swift_once(&qword_1010EA290, sub_100B5DC7C);
  v15 = qword_1011B7D70;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 112, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B10;
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v17 + 64) = v21;
  *(_QWORD *)(v17 + 32) = v18;
  *(_QWORD *)(v17 + 40) = v20;
  v22 = objc_msgSend(v13, "fireDate");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

  v23 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v24 = dispatch thunk of CustomStringConvertible.description.getter(v4, v23);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v21;
  *(_QWORD *)(v17 + 72) = v24;
  *(_QWORD *)(v17 + 80) = v26;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v15, "- Session: %@ - Monitor timer fire date: %@", 43, 2, v17);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100684F30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];

  v2 = type metadata accessor for Intent(0);
  __chkstk_darwin(v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v19, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v6 = result;
    v7 = sub_100681CE4();
    v8 = static os_log_type_t.default.getter(v7);
    if (qword_1010EA290 != -1)
      swift_once(&qword_1010EA290, sub_100B5DC7C);
    v9 = qword_1011B7D70;
    v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v11 = swift_allocObject(v10, 72, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
    v12 = UUID.uuidString.getter(v11);
    v14 = v13;
    *(_QWORD *)(v11 + 56) = &type metadata for String;
    *(_QWORD *)(v11 + 64) = sub_10001AA00();
    *(_QWORD *)(v11 + 32) = v12;
    *(_QWORD *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "- Session: %@ - No near owner beacons", 37, 2, v11);
    swift_bridgeObjectRelease();
    Strong = swift_unknownObjectWeakLoadStrong(v6 + 16);
    if (Strong)
    {
      v16 = Strong;
      v17 = v6 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
      swift_beginAccess(v6 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, v18, 0, 0);
      sub_10005972C(v17, (uint64_t)v4, type metadata accessor for Intent);
      sub_100AEC4A8(v6, (uint64_t)v7);
      swift_release();
      swift_unknownObjectRelease(v16);
      swift_bridgeObjectRelease();
      return sub_1000126B0((uint64_t)v4, type metadata accessor for Intent);
    }
    else
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1006851E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE v24[24];

  v2 = type metadata accessor for Intent(0);
  __chkstk_darwin(v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v23[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a1 += 16;
  swift_beginAccess(a1, v24, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v10 = result;
    v11 = *(void **)(result + 72);
    *v8 = v11;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
    v12 = v11;
    LOBYTE(v11) = _dispatchPreconditionTest(_:)(v8);
    v13 = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
    if ((v11 & 1) != 0)
    {
      v8 = (_QWORD *)static os_log_type_t.default.getter(v13);
      if (qword_1010EA290 == -1)
        goto LABEL_4;
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1010EA290, sub_100B5DC7C);
LABEL_4:
    v14 = qword_1011B7D70;
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    v17 = UUID.uuidString.getter(v16);
    v19 = v18;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10001AA00();
    *(_QWORD *)(v16 + 32) = v17;
    *(_QWORD *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v14, "- Session: %@ - Intent timed out", 32, 2, v16);
    swift_bridgeObjectRelease();
    Strong = swift_unknownObjectWeakLoadStrong(v10 + 16);
    if (Strong)
    {
      v21 = Strong;
      v22 = v10 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent;
      swift_beginAccess(v10 + OBJC_IVAR____TtC12searchpartyd13IntentSession_intent, v23, 0, 0);
      sub_10005972C(v22, (uint64_t)v4, type metadata accessor for Intent);
      sub_100AED1EC((uint64_t)v4);
      swift_release();
      swift_unknownObjectRelease(v21);
      return sub_1000126B0((uint64_t)v4, type metadata accessor for Intent);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100685514(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[10];

  v5[0] = &unk_100E479B0;
  v5[1] = &unk_100E479C8;
  v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[3] = *(_QWORD *)(result - 8) + 64;
    v5[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[5] = &unk_100E479E0;
    v5[6] = &unk_100E479E0;
    v5[7] = &unk_100E479F8;
    result = type metadata accessor for Intent(319);
    if (v4 <= 0x3F)
    {
      v5[8] = *(_QWORD *)(result - 8) + 64;
      v5[9] = &unk_100E479E0;
      return swift_updateClassMetadata2(a1, 256, 10, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t sub_1006855E0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100685604()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100685638()
{
  uint64_t v0;

  return sub_1006837C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100685644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  void *v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[3];
  uint64_t v121;
  uint64_t v122;
  char v123[32];

  v4 = type metadata accessor for UUID(0);
  v116 = *(_QWORD **)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v99 - v8;
  v111 = sub_10001A9A8(&qword_101103580);
  v10 = __chkstk_darwin(v111);
  v110 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v109 = (uint64_t)&v99 - v13;
  v14 = __chkstk_darwin(v12);
  v108 = (char *)&v99 - v15;
  __chkstk_darwin(v14);
  v107 = (char *)&v99 - v16;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  a1 += 16;
  swift_beginAccess(a1, v123, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (!result)
    return result;
  v22 = *(void **)(result + 72);
  *v20 = v22;
  v23 = result;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v24 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v22 & 1) == 0)
    goto LABEL_64;
  v101 = v23;
  v112 = sub_100681CE4();
  v25 = *(_QWORD *)(a2 + 16);
  v26 = _swiftEmptyArrayStorage;
  if (!v25)
  {
LABEL_28:
    v115 = v26[2];
    if (v115)
    {
      v62 = 0;
      v63 = v112[2];
      v114 = (unint64_t)(v26 + 4);
      v111 = (uint64_t)(v112 + 4);
      v64 = _swiftEmptyArrayStorage;
      v113 = v63;
      do
      {
        if (v62 >= v26[2])
        {
          __break(1u);
          goto LABEL_58;
        }
        sub_100030784(v114 + 40 * v62, (uint64_t)v120);
        if (v63)
        {
          v65 = v64;
          swift_bridgeObjectRetain(v112);
          v66 = v111;
          v67 = v63;
          while (1)
          {
            sub_100030784(v66, (uint64_t)&v117);
            v69 = v118;
            v68 = v119;
            sub_10001AA44(&v117, v118);
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v68 + 8) + 8) + 32))(v69);
            v71 = v121;
            v70 = v122;
            sub_10001AA44(v120, v121);
            (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v70 + 8) + 8) + 32))(v71);
            LOBYTE(v70) = static UUID.== infix(_:_:)(v9, v7);
            v72 = (void (*)(uint64_t, uint64_t))v116[1];
            v72(v7, v4);
            v72((uint64_t)v9, v4);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v117);
            if ((v70 & 1) != 0)
              break;
            v66 += 40;
            if (!--v67)
            {
              swift_bridgeObjectRelease();
              v64 = v65;
              v63 = v113;
              goto LABEL_30;
            }
          }
          swift_bridgeObjectRelease();
          sub_100030784((uint64_t)v120, (uint64_t)&v117);
          v64 = v65;
          if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
            v64 = sub_10001BC00(0, v65[2] + 1, 1, v65);
          v74 = v64[2];
          v73 = v64[3];
          if (v74 >= v73 >> 1)
            v64 = sub_10001BC00((_QWORD *)(v73 > 1), v74 + 1, 1, v64);
          v64[2] = v74 + 1;
          sub_10000F9FC(&v117, (uint64_t)&v64[5 * v74 + 4]);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v120);
          v63 = v113;
        }
        else
        {
LABEL_30:
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v120);
        }
        ++v62;
      }
      while (v62 != v115);
      swift_bridgeObjectRelease();
      v75 = swift_bridgeObjectRelease();
      if (!v64[2])
        goto LABEL_55;
    }
    else
    {
      swift_bridgeObjectRelease();
      v75 = swift_bridgeObjectRelease();
      v64 = _swiftEmptyArrayStorage;
      if (!_swiftEmptyArrayStorage[2])
      {
LABEL_55:
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
    v115 = (unint64_t)v64;
    v7 = static os_log_type_t.default.getter(v75);
    if (qword_1010EA290 != -1)
      goto LABEL_65;
    goto LABEL_45;
  }
  *(_QWORD *)&v117 = _swiftEmptyArrayStorage;
  sub_10009A628(0, v25, 0);
  v28 = sub_10001D6A8(a2);
  v29 = 0;
  v30 = a2 + 64;
  v31 = *(_BYTE *)(a2 + 32);
  v100 = a2 + 88;
  v106 = a2;
  v102 = v25;
  v103 = v27;
  v104 = a2 + 64;
  v105 = v9;
  while ((v28 & 0x8000000000000000) == 0 && v28 < 1 << v31)
  {
    if ((*(_QWORD *)(v30 + 8 * ((unint64_t)v28 >> 6)) & (1 << v28)) == 0)
      goto LABEL_59;
    if (*(_DWORD *)(a2 + 36) != (_DWORD)v27)
      goto LABEL_60;
    v114 = 1 << v28;
    v115 = (unint64_t)v28 >> 6;
    v113 = v29;
    v35 = v111;
    v36 = (uint64_t)v107;
    v37 = (uint64_t)&v107[*(int *)(v111 + 48)];
    v38 = v116;
    v39 = (void (*)(char *, uint64_t, uint64_t))v116[2];
    v39(v107, *(_QWORD *)(a2 + 48) + v116[9] * v28, v4);
    sub_100030784(*(_QWORD *)(a2 + 56) + 40 * v28, v37);
    v40 = v108;
    v39(v108, v36, v4);
    sub_100030784(v37, (uint64_t)&v40[*(int *)(v35 + 48)]);
    v41 = (uint64_t)v40;
    v42 = v109;
    sub_100005CF0(v41, v109, &qword_101103580);
    sub_100004048(v36, &qword_101103580);
    v43 = *(int *)(v35 + 48);
    v44 = v110;
    v45 = (__int128 *)&v110[v43];
    v46 = v42 + v43;
    v39(v110, v42, v4);
    sub_100030784(v46, (uint64_t)v45);
    sub_10000F9FC(v45, (uint64_t)v120);
    ((void (*)(char *, uint64_t))v38[1])(v44, v4);
    sub_100004048(v42, &qword_101103580);
    v47 = v117;
    if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
    {
      sub_10009A628(0, *(_QWORD *)(v47 + 16) + 1, 1);
      v47 = v117;
    }
    v49 = *(_QWORD *)(v47 + 16);
    v48 = *(_QWORD *)(v47 + 24);
    v9 = v105;
    if (v49 >= v48 >> 1)
      sub_10009A628(v48 > 1, v49 + 1, 1);
    v50 = v121;
    v51 = v122;
    v52 = sub_10009F5D0((uint64_t)v120, v121);
    __chkstk_darwin(v52);
    v54 = (char *)&v99 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v55 + 16))(v54);
    sub_1004AA86C(v49, (uint64_t)v54, (uint64_t *)&v117, v50, v51);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v120);
    a2 = v106;
    v31 = *(_BYTE *)(v106 + 32);
    v32 = 1 << v31;
    if (v28 >= 1 << v31)
      goto LABEL_61;
    v30 = v104;
    v56 = v115;
    v57 = *(_QWORD *)(v104 + 8 * v115);
    if ((v57 & v114) == 0)
      goto LABEL_62;
    LODWORD(v27) = v103;
    if (*(_DWORD *)(v106 + 36) != (_DWORD)v103)
      goto LABEL_63;
    v58 = v57 & (-2 << (v28 & 0x3F));
    if (v58)
    {
      v32 = __clz(__rbit64(v58)) | v28 & 0xFFFFFFFFFFFFFFC0;
      v33 = v102;
      v34 = v113;
    }
    else
    {
      v59 = v115 + 1;
      v60 = (v32 + 63) >> 6;
      v33 = v102;
      v34 = v113;
      if (v115 + 1 < v60)
      {
        v61 = *(_QWORD *)(v104 + 8 * v59);
        if (!v61)
        {
          v59 = v115 + 2;
          if (v115 + 2 >= v60)
            goto LABEL_6;
          v61 = *(_QWORD *)(v104 + 8 * v59);
          if (!v61)
          {
            while (v60 - 3 != v56)
            {
              v61 = *(_QWORD *)(v100 + 8 * v56++);
              if (v61)
              {
                v59 = v56 + 2;
                goto LABEL_21;
              }
            }
            goto LABEL_6;
          }
        }
LABEL_21:
        v32 = __clz(__rbit64(v61)) + (v59 << 6);
      }
    }
LABEL_6:
    v29 = v34 + 1;
    v28 = v32;
    if (v29 == v33)
    {
      v26 = (_QWORD *)v117;
      goto LABEL_28;
    }
  }
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once(&qword_1010EA290, sub_100B5DC7C);
LABEL_45:
  v76 = qword_1011B7D70;
  v77 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v78 = swift_allocObject(v77, 112, 7);
  *(_OWORD *)(v78 + 16) = xmmword_100E22B10;
  v79 = UUID.uuidString.getter(v78);
  v81 = v80;
  *(_QWORD *)(v78 + 56) = &type metadata for String;
  v114 = sub_10001AA00();
  *(_QWORD *)(v78 + 64) = v114;
  *(_QWORD *)(v78 + 32) = v79;
  *(_QWORD *)(v78 + 40) = v81;
  v82 = v115;
  v83 = *(_QWORD *)(v115 + 16);
  v84 = _swiftEmptyArrayStorage;
  if (v83)
  {
    v112 = (_QWORD *)v76;
    LODWORD(v113) = v7;
    *(_QWORD *)&v117 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v115);
    sub_10009A2F4(0, v83, 0);
    v85 = v82 + 32;
    do
    {
      sub_100030784(v85, (uint64_t)v120);
      v87 = v121;
      v86 = v122;
      sub_10001AA44(v120, v121);
      v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v86 + 8) + 8) + 32))(v87);
      v89 = UUID.uuidString.getter(v88);
      v91 = v90;
      ((void (*)(char *, uint64_t))v116[1])(v9, v4);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v120);
      v84 = (_QWORD *)v117;
      if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
      {
        sub_10009A2F4(0, v84[2] + 1, 1);
        v84 = (_QWORD *)v117;
      }
      v93 = v84[2];
      v92 = v84[3];
      if (v93 >= v92 >> 1)
      {
        sub_10009A2F4(v92 > 1, v93 + 1, 1);
        v84 = (_QWORD *)v117;
      }
      v84[2] = v93 + 1;
      v94 = &v84[2 * v93];
      v94[4] = v89;
      v94[5] = v91;
      v85 += 40;
      --v83;
    }
    while (v83);
    v82 = v115;
    swift_bridgeObjectRelease();
    v7 = v113;
    v76 = (uint64_t)v112;
  }
  v95 = Array.description.getter(v84, &type metadata for String);
  v97 = v96;
  swift_bridgeObjectRelease();
  v98 = v114;
  *(_QWORD *)(v78 + 96) = &type metadata for String;
  *(_QWORD *)(v78 + 104) = v98;
  *(_QWORD *)(v78 + 72) = v95;
  *(_QWORD *)(v78 + 80) = v97;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v76, "- Session: %@ - Monitored near owner beacons found: %@", 54, 2, v78);
  swift_bridgeObjectRelease();
  sub_100683844(v82);
  swift_bridgeObjectRelease();
  sub_100681A40();
  sub_100684798();
  return swift_release();
}

uint64_t sub_100686074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Intent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1006860B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for Intent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for BeaconLocationUpdate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100686180()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Intent(0) - 8) + 80);
  return sub_100684D00(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

void sub_1006861B0()
{
  uint64_t v0;

  sub_100684988(v0);
}

uint64_t sub_1006861B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006861DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100686218(uint64_t a1)
{
  uint64_t v1;

  sub_100684634(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(NSObject **)(v1 + 40));
}

uint64_t sub_100686224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for Intent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 36);
  v7 = type metadata accessor for BeaconLocationUpdate(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v6, v8);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1006862FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Intent(0) - 8) + 80);
  return sub_100AEBD58(*(_QWORD *)(v0 + 16), *(char **)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_100686330()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100686364()
{
  uint64_t v0;

  return sub_1006827F8(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100686370(uint64_t *a1)
{
  uint64_t v1;

  return sub_1006830A8(a1, v1);
}

uint64_t sub_100686378(uint64_t a1)
{
  uint64_t v1;

  return sub_100683190(a1, v1);
}

uint64_t sub_100686380()
{
  uint64_t v0;

  return sub_100684F30(v0);
}

uint64_t sub_100686388(uint64_t a1)
{
  uint64_t *v1;

  return sub_10068357C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1006863A8()
{
  uint64_t v0;

  return sub_100685644(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_1006863B4()
{
  uint64_t v0;

  sub_100681C68(v0, &OBJC_IVAR____TtC12searchpartyd13IntentSession_monitorTimer);
}

void sub_1006863D4()
{
  uint64_t v0;

  sub_100681C68(v0, &OBJC_IVAR____TtC12searchpartyd13IntentSession_nearOwnerMonitoringTimer);
}

uint64_t sub_1006863F4()
{
  uint64_t v0;

  return sub_1006851E4(v0);
}

uint64_t sub_10068642C(uint64_t a1)
{
  return sub_100686388(a1);
}

uint64_t sub_100686440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10068644C);
}

uint64_t sub_10068644C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1006864C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006864D4);
}

char *sub_1006864D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for NFCTapEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1011035E0;
  if (!qword_1011035E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NFCTapEndPoint);
  return result;
}

uint64_t sub_100686584()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x6970617463666E2FLL;
  v5._object = (void *)0xEB000000006F666ELL;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

ValueMetadata *type metadata accessor for SendPairingDataCommandPayload()
{
  return &type metadata for SendPairingDataCommandPayload;
}

uint64_t sub_100686678@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100686824(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_1006866A4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1006866D0();
  result = sub_100686714();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006866D0()
{
  unint64_t result;

  result = qword_101103618;
  if (!qword_101103618)
  {
    result = swift_getWitnessTable(byte_100E47AB8, &type metadata for SendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101103618);
  }
  return result;
}

unint64_t sub_100686714()
{
  unint64_t result;

  result = qword_101103620;
  if (!qword_101103620)
  {
    result = swift_getWitnessTable(byte_100E47A90, &type metadata for SendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101103620);
  }
  return result;
}

uint64_t sub_100686758(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_100686764 + dword_100686804[a2 >> 62]))();
}

uint64_t sub_100686774(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 32)
  {
    __break(1u);
    JUMPOUT(0x100686804);
  }
  return ((uint64_t (*)(void))((char *)&loc_1006867B0 + dword_100686814[a4 >> 62]))();
}

uint64_t sub_100686824(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v15, v3, v4);
  v5 = v16;
  v6 = v17;
  v7 = sub_10009F5D0((uint64_t)v15, v16);
  v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v5, v6);
  if (!v1)
  {
    v10 = v8;
    v11 = v9;
    v12 = v16;
    v13 = v17;
    sub_10009F5D0((uint64_t)v15, v16);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1326, v12, v13);
    v7 = sub_100686758(v10, v11);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

_QWORD *sub_100686954@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (__CFADD__(*result, *a2))
    __break(1u);
  else
    *a3 = *result + *a2;
  return result;
}

_QWORD *sub_100686970(_QWORD *result, _QWORD *a2)
{
  if (__CFADD__(*result, *a2))
    __break(1u);
  else
    *result += *a2;
  return result;
}

_QWORD *sub_10068698C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*result < *a2)
    __break(1u);
  else
    *a3 = *result - *a2;
  return result;
}

_QWORD *sub_1006869A8(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2)
    __break(1u);
  else
    *result -= *a2;
  return result;
}

BOOL sub_1006869C4(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_1006869D8(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1006869EC(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100686A00(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t sub_100686A14()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x7972616D6972702ELL;
}

Swift::Int sub_100686A98()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100686ADC()
{
  Swift::UInt64 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100686B04()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_100686B44@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *result;
  v4 = *v2;
  if (*result >= (unint64_t)*v2)
  {
    if (*result - *v2 >= 0)
    {
      *a2 = *result - *v2;
      return result;
    }
  }
  else
  {
    if (v4 - v3 >= 0)
    {
      *a2 = v3 - v4;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_100686B7C@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v7;
  char v8;

  v3 = *result;
  v4 = *v2;
  if ((*result & 0x8000000000000000) == 0)
  {
    v5 = __CFADD__(v4, v3);
    v4 += v3;
    if (!v5)
      goto LABEL_9;
    __break(1u);
  }
  v6 = __OFSUB__(0, v3);
  v7 = -v3;
  if (v6)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v7 & 0x8000000000000000) == 0)
  {
    v5 = v4 >= v7;
    v4 -= v7;
    if (v5)
    {
LABEL_9:
      *a2 = v4;
      return result;
    }
    goto LABEL_11;
  }
LABEL_12:
  v8 = 2;
  result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v8, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_100686C14(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t result;
  char v12;

  v6 = *a4;
  v7 = *a6;
  if ((*a6 & 0x8000000000000000) == 0)
  {
    v8 = __CFADD__(v6, v7);
    v6 += v7;
    if (!v8)
      goto LABEL_9;
    __break(1u);
  }
  v9 = __OFSUB__(0, v7);
  v10 = -v7;
  if (v9)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    v8 = v6 >= v10;
    v6 -= v10;
    if (v8)
    {
LABEL_9:
      *a1 = v6;
      return 0;
    }
    goto LABEL_11;
  }
LABEL_12:
  v12 = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v12, 3451, 0);
  __break(1u);
  return result;
}

uint64_t *sub_100686CB4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *result;
  v3 = *a2;
  v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0)
      return (uint64_t *)(v4 == 0);
  }
  else
  {
    if (v2 - v3 >= 0)
    {
      v4 = v3 - v2;
      return (uint64_t *)(v4 == 0);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100686CEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v12, v5, v6);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v7 = objc_autoreleasePoolPush();
  v8 = v13;
  v9 = v14;
  sub_10001AA44(v12, v13);
  v10 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v8, v9);
  objc_autoreleasePoolPop(v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v10;
  return result;
}

uint64_t sub_100686DD0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v8, v3, v4);
  v5 = v9;
  v6 = v10;
  sub_10009F5D0((uint64_t)v8, v9);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v2, v5, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
}

ValueMetadata *type metadata accessor for PrimaryWildIndex()
{
  return &type metadata for PrimaryWildIndex;
}

unint64_t sub_100686E74()
{
  unint64_t result;

  result = qword_101103628;
  if (!qword_101103628)
  {
    result = swift_getWitnessTable(byte_100E47CBC, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103628);
  }
  return result;
}

void *sub_100686EB8()
{
  return &protocol witness table for Int64;
}

void *sub_100686EC4()
{
  return &protocol witness table for Int64;
}

void *sub_100686ED0()
{
  return &protocol witness table for UInt64;
}

unint64_t sub_100686EE0()
{
  unint64_t result;

  result = qword_101103630;
  if (!qword_101103630)
  {
    result = swift_getWitnessTable(byte_100E47B64, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103630);
  }
  return result;
}

unint64_t sub_100686F24(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100686F80();
  a1[2] = sub_100686FC4();
  a1[3] = sub_100687008();
  a1[4] = sub_10068704C();
  a1[5] = sub_100687090();
  a1[6] = sub_1006870D4();
  a1[7] = sub_100687118();
  result = sub_10068715C();
  a1[8] = result;
  return result;
}

unint64_t sub_100686F80()
{
  unint64_t result;

  result = qword_101103638;
  if (!qword_101103638)
  {
    result = swift_getWitnessTable(byte_100E47D04, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103638);
  }
  return result;
}

unint64_t sub_100686FC4()
{
  unint64_t result;

  result = qword_101103640;
  if (!qword_101103640)
  {
    result = swift_getWitnessTable(a5_6, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103640);
  }
  return result;
}

unint64_t sub_100687008()
{
  unint64_t result;

  result = qword_101103648;
  if (!qword_101103648)
  {
    result = swift_getWitnessTable(byte_100E47B28, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103648);
  }
  return result;
}

unint64_t sub_10068704C()
{
  unint64_t result;

  result = qword_101103650;
  if (!qword_101103650)
  {
    result = swift_getWitnessTable(byte_100E47B00, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103650);
  }
  return result;
}

unint64_t sub_100687090()
{
  unint64_t result;

  result = qword_101103658;
  if (!qword_101103658)
  {
    result = swift_getWitnessTable(aE_31, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103658);
  }
  return result;
}

unint64_t sub_1006870D4()
{
  unint64_t result;

  result = qword_101103660;
  if (!qword_101103660)
  {
    result = swift_getWitnessTable(aM_24, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103660);
  }
  return result;
}

unint64_t sub_100687118()
{
  unint64_t result;

  result = qword_101103668;
  if (!qword_101103668)
  {
    result = swift_getWitnessTable(asc_100E47BE4, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103668);
  }
  return result;
}

unint64_t sub_10068715C()
{
  unint64_t result;

  result = qword_101103670;
  if (!qword_101103670)
  {
    result = swift_getWitnessTable(byte_100E47B8C, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_101103670);
  }
  return result;
}

uint64_t sub_1006871A0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B73F8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B73F8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x65646F4D74736F6CLL, 0xE800000000000000);
}

uint64_t sub_100687218(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  void (*v104)(void);
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  int *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  char *v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(void);
  uint64_t v178;
  uint8_t *v179;
  _OWORD v180[5];
  uint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;

  v178 = a4;
  v177 = a3;
  v171 = a2;
  v159 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v159);
  v162 = (uint64_t *)((char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v7);
  v163 = (uint64_t)&v158 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v165 = *(_QWORD *)(v166 - 8);
  v9 = __chkstk_darwin(v166);
  v11 = (char *)&v158 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v161 = (uint64_t)&v158 - v12;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v13);
  v15 = (char *)&v158 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconGroup(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v173 = (uint64_t)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for UUID(0);
  v174 = *(_QWORD *)(v175 - 8);
  v19 = __chkstk_darwin(v175);
  v170 = (char *)&v158 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v160 = (char *)&v158 - v21;
  v168 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v168);
  v169 = (uint64_t)&v158 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LostModeRecord(0);
  v24 = __chkstk_darwin(v23);
  v164 = (uint64_t)&v158 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v167 = (uint64_t)&v158 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v27);
  v29 = (char *)&v158 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for OwnedBeaconRecord(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v158 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = v4;
  v35 = *(_QWORD *)(v4 + 280);
  v176 = v23;
  v36 = *(int *)(v23 + 24);
  v37 = v32;
  v179 = (uint8_t *)a1;
  v38 = a1 + v36;
  sub_10080B950(v38, (uint64_t)v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v37) != 1)
  {
    sub_1000126EC((uint64_t)v29, (uint64_t)v34, type metadata accessor for OwnedBeaconRecord);
    v47 = (uint64_t)v34;
    if (qword_1010E9E18 != -1)
      swift_once(&qword_1010E9E18, sub_1006871A0);
    v48 = type metadata accessor for Logger(0);
    sub_10001A9E8(v48, (uint64_t)qword_1011B73F8);
    v49 = v167;
    v50 = sub_10005972C((uint64_t)v179, v167, type metadata accessor for LostModeRecord);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = v175;
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(32, -1);
      v173 = v47;
      v56 = v55;
      *(_QWORD *)&v182 = v55;
      *(_DWORD *)v54 = 141558275;
      *(_QWORD *)&v180[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v180, (char *)v180 + 8, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2081;
      v166 = v54 + 14;
      v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v53, v57);
      *(_QWORD *)&v180[0] = sub_100016940(v58, v59, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v180, (char *)v180 + 8, v166, v54 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v49, type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "updateLostModeServer for beacon %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      v60 = v56;
      v47 = v173;
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      sub_1000126B0(v49, type metadata accessor for LostModeRecord);
    }

    v72 = v169;
    sub_10005972C(v47 + *(int *)(v37 + 24), v169, type metadata accessor for StableIdentifier);
    v73 = (char *)&loc_100687AA4 + dword_100688D84[swift_getEnumCaseMultiPayload(v72, v168)];
    __asm { BR              X10 }
  }
  sub_100004048((uint64_t)v29, (uint64_t *)&unk_1010F47C0);
  sub_10081EDA8(v38, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010FF7F0);
    swift_retain();
    v39 = sub_10001A9A8(&qword_101103678);
    unsafeFromAsyncTask<A>(_:)(&v182, &unk_101111CE0, v35, v39);
    swift_release();
    v40 = *(_QWORD *)(v182 + 16);
    v41 = (int *)v176;
    if (v40)
    {
      v42 = v165;
      v43 = v182 + ((*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80));
      v44 = *(_QWORD *)(v165 + 72);
      swift_bridgeObjectRetain(v182);
      while (1)
      {
        sub_10005972C(v43, (uint64_t)v11, type metadata accessor for LocalFindableAccessoryRecord);
        if ((static UUID.== infix(_:_:)(v11, v38) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v11, type metadata accessor for LocalFindableAccessoryRecord);
        v43 += v44;
        if (!--v40)
        {
          swift_bridgeObjectRelease();
          v45 = 1;
          v46 = v163;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease();
      v46 = v163;
      sub_1000126EC((uint64_t)v11, v163, type metadata accessor for LocalFindableAccessoryRecord);
      v45 = 0;
    }
    else
    {
      v45 = 1;
      v46 = v163;
      v42 = v165;
    }
LABEL_29:
    v111 = (int *)v166;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v46, v45, 1, v166);
    swift_bridgeObjectRelease();
    v112 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v42 + 48))(v46, 1, v111);
    v113 = v174;
    if (v112 != 1)
    {
      v125 = v161;
      sub_1000126EC(v46, v161, type metadata accessor for LocalFindableAccessoryRecord);
      v126 = (uint64_t *)&v179[v41[9]];
      v127 = v126[1];
      v173 = *v126;
      v128 = v41[8];
      v129 = (uint64_t *)&v179[v41[7]];
      v130 = (char *)v129[1];
      v168 = *v129;
      v131 = *(_QWORD *)&v179[v128 + 8];
      v169 = *(_QWORD *)&v179[v128];
      v132 = sub_10001A9A8(&qword_101109370);
      v133 = *(_QWORD *)(type metadata accessor for AirPodsLostModeContent.Device(0) - 8);
      v134 = *(_QWORD *)(v133 + 72);
      v135 = *(unsigned __int8 *)(v133 + 80);
      v176 = (v135 + 32) & ~v135;
      v179 = (uint8_t *)swift_allocObject(v132, v176 + v134, v135 | 7);
      *((_OWORD *)v179 + 1) = xmmword_100E22B00;
      v136 = sub_10001A9A8(&qword_101103680);
      v137 = v162;
      v138 = (char *)v162 + *(int *)(v136 + 48);
      v139 = (uint64_t *)(v125 + v111[7]);
      v140 = *v139;
      v141 = v139[1];
      *v162 = *v139;
      v137[1] = v141;
      (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v138, v125 + v111[9], v175);
      v142 = v111[11];
      v143 = *(_QWORD *)(v125 + v111[10]);
      v144 = *(_QWORD *)(v125 + v142);
      v174 = v131;
      swift_bridgeObjectRetain(v131);
      v175 = v127;
      swift_bridgeObjectRetain(v127);
      v170 = v130;
      swift_bridgeObjectRetain(v130);
      sub_10001BBBC(v140, v141);
      v145 = sub_1001EE37C(v143, v144);
      if (v146 >> 60 == 15)
      {
        __break(1u);
      }
      else
      {
        v147 = v145;
        v148 = v146;
        v149 = (uint64_t *)((char *)v137 + *(int *)(v136 + 64));
        v150 = sub_1001EDBAC(v145, v146);
        v152 = v151;
        sub_10001EF3C(v147, v148);
        v153 = Data.hexString.getter(v150, v152);
        v155 = v154;
        sub_10001BC14(v150, v152);
        *v149 = v153;
        v149[1] = v155;
        sub_1001EE37C(v143, v144);
        if (v156 >> 60 != 15)
          __asm { BR              X11 }
      }
      __break(1u);
      JUMPOUT(0x100688D84);
    }
    v114 = sub_100004048(v46, (uint64_t *)&unk_1010EDC50);
    v115 = static os_log_type_t.error.getter(v114);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    v116 = qword_1011B7DC8;
    v117 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v118 = swift_allocObject(v117, 72, 7);
    *(_OWORD *)(v118 + 16) = xmmword_100E22B00;
    v119 = UUID.uuidString.getter(v118);
    v121 = v120;
    *(_QWORD *)(v118 + 56) = &type metadata for String;
    *(_QWORD *)(v118 + 64) = sub_10001AA00();
    *(_QWORD *)(v118 + 32) = v119;
    *(_QWORD *)(v118 + 40) = v121;
    os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v116, "updateLostModeServer: beacon/group not found!", 45, 2, v118);
    swift_bridgeObjectRelease();
    v122 = sub_1006666C0();
    v123 = swift_allocError(&_s13LostModeErrorON, v122, 0, 0);
    *v124 = 1;
    v177();
    return swift_errorRelease(v123);
  }
  else
  {
    sub_1000126EC((uint64_t)v15, v173, type metadata accessor for OwnedBeaconGroup);
    v61 = (int *)v176;
    if (qword_1010E9E18 != -1)
      swift_once(&qword_1010E9E18, sub_1006871A0);
    v62 = type metadata accessor for Logger(0);
    sub_10001A9E8(v62, (uint64_t)qword_1011B73F8);
    v63 = v164;
    v64 = sub_10005972C((uint64_t)v179, v164, type metadata accessor for LostModeRecord);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = swift_slowAlloc(22, -1);
      v68 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v182 = v68;
      *(_DWORD *)v67 = 141558275;
      *(_QWORD *)&v180[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v180, (char *)v180 + 8, v67 + 4, v67 + 12);
      *(_WORD *)(v67 + 12) = 2081;
      v69 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v175, v69);
      *(_QWORD *)&v180[0] = sub_100016940(v70, v71, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v180, (char *)v180 + 8, v67 + 14, v67 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v63, type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "updateLostModeServer for group %{private,mask.hash}s", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      sub_1000126B0(v63, type metadata accessor for LostModeRecord);
    }

    v74 = v173;
    sub_10036AC6C();
    v76 = v75;
    v77 = v172;
    swift_retain();
    sub_10068A5B0(v76, v77);
    v79 = v78;
    swift_bridgeObjectRelease();
    swift_release();
    v80 = &v179[v61[9]];
    v81 = *(_QWORD *)v80;
    v82 = *((_QWORD *)v80 + 1);
    v83 = &v179[v61[7]];
    v84 = *(_QWORD *)v83;
    v85 = *((_QWORD *)v83 + 1);
    v86 = &v179[v61[8]];
    v87 = *(_QWORD *)v86;
    v88 = *((_QWORD *)v86 + 1);
    v182 = xmmword_100E47D70;
    *(_QWORD *)&v183 = v81;
    *((_QWORD *)&v183 + 1) = v82;
    *(_QWORD *)&v184 = v84;
    *((_QWORD *)&v184 + 1) = v85;
    *(_QWORD *)&v185 = v87;
    *((_QWORD *)&v185 + 1) = v88;
    LOBYTE(v186) = v171 & 1;
    *((_QWORD *)&v186 + 1) = v79;
    swift_bridgeObjectRetain_n(v88, 3);
    swift_bridgeObjectRetain_n(v79, 2);
    swift_bridgeObjectRetain_n(0xE900000000000065, 2);
    swift_bridgeObjectRetain_n(v82, 3);
    swift_bridgeObjectRetain_n(v85, 3);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.info.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = swift_slowAlloc(32, -1);
      *(_DWORD *)v92 = 136315138;
      v181 = v93;
      v179 = v92 + 4;
      v180[2] = v184;
      v180[3] = v185;
      v180[4] = v186;
      v180[1] = v183;
      v180[0] = v182;
      swift_bridgeObjectRetain(0xE900000000000065);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v79);
      v94 = String.init<A>(describing:)(v180, &type metadata for AirPodsLostModeContent);
      *(_QWORD *)&v180[0] = sub_100016940(v94, v95, &v181);
      v74 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v180, (char *)v180 + 8, v179, v92 + 12);
      swift_bridgeObjectRelease_n(v79, 2);
      swift_bridgeObjectRelease_n(v88, 2);
      swift_bridgeObjectRelease_n(v85, 2);
      swift_bridgeObjectRelease_n(v82, 2);
      swift_bridgeObjectRelease_n(0xE900000000000065, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "AirPodsLostModeContent: %s", v92, 0xCu);
      swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v92, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v79, 2);
      swift_bridgeObjectRelease_n(v88, 2);
      swift_bridgeObjectRelease_n(v85, 2);
      swift_bridgeObjectRelease_n(v82, 2);
      swift_bridgeObjectRelease_n(0xE900000000000065, 2);
    }
    sub_100A03138((uint64_t)&v182);
    if (v96)
    {
      v99 = v96;
      v100 = v97;
      v101 = v98;
      sub_100555020(v96, v97, v98);
      sub_10068AA30(2);
      sub_10070F280(v99, v100, v101, v102);
      swift_release();
      v103 = swift_allocObject(&unk_101086CA8, 32, 7);
      v104 = v177;
      v105 = v178;
      *(_QWORD *)(v103 + 16) = v177;
      *(_QWORD *)(v103 + 24) = v105;
      swift_retain();
      Future.addFailure(block:)(sub_100690BC0, v103);
      swift_release();
      swift_release();
      v106 = (_QWORD *)swift_allocObject(&unk_101086CD0, 40, 7);
      v106[2] = v172;
      v106[3] = v104;
      v106[4] = v105;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100690B8C, v106);
      swift_release();
      swift_release();
      swift_release();
      sub_100153D94(v99, v100, v101);
      sub_1000126B0(v74, type metadata accessor for OwnedBeaconGroup);
      return sub_100153D94(v99, v100, v101);
    }
    else
    {
      v107 = static os_log_type_t.error.getter(0);
      if (qword_1010EA2E8 != -1)
        swift_once(&qword_1010EA2E8, sub_100B5E0D8);
      os_log(_:dso:log:_:_:)(v107, &_mh_execute_header, qword_1011B7DC8, "Unable to init LostModeRequest.", 31, 2, _swiftEmptyArrayStorage);
      v108 = sub_10033638C();
      v109 = swift_allocError(&type metadata for BeaconManagerCommandError, v108, 0, 0);
      *v110 = 0;
      v177();
      swift_errorRelease(v109);
      return sub_1000126B0(v74, type metadata accessor for OwnedBeaconGroup);
    }
  }
}

void sub_100688DA8(uint64_t a1, NSObject *a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((a1 & 1) != 0)
  {
    v3 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7DC8, "Successfully reverted CK changes.", 33, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v4 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7DC8, "Failed to revert CK changes", 27, 2, _swiftEmptyArrayStorage);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100688E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;

  v14 = (int *)type metadata accessor for LostModeRecord(0);
  v15 = (_QWORD *)(a1 + v14[8]);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease();
  *v15 = a2;
  v15[1] = a3;
  v16 = (_QWORD *)(a1 + v14[9]);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease();
  *v16 = a4;
  v16[1] = a5;
  v17 = (_QWORD *)(a1 + v14[7]);
  swift_bridgeObjectRetain(a7);
  result = swift_bridgeObjectRelease();
  *v17 = a6;
  v17[1] = a7;
  return result;
}

void sub_100688F48(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  _BYTE v6[24];

  v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v6, 1, 0);
  sub_1006908BC(a1, v5);
  dispatch_group_leave(a3);
}

uint64_t sub_100688FA8(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t result;

  v4 = (int *)type metadata accessor for LostModeRecord(0);
  v5 = v4[8];
  v7 = *(_QWORD *)(a2 + v5);
  v6 = *(_QWORD *)(a2 + v5 + 8);
  v8 = (_QWORD *)(a1 + v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *v8 = v7;
  v8[1] = v6;
  v9 = v4[9];
  v11 = *(_QWORD *)(a2 + v9);
  v10 = *(_QWORD *)(a2 + v9 + 8);
  v12 = (_QWORD *)(a1 + v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *v12 = v11;
  v12[1] = v10;
  v13 = v4[7];
  v15 = *(_QWORD *)(a2 + v13);
  v14 = *(_QWORD *)(a2 + v13 + 8);
  v16 = (_QWORD *)(a1 + v13);
  swift_bridgeObjectRetain(v14);
  result = swift_bridgeObjectRelease();
  *v16 = v15;
  v16[1] = v14;
  return result;
}

void sub_100689064(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_10001A9A8(&qword_1011036B8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1006906D4(a1, (uint64_t)v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = *v6;
    v9 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    v10 = qword_1011B7DC8;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
    v20 = v8;
    swift_errorRetain(v8);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v14 = String.init<A>(describing:)(&v20, v13);
    v16 = v15;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    *(_QWORD *)(v12 + 64) = sub_10001AA00();
    *(_QWORD *)(v12 + 32) = v14;
    *(_QWORD *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Failed to revert CK changes due to %@", 37, 2, v12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
  }
  else
  {
    v17 = sub_100004048((uint64_t)v6, &qword_1011036B8);
    v18 = static os_log_type_t.default.getter(v17);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1011B7DC8, "Successfully reverted CK changes.", 33, 2, _swiftEmptyArrayStorage);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_10068925C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int EnumCaseMultiPayload;
  int *v32;
  char *v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  __n128 v49;
  int *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  uint64_t v56;
  char *v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  __n128 v65;
  uint64_t v66;
  unint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  __n128 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int *v92;
  uint64_t *v93;
  char *v94;
  uint64_t *v95;
  _QWORD *v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  uint64_t *v104;
  char *v105;
  uint64_t v106;
  uint64_t *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, char *, uint64_t);
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  uint64_t v128;

  v120 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v120);
  v121 = (uint64_t *)((char *)&v113 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v125 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v125 - 8);
  v6 = __chkstk_darwin(v125);
  v123 = (char *)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v124 = (char *)&v113 - v8;
  v126 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v126);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v15 = *((_QWORD *)v14 - 1);
  __chkstk_darwin(v14);
  v17 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10080B950(a1, (uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010F47C0);
    v18 = type metadata accessor for AirPodsLostModeContent.Device(0);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v20 = a2;
    return v19(v20, 1, 1, v18);
  }
  v118 = v5;
  v119 = a2;
  sub_1000126EC((uint64_t)v13, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  v22 = (uint64_t)v17;
  v23 = sub_1001EE37C(*(_QWORD *)&v17[v14[16]], *(_QWORD *)&v17[v14[17]]);
  v25 = v23;
  v26 = v24;
  if (v24 >> 60 != 15)
  {
    sub_10001BBBC(v23, v24);
    v27 = sub_1001EDBAC(v25, v26);
    v29 = v28;
    sub_10001EF3C(v25, v26);
    v116 = Data.hexString.getter(v27, v29);
    v122 = v30;
    sub_10001BC14(v27, v29);
    __asm { BR              X9 }
  }
  v115 = 0;
  v116 = 0;
  sub_10005972C((uint64_t)&v17[v14[6]], (uint64_t)v10, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v10, v126);
  if (EnumCaseMultiPayload == 3)
  {
    v117 = 0;
    v126 = v25;
    v124 = v17;
    v122 = 0;
    v50 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    v51 = &v10[v50[12]];
    v52 = *(void (**)(char *, char *, uint64_t))v51;
    v53 = *((_QWORD *)v51 + 1);
    v54 = &v10[v50[16]];
    v55 = *(void (**)(char *, char *, uint64_t))v54;
    v56 = *((_QWORD *)v54 + 1);
    v57 = &v10[v50[20]];
    v58 = *(void (**)(char *, char *, uint64_t))v57;
    v59 = *((_QWORD *)v57 + 1);
    v60 = v118;
    v61 = v123;
    v62 = v10;
    v63 = v125;
    v113 = *(void (**)(char *, char *, uint64_t))(v118 + 32);
    v114 = v58;
    v113(v123, v62, v125);
    v127 = v55;
    v128 = v56;
    v64 = sub_1000330C8();
    v66 = Data.init<A>(hexString:)(&v127, &type metadata for String, v64, v65);
    if (v67 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001EF3C(v126, v26);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v63);
      sub_1000126B0((uint64_t)v124, type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      v73 = v66;
      v74 = v67;
      v127 = v52;
      v128 = v53;
      v75 = Data.init<A>(hexString:)(&v127, &type metadata for String, v64, v68);
      if (v76 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001EF3C(v73, v74);
        sub_10001EF3C(v126, v26);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v123, v125);
        sub_1000126B0((uint64_t)v124, type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        v78 = v75;
        v79 = v76;
        v127 = v114;
        v128 = v59;
        v80 = Data.init<A>(hexString:)(&v127, &type metadata for String, v64, v77);
        v82 = v81;
        sub_10001EF3C(v126, v26);
        sub_1000126B0((uint64_t)v124, type metadata accessor for OwnedBeaconRecord);
        v83 = v125;
        if (v82 >> 60 != 15)
        {
          v102 = (int *)sub_10001A9A8(&qword_101103690);
          v103 = v78;
          v104 = v121;
          v105 = (char *)v121 + v102[20];
          v106 = v83;
          v107 = (uint64_t *)((char *)v121 + v102[24]);
          v108 = (uint64_t *)((char *)v121 + v102[28]);
          *v121 = v73;
          v104[1] = v74;
          v104[2] = v103;
          v104[3] = v79;
          v104[4] = v80;
          v104[5] = v82;
          v113(v105, v123, v106);
          v109 = v122;
          *v107 = v116;
          v107[1] = v109;
          v110 = v117;
          *v108 = v115;
          v108[1] = v110;
          swift_storeEnumTagMultiPayload(v104, v120, 0);
          v111 = v119;
          sub_100A02748(v104, v119);
          v112 = type metadata accessor for AirPodsLostModeContent.Device(0);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v111, 0, 1, v112);
        }
        (*(void (**)(char *, uint64_t))(v118 + 8))(v123, v125);
        sub_10001EF3C(v73, v74);
        sub_10001EF3C(v78, v79);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    v84 = v119;
    v85 = type metadata accessor for AirPodsLostModeContent.Device(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v84, 1, 1, v85);
  }
  if (EnumCaseMultiPayload == 2)
  {
    v117 = 0;
    v126 = v25;
    v122 = 0;
    v32 = (int *)sub_10001A9A8(&qword_101106F40);
    v33 = &v10[v32[12]];
    v34 = *(void (**)(char *, char *, uint64_t))v33;
    v35 = *((_QWORD *)v33 + 1);
    v36 = &v10[v32[16]];
    v37 = *((_QWORD *)v36 + 1);
    v113 = *(void (**)(char *, char *, uint64_t))v36;
    v114 = v34;
    v38 = &v10[v32[20]];
    v40 = *(void (**)(char *, char *, uint64_t))v38;
    v39 = *((_QWORD *)v38 + 1);
    swift_bridgeObjectRelease();
    v41 = v118;
    v42 = (uint64_t)v124;
    v43 = v10;
    v44 = v125;
    v123 = *(char **)(v118 + 32);
    ((void (*)(char *, char *, uint64_t))v123)(v124, v43, v125);
    v127 = v40;
    v128 = v39;
    v45 = sub_1000330C8();
    v47 = Data.init<A>(hexString:)(&v127, &type metadata for String, v45, v46);
    if (v48 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001EF3C(v126, v26);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v44);
      sub_1000126B0(v22, type metadata accessor for OwnedBeaconRecord);
      v18 = type metadata accessor for AirPodsLostModeContent.Device(0);
      v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
      v20 = v119;
      return v19(v20, 1, 1, v18);
    }
    v70 = v48;
    v71 = v47;
    if (v37)
    {
      v127 = v113;
      v128 = v37;
      v118 = Data.init<A>(hexString:)(&v127, &type metadata for String, v45, v49);
      v113 = v72;
    }
    else
    {
      v118 = 0;
      v113 = (void (*)(char *, char *, uint64_t))0xF000000000000000;
    }
    v86 = (uint64_t)v124;
    v87 = v126;
    if (v35)
    {
      v127 = v114;
      v128 = v35;
      v88 = swift_bridgeObjectRetain(v35);
      v89 = Data.init<A>(hexString:)(&v127, &type metadata for String, v45, v88);
      v91 = v90;
      sub_10001EF3C(v87, v26);
    }
    else
    {
      sub_10001EF3C(v126, v26);
      v89 = 0;
      v91 = 0xF000000000000000;
    }
    sub_1000126B0(v22, type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRelease();
    v92 = (int *)sub_10001A9A8(&qword_101103690);
    v93 = v121;
    v94 = (char *)v121 + v92[20];
    v95 = (uint64_t *)((char *)v121 + v92[24]);
    v96 = (uint64_t *)((char *)v121 + v92[28]);
    v97 = v113;
    *v121 = v118;
    v93[1] = (uint64_t)v97;
    v93[2] = v89;
    v93[3] = v91;
    v93[4] = v71;
    v93[5] = v70;
    ((void (*)(char *, uint64_t, uint64_t))v123)(v94, v86, v125);
    v98 = v122;
    *v95 = v116;
    v95[1] = v98;
    v99 = v117;
    *v96 = v115;
    v96[1] = v99;
    swift_storeEnumTagMultiPayload(v93, v120, 0);
    v100 = v119;
    sub_100A02748(v93, v119);
    v101 = type metadata accessor for AirPodsLostModeContent.Device(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v101 - 8) + 56))(v100, 0, 1, v101);
  }
  else
  {
    sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    sub_10001EF3C(v25, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v69 = type metadata accessor for AirPodsLostModeContent.Device(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v119, 1, 1, v69);
    return sub_1000126B0((uint64_t)v10, type metadata accessor for StableIdentifier);
  }
}

uint64_t sub_100689B98(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = static os_log_type_t.error.getter(a1);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v5 = qword_1011B7DC8;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v13 = a1;
  swift_errorRetain(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v9 = String.init<A>(describing:)(&v13, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 64) = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Failed to submit lost mode info due to. Error - %@", 50, 2, v7);
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_100689CB8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;

  v45 = a3;
  v46 = a4;
  v4 = sub_10001A9A8(&qword_1010F8380);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for ServerStatusCode(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LostModeResponse(0);
  v8 = __chkstk_darwin(v7);
  v42 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v47 = (uint64_t)&v37 - v11;
  v12 = static os_log_type_t.debug.getter(v10);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v13 = qword_1011B7DC8;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  v41 = xmmword_100E22B00;
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  v16 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v38 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
  v39 = v16;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(v16, v38);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "updateLostModeServer raw response %@.", 37, 2, v15);
  swift_bridgeObjectRelease();
  v21 = type metadata accessor for JSONDecoder(0);
  v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v23 = JSONDecoder.init()(v22);
  v24 = FMNServerInteractionController.FMNResponseFields.data.getter(v23);
  v26 = v25;
  v27 = sub_100006204(&qword_101103698, type metadata accessor for LostModeResponse, (uint64_t)&unk_100E36FB0);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v24, v26, v7, v27);
  v28 = sub_10001BC14(v24, v26);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = qword_1011B7DC8;
  v31 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v31 + 16) = v41;
  v32 = v47;
  v33 = v42;
  sub_10005972C(v47, v42, type metadata accessor for LostModeResponse);
  v34 = String.init<A>(describing:)(v33, v7);
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 64) = v20;
  *(_QWORD *)(v31 + 32) = v34;
  *(_QWORD *)(v31 + 40) = v35;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "updateLostModeServer: LostModeResponse %@.", 42, 2, v31);
  swift_bridgeObjectRelease();
  sub_1006900D4(v32, v45);
  swift_release();
  return sub_1000126B0(v32, type metadata accessor for LostModeResponse);
}

uint64_t sub_10068A164(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11;
  _QWORD *v12;

  if (a1)
  {
    swift_errorRetain(a1);
    a2(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v11 = static os_log_type_t.default.getter(0);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7DC8, "Removing lost mode info from server", 35, 2, _swiftEmptyArrayStorage);
    v12 = (_QWORD *)swift_allocObject(&unk_101086D98, 40, 7);
    v12[2] = a4;
    v12[3] = a2;
    v12[4] = a3;
    swift_retain();
    swift_retain();
    sub_10068A2E4(a5, (uint64_t)sub_100690660, (uint64_t)v12);
    return swift_release();
  }
}

uint64_t sub_10068A278(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain(a1);
    a3(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    sub_1007EEF64(14);
    return ((uint64_t (*)(_QWORD))a3)(0);
  }
}

uint64_t sub_10068A2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v7 = type metadata accessor for LostModeRecord(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_101086DC0, 32, 7);
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = swift_retain();
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v13 = qword_1011B7D38;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  sub_10005972C(a1, (uint64_t)v9, type metadata accessor for LostModeRecord);
  v16 = String.init<A>(describing:)(v9, v7);
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Attempting to remove: %@", 24, 2, v15);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100866D28(a1, v3, (void (*)(uint64_t))sub_10069066C, v10);
  return swift_release_n(v10, 2);
}

uint64_t sub_10068A47C(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  if ((a1 & 1) != 0)
  {
    v3 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7DC8, "Lost mode record removed", 24, 2, _swiftEmptyArrayStorage);
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
  else
  {
    v5 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7DC8, "Failed to remove Lost mode record.", 34, 2, _swiftEmptyArrayStorage);
    v6 = sub_10008806C();
    v7 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v6, 0, 0);
    *v8 = 6;
    a2();
    return swift_errorRelease(v7);
  }
}

void sub_10068A5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v47 = a2;
  v4 = sub_10001A9A8(&qword_101103688);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AirPodsLostModeContent.Device(0);
  v8 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  v46 = v8;
  v9 = __chkstk_darwin(v7);
  v41 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v40 = (uint64_t)&v37 - v11;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 56);
  v43 = a1 + 56;
  v20 = 1 << *(_BYTE *)(a1 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v44 = (unint64_t)(v20 + 63) >> 6;
  v23 = swift_bridgeObjectRetain(a1);
  v24 = 0;
  v42 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v22)
    {
      v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v24 >= v44)
      goto LABEL_34;
    v28 = *(_QWORD *)(v43 + 8 * v24);
    if (!v28)
      break;
LABEL_18:
    v22 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v13 + 16))(v18, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v13 + 72) * v26, v12, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
      goto LABEL_35;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    sub_10068925C((uint64_t)v15, (uint64_t)v6);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_release();
      return;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v6, 1, v45) == 1)
    {
      sub_100004048((uint64_t)v6, &qword_101103688);
    }
    else
    {
      v39 = a1;
      v30 = v40;
      sub_1000126EC((uint64_t)v6, v40, type metadata accessor for AirPodsLostModeContent.Device);
      sub_1000126EC(v30, v41, type metadata accessor for AirPodsLostModeContent.Device);
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        v42 = (_QWORD *)sub_1007C9728(0, v42[2] + 1, 1, (unint64_t)v42);
      v32 = v42[2];
      v31 = v42[3];
      v33 = v32 + 1;
      a1 = v39;
      if (v32 >= v31 >> 1)
      {
        v37 = v42[2];
        v38 = v32 + 1;
        v36 = (_QWORD *)sub_1007C9728(v31 > 1, v32 + 1, 1, (unint64_t)v42);
        v32 = v37;
        v33 = v38;
        v42 = v36;
      }
      v34 = v41;
      v35 = v42;
      v42[2] = v33;
      sub_1000126EC(v34, (uint64_t)v35+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(_QWORD *)(v46 + 72) * v32, type metadata accessor for AirPodsLostModeContent.Device);
    }
  }
  v29 = v24 + 1;
  if (v24 + 1 >= v44)
    goto LABEL_34;
  v28 = *(_QWORD *)(v43 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v29 = v24 + 2;
  if (v24 + 2 >= v44)
    goto LABEL_34;
  v28 = *(_QWORD *)(v43 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v29 = v24 + 3;
  if (v24 + 3 >= v44)
    goto LABEL_34;
  v28 = *(_QWORD *)(v43 + 8 * v29);
  if (v28)
    goto LABEL_17;
  v29 = v24 + 4;
  if (v24 + 4 >= v44)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(v18, 1, 1, v12, v23);
    goto LABEL_35;
  }
  v28 = *(_QWORD *)(v43 + 8 * v29);
  if (v28)
  {
LABEL_17:
    v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    v24 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v24 >= v44)
      goto LABEL_34;
    v28 = *(_QWORD *)(v43 + 8 * v24);
    ++v29;
    if (v28)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
}

void sub_10068AA30(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[16];

  v2 = type metadata accessor for URLComponents(0);
  __chkstk_darwin(v2);
  v6[3] = (char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FMNAccountType(0);
  __chkstk_darwin(v4);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v5);
  __asm { BR              X10 }
}

uint64_t sub_10068AB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t MyAppURLSessionFactory;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0);
  swift_allocObject(MyAppURLSessionFactory, *(unsigned int *)(MyAppURLSessionFactory + 48), *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
  v8 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v1, 1, 1, v8);
  v9 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v1);
  v10 = type metadata accessor for AirPodsLostModeEndPoint(0);
  *(_QWORD *)(v6 - 96) = v10;
  *(_QWORD *)(v6 - 88) = sub_100006204(&qword_1011036A0, type metadata accessor for AirPodsLostModeEndPoint, (uint64_t)&unk_100E44AE8);
  v11 = sub_100018F08((_QWORD *)(v6 - 120));
  v12 = enum case for FMNAccountType.w2Accessory(_:);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 104);
  v13(v4, enum case for FMNAccountType.w2Accessory(_:), v3);
  v14 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v14, 56, 7);
  *v11 = sub_100C511C4(v4);
  v13((uint64_t)v11 + *(int *)(v10 + 20), v12, v3);
  if (qword_1010E9E18 != -1)
    swift_once(&qword_1010E9E18, sub_1006871A0);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B73F8);
  v16 = sub_100030784(v6 - 120, v6 - 160);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v6 - 200) = v20;
    *(_DWORD *)v19 = 141558275;
    *(_QWORD *)(v6 - 176) = 1752392040;
    *(_QWORD *)(v6 - 168) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 176, v6 - 168, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    *(_QWORD *)(v6 - 208) = v19 + 14;
    *(_QWORD *)(v6 - 192) = v9;
    v21 = v2;
    v22 = *(_QWORD *)(v6 - 136);
    v23 = *(_QWORD *)(v6 - 128);
    sub_10001AA44((_QWORD *)(v6 - 160), v22);
    v24 = *(_QWORD *)(v6 - 184);
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v22, v23);
    v25 = sub_100006204(&qword_1010F7E18, (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents, (uint64_t)&protocol conformance descriptor for URLComponents);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v21, v25);
    v28 = v27;
    v29 = v21;
    v9 = *(_QWORD *)(v6 - 192);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v29);
    *(_QWORD *)(v6 - 176) = sub_100016940(v26, v28, (uint64_t *)(v6 - 168));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 176, v6 - 168, *(_QWORD *)(v6 - 208), v19 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v6 - 160));
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Lost Mode endpoint: %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
    v30 = *(_QWORD *)(v6 - 200);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v6 - 160));
  }

  v31 = type metadata accessor for ServerInteractionController(0);
  sub_100030784(v6 - 120, v6 - 160);
  v32 = *(_QWORD *)(v6 - 136);
  v33 = *(_QWORD *)(v6 - 128);
  v34 = sub_10009F5D0(v6 - 160, v32);
  swift_retain();
  v35 = sub_10033CBC8(v34, v9, v31, v32, v33);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v6 - 160));
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v6 - 120));
  return v35;
}

uint64_t sub_10068AFC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10068AFE4(uint64_t a1)
{
  uint64_t v1;

  return sub_100689B98(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10068AFF0(uint64_t a1)
{
  uint64_t v1;

  return sub_100689CB8(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10068B008(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;
  NSObject *v183;
  uint64_t v184;
  uint8_t *v185;
  _OWORD v186[5];
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;

  v175 = a2;
  v185 = (uint8_t *)a1;
  v161 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v161);
  v164 = (uint64_t *)((char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v9);
  v165 = (uint64_t)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v167 = *(_QWORD *)(v168 - 8);
  v11 = __chkstk_darwin(v168);
  v13 = (char *)&v160 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v163 = (uint64_t)&v160 - v14;
  v182 = type metadata accessor for UUID(0);
  v176 = *(_QWORD *)(v182 - 8);
  v15 = __chkstk_darwin(v182);
  v177 = (char *)&v160 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v162 = (char *)&v160 - v17;
  v172 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v172);
  v173 = (uint64_t)&v160 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v19);
  v21 = (char *)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for OwnedBeaconGroup(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v180 = (uint64_t)&v160 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LostModeRecord(0);
  v24 = __chkstk_darwin(v23);
  v166 = (uint64_t)&v160 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v171 = (uint64_t)&v160 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v27);
  v29 = (char *)&v160 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for OwnedBeaconRecord(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v160 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = swift_allocObject(&unk_101086E88, 32, 7);
  *(_QWORD *)(v34 + 16) = a4;
  *(_QWORD *)(v34 + 24) = a5;
  v184 = v34;
  v178 = a3;
  v35 = *(_QWORD *)(a3 + 280);
  v181 = (int *)v23;
  v36 = (uint64_t)&v185[*(int *)(v23 + 24)];
  v179 = a4;
  v37 = v36;
  swift_retain();
  v183 = a5;
  sub_10080B950(v37, (uint64_t)v29);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v174 = v30;
  if (v38(v29, 1, v30) != 1)
  {
    sub_1000126EC((uint64_t)v29, (uint64_t)v33, type metadata accessor for OwnedBeaconRecord);
    v46 = v33;
    if (qword_1010E9E18 != -1)
      swift_once(&qword_1010E9E18, sub_1006871A0);
    v47 = type metadata accessor for Logger(0);
    sub_10001A9E8(v47, (uint64_t)qword_1011B73F8);
    v48 = v171;
    v49 = sub_10005972C((uint64_t)v185, v171, type metadata accessor for LostModeRecord);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v53 = v182;
    if (v52)
    {
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(32, -1);
      v180 = v37;
      v56 = v55;
      *(_QWORD *)&v188 = v55;
      *(_DWORD *)v54 = 141558275;
      *(_QWORD *)&v186[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2081;
      v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v53, v57);
      *(_QWORD *)&v186[0] = sub_100016940(v58, v59, (uint64_t *)&v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v48, type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "updateLostModeServer for beacon %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      sub_1000126B0(v48, type metadata accessor for LostModeRecord);
    }

    v71 = v173;
    sub_10005972C((uint64_t)&v46[*(int *)(v174 + 24)], v173, type metadata accessor for StableIdentifier);
    v72 = (char *)&loc_10068B8FC + *((int *)qword_10068CD60 + swift_getEnumCaseMultiPayload(v71, v172));
    __asm { BR              X10 }
  }
  sub_100004048((uint64_t)v29, (uint64_t *)&unk_1010F47C0);
  sub_10081EDA8(v37, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v21, 1, v170) == 1)
  {
    sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010FF7F0);
    swift_retain();
    v39 = sub_10001A9A8(&qword_101103678);
    unsafeFromAsyncTask<A>(_:)(&v188, &unk_1011036C0, v35, v39);
    swift_release();
    v40 = *(_QWORD *)(v188 + 16);
    if (v40)
    {
      v41 = v167;
      v42 = v188 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
      v43 = *(_QWORD *)(v167 + 72);
      swift_bridgeObjectRetain(v188);
      while (1)
      {
        sub_10005972C(v42, (uint64_t)v13, type metadata accessor for LocalFindableAccessoryRecord);
        if ((static UUID.== infix(_:_:)(v13, v37) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v13, type metadata accessor for LocalFindableAccessoryRecord);
        v42 += v43;
        if (!--v40)
        {
          swift_bridgeObjectRelease();
          v44 = 1;
          v45 = v165;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease();
      v45 = v165;
      sub_1000126EC((uint64_t)v13, v165, type metadata accessor for LocalFindableAccessoryRecord);
      v44 = 0;
    }
    else
    {
      v44 = 1;
      v45 = v165;
      v41 = v167;
    }
LABEL_29:
    v111 = (int *)v168;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v45, v44, 1, v168);
    swift_bridgeObjectRelease();
    v112 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v41 + 48))(v45, 1, v111);
    v113 = v176;
    if (v112 != 1)
    {
      v127 = v163;
      sub_1000126EC(v45, v163, type metadata accessor for LocalFindableAccessoryRecord);
      v128 = (uint64_t *)&v185[v181[9]];
      v129 = (char *)v128[1];
      v180 = *v128;
      v130 = v181[8];
      v131 = (uint64_t *)&v185[v181[7]];
      v132 = v131[1];
      v173 = *v131;
      v133 = *(_QWORD *)&v185[v130 + 8];
      v174 = *(_QWORD *)&v185[v130];
      v134 = sub_10001A9A8(&qword_101109370);
      v135 = *(_QWORD *)(type metadata accessor for AirPodsLostModeContent.Device(0) - 8);
      v136 = *(_QWORD *)(v135 + 72);
      v137 = *(unsigned __int8 *)(v135 + 80);
      v181 = (int *)((v137 + 32) & ~v137);
      v185 = (uint8_t *)swift_allocObject(v134, (char *)v181 + v136, v137 | 7);
      *((_OWORD *)v185 + 1) = xmmword_100E22B00;
      v138 = sub_10001A9A8(&qword_101103680);
      v139 = v164;
      v140 = (char *)v164 + *(int *)(v138 + 48);
      v141 = (uint64_t *)(v127 + v111[7]);
      v142 = *v141;
      v143 = v141[1];
      *v164 = *v141;
      v139[1] = v143;
      (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v140, v127 + v111[9], v182);
      v144 = v111[11];
      v145 = *(_QWORD *)(v127 + v111[10]);
      v146 = *(_QWORD *)(v127 + v144);
      v182 = v133;
      swift_bridgeObjectRetain(v133);
      v177 = v129;
      swift_bridgeObjectRetain(v129);
      v176 = v132;
      swift_bridgeObjectRetain(v132);
      sub_10001BBBC(v142, v143);
      v147 = sub_1001EE37C(v145, v146);
      if (v148 >> 60 == 15)
      {

        swift_release();
        __break(1u);
      }
      else
      {
        v149 = v147;
        v150 = v148;
        v151 = (uint64_t *)((char *)v139 + *(int *)(v138 + 64));
        v152 = sub_1001EDBAC(v147, v148);
        v154 = v153;
        sub_10001EF3C(v149, v150);
        v155 = Data.hexString.getter(v152, v154);
        v157 = v156;
        sub_10001BC14(v152, v154);
        *v151 = v155;
        v151[1] = v157;
        sub_1001EE37C(v145, v146);
        if (v158 >> 60 != 15)
          __asm { BR              X11 }
      }

      swift_release();
      __break(1u);
      JUMPOUT(0x10068CD60);
    }
    v114 = sub_100004048(v45, (uint64_t *)&unk_1010EDC50);
    v115 = static os_log_type_t.error.getter(v114);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    v116 = qword_1011B7DC8;
    v117 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v118 = swift_allocObject(v117, 72, 7);
    *(_OWORD *)(v118 + 16) = xmmword_100E22B00;
    v119 = UUID.uuidString.getter(v118);
    v121 = v120;
    *(_QWORD *)(v118 + 56) = &type metadata for String;
    *(_QWORD *)(v118 + 64) = sub_10001AA00();
    *(_QWORD *)(v118 + 32) = v119;
    *(_QWORD *)(v118 + 40) = v121;
    os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v116, "updateLostModeServer: beacon/group not found!", 45, 2, v118);
    swift_bridgeObjectRelease();
    v122 = sub_1006666C0();
    v123 = swift_allocError(&_s13LostModeErrorON, v122, 0, 0);
    *v124 = 1;
    v125 = v179;
    swift_beginAccess(v179 + 16, &v188, 1, 0);
    v126 = *(_QWORD *)(v125 + 16);
    *(_QWORD *)(v125 + 16) = v123;
    swift_errorRetain(v123);
    swift_errorRelease(v126);
    dispatch_group_leave(v183);
    swift_errorRelease(v123);
  }
  else
  {
    sub_1000126EC((uint64_t)v21, v180, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010E9E18 != -1)
      swift_once(&qword_1010E9E18, sub_1006871A0);
    v60 = type metadata accessor for Logger(0);
    sub_10001A9E8(v60, (uint64_t)qword_1011B73F8);
    v61 = v166;
    v62 = sub_10005972C((uint64_t)v185, v166, type metadata accessor for LostModeRecord);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v188 = v66;
      *(_DWORD *)v65 = 141558275;
      *(_QWORD *)&v186[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v65 + 4, v65 + 12);
      *(_WORD *)(v65 + 12) = 2081;
      v67 = v181;
      v68 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v182, v68);
      *(_QWORD *)&v186[0] = sub_100016940(v69, v70, (uint64_t *)&v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v61, type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "updateLostModeServer for group %{private,mask.hash}s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {
      sub_1000126B0(v61, type metadata accessor for LostModeRecord);

      v67 = v181;
    }
    sub_10036AC6C();
    v74 = v73;
    v75 = v178;
    swift_retain();
    sub_10068A5B0(v74, v75);
    v77 = v76;
    swift_bridgeObjectRelease();
    swift_release();
    v78 = &v185[v67[9]];
    v79 = *(_QWORD *)v78;
    v80 = *((_QWORD *)v78 + 1);
    v81 = &v185[v67[7]];
    v82 = *(_QWORD *)v81;
    v83 = *((_QWORD *)v81 + 1);
    v84 = &v185[v67[8]];
    v85 = *(_QWORD *)v84;
    v86 = *((_QWORD *)v84 + 1);
    v188 = xmmword_100E47D70;
    *(_QWORD *)&v189 = v79;
    *((_QWORD *)&v189 + 1) = v80;
    *(_QWORD *)&v190 = v82;
    *((_QWORD *)&v190 + 1) = v83;
    *(_QWORD *)&v191 = v85;
    *((_QWORD *)&v191 + 1) = v86;
    LOBYTE(v192) = v175 & 1;
    *((_QWORD *)&v192 + 1) = v77;
    swift_bridgeObjectRetain_n(v86, 3);
    swift_bridgeObjectRetain_n(v77, 2);
    swift_bridgeObjectRetain_n(0xE900000000000065, 2);
    swift_bridgeObjectRetain_n(v80, 3);
    swift_bridgeObjectRetain_n(v83, 3);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.info.getter(v88);
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(12, -1);
      v91 = swift_slowAlloc(32, -1);
      *(_DWORD *)v90 = 136315138;
      v187 = v91;
      v185 = v90 + 4;
      v186[2] = v190;
      v186[3] = v191;
      v186[4] = v192;
      v186[1] = v189;
      v186[0] = v188;
      swift_bridgeObjectRetain(0xE900000000000065);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRetain(v77);
      v92 = String.init<A>(describing:)(v186, &type metadata for AirPodsLostModeContent);
      *(_QWORD *)&v186[0] = sub_100016940(v92, v93, &v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v185, v90 + 12);
      swift_bridgeObjectRelease_n(v77, 2);
      swift_bridgeObjectRelease_n(v86, 2);
      swift_bridgeObjectRelease_n(v83, 2);
      swift_bridgeObjectRelease_n(v80, 2);
      swift_bridgeObjectRelease_n(0xE900000000000065, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "AirPodsLostModeContent: %s", v90, 0xCu);
      swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v90, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v77, 2);
      swift_bridgeObjectRelease_n(v86, 2);
      swift_bridgeObjectRelease_n(v83, 2);
      swift_bridgeObjectRelease_n(v80, 2);
      swift_bridgeObjectRelease_n(0xE900000000000065, 2);
    }
    v94 = v183;
    sub_100A03138((uint64_t)&v188);
    if (v95)
    {
      v98 = v95;
      v99 = v96;
      v100 = v97;
      swift_bridgeObjectRetain(v95);
      sub_10001BBBC(v99, v100);
      sub_10068AA30(2);
      sub_10070F280(v98, v99, v100, v101);
      swift_release();
      v102 = swift_allocObject(&unk_101086F00, 32, 7);
      v103 = v184;
      *(_QWORD *)(v102 + 16) = sub_1004D6058;
      *(_QWORD *)(v102 + 24) = v103;
      swift_retain();
      Future.addFailure(block:)(sub_100690BC0, v102);
      swift_release();
      swift_release();
      v104 = (_QWORD *)swift_allocObject(&unk_101086F28, 40, 7);
      v104[2] = v178;
      v104[3] = sub_1004D6058;
      v104[4] = v103;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100690B8C, v104);
      swift_release();
      swift_release();
      swift_release();
      sub_100153D94(v98, v99, v100);
      sub_1000126B0(v180, type metadata accessor for OwnedBeaconGroup);
      sub_100153D94(v98, v99, v100);
    }
    else
    {
      v105 = static os_log_type_t.error.getter(0);
      if (qword_1010EA2E8 != -1)
        swift_once(&qword_1010EA2E8, sub_100B5E0D8);
      os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, qword_1011B7DC8, "Unable to init LostModeRequest.", 31, 2, _swiftEmptyArrayStorage);
      v106 = sub_10033638C();
      v107 = swift_allocError(&type metadata for BeaconManagerCommandError, v106, 0, 0);
      *v108 = 0;
      v109 = v179;
      swift_beginAccess(v179 + 16, v186, 1, 0);
      v110 = *(_QWORD *)(v109 + 16);
      *(_QWORD *)(v109 + 16) = v107;
      swift_errorRetain(v107);
      swift_errorRelease(v110);
      dispatch_group_leave(v94);
      swift_errorRelease(v107);
      sub_1000126B0(v180, type metadata accessor for OwnedBeaconGroup);
    }
  }
  return swift_release();
}

uint64_t sub_10068CD84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t EnumCaseMultiPayload;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[3];
  char v93[32];

  v89 = a7;
  v90 = a8;
  v83 = a2;
  v84 = a6;
  v86 = a3;
  v82 = a9;
  v12 = sub_10001A9A8(&qword_1011036B8);
  __chkstk_darwin(v12);
  v88 = (uint64_t *)((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for LostModeRecord(0);
  v77 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v79 = v16;
  v80 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v77 - v18;
  v20 = static os_log_type_t.default.getter(v17);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v21 = qword_1011B7DC8;
  v87 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v87, 72, 7);
  v81 = xmmword_100E22B00;
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  sub_10005972C(a1, (uint64_t)v19, type metadata accessor for LostModeRecord);
  v78 = v19;
  v23 = String.init<A>(describing:)(v19, v14);
  v25 = v24;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  v85 = sub_10001AA00();
  *(_QWORD *)(v22 + 64) = v85;
  *(_QWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Updating existing lost mode record %@.", 38, 2, v22);
  swift_bridgeObjectRelease();
  v26 = dispatch_group_create();
  dispatch_group_enter(v26);
  v27 = swift_allocBox(v12);
  v29 = v28;
  v30 = sub_1006666C0();
  v31 = swift_allocError(&_s13LostModeErrorON, v30, 0, 0);
  *v32 = 8;
  *v29 = v31;
  swift_storeEnumTagMultiPayload(v29, v12, 1);
  v33 = *(_QWORD *)(v90 + 280);
  v34 = (_QWORD *)swift_allocObject(&unk_101086DE8, 64, 7);
  v34[2] = a4;
  v34[3] = a5;
  v35 = v84;
  v84 = v12;
  v36 = a5;
  v37 = v89;
  v34[4] = v35;
  v34[5] = v37;
  v38 = v86;
  v34[6] = v83;
  v34[7] = v38;
  v39 = swift_allocObject(&unk_101086E10, 32, 7);
  *(_QWORD *)(v39 + 16) = v27;
  *(_QWORD *)(v39 + 24) = v26;
  swift_bridgeObjectRetain(v38);
  v86 = v27;
  swift_retain();
  v40 = v26;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  v41 = a1;
  v89 = v33;
  sub_1007A15E8(a1, 0, (void (*)(uint64_t))sub_1006906A8, (uint64_t)v34, sub_1006906BC, (void (*)(uint64_t))v39);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess(v29, v93, 0, 0);
  v42 = v88;
  sub_1006906D4((uint64_t)v29, (uint64_t)v88);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v42, v84);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v44 = *v42;
    v45 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v46 = qword_1011B7DC8;
    v47 = swift_allocObject(v87, 72, 7);
    *(_OWORD *)(v47 + 16) = v81;
    v92[0] = v44;
    swift_errorRetain(v44);
    v48 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v49 = String.init<A>(describing:)(v92, v48);
    v50 = v85;
    *(_QWORD *)(v47 + 56) = &type metadata for String;
    *(_QWORD *)(v47 + 64) = v50;
    *(_QWORD *)(v47 + 32) = v49;
    *(_QWORD *)(v47 + 40) = v51;
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v46, "Unable to update LostModeRecord due to %@", 41, 2, v47);
    swift_bridgeObjectRelease();
    swift_errorRetain(v44);
    v52 = (void *)_convertErrorToNSError(_:)(v44);
    (*(void (**)(uint64_t, void *))(v82 + 16))(v82, v52);

    swift_errorRelease(v44);
    swift_errorRelease(v44);
  }
  else
  {
    v53 = v87;
    v54 = v85;
    v55 = v80;
    v56 = sub_1000126EC((uint64_t)v42, v80, type metadata accessor for LostModeRecord);
    v57 = static os_log_type_t.default.getter(v56);
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, qword_1011B7DC8, "Successfully updated LostModeRecord.", 36, 2, _swiftEmptyArrayStorage);
    v58 = swift_allocObject(&unk_101086E38, 24, 7);
    *(_QWORD *)(v58 + 16) = 0;
    dispatch_group_enter(v40);
    v59 = v40;
    swift_retain();
    sub_10068B008(v55, 1, v90, v58, v59);

    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess(v58 + 16, v92, 0, 0);
    v61 = *(_QWORD *)(v58 + 16);
    if (v61)
    {
      v62 = swift_errorRetain(v61);
      v63 = static os_log_type_t.error.getter(v62);
      v64 = qword_1011B7DC8;
      v65 = swift_allocObject(v53, 72, 7);
      *(_OWORD *)(v65 + 16) = v81;
      v91 = v61;
      swift_errorRetain(v61);
      v66 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v67 = String.init<A>(describing:)(&v91, v66);
      *(_QWORD *)(v65 + 56) = &type metadata for String;
      *(_QWORD *)(v65 + 64) = v54;
      *(_QWORD *)(v65 + 32) = v67;
      *(_QWORD *)(v65 + 40) = v68;
      os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v64, "updateLostModeServer failed - %@. Reverting CK changes", 54, 2, v65);
      swift_bridgeObjectRelease();
      dispatch_group_enter(v59);
      v69 = v41;
      v70 = (uint64_t)v78;
      sub_10005972C(v69, (uint64_t)v78, type metadata accessor for LostModeRecord);
      v71 = *(unsigned __int8 *)(v77 + 80);
      v72 = (v71 + 16) & ~v71;
      v73 = swift_allocObject(&unk_101086E60, v72 + v79, v71 | 7);
      sub_1000126EC(v70, v73 + v72, type metadata accessor for LostModeRecord);
      v59 = v59;
      sub_100864F38(v55, 0, (void (*)(uint64_t))sub_100690818, v73, v89, v59);
      swift_release();

      OS_dispatch_group.wait()();
      swift_errorRetain(v61);
      v74 = (void *)_convertErrorToNSError(_:)(v61);
      (*(void (**)(uint64_t, void *))(v82 + 16))(v82, v74);

      swift_errorRelease(v61);
      swift_errorRelease(v61);
    }
    else
    {
      v75 = static os_log_type_t.default.getter(v60);
      os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, qword_1011B7DC8, "updateLostModeServer succeeded", 30, 2, _swiftEmptyArrayStorage);
      sub_1007EEF64(14);
      (*(void (**)(uint64_t, _QWORD))(v82 + 16))(v82, 0);
    }

    sub_1000126B0(v55, type metadata accessor for LostModeRecord);
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10068D45C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  uint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  char *v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  char *v140;
  uint64_t *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;
  NSObject *v183;
  uint64_t v184;
  uint8_t *v185;
  _OWORD v186[5];
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;

  v175 = a2;
  v185 = (uint8_t *)a1;
  v161 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  __chkstk_darwin(v161);
  v164 = (uint64_t *)((char *)&v160 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v9);
  v165 = (uint64_t)&v160 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v167 = *(_QWORD *)(v168 - 8);
  v11 = __chkstk_darwin(v168);
  v13 = (char *)&v160 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v163 = (uint64_t)&v160 - v14;
  v182 = type metadata accessor for UUID(0);
  v176 = *(_QWORD *)(v182 - 8);
  v15 = __chkstk_darwin(v182);
  v177 = (char *)&v160 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v162 = (char *)&v160 - v17;
  v172 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v172);
  v173 = (uint64_t)&v160 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v19);
  v21 = (char *)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for OwnedBeaconGroup(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v180 = (uint64_t)&v160 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LostModeRecord(0);
  v24 = __chkstk_darwin(v23);
  v166 = (uint64_t)&v160 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v171 = (uint64_t)&v160 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v27);
  v29 = (char *)&v160 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for OwnedBeaconRecord(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v160 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = swift_allocObject(&unk_101086FF0, 32, 7);
  *(_QWORD *)(v34 + 16) = a4;
  *(_QWORD *)(v34 + 24) = a5;
  v184 = v34;
  v178 = a3;
  v35 = *(_QWORD *)(a3 + 280);
  v181 = (int *)v23;
  v36 = (uint64_t)&v185[*(int *)(v23 + 24)];
  v179 = a4;
  v37 = v36;
  swift_retain();
  v183 = a5;
  sub_10080B950(v37, (uint64_t)v29);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v174 = v30;
  if (v38(v29, 1, v30) != 1)
  {
    sub_1000126EC((uint64_t)v29, (uint64_t)v33, type metadata accessor for OwnedBeaconRecord);
    v46 = v33;
    if (qword_1010E9E18 != -1)
      swift_once(&qword_1010E9E18, sub_1006871A0);
    v47 = type metadata accessor for Logger(0);
    sub_10001A9E8(v47, (uint64_t)qword_1011B73F8);
    v48 = v171;
    v49 = sub_10005972C((uint64_t)v185, v171, type metadata accessor for LostModeRecord);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter(v50);
    v52 = os_log_type_enabled(v50, v51);
    v53 = v182;
    if (v52)
    {
      v54 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(32, -1);
      v180 = v37;
      v56 = v55;
      *(_QWORD *)&v188 = v55;
      *(_DWORD *)v54 = 141558275;
      *(_QWORD *)&v186[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2081;
      v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v53, v57);
      *(_QWORD *)&v186[0] = sub_100016940(v58, v59, (uint64_t *)&v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v48, type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "updateLostModeServer for beacon %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      sub_1000126B0(v48, type metadata accessor for LostModeRecord);
    }

    v71 = v173;
    sub_10005972C((uint64_t)&v46[*(int *)(v174 + 24)], v173, type metadata accessor for StableIdentifier);
    v72 = (char *)&loc_10068DD50 + dword_10068F1B4[swift_getEnumCaseMultiPayload(v71, v172)];
    __asm { BR              X10 }
  }
  sub_100004048((uint64_t)v29, (uint64_t *)&unk_1010F47C0);
  sub_10081EDA8(v37, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v21, 1, v170) == 1)
  {
    sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010FF7F0);
    swift_retain();
    v39 = sub_10001A9A8(&qword_101103678);
    unsafeFromAsyncTask<A>(_:)(&v188, &unk_1011036C8, v35, v39);
    swift_release();
    v40 = *(_QWORD *)(v188 + 16);
    if (v40)
    {
      v41 = v167;
      v42 = v188 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
      v43 = *(_QWORD *)(v167 + 72);
      swift_bridgeObjectRetain(v188);
      while (1)
      {
        sub_10005972C(v42, (uint64_t)v13, type metadata accessor for LocalFindableAccessoryRecord);
        if ((static UUID.== infix(_:_:)(v13, v37) & 1) != 0)
          break;
        sub_1000126B0((uint64_t)v13, type metadata accessor for LocalFindableAccessoryRecord);
        v42 += v43;
        if (!--v40)
        {
          swift_bridgeObjectRelease();
          v44 = 1;
          v45 = v165;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease();
      v45 = v165;
      sub_1000126EC((uint64_t)v13, v165, type metadata accessor for LocalFindableAccessoryRecord);
      v44 = 0;
    }
    else
    {
      v44 = 1;
      v45 = v165;
      v41 = v167;
    }
LABEL_29:
    v111 = (int *)v168;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v45, v44, 1, v168);
    swift_bridgeObjectRelease();
    v112 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v41 + 48))(v45, 1, v111);
    v113 = v176;
    if (v112 != 1)
    {
      v127 = v163;
      sub_1000126EC(v45, v163, type metadata accessor for LocalFindableAccessoryRecord);
      v128 = (uint64_t *)&v185[v181[9]];
      v129 = (char *)v128[1];
      v180 = *v128;
      v130 = v181[8];
      v131 = (uint64_t *)&v185[v181[7]];
      v132 = v131[1];
      v173 = *v131;
      v133 = *(_QWORD *)&v185[v130 + 8];
      v174 = *(_QWORD *)&v185[v130];
      v134 = sub_10001A9A8(&qword_101109370);
      v135 = *(_QWORD *)(type metadata accessor for AirPodsLostModeContent.Device(0) - 8);
      v136 = *(_QWORD *)(v135 + 72);
      v137 = *(unsigned __int8 *)(v135 + 80);
      v181 = (int *)((v137 + 32) & ~v137);
      v185 = (uint8_t *)swift_allocObject(v134, (char *)v181 + v136, v137 | 7);
      *((_OWORD *)v185 + 1) = xmmword_100E22B00;
      v138 = sub_10001A9A8(&qword_101103680);
      v139 = v164;
      v140 = (char *)v164 + *(int *)(v138 + 48);
      v141 = (uint64_t *)(v127 + v111[7]);
      v142 = *v141;
      v143 = v141[1];
      *v164 = *v141;
      v139[1] = v143;
      (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v140, v127 + v111[9], v182);
      v144 = v111[11];
      v145 = *(_QWORD *)(v127 + v111[10]);
      v146 = *(_QWORD *)(v127 + v144);
      v182 = v133;
      swift_bridgeObjectRetain(v133);
      v177 = v129;
      swift_bridgeObjectRetain(v129);
      v176 = v132;
      swift_bridgeObjectRetain(v132);
      sub_10001BBBC(v142, v143);
      v147 = sub_1001EE37C(v145, v146);
      if (v148 >> 60 == 15)
      {

        swift_release();
        __break(1u);
      }
      else
      {
        v149 = v147;
        v150 = v148;
        v151 = (uint64_t *)((char *)v139 + *(int *)(v138 + 64));
        v152 = sub_1001EDBAC(v147, v148);
        v154 = v153;
        sub_10001EF3C(v149, v150);
        v155 = Data.hexString.getter(v152, v154);
        v157 = v156;
        sub_10001BC14(v152, v154);
        *v151 = v155;
        v151[1] = v157;
        sub_1001EE37C(v145, v146);
        if (v158 >> 60 != 15)
          __asm { BR              X11 }
      }

      swift_release();
      __break(1u);
      JUMPOUT(0x10068F1B4);
    }
    v114 = sub_100004048(v45, (uint64_t *)&unk_1010EDC50);
    v115 = static os_log_type_t.error.getter(v114);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    v116 = qword_1011B7DC8;
    v117 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v118 = swift_allocObject(v117, 72, 7);
    *(_OWORD *)(v118 + 16) = xmmword_100E22B00;
    v119 = UUID.uuidString.getter(v118);
    v121 = v120;
    *(_QWORD *)(v118 + 56) = &type metadata for String;
    *(_QWORD *)(v118 + 64) = sub_10001AA00();
    *(_QWORD *)(v118 + 32) = v119;
    *(_QWORD *)(v118 + 40) = v121;
    os_log(_:dso:log:_:_:)(v115, &_mh_execute_header, v116, "updateLostModeServer: beacon/group not found!", 45, 2, v118);
    swift_bridgeObjectRelease();
    v122 = sub_1006666C0();
    v123 = swift_allocError(&_s13LostModeErrorON, v122, 0, 0);
    *v124 = 1;
    v125 = v179;
    swift_beginAccess(v179 + 16, &v188, 1, 0);
    v126 = *(_QWORD *)(v125 + 16);
    *(_QWORD *)(v125 + 16) = v123;
    swift_errorRetain(v123);
    swift_errorRelease(v126);
    dispatch_group_leave(v183);
    swift_errorRelease(v123);
  }
  else
  {
    sub_1000126EC((uint64_t)v21, v180, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010E9E18 != -1)
      swift_once(&qword_1010E9E18, sub_1006871A0);
    v60 = type metadata accessor for Logger(0);
    sub_10001A9E8(v60, (uint64_t)qword_1011B73F8);
    v61 = v166;
    v62 = sub_10005972C((uint64_t)v185, v166, type metadata accessor for LostModeRecord);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v188 = v66;
      *(_DWORD *)v65 = 141558275;
      *(_QWORD *)&v186[0] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v65 + 4, v65 + 12);
      *(_WORD *)(v65 + 12) = 2081;
      v67 = v181;
      v68 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v182, v68);
      *(_QWORD *)&v186[0] = sub_100016940(v69, v70, (uint64_t *)&v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v61, type metadata accessor for LostModeRecord);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "updateLostModeServer for group %{private,mask.hash}s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {
      sub_1000126B0(v61, type metadata accessor for LostModeRecord);

      v67 = v181;
    }
    sub_10036AC6C();
    v74 = v73;
    v75 = v178;
    swift_retain();
    sub_10068A5B0(v74, v75);
    v77 = v76;
    swift_bridgeObjectRelease();
    swift_release();
    v78 = &v185[v67[9]];
    v79 = *(_QWORD *)v78;
    v80 = *((_QWORD *)v78 + 1);
    v81 = &v185[v67[7]];
    v82 = *(_QWORD *)v81;
    v83 = *((_QWORD *)v81 + 1);
    v84 = &v185[v67[8]];
    v85 = *(_QWORD *)v84;
    v86 = *((_QWORD *)v84 + 1);
    v188 = xmmword_100E47D70;
    *(_QWORD *)&v189 = v79;
    *((_QWORD *)&v189 + 1) = v80;
    *(_QWORD *)&v190 = v82;
    *((_QWORD *)&v190 + 1) = v83;
    *(_QWORD *)&v191 = v85;
    *((_QWORD *)&v191 + 1) = v86;
    LOBYTE(v192) = v175 & 1;
    *((_QWORD *)&v192 + 1) = v77;
    swift_bridgeObjectRetain_n(v86, 3);
    swift_bridgeObjectRetain_n(v77, 2);
    swift_bridgeObjectRetain_n(0xE900000000000065, 2);
    swift_bridgeObjectRetain_n(v80, 3);
    swift_bridgeObjectRetain_n(v83, 3);
    v88 = Logger.logObject.getter(v87);
    v89 = static os_log_type_t.info.getter(v88);
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc(12, -1);
      v91 = swift_slowAlloc(32, -1);
      *(_DWORD *)v90 = 136315138;
      v187 = v91;
      v185 = v90 + 4;
      v186[2] = v190;
      v186[3] = v191;
      v186[4] = v192;
      v186[1] = v189;
      v186[0] = v188;
      swift_bridgeObjectRetain(0xE900000000000065);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRetain(v77);
      v92 = String.init<A>(describing:)(v186, &type metadata for AirPodsLostModeContent);
      *(_QWORD *)&v186[0] = sub_100016940(v92, v93, &v187);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v186, (char *)v186 + 8, v185, v90 + 12);
      swift_bridgeObjectRelease_n(v77, 2);
      swift_bridgeObjectRelease_n(v86, 2);
      swift_bridgeObjectRelease_n(v83, 2);
      swift_bridgeObjectRelease_n(v80, 2);
      swift_bridgeObjectRelease_n(0xE900000000000065, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "AirPodsLostModeContent: %s", v90, 0xCu);
      swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v91, -1, -1);
      swift_slowDealloc(v90, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v77, 2);
      swift_bridgeObjectRelease_n(v86, 2);
      swift_bridgeObjectRelease_n(v83, 2);
      swift_bridgeObjectRelease_n(v80, 2);
      swift_bridgeObjectRelease_n(0xE900000000000065, 2);
    }
    v94 = v183;
    sub_100A03138((uint64_t)&v188);
    if (v95)
    {
      v98 = v95;
      v99 = v96;
      v100 = v97;
      swift_bridgeObjectRetain(v95);
      sub_10001BBBC(v99, v100);
      sub_10068AA30(2);
      sub_10070F280(v98, v99, v100, v101);
      swift_release();
      v102 = swift_allocObject(&unk_101087068, 32, 7);
      v103 = v184;
      *(_QWORD *)(v102 + 16) = sub_1004D65C8;
      *(_QWORD *)(v102 + 24) = v103;
      swift_retain();
      Future.addFailure(block:)(sub_100690BC0, v102);
      swift_release();
      swift_release();
      v104 = (_QWORD *)swift_allocObject(&unk_101087090, 40, 7);
      v104[2] = v178;
      v104[3] = sub_1004D65C8;
      v104[4] = v103;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100690B8C, v104);
      swift_release();
      swift_release();
      swift_release();
      sub_100153D94(v98, v99, v100);
      sub_1000126B0(v180, type metadata accessor for OwnedBeaconGroup);
      sub_100153D94(v98, v99, v100);
    }
    else
    {
      v105 = static os_log_type_t.error.getter(0);
      if (qword_1010EA2E8 != -1)
        swift_once(&qword_1010EA2E8, sub_100B5E0D8);
      os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, qword_1011B7DC8, "Unable to init LostModeRequest.", 31, 2, _swiftEmptyArrayStorage);
      v106 = sub_10033638C();
      v107 = swift_allocError(&type metadata for BeaconManagerCommandError, v106, 0, 0);
      *v108 = 0;
      v109 = v179;
      swift_beginAccess(v179 + 16, v186, 1, 0);
      v110 = *(_QWORD *)(v109 + 16);
      *(_QWORD *)(v109 + 16) = v107;
      swift_errorRetain(v107);
      swift_errorRelease(v110);
      dispatch_group_leave(v94);
      swift_errorRelease(v107);
      sub_1000126B0(v180, type metadata accessor for OwnedBeaconGroup);
    }
  }
  return swift_release();
}

uint64_t sub_10068F1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t EnumCaseMultiPayload;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  char v73[24];

  v68 = a3;
  v70 = a2;
  v4 = sub_10001A9A8(&qword_1011036B8);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for LostModeRecord(0);
  v8 = __chkstk_darwin(v7);
  v67 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v63 - v11;
  v13 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v14 = qword_1011B7DC8;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  v69 = xmmword_100E22B00;
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for LostModeRecord);
  v65 = v12;
  v66 = v7;
  v17 = String.init<A>(describing:)(v12, v7);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v16 + 64) = v20;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Saving new LostModeRecord %@.", 29, 2, v16);
  swift_bridgeObjectRelease();
  v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  v22 = swift_allocBox(v4);
  v24 = v23;
  v25 = sub_1006666C0();
  v26 = swift_allocError(&_s13LostModeErrorON, v25, 0, 0);
  *v27 = 8;
  *v24 = v26;
  swift_storeEnumTagMultiPayload(v24, v4, 1);
  v28 = *(_QWORD *)(v70 + 280);
  v29 = v21;
  sub_100865564(a1, 0, v28, v22, v29);

  OS_dispatch_group.wait()();
  swift_beginAccess(v24, v73, 0, 0);
  sub_1006906D4((uint64_t)v24, (uint64_t)v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v31 = *v6;
    v32 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    v33 = qword_1011B7DC8;
    v34 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v34 + 16) = v69;
    v72[0] = v31;
    swift_errorRetain(v31);
    v35 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v36 = String.init<A>(describing:)(v72, v35);
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = v20;
    *(_QWORD *)(v34 + 32) = v36;
    *(_QWORD *)(v34 + 40) = v37;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Unable to save LostModeRecord due to %@", 39, 2, v34);
    swift_bridgeObjectRelease();
    swift_errorRetain(v31);
    v38 = (void *)_convertErrorToNSError(_:)(v31);
    (*(void (**)(uint64_t, void *))(v68 + 16))(v68, v38);

    swift_errorRelease(v31);
    swift_errorRelease(v31);
  }
  else
  {
    v39 = v67;
    v40 = sub_1000126EC((uint64_t)v6, v67, type metadata accessor for LostModeRecord);
    v41 = static os_log_type_t.default.getter(v40);
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, qword_1011B7DC8, "Successfully saved LostModeRecord.", 34, 2, _swiftEmptyArrayStorage);
    v42 = swift_allocObject(&unk_101086E38, 24, 7);
    *(_QWORD *)(v42 + 16) = 0;
    dispatch_group_enter(v29);
    v43 = v29;
    swift_retain();
    sub_10068D45C(v39, 1, v70, v42, v43);

    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess(v42 + 16, v72, 0, 0);
    v45 = *(_QWORD *)(v42 + 16);
    if (v45)
    {
      v64 = v28;
      v70 = v22;
      v46 = swift_errorRetain(v45);
      v47 = static os_log_type_t.error.getter(v46);
      v48 = qword_1011B7DC8;
      v49 = swift_allocObject(v15, 72, 7);
      *(_OWORD *)(v49 + 16) = v69;
      v71 = v45;
      swift_errorRetain(v45);
      v50 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v51 = String.init<A>(describing:)(&v71, v50);
      *(_QWORD *)(v49 + 56) = &type metadata for String;
      *(_QWORD *)(v49 + 64) = v20;
      *(_QWORD *)(v49 + 32) = v51;
      *(_QWORD *)(v49 + 40) = v52;
      os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "updateLostModeServer failed - %@. Deleting newly saved LostModeRecord", 69, 2, v49);
      swift_bridgeObjectRelease();
      dispatch_group_enter(v43);
      v53 = v43;
      v54 = static os_log_type_t.default.getter(v53);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v55 = qword_1011B7D38;
      v56 = swift_allocObject(v15, 72, 7);
      *(_OWORD *)(v56 + 16) = v69;
      v57 = (uint64_t)v65;
      sub_10005972C(v39, (uint64_t)v65, type metadata accessor for LostModeRecord);
      v58 = String.init<A>(describing:)(v57, v66);
      *(_QWORD *)(v56 + 56) = &type metadata for String;
      *(_QWORD *)(v56 + 64) = v20;
      *(_QWORD *)(v56 + 32) = v58;
      *(_QWORD *)(v56 + 40) = v59;
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v55, "Attempting to remove: %@", 24, 2, v56);
      swift_bridgeObjectRelease();
      sub_100865CC0(v39, v64, v53);

      OS_dispatch_group.wait()();
      swift_errorRetain(v45);
      v60 = (void *)_convertErrorToNSError(_:)(v45);
      (*(void (**)(uint64_t, void *))(v68 + 16))(v68, v60);

      swift_errorRelease(v45);
      swift_errorRelease(v45);

      sub_1000126B0(v39, type metadata accessor for LostModeRecord);
    }
    else
    {
      v61 = static os_log_type_t.default.getter(v44);
      os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_1011B7DC8, "updateLostModeServer succeeded", 30, 2, _swiftEmptyArrayStorage);
      sub_1007EEF64(14);
      (*(void (**)(uint64_t, _QWORD))(v68 + 16))(v68, 0);

      sub_1000126B0(v39, type metadata accessor for LostModeRecord);
    }
    swift_release();
  }
  return swift_release();
}

void sub_10068F834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  _OWORD *v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  void (**v69)(_QWORD, void *);
  uint64_t v70;

  v70 = a8;
  v65 = a4;
  v66 = a7;
  v68 = a6;
  v64 = a2;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v12);
  v62 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for LostModeRecord(0);
  v61 = *(_QWORD *)(v63 - 8);
  v14 = __chkstk_darwin(v63);
  v60 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v59 = (uint64_t)&v59 - v16;
  _Block_copy(a9);
  v69 = (void (**)(_QWORD, void *))a9;
  v17 = _Block_copy(a9);
  v18 = static os_log_type_t.default.getter(v17);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v19 = qword_1011B7DC8;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v21 = swift_allocObject(v20, 72, 7);
  v67 = xmmword_100E22B00;
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = UUID.uuidString.getter(v21);
  v24 = v23;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  v25 = sub_10001AA00();
  *(_QWORD *)(v21 + 64) = v25;
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v24;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "enableLostMode for beacon %@.", 29, 2, v21);
  v26 = swift_bridgeObjectRelease();
  if (a5 | a3)
  {
    v37 = a5;
    v38 = a3;
    *(_QWORD *)&v67 = a1;
    v39 = sub_100889F60(a1);
    if (v39[2])
    {
      v40 = v61;
      v41 = v62;
      sub_10005972C((uint64_t)v39 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80)), v62, type metadata accessor for LostModeRecord);
      v42 = 0;
      v43 = v69;
      v45 = v65;
      v44 = v66;
      v46 = (int *)v63;
      v47 = v64;
    }
    else
    {
      v42 = 1;
      v43 = v69;
      v45 = v65;
      v44 = v66;
      v46 = (int *)v63;
      v47 = v64;
      v40 = v61;
      v41 = v62;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v40 + 56))(v41, v42, 1, v46);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v40 + 48))(v41, 1, v46) == 1)
    {
      v48 = sub_100004048(v41, (uint64_t *)&unk_1010F47F0);
      v49 = v46;
      v50 = v60;
      UUID.init()(v48);
      v51 = (char *)v50 + v49[6];
      v52 = type metadata accessor for UUID(0);
      (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v51, v67, v52);
      *v50 = xmmword_100E22FC0;
      v53 = (uint64_t *)((char *)v50 + v49[7]);
      *v53 = v47;
      v53[1] = v38;
      v54 = (uint64_t *)((char *)v50 + v49[8]);
      *v54 = v45;
      v54[1] = v37;
      v55 = (_QWORD *)((char *)v50 + v49[9]);
      *v55 = v68;
      v55[1] = v44;
      _Block_copy(v43);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v37);
      sub_10068F1D8((uint64_t)v50, v70, (uint64_t)v43);
      _Block_release(v43);
      v56 = (uint64_t)v50;
    }
    else
    {
      v57 = v41;
      v58 = v59;
      sub_1000126EC(v57, v59, type metadata accessor for LostModeRecord);
      _Block_copy(v43);
      sub_10068CD84(v58, v47, v38, v45, v37, v68, v44, v70, (uint64_t)v43);
      _Block_release(v43);
      v56 = v58;
    }
    sub_1000126B0(v56, type metadata accessor for LostModeRecord);
    _Block_release(v43);
    _Block_release(v43);
  }
  else
  {
    v27 = static os_log_type_t.error.getter(v26);
    v28 = qword_1011B7DC8;
    v29 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v29 + 16) = v67;
    v30 = UUID.uuidString.getter(v29);
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = v25;
    *(_QWORD *)(v29 + 32) = v30;
    *(_QWORD *)(v29 + 40) = v31;
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Must provide either phone number or email - %@", 46, 2, v29);
    swift_bridgeObjectRelease();
    v32 = sub_10033638C();
    v33 = swift_allocError(&type metadata for BeaconManagerCommandError, v32, 0, 0);
    *v34 = 0;
    v35 = (void *)_convertErrorToNSError(_:)(v33);
    v36 = v69;
    v69[2](v69, v35);

    swift_errorRelease(v33);
    _Block_release(v36);
    _Block_release(v36);
  }
}

uint64_t sub_10068FCE8(uint64_t a1, uint64_t a2, void (**a3)(const void *, void *))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (**v47)(const void *, void *);
  uint64_t v48;
  uint64_t v49;

  v48 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47F0);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LostModeRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v43 = v11;
  v44 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v45 = (uint64_t)&v41 - v12;
  v49 = swift_allocObject(&unk_101087158, 24, 7);
  *(_QWORD *)(v49 + 16) = a3;
  v47 = a3;
  v13 = _Block_copy(a3);
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v15 = qword_1011B7DC8;
  v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v42, 72, 7);
  v41 = xmmword_100E22B00;
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v16 + 64) = v20;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "disableLostMode for beacon %@.", 30, 2, v16);
  swift_bridgeObjectRelease();
  v21 = v48;
  v46 = a1;
  v22 = sub_100889F60(a1);
  if (v22[2])
  {
    sub_10005972C((uint64_t)v22 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), (uint64_t)v7, type metadata accessor for LostModeRecord);
    v23 = 0;
  }
  else
  {
    v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v23, 1, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    v24 = sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F47F0);
    v25 = static os_log_type_t.error.getter(v24);
    v26 = qword_1011B7DC8;
    v27 = swift_allocObject(v42, 72, 7);
    *(_OWORD *)(v27 + 16) = v41;
    v28 = UUID.uuidString.getter(v27);
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    *(_QWORD *)(v27 + 64) = v20;
    *(_QWORD *)(v27 + 32) = v28;
    *(_QWORD *)(v27 + 40) = v29;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "lostModeRecord not found for %@.", 32, 2, v27);
    swift_bridgeObjectRelease();
    v30 = sub_1006666C0();
    v31 = swift_allocError(&_s13LostModeErrorON, v30, 0, 0);
    *v32 = 0;
    v33 = (void *)_convertErrorToNSError(_:)(v31);
    v47[2](v47, v33);

    swift_errorRelease(v31);
  }
  else
  {
    v34 = v45;
    sub_1000126EC((uint64_t)v7, v45, type metadata accessor for LostModeRecord);
    v35 = v44;
    sub_10005972C(v34, v44, type metadata accessor for LostModeRecord);
    v36 = *(unsigned __int8 *)(v9 + 80);
    v37 = (v36 + 40) & ~v36;
    v38 = (_QWORD *)swift_allocObject(&unk_101087180, v37 + v43, v36 | 7);
    v39 = v49;
    v38[2] = sub_10001D1F0;
    v38[3] = v39;
    v38[4] = v21;
    sub_1000126EC(v35, (uint64_t)v38 + v37, type metadata accessor for LostModeRecord);
    swift_retain();
    swift_retain();
    sub_100687218(v34, 0, (void (*)(void))sub_1006667EC, (uint64_t)v38);
    swift_release();
    sub_1000126B0(v34, type metadata accessor for LostModeRecord);
  }
  return swift_release();
}

uint64_t sub_1006900D4(uint64_t a1, void (*a2)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  os_log_type_t v29;
  NSObject *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = type metadata accessor for ServerStatusCode(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v42 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v42 - v9, a1, v4);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if ((_DWORD)v12 == enum case for ServerStatusCode.success(_:))
  {
    v13 = static os_log_type_t.default.getter(v12);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DC8, "Successfully submitted lost mode info.", 38, 2, _swiftEmptyArrayStorage);
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
  v15 = v12;
  if ((_DWORD)v12 == enum case for ServerStatusCode.notModified(_:))
  {
    v16 = static os_log_type_t.error.getter(v12);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7DC8, "Failed to submit lost mode: notModified.", 40, 2, _swiftEmptyArrayStorage);
    v17 = sub_1006666C0();
    v19 = swift_allocError(&_s13LostModeErrorON, v17, 0, 0);
    v20 = 6;
LABEL_21:
    *v18 = v20;
LABEL_22:
    a2();
    return swift_errorRelease(v19);
  }
  if ((_DWORD)v12 == enum case for ServerStatusCode.badRequest(_:))
  {
    v21 = static os_log_type_t.error.getter(v12);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7DC8, "Failed to submit lost mode: badRequest.", 39, 2, _swiftEmptyArrayStorage);
    v22 = sub_1006666C0();
    v19 = swift_allocError(&_s13LostModeErrorON, v22, 0, 0);
    *v23 = 2;
    goto LABEL_22;
  }
  if ((_DWORD)v12 == enum case for ServerStatusCode.unauthorized(_:))
  {
    v24 = static os_log_type_t.error.getter(v12);
    if (qword_1010EA2E8 != -1)
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7DC8, "Failed to submit lost mode: unauthorized.", 41, 2, _swiftEmptyArrayStorage);
    v25 = sub_1006666C0();
    v19 = swift_allocError(&_s13LostModeErrorON, v25, 0, 0);
    v20 = 3;
    goto LABEL_21;
  }
  v26 = enum case for ServerStatusCode.serverConflict(_:);
  v27 = static os_log_type_t.error.getter(v12);
  if (v15 == v26)
  {
    if (qword_1010EA2E8 != -1)
    {
      v41 = v27;
      swift_once(&qword_1010EA2E8, sub_100B5E0D8);
      v27 = v41;
    }
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7DC8, "Failed to submit lost mode: serverConflict.", 43, 2, _swiftEmptyArrayStorage);
    v28 = sub_1006666C0();
    v19 = swift_allocError(&_s13LostModeErrorON, v28, 0, 0);
    v20 = 5;
    goto LABEL_21;
  }
  v29 = v27;
  if (qword_1010EA2E8 != -1)
    swift_once(&qword_1010EA2E8, sub_100B5E0D8);
  v30 = qword_1011B7DC8;
  v11(v8, a1, v4);
  if (os_log_type_enabled(v30, v29))
  {
    v31 = swift_slowAlloc(12, -1);
    v44 = v30;
    v32 = (uint8_t *)v31;
    v45 = swift_slowAlloc(32, -1);
    v47 = v45;
    *(_DWORD *)v32 = 136446210;
    v43 = v32 + 4;
    v33 = sub_100006204(&qword_1010FE218, (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode, (uint64_t)&protocol conformance descriptor for ServerStatusCode);
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v4, v33);
    v46 = sub_100016940(v34, v35, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v43, v32 + 12);
    swift_bridgeObjectRelease();
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    _os_log_impl((void *)&_mh_execute_header, v44, v29, "Failed to submit lost mode: %{public}s.", v32, 0xCu);
    v37 = v45;
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
  }
  v38 = sub_1006666C0();
  v39 = swift_allocError(&_s13LostModeErrorON, v38, 0, 0);
  *v40 = 4;
  a2();
  swift_errorRelease(v39);
  return ((uint64_t (*)(char *, uint64_t))v36)(v10, v4);
}

uint64_t sub_100690660(uint64_t a1)
{
  uint64_t v1;

  return sub_10068A278(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10069066C(uint64_t a1)
{
  uint64_t v1;

  return sub_10068A47C(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_100690674()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1006906A8(uint64_t a1)
{
  uint64_t *v1;

  return sub_100688E88(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void sub_1006906BC(uint64_t a1)
{
  uint64_t v1;

  sub_100688F48(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1006906D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1011036B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10069071C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100690740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100690818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LostModeRecord(0) - 8) + 80);
  return sub_100688FA8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100690858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110ABCC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004C28;
  return sub_10080E70C(a1, v1);
}

uint64_t sub_1006908BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1011036B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100690908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110ABCC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_10080E70C(a1, v1);
}

uint64_t sub_10069096C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100690990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t _s13LostModeErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100690AC4 + 4 * byte_100E47D89[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100690AF8 + 4 * byte_100E47D84[v4]))();
}

uint64_t sub_100690AF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100690B00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100690B08);
  return result;
}

uint64_t sub_100690B14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100690B1CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100690B20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100690B28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s13LostModeErrorOMa()
{
  return &_s13LostModeErrorON;
}

unint64_t sub_100690B48()
{
  unint64_t result;

  result = qword_1011036D0;
  if (!qword_1011036D0)
  {
    result = swift_getWitnessTable(byte_100E47DDC, &_s13LostModeErrorON);
    atomic_store(result, (unint64_t *)&qword_1011036D0);
  }
  return result;
}

uint64_t sub_100690BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100690EFC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100690C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100690EFC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100690C6C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100690C98()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0x6E776F6E6B6E752ELL;
}

void sub_100690DE0()
{
  char *v0;

  sub_100690C6C(*v0);
}

uint64_t storeEnumTagSinglePayload for ShareType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100690E34 + 4 * byte_100E47E4E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100690E68 + 4 * byte_100E47E49[v4]))();
}

uint64_t sub_100690E68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100690E70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100690E78);
  return result;
}

uint64_t sub_100690E84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100690E8CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100690E90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100690E98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareType()
{
  return &type metadata for ShareType;
}

unint64_t sub_100690EB8()
{
  unint64_t result;

  result = qword_1011036D8;
  if (!qword_1011036D8)
  {
    result = swift_getWitnessTable(byte_100E47EC0, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_1011036D8);
  }
  return result;
}

unint64_t sub_100690EFC()
{
  unint64_t result;

  result = qword_1011036E0;
  if (!qword_1011036E0)
  {
    result = swift_getWitnessTable(byte_100E47E88, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_1011036E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingLocalMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100690F8C + 4 * byte_100E47F85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100690FC0 + 4 * byte_100E47F80[v4]))();
}

uint64_t sub_100690FC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100690FC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100690FD0);
  return result;
}

uint64_t sub_100690FDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100690FE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100690FE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100690FF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingLocalMessageType()
{
  return &type metadata for BeaconSharingLocalMessageType;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingSessionMessageType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10069104C + 4 * byte_100E47F8A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10069106C + 4 * byte_100E47F8F[v4]))();
}

_BYTE *sub_10069104C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10069106C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100691074(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10069107C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100691084(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10069108C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingSessionMessageType()
{
  return &type metadata for BeaconSharingSessionMessageType;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1006910F4 + 4 * byte_100E47F99[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_100691128 + 4 * byte_100E47F94[v4]))();
}

uint64_t sub_100691128(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100691130(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100691138);
  return result;
}

uint64_t sub_100691144(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10069114CLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_100691150(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100691158(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingMessageType()
{
  return &type metadata for BeaconSharingMessageType;
}

uint64_t sub_10069117C@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1006918E0(*a1);
  *a2 = result;
  return result;
}

void sub_1006911A4(_QWORD *a1@<X8>)
{
  *a1 = &off_10104DA70;
}

uint64_t sub_1006911B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100691300();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100691210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100691300();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10069125C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100691764(a1, a2, a3, (uint64_t (*)(void))sub_100691278, (uint64_t (*)(void))sub_1006912BC, (uint64_t (*)(void))sub_100691300);
}

unint64_t sub_100691278()
{
  unint64_t result;

  result = qword_1011036E8;
  if (!qword_1011036E8)
  {
    result = swift_getWitnessTable(byte_100E48024, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1011036E8);
  }
  return result;
}

unint64_t sub_1006912BC()
{
  unint64_t result;

  result = qword_1011036F0;
  if (!qword_1011036F0)
  {
    result = swift_getWitnessTable(byte_100E47FFC, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1011036F0);
  }
  return result;
}

unint64_t sub_100691300()
{
  unint64_t result;

  result = qword_1011036F8;
  if (!qword_1011036F8)
  {
    result = swift_getWitnessTable(aA_37, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1011036F8);
  }
  return result;
}

uint64_t sub_100691344()
{
  return sub_10044BEAC(&qword_101103700, &qword_101103708);
}

unint64_t sub_10069136C()
{
  unint64_t result;

  result = qword_101103710;
  if (!qword_101103710)
  {
    result = swift_getWitnessTable(a1_22, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_101103710);
  }
  return result;
}

int *sub_1006913B0@<X0>(int *result@<X0>, _BYTE *a2@<X8>)
{
  int v2;

  v2 = *result;
  if (*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1006913C8(_QWORD *a1@<X8>)
{
  *a1 = &off_10104DAA8;
}

uint64_t sub_1006913D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100691830();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100691434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100691830();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_100691480()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1006914C0()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1006914E4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

_DWORD *sub_100691520@<X0>(_DWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_100691534(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_10069153C(_QWORD *a1@<X8>)
{
  *a1 = &off_10104DAD0;
}

uint64_t sub_10069154C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100691698();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1006915A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100691698();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1006915F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100691764(a1, a2, a3, (uint64_t (*)(void))sub_100691610, (uint64_t (*)(void))sub_100691654, (uint64_t (*)(void))sub_100691698);
}

unint64_t sub_100691610()
{
  unint64_t result;

  result = qword_101103718;
  if (!qword_101103718)
  {
    result = swift_getWitnessTable(aA_38, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_101103718);
  }
  return result;
}

unint64_t sub_100691654()
{
  unint64_t result;

  result = qword_101103720;
  if (!qword_101103720)
  {
    result = swift_getWitnessTable(aY_47, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_101103720);
  }
  return result;
}

unint64_t sub_100691698()
{
  unint64_t result;

  result = qword_101103728;
  if (!qword_101103728)
  {
    result = swift_getWitnessTable(byte_100E481E4, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_101103728);
  }
  return result;
}

uint64_t sub_1006916DC()
{
  return sub_10044BEAC(&qword_101103730, &qword_101103738);
}

unint64_t sub_100691704()
{
  unint64_t result;

  result = qword_101103740;
  if (!qword_101103740)
  {
    result = swift_getWitnessTable(byte_100E4825C, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_101103740);
  }
  return result;
}

uint64_t sub_100691748(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100691764(a1, a2, a3, (uint64_t (*)(void))sub_1006917A8, (uint64_t (*)(void))sub_1006917EC, (uint64_t (*)(void))sub_100691830);
}

uint64_t sub_100691764(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t result;

  a1[1] = a4();
  a1[2] = a5();
  result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_1006917A8()
{
  unint64_t result;

  result = qword_101103748;
  if (!qword_101103748)
  {
    result = swift_getWitnessTable(byte_100E482AC, &type metadata for BeaconSharingLocalMessageType);
    atomic_store(result, (unint64_t *)&qword_101103748);
  }
  return result;
}

unint64_t sub_1006917EC()
{
  unint64_t result;

  result = qword_101103750;
  if (!qword_101103750)
  {
    result = swift_getWitnessTable(a5_7, &type metadata for BeaconSharingLocalMessageType);
    atomic_store(result, (unint64_t *)&qword_101103750);
  }
  return result;
}

unint64_t sub_100691830()
{
  unint64_t result;

  result = qword_101103758;
  if (!qword_101103758)
  {
    result = swift_getWitnessTable(byte_100E48328, &type metadata for BeaconSharingLocalMessageType);
    atomic_store(result, (unint64_t *)&qword_101103758);
  }
  return result;
}

uint64_t sub_100691874()
{
  return sub_10044BEAC(&qword_101103760, &qword_101103768);
}

unint64_t sub_10069189C()
{
  unint64_t result;

  result = qword_101103770;
  if (!qword_101103770)
  {
    result = swift_getWitnessTable(byte_100E483A0, &type metadata for BeaconSharingLocalMessageType);
    atomic_store(result, (unint64_t *)&qword_101103770);
  }
  return result;
}

uint64_t sub_1006918E0(uint64_t result)
{
  if (result >= 0x11)
    return 17;
  else
    return result;
}

void sub_1006918F8(char a1)
{
  __asm { BR              X10 }
}

unint64_t sub_100691940()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRetain(0x8000000100EE00A0);
  v3._countAndFlagsBits = 0x756C615677617228;
  v3._object = (void *)0xEA00000000003A65;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(0x8000000100EE00A0);
  swift_bridgeObjectRelease(0xEA00000000003A65);
  return 0xD00000000000001CLL;
}

uint64_t sub_100691A58(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100035530();
  v5 = DataProtocol.intValue.getter(&type metadata for Data, v4);
  sub_10001BC14(a1, a2);
  if (v5 >= 4)
    return 4;
  else
    return v5;
}

uint64_t sub_100691AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100004048(a1, &qword_1010F46C0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_1010877D8, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1010EE4A0, v16);
}

uint64_t sub_100691C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100004048(a1, &qword_1010F46C0);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1010877B0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  if (v15 | v13)
  {
    v21[0] = 0;
    v21[1] = 0;
    v19 = v21;
    v21[2] = v13;
    v21[3] = v15;
  }
  else
  {
    v19 = 0;
  }
  return swift_task_create(v9, v19, v18, &unk_1011037A8, v17);
}

Swift::Int64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database._test_raw_scalar_sql_query(_:)(Swift::String a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  Swift::Int64 v19;

  v4 = v2;
  v5 = v1;
  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v18[0] = 0x7365547265646E75;
  v18[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v19, v18, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v19 != 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 40))(v5, v4) & 1) != 0
    && static Database.beforeFirstUnlock.getter())
  {
    v8 = sub_10012C434();
    v9 = swift_allocError(&type metadata for DatabaseError, v8, 0, 0);
    v11 = 4;
LABEL_14:
    *(_DWORD *)v10 = v11;
    *(_BYTE *)(v10 + 4) = 1;
    return swift_willThrow(v9);
  }
  if (!Database.readConnection.getter(v5, v4))
  {
    v14 = sub_10012C434();
    v9 = swift_allocError(&type metadata for DatabaseError, v14, 0, 0);
    v11 = 2;
    goto LABEL_14;
  }
  Connection.scalar(_:_:)(v18, countAndFlagsBits, object, _swiftEmptyArrayStorage);
  if (!v3)
  {
    if (v18[3])
    {
      v13 = sub_10001A9A8(&qword_101103780);
      if (swift_dynamicCast(&v19, v18, v13, &type metadata for Int64, 6))
      {
        swift_release();
        return v19;
      }
    }
    else
    {
      sub_100004048((uint64_t)v18, &qword_101103778);
    }
    v15 = sub_10012C434();
    v16 = swift_allocError(&type metadata for DatabaseError, v15, 0, 0);
    *(_DWORD *)v17 = 0;
    *(_BYTE *)(v17 + 4) = 1;
    swift_willThrow(v16);
  }
  return swift_release();
}

uint64_t Database.writeConnection.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(void))(a2 + 16))();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *(_QWORD *)(v2 + 24);
  swift_retain(v4);
  swift_release(v3);
  return v4;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v1;
  v4 = v0;
  (*(void (**)(void))(v1 + 80))();
  if (!v2)
    (*(void (**)(uint64_t, uint64_t))(v3 + 64))(v4, v3);
}

uint64_t Database.readConnection.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(void))(a2 + 16))();
  if (!v2)
    return 0;
  v3 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  swift_retain(v4);
  swift_release(v3);
  return v4;
}

uint64_t Database.openOrScheduleOpenAfterFirstUnlockIfNeeded(logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a2;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v34 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  __chkstk_darwin(v11);
  v13 = (char *)&v32 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15 = a1;
  v16 = a1;
  v17 = v35;
  v14((char *)&v32 - v12, v16, v8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(v17, a3) & 1) != 0)
  {
    v32 = v14;
    v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18 = v15;
    v19 = v34;
    v20 = a3;
    if (static Database.beforeFirstUnlock.getter())
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      v21 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 1, 1, v21);
      v22 = v33;
      v32(v33, v18, v8);
      v23 = *(unsigned __int8 *)(v9 + 80);
      v24 = (v23 + 48) & ~v23;
      v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      v26 = (char *)swift_allocObject(&unk_101087668, v25 + 8, v23 | 7);
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 3) = 0;
      *((_QWORD *)v26 + 4) = v17;
      *((_QWORD *)v26 + 5) = v20;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v26[v24], v22, v8);
      *(_QWORD *)&v26[v25] = v3;
      swift_unknownObjectRetain(v3);
      sub_100691AC0(v34, (uint64_t)&unk_101103790, (uint64_t)v26);
      return swift_release();
    }
    v28 = v3;
    v29 = (uint64_t)v13;
    v30 = v17;
    v31 = a3;
  }
  else
  {
    v28 = v3;
    v29 = (uint64_t)v13;
    v30 = v17;
    v31 = a3;
  }
  sub_100693BEC(v28, v29, v30, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

void (*static Database.establishConnection(logger:temporary:)(void *a1, unsigned int a2, uint64_t a3, uint64_t a4))(uint64_t, _QWORD *)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  void (*v32)(_QWORD *, _QWORD, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, _QWORD *);
  void (*v37)(uint64_t, _QWORD *);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  void *v67;
  void *v68;
  unsigned int v69;
  id v70;
  id v71;
  NSURL *v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  unsigned int v78;
  id v79;
  id v80;
  NSURL *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  unsigned int v87;
  id v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(_QWORD *, _QWORD, uint64_t);
  void *v103;
  char *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  char *v116;
  uint64_t v117;
  id v118;

  v103 = a1;
  v7 = type metadata accessor for Connection.Location(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v109 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (uint64_t *)((char *)&v100 - v12);
  __chkstk_darwin(v11);
  v15 = (char *)&v100 - v14;
  v115 = (_QWORD *)type metadata accessor for URL(0);
  v113 = *(v115 - 1);
  v16 = __chkstk_darwin(v115);
  v104 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  v20 = *(uint64_t (**)(void))(a4 + 56);
  v116 = (char *)&v100 - v21;
  v114 = v22;
  v110 = v23;
  v24 = v20();
  v105 = a2;
  v107 = a4;
  v108 = v7;
  v106 = a3;
  if ((a2 & 1) != 0)
  {
    v25 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
    v25(v15, enum case for Connection.Location.temporary(_:), v7);
    v26 = type metadata accessor for ConnectionPair();
    swift_allocObject(v26, 32, 7);
    v27 = v112;
    v28 = ConnectionPair.init(_:readonly:key:)((uint64_t)v15, 0, 0, 0xF000000000000000);
    if (v27)
    {
      v101 = v8;
      v102 = (void (*)(_QWORD *, _QWORD, uint64_t))v25;
      v111 = 0;
      v29 = v27;
      v30 = v115;
      goto LABEL_8;
    }
    v36 = (void (*)(uint64_t, _QWORD *))v28;
    v37 = *(void (**)(uint64_t, _QWORD *))(v113 + 8);
    v30 = v115;
    v37(v110, v115);
LABEL_26:
    v37(v114, v30);
    v37((uint64_t)v116, v30);
    return v36;
  }
  *v13 = URL.path.getter(v24);
  v13[1] = v31;
  v32 = *(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104);
  v32(v13, enum case for Connection.Location.uri(_:), v7);
  v33 = v112;
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  v29 = v33;
  v101 = v8;
  if (!v33)
  {
    v38 = v34;
    v39 = v35;
    v40 = type metadata accessor for ConnectionPair();
    swift_allocObject(v40, 32, 7);
    v41 = ConnectionPair.init(_:readonly:key:)((uint64_t)v13, 0, v38, v39);
    v30 = v115;
    v36 = (void (*)(uint64_t, _QWORD *))v41;
    v37 = *(void (**)(uint64_t, _QWORD *))(v113 + 8);
    v37(v110, v115);
    goto LABEL_26;
  }
  v102 = v32;
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v13, v7);
  v111 = 0;
  v30 = v115;
LABEL_8:
  v42 = v113;
  v115 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v43 = v104;
  (*(void (**)(char *, char *, _QWORD *))(v42 + 16))(v104, v116, v30);
  swift_errorRetain(v29);
  v44 = swift_errorRetain(v29);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.error.getter(v45);
  v47 = os_log_type_enabled(v45, v46);
  v112 = v29;
  if (v47)
  {
    v48 = v43;
    v49 = swift_slowAlloc(22, -1);
    v50 = (uint64_t *)swift_slowAlloc(8, -1);
    v103 = (void *)swift_slowAlloc(32, -1);
    v118 = v103;
    *(_DWORD *)v49 = 136446466;
    v51 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v30, v51);
    v54 = v53;
    v117 = sub_100016940(v52, v53, (uint64_t *)&v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease(v54);
    v113 = *(_QWORD *)(v113 + 8);
    ((void (*)(char *, _QWORD *))v113)(v48, v30);
    *(_WORD *)(v49 + 12) = 2114;
    v55 = _convertErrorToNSError(_:)(v112);
    v117 = v55;
    v56 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v49 + 14, v49 + 22);
    *v50 = v55;
    swift_errorRelease(v56);
    swift_errorRelease(v56);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unable to open %{public}s: %{public}@", (uint8_t *)v49, 0x16u);
    v57 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v50, 1, v57);
    swift_slowDealloc(v50, -1, -1);
    v58 = v103;
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

    v113 = *(_QWORD *)(v42 + 8);
    ((void (*)(char *, _QWORD *))v113)(v43, v30);
    swift_errorRelease(v29);
    v59 = (id)swift_errorRelease(v29);
  }
  v60 = v110;
  v61 = v106;
  v62 = v108;
  v63 = v102;
  if ((v105 & 1) != 0)
  {
    v64 = v109;
    v65 = v107;
  }
  else
  {
    v66 = v30;
    URL._bridgeToObjectiveC()((NSURL *)v105);
    v68 = v67;
    v118 = 0;
    v69 = objc_msgSend(v115, "removeItemAtURL:error:", v67, &v118);

    v70 = v118;
    if (v69)
    {
      v71 = v118;
    }
    else
    {
      v73 = v118;
      v74 = _convertNSErrorToError(_:)(v70);

      swift_willThrow(v75);
      swift_errorRelease(v74);
      v111 = 0;
    }
    URL._bridgeToObjectiveC()(v72);
    v77 = v76;
    v118 = 0;
    v78 = objc_msgSend(v115, "removeItemAtURL:error:", v76, &v118);

    v79 = v118;
    if (v78)
    {
      v80 = v118;
    }
    else
    {
      v82 = v118;
      v83 = _convertNSErrorToError(_:)(v79);

      swift_willThrow(v84);
      swift_errorRelease(v83);
      v111 = 0;
    }
    URL._bridgeToObjectiveC()(v81);
    v86 = v85;
    v118 = 0;
    v87 = objc_msgSend(v115, "removeItemAtURL:error:", v85, &v118);

    v88 = v118;
    if (v87)
    {
      v59 = v118;
    }
    else
    {
      v89 = v118;
      v90 = _convertNSErrorToError(_:)(v88);

      swift_willThrow(v91);
      v59 = (id)swift_errorRelease(v90);
      v111 = 0;
    }
    v30 = v66;
    v64 = v109;
    v65 = v107;
  }
  *v64 = URL.path.getter(v59);
  v64[1] = v92;
  v63(v64, enum case for Connection.Location.uri(_:), v62);
  v93 = v111;
  v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 48))(v61, v65);
  if (!v93)
  {
    v96 = v94;
    v97 = v95;
    v98 = type metadata accessor for ConnectionPair();
    swift_allocObject(v98, 32, 7);
    v36 = (void (*)(uint64_t, _QWORD *))ConnectionPair.init(_:readonly:key:)((uint64_t)v64, 0, v96, v97);

    swift_errorRelease(v112);
    v37 = (void (*)(uint64_t, _QWORD *))v113;
    ((void (*)(uint64_t, _QWORD *))v113)(v60, v30);
    goto LABEL_26;
  }

  swift_errorRelease(v112);
  (*(void (**)(_QWORD *, uint64_t))(v101 + 8))(v64, v62);
  v36 = (void (*)(uint64_t, _QWORD *))v113;
  ((void (*)(uint64_t, _QWORD *))v113)(v60, v30);
  v36(v114, v30);
  v36((uint64_t)v116, v30);
  return v36;
}

void sub_100692A74()
{
  Database.startup()();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.startup()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  int v20;
  int v21;
  Swift::String v22;
  unint64_t v23;
  void (*v24)(unint64_t, _QWORD, uint64_t, uint64_t, uint64_t);
  int v25;

  v3 = v1;
  v4 = v0;
  if (((*(uint64_t (**)(void))(v1 + 40))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    v5 = sub_10012C434();
    v6 = swift_allocError(&type metadata for DatabaseError, v5, 0, 0);
    v8 = 4;
LABEL_6:
    *(_DWORD *)v7 = v8;
    *(_BYTE *)(v7 + 4) = 1;
    swift_willThrow(v6);
    return;
  }
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3);
  swift_release();
  if (v9)
  {
    v10 = sub_10012C434();
    v6 = swift_allocError(&type metadata for DatabaseError, v10, 0, 0);
    v8 = 3;
    goto LABEL_6;
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 96))(v4, v3);
  if (!v2)
  {
    v11 = Database.writeConnection.getter(v4, v3);
    if (!v11)
    {
      v23 = sub_10012C434();
      v6 = swift_allocError(&type metadata for DatabaseError, v23, 0, 0);
      v8 = 2;
      goto LABEL_6;
    }
    v12 = v11;
    v13._countAndFlagsBits = 0xD000000000000019;
    v13._object = (void *)0x8000000100EE00C0;
    Connection.execute(_:)(v13);
    if (!v14)
    {
      Database.optimize()();
      if (!v15)
      {
        Database.incrementalVacuum()();
        if (!v16)
        {
          Database.checkpoint(mode:)(searchpartyd_DatabaseCheckpointMode_restart);
          if (!v17)
          {
            sub_100694C10(v4, v3);
            v18 = (unint64_t)Connection.userVersion.getter();
            v19 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 24);
            if ((int)v18 < (int)v19(v4, v3))
            {
              v20 = v19(v4, v3);
              if (v20 < (int)v18)
              {
LABEL_24:
                __break(1u);
                return;
              }
              if ((_DWORD)v18 != v20)
              {
                v24 = *(void (**)(unint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(v3 + 72);
                v25 = v20;
                while ((int)v18 < v20)
                {
                  v21 = v18 + 1;
                  v24(v18, (v18 + 1), v12, v4, v3);
                  _StringGuts.grow(_:)(24);
                  swift_bridgeObjectRelease();
                  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
                  String.append(_:)(v22);
                  swift_bridgeObjectRelease();
                  Connection.run(_:_:)(0xD000000000000016, 0x8000000100EE00E0, _swiftEmptyArrayStorage);
                  swift_bridgeObjectRelease();
                  swift_release();
                  v18 = (v18 + 1);
                  v20 = v25;
                  if (v25 == v21)
                    goto LABEL_20;
                }
                __break(1u);
                goto LABEL_24;
              }
            }
LABEL_20:
            (*(void (**)(uint64_t, uint64_t))(v3 + 104))(v4, v3);
          }
        }
      }
    }
    swift_release();
  }
}

void sub_100692DF0()
{
  Database.reset()();
}

uint64_t Database.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;

  v4 = (*(uint64_t (**)(void))(a2 + 16))();
  if (v4)
  {
    v5 = v4;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(0xE000000000000000);
    v6 = *(_QWORD *)(a2 + 8);
    v7._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(a1, v6);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    v9._countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    v10._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(a1, v6);
    v11 = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(v11);
    v12._countAndFlagsBits = 0x206574694C515320;
    v12._object = (void *)0xE900000000000076;
    String.append(_:)(v12);
    v13._countAndFlagsBits = 0x322E33342E33;
    v13._object = (void *)0xE600000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = 32;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = Connection.description.getter();
    v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v17._countAndFlagsBits = 62;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    swift_release(v5);
  }
  else
  {
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v18 = *(_QWORD *)(a2 + 8);
    v19._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(a1, v18);
    v20 = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v20);
    v21._countAndFlagsBits = 8250;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    v22._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(a1, v18);
    v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    v24._countAndFlagsBits = 0x206574694C515320;
    v24._object = (void *)0xE900000000000076;
    String.append(_:)(v24);
    v25._countAndFlagsBits = 0x322E33342E33;
    v25._object = (void *)0xE600000000000000;
    String.append(_:)(v25);
    v26._object = (void *)0x8000000100EE0100;
    v26._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v26);
  }
  return 60;
}

void *Connection.init(_:readonly:key:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  NSURL *v12;
  void *v13;
  void *v14;
  void (*v15)(char *, uint64_t);
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;

  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.deletingLastPathComponent()(v11);
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  v29 = 0;
  LODWORD(v10) = objc_msgSend(v11, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v14, 1, 0, &v29);

  v16 = v29;
  if (!(_DWORD)v10)
  {
    v18 = v16;
    _convertNSErrorToError(_:)(v16);

    swift_willThrow(v23);
    sub_10001EF3C(a3, a4);
    v21 = a1;
    v22 = v7;
    goto LABEL_5;
  }
  v26 = v7;
  v17 = URL.path.getter(v16);
  v18 = v27;
  v19 = v28;
  v20 = Connection.__allocating_init(_:readonly:)(v17);
  if (v19)
  {
    sub_10001EF3C(a3, a4);
    v21 = a1;
    v22 = v26;
LABEL_5:
    v15(v21, v22);
    return v18;
  }
  v18 = (void *)v20;
  if (a4 >> 60 != 15)
    __asm { BR              X10 }
  swift_retain();
  v15(a1, v26);
  swift_release(v18);
  return v18;
}

void DatabaseCheckpointMode.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int DatabaseCheckpointMode.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL static Database.beforeFirstUnlock.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BOOL8 v9;
  void (*v10)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v7 = (char *)&v12 - v6;
  static SystemInfo.lockState.getter(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v0);
  v8 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v12, v0, v8);
  v9 = v13 == v12;
  v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v7, v0);
  return v9;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.optimize()()
{
  uint64_t v0;
  uint64_t v1;

  sub_1006936D0(v0, v1, 0xD000000000000010, (void *)0x8000000100EE0150);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.incrementalVacuum()()
{
  uint64_t v0;
  uint64_t v1;

  sub_1006936D0(v0, v1, 0xD00000000000001ALL, (void *)0x8000000100EE0170);
}

uint64_t sub_1006936D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  Swift::String v12;
  unint64_t v14;

  if (((*(uint64_t (**)(void))(a2 + 40))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    v8 = sub_10012C434();
    v9 = swift_allocError(&type metadata for DatabaseError, v8, 0, 0);
    v11 = 4;
  }
  else
  {
    if (Database.writeConnection.getter(a1, a2))
    {
      v12._countAndFlagsBits = a3;
      v12._object = a4;
      Connection.execute(_:)(v12);
      return swift_release();
    }
    v14 = sub_10012C434();
    v9 = swift_allocError(&type metadata for DatabaseError, v14, 0, 0);
    v11 = 2;
  }
  *(_DWORD *)v10 = v11;
  *(_BYTE *)(v10 + 4) = 1;
  return swift_willThrow(v9);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.checkpoint(mode:)(searchpartyd::DatabaseCheckpointMode mode)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  sqlite3 *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int pnCkpt[2];
  int v20;
  int v21;
  _BYTE v22[24];

  v3 = v2;
  v4 = v1;
  if (((*(uint64_t (**)())(v2 + 40))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    v6 = sub_10012C434();
    v7 = swift_allocError(&type metadata for DatabaseError, v6, 0, 0);
    v9 = 4;
LABEL_11:
    *(_DWORD *)v8 = v9;
    *(_BYTE *)(v8 + 4) = 1;
    swift_willThrow(v7);
    return;
  }
  v10 = Database.writeConnection.getter(v4, v3);
  if (!v10)
  {
    v17 = sub_10012C434();
    v7 = swift_allocError(&type metadata for DatabaseError, v17, 0, 0);
    v9 = 2;
    goto LABEL_11;
  }
  *(_QWORD *)pnCkpt = 0;
  v11 = (sqlite3 *)Connection.handle.getter(v10);
  sqlite3_wal_checkpoint_v2(v11, "main", mode, &pnCkpt[1], pnCkpt);
  if (qword_1010E9D10 != -1)
    swift_once(&qword_1010E9D10, sub_10059F7E8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B71B0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(14, -1);
    *(_DWORD *)v16 = 67109376;
    swift_beginAccess(pnCkpt, v22, 0, 0);
    v20 = pnCkpt[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4, v16 + 8);
    *(_WORD *)(v16 + 8) = 1024;
    swift_beginAccess(&pnCkpt[1], &v20, 0, 0);
    v18 = pnCkpt[1];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, pnCkpt, v16 + 10, v16 + 14);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Checkpointed %d/%d", (uint8_t *)v16, 0xEu);
    swift_slowDealloc(v16, -1, -1);
  }

  swift_release();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.excludeFromBackup()()
{
  uint64_t v0;
  uint64_t v1;

  sub_100694C10(v0, v1);
}

_QWORD *Connection.userVersion.getter()
{
  uint64_t v0;
  _QWORD *result;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[5];
  uint64_t v7;

  result = Connection.scalar(_:_:)(v6, 0xD000000000000013, 0x8000000100EE0190, _swiftEmptyArrayStorage);
  if (!v0)
  {
    if (!v6[3])
    {
LABEL_7:
      sub_100004048((uint64_t)v6, &qword_101103778);
      goto LABEL_8;
    }
    v2 = sub_10001A9A8(&qword_101103780);
    if ((swift_dynamicCast(&v7, v6, v2, &type metadata for Int64, 6) & 1) == 0)
    {
LABEL_8:
      v3 = sub_10012C434();
      v4 = swift_allocError(&type metadata for DatabaseError, v3, 0, 0);
      *(_DWORD *)v5 = 0;
      *(_BYTE *)(v5 + 4) = 0;
      return (_QWORD *)swift_willThrow(v4);
    }
    result = (_QWORD *)v7;
    if (v7 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
      return result;
    }
    if (v7 > 0x7FFFFFFF)
    {
      __break(1u);
      goto LABEL_7;
    }
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.update(userVersion:)(Swift::Int32 userVersion)
{
  uint64_t v1;
  Swift::String v2;
  void *object;
  uint64_t v4;

  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4 = Connection.run(_:_:)(0xD000000000000016, 0x8000000100EE00E0, &_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0x8000000100EE00E0);
  if (!v1)
    swift_release(v4);
}

uint64_t sub_100693BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
}

uint64_t sub_100693D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  return swift_task_switch(sub_100693D90, 0, 0);
}

uint64_t sub_100693D90()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD58 + dword_1010EBD58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD5C);
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_100693E74;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100693E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100693ED0, 0, 0);
}

uint64_t sub_100693ED0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 200))
  {
    v2 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = swift_unknownObjectRetain_n(v2, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(v0 + 168);
      v19 = *(_QWORD *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 176);
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v21 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 144) = v6;
      v9 = CustomStringConvertible.typeDescription.getter(v20, *(_QWORD *)(v19 + 8));
      *(_QWORD *)(v0 + 152) = sub_100016940(v9, v10, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n(v6, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {
      v17 = *(_QWORD *)(v0 + 168);

      swift_unknownObjectRelease_n(v17, 2);
    }
    v18 = (_QWORD *)swift_task_alloc(dword_1010FC394);
    *(_QWORD *)(v0 + 208) = v18;
    *v18 = v0;
    v18[1] = sub_10069416C;
    return sub_10044B510();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA430 != -1)
      swift_once(&qword_1010EA430, sub_100C4DCC8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7F98);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to get FirstUnlockService", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10069416C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  return swift_task_switch(sub_1006941C0, 0, 0);
}

uint64_t sub_1006941C0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 184) + 64))(*(_QWORD *)(v0 + 176));
  v1 = swift_unknownObjectRetain_n(*(_QWORD *)(v0 + 168), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v5 = *(_QWORD *)(v0 + 176);
    v4 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 168);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v13 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 128) = v6;
    v9 = CustomStringConvertible.typeDescription.getter(v5, *(_QWORD *)(v4 + 8));
    *(_QWORD *)(v0 + 136) = sub_100016940(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SQLite database for %s opened successfully after device unlock.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 168);

    swift_unknownObjectRelease_n(v11, 2);
  }
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void Connection.rekey(key:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100694500()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  char v10;
  char v11;
  char v12;

  v7 = v1;
  v8 = v2;
  v9 = BYTE2(v2);
  v10 = BYTE3(v2);
  v11 = BYTE4(v2);
  v12 = BYTE5(v2);
  v3 = swift_retain();
  v4 = Connection.handle.getter(v3);
  v5 = ((uint64_t (*)(uint64_t, const char *, uint64_t *, _QWORD))sqlite3_rekey_v2)(v4, "main", &v7, BYTE6(v2));
  swift_release();
  sub_10001BC14(v1, v2);
  Connection.scalar(_:_:)(&v7, 0xD000000000000023, 0x8000000100EE0120, _swiftEmptyArrayStorage);
  if (!v0)
    sub_100004048((uint64_t)&v7, &qword_101103778);
  return v5;
}

uint64_t sub_100694768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1006947F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = swift_task_alloc(dword_10110378C);
  v7 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)v6 = v1;
  *(_QWORD *)(v6 + 8) = sub_100004C28;
  *(_OWORD *)(v6 + 176) = v7;
  *(_QWORD *)(v6 + 160) = v4;
  *(_QWORD *)(v6 + 168) = v5;
  return swift_task_switch(sub_100693D90, 0, 0);
}

uint64_t sub_100694894(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_1006948A0(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_1006948A8(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_1006948DC(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = sub_100016940(v6, v7, a3);
  v9 = *a1;
  v10 = *a1 + 8;
  v12 = v8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9, v10);
  result = swift_bridgeObjectRelease();
  *a1 = v10;
  return result;
}

uint64_t sub_10069494C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED318);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_100694A98(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void sub_100694AA8(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1;
  v9 = *a1 + 8;
  if (v6)
    v11 = v6;
  else
    v11 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8, v9);
  *a1 = v9;
  v10 = *a2;
  if (*a2)
  {
    *v10 = v7;
    *a2 = v10 + 1;
  }
  else
  {

  }
}

uint64_t sub_100694B58(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_100694BC0;
  return v5(v2 + 32);
}

uint64_t sub_100694BC0()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100694C10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = type metadata accessor for URLResourceValues(0);
  v33 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v32 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v32 - v14;
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v17 = (*(uint64_t (**)(char *, char *, char *, uint64_t, uint64_t))(a2 + 56))(v15, v13, v10, a1, a2);
  URLResourceValues.init()(v17);
  v18 = URLResourceValues.isExcludedFromBackup.setter(1);
  URL.path.getter(v18);
  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  LODWORD(v20) = objc_msgSend(v16, "fileExistsAtPath:", v21);

  if (!(_DWORD)v20 || (v22 = URL.setResourceValues(_:)(v6), !v2))
  {
    URL.path.getter(v22);
    v24 = v23;
    v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    LODWORD(v24) = objc_msgSend(v16, "fileExistsAtPath:", v25);

    if (!(_DWORD)v24 || (v26 = URL.setResourceValues(_:)(v6), !v2))
    {
      URL.path.getter(v26);
      v28 = v27;
      v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v28);
      LODWORD(v28) = objc_msgSend(v16, "fileExistsAtPath:", v29);

      if ((_DWORD)v28)
        URL.setResourceValues(_:)(v6);
    }
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v34);
  v30 = *(void (**)(char *, uint64_t))(v32 + 8);
  v30(v10, v7);
  v30(v13, v7);
  return ((uint64_t (*)(char *, uint64_t))v30)(v15, v7);
}

void sub_100694EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  if (!__DataStorage._bytes.getter() || !__OFSUB__(a1, __DataStorage._offset.getter()))
  {
    v7 = __DataStorage._length.getter();
    Connection.handle.getter(v7);
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x100694F98);
}

unint64_t sub_100694FB0()
{
  unint64_t result;

  result = qword_101103798;
  if (!qword_101103798)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DatabaseCheckpointMode, &type metadata for DatabaseCheckpointMode);
    atomic_store(result, (unint64_t *)&qword_101103798);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DatabaseCheckpointMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100695040 + 4 * byte_100E48405[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100695074 + 4 * byte_100E48400[v4]))();
}

uint64_t sub_100695074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10069507C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100695084);
  return result;
}

uint64_t sub_100695090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100695098);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10069509C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006950A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseCheckpointMode()
{
  return &type metadata for DatabaseCheckpointMode;
}

uint64_t getEnumTagSinglePayload for DatabaseError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DatabaseError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_10069510C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100695128(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }
  else
  {
    *(_BYTE *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DatabaseError()
{
  return &type metadata for DatabaseError;
}

uint64_t sub_100695158()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10069517C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1011037A4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1011037A0 + dword_1011037A0))(a1, v4);
}

uint64_t sub_1006951F0(uint64_t a1)
{
  return sub_1006969B4(a1, qword_1011B7410);
}

uint64_t sub_1006951FC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;

  v2 = v0;
  *(_QWORD *)(v1 + 16) = v0;
  swift_defaultActor_initialize(v0);
  v0[14] = 0xD00000000000001ALL;
  v0[15] = 0x8000000100E48530;
  v0[18] = _swiftEmptyDictionarySingleton;
  v3 = sub_10001A9A8(&qword_101103B08);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[19] = AsyncStreamProvider.init()();
  v4 = objc_msgSend((id)objc_opt_self(ACCConnectionInfo), "sharedInstance");
  *(_QWORD *)(v1 + 24) = v4;
  if (v4)
  {
    v5 = v4;
    v2[16] = v4;
    v6 = objc_allocWithZone((Class)type metadata accessor for AccessoryDelegateTrampoline());
    v7 = v5;
    v2[17] = objc_msgSend(v6, "init");
    return swift_task_switch(sub_1006953F0, v2, 0);
  }
  else
  {
    if (qword_1010E9E20 != -1)
      swift_once(&qword_1010E9E20, sub_1006951F0);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7410);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "ACCConnectionInfo.sharedInstance() returned nil!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v14 = type metadata accessor for AccessoryConnectionService();
    swift_defaultActor_destroy(v2);
    swift_deallocPartialClassInstance(v2, v14, 160, 15);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_1006953F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);

  swift_weakAssign(*(_QWORD *)(v1 + 136)+ OBJC_IVAR____TtC12searchpartydP33_8DF307D51982B56654A13C398BADC9D727AccessoryDelegateTrampoline_target, v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100695438()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AccessoryConnectionService()
{
  return objc_opt_self(_TtC12searchpartyd26AccessoryConnectionService);
}

uint64_t sub_10069549C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_1006954B4, v0, 0);
}

uint64_t sub_1006954B4()
{
  uint64_t v0;

  objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 128), "registerDelegate:", *(_QWORD *)(*(_QWORD *)(v0 + 16) + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BOOL sub_1006954F0(char *a1, char *a2)
{
  return dword_100E4876C[*a1] == dword_100E4876C[*a2];
}

Swift::Int sub_100695514()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(dword_100E4876C[v1]);
  return Hasher._finalize()();
}

void sub_100695560()
{
  char *v0;

  Hasher._combine(_:)(dword_100E4876C[*v0]);
}

Swift::Int sub_100695594()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(dword_100E4876C[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1006955DC@<X0>(int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100699298(*a1);
  *a2 = result;
  return result;
}

void sub_100695604(_DWORD *a1@<X8>)
{
  char *v1;

  *a1 = dword_100E4876C[*v1];
}

uint64_t sub_10069561C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10069564C + 4 * byte_100E484F0[*v0]))(0x6E776F6E6B6E752ELL, 0xE800000000000000);
}

uint64_t sub_10069564C()
{
  return 0x64656C6961662ELL;
}

uint64_t sub_100695664()
{
  return 0x6465737361702ELL;
}

uint64_t sub_10069567C()
{
  return 0x74756F656D69742ELL;
}

uint64_t sub_100695690()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7428);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7428);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD00000000000001ALL, 0x8000000100E48530);
}

uint64_t sub_100695710(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EF1C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for AccessoryConnectionService.Event(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(v16, a1, v7);
  swift_storeEnumTagMultiPayload(v16, v14, 2);
  v17(v13, a1, v7);
  v18 = sub_10001A9A8(&qword_1010EF1D0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v6, 1, 1, v18);
  swift_beginAccess(v2 + 144, v37, 33, 0);
  sub_1000FFDBC((uint64_t)v6, (uint64_t)v13);
  swift_endAccess(v37);
  if (qword_1010E9E20 != -1)
    swift_once(&qword_1010E9E20, sub_1006951F0);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B7410);
  v20 = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)(v11, a1, v7);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v34 = v2;
    v25 = v24;
    v37[0] = v24;
    v33 = v8;
    *(_DWORD *)v23 = 136446210;
    v26 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v7, v26);
    v35 = sub_100016940(v27, v28, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v7);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Accessory detached: %{public}s", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v29 = v25;
    v2 = v34;
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }

  v30 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v30);
  *(&v32 - 2) = v2;
  *(&v32 - 1) = (uint64_t)v16;
  static Transaction.named<A>(_:with:)("AccessoryConnectionDetached", 27, 2, sub_1006994B8, &v32 - 4, &type metadata for () + 1);
  return sub_100698420((uint64_t)v16);
}

uint64_t sub_100695AB0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void (*v109)(char *, uint64_t);
  void (*v110)(char *, char *, uint64_t);
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t result;
  const char *v115;
  uint64_t v116;
  char v117[8];
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  _BYTE *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  id v139;
  uint64_t v140;
  char *v141;
  char v142;
  __int128 v143;
  __int128 v144;

  v3 = v2;
  v138 = (char *)a1;
  v131 = type metadata accessor for AccessoryConnectionService.Event(0);
  __chkstk_darwin(v131);
  v134 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v125 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v121 - v10;
  __chkstk_darwin(v9);
  v124 = (char *)&v121 - v12;
  v13 = sub_10001A9A8(&qword_1010EF1C8);
  v14 = __chkstk_darwin(v13);
  v123 = (char *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v129 = (char *)&v121 - v16;
  v17 = type metadata accessor for MACAddress(0);
  v137 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v121 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v133 = (char *)&v121 - v22;
  __chkstk_darwin(v21);
  v24 = (char *)&v121 - v23;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v26 = __chkstk_darwin(v25);
  v130 = (uint64_t)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v122 = (uint64_t)&v121 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v121 - v31;
  __chkstk_darwin(v30);
  v34 = (char *)&v121 - v33;
  v139 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(kACCExternalAccessoryAuthStatusKey);
  v140 = v35;
  AnyHashable.init<A>(_:)(&v139, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a2 + 16) && (v36 = sub_100518E58((uint64_t)&v141), (v37 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(a2 + 56) + 32 * v36, (uint64_t)&v143);
  }
  else
  {
    v143 = 0u;
    v144 = 0u;
  }
  sub_1002EAB4C((uint64_t)&v141);
  v136 = v17;
  v127 = v20;
  v126 = v11;
  if (!*((_QWORD *)&v144 + 1))
  {
    sub_100004048((uint64_t)&v143, (uint64_t *)&unk_101103A70);
LABEL_10:
    v41 = 0;
    v42 = 1;
    goto LABEL_11;
  }
  v38 = sub_10001A9A8(&qword_101103A80);
  v39 = sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  if (!swift_dynamicCast(&v139, &v143, v38, v39, 6))
  {
    v17 = v136;
    goto LABEL_10;
  }
  v40 = v139;
  v141 = 0;
  v142 = 1;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)(v139, &v141);

  v41 = (unint64_t)v141;
  v42 = v142;
  v17 = v136;
LABEL_11:
  v139 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(kACCProperties_Connection_AWC_OOBPairingInfo);
  v140 = v43;
  AnyHashable.init<A>(_:)(&v139, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a2 + 16) && (v44 = sub_100518E58((uint64_t)&v141), (v45 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(a2 + 56) + 32 * v44, (uint64_t)&v143);
  }
  else
  {
    v143 = 0u;
    v144 = 0u;
  }
  sub_1002EAB4C((uint64_t)&v141);
  if (!*((_QWORD *)&v144 + 1))
  {
    sub_100004048((uint64_t)&v143, (uint64_t *)&unk_101103A70);
    goto LABEL_20;
  }
  v46 = sub_10001A9A8(&qword_101103A80);
  v47 = sub_10000F4A0(0, &qword_101103A88, NSData_ptr);
  if (!swift_dynamicCast(&v139, &v143, v46, v47, 6))
  {
LABEL_20:
    v52 = 1;
    v51 = v137;
    goto LABEL_21;
  }
  v48 = v139;
  v49 = v139;
  v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
  MACAddress.init(data:type:)(v50);

  v17 = v136;
  v51 = v137;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v137 + 48))(v32, 1, v136) == 1)
  {
    sub_100004048((uint64_t)v32, (uint64_t *)&unk_1010F9890);
    v52 = 1;
  }
  else
  {
    v110 = *(void (**)(char *, char *, uint64_t))(v137 + 32);
    v110(v24, v32, v17);
    v110(v34, v24, v17);
    v51 = v137;
    v52 = 0;
  }
LABEL_21:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v34, v52, 1, v17);
  v53 = v129;
  if ((v42 & 1) != 0)
  {
    v128 = 0;
    v41 = 0;
    goto LABEL_28;
  }
  if ((v41 & 0x8000000000000000) != 0)
  {
    LODWORD(v119) = 0;
    v118 = 3451;
    v117[0] = 2;
    v115 = "Negative value is not representable";
    v116 = 35;
LABEL_54:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v115, v116, 2, "Swift/Integers.swift", 20, v117[0], v118, (_DWORD)v119);
    __break(1u);
    return result;
  }
  if (HIDWORD(v41))
  {
    LODWORD(v119) = 0;
    v118 = 3455;
    v117[0] = 2;
    v115 = "Not enough bits to represent the passed value";
    v116 = 45;
    goto LABEL_54;
  }
  if ((v41 - 1) > 2)
    v128 = 0;
  else
    v128 = v41;
LABEL_28:
  swift_beginAccess(v3 + 144, &v141, 0, 0);
  v54 = *((_QWORD *)v3 + 18);
  if (*(_QWORD *)(v54 + 16))
  {
    swift_bridgeObjectRetain(*((_QWORD *)v3 + 18));
    v55 = sub_100003FB0((uint64_t)v138);
    v121 = v3 + 144;
    if ((v56 & 1) != 0)
    {
      v57 = v55;
      v58 = v6;
      v59 = (char *)v41;
      v60 = *(_QWORD *)(v54 + 56);
      v61 = sub_10001A9A8(&qword_1010EF1D0);
      v62 = v34;
      v63 = v3;
      v64 = *(_QWORD *)(v61 - 8);
      v65 = v60 + *(_QWORD *)(v64 + 72) * v57;
      v41 = (unint64_t)v59;
      v6 = v58;
      sub_10000F9B8(v65, (uint64_t)v53, &qword_1010EF1D0);
      v66 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56);
      v3 = v63;
      v34 = v62;
      v66(v53, 0, 1, v61);
    }
    else
    {
      v68 = sub_10001A9A8(&qword_1010EF1D0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v53, 1, 1, v68);
    }
    swift_bridgeObjectRelease();
    v69 = sub_10001A9A8(&qword_1010EF1D0);
    v70 = *(_QWORD *)(v69 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v53, 1, v69) != 1)
    {
      v72 = *v53;
      v73 = (uint64_t)&v53[*(int *)(v69 + 64)];
      v129 = (char *)v41;
      v41 = (unint64_t)v3;
      v74 = v122;
      sub_1004340EC(v73, v122);
      v71 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
      v75 = (uint64_t)v124;
      v71(v124, v138, v6);
      v76 = (uint64_t)v123;
      v77 = (uint64_t)&v123[*(int *)(v69 + 64)];
      *v123 = v72;
      *(_BYTE *)(v76 + 1) = v128;
      sub_10000F9B8(v74, v77, (uint64_t *)&unk_1010F9890);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v70 + 56))(v76, 0, 1, v69);
      swift_beginAccess(v121, &v143, 33, 0);
      sub_1000FFDBC(v76, v75);
      swift_endAccess(&v143);
      v78 = v74;
      v3 = (char *)v41;
      LODWORD(v41) = (_DWORD)v129;
      sub_100004048(v78, (uint64_t *)&unk_1010F9890);
      goto LABEL_36;
    }
  }
  else
  {
    v67 = sub_10001A9A8(&qword_1010EF1D0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v53, 1, 1, v67);
  }
  sub_100004048((uint64_t)v53, &qword_1010EF1C8);
  v71 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
LABEL_36:
  v79 = v133;
  v80 = sub_10001A9A8(&qword_101103968);
  v81 = v134;
  v82 = (uint64_t)&v134[*(int *)(v80 + 48)];
  v71(v134, v138, v6);
  sub_10000F9B8((uint64_t)v34, v82, (uint64_t *)&unk_1010F9890);
  if (v41 >= 4)
    v83 = 0;
  else
    v83 = v41;
  v81[*(int *)(v80 + 64)] = v83;
  swift_storeEnumTagMultiPayload(v81, v131, 1);
  v84 = v130;
  sub_10000F9B8((uint64_t)v34, v130, (uint64_t *)&unk_1010F9890);
  v86 = v136;
  v85 = v137;
  v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v84, 1, v136);
  v132 = v3;
  if (v87 == 1)
  {
    v88 = v135;
    sub_100004048(v84, (uint64_t *)&unk_1010F9890);
    if (qword_1010E9E20 != -1)
      swift_once(&qword_1010E9E20, sub_1006951F0);
    v89 = type metadata accessor for Logger(0);
    sub_10001A9E8(v89, (uint64_t)qword_1011B7410);
    v90 = v125;
    v91 = ((uint64_t (*)(char *, char *, uint64_t))v71)(v125, v138, v6);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter(v92);
    if (os_log_type_enabled(v92, v93))
    {
      v138 = v34;
      v94 = v90;
      v95 = swift_slowAlloc(22, -1);
      *(_QWORD *)&v143 = swift_slowAlloc(64, -1);
      *(_DWORD *)v95 = 136446466;
      v96 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v97 = dispatch thunk of CustomStringConvertible.description.getter(v6, v96);
      v139 = (id)sub_100016940(v97, v98, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v95 + 4, v95 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v88 + 8))(v94, v6);
      *(_WORD *)(v95 + 12) = 2082;
      __asm { BR              X10 }
    }
    (*(void (**)(char *, uint64_t))(v88 + 8))(v90, v6);

  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 32))(v79, v84, v86);
    if (qword_1010E9E20 != -1)
      swift_once(&qword_1010E9E20, sub_1006951F0);
    v99 = type metadata accessor for Logger(0);
    sub_10001A9E8(v99, (uint64_t)qword_1011B7410);
    v100 = v126;
    v71(v126, v138, v6);
    v101 = v127;
    v102 = (*(uint64_t (**)(char *, char *, uint64_t))(v85 + 16))(v127, v79, v86);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.default.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v138 = v34;
      v105 = swift_slowAlloc(32, -1);
      v131 = swift_slowAlloc(96, -1);
      *(_QWORD *)&v143 = v131;
      *(_DWORD *)v105 = 136446722;
      v106 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v107 = dispatch thunk of CustomStringConvertible.description.getter(v6, v106);
      v139 = (id)sub_100016940(v107, v108, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v105 + 4, v105 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v135 + 8))(v100, v6);
      *(_WORD *)(v105 + 12) = 2082;
      __asm { BR              X10 }
    }

    v109 = *(void (**)(char *, uint64_t))(v85 + 8);
    v109(v101, v86);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v100, v6);
    v109(v79, v86);
  }
  v111 = v132;
  v112 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v112);
  v113 = (uint64_t)v134;
  v119 = v111;
  v120 = v134;
  static Transaction.named<A>(_:with:)("AccessoryConnectionInfoPropertyChanged", 38, 2, sub_1006994B8, v117, &type metadata for () + 1);
  sub_100004048((uint64_t)v34, (uint64_t *)&unk_1010F9890);
  return sub_100698420(v113);
}

uint64_t sub_1006969A8(uint64_t a1)
{
  return sub_1006969B4(a1, qword_1011037B0);
}

uint64_t sub_1006969B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = type metadata accessor for Logger(0);
  sub_1000234D8(v3, a2);
  v4 = sub_10001A9E8(v3, (uint64_t)a2);
  if (qword_1010E9E28 != -1)
    swift_once(&qword_1010E9E28, sub_100695690);
  v5 = sub_10001A9E8(v3, (uint64_t)qword_1011B7428);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v5, v3);
}

_QWORD *sub_100696A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;

  swift_getObjectType(v1);
  sub_100699024(a1, (void (*)(_OWORD *__return_ptr, _BYTE *, _BYTE *))sub_1006994CC);
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    sub_10001A9A8((uint64_t *)&unk_1010F6370);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v5);
  }
  else
  {
    v6 = _swiftEmptyDictionarySingleton;
  }
  v9 = v6;
  swift_bridgeObjectRetain(v4);
  sub_100698C54(v7, 1, &v9);
  swift_bridgeObjectRelease();
  return v9;
}

double sub_100696B0C@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20[2];
  _BYTE v21[40];

  sub_10010F9DC(a1, (uint64_t)v21);
  if ((swift_dynamicCast(v20, v21, &type metadata for AnyHashable, &type metadata for String, 6) & 1) != 0)
  {
    v6 = v20[1];
    *(_QWORD *)a3 = v20[0];
    *(_QWORD *)(a3 + 8) = v6;
    v7 = a2[3];
    v8 = sub_10001AA44(a2, v7);
    *(_QWORD *)(a3 + 40) = v7;
    v9 = sub_100018F08((_QWORD *)(a3 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v9, v8, v7);
  }
  else
  {
    if (qword_1010E9E30 != -1)
      swift_once(&qword_1010E9E30, sub_1006969A8);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011037B0);
    v12 = sub_10010F9DC(a1, (uint64_t)v21);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v20[0] = v16;
      *(_DWORD *)v15 = 136446210;
      v17 = AnyHashable.description.getter();
      v19 = sub_100016940(v17, v18, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      sub_1002EAB4C((uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Dropping non-String metadata key: %{public}s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      sub_1002EAB4C((uint64_t)v21);
    }

    result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t sub_100696D24(uint64_t a1, uint64_t a2, unsigned int a3, _QWORD *a4, char *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, char *, uint64_t);
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  _QWORD *v33;
  char *v34;

  v33 = a4;
  v34 = a5;
  v32 = a3;
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v15 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v31 - v16;
  result = swift_weakLoadStrong(v5 + OBJC_IVAR____TtC12searchpartydP33_8DF307D51982B56654A13C398BADC9D727AccessoryDelegateTrampoline_target);
  if (result)
  {
    v19 = result;
    if (a2)
    {
      UUID.init(uuidString:)(a1, a2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        swift_release();
        return sub_100004048((uint64_t)v10, &qword_1010ED860);
      }
      else
      {
        v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v20(v17, v10, v11);
        v21 = (uint64_t)v34;
        if (v34)
        {
          if (v32 >= 0xA)
            v22 = 10;
          else
            v22 = v32;
          v32 = v22;
          v33 = sub_100696A40((uint64_t)v33);
          v31 = sub_100696A40(v21);
          (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
          v23 = *(unsigned __int8 *)(v12 + 80);
          v24 = (v23 + 24) & ~v23;
          v25 = v24 + v13;
          v34 = v17;
          v26 = ((v25 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
          v27 = swift_allocObject(&unk_101087A48, v26 + 8, v23 | 7);
          v28 = (void (*)(uint64_t, char *, uint64_t))v20;
          v29 = v27;
          v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + v27;
          *(_QWORD *)(v27 + 16) = v19;
          v28(v27 + v24, v15, v11);
          *(_BYTE *)(v29 + v25) = v32;
          *(_QWORD *)(v30 + 8) = v33;
          *(_QWORD *)(v29 + v26) = v31;
          swift_retain();
          dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_101103AE8, v29);
          swift_release();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v34, v11);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
          return swift_release();
        }
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100696FC0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  *(_BYTE *)(v5 + 64) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_100696FE0, 0, 0);
}

uint64_t sub_100696FE0()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;

  v1 = *(_BYTE *)(v0 + 64);
  type metadata accessor for Transaction(0);
  v2 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_BYTE *)(v2 + 32) = v1;
  *(_OWORD *)(v2 + 40) = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to static Transaction.named<A>(_:with:)[1]);
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = sub_100697088;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100697088()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10055AA5C, 0, 0);
}

uint64_t sub_1006970E4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 32) = a5;
  *(_QWORD *)(v6 + 40) = a6;
  *(_BYTE *)(v6 + 64) = a4;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  return swift_task_switch(sub_100697104, 0, 0);
}

uint64_t sub_100697104()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v2 = v0[2];
  v0[6] = sub_10047BEE4(v0[4]);
  v0[7] = sub_10047BEE4(v1);
  return swift_task_switch(sub_100697154, v2, 0);
}

uint64_t sub_100697154()
{
  uint64_t v0;

  sub_1006997E8(*(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 64), *(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100697298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - v13;
  result = swift_weakLoadStrong(v2 + OBJC_IVAR____TtC12searchpartydP33_8DF307D51982B56654A13C398BADC9D727AccessoryDelegateTrampoline_target);
  if (result)
  {
    v16 = result;
    if (a2)
    {
      UUID.init(uuidString:)(a1, a2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        swift_release();
        return sub_100004048((uint64_t)v7, &qword_1010ED860);
      }
      else
      {
        v17 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v17(v14, v7, v8);
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
        v18 = *(unsigned __int8 *)(v9 + 80);
        v19 = (v18 + 24) & ~v18;
        v20 = swift_allocObject(&unk_101087A20, v19 + v10, v18 | 7);
        *(_QWORD *)(v20 + 16) = v16;
        v17((char *)(v20 + v19), v12, v8);
        swift_retain();
        dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_101103AC8, v20);
        swift_release();
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1006974A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1006974B8, 0, 0);
}

uint64_t sub_1006974B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  type metadata accessor for Transaction(0);
  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to static Transaction.named<A>(_:with:)[1]);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_10069754C;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_10069754C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10055AA5C, 0, 0);
}

uint64_t sub_1006975A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return swift_task_switch(sub_1006975BC, a2, 0);
}

uint64_t sub_1006975BC()
{
  uint64_t v0;

  sub_100695710(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100697650(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v24 = a3;
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  v13 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v23 - v14;
  result = swift_weakLoadStrong(v3 + OBJC_IVAR____TtC12searchpartydP33_8DF307D51982B56654A13C398BADC9D727AccessoryDelegateTrampoline_target);
  if (result)
  {
    v17 = result;
    if (a2)
    {
      UUID.init(uuidString:)(a1, a2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
      {
        swift_release();
        return sub_100004048((uint64_t)v8, &qword_1010ED860);
      }
      else
      {
        v18 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
        v18(v15, v8, v9);
        if (v24)
        {
          v24 = sub_100696A40((uint64_t)v24);
          (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
          v19 = *(unsigned __int8 *)(v10 + 80);
          v20 = (v19 + 24) & ~v19;
          v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
          v22 = swift_allocObject(&unk_1010879F8, v21 + 8, v19 | 7);
          *(_QWORD *)(v22 + 16) = v17;
          v18((char *)(v22 + v20), v13, v9);
          *(_QWORD *)(v22 + v21) = v24;
          swift_retain();
          dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_101103A50, v22);
          swift_release();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
          return swift_release();
        }
      }
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1006978A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1006978BC, 0, 0);
}

uint64_t sub_1006978BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 32);
  type metadata accessor for Transaction(0);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to static Transaction.named<A>(_:with:)[1]);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100697960;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100697960()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10055AA5C, 0, 0);
}

uint64_t sub_1006979BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a2;
  return swift_task_switch(sub_1006979D8, 0, 0);
}

uint64_t sub_1006979D8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[2];
  v0[5] = sub_10047BEE4(v0[4]);
  return swift_task_switch(sub_100697A1C, v1, 0);
}

uint64_t sub_100697A1C()
{
  uint64_t v0;

  sub_100695AB0(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for AccessoryDelegateTrampoline()
{
  return objc_opt_self(_TtC12searchpartydP33_8DF307D51982B56654A13C398BADC9D727AccessoryDelegateTrampoline);
}

_QWORD *sub_100697C40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v17 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(a1, a2, v17);
      v18 = a1;
      v19 = a3;
      v20 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = sub_10001A9A8(&qword_101103968);
      v10 = *(int *)(v9 + 48);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for MACAddress(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *((_BYTE *)a1 + *(int *)(v9 + 64)) = *((_BYTE *)a2 + *(int *)(v9 + 64));
      v18 = a1;
      v19 = a3;
      v20 = 1;
    }
    else
    {
      v21 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(a1, a2, v21);
      v22 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
      *((_BYTE *)a1 + v22[12]) = *((_BYTE *)a2 + v22[12]);
      v23 = v22[16];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = type metadata accessor for MACAddress(0);
      v27 = *(_QWORD *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        v28 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *((_BYTE *)a1 + v22[20]) = *((_BYTE *)a2 + v22[20]);
      v18 = a1;
      v19 = a3;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v18, v19, v20);
  }
  return a1;
}

uint64_t sub_100697EA4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 2)
  {
    v6 = type metadata accessor for UUID(0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = a1;
    return v7(v8, v6);
  }
  if ((_DWORD)result == 1)
  {
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
    v5 = *(int *)(sub_10001A9A8(&qword_101103968) + 48);
  }
  else
  {
    if ((_DWORD)result)
      return result;
    v4 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    v5 = *(int *)(sub_10001A9A8((uint64_t *)&unk_101103958) + 64);
  }
  v10 = a1 + v5;
  v11 = type metadata accessor for MACAddress(0);
  v12 = *(_QWORD *)(v11 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
    v8 = v10;
    v6 = v11;
    return v7(v8, v6);
  }
  return result;
}

uint64_t sub_100697FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
    v16 = a1;
    v17 = a3;
    v18 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = sub_10001A9A8(&qword_101103968);
    v9 = *(int *)(v8 + 48);
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    v12 = type metadata accessor for MACAddress(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_BYTE *)(a1 + *(int *)(v8 + 64)) = *(_BYTE *)(a2 + *(int *)(v8 + 64));
    v16 = a1;
    v17 = a3;
    v18 = 1;
  }
  else
  {
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
    v20 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
    *(_BYTE *)(a1 + v20[12]) = *(_BYTE *)(a2 + v20[12]);
    v21 = v20[16];
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    v24 = type metadata accessor for MACAddress(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    *(_BYTE *)(a1 + v20[20]) = *(_BYTE *)(a2 + v20[20]);
    v16 = a1;
    v17 = a3;
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v17, v18);
  return a1;
}

uint64_t sub_1006981D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100698420(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
      v16 = a1;
      v17 = a3;
      v18 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      v8 = sub_10001A9A8(&qword_101103968);
      v9 = *(int *)(v8 + 48);
      v10 = (void *)(a1 + v9);
      v11 = (const void *)(a2 + v9);
      v12 = type metadata accessor for MACAddress(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_BYTE *)(a1 + *(int *)(v8 + 64)) = *(_BYTE *)(a2 + *(int *)(v8 + 64));
      v16 = a1;
      v17 = a3;
      v18 = 1;
    }
    else
    {
      v19 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(a1, a2, v19);
      v20 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
      *(_BYTE *)(a1 + v20[12]) = *(_BYTE *)(a2 + v20[12]);
      v21 = v20[16];
      v22 = (void *)(a1 + v21);
      v23 = (const void *)(a2 + v21);
      v24 = type metadata accessor for MACAddress(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v22, v23, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      *(_BYTE *)(a1 + v20[20]) = *(_BYTE *)(a2 + v20[20]);
      v16 = a1;
      v17 = a3;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_100698420(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessoryConnectionService.Event(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for AccessoryConnectionService.Event(uint64_t a1)
{
  uint64_t result;

  result = qword_1011039E0;
  if (!qword_1011039E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryConnectionService.Event);
  return result;
}

uint64_t sub_100698498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
    v16 = a1;
    v17 = a3;
    v18 = 2;
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = sub_10001A9A8(&qword_101103968);
    v9 = *(int *)(v8 + 48);
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    v12 = type metadata accessor for MACAddress(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_BYTE *)(a1 + *(int *)(v8 + 64)) = *(_BYTE *)(a2 + *(int *)(v8 + 64));
    v16 = a1;
    v17 = a3;
    v18 = 1;
  }
  else
  {
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
    v20 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
    *(_BYTE *)(a1 + v20[12]) = *(_BYTE *)(a2 + v20[12]);
    v21 = v20[16];
    v22 = (void *)(a1 + v21);
    v23 = (const void *)(a2 + v21);
    v24 = type metadata accessor for MACAddress(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    *(_BYTE *)(a1 + v20[20]) = *(_BYTE *)(a2 + v20[20]);
    v16 = a1;
    v17 = a3;
    v18 = 0;
  }
  swift_storeEnumTagMultiPayload(v16, v17, v18);
  return a1;
}

uint64_t sub_1006986D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1 != a2)
  {
    sub_100698420(a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v15 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
      v16 = a1;
      v17 = a3;
      v18 = 2;
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = sub_10001A9A8(&qword_101103968);
      v9 = *(int *)(v8 + 48);
      v10 = (void *)(a1 + v9);
      v11 = (const void *)(a2 + v9);
      v12 = type metadata accessor for MACAddress(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_BYTE *)(a1 + *(int *)(v8 + 64)) = *(_BYTE *)(a2 + *(int *)(v8 + 64));
      v16 = a1;
      v17 = a3;
      v18 = 1;
    }
    else
    {
      v19 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
      v20 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
      *(_BYTE *)(a1 + v20[12]) = *(_BYTE *)(a2 + v20[12]);
      v21 = v20[16];
      v22 = (void *)(a1 + v21);
      v23 = (const void *)(a2 + v21);
      v24 = type metadata accessor for MACAddress(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        v26 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      *(_BYTE *)(a1 + v20[20]) = *(_BYTE *)(a2 + v20[20]);
      v16 = a1;
      v17 = a3;
      v18 = 0;
    }
    swift_storeEnumTagMultiPayload(v16, v17, v18);
  }
  return a1;
}

void sub_100698918(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  _QWORD v9[2];
  uint64_t v10;
  void *v11;
  _BYTE v12[32];
  _QWORD v13[3];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v9[0] = v4;
    v9[1] = &unk_100E48598;
    sub_100375A00(319);
    if (v6 <= 0x3F)
    {
      v10 = *(_QWORD *)(v5 - 8) + 64;
      v7 = v10;
      v11 = &unk_100E485B0;
      swift_getTupleTypeLayout(v12, 0, 4, v9);
      v13[0] = v12;
      swift_getTupleTypeLayout3(v8, v4, v7, &unk_100E485B0);
      v13[1] = v8;
      v13[2] = v4;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v13);
    }
  }
}

uint64_t storeEnumTagSinglePayload for AccessoryConnectionService.AuthStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100698A3C + 4 * byte_100E48501[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100698A70 + 4 * byte_100E484FC[v4]))();
}

uint64_t sub_100698A70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100698A78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100698A80);
  return result;
}

uint64_t sub_100698A8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100698A94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100698A98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100698AA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConnectionService.AuthStatus()
{
  return &type metadata for AccessoryConnectionService.AuthStatus;
}

uint64_t storeEnumTagSinglePayload for AccessoryConnectionService.ConnectionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100698B08 + 4 * byte_100E4850B[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100698B3C + 4 * byte_100E48506[v4]))();
}

uint64_t sub_100698B3C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100698B44(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100698B4CLL);
  return result;
}

uint64_t sub_100698B58(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100698B60);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100698B64(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100698B6C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConnectionService.ConnectionType()
{
  return &type metadata for AccessoryConnectionService.ConnectionType;
}

unint64_t sub_100698B8C()
{
  unint64_t result;

  result = qword_101103A20;
  if (!qword_101103A20)
  {
    result = swift_getWitnessTable(aU_21, &type metadata for AccessoryConnectionService.ConnectionType);
    atomic_store(result, (unint64_t *)&qword_101103A20);
  }
  return result;
}

unint64_t sub_100698BD4()
{
  unint64_t result;

  result = qword_101103A28;
  if (!qword_101103A28)
  {
    result = swift_getWitnessTable(byte_100E486EC, &type metadata for AccessoryConnectionService.AuthStatus);
    atomic_store(result, (unint64_t *)&qword_101103A28);
  }
  return result;
}

uint64_t sub_100698C18(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64((unint64_t *)&unk_101103A38, a2, (uint64_t (*)(uint64_t))type metadata accessor for AccessoryConnectionService, (uint64_t)&unk_100E48740);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100698C54(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  char v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  unint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a1);
  sub_10000F9B8(a1 + 32, (uint64_t)&v49, (uint64_t *)&unk_101103AA0);
  v7 = v49;
  v8 = v50;
  v47 = v49;
  v48 = v50;
  sub_10010F90C(v51, v46);
  v9 = (_QWORD *)*a3;
  v11 = sub_100518DA0(v7, v8);
  v12 = v9[2];
  v13 = (v10 & 1) == 0;
  v14 = v12 + v13;
  if (__OFADD__(v12, v13))
    goto LABEL_23;
  v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_100A9BD54();
      if ((v15 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    v22 = (uint64_t *)(v21[6] + 16 * v11);
    *v22 = v7;
    v22[1] = v8;
    sub_10010F90C(v46, (_OWORD *)(v21[7] + 32 * v11));
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v4 - 1;
    if (!v26)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = a1 + 80; ; i += 48)
    {
      sub_10000F9B8(i, (uint64_t)&v49, (uint64_t *)&unk_101103AA0);
      v28 = v49;
      v29 = v50;
      v47 = v49;
      v48 = v50;
      sub_10010F90C(v51, v46);
      v30 = (_QWORD *)*a3;
      v31 = sub_100518DA0(v28, v29);
      v33 = v30[2];
      v34 = (v32 & 1) == 0;
      v24 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v24)
        break;
      v36 = v32;
      if (v30[3] < v35)
      {
        sub_100A895FC(v35, 1);
        v31 = sub_100518DA0(v28, v29);
        if ((v36 & 1) != (v37 & 1))
          goto LABEL_25;
      }
      if ((v36 & 1) != 0)
        goto LABEL_10;
      v38 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      v39 = (uint64_t *)(v38[6] + 16 * v31);
      *v39 = v28;
      v39[1] = v29;
      sub_10010F90C(v46, (_OWORD *)(v38[7] + 32 * v31));
      v40 = v38[2];
      v24 = __OFADD__(v40, 1);
      v41 = v40 + 1;
      if (v24)
        goto LABEL_24;
      v38[2] = v41;
      if (!--v26)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_100A895FC(v14, a2 & 1);
  v16 = sub_100518DA0(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    v11 = v16;
    if ((v15 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v19);
    v52 = v19;
    swift_errorRetain(v19);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if ((swift_dynamicCast(v20, &v52, v20, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease(v52);
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
LABEL_26:
  v44 = 0;
  v45 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x8000000100EDC680;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)(&v47, &v44, &type metadata for String, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v44, v45, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_100699024(uint64_t a1, void (*a2)(_OWORD *__return_ptr, _BYTE *, _BYTE *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[3];
  _BYTE v25[40];
  _BYTE v26[40];
  _QWORD *v27;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  v27 = _swiftEmptyArrayStorage;
  if (!v7)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v10 | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    sub_10010F9DC(*(_QWORD *)(a1 + 48) + 40 * i, (uint64_t)v25);
    sub_100016A30(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v26);
    a2(v24, v25, v26);
    sub_100004048((uint64_t)v25, (uint64_t *)&unk_101103AB0);
    if (*((_QWORD *)&v24[0] + 1))
    {
      v21 = v24[0];
      v22 = v24[1];
      v23 = v24[2];
      if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
        v27 = sub_1007C9260(0, v27[2] + 1, 1, v27);
      v16 = v27[2];
      v15 = v27[3];
      v17 = v16 + 1;
      if (v16 >= v15 >> 1)
      {
        v20 = sub_1007C9260((_QWORD *)(v15 > 1), v16 + 1, 1, v27);
        v17 = v16 + 1;
        v27 = v20;
      }
      v18 = v27;
      v27[2] = v17;
      v19 = &v18[6 * v16];
      v19[3] = v22;
      v19[4] = v23;
      v19[2] = v21;
      if (v7)
        goto LABEL_4;
    }
    else
    {
      sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010F6380);
      if (v7)
        goto LABEL_4;
    }
LABEL_7:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v8)
      goto LABEL_29;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v9;
    if (!v13)
    {
      v9 = v12 + 1;
      if (v12 + 1 >= v8)
        goto LABEL_29;
      v13 = *(_QWORD *)(v4 + 8 * v9);
      if (!v13)
      {
        v9 = v12 + 2;
        if (v12 + 2 >= v8)
          goto LABEL_29;
        v13 = *(_QWORD *)(v4 + 8 * v9);
        if (!v13)
        {
          v9 = v12 + 3;
          if (v12 + 3 >= v8)
            goto LABEL_29;
          v13 = *(_QWORD *)(v4 + 8 * v9);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v13 - 1) & v13;
  }
  v14 = v12 + 4;
  if (v14 >= v8)
  {
LABEL_29:
    swift_release();
    return;
  }
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v9 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v9 >= v8)
      goto LABEL_29;
    v13 = *(_QWORD *)(v4 + 8 * v9);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_100699298(int a1)
{
  uint64_t result;

  result = 1;
  switch(a1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
      result = 2;
      break;
    case 3:
      result = 3;
      break;
    case 4:
      result = 4;
      break;
    case 5:
      result = 5;
      break;
    case 6:
      result = 6;
      break;
    case 7:
      result = 7;
      break;
    case 8:
      result = 8;
      break;
    case 9:
      result = 9;
      break;
    default:
      if (a1 == 0xFFFF)
        result = 10;
      else
        result = 11;
      break;
  }
  return result;
}

uint64_t sub_100699324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1006993B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v7 = (_QWORD *)swift_task_alloc(dword_101103A4C);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = v4;
  return swift_task_switch(sub_1006978BC, 0, 0);
}

uint64_t sub_100699450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_101103A5C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_1006979D8, 0, 0);
}

uint64_t sub_1006994B8(uint64_t a1)
{
  return sub_10069A564(a1);
}

double sub_1006994CC@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100696B0C(a1, a2, a3);
}

uint64_t sub_1006994D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100699548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_101103AC4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1006974B8, 0, 0);
}

uint64_t sub_1006995C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_101103AD4);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_1006975BC, v3, 0);
}

uint64_t sub_100699624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_1006996C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_BYTE *)(v0 + v4);
  v7 = v0 + v3;
  v8 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + v0 + 8);
  v9 = *(_QWORD *)(v0 + (((v4 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8));
  v10 = swift_task_alloc(dword_101103AE4);
  *(_QWORD *)(v1 + 16) = v10;
  *(_QWORD *)v10 = v1;
  *(_QWORD *)(v10 + 8) = sub_100004C28;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v9;
  *(_BYTE *)(v10 + 64) = v6;
  *(_QWORD *)(v10 + 16) = v5;
  *(_QWORD *)(v10 + 24) = v7;
  return swift_task_switch(sub_100696FE0, 0, 0);
}

uint64_t sub_10069977C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_BYTE *)(v0 + 32);
  v3 = swift_task_alloc(dword_101103AF4);
  v4 = *(_OWORD *)(v0 + 16);
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_BYTE *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v5;
  return swift_task_switch(sub_100697104, 0, 0);
}

uint64_t sub_1006997E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  unsigned int v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  char v98[8];
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  unint64_t v122;
  char v123;
  __int128 v124;
  __int128 v125;

  v113 = a2;
  v114 = a1;
  v4 = sub_10001A9A8(&qword_1010EF1C8);
  __chkstk_darwin(v4);
  v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v115 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v104 = (char *)&v102 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v102 - v13;
  v110 = type metadata accessor for AccessoryConnectionService.Event(0);
  __chkstk_darwin(v110);
  v116 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MACAddress(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v102 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v102 - v23;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v26 = __chkstk_darwin(v25);
  v108 = (uint64_t)&v102 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v102 - v29;
  __chkstk_darwin(v28);
  v118 = (char *)&v102 - v31;
  v120 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(kACCExternalAccessoryAuthStatusKey);
  v121 = v32;
  AnyHashable.init<A>(_:)(&v120, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a3 + 16) && (v33 = sub_100518E58((uint64_t)&v122), (v34 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(a3 + 56) + 32 * v33, (uint64_t)&v124);
  }
  else
  {
    v124 = 0u;
    v125 = 0u;
  }
  sub_1002EAB4C((uint64_t)&v122);
  v119 = v16;
  v103 = v10;
  if (!*((_QWORD *)&v125 + 1))
  {
    sub_100004048((uint64_t)&v124, (uint64_t *)&unk_101103A70);
LABEL_12:
    v38 = 0;
    goto LABEL_13;
  }
  v35 = sub_10001A9A8(&qword_101103A80);
  v36 = sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  if (!swift_dynamicCast(&v120, &v124, v35, v36, 6))
    goto LABEL_12;
  v37 = v120;
  v122 = 0;
  v123 = 1;
  static Int._conditionallyBridgeFromObjectiveC(_:result:)(v120, &v122);

  if ((v123 & 1) != 0)
    goto LABEL_12;
  v38 = v122;
  if ((v122 & 0x8000000000000000) != 0)
  {
    LODWORD(v100) = 0;
    v99 = 3451;
    v98[0] = 2;
    v39 = "Negative value is not representable";
    v40 = 35;
    goto LABEL_41;
  }
  if (HIDWORD(v122))
  {
    LODWORD(v100) = 0;
    v99 = 3455;
    v98[0] = 2;
    v39 = "Not enough bits to represent the passed value";
    v40 = 45;
LABEL_41:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v39, v40, 2, "Swift/Integers.swift", 20, v98[0], v99, v100);
    __break(1u);
    return result;
  }
LABEL_13:
  v120 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(kACCProperties_Connection_AWC_OOBPairingInfo);
  v121 = v41;
  AnyHashable.init<A>(_:)(&v120, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a3 + 16) && (v42 = sub_100518E58((uint64_t)&v122), (v43 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(a3 + 56) + 32 * v42, (uint64_t)&v124);
  }
  else
  {
    v124 = 0u;
    v125 = 0u;
  }
  sub_1002EAB4C((uint64_t)&v122);
  v105 = v22;
  v106 = v19;
  v111 = v6;
  if (*((_QWORD *)&v125 + 1))
  {
    v44 = sub_10001A9A8(&qword_101103A80);
    v45 = sub_10000F4A0(0, &qword_101103A88, NSData_ptr);
    if (swift_dynamicCast(&v120, &v124, v44, v45, 6))
    {
      v46 = v120;
      v47 = v120;
      v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
      MACAddress.init(data:type:)(v48);

      v49 = v119;
      v50 = v7;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v30, 1, v15) != 1)
      {
        v94 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
        v94(v24, v30, v15);
        v94(v118, v24, v15);
        v51 = 0;
        goto LABEL_24;
      }
      sub_100004048((uint64_t)v30, (uint64_t *)&unk_1010F9890);
    }
    else
    {
      v50 = v7;
    }
  }
  else
  {
    v50 = v7;
    sub_100004048((uint64_t)&v124, (uint64_t *)&unk_101103A70);
  }
  v51 = 1;
LABEL_24:
  v52 = (uint64_t)v118;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v119 + 56))(v118, v51, 1, v15);
  if (v38 >= 4)
    v53 = 0;
  else
    v53 = v38;
  v54 = (int *)sub_10001A9A8((uint64_t *)&unk_101103958);
  v55 = v54[12];
  v56 = v54[16];
  v112 = v15;
  v57 = v116;
  v58 = (uint64_t)&v116[v56];
  v59 = v54[20];
  v60 = v114;
  v61 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 16);
  v61(v116, v114, v50);
  v62 = v113;
  v57[v55] = v113;
  sub_10000F9B8(v52, v58, (uint64_t *)&unk_1010F9890);
  v57[v59] = v53;
  v63 = v57;
  v64 = v112;
  swift_storeEnumTagMultiPayload(v63, v110, 0);
  v65 = (uint64_t)v109;
  v110 = v50;
  v107 = (uint64_t (*)(char *, uint64_t, uint64_t))v61;
  v61(v109, v60, v50);
  v66 = sub_10001A9A8(&qword_1010EF1D0);
  v67 = (uint64_t)v111;
  v68 = (uint64_t)&v111[*(int *)(v66 + 64)];
  *v111 = v62;
  v69 = v119;
  v102 = v53;
  *(_BYTE *)(v67 + 1) = v53;
  sub_10000F9B8(v52, v68, (uint64_t *)&unk_1010F9890);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v67, 0, 1, v66);
  swift_beginAccess(v117 + 144, &v122, 33, 0);
  sub_1000FFDBC(v67, v65);
  swift_endAccess(&v122);
  v70 = v108;
  sub_10000F9B8(v52, v108, (uint64_t *)&unk_1010F9890);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v70, 1, v64) == 1)
  {
    sub_100004048(v70, (uint64_t *)&unk_1010F9890);
    if (qword_1010E9E20 != -1)
      swift_once(&qword_1010E9E20, sub_1006951F0);
    v71 = type metadata accessor for Logger(0);
    sub_10001A9E8(v71, (uint64_t)qword_1011B7410);
    v72 = v103;
    v73 = v110;
    v74 = v107(v103, v114, v110);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = swift_slowAlloc(28, -1);
      v122 = swift_slowAlloc(64, -1);
      *(_DWORD *)v77 = 136446722;
      v78 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v73, v78);
      *(_QWORD *)&v124 = sub_100016940(v79, v80, (uint64_t *)&v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, (char *)&v124 + 8, v77 + 4, v77 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v72, v73);
      *(_WORD *)(v77 + 12) = 1024;
      LODWORD(v124) = dword_100E4876C[(char)v113];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, (char *)&v124 + 4, v77 + 14, v77 + 18);
      *(_WORD *)(v77 + 18) = 2082;
      __asm { BR              X10 }
    }
    (*(void (**)(char *, uint64_t))(v115 + 8))(v72, v73);

  }
  else
  {
    v81 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 32))(v105, v70, v64);
    if (qword_1010E9E20 != -1)
      swift_once(&qword_1010E9E20, sub_1006951F0);
    v82 = type metadata accessor for Logger(0);
    sub_10001A9E8(v82, (uint64_t)qword_1011B7410);
    v83 = v104;
    v84 = v110;
    v107(v104, v114, v110);
    v85 = v106;
    v86 = (*(uint64_t (**)(char *, char *, uint64_t))(v69 + 16))(v106, v81, v64);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.default.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = swift_slowAlloc(38, -1);
      v114 = swift_slowAlloc(96, -1);
      v122 = v114;
      *(_DWORD *)v89 = 136446978;
      v90 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v91 = dispatch thunk of CustomStringConvertible.description.getter(v84, v90);
      *(_QWORD *)&v124 = sub_100016940(v91, v92, (uint64_t *)&v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, (char *)&v124 + 8, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v83, v84);
      *(_WORD *)(v89 + 12) = 1024;
      LODWORD(v124) = dword_100E4876C[(char)v113];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, (char *)&v124 + 4, v89 + 14, v89 + 18);
      *(_WORD *)(v89 + 18) = 2082;
      __asm { BR              X10 }
    }

    v93 = *(void (**)(char *, uint64_t))(v69 + 8);
    v93(v85, v64);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v83, v84);
    v93(v81, v64);
  }
  v95 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v95);
  v96 = (uint64_t)v116;
  v100 = v117;
  v101 = v116;
  static Transaction.named<A>(_:with:)("AccessoryConnectionAttached", 27, 2, sub_1006994B8, v98, &type metadata for () + 1);
  sub_100004048((uint64_t)v118, (uint64_t *)&unk_1010F9890);
  return sub_100698420(v96);
}

uint64_t sub_10069A564(uint64_t a1)
{
  uint64_t v1;

  return AsyncStreamProvider.yield(value:transaction:)(*(_QWORD *)(v1 + 24), a1);
}

uint64_t *sub_10069A594(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DateInterval(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = *v13;
    v15 = v13[1];
    sub_10001BBBC(*v13, v15);
    *v12 = v14;
    v12[1] = v15;
  }
  return v4;
}

uint64_t sub_10069A64C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_10001BC14(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_10069A6A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_10001BBBC(*v12, v14);
  *v11 = v13;
  v11[1] = v14;
  return a1;
}

_QWORD *sub_10069A730(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_10001BBBC(*v12, v14);
  v15 = *v11;
  v16 = v11[1];
  *v11 = v13;
  v11[1] = v14;
  sub_10001BC14(v15, v16);
  return a1;
}

_QWORD *sub_10069A7C4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_10069A83C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)((char *)a1 + v10);
  v12 = *(_QWORD *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_10001BC14(v11, v12);
  return a1;
}

uint64_t sub_10069A8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10069A8CC);
}

uint64_t sub_10069A8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t sub_10069A960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10069A96C);
}

uint64_t sub_10069A96C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t type metadata accessor for FamilyCryptoKeysV2(uint64_t a1)
{
  uint64_t result;

  result = qword_101103B68;
  if (!qword_101103B68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FamilyCryptoKeysV2);
  return result;
}

uint64_t sub_10069AA34(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100E487C8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10069AAB4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  __int128 v21;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101103BC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10069B0D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FamilyCryptoKeysV2.CodingKeys, &type metadata for FamilyCryptoKeysV2.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    v13 = type metadata accessor for FamilyCryptoKeysV2(0);
    v14 = (char *)v3 + *(int *)(v13 + 20);
    LOBYTE(v21) = 1;
    v15 = type metadata accessor for DateInterval(0);
    v16 = sub_10069B198(&qword_101103BC8, (const char *)&protocol conformance descriptor for DateInterval);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v21, v5, v15, v16);
    v21 = *(_OWORD *)((char *)v3 + *(int *)(v13 + 24));
    v20 = 2;
    v17 = sub_1002FD29C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for PublicKey, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10069AC48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  char v32;

  v25 = a2;
  v28 = type metadata accessor for DateInterval(0);
  v26 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A9A8(&qword_101103BA8);
  v4 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FamilyCryptoKeysV2(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_10069B0D4();
  v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FamilyCryptoKeysV2.CodingKeys, &type metadata for FamilyCryptoKeysV2.CodingKeys, v12, v10, v11);
  if (v13)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = v7;
  v30 = a1;
  v14 = v4;
  v15 = v27;
  v16 = v28;
  LOBYTE(v31) = 0;
  v17 = v29;
  *(_QWORD *)v9 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v29);
  LOBYTE(v31) = 1;
  v18 = sub_10069B198(&qword_101103BB8, (const char *)&protocol conformance descriptor for DateInterval);
  v19 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v16, &v31, v17, v16, v18);
  v20 = v24;
  (*(void (**)(char *, _QWORD *, uint64_t))(v26 + 32))(&v9[*(int *)(v24 + 20)], v19, v16);
  v32 = 2;
  v21 = sub_1002FD258();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for PublicKey, &v32, v17, &type metadata for PublicKey, v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
  *(_OWORD *)&v9[*(int *)(v20 + 24)] = v31;
  sub_10069B118((uint64_t)v9, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return sub_10069B15C((uint64_t)v9);
}

uint64_t sub_10069AEF4(char *a1, char *a2)
{
  return sub_100513E0C(*a1, *a2);
}

Swift::Int sub_10069AF00()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, qword_100E48980[v1], 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10069AF58(uint64_t a1)
{
  char *v1;

  String.hash(into:)(a1, qword_100E48980[*v1], 0xE100000000000000);
  return swift_bridgeObjectRelease(0xE100000000000000);
}

Swift::Int sub_10069AF84()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, qword_100E48980[v1], 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

unint64_t sub_10069AFD8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10069B37C(*a1);
  *a2 = result;
  return result;
}

void sub_10069B004(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E48980[*v1];
  a1[1] = 0xE100000000000000;
}

uint64_t sub_10069B020()
{
  char *v0;

  return qword_100E48980[*v0];
}

unint64_t sub_10069B038@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10069B37C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10069B05C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069B0D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10069B084(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069B0D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10069B0AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10069AC48(a1, a2);
}

uint64_t sub_10069B0C0(_QWORD *a1)
{
  return sub_10069AAB4(a1);
}

unint64_t sub_10069B0D4()
{
  unint64_t result;

  result = qword_101103BB0;
  if (!qword_101103BB0)
  {
    result = swift_getWitnessTable(byte_100E4892C, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103BB0);
  }
  return result;
}

uint64_t sub_10069B118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FamilyCryptoKeysV2(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10069B15C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FamilyCryptoKeysV2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10069B198(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for DateInterval(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FamilyCryptoKeysV2.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10069B224 + 4 * byte_100E487A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10069B258 + 4 * byte_100E487A0[v4]))();
}

uint64_t sub_10069B258(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10069B260(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10069B268);
  return result;
}

uint64_t sub_10069B274(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10069B27CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10069B280(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10069B288(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCryptoKeysV2.CodingKeys()
{
  return &type metadata for FamilyCryptoKeysV2.CodingKeys;
}

unint64_t sub_10069B2A8()
{
  unint64_t result;

  result = qword_101103BD0;
  if (!qword_101103BD0)
  {
    result = swift_getWitnessTable(byte_100E48904, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103BD0);
  }
  return result;
}

unint64_t sub_10069B2F0()
{
  unint64_t result;

  result = qword_101103BD8;
  if (!qword_101103BD8)
  {
    result = swift_getWitnessTable(aE_32, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103BD8);
  }
  return result;
}

unint64_t sub_10069B338()
{
  unint64_t result;

  result = qword_101103BE0;
  if (!qword_101103BE0)
  {
    result = swift_getWitnessTable(aM_25, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103BE0);
  }
  return result;
}

unint64_t sub_10069B37C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104BB10, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10069B3C4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_10001A9A8(&qword_101103CC8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_10069CC94();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NFCTapRequest.CodingKeys, &type metadata for NFCTapRequest.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v22 = 0;
  v15 = sub_10001A9A8(&qword_101103CB8);
  v16 = sub_10069CCD8((unint64_t *)&qword_101103CD0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    v22 = 1;
    v17 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10069B538(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v7 = sub_10001A9A8(&qword_101103D08);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_10069D4F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NFCTapKeyConnectivityInfo.CodingKeys, &type metadata for NFCTapKeyConnectivityInfo.CodingKeys, v13, v11, v12);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v20, v7, a3);
  if (!v3)
  {
    v18 = a2;
    v19 = 1;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v15 = sub_10029B358((unint64_t *)&qword_1010F19E0, (uint64_t (*)(void))sub_100036A58, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v7, v14, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10069B690(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101103C90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10069C934();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NFCTapRequestContent.CodingKeys, &type metadata for NFCTapRequestContent.CodingKeys, v11, v9, v10);
  LOBYTE(v28) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v28, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for NFCTapRequestContent(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    LOBYTE(v28) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v28, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v28) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v28, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v28, v5);
    v28 = *(_OWORD *)(v3 + v14[8]);
    v27 = 4;
    v24 = sub_10069C978();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v28, &v27, v5, &type metadata for NFCTapKeyConnectivityInfo, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10069B88C()
{
  _BYTE *v0;

  if (*v0)
    return 2036625250;
  else
    return 0xD000000000000010;
}

uint64_t sub_10069B8C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10069C9BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10069B8E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069CC94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10069B910(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069CC94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10069B938@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10069CA98(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10069B964(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10069B3C4(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10069B980()
{
  _BYTE *v0;

  if (*v0)
    return 7562345;
  else
    return 0x7461447472617473;
}

uint64_t sub_10069B9B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10069D050(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10069B9DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069D4F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10069BA04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069D4F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10069BA2C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_10069D13C(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_10069BA58(_QWORD *a1)
{
  uint64_t v1;

  return sub_10069B538(a1, *(_QWORD *)(v1 + 8), *(double *)v1);
}

uint64_t sub_10069BA74()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10069BAA0 + 4 * byte_100E489A0[*v0]))(0x646975756162, 0xE600000000000000);
}

uint64_t sub_10069BAA0()
{
  return 1684628325;
}

uint64_t sub_10069BAB0()
{
  return 0x644970696863;
}

uint64_t sub_10069BAC0()
{
  return 0x754E6C6169726573;
}

uint64_t sub_10069BAE0()
{
  return 0x6269726373627573;
}

uint64_t sub_10069BAFC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10069D2D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10069BB20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069C934();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10069BB48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10069C934();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10069BB70(_QWORD *a1)
{
  return sub_10069B690(a1);
}

id sub_10069BB84()
{
  id result;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;

  result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  v1 = result;
  v2 = (id)MobileGestalt_copy_productType_obj();

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

  }
  else
  {
    v3 = 0;
    v5 = (void *)0xE000000000000000;
  }
  result = (id)MobileGestalt_get_current_device();
  if (!result)
    goto LABEL_11;
  v6 = result;
  v7 = (id)MobileGestalt_copy_productVersion_obj();

  if (v7)
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

  }
  else
  {
    v8 = 0;
    v10 = (void *)0xE000000000000000;
  }
  v11 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v12 = objc_msgSend(v11, "processName");

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14._countAndFlagsBits = 47;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._countAndFlagsBits = 32;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v3;
  v18._object = v5;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v5);
  v19._countAndFlagsBits = 47;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v8;
  v20._object = v10;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v10);
  return (id)v13;
}

void sub_10069BD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v69 = a7;
  v70 = a8;
  v67 = a5;
  v68 = a6;
  v65 = a3;
  v66 = a4;
  v64 = a2;
  v10 = (int *)type metadata accessor for NFCTapRequestContent(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v62 - v14;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
  v72 = v20;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  v22 = v72;
  swift_bridgeObjectRelease();
  v23 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v23)
  {
    v24 = v23;
    v71 = a1;
    v25 = objc_msgSend(v23, "serverFriendlyDescription", v13);

    if (v25)
    {
      v63 = a9;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29 = swift_isUniquelyReferenced_nonNull_native(v22);
      v72 = v22;
      sub_100109D28(v26, v28, 0xD000000000000011, 0x8000000100ECA2C0, v29);
      v30 = v72;
      v31 = swift_bridgeObjectRelease();
      v32 = Date.init()(v31);
      v33 = Date.epoch.getter(v32);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
      v72 = v33;
      v34 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v36 = v35;
      v37 = swift_isUniquelyReferenced_nonNull_native(v30);
      v72 = v30;
      sub_100109D28(v34, v36, 0xD000000000000015, 0x8000000100ECA2E0, v37);
      v38 = v72;
      swift_bridgeObjectRelease();
      v72 = 1;
      v39 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v41 = v40;
      v42 = swift_isUniquelyReferenced_nonNull_native(v38);
      v72 = v38;
      sub_100109D28(v39, v41, 0xD000000000000013, 0x8000000100ECA300, v42);
      v43 = v72;
      swift_bridgeObjectRelease();
      v44 = sub_10069BB84();
      v46 = v45;
      v47 = swift_isUniquelyReferenced_nonNull_native(v43);
      v72 = v43;
      sub_100109D28((uint64_t)v44, v46, 0x6567412D72657355, 0xEA0000000000746ELL, v47);
      swift_bridgeObjectRelease();
      v48 = type metadata accessor for UUID(0);
      v49 = *(_QWORD *)(v48 - 8);
      v50 = v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v15, v71, v48);
      v51 = &v15[v10[5]];
      v52 = v65;
      *(_QWORD *)v51 = v64;
      *((_QWORD *)v51 + 1) = v52;
      v53 = &v15[v10[6]];
      v54 = v67;
      *(_QWORD *)v53 = v66;
      *((_QWORD *)v53 + 1) = v54;
      v55 = &v15[v10[7]];
      v56 = v69;
      *(_QWORD *)v55 = v68;
      *((_QWORD *)v55 + 1) = v56;
      v57 = &v15[v10[8]];
      v58 = v63;
      *(_QWORD *)v57 = v70;
      *((_QWORD *)v57 + 1) = v58;
      v59 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
      JSONEncoder.init()(v60);
      v61 = sub_100006204(&qword_101103BE8, type metadata accessor for NFCTapRequestContent, (uint64_t)&unk_100E48A68);
      dispatch thunk of JSONEncoder.encode<A>(_:)(v15, v10, v61);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v48);
      sub_10069C308((uint64_t)v15);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for NFCTapRequestContent(uint64_t a1)
{
  uint64_t result;

  result = qword_101103C48;
  if (!qword_101103C48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NFCTapRequestContent);
  return result;
}

uint64_t sub_10069C2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NFCTapRequestContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10069C308(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NFCTapRequestContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10069C344(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_10069C424(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_10069C49C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_10069C550(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_10069C650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_10069C6C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (_QWORD *)(a2 + v25);
  *v26 = *v27;
  v28 = v26[1];
  v26[1] = v27[1];
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_10069C790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10069C79C);
}

uint64_t sub_10069C79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10069C81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10069C828);
}

uint64_t sub_10069C828(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10069C8A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E489D8;
    v4[2] = &unk_100E489D8;
    v4[3] = &unk_100E489D8;
    v4[4] = &unk_100E489F0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NFCTapRequest()
{
  return &type metadata for NFCTapRequest;
}

unint64_t sub_10069C934()
{
  unint64_t result;

  result = qword_101103C98;
  if (!qword_101103C98)
  {
    result = swift_getWitnessTable(byte_100E48D2C, &type metadata for NFCTapRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103C98);
  }
  return result;
}

unint64_t sub_10069C978()
{
  unint64_t result;

  result = qword_101103CA0;
  if (!qword_101103CA0)
  {
    result = swift_getWitnessTable(byte_100E48D04, &type metadata for NFCTapKeyConnectivityInfo);
    atomic_store(result, (unint64_t *)&qword_101103CA0);
  }
  return result;
}

uint64_t sub_10069C9BC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EE05E0;
    if (a2 == 0x8000000100EE05E0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EE05E0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 2036625250 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(2036625250, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10069CA98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  char v18;

  v3 = sub_10001A9A8(&qword_101103CA8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_10069CC94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NFCTapRequest.CodingKeys, &type metadata for NFCTapRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_101103CB8);
    v18 = 0;
    v11 = sub_10069CCD8(&qword_101103CC0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v10, &v18, v3, v10, v11);
    v7 = v17[0];
    v18 = 1;
    v13 = sub_100036994();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v17[0];
    v15 = v17[1];
    swift_bridgeObjectRetain(v7);
    sub_10001BBBC(v14, v15);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_10001BC14(v14, v15);
  }
  return v7;
}

unint64_t sub_10069CC94()
{
  unint64_t result;

  result = qword_101103CB0;
  if (!qword_101103CB0)
  {
    result = swift_getWitnessTable(byte_100E48CB4, &type metadata for NFCTapRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103CB0);
  }
  return result;
}

uint64_t sub_10069CCD8(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_101103CB8);
    v8[0] = a2;
    v8[1] = a2;
    result = swift_getWitnessTable(a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NFCTapRequest.CodingKeys()
{
  return &type metadata for NFCTapRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NFCTapRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10069CD98 + 4 * byte_100E489AA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10069CDCC + 4 * byte_100E489A5[v4]))();
}

uint64_t sub_10069CDCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10069CDD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10069CDDCLL);
  return result;
}

uint64_t sub_10069CDE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10069CDF0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10069CDF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10069CDFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NFCTapRequestContent.CodingKeys()
{
  return &type metadata for NFCTapRequestContent.CodingKeys;
}

_QWORD *assignWithCopy for NFCTapKeyConnectivityInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for NFCTapKeyConnectivityInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NFCTapKeyConnectivityInfo()
{
  return &type metadata for NFCTapKeyConnectivityInfo;
}

unint64_t sub_10069CEA4()
{
  unint64_t result;

  result = qword_101103CD8;
  if (!qword_101103CD8)
  {
    result = swift_getWitnessTable(byte_100E48BD4, &type metadata for NFCTapRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103CD8);
  }
  return result;
}

unint64_t sub_10069CEEC()
{
  unint64_t result;

  result = qword_101103CE0;
  if (!qword_101103CE0)
  {
    result = swift_getWitnessTable(byte_100E48C8C, &type metadata for NFCTapRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103CE0);
  }
  return result;
}

unint64_t sub_10069CF34()
{
  unint64_t result;

  result = qword_101103CE8;
  if (!qword_101103CE8)
  {
    result = swift_getWitnessTable(aE_33, &type metadata for NFCTapRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103CE8);
  }
  return result;
}

unint64_t sub_10069CF7C()
{
  unint64_t result;

  result = qword_101103CF0;
  if (!qword_101103CF0)
  {
    result = swift_getWitnessTable(aM_26, &type metadata for NFCTapRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103CF0);
  }
  return result;
}

unint64_t sub_10069CFC4()
{
  unint64_t result;

  result = qword_101103CF8;
  if (!qword_101103CF8)
  {
    result = swift_getWitnessTable(byte_100E48B44, &type metadata for NFCTapRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103CF8);
  }
  return result;
}

unint64_t sub_10069D00C()
{
  unint64_t result;

  result = qword_101103D00;
  if (!qword_101103D00)
  {
    result = swift_getWitnessTable(byte_100E48B6C, &type metadata for NFCTapRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103D00);
  }
  return result;
}

uint64_t sub_10069D050(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461447472617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_QWORD *sub_10069D13C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  char v17;

  v3 = sub_10001A9A8(&qword_101103D18);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_10069D4F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NFCTapKeyConnectivityInfo.CodingKeys, &type metadata for NFCTapKeyConnectivityInfo.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v17 = 0;
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v16 = 1;
    v12 = sub_10029B358((unint64_t *)&qword_1010F4C30, (uint64_t (*)(void))sub_100036994, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v11, &v16, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v15;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_10069D2D0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x646975756162 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646975756162, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v9 = 0xEC0000007265626DLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6269726373627573 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6269726373627573, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_10069D4F0()
{
  unint64_t result;

  result = qword_101103D10;
  if (!qword_101103D10)
  {
    result = swift_getWitnessTable(byte_100E48E34, &type metadata for NFCTapKeyConnectivityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103D10);
  }
  return result;
}

uint64_t _s12searchpartyd13NFCTapRequestV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10069D580 + 4 * byte_100E489B4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10069D5B4 + 4 * byte_100E489AF[v4]))();
}

uint64_t sub_10069D5B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10069D5BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10069D5C4);
  return result;
}

uint64_t sub_10069D5D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10069D5D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10069D5DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10069D5E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NFCTapKeyConnectivityInfo.CodingKeys()
{
  return &type metadata for NFCTapKeyConnectivityInfo.CodingKeys;
}

unint64_t sub_10069D604()
{
  unint64_t result;

  result = qword_101103D20;
  if (!qword_101103D20)
  {
    result = swift_getWitnessTable(byte_100E48E0C, &type metadata for NFCTapKeyConnectivityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103D20);
  }
  return result;
}

unint64_t sub_10069D64C()
{
  unint64_t result;

  result = qword_101103D28;
  if (!qword_101103D28)
  {
    result = swift_getWitnessTable(byte_100E48D7C, &type metadata for NFCTapKeyConnectivityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103D28);
  }
  return result;
}

unint64_t sub_10069D694()
{
  unint64_t result;

  result = qword_101103D30;
  if (!qword_101103D30)
  {
    result = swift_getWitnessTable(byte_100E48DA4, &type metadata for NFCTapKeyConnectivityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101103D30);
  }
  return result;
}

void sub_10069D6D8()
{
  __asm { BR              X8 }
}

void sub_10069D9E0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10069DA0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_1010EA0D8 != -1)
    swift_once(&qword_1010EA0D8, sub_1009A3098);
  v1 = type metadata accessor for URL(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7AA8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v0, v2, v1);
}

uint64_t sub_10069DE6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[36] = a1;
  v2[37] = a2;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[38] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[39] = v4;
  v2[40] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v2[41] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[42] = v6;
  v2[43] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10069DEF4, 0, 0);
}

void sub_10069DEF4()
{
  uint64_t v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void (__cdecl *v41)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "serverFriendlyDescription");

    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 336);
      v7 = *(_QWORD *)(v0 + 344);
      v8 = *(_QWORD *)(v0 + 328);
      v9 = *(_OWORD **)(v0 + 288);
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v12 = v11;

      v13 = swift_isUniquelyReferenced_nonNull_native(v1);
      sub_100109D28(v10, v12, 0xD000000000000011, 0x8000000100ECA2C0, v13);
      v14 = v1;
      v15 = swift_bridgeObjectRelease();
      v16 = Date.init()(v15);
      v17 = Date.epoch.getter(v16);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
      *(_QWORD *)(v0 + 272) = v17;
      v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v20 = v19;
      v21 = swift_isUniquelyReferenced_nonNull_native(v14);
      sub_100109D28(v18, v20, 0xD000000000000015, 0x8000000100ECA2E0, v21);
      v22 = v14;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 280) = 1;
      v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v25 = v24;
      v26 = swift_isUniquelyReferenced_nonNull_native(v22);
      sub_100109D28(v23, v25, 0xD000000000000013, 0x8000000100ECA300, v26);
      v27 = v22;
      swift_bridgeObjectRelease();
      v28 = sub_100AC2EB8();
      v30 = v29;
      v31 = swift_isUniquelyReferenced_nonNull_native(v27);
      sub_100109D28((uint64_t)v28, v30, 0x6567412D72657355, 0xEA0000000000746ELL, v31);
      *(_QWORD *)(v0 + 352) = v27;
      swift_bridgeObjectRelease();
      v32 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      *(_QWORD *)(v0 + 360) = JSONEncoder.init()(v33);
      *(_OWORD *)(v0 + 16) = *v9;
      v34 = v9[4];
      v36 = v9[1];
      v35 = v9[2];
      *(_OWORD *)(v0 + 64) = v9[3];
      *(_OWORD *)(v0 + 80) = v34;
      *(_OWORD *)(v0 + 32) = v36;
      *(_OWORD *)(v0 + 48) = v35;
      v37 = sub_10069EDAC();
      v38 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 16, &type metadata for AirPodsUnpairData, v37);
      *(_QWORD *)(v0 + 368) = v38;
      *(_QWORD *)(v0 + 376) = v39;
      sub_10001BBBC(v38, v39);
      v41 = (void (__cdecl *)())((char *)&dword_101115298 + dword_101115298);
      v40 = (_QWORD *)swift_task_alloc(unk_10111529C);
      *(_QWORD *)(v0 + 384) = v40;
      *v40 = v0;
      v40[1] = sub_10069E36C;
      v41();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10069E36C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 384);
  *(_QWORD *)(v3 + 392) = a1;
  *(_QWORD *)(v3 + 400) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10069E3C8, 0, 0);
}

uint64_t sub_10069E3C8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[49];
  v1 = v0[50];
  v4 = v0[46];
  v3 = v0[47];
  v6 = v0[39];
  v5 = v0[40];
  v7 = v0[38];
  v0[32] = v2;
  v0[33] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v9 = v0[32];
  v8 = v0[33];
  v0[51] = v9;
  v0[52] = v8;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v9, v8);
  v12 = v11;
  v0[53] = v10;
  v0[54] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115290 + dword_101115290;
  v13 = (_QWORD *)swift_task_alloc(unk_101115294);
  v0[55] = v13;
  *v13 = v0;
  v13[1] = sub_10069E4EC;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[37]);
}

uint64_t sub_10069E4EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 440);
  *(_QWORD *)(*(_QWORD *)v2 + 448) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10069E984;
  }
  else
  {
    v7 = v4[53];
    v8 = v4[54];
    v4[57] = a1;
    sub_10001BC14(v7, v8);
    v6 = sub_10069E568;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10069E568()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char *v50;
  int64_t v51;
  _BYTE *v52;
  _BYTE *v53;

  v2 = v0[56];
  v1 = v0[57];
  v3 = (_BYTE *)v0[44];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v53 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v53);
  if (v2)
    return swift_bridgeObjectRelease();
  v7 = v0[51];
  v6 = v0[52];
  v49 = v0;
  v8 = v53;
  swift_bridgeObjectRelease();
  v9 = sub_10001BC14(v7, v6);
  v10 = static os_log_type_t.debug.getter(v9);
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7DF0, "Unpair header:", 14, 2, _swiftEmptyArrayStorage);
  v50 = v8 + 64;
  v11 = -1;
  v12 = -1 << v8[32];
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *((_QWORD *)v8 + 8);
  v51 = (unint64_t)(63 - v12) >> 6;
  v52 = v8;
  swift_bridgeObjectRetain(v8);
  v14 = 0;
  v8 = &type metadata for String;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    v29 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v51)
      goto LABEL_24;
    v30 = *(_QWORD *)&v50[8 * v29];
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v51)
        goto LABEL_24;
      v30 = *(_QWORD *)&v50[8 * v14];
      if (!v30)
      {
        v14 = v29 + 2;
        if (v29 + 2 >= v51)
          goto LABEL_24;
        v30 = *(_QWORD *)&v50[8 * v14];
        if (!v30)
          break;
      }
    }
LABEL_23:
    v13 = (v30 - 1) & v30;
    v16 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_8:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*((_QWORD *)v52 + 6) + v17);
    v10 = *v18;
    v19 = v18[1];
    v20 = (uint64_t *)(*((_QWORD *)v52 + 7) + v17);
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = qword_1011B7DF0;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v27 = swift_allocObject(v26, 112, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    v28 = sub_10001AA00();
    *(_QWORD *)(v27 + 32) = v10;
    *(_QWORD *)(v27 + 40) = v19;
    *(_QWORD *)(v27 + 96) = &type metadata for String;
    *(_QWORD *)(v27 + 104) = v28;
    *(_QWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 72) = v21;
    *(_QWORD *)(v27 + 80) = v22;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@: %@", 6, 2, v27);
    swift_bridgeObjectRelease();
  }
  v31 = v29 + 3;
  if (v31 < v51)
  {
    v30 = *(_QWORD *)&v50[8 * v31];
    if (!v30)
    {
      while (1)
      {
        v14 = v31 + 1;
        if (__OFADD__(v31, 1))
          goto LABEL_26;
        if (v14 >= v51)
          goto LABEL_24;
        v30 = *(_QWORD *)&v50[8 * v14];
        ++v31;
        if (v30)
          goto LABEL_23;
      }
    }
    v14 = v31;
    goto LABEL_23;
  }
LABEL_24:
  v33 = v49[46];
  v32 = v49[47];
  v34 = (_OWORD *)v49[36];
  v35 = swift_release();
  v36 = static os_log_type_t.debug.getter(v35);
  v37 = qword_1011B7DF0;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v39 = swift_allocObject(v38, 72, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
  *((_OWORD *)v49 + 11) = *v34;
  v40 = v34[4];
  v42 = v34[1];
  v41 = v34[2];
  *((_OWORD *)v49 + 14) = v34[3];
  *((_OWORD *)v49 + 15) = v40;
  *((_OWORD *)v49 + 12) = v42;
  *((_OWORD *)v49 + 13) = v41;
  v43 = String.init<A>(describing:)(v49 + 22, &type metadata for AirPodsUnpairData);
  v45 = v44;
  *(_QWORD *)(v39 + 56) = &type metadata for String;
  *(_QWORD *)(v39 + 64) = sub_10001AA00();
  *(_QWORD *)(v39 + 32) = v43;
  *(_QWORD *)(v39 + 40) = v45;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Unpair body %@", 14, 2, v39);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001BC14(v33, v32);
  swift_release();
  v47 = v49[46];
  v46 = v49[47];
  v48 = v49[40];
  swift_task_dealloc(v49[43]);
  swift_task_dealloc(v48);
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v49[1])(v52, v47, v46);
}

uint64_t sub_10069E984()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;

  v1 = v0[51];
  v2 = v0[52];
  sub_10001BC14(v0[53], v0[54]);
  v3 = sub_10001BC14(v1, v2);
  v4 = (void *)static os_log_type_t.error.getter(v3);
  v5 = (uint64_t)&qword_1010EA000;
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v6 = v0[56];
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7DF0, "Failed to generate BAA certs", 28, 2, _swiftEmptyArrayStorage);
  v7 = swift_errorRelease(v6);
  v48 = v0;
  v8 = v0[44];
  v9 = static os_log_type_t.debug.getter(v7);
  if (*(_QWORD *)(v5 + 784) != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7DF0, "Unpair header:", 14, 2, _swiftEmptyArrayStorage);
  v49 = v8 + 64;
  v10 = -1;
  v11 = -1 << *(_BYTE *)(v8 + 32);
  if (-v11 < 64)
    v10 = ~(-1 << -(char)v11);
  v12 = v10 & *(_QWORD *)(v8 + 64);
  v50 = (unint64_t)(63 - v11) >> 6;
  v51 = v8;
  swift_bridgeObjectRetain(v8);
  v5 = 0;
  v4 = &type metadata for String;
  while (1)
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v5 << 6);
      goto LABEL_8;
    }
    v27 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v50)
      goto LABEL_24;
    v28 = *(_QWORD *)(v49 + 8 * v27);
    ++v5;
    if (!v28)
    {
      v5 = v27 + 1;
      if (v27 + 1 >= v50)
        goto LABEL_24;
      v28 = *(_QWORD *)(v49 + 8 * v5);
      if (!v28)
      {
        v5 = v27 + 2;
        if (v27 + 2 >= v50)
          goto LABEL_24;
        v28 = *(_QWORD *)(v49 + 8 * v5);
        if (!v28)
          break;
      }
    }
LABEL_23:
    v12 = (v28 - 1) & v28;
    v14 = __clz(__rbit64(v28)) + (v5 << 6);
LABEL_8:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v51 + 48) + v15);
    v17 = *v16;
    v18 = v16[1];
    v19 = (_QWORD *)(*(_QWORD *)(v51 + 56) + v15);
    v0 = (_QWORD *)*v19;
    v20 = v19[1];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
    v22 = static os_log_type_t.debug.getter(v21);
    v23 = qword_1011B7DF0;
    v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v25 = swift_allocObject(v24, 112, 7);
    *(_OWORD *)(v25 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v25 + 56) = &type metadata for String;
    v26 = sub_10001AA00();
    *(_QWORD *)(v25 + 32) = v17;
    *(_QWORD *)(v25 + 40) = v18;
    *(_QWORD *)(v25 + 96) = &type metadata for String;
    *(_QWORD *)(v25 + 104) = v26;
    *(_QWORD *)(v25 + 64) = v26;
    *(_QWORD *)(v25 + 72) = v0;
    *(_QWORD *)(v25 + 80) = v20;
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "%@: %@", 6, 2, v25);
    swift_bridgeObjectRelease();
  }
  v29 = v27 + 3;
  if (v29 < v50)
  {
    v28 = *(_QWORD *)(v49 + 8 * v29);
    if (!v28)
    {
      while (1)
      {
        v5 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_26;
        if (v5 >= v50)
          goto LABEL_24;
        v28 = *(_QWORD *)(v49 + 8 * v5);
        ++v29;
        if (v28)
          goto LABEL_23;
      }
    }
    v5 = v29;
    goto LABEL_23;
  }
LABEL_24:
  v31 = v48[46];
  v30 = v48[47];
  v32 = (_OWORD *)v48[36];
  v33 = swift_release();
  v34 = static os_log_type_t.debug.getter(v33);
  v35 = qword_1011B7DF0;
  v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
  *((_OWORD *)v48 + 11) = *v32;
  v38 = v32[4];
  v40 = v32[1];
  v39 = v32[2];
  *((_OWORD *)v48 + 14) = v32[3];
  *((_OWORD *)v48 + 15) = v38;
  *((_OWORD *)v48 + 12) = v40;
  *((_OWORD *)v48 + 13) = v39;
  v41 = String.init<A>(describing:)(v48 + 22, &type metadata for AirPodsUnpairData);
  v43 = v42;
  *(_QWORD *)(v37 + 56) = &type metadata for String;
  *(_QWORD *)(v37 + 64) = sub_10001AA00();
  *(_QWORD *)(v37 + 32) = v41;
  *(_QWORD *)(v37 + 40) = v43;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Unpair body %@", 14, 2, v37);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001BC14(v31, v30);
  swift_release();
  v45 = v48[46];
  v44 = v48[47];
  v46 = v48[40];
  swift_task_dealloc(v48[43]);
  swift_task_dealloc(v46);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v48[1])(v51, v45, v44);
}

unint64_t sub_10069EDAC()
{
  unint64_t result;

  result = qword_101103D40;
  if (!qword_101103D40)
  {
    result = swift_getWitnessTable(asc_100E4B614, &type metadata for AirPodsUnpairData);
    atomic_store(result, &qword_101103D40);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsUnpairRequest()
{
  return &type metadata for AirPodsUnpairRequest;
}

void sub_10069EE00(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int16 v38;
  __int16 v39;
  char v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[6];
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v6 = type metadata accessor for ObservedAdvertisement(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a1, "advertisement");
  v11 = objc_msgSend(v10, "address");

  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  sub_1002F75CC(v12, v14);
  v47 = v9;
  v48 = v6;
  v46 = a2;
  v45[4] = v7;
  v45[5] = a3;
  v16 = v49;
  v15 = v50;
  v17 = objc_msgSend(a1, "advertisement");
  v18 = objc_msgSend(v17, "address");

  v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = objc_msgSend(a1, "advertisement");
  v23 = objc_msgSend(v22, "advertisementData");

  v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v49 = v19;
  v50 = v21;
  sub_10001BBBC(v19, v21);
  sub_10001BBBC(v24, v26);
  sub_10078E27C(v24, v26);
  sub_10001BC14(v24, v26);
  sub_10001BC14(v24, v26);
  sub_10001BC14(v19, v21);
  v28 = v49;
  v27 = v50;
  sub_10001BBBC(v49, v50);
  v45[0] = v28;
  v45[1] = v27;
  sub_1002F7394(v28, v27);
  v45[2] = v15;
  v45[3] = v16;
  v30 = v49;
  v29 = v50;
  v31 = v47;
  *((_QWORD *)v47 + 2) = v49;
  *((_QWORD *)v31 + 3) = v29;
  sub_10012C644(v30, v29);
  v32 = objc_msgSend(a1, "advertisement");
  LOBYTE(v19) = objc_msgSend(v32, "status");

  v31[32] = v19;
  v33 = objc_msgSend(a1, "advertisement");
  v34 = objc_msgSend(v33, "reserved");

  v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  sub_1000FC3EC(v35, v37);
  v39 = v38;
  sub_10001BC14(v35, v37);
  if ((v39 & 0x100) != 0)
    v40 = 0;
  else
    v40 = v39;
  v31[33] = v40;
  v41 = objc_msgSend(a1, "advertisement");
  v42 = objc_msgSend(v41, "reserved");

  static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v44 = v43;

  __asm { BR              X10 }
}

uint64_t sub_10069F5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7440);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Registering leech scanner.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  type metadata accessor for Transaction(0);
  static Transaction.asyncTask(name:block:)("LeechScanner.EvaluateState", 26, 2, &unk_101103D70, 0);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v4, 1, 1, v10);
  v11 = (_QWORD *)swift_allocObject(&unk_1010880F8, 40, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v1;
  swift_retain();
  sub_100028774((uint64_t)v4, (uint64_t)&unk_101103D80, (uint64_t)v11);
  swift_release();
  return sub_100004048((uint64_t)v4, &qword_1010F46C0);
}

uint64_t sub_10069F77C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[20] = v0;
  v2 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10069F7DC, 0, 0);
}

uint64_t sub_10069F7DC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if ((**(_BYTE **)(v0 + 160) & 1) != 0)
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
      v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
      *(_QWORD *)(v0 + 192) = v2;
      *v2 = v0;
      v2[1] = sub_10069F8FC;
      return v3();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10069F8FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10069F958, 0, 0);
}

uint64_t sub_10069F958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_10069FAB8, *(_QWORD *)(v0 + 200), 0);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7440);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Leech scanner cannot update. Missing BeaconKeyService.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_100033220();
  v9 = swift_allocError(&type metadata for DaemonError, v8, 0, 0);
  *v10 = 0xD000000000000010;
  v10[1] = 0x8000000100EE0740;
  swift_willThrow(v9);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10069FAB8()
{
  _QWORD *v0;
  uint64_t result;

  result = *(_QWORD *)(v0[25] + 128);
  if (result)
  {
    v0[26] = sub_10075428C(result);
    v0[27] = 0;
    return swift_task_switch(sub_10069FB20, 0, 0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10069FB20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t My;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 168);
    v3 = *(_QWORD *)(v0 + 176);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = enum case for Feature.FindMy.spPlaySoundAll(_:);
    v7 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v8 = *(_QWORD *)(v0 + 184);
      sub_10005972C(v5, v8, type metadata accessor for KeyGenerationBeaconInfo);
      v9 = *(unsigned __int8 *)(v8 + *(int *)(v4 + 28)) - 1;
      v10 = *(_QWORD *)(v0 + 184);
      if (v9 < 2)
        break;
      My = type metadata accessor for Feature.FindMy(0);
      *(_QWORD *)(v0 + 120) = My;
      *(_QWORD *)(v0 + 128) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      v12 = sub_100018F08((_QWORD *)(v0 + 96));
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(My - 8) + 104))(v12, v6, My);
      LOBYTE(My) = isFeatureEnabled(_:)(v0 + 96);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
      sub_1000126B0(v10, type metadata accessor for KeyGenerationBeaconInfo);
      if ((My & 1) != 0)
        goto LABEL_9;
      v5 += v7;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 208), 2);
        v13 = 0;
        goto LABEL_10;
      }
    }
    sub_1000126B0(*(_QWORD *)(v0 + 184), type metadata accessor for KeyGenerationBeaconInfo);
LABEL_9:
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 208), 2);
    v13 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = 0;
  }
LABEL_10:
  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v13);
}

uint64_t sub_10069FCAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10069FCEC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7440);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7440);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100EE0720);
}

uint64_t sub_10069FD6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_10001A9A8(&qword_1010EBAC8);
  *(_QWORD *)(v0 + 256) = v1;
  *(_QWORD *)(v0 + 264) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10069FDC8, 0, 0);
}

uint64_t sub_10069FDC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t (__cdecl *v8)();

  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7440);
  *(_QWORD *)(v0 + 272) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, ">> Update leech scanner state.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v8 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v7 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 280) = v7;
    *v7 = v0;
    v7[1] = sub_10069FF6C;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10069FF6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10069FFC8, 0, 0);
}

uint64_t sub_10069FFC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t (__cdecl *v8)();

  v1 = *(_QWORD *)(v0 + 288);
  v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v8 = (uint64_t (__cdecl *)())((char *)&dword_1010EBAE8 + dword_1010EBAE8);
      v4 = (_QWORD *)swift_task_alloc(unk_1010EBAEC);
      *(_QWORD *)(v0 + 296) = v4;
      *v4 = v0;
      v4[1] = sub_1006A0110;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v5 = Logger.logObject.getter(v2);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Leech scanner cannot update. Missing BeaconKeyService.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1006A0110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A016C, 0, 0);
}

uint64_t sub_1006A016C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSString v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  v1 = *(_QWORD *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 304);
    swift_retain();
    return swift_task_switch(sub_1006A067C, v2, 0);
  }
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  sub_100ACDAE0(0xD000000000000019, 0x8000000100EE0760, (void *)qword_1011B7C08);
  if ((v5 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = v4;
    if (v4 < 0)
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    v7 = Logger.logObject.getter(v4);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v9 = 134217984;
      *(_QWORD *)(v0 + 248) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Leech state override: %llu.", v9, 0xCu);
      swift_slowDealloc(v9, -1, -1);
    }

  }
  v10 = Logger.logObject.getter(v4);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    *(_QWORD *)(v0 + 240) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = String._bridgeToObjectiveC()();
  v14 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = v13;
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v15, 0.0);
  dispatch thunk of DarwinNotificationHelper.setValue(value:)(v6);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  swift_release();

  v16 = swift_release();
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "<< Update leech scanner state.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A067C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[38];
  v2 = sub_100006204((unint64_t *)&qword_1010EBEA8, type metadata accessor for FinderStateObserver, (uint64_t)aE_59);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[39] = v3;
  *v3 = v0;
  v3[1] = sub_1006A0720;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[33], v0[38], v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033604, v1, v0[32]);
}

uint64_t sub_1006A0720()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  swift_release();
  return swift_task_switch(sub_1006A077C, 0, 0);
}

uint64_t sub_1006A077C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSString v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = type metadata accessor for FinderStateInfo(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) != 1)
  {
    v9 = (_QWORD *)swift_task_alloc(dword_101103D4C);
    *(_QWORD *)(v0 + 320) = v9;
    *v9 = v0;
    v9[1] = sub_1006A0CC0;
    return sub_10069F77C();
  }
  sub_100004048(v1, &qword_1010EBAC8);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  sub_100ACDAE0(0xD000000000000019, 0x8000000100EE0760, (void *)qword_1011B7C08);
  if ((v4 & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v5 = v3;
    if (v3 < 0)
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    v6 = Logger.logObject.getter(v3);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v8 = 134217984;
      *(_QWORD *)(v0 + 248) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Leech state override: %llu.", v8, 0xCu);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  v11 = Logger.logObject.getter(v3);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134217984;
    *(_QWORD *)(v0 + 240) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = String._bridgeToObjectiveC()();
  v15 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v16 = v14;
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v16, 0.0);
  dispatch thunk of DarwinNotificationHelper.setValue(value:)(v5);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  swift_release();

  v17 = swift_release();
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "<< Update leech scanner state.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A0CC0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 320);
  *(_QWORD *)(*v2 + 328) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1006A127C;
  }
  else
  {
    *(_BYTE *)(v4 + 336) = a1 & 1;
    v6 = sub_1006A0D38;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1006A0D38()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSString v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v28;

  v1 = *(_BYTE *)(v0 + 336);
  sub_1000126B0(*(_QWORD *)(v0 + 264), type metadata accessor for FinderStateInfo);
  v2 = *(_QWORD *)(v0 + 328);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  sub_100ACDAE0(0xD000000000000019, 0x8000000100EE0760, (void *)qword_1011B7C08);
  if ((v4 & 1) == 0)
  {
    v5 = v3;
    if (v3 < 0)
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    v6 = Logger.logObject.getter(v3);
    v7 = static os_log_type_t.default.getter(v6);
    if (!os_log_type_enabled(v6, v7))
      goto LABEL_13;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)(v0 + 248) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Leech state override: %llu.", v8, 0xCu);
    goto LABEL_10;
  }
  if ((v1 & 1) != 0)
  {
    v6 = Logger.logObject.getter(v3);
    v9 = static os_log_type_t.default.getter(v6);
    if (!os_log_type_enabled(v6, v9))
    {
      v5 = 1;
      goto LABEL_13;
    }
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v9, "Enabling leech scanner.", v8, 2u);
    v5 = 1;
LABEL_10:
    swift_slowDealloc(v8, -1, -1);
LABEL_13:

    goto LABEL_14;
  }
  v5 = 0;
LABEL_14:
  v10 = Logger.logObject.getter(v3);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134217984;
    *(_QWORD *)(v0 + 240) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 4, v12 + 12);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = String._bridgeToObjectiveC()();
  v14 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = v13;
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v15, 0.0);
  dispatch thunk of DarwinNotificationHelper.setValue(value:)(v5);
  if (v2)
  {
    swift_release();

    swift_release();
    swift_errorRetain(v2);
    v17 = swift_errorRetain(v2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v28 = v21;
      *(_DWORD *)v20 = 136446210;
      swift_getErrorValue(v2, v0 + 224, v0 + 200);
      v22 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
      *(_QWORD *)(v0 + 232) = sub_100016940(v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to post com.apple.SPOwner.SPCBLeechScanner. error: %{public}s.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      v16 = swift_errorRelease(v2);
    }
    else
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      swift_errorRelease(v2);

    }
  }
  else
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    swift_release();

    v16 = swift_release();
  }
  v24 = Logger.logObject.getter(v16);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "<< Update leech scanner state.", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A127C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 264);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for FinderStateInfo);
  v2 = *(_QWORD *)(v0 + 328);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_getErrorValue(v2, v0 + 224, v0 + 200);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
    *(_QWORD *)(v0 + 232) = sub_100016940(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to post com.apple.SPOwner.SPCBLeechScanner. error: %{public}s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    v10 = swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "<< Update leech scanner state.", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  swift_release();
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A14C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101103D58);
  v0[16] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[17] = v2;
  v0[18] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101103D60);
  v0[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v0[20] = v4;
  v0[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101103D68);
  v0[22] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[23] = v6;
  v0[24] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006A157C, 0, 0);
}

uint64_t sub_1006A157C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 200) = v2;
    *v2 = v0;
    v2[1] = sub_1006A1668;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006A1668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A16C4, 0, 0);
}

uint64_t sub_1006A16C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7440);
    *(_QWORD *)(v0 + 216) = v3;
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Key service updates registered to advertisement cache observation storing.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 144);
    v9 = *(_QWORD *)(v0 + 152);
    v12 = *(_QWORD *)(v0 + 128);
    v11 = *(_QWORD *)(v0 + 136);

    (*(void (**)(uint64_t, _QWORD, uint64_t))(v11 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v12);
    AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for BeaconKeyService.KeyStreamChange, v10, sub_1006AD8D4, v1, &type metadata for BeaconKeyService.KeyStreamChange);
    AsyncStream.makeAsyncIterator()(v9);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v13 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 224) = v13;
    *v13 = v0;
    v13[1] = sub_1006A1960;
    return AsyncStream.Iterator.next(isolation:)(v0 + 120, 0, 0, *(_QWORD *)(v0 + 176));
  }
  else
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7440);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Advertisement cache observation storing cannot register. Missing BeaconKeyService.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A1960()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_1006A19B4, 0, 0);
}

uint64_t sub_1006A19B4()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(v0 + 120))
  {
    v1 = swift_bridgeObjectRelease();
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Key service updated. Updating leech scanner.", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("LeechScanner.EvaluateState", 26, 2, &unk_101103D70, 0);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 224) = v5;
    *v5 = v0;
    v5[1] = sub_1006A1960;
    return AsyncStream.Iterator.next(isolation:)(v0 + 120, 0, 0, *(_QWORD *)(v0 + 176));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    swift_release();
    v7 = *(_QWORD *)(v0 + 168);
    v8 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A1B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[15] = a4;
  v5 = *(_QWORD *)(type metadata accessor for DiscoveredObject(0) - 8);
  v4[16] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v4[17] = v6;
  v4[18] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_101103D88);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101103D90);
  v4[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[21] = v9;
  v4[22] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101103D98);
  v4[23] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[24] = v11;
  v4[25] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101103DA0);
  v4[26] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[27] = v13;
  v4[28] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006A1C24, 0, 0);
}

uint64_t sub_1006A1C24()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD70 + dword_1010EBD70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD74);
    *(_QWORD *)(v0 + 232) = v2;
    *v2 = v0;
    v2[1] = sub_1006A1D10;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006A1D10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A1D6C, 0, 0);
}

uint64_t sub_1006A1D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7440);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Leech scanner registered for stream.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }
    v8 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 200);
    v10 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 168);

    v13 = sub_10001A9A8(&qword_1010EF338);
    *(_QWORD *)(v0 + 248) = v13;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 104))(v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v11);
    AsyncStream.init(_:bufferingPolicy:_:)(v13, v10, sub_1006AD974, v1, v13);
    AsyncStream.makeAsyncIterator()(v9);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 256) = v14;
    *v14 = v0;
    v14[1] = sub_1006A2020;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 152), 0, 0, *(_QWORD *)(v0 + 208));
  }
  else
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7440);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Leech scanner cannot register. Missing LeechScanningService.", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = *(_QWORD *)(v0 + 200);
    v22 = *(_QWORD *)(v0 + 176);
    v24 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A2020()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return swift_task_switch(sub_1006A2074, 0, 0);
}

uint64_t sub_1006A2074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    swift_release();
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(_QWORD *)(v0 + 176);
    v6 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 128);
    swift_release();
    v12 = v2 + *(int *)(v1 + 48);
    type metadata accessor for Transaction(0);
    sub_1000126EC(v12, v8, type metadata accessor for DiscoveredObject);
    v13 = *(unsigned __int8 *)(v11 + 80);
    v14 = (v13 + 24) & ~v13;
    v15 = swift_allocObject(&unk_101088120, v14 + v9, v13 | 7);
    *(_QWORD *)(v15 + 16) = v10;
    sub_1000126EC(v8, v15 + v14, type metadata accessor for DiscoveredObject);
    swift_retain();
    static Transaction.asyncTask(name:block:)("LeechScanner.ObjectDiscovery", 28, 2, &unk_101103DB0, v15);
    swift_release();
    v16 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 256) = v16;
    *v16 = v0;
    v16[1] = sub_1006A2020;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 152), 0, 0, *(_QWORD *)(v0 + 208));
  }
}

uint64_t sub_1006A222C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2[19] = a1;
  v2[20] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ObservedAdvertisement(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v3);
  v2[22] = swift_task_alloc(v3);
  v2[23] = swift_task_alloc(v3);
  v2[24] = swift_task_alloc(v3);
  v2[25] = swift_task_alloc(v3);
  v4 = type metadata accessor for DiscoveredObject(0);
  v2[26] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[27] = swift_task_alloc(v5);
  v2[28] = swift_task_alloc(v5);
  v2[29] = swift_task_alloc(v5);
  v6 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v2[30] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[31] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v8);
  v2[33] = swift_task_alloc(v8);
  v2[34] = swift_task_alloc(v8);
  v2[35] = swift_task_alloc(v8);
  v2[36] = swift_task_alloc(v8);
  v2[37] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1011091A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v9);
  v2[39] = swift_task_alloc(v9);
  v2[40] = swift_task_alloc(v9);
  return swift_task_switch(sub_1006A23A0, 0, 0);
}

uint64_t sub_1006A23A0()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = (uint64_t *)(v0[20] + *(int *)(v0[26] + 36));
  v3 = *v1;
  v2 = v1[1];
  v4 = (_QWORD *)swift_task_alloc(dword_101103DBC);
  v0[41] = v4;
  *v4 = v0;
  v4[1] = sub_1006A2414;
  return sub_1006A3F94(v0[40], v3, v2);
}

uint64_t sub_1006A2414()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  return swift_task_switch(sub_1006A2468, 0, 0);
}

uint64_t sub_1006A2468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  int v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint64_t v108;
  os_log_t loga;
  NSObject *log;
  os_log_t logb;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  sub_10000F9B8(*(_QWORD *)(v0 + 320), v1, &qword_1011091A0);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(_QWORD *)(v0 + 336) = v4;
  v5 = v4(v1, 1, v2);
  v6 = *(_QWORD *)(v0 + 312);
  if (v5 == 1)
  {
    sub_100004048(v6, &qword_1011091A0);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 240);
    sub_10000F9B8(*(_QWORD *)(v0 + 320), v8, &qword_1011091A0);
    v10 = v7(v8, 1, v9);
    v11 = *(_QWORD *)(v0 + 304);
    if (v10 == 1)
    {
      sub_100004048(v11, &qword_1011091A0);
      if (qword_1010E9E38 != -1)
        swift_once(&qword_1010E9E38, sub_10069FCEC);
      v12 = *(_QWORD *)(v0 + 224);
      v13 = *(_QWORD *)(v0 + 160);
      v14 = type metadata accessor for Logger(0);
      sub_10001A9E8(v14, (uint64_t)qword_1011B7440);
      v15 = sub_10005972C(v13, v12, type metadata accessor for DiscoveredObject);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.info.getter(v16);
      v18 = os_log_type_enabled(v16, v17);
      v19 = *(_QWORD *)(v0 + 320);
      v20 = *(_QWORD *)(v0 + 224);
      if (v18)
      {
        v112 = *(_QWORD *)(v0 + 320);
        v21 = *(_QWORD *)(v0 + 208);
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        loga = (os_log_t)swift_slowAlloc(32, -1);
        *(_DWORD *)v22 = 136446210;
        v115 = (uint64_t)loga;
        v23 = (uint64_t *)(v20 + *(int *)(v21 + 36));
        v25 = *v23;
        v24 = v23[1];
        sub_10012C644(*v23, v24);
        v26 = sub_1001B495C(v25, v24);
        v28 = v27;
        sub_10012C494(v25, v24);
        *(_QWORD *)(v0 + 48) = sub_100016940(v26, v28, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v20, type metadata accessor for DiscoveredObject);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "\"Leech did not reconcile advertisement %{public}s)!", v22, 0xCu);
        swift_arrayDestroy(loga, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(loga, -1, -1);
        swift_slowDealloc(v22, -1, -1);

        v29 = v112;
      }
      else
      {

        sub_1000126B0(v20, type metadata accessor for DiscoveredObject);
        v29 = v19;
      }
      sub_100004048(v29, &qword_1011091A0);
      v61 = *(_QWORD *)(v0 + 312);
      v63 = *(_QWORD *)(v0 + 296);
      v62 = *(_QWORD *)(v0 + 304);
      v65 = *(_QWORD *)(v0 + 280);
      v64 = *(_QWORD *)(v0 + 288);
      v66 = *(_QWORD *)(v0 + 264);
      v67 = *(_QWORD *)(v0 + 272);
      v68 = *(_QWORD *)(v0 + 256);
      v69 = *(_QWORD *)(v0 + 232);
      v100 = *(_QWORD *)(v0 + 224);
      v102 = *(_QWORD *)(v0 + 216);
      v104 = *(_QWORD *)(v0 + 200);
      v106 = *(_QWORD *)(v0 + 192);
      v108 = *(_QWORD *)(v0 + 184);
      logb = *(os_log_t *)(v0 + 176);
      v114 = *(_QWORD *)(v0 + 168);
      swift_task_dealloc(*(_QWORD *)(v0 + 320));
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(logb);
      swift_task_dealloc(v114);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 272);
      v33 = *(_QWORD *)(v0 + 280);
      v34 = *(_QWORD *)(v0 + 216);
      v35 = *(_QWORD *)(v0 + 200);
      v36 = *(_QWORD *)(v0 + 160);
      sub_1000126EC(v11, v33, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_10005972C(v36, v34, type metadata accessor for DiscoveredObject);
      sub_10005972C(v33, v32, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_1006A53B8(v34, v32, 2, v35);
      if (qword_1010E9E38 != -1)
        swift_once(&qword_1010E9E38, sub_10069FCEC);
      v37 = *(_QWORD *)(v0 + 280);
      v38 = *(_QWORD *)(v0 + 264);
      v113 = *(_QWORD *)(v0 + 256);
      v40 = *(_QWORD *)(v0 + 192);
      v39 = *(_QWORD *)(v0 + 200);
      v42 = *(_QWORD *)(v0 + 176);
      v41 = *(_QWORD *)(v0 + 184);
      v43 = *(_QWORD *)(v0 + 168);
      v44 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 352) = sub_10001A9E8(v44, (uint64_t)qword_1011B7440);
      sub_10005972C(v39, v40, type metadata accessor for ObservedAdvertisement);
      sub_10005972C(v39, v41, type metadata accessor for ObservedAdvertisement);
      sub_10005972C(v39, v42, type metadata accessor for ObservedAdvertisement);
      sub_10005972C(v39, v43, type metadata accessor for ObservedAdvertisement);
      sub_10005972C(v37, v38, type metadata accessor for BeaconKeyManager.IndexInformation);
      v45 = sub_10005972C(v37, v113, type metadata accessor for BeaconKeyManager.IndexInformation);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.info.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v107 = v47;
        log = v46;
        v49 = *(_QWORD *)(v0 + 184);
        v48 = *(_QWORD *)(v0 + 192);
        v98 = v0 + 96;
        v99 = v0 + 104;
        v101 = v0 + 112;
        v103 = v0 + 120;
        v97 = *(_QWORD *)(v0 + 176);
        v50 = swift_slowAlloc(82, -1);
        v105 = swift_slowAlloc(192, -1);
        v115 = v105;
        *(_DWORD *)v50 = 141559811;
        *(_QWORD *)(v0 + 64) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v50 + 4, v50 + 12);
        *(_WORD *)(v50 + 12) = 2081;
        v51 = *(_QWORD *)(v48 + 16);
        v52 = *(_QWORD *)(v48 + 24);
        sub_10012C644(v51, v52);
        v53 = sub_1001B495C(v51, v52);
        v55 = v54;
        sub_10012C494(v51, v52);
        *(_QWORD *)(v0 + 72) = sub_100016940(v53, v55, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v50 + 14, v50 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v48, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 22) = 2082;
        v56 = sub_1000AF25C(*(_BYTE *)(v49 + 32) & 0xB);
        v57 = sub_1000AEBCC(v56 & 0x10101FF);
        *(_QWORD *)(v0 + 80) = sub_100016940(v57, v58, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v50 + 24, v50 + 32);
        swift_bridgeObjectRelease();
        sub_1000126B0(v49, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 32) = 2082;
        if ((*(_BYTE *)(v97 + 35) & 1) != 0)
        {
          v59 = 0xE400000000000000;
          v60 = 1701736302;
        }
        else
        {
          *(_BYTE *)(v0 + 376) = *(_BYTE *)(*(_QWORD *)(v0 + 176) + 34);
          v75 = sub_100059570();
          v76 = FixedWidthInteger.data.getter(&type metadata for UInt8, v75);
          v78 = v77;
          v60 = Data.hexString.getter(v76, v77);
          v59 = v79;
          sub_10001BC14(v76, v78);
        }
        v80 = *(_QWORD *)(v0 + 256);
        v81 = *(_QWORD *)(v0 + 264);
        v82 = *(_QWORD *)(v0 + 240);
        v84 = *(_QWORD *)(v0 + 168);
        v83 = *(_QWORD *)(v0 + 176);
        *(_QWORD *)(v0 + 88) = sub_100016940(v60, v59, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v98, v50 + 34, v50 + 42);
        swift_bridgeObjectRelease();
        sub_1000126B0(v83, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 42) = 2082;
        v85 = sub_1000AEDC4(*(unsigned __int8 *)(v84 + 32));
        *(_QWORD *)(v0 + 96) = sub_100016940(v85, v86, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v98, v99, v50 + 44, v50 + 52);
        swift_bridgeObjectRelease();
        sub_1000126B0(v84, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 52) = 2080;
        v87 = (_QWORD *)(v81 + *(int *)(v82 + 20));
        v89 = v87[3];
        v88 = v87[4];
        sub_10001AA44(v87, v89);
        v90 = dispatch thunk of CustomStringConvertible.description.getter(v89, *(_QWORD *)(v88 + 16));
        *(_QWORD *)(v0 + 104) = sub_100016940(v90, v91, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v101, v50 + 54, v50 + 62);
        swift_bridgeObjectRelease();
        sub_1000126B0(v81, type metadata accessor for BeaconKeyManager.IndexInformation);
        *(_WORD *)(v50 + 62) = 2160;
        *(_QWORD *)(v0 + 112) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v101, v103, v50 + 64, v50 + 72);
        *(_WORD *)(v50 + 72) = 2081;
        v92 = type metadata accessor for UUID(0);
        v93 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v94 = dispatch thunk of CustomStringConvertible.description.getter(v92, v93);
        *(_QWORD *)(v0 + 120) = sub_100016940(v94, v95, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v0 + 128, v50 + 74, v50 + 82);
        swift_bridgeObjectRelease();
        sub_1000126B0(v80, type metadata accessor for BeaconKeyManager.IndexInformation);
        _os_log_impl((void *)&_mh_execute_header, log, v107, "\"Leech Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public}s,\nindex: %s, beacon: %{private,mask.hash}s.", (uint8_t *)v50, 0x52u);
        swift_arrayDestroy(v105, 6, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1, -1);
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {
        v70 = *(_QWORD *)(v0 + 256);
        v71 = *(_QWORD *)(v0 + 264);
        v72 = *(_QWORD *)(v0 + 184);
        v74 = *(_QWORD *)(v0 + 168);
        v73 = *(_QWORD *)(v0 + 176);
        sub_1000126B0(*(_QWORD *)(v0 + 192), type metadata accessor for ObservedAdvertisement);
        sub_1000126B0(v72, type metadata accessor for ObservedAdvertisement);
        sub_1000126B0(v73, type metadata accessor for ObservedAdvertisement);
        sub_1000126B0(v74, type metadata accessor for ObservedAdvertisement);
        sub_1000126B0(v71, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_1000126B0(v70, type metadata accessor for BeaconKeyManager.IndexInformation);

      }
      v96 = (_QWORD *)swift_task_alloc(dword_101103DC4);
      *(_QWORD *)(v0 + 360) = v96;
      *v96 = v0;
      v96[1] = sub_1006A3AFC;
      return sub_1006A56AC(*(_QWORD *)(v0 + 200));
    }
  }
  else
  {
    sub_1000126EC(v6, *(_QWORD *)(v0 + 296), type metadata accessor for BeaconKeyManager.IndexInformation);
    v30 = (_QWORD *)swift_task_alloc(dword_101103DCC);
    *(_QWORD *)(v0 + 344) = v30;
    *v30 = v0;
    v30[1] = sub_1006A2E54;
    return sub_1006A4DCC(*(_QWORD *)(v0 + 296));
  }
}

uint64_t sub_1006A2E54(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_BYTE *)(*(_QWORD *)v1 + 377) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A2EB0, 0, 0);
}

uint64_t sub_1006A2EB0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  os_log_type_t v127;
  uint64_t v128;
  os_log_t loga;
  os_log_t logb;
  os_log_t logc;
  NSObject *log;
  os_log_t logd;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  if ((*(_BYTE *)(v0 + 377) & 1) == 0)
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v24 = *(_QWORD *)(v0 + 288);
    v25 = *(_QWORD *)(v0 + 296);
    v26 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 160);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B7440);
    sub_10005972C(v25, v24, type metadata accessor for BeaconKeyManager.IndexInformation);
    v29 = sub_10005972C(v27, v26, type metadata accessor for DiscoveredObject);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 320);
    v34 = *(_QWORD *)(v0 + 288);
    v35 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 232);
    if (v32)
    {
      logb = *(os_log_t *)(v0 + 320);
      v37 = *(_QWORD *)(v0 + 208);
      v38 = swift_slowAlloc(32, -1);
      v123 = swift_slowAlloc(64, -1);
      v136 = v123;
      *(_DWORD *)v38 = 141558531;
      *(_QWORD *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v126 = v35;
      v39 = type metadata accessor for UUID(0);
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      *(_QWORD *)(v0 + 144) = sub_100016940(v41, v42, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v38 + 22) = 2082;
      v43 = (uint64_t *)(v36 + *(int *)(v37 + 36));
      v44 = *v43;
      v45 = v43[1];
      sub_10012C644(*v43, v45);
      v46 = sub_1001B495C(v44, v45);
      v48 = v47;
      sub_10012C494(v44, v45);
      *(_QWORD *)(v0 + 128) = sub_100016940(v46, v48, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v38 + 24, v38 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v36, type metadata accessor for DiscoveredObject);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Leech Ignoring unsupported beacon %{private,mask.hash}s advertisement %{public}s!", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v123, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      sub_1000126B0(v126, type metadata accessor for BeaconKeyManager.IndexInformation);
      v23 = (uint64_t)logb;
    }
    else
    {

      sub_1000126B0(v36, type metadata accessor for DiscoveredObject);
      sub_1000126B0(v34, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_1000126B0(v35, type metadata accessor for BeaconKeyManager.IndexInformation);
      v23 = v33;
    }
    goto LABEL_18;
  }
  sub_1000126B0(*(_QWORD *)(v0 + 296), type metadata accessor for BeaconKeyManager.IndexInformation);
  v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 240);
  sub_10000F9B8(*(_QWORD *)(v0 + 320), v2, &qword_1011091A0);
  v4 = v1(v2, 1, v3);
  v5 = *(_QWORD *)(v0 + 304);
  if (v4 == 1)
  {
    sub_100004048(v5, &qword_1011091A0);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v6 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 160);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7440);
    v9 = sub_10005972C(v7, v6, type metadata accessor for DiscoveredObject);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 224);
    if (v12)
    {
      v134 = *(_QWORD *)(v0 + 320);
      v15 = *(_QWORD *)(v0 + 208);
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      loga = (os_log_t)swift_slowAlloc(32, -1);
      *(_DWORD *)v16 = 136446210;
      v136 = (uint64_t)loga;
      v17 = (uint64_t *)(v14 + *(int *)(v15 + 36));
      v19 = *v17;
      v18 = v17[1];
      sub_10012C644(*v17, v18);
      v20 = sub_1001B495C(v19, v18);
      v22 = v21;
      sub_10012C494(v19, v18);
      *(_QWORD *)(v0 + 48) = sub_100016940(v20, v22, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v14, type metadata accessor for DiscoveredObject);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "\"Leech did not reconcile advertisement %{public}s)!", v16, 0xCu);
      swift_arrayDestroy(loga, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(loga, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      v23 = v134;
    }
    else
    {

      sub_1000126B0(v14, type metadata accessor for DiscoveredObject);
      v23 = v13;
    }
LABEL_18:
    sub_100004048(v23, &qword_1011091A0);
    v78 = *(_QWORD *)(v0 + 312);
    v80 = *(_QWORD *)(v0 + 296);
    v79 = *(_QWORD *)(v0 + 304);
    v82 = *(_QWORD *)(v0 + 280);
    v81 = *(_QWORD *)(v0 + 288);
    v83 = *(_QWORD *)(v0 + 264);
    v84 = *(_QWORD *)(v0 + 272);
    v85 = *(_QWORD *)(v0 + 256);
    v86 = *(_QWORD *)(v0 + 232);
    v118 = *(_QWORD *)(v0 + 224);
    v120 = *(_QWORD *)(v0 + 216);
    v122 = *(_QWORD *)(v0 + 200);
    v125 = *(_QWORD *)(v0 + 192);
    v128 = *(_QWORD *)(v0 + 184);
    logd = *(os_log_t *)(v0 + 176);
    v135 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 320));
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(logd);
    swift_task_dealloc(v135);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v49 = *(_QWORD *)(v0 + 272);
  v50 = *(_QWORD *)(v0 + 280);
  v51 = *(_QWORD *)(v0 + 216);
  v52 = *(_QWORD *)(v0 + 200);
  v53 = *(_QWORD *)(v0 + 160);
  sub_1000126EC(v5, v50, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10005972C(v53, v51, type metadata accessor for DiscoveredObject);
  sub_10005972C(v50, v49, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_1006A53B8(v51, v49, 2, v52);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v54 = *(_QWORD *)(v0 + 280);
  v55 = *(_QWORD *)(v0 + 264);
  logc = *(os_log_t *)(v0 + 256);
  v57 = *(_QWORD *)(v0 + 192);
  v56 = *(_QWORD *)(v0 + 200);
  v59 = *(_QWORD *)(v0 + 176);
  v58 = *(_QWORD *)(v0 + 184);
  v60 = *(_QWORD *)(v0 + 168);
  v61 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 352) = sub_10001A9E8(v61, (uint64_t)qword_1011B7440);
  sub_10005972C(v56, v57, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v56, v58, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v56, v59, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v56, v60, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v54, v55, type metadata accessor for BeaconKeyManager.IndexInformation);
  v62 = sub_10005972C(v54, (uint64_t)logc, type metadata accessor for BeaconKeyManager.IndexInformation);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.info.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    v127 = v64;
    log = v63;
    v65 = *(_QWORD *)(v0 + 184);
    v66 = *(_QWORD *)(v0 + 192);
    v116 = v0 + 96;
    v117 = v0 + 104;
    v119 = v0 + 112;
    v121 = v0 + 120;
    v114 = *(_QWORD *)(v0 + 176);
    v67 = swift_slowAlloc(82, -1);
    v124 = swift_slowAlloc(192, -1);
    v136 = v124;
    *(_DWORD *)v67 = 141559811;
    *(_QWORD *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v67 + 4, v67 + 12);
    *(_WORD *)(v67 + 12) = 2081;
    v68 = *(_QWORD *)(v66 + 16);
    v69 = *(_QWORD *)(v66 + 24);
    sub_10012C644(v68, v69);
    v70 = sub_1001B495C(v68, v69);
    v72 = v71;
    sub_10012C494(v68, v69);
    *(_QWORD *)(v0 + 72) = sub_100016940(v70, v72, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v67 + 14, v67 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v66, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 22) = 2082;
    v73 = sub_1000AF25C(*(_BYTE *)(v65 + 32) & 0xB);
    v74 = sub_1000AEBCC(v73 & 0x10101FF);
    *(_QWORD *)(v0 + 80) = sub_100016940(v74, v75, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v67 + 24, v67 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v65, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 32) = 2082;
    if ((*(_BYTE *)(v114 + 35) & 1) != 0)
    {
      v76 = 0xE400000000000000;
      v77 = 1701736302;
    }
    else
    {
      *(_BYTE *)(v0 + 376) = *(_BYTE *)(*(_QWORD *)(v0 + 176) + 34);
      v93 = sub_100059570();
      v94 = FixedWidthInteger.data.getter(&type metadata for UInt8, v93);
      v96 = v95;
      v77 = Data.hexString.getter(v94, v95);
      v76 = v97;
      sub_10001BC14(v94, v96);
    }
    v98 = *(_QWORD *)(v0 + 264);
    v115 = *(_QWORD *)(v0 + 256);
    v99 = *(_QWORD *)(v0 + 240);
    v101 = *(_QWORD *)(v0 + 168);
    v100 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 88) = sub_100016940(v77, v76, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v116, v67 + 34, v67 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v100, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 42) = 2082;
    v102 = sub_1000AEDC4(*(unsigned __int8 *)(v101 + 32));
    *(_QWORD *)(v0 + 96) = sub_100016940(v102, v103, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, v117, v67 + 44, v67 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v101, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 52) = 2080;
    v104 = (_QWORD *)(v98 + *(int *)(v99 + 20));
    v106 = v104[3];
    v105 = v104[4];
    sub_10001AA44(v104, v106);
    v107 = dispatch thunk of CustomStringConvertible.description.getter(v106, *(_QWORD *)(v105 + 16));
    *(_QWORD *)(v0 + 104) = sub_100016940(v107, v108, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v119, v67 + 54, v67 + 62);
    swift_bridgeObjectRelease();
    sub_1000126B0(v98, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v67 + 62) = 2160;
    *(_QWORD *)(v0 + 112) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, v121, v67 + 64, v67 + 72);
    *(_WORD *)(v67 + 72) = 2081;
    v109 = type metadata accessor for UUID(0);
    v110 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v111 = dispatch thunk of CustomStringConvertible.description.getter(v109, v110);
    *(_QWORD *)(v0 + 120) = sub_100016940(v111, v112, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v0 + 128, v67 + 74, v67 + 82);
    swift_bridgeObjectRelease();
    sub_1000126B0(v115, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl((void *)&_mh_execute_header, log, v127, "\"Leech Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public}s,\nindex: %s, beacon: %{private,mask.hash}s.", (uint8_t *)v67, 0x52u);
    swift_arrayDestroy(v124, 6, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v124, -1, -1);
    swift_slowDealloc(v67, -1, -1);

  }
  else
  {
    v88 = *(_QWORD *)(v0 + 256);
    v89 = *(_QWORD *)(v0 + 264);
    v90 = *(_QWORD *)(v0 + 184);
    v92 = *(_QWORD *)(v0 + 168);
    v91 = *(_QWORD *)(v0 + 176);
    sub_1000126B0(*(_QWORD *)(v0 + 192), type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v90, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v91, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v92, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v89, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126B0(v88, type metadata accessor for BeaconKeyManager.IndexInformation);

  }
  v113 = (_QWORD *)swift_task_alloc(dword_101103DC4);
  *(_QWORD *)(v0 + 360) = v113;
  *v113 = v0;
  v113[1] = sub_1006A3AFC;
  return sub_1006A56AC(*(_QWORD *)(v0 + 200));
}

uint64_t sub_1006A3AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1006A3CA4;
  else
    v3 = sub_1006A3B60;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1006A3B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 280);
  sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for ObservedAdvertisement);
  sub_1000126B0(v2, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_100004048(v1, &qword_1011091A0);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 272);
  v10 = *(_QWORD *)(v0 + 256);
  v11 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 224);
  v14 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 176);
  v19 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A3CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 368);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 368);
    v31 = *(_QWORD *)(v0 + 280);
    v33 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 200);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v35 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_getErrorValue(v5, v0 + 40, v0 + 16);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 56) = sub_100016940(v8, v9, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Leech cannot save observedAdvertisement. error: %{public}s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v5);
    sub_1000126B0(v29, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v31, type metadata accessor for BeaconKeyManager.IndexInformation);
    v10 = v33;
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 368);
    v12 = *(_QWORD *)(v0 + 320);
    v13 = *(_QWORD *)(v0 + 280);
    v14 = *(_QWORD *)(v0 + 200);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    sub_1000126B0(v14, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v13, type metadata accessor for BeaconKeyManager.IndexInformation);
    v10 = v12;
  }
  sub_100004048(v10, &qword_1011091A0);
  v15 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 304);
  v19 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 272);
  v22 = *(_QWORD *)(v0 + 256);
  v23 = *(_QWORD *)(v0 + 232);
  v25 = *(_QWORD *)(v0 + 224);
  v26 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v0 + 200);
  v28 = *(_QWORD *)(v0 + 192);
  v30 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 176);
  v34 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 320));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A3F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[30] = a3;
  v4[31] = v3;
  v4[28] = a1;
  v4[29] = a2;
  v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[32] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[33] = v6;
  v4[34] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1011091A0);
  v4[35] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[36] = swift_task_alloc(v8);
  v4[37] = swift_task_alloc(v8);
  v4[38] = swift_task_alloc(v8);
  return swift_task_switch(sub_1006A403C, v3, 0);
}

uint64_t sub_1006A403C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 312) = v2;
    *v2 = v0;
    v2[1] = sub_1006A4128;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006A4128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A4188, v3, 0);
}

uint64_t sub_1006A4188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(_QWORD, uint64_t, uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void);

  v1 = *(_QWORD *)(v0 + 320);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v15 = (uint64_t (*)(void))((char *)&dword_1010EBB70 + dword_1010EBB70);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
      *(_QWORD *)(v0 + 328) = v3;
      *v3 = v0;
      v3[1] = sub_1006A4354;
      return v15();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7440);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cannot reconcile: missing BeaconKeyService.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v9 = *(_QWORD *)(v0 + 264);

    v10 = *(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v9 + 56);
    v11 = *(_QWORD *)(v0 + 296);
    v12 = *(_QWORD *)(v0 + 304);
    v13 = *(_QWORD *)(v0 + 288);
    v14 = *(_QWORD *)(v0 + 272);
    v10(*(_QWORD *)(v0 + 224), 1, 1, *(_QWORD *)(v0 + 256));
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1006A4354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A43B4, v3, 0);
}

uint64_t sub_1006A43B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = v0[42];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 17);
  v2 = swift_allocObject(&unk_101088198, 24, 7);
  v0[43] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[44] = v4;
  v5 = sub_10001A9A8(&qword_101103DF8);
  *v4 = v0;
  v4[1] = sub_1006A4464;
  return unsafeBlocking<A>(_:)(v0 + 25, sub_1006ADC14, v2, v5);
}

uint64_t sub_1006A4464()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  swift_release();
  return swift_task_switch(sub_1006A44C4, v1, 0);
}

uint64_t sub_1006A44C4()
{
  _QWORD *v0;
  uint64_t v1;

  v0[45] = v0[25];
  v1 = v0[40];
  swift_retain();
  return swift_task_switch(sub_1006A4508, v1, 0);
}

uint64_t sub_1006A4508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 320) + 136);
  *(_QWORD *)(v0 + 368) = v1;
  if (v1)
    return swift_task_switch(sub_1006A452C, v1, 0);
  __break(1u);
  return result;
}

uint64_t sub_1006A452C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[46];
  v3 = v0[29];
  v2 = v0[30];
  v4 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  v5 = sub_100006204(&qword_101103E00, type metadata accessor for BeaconKeyServiceBuilder, (uint64_t)&unk_100E46668);
  v6 = (_QWORD *)swift_task_alloc(48);
  v0[47] = v6;
  v6[2] = v1;
  v6[3] = v3;
  v6[4] = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[48] = v7;
  *v7 = v0;
  v7[1] = sub_1006A460C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 26, v0[35], v4, v0[46], v5, &unk_101115F30, v6, v0[35]);
}

uint64_t sub_1006A460C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*v0 + 384));
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A4664, *(_QWORD *)(v1 + 368), 0);
}

uint64_t sub_1006A4664()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[31];
  v0[49] = v0[26];
  return swift_task_switch(sub_1006A4680, v1, 0);
}

uint64_t sub_1006A4680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  if (*(_QWORD *)(v1 + 16))
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 304), type metadata accessor for BeaconKeyManager.IndexInformation);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v2, 0, 1, v3);
  }
  else
  {
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(*(_QWORD *)(v0 + 304), 1, 1, v3);
  }
  *(_QWORD *)(v0 + 400) = v5;
  v6 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 264);
  swift_bridgeObjectRelease();
  sub_10000F9B8(v7, v6, &qword_1011091A0);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  *(_QWORD *)(v0 + 408) = v10;
  if (v10(v6, 1, v8) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 296), &qword_1011091A0);
    return swift_task_switch(sub_1006A4834, 0, 0);
  }
  else
  {
    sub_100004048(*(_QWORD *)(v0 + 304), &qword_1011091A0);
    swift_release();
    swift_release();
    v12 = *(_QWORD *)(v0 + 296);
    v13 = *(_QWORD *)(v0 + 272);
    v14 = *(_QWORD *)(v0 + 224);
    swift_release_n(*(_QWORD *)(v0 + 360), 2);
    sub_1000126EC(v12, v13, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v13, v14, type metadata accessor for BeaconKeyManager.IndexInformation);
    v15 = *(_QWORD *)(v0 + 296);
    v16 = *(_QWORD *)(v0 + 304);
    v17 = *(_QWORD *)(v0 + 288);
    v18 = *(_QWORD *)(v0 + 272);
    (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 224), 0, 1, *(_QWORD *)(v0 + 256));
    swift_task_dealloc(v16);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A4834()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)@<X0>(uint64_t@<X8>);
  _QWORD *v9;

  v1 = v0[45];
  v2 = v0[29];
  v3 = v0[30];
  if ((v3 & 0x2000000000000000) != 0)
  {
    v4 = (_QWORD *)swift_allocObject(&unk_1010881E8, 40, 7);
    v0[52] = v4;
    v4[2] = v1;
    v4[3] = v2;
    v4[4] = v3 & 0xDFFFFFFFFFFFFFFFLL;
    sub_10012C644(v2, v3);
    swift_retain();
    sub_10012C644(v2, v3);
    v9 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[53] = v9;
    *v9 = v0;
    v9[1] = sub_1006A496C;
    v7 = v0[35];
    v6 = v0[36];
    v8 = sub_1006ADC30;
  }
  else
  {
    v4 = (_QWORD *)swift_allocObject(&unk_1010881C0, 40, 7);
    v0[54] = v4;
    v4[2] = v1;
    v4[3] = v2;
    v4[4] = v3;
    sub_10012C644(v2, v3);
    swift_retain();
    sub_10012C644(v2, v3);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[55] = v5;
    *v5 = v0;
    v5[1] = sub_1006A4A14;
    v7 = v0[35];
    v6 = v0[36];
    v8 = sub_1006ADC20;
  }
  return unsafeBlocking<A>(_:)(v6, v8, v4, v7);
}

uint64_t sub_1006A496C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 424));
  swift_release();
  return swift_task_switch(sub_1006A49C8, 0, 0);
}

uint64_t sub_1006A49C8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = v0[31];
  sub_10012C494(v0[29], v0[30]);
  swift_release();
  return swift_task_switch(sub_1006A4A70, v1, 0);
}

uint64_t sub_1006A4A14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 432);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 440));
  swift_release(v1);
  return swift_task_switch(sub_1006AF750, 0, 0);
}

uint64_t sub_1006A4A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 288);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0 + 408))(v1, 1, *(_QWORD *)(v0 + 256)) == 1)
  {
    sub_100004048(v1, &qword_1011091A0);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v2 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 240);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7440);
    sub_10012C644(v2, v3);
    v5 = sub_10012C644(v2, v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 304);
    v11 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 240);
    if (v8)
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = v9;
      v13 = swift_slowAlloc(32, -1);
      v27 = v13;
      *(_DWORD *)v12 = 136446210;
      sub_10012C644(v11, v10);
      v14 = sub_1001B495C(v11, v10);
      v16 = v15;
      sub_10012C494(v11, v10);
      *(_QWORD *)(v0 + 216) = sub_100016940(v14, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      sub_10012C494(v11, v10);
      sub_10012C494(v11, v10);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "\"AdvertisementCacheService did not reconcile advertisement %{public}s!", v12, 0xCu);
      v17 = 1;
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
      swift_release();
      swift_release();

      swift_release();
      sub_100004048(v26, &qword_1011091A0);
    }
    else
    {

      swift_release();
      swift_release();
      sub_10012C494(v11, v10);
      sub_10012C494(v11, v10);
      swift_release();
      sub_100004048(v9, &qword_1011091A0);
      v17 = 1;
    }
  }
  else
  {
    sub_100004048(*(_QWORD *)(v0 + 304), &qword_1011091A0);
    swift_release();
    v18 = *(_QWORD *)(v0 + 288);
    v19 = *(_QWORD *)(v0 + 272);
    v20 = *(_QWORD *)(v0 + 224);
    swift_release();
    swift_release();
    sub_1000126EC(v18, v19, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v19, v20, type metadata accessor for BeaconKeyManager.IndexInformation);
    v17 = 0;
  }
  v21 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 304);
  v23 = *(_QWORD *)(v0 + 288);
  v24 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 400))(*(_QWORD *)(v0 + 224), v17, 1, *(_QWORD *)(v0 + 256));
  swift_task_dealloc(v22);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A4DCC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006A4E2C, v1, 0);
}

uint64_t sub_1006A4E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 176) = v3;
    *v3 = v0;
    v3[1] = sub_1006A4F2C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006A4F2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A4F8C, v3, 0);
}

uint64_t sub_1006A4F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = *(_QWORD *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1006A50A8, *(_QWORD *)(v0 + 184), 0);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7440);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get key service.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_1006A50A8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[23] + 128);
  if (v1)
  {
    v0[24] = sub_100754F94(v0[17], v1);
    v0[25] = 0;
    swift_task_switch(sub_1006A5114, v0[18], 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1006A5114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 184));
  v2 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v2 != 0);
}

uint64_t sub_1006A5164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7440);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 152);
  if (v9)
  {
    v20 = *(_QWORD *)(v0 + 160);
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v21 = v15;
    *(_DWORD *)v14 = 141558275;
    *(_QWORD *)(v0 + 120) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *(_QWORD *)(v0 + 128) = sub_100016940(v17, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to determine beacon info %{private,mask.hash}s.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_errorRelease(v10);

  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1006A53B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v38 = a2;
  v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v9 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  v42 = v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v39);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EF3F8);
  __chkstk_darwin(v14);
  v40 = (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 9) = a3;
  v16 = (int *)type metadata accessor for DiscoveredObject(0);
  v17 = (uint64_t *)(a1 + v16[9]);
  v19 = *v17;
  v18 = v17[1];
  *(_QWORD *)(a4 + 16) = *v17;
  *(_QWORD *)(a4 + 24) = v18;
  *(_BYTE *)(a4 + 32) = *(_BYTE *)(a1 + v16[11]);
  *(_BYTE *)(a4 + 33) = *(_BYTE *)(a1 + v16[12]);
  v20 = (char *)(a1 + v16[13]);
  v21 = *v20;
  LOBYTE(v20) = v20[1];
  *(_BYTE *)(a4 + 34) = v21;
  *(_BYTE *)(a4 + 35) = (_BYTE)v20;
  *(_DWORD *)(a4 + 36) = *(_DWORD *)(a1 + v16[15]);
  v22 = a1 + v16[7];
  v23 = (int *)type metadata accessor for ObservedAdvertisement(0);
  v24 = a4 + v23[11];
  v25 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v24, v22, v25);
  *(_BYTE *)(a4 + v23[14]) = 0;
  v26 = a4 + v23[12];
  v27 = type metadata accessor for ObservedAdvertisement.Location(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  sub_10005972C(a2, (uint64_t)v13, type metadata accessor for BeaconKeyManager.IndexInformation);
  v28 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v11, v13, v28);
  v29 = &v13[*(int *)(v39 + 20)];
  v30 = *((_QWORD *)v29 + 3);
  v31 = *((_QWORD *)v29 + 4);
  sub_10001AA44(v29, v30);
  sub_10012C644(v19, v18);
  v32 = sub_100ABA6B0(v30, v31);
  v33 = v41;
  v11[*(int *)(v41 + 20)] = v32;
  v34 = *((_QWORD *)v29 + 3);
  v35 = *((_QWORD *)v29 + 4);
  sub_10001AA44(v29, v34);
  dispatch thunk of RawRepresentable.rawValue.getter(&v43, v34, *(_QWORD *)(v35 + 56));
  sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconKeyManager.IndexInformation);
  *(_QWORD *)&v11[*(int *)(v33 + 24)] = v43;
  v36 = v40;
  sub_1000126EC((uint64_t)v11, v40, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v38, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_1000126B0(a1, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v36, 0, 1, v33);
  return sub_100005CF0(v36, a4 + v23[13], &qword_1010EF3F8);
}

uint64_t sub_1006A56AC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[22] = v6;
  v2[23] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v2[24] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[25] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v9);
  v2[27] = swift_task_alloc(v9);
  v2[28] = swift_task_alloc(v9);
  v2[29] = swift_task_alloc(v9);
  v10 = type metadata accessor for ContinuousClock(0);
  v2[30] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[31] = v11;
  v2[32] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006A57AC, v1, 0);
}

uint64_t sub_1006A57AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t (__cdecl *v6)();

  v2 = ContinuousClock.init()(a1);
  ContinuousClock.now.getter(v2);
  v3 = qword_1010EA5B0;
  swift_retain();
  if (v3 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v1 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v1 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v1 + 80))
  {
    sub_10000F9FC((__int128 *)(v1 + 56), v1 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    v6 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v5 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v1 + 264) = v5;
    *v5 = v1;
    v5[1] = sub_1006A58D0;
    return v6();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006A58D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A5930, v3, 0);
}

uint64_t sub_1006A5930()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  void (*v10)(uint64_t, _QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 272))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111BABC);
    *(_QWORD *)(v0 + 280) = v2;
    *v2 = v0;
    v2[1] = sub_1006A5AF0;
    return sub_100C6592C(*(_QWORD *)(v0 + 128));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v4 = sub_10001A9E8(*(_QWORD *)(v0 + 168), (uint64_t)qword_1011B7440);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    v7 = os_log_type_enabled(v5, v6);
    v8 = *(_QWORD *)(v0 + 200);
    if (v7)
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService available!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = *(void (**)(uint64_t, _QWORD))(v8 + 8);
    v12 = *(_QWORD *)(v0 + 248);
    v11 = *(_QWORD *)(v0 + 256);
    v14 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 216);
    v15 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 160);
    v10(v14, *(_QWORD *)(v0 + 192));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc(v11);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A5AF0()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t **v5;

  v2 = (*v1)[35];
  v3 = *v1;
  v3[36] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1006A5FF8, v3[17], 0);
  v5 = (uint64_t **)swift_task_alloc(dword_101103DD4);
  v3[37] = (uint64_t)v5;
  *v5 = v3;
  v5[1] = (uint64_t *)sub_1006A5B80;
  return sub_1006A8158(v3[16]);
}

uint64_t sub_1006A5B80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  return swift_task_switch(sub_1006A5BD8, v1, 0);
}

uint64_t sub_1006A5BD8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  _QWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t type;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  ContinuousClock.now.getter();
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v1 = v0[28];
  v2 = v0[29];
  v4 = v0[26];
  v3 = v0[27];
  v5 = v0[24];
  v6 = v0[25];
  v8 = v0[22];
  v7 = v0[23];
  v9 = v0[21];
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v11(v3, v2, v5);
  v12 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v4, v1, v5);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  v15 = os_log_type_enabled(v13, v14);
  v16 = v0[26];
  v17 = v0[27];
  v18 = v0[24];
  v20 = v0[22];
  v19 = v0[23];
  v21 = v0[21];
  if (v15)
  {
    v34 = v0[25];
    type = v14;
    v22 = v0[20];
    v32 = v0[19];
    v33 = v0[18];
    v38 = v0[21];
    v37 = v0[23];
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v39 = v35;
    *(_DWORD *)v23 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    v24 = sub_100006204(&qword_101116030, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v25 = static Duration.description<A>(_:_:units:)(v17, v16, v22, v18, v24);
    v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v22, v33);
    v0[15] = sub_100016940(v25, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    v28 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v28(v17, v18);
    v28(v16, v18);
    _os_log_impl((void *)&_mh_execute_header, v13, type, "insert(observedAdvertisement:): %{public}s", v23, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v37, v38);
  }
  else
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v0[25] + 8);
    v28(v0[27], v0[24]);
    v28(v16, v18);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
  }
  v0[38] = v28;
  v29 = (_QWORD *)swift_task_alloc(dword_101103DDC);
  v0[39] = v29;
  *v29 = v0;
  v29[1] = sub_1006A5EC8;
  v30 = v0[17];
  v29[25] = v30;
  return swift_task_switch(sub_1006AC0E4, v30, 0);
}

uint64_t sub_1006A5EC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  return swift_task_switch(sub_1006A5F20, v1, 0);
}

uint64_t sub_1006A5F20()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  swift_release(*(_QWORD *)(v0 + 272));
  v1(v2, v3);
  v5 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 256);
  v7 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 224);
  v10 = *(_QWORD *)(v0 + 208);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD))(v0 + 304))(v7, *(_QWORD *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A5FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A60C0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconStatus(0);
  v2[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[22] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[23] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[24] = swift_task_alloc(v8);
  v2[25] = swift_task_alloc(v8);
  v9 = *(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  v2[26] = v9;
  v2[27] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v2[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MACAddress(0);
  v2[29] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[30] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v2[31] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v14);
  v2[33] = swift_task_alloc(v14);
  return swift_task_switch(sub_1006A61E0, v1, 0);
}

uint64_t sub_1006A61E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 272) = v2;
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v0 + 280) = v3;
  if ((v3 & 0x2000000000000000) != 0)
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B7440);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Not a wild advertisement - ignoring wild mode association record update.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = *(_QWORD *)(v0 + 256);
    v14 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 224);
    v16 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_10012C644(v2, v3);
    v4 = qword_1010EA5B0;
    swift_retain();
    if (v4 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v18 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
      v6 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 288) = v6;
      *v6 = v0;
      v6[1] = sub_1006A641C;
      return v18();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1006A641C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 296) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A647C, v3, 0);
}

uint64_t sub_1006A647C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 296))
  {
    v2 = *(_QWORD *)(v0 + 272);
    v3 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_10001BBBC(v2, v3);
    v8 = static MACAddress.length.getter(v7);
    sub_1002F7C0C(v8, v2, v3);
    MACAddress.init(data:type:)(v28);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 264);
      v11 = *(_QWORD *)(v0 + 232);
      v12 = *(_QWORD *)(v0 + 224);
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 240) + 32);
      *(_QWORD *)(v0 + 304) = v13;
      v13(v10, v12, v11);
      return swift_task_switch(sub_1006A6670, *(_QWORD *)(v0 + 296), 0);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7440);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v20 = *(_QWORD *)(v0 + 272);
    v19 = *(_QWORD *)(v0 + 280);
    if (v18)
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No BeaconStoreActor available!", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
    sub_10012C494(v20, v19);

    v22 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 216);
    v23 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 192);
    v25 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_1006A6670()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = v0[37];
  v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[38];
  v3 = v0[32];
  v5 = v0[30];
  v4 = v0[31];
  v6 = v0[29];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v3, v0[33], v6);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_101088238, v8 + v4, v7 | 7);
  v0[39] = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v2(v9 + v8, v3, v6);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[40] = v11;
  v12 = sub_10001A9A8(qword_101103E20);
  *v11 = v0;
  v11[1] = sub_1006A6760;
  return unsafeBlocking<A>(_:)(v0 + 15, sub_1006AF5F0, v9, v12);
}

uint64_t sub_1006A6760()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 320));
  swift_release();
  return swift_task_switch(sub_1006A67B8, *(_QWORD *)(v1 + 296), 0);
}

uint64_t sub_1006A67B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[33];
  v2 = v0[29];
  v3 = v0[30];
  v4 = v0[17];
  v0[41] = v0[15];
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_1006A6808, v4, 0);
}

uint64_t sub_1006A6808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 336) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(int **)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_BYTE **)(v0 + 128);
    v7 = *(int *)(type metadata accessor for ObservedAdvertisement(0) + 44);
    *(_DWORD *)(v0 + 376) = v7;
    v8 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 380) = v8;
    *(_QWORD *)(v0 + 344) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 352) = 0;
    v9 = *(_QWORD *)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 144);
    v13 = v1 + ((v8 + 32) & ~(unint64_t)v8);
    v14 = &v6[v7];
    sub_10005972C(v13, v9, type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v9, v12);
    sub_1000126B0(v9, type metadata accessor for WildModeAssociationRecord);
    v15 = v6[32];
    v16 = v10 + v4[6];
    v17 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, v14, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10, v11, v12);
    *(_BYTE *)(v10 + v4[5]) = v15;
    *(_OWORD *)(v10 + v4[7]) = xmmword_100E2E3D0;
    *(_BYTE *)(v10 + v4[8]) = 1;
    *(_QWORD *)(v10 + v4[9]) = 0;
    *(_BYTE *)(v0 + 384) = v6[9];
    *(_BYTE *)(v0 + 385) = v6[34];
    *(_BYTE *)(v0 + 386) = v6[35];
    return swift_task_switch(sub_1006A69FC, *(_QWORD *)(v0 + 296), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_10012C494(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
    swift_release();
    v19 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A69FC()
{
  uint64_t v0;
  char v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_BYTE *)(v0 + 386);
  v2 = *(_WORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  sub_10005972C(*(_QWORD *)(v0 + 200), v4, type metadata accessor for BeaconStatus);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = v8 + v5;
  v10 = swift_allocObject(&unk_101088260, v8 + v5 + 3, v7 | 7);
  *(_QWORD *)(v0 + 360) = v10;
  *(_QWORD *)(v10 + 16) = v3;
  sub_1000126EC(v4, v10 + v8, type metadata accessor for BeaconStatus);
  v11 = v10 + v9;
  *(_WORD *)v11 = v2;
  *(_BYTE *)(v11 + 2) = v1;
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 368) = v13;
  *v13 = v0;
  v13[1] = sub_1006A6AF4;
  return unsafeBlocking<A>(_:)(v13, sub_1006AF568, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_1006A6AF4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 368));
  swift_release();
  return swift_task_switch(sub_1006A6B4C, *(_QWORD *)(v1 + 296), 0);
}

uint64_t sub_1006A6B4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  sub_1000126B0(*(_QWORD *)(v0 + 200), type metadata accessor for BeaconStatus);
  return swift_task_switch(sub_1006A6B94, v1, 0);
}

uint64_t sub_1006A6B94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 352) + 1;
  if (v1 == *(_QWORD *)(v0 + 336))
  {
    swift_bridgeObjectRelease();
    sub_10012C494(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
    swift_release();
    v2 = *(_QWORD *)(v0 + 256);
    v4 = *(_QWORD *)(v0 + 216);
    v3 = *(_QWORD *)(v0 + 224);
    v6 = *(_QWORD *)(v0 + 192);
    v5 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 352) = v1;
    v9 = *(_QWORD *)(v0 + 216);
    v10 = *(_QWORD *)(v0 + 200);
    v11 = *(_QWORD *)(v0 + 160);
    v12 = *(int **)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 152);
    v15 = *(_BYTE **)(v0 + 128);
    v16 = &v15[*(int *)(v0 + 376)];
    sub_10005972C(*(_QWORD *)(v0 + 328)+ ((*(unsigned __int8 *)(v0 + 380) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 380))+ *(_QWORD *)(v0 + 344) * v1, v9, type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v9, v13);
    sub_1000126B0(v9, type metadata accessor for WildModeAssociationRecord);
    v17 = v15[32];
    v18 = v10 + v12[6];
    v19 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, v16, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v10, v11, v13);
    *(_BYTE *)(v10 + v12[5]) = v17;
    *(_OWORD *)(v10 + v12[7]) = xmmword_100E2E3D0;
    *(_BYTE *)(v10 + v12[8]) = 1;
    *(_QWORD *)(v10 + v12[9]) = 0;
    *(_BYTE *)(v0 + 384) = v15[9];
    *(_BYTE *)(v0 + 385) = v15[34];
    *(_BYTE *)(v0 + 386) = v15[35];
    return swift_task_switch(sub_1006A69FC, *(_QWORD *)(v0 + 296), 0);
  }
}

uint64_t sub_1006A6D74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for BeaconStatus(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[19] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v6);
  v2[21] = swift_task_alloc(v6);
  v7 = type metadata accessor for UUID(0);
  v2[22] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[23] = v8;
  v2[24] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF3F8);
  v2[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v2[26] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[27] = v11;
  v2[28] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006A6E5C, v1, 0);
}

uint64_t sub_1006A6E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(void);

  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = type metadata accessor for ObservedAdvertisement(0);
  *(_QWORD *)(v0 + 232) = v5;
  sub_10000F9B8(v4 + *(int *)(v5 + 52), v3, &qword_1010EF3F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 200), &qword_1010EF3F8);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7440);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ignoring status update for advertisement without beaconInformation.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(_QWORD *)(v0 + 192);
    v12 = *(_QWORD *)(v0 + 200);
    v14 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v16 = qword_1010EA5B0;
    swift_retain();
    if (v16 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v18 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
      v17 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
      *(_QWORD *)(v0 + 240) = v17;
      *v17 = v0;
      v17[1] = sub_1006A70CC;
      return v18();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1006A70CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A712C, v3, 0);
}

uint64_t sub_1006A712C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 248))
  {
    v2 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 232);
    v3 = *(_QWORD *)(v0 + 208);
    v5 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 168);
    v6 = *(_QWORD *)(v0 + 176);
    v8 = *(int **)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v10(v4, v2, v6);
    v29 = *(_QWORD *)(v2 + *(int *)(v3 + 24));
    v11 = *(unsigned __int8 *)(v2 + *(int *)(v3 + 20));
    v12 = (*(_QWORD *)(v9 + 24) & 0x2000000000000000) == 0;
    v10(v7, v4, v6);
    LOBYTE(v6) = *(_BYTE *)(v9 + 32);
    v13 = v9 + *(int *)(v28 + 44);
    v14 = v7 + v8[6];
    v15 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
    *(_BYTE *)(v7 + v8[5]) = v6;
    v16 = (_QWORD *)(v7 + v8[7]);
    *v16 = v11;
    v16[1] = v29;
    *(_BYTE *)(v7 + v8[8]) = v12;
    *(_QWORD *)(v7 + v8[9]) = 0;
    *(_BYTE *)(v0 + 272) = *(_BYTE *)(v9 + 9);
    *(_BYTE *)(v0 + 273) = *(_BYTE *)(v9 + 34);
    *(_BYTE *)(v0 + 274) = *(_BYTE *)(v9 + 35);
    return swift_task_switch(sub_1006A737C, *(_QWORD *)(v0 + 248), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7440);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No BeaconStoreActor available!", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
    v23 = *(_QWORD *)(v0 + 224);

    sub_1000126B0(v23, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v24 = *(_QWORD *)(v0 + 192);
    v25 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 160);
    v26 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A737C()
{
  uint64_t v0;
  char v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_BYTE *)(v0 + 274);
  v2 = *(_WORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  sub_10005972C(*(_QWORD *)(v0 + 168), v4, type metadata accessor for BeaconStatus);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = v8 + v5;
  v10 = swift_allocObject(&unk_101088210, v8 + v5 + 3, v7 | 7);
  *(_QWORD *)(v0 + 256) = v10;
  *(_QWORD *)(v10 + 16) = v3;
  sub_1000126EC(v4, v10 + v8, type metadata accessor for BeaconStatus);
  v11 = v10 + v9;
  *(_WORD *)v11 = v2;
  *(_BYTE *)(v11 + 2) = v1;
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 264) = v13;
  *v13 = v0;
  v13[1] = sub_1006A7474;
  return unsafeBlocking<A>(_:)(v13, sub_1006AF568, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_1006A7474()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 264));
  swift_release();
  return swift_task_switch(sub_1006A74CC, *(_QWORD *)(v1 + 248), 0);
}

uint64_t sub_1006A74CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for BeaconStatus);
  return swift_task_switch(sub_1006A7514, v1, 0);
}

uint64_t sub_1006A7514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006A75A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[28] = a1;
  v2[29] = v1;
  v3 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v2[30] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[31] = v4;
  v2[32] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[33] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[34] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[35] = swift_task_alloc(v7);
  v2[36] = swift_task_alloc(v7);
  return swift_task_switch(sub_1006A7640, v1, 0);
}

uint64_t sub_1006A7640()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 296) = v2;
    *v2 = v0;
    v2[1] = sub_1006A772C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006A772C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A778C, v3, 0);
}

uint64_t sub_1006A778C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1006A79AC, *(_QWORD *)(v0 + 304), 0);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7440);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 160) = sub_100016940(0xD000000000000025, 0x8000000100EE07D0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Missing BeaconKeyService.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = sub_100033220();
  v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
  *v11 = 0xD000000000000010;
  v11[1] = 0x8000000100EE0740;
  swift_willThrow(v10);
  v12 = *(_QWORD *)(v0 + 280);
  v13 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_1006A79AC()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[38] + 128);
  if (v1)
  {
    v0[39] = sub_100754F94(v0[28], v1);
    v0[40] = 0;
    swift_task_switch(sub_1006A7A18, v0[29], 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1006A7A18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t My;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  os_log_type_t type[8];
  _QWORD *v60;
  uint64_t v61;
  os_log_type_t v62[8];
  uint64_t *v63;
  uint64_t v64[2];

  v1 = v0[39];
  *(_QWORD *)v62 = *(_QWORD *)(v1 + 16);
  v63 = v0 + 25;
  if (*(_QWORD *)v62)
  {
    v2 = v0[39];
    if (qword_1010E9E38 != -1)
    {
LABEL_21:
      swift_once(&qword_1010E9E38, sub_10069FCEC);
      v2 = v0[39];
    }
    v60 = v0 + 12;
    v3 = v0[36];
    v5 = v0[33];
    v4 = v0[34];
    v6 = v0;
    v7 = v0[28];
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7440);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
    swift_bridgeObjectRetain(v2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = v0[36];
    v15 = v0 + 33;
    v0 = (_QWORD *)v0[33];
    v14 = v15[1];
    if (v12)
    {
      v16 = swift_slowAlloc(42, -1);
      v58 = swift_slowAlloc(64, -1);
      v64[0] = v58;
      *(_DWORD *)v16 = 136315907;
      v57 = v0;
      v6[21] = sub_100016940(0xD000000000000025, 0x8000000100EE07D0, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 21, v6 + 22, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2048;
      v6[22] = *(_QWORD *)(v1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 22, v6 + 23, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2160;
      v6[23] = 1752392040;
      v0 = v6 + 24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 23, v6 + 24, v16 + 24, v16 + 32);
      *(_WORD *)(v16 + 32) = 2081;
      v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v57, v17);
      v6[24] = sub_100016940(v18, v19, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 24, v63, v16 + 34, v16 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD *))(v14 + 8))(v13, v57);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s Found [%ld] beacon infos  for %{private,mask.hash}s", (uint8_t *)v16, 0x2Au);
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, _QWORD *))(v14 + 8))(v13, v0);
    }

    v35 = v6[39];
    v36 = v6[31];
    v63 = (uint64_t *)v6[30];
    v37 = v35 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
    v38 = enum case for Feature.FindMy.spPlaySoundAll(_:);
    swift_bridgeObjectRetain(v35);
    v39 = 0;
    v40 = v6;
    while (1)
    {
      v41 = v39 + 1;
      if (__OFADD__(v39, 1))
      {
        __break(1u);
        goto LABEL_21;
      }
      v42 = v40[32];
      sub_10005972C(v37 + *(_QWORD *)(v36 + 72) * v39, v42, type metadata accessor for KeyGenerationBeaconInfo);
      v43 = v40[32];
      if (*(unsigned __int8 *)(v42 + *((int *)v63 + 7)) - 1 < 2)
        break;
      My = type metadata accessor for Feature.FindMy(0);
      v40[15] = My;
      v0 = v40;
      v40[16] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      v45 = sub_100018F08(v60);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(My - 8) + 104))(v45, v38, My);
      v1 = isFeatureEnabled(_:)(v60);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
      sub_1000126B0(v43, type metadata accessor for KeyGenerationBeaconInfo);
      if ((v1 & 1) == 0)
      {
        ++v39;
        if (v41 != *(_QWORD *)v62)
          continue;
      }
      goto LABEL_19;
    }
    sub_1000126B0(v40[32], type metadata accessor for KeyGenerationBeaconInfo);
    LOBYTE(v1) = 1;
LABEL_19:
    v52 = v40[39];
    v54 = v40[35];
    v53 = v40[36];
    v55 = v40;
    v56 = v40[32];
    swift_bridgeObjectRelease_n(v52, 2);
    swift_release();
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    return ((uint64_t (*)(uint64_t))v55[1])(v1 & 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v20 = v0[28];
    v22 = v0[34];
    v21 = v0[35];
    v23 = v0[33];
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7440);
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v20, v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    v28 = os_log_type_enabled(v26, v27);
    v29 = v0[35];
    v30 = v0[33];
    if (v28)
    {
      *(_QWORD *)type = v0[34];
      v31 = swift_slowAlloc(32, -1);
      v61 = swift_slowAlloc(64, -1);
      v64[0] = v61;
      *(_DWORD *)v31 = 136315651;
      *v63 = sub_100016940(0xD000000000000025, 0x8000000100EE07D0, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v63, v0 + 26, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2160;
      v0[26] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v31 + 14, v31 + 22);
      *(_WORD *)(v31 + 22) = 2081;
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v30, v32);
      v0[27] = sub_100016940(v33, v34, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)type + 8))(v29, v30);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s Missing beacon info for %{private,mask.hash}s!", (uint8_t *)v31, 0x20u);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[35], v0[33]);
    }

    v46 = sub_100159E20();
    v47 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v46, 0, 0);
    *v48 = 4;
    swift_willThrow(v47);
    swift_release();
    v49 = v0[35];
    v50 = v0[32];
    swift_task_dealloc(v0[36]);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    return ((uint64_t (*)(_QWORD))v0[1])(0);
  }
}

uint64_t sub_1006A80FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 304));
  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1006A8158(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2[44] = a1;
  v2[45] = v1;
  v3 = type metadata accessor for ObservedAdvertisement(0);
  v2[46] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[47] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[48] = swift_task_alloc(v5);
  v2[49] = swift_task_alloc(v5);
  v2[50] = swift_task_alloc(v5);
  v2[51] = swift_task_alloc(v5);
  v2[52] = swift_task_alloc(v5);
  v6 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v2[53] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[54] = v7;
  v2[55] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v2[56] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[57] = v9;
  v2[58] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ContinuousClock.Instant(0);
  v2[59] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[60] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[61] = swift_task_alloc(v12);
  v2[62] = swift_task_alloc(v12);
  v2[63] = swift_task_alloc(v12);
  v2[64] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F0F00) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[65] = swift_task_alloc(v13);
  v2[66] = swift_task_alloc(v13);
  v2[67] = swift_task_alloc(v13);
  v2[68] = swift_task_alloc(v13);
  v2[69] = swift_task_alloc(v13);
  v14 = type metadata accessor for BeaconIdentifier(0);
  v2[70] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[71] = swift_task_alloc(v15);
  v2[72] = swift_task_alloc(v15);
  v16 = type metadata accessor for ContinuousClock(0);
  v2[73] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[74] = v17;
  v2[75] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010EF3F8);
  v2[76] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v2[77] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v2[78] = v20;
  v21 = *(_QWORD *)(v20 + 64);
  v2[79] = v21;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[80] = swift_task_alloc(v22);
  v2[81] = swift_task_alloc(v22);
  v2[82] = swift_task_alloc(v22);
  v2[83] = swift_task_alloc(v22);
  return swift_task_switch(sub_1006A83B8, v1, 0);
}

uint64_t sub_1006A83B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);

  v1 = *(_QWORD *)(v0 + 624);
  v2 = *(_QWORD *)(v0 + 616);
  v3 = *(_QWORD *)(v0 + 608);
  sub_10000F9B8(*(_QWORD *)(v0 + 352) + *(int *)(*(_QWORD *)(v0 + 368) + 52), v3, &qword_1010EF3F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 608), &qword_1010EF3F8);
    v4 = *(_QWORD *)(v0 + 656);
    v5 = *(_QWORD *)(v0 + 648);
    v6 = *(_QWORD *)(v0 + 640);
    v7 = *(_QWORD *)(v0 + 608);
    v8 = *(_QWORD *)(v0 + 600);
    v9 = *(_QWORD *)(v0 + 576);
    v10 = *(_QWORD *)(v0 + 568);
    v11 = *(_QWORD *)(v0 + 552);
    v12 = *(_QWORD *)(v0 + 544);
    v16 = *(_QWORD *)(v0 + 536);
    v17 = *(_QWORD *)(v0 + 528);
    v18 = *(_QWORD *)(v0 + 520);
    v19 = *(_QWORD *)(v0 + 512);
    v20 = *(_QWORD *)(v0 + 504);
    v21 = *(_QWORD *)(v0 + 496);
    v22 = *(_QWORD *)(v0 + 488);
    v23 = *(_QWORD *)(v0 + 464);
    v24 = *(_QWORD *)(v0 + 440);
    v25 = *(_QWORD *)(v0 + 416);
    v26 = *(_QWORD *)(v0 + 408);
    v27 = *(_QWORD *)(v0 + 400);
    v28 = *(_QWORD *)(v0 + 392);
    v29 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 664));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_1000126EC(*(_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 664), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v14 = qword_1010EA5B0;
    swift_retain();
    if (v14 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 248, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 120))
    {
      sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
      swift_release();
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v30 = (uint64_t (*)(void))((char *)&dword_1010EBC00 + dword_1010EBC00);
      v15 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
      *(_QWORD *)(v0 + 672) = v15;
      *v15 = v0;
      v15[1] = sub_1006A869C;
      return v30();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1006A869C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 672);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 680) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006A86FC, v3, 0);
}

uint64_t sub_1006A86FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 680))
  {
    v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()(v2);
    v3 = (_QWORD *)swift_task_alloc(dword_101103DE4);
    *(_QWORD *)(v0 + 688) = v3;
    *v3 = v0;
    v3[1] = sub_1006A89A4;
    return sub_1006A75A8(*(_QWORD *)(v0 + 664));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v5 = sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 664);
    if (v8)
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No ObservationStoreService available!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_1000126B0(v9, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v11 = *(_QWORD *)(v0 + 656);
    v12 = *(_QWORD *)(v0 + 648);
    v13 = *(_QWORD *)(v0 + 640);
    v14 = *(_QWORD *)(v0 + 608);
    v15 = *(_QWORD *)(v0 + 600);
    v16 = *(_QWORD *)(v0 + 576);
    v17 = *(_QWORD *)(v0 + 568);
    v18 = *(_QWORD *)(v0 + 552);
    v19 = *(_QWORD *)(v0 + 544);
    v20 = *(_QWORD *)(v0 + 536);
    v21 = *(_QWORD *)(v0 + 528);
    v22 = *(_QWORD *)(v0 + 520);
    v23 = *(_QWORD *)(v0 + 512);
    v24 = *(_QWORD *)(v0 + 504);
    v25 = *(_QWORD *)(v0 + 496);
    v26 = *(_QWORD *)(v0 + 488);
    v27 = *(_QWORD *)(v0 + 464);
    v28 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 416);
    v30 = *(_QWORD *)(v0 + 408);
    v31 = *(_QWORD *)(v0 + 400);
    v32 = *(_QWORD *)(v0 + 392);
    v33 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 664));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006A89A4(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 688));
  v5 = *(_QWORD *)(v4 + 360);
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = sub_1006AAA68;
  }
  else
  {
    *(_BYTE *)(v4 + 801) = a1 & 1;
    v6 = sub_1006A8A24;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1006A8A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uid_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  __objc2_ivar_list **p_ivars;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t (*v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t (__cdecl *v116)();
  uint64_t v117;

  *(_BYTE *)(v0 + 802) = *(_BYTE *)(v0 + 801);
  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = getuid();
  sub_100A06500(v5);
  v6 = v2 + *(int *)(v3 + 20);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v0 + 696) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, v1, v7);
  v8 = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  *(_QWORD *)(v0 + 704) = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  v9 = (uint64_t *)(v4 + v8);
  v10 = swift_beginAccess(v4 + v8, v0 + 224, 0, 0);
  v11 = *v9;
  if (*(_QWORD *)(*v9 + 16))
  {
    v12 = *(_QWORD *)(v0 + 576);
    swift_bridgeObjectRetain(v11);
    v13 = sub_1005191EC(v12);
    v14 = *(_QWORD *)(v0 + 552);
    v15 = *(_QWORD *)(v0 + 368);
    v16 = *(_QWORD *)(v0 + 376);
    if ((v17 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v11 + 56) + *(_QWORD *)(v16 + 72) * v13, *(_QWORD *)(v0 + 552), type metadata accessor for ObservedAdvertisement);
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v18(v14, 0, 1, v15);
    }
    else
    {
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v18(*(_QWORD *)(v0 + 552), 1, 1, v15);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 376) + 56);
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))v18)(*(_QWORD *)(v0 + 552), 1, 1, *(_QWORD *)(v0 + 368), v10);
  }
  *(_QWORD *)(v0 + 712) = v18;
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 376);
  sub_10000F9B8(*(_QWORD *)(v0 + 552), v19, &qword_1010F0F00);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  *(_QWORD *)(v0 + 720) = v22;
  LODWORD(v20) = v22(v19, 1, v20);
  v23 = sub_100004048(v19, &qword_1010F0F00);
  if ((_DWORD)v20 == 1)
  {
    ContinuousClock.now.getter(v23);
    v24 = (_QWORD *)swift_task_alloc(dword_10111BAF4);
    *(_QWORD *)(v0 + 728) = v24;
    *v24 = v0;
    v24[1] = sub_1006A96BC;
    return sub_100C654F4(*(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 576));
  }
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v27 = sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "insert(observedAdvertisement:) Using cached lastAdvertisement", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  if (*(_BYTE *)(v0 + 802) == 1)
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v31 = *(_QWORD *)(v0 + 664);
    v32 = *(_QWORD *)(v0 + 656);
    sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
    v33 = sub_10005972C(v31, v32, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = *(_QWORD *)(v0 + 696);
      v37 = *(_QWORD *)(v0 + 656);
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(32, -1);
      v117 = v39;
      *(_DWORD *)v38 = 141558275;
      *(_QWORD *)(v0 + 336) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v36, v40);
      *(_QWORD *)(v0 + 344) = sub_100016940(v41, v42, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v37, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Managed periphereral: %{private,mask.hash}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 656), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    v56 = (_QWORD *)swift_task_alloc(dword_101103DF4);
    *(_QWORD *)(v0 + 744) = v56;
    *v56 = v0;
    v56[1] = sub_1006AA440;
    return sub_1006AC4D0(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 352));
  }
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v43 = *(_QWORD *)(v0 + 664);
  v44 = *(_QWORD *)(v0 + 648);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  v45 = sub_10005972C(v43, v44, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.info.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = *(_QWORD *)(v0 + 696);
    v49 = *(_QWORD *)(v0 + 648);
    v50 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(32, -1);
    v117 = v51;
    *(_DWORD *)v50 = 141558275;
    *(_QWORD *)(v0 + 320) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v50 + 4, v50 + 12);
    *(_WORD *)(v50 + 12) = 2081;
    v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v48, v52);
    *(_QWORD *)(v0 + 328) = sub_100016940(v53, v54, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v49, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Not a managed periphereral: %{private,mask.hash}s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    v55 = v51;
    p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 648), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  v57 = *(_QWORD *)(v0 + 360);
  v58 = *(_QWORD *)(v57 + *(_QWORD *)(v0 + 704));
  if (!*(_QWORD *)(v58 + 16))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 368));
LABEL_31:
    v66 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v67 = *(_QWORD *)(v0 + 576);
    v68 = *(_QWORD *)(v0 + 568);
    v69 = *(_QWORD *)(v0 + 520);
    v70 = *(_QWORD *)(v0 + 368);
    v71 = *(_QWORD *)(v0 + 352);
    v72 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_100004048(*(_QWORD *)(v0 + 528), &qword_1010F0F00);
    sub_10005972C(v67, v68, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v71, v69, type metadata accessor for ObservedAdvertisement);
    v66(v69, 0, 1, v70);
    swift_beginAccess(v72, v0 + 200, 33, 0);
    sub_1000FEDAC(v69, v68);
    swift_endAccess(v0 + 200);
    v73 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 760) = v73;
    v74 = sub_1006AA5B8;
LABEL_32:
    *v73 = v0;
    v73[1] = v74;
    return sub_1006ACE6C(*(_QWORD *)(v0 + 352));
  }
  v59 = *(_QWORD *)(v0 + 576);
  swift_bridgeObjectRetain(*(_QWORD *)(v57 + *(_QWORD *)(v0 + 704)));
  v60 = sub_1005191EC(v59);
  if ((v61 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v58 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 376) + 72) * v60, *(_QWORD *)(v0 + 528), type metadata accessor for ObservedAdvertisement);
    v62 = 0;
  }
  else
  {
    v62 = 1;
  }
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  v64 = *(_QWORD *)(v0 + 528);
  v65 = *(_QWORD *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v64, v62, 1, v65);
  swift_bridgeObjectRelease();
  if (v63(v64, 1, v65) == 1)
    goto LABEL_31;
  v75 = *(_QWORD *)(v0 + 416);
  v76 = *(_QWORD *)(v0 + 368);
  v77 = *(_QWORD *)(v0 + 352);
  sub_1000126EC(*(_QWORD *)(v0 + 528), v75, type metadata accessor for ObservedAdvertisement);
  v78 = *(int *)(v76 + 44);
  v79 = v77 + v78;
  v80 = v75 + v78;
  v81 = type metadata accessor for Date(0);
  v82 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v79, v80, v81, v82) & 1) == 0)
  {
    v107 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v108 = *(_QWORD *)(v0 + 568);
    v109 = *(_QWORD *)(v0 + 520);
    v110 = *(_QWORD *)(v0 + 368);
    v111 = *(_QWORD *)(v0 + 352);
    v112 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_10005972C(*(_QWORD *)(v0 + 576), v108, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v111, v109, type metadata accessor for ObservedAdvertisement);
    v107(v109, 0, 1, v110);
    swift_beginAccess(v112, v0 + 176, 33, 0);
    sub_1000FEDAC(v109, v108);
    swift_endAccess(v0 + 176);
    v73 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 752) = v73;
    v74 = sub_1006AA4AC;
    goto LABEL_32;
  }
  v115 = (__int128 *)(v0 + 56);
  if (p_ivars[455] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v83 = *(_QWORD *)(v0 + 408);
  v84 = *(_QWORD *)(v0 + 416);
  v86 = *(_QWORD *)(v0 + 392);
  v85 = *(_QWORD *)(v0 + 400);
  v87 = *(_QWORD *)(v0 + 384);
  v88 = *(_QWORD *)(v0 + 352);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  sub_10005972C(v88, v83, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v84, v85, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v88, v86, type metadata accessor for ObservedAdvertisement);
  v89 = sub_10005972C(v84, v87, type metadata accessor for ObservedAdvertisement);
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.debug.getter(v90);
  v92 = os_log_type_enabled(v90, v91);
  v93 = *(_QWORD *)(v0 + 408);
  v94 = *(_QWORD *)(v0 + 416);
  v96 = *(_QWORD *)(v0 + 392);
  v95 = *(_QWORD *)(v0 + 400);
  v97 = *(_QWORD *)(v0 + 384);
  if (v92)
  {
    v98 = swift_slowAlloc(42, -1);
    v114 = swift_slowAlloc(64, -1);
    v117 = v114;
    *(_DWORD *)v98 = 136315906;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 288) = sub_100016940(v99, v100, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v93, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v98 + 12) = 2080;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 296) = sub_100016940(v101, v102, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v98 + 14, v98 + 22);
    swift_bridgeObjectRelease();
    v103 = sub_1000126B0(v95, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v98 + 22) = 2048;
    v104 = Date.epoch.getter(v103);
    sub_1000126B0(v96, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 272) = v104;
    v105 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v98 + 24, v98 + 32);
    *(_WORD *)(v98 + 32) = 2048;
    v106 = Date.epoch.getter(v105);
    sub_1000126B0(v97, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 312) = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v98 + 34, v98 + 42);
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v98, 0x2Au);
    swift_arrayDestroy(v114, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    swift_slowDealloc(v98, -1, -1);

  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v96, type metadata accessor for ObservedAdvertisement);

    sub_1000126B0(v95, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v93, type metadata accessor for ObservedAdvertisement);
  }
  sub_1000126B0(v94, type metadata accessor for ObservedAdvertisement);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v115, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC(v115, v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v116 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v113 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 768) = v113;
    *v113 = v0;
    v113[1] = sub_1006AA6B4;
    return v116();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006A96BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 728);
  *(_QWORD *)(*v1 + 736) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1006AB6FC;
  else
    v4 = sub_1006A9720;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 360), 0);
}

uint64_t sub_1006A9720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t (*v76)();
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  _BOOL4 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  os_log_type_t type;
  uint64_t typea;
  os_log_type_t v121[8];
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 *v129;
  uint64_t (*v130)(void);
  uint64_t v131;

  v125 = v0 + 304;
  v126 = v0 + 312;
  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 536);
  sub_100004048(v1, &qword_1010F0F00);
  v3 = sub_100005CF0(v2, v1, &qword_1010F0F00);
  ContinuousClock.now.getter(v3);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v124 = v0 + 336;
  v4 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 512);
  v7 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 496);
  v8 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 480);
  v11 = *(_QWORD *)(v0 + 456);
  v10 = *(_QWORD *)(v0 + 464);
  v12 = *(_QWORD *)(v0 + 448);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7440);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v6, v5, v8);
  v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v7, v4, v8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  v18 = os_log_type_enabled(v16, v17);
  v20 = *(_QWORD *)(v0 + 504);
  v19 = *(_QWORD *)(v0 + 512);
  v22 = *(_QWORD *)(v0 + 488);
  v21 = *(_QWORD *)(v0 + 496);
  v23 = *(_QWORD *)(v0 + 472);
  v127 = *(_QWORD *)(v0 + 480);
  v24 = *(_QWORD *)(v0 + 464);
  v128 = *(_QWORD *)(v0 + 456);
  v25 = *(_QWORD *)(v0 + 448);
  if (v18)
  {
    v122 = *(_QWORD *)(v0 + 464);
    v26 = *(_QWORD *)(v0 + 440);
    v115 = *(_QWORD *)(v0 + 432);
    v116 = *(_QWORD *)(v0 + 424);
    type = v17;
    *(_QWORD *)v121 = *(_QWORD *)(v0 + 448);
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v118 = swift_slowAlloc(32, -1);
    v131 = v118;
    *(_DWORD *)v27 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    v28 = sub_100006204(&qword_101116030, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v29 = static Duration.description<A>(_:_:units:)(v21, v22, v26, v23, v28);
    v117 = v20;
    v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v26, v116);
    *(_QWORD *)(v0 + 304) = sub_100016940(v29, v31, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, v126, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease();
    v32 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v32(v21, v23);
    v32(v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v16, type, "insert(observedAdvertisement:) fetch: %{public}s", v27, 0xCu);
    swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    (*(void (**)(uint64_t, os_log_type_t *))(v128 + 8))(v122, *(os_log_type_t **)v121);
    v32(v117, v23);
  }
  else
  {

    v32 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v32(v21, v23);
    v32(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v24, v25);
    v32(v20, v23);
  }
  v32(v19, v23);
  if (*(_BYTE *)(v0 + 802) == 1)
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v33 = *(_QWORD *)(v0 + 664);
    v34 = *(_QWORD *)(v0 + 656);
    sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
    v35 = sub_10005972C(v33, v34, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = *(_QWORD *)(v0 + 696);
      v39 = *(_QWORD *)(v0 + 656);
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(32, -1);
      v131 = v41;
      *(_DWORD *)v40 = 141558275;
      *(_QWORD *)(v0 + 336) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v0 + 344, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2081;
      v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v38, v42);
      *(_QWORD *)(v0 + 344) = sub_100016940(v43, v44, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Managed periphereral: %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 656), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    v57 = (_QWORD *)swift_task_alloc(dword_101103DF4);
    *(_QWORD *)(v0 + 744) = v57;
    *v57 = v0;
    v57[1] = sub_1006AA440;
    return sub_1006AC4D0(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 352));
  }
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v45 = *(_QWORD *)(v0 + 664);
  v46 = *(_QWORD *)(v0 + 648);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  v47 = sub_10005972C(v45, v46, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.info.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    v50 = *(_QWORD *)(v0 + 696);
    v51 = *(_QWORD *)(v0 + 648);
    v52 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(32, -1);
    v131 = v53;
    *(_DWORD *)v52 = 141558275;
    *(_QWORD *)(v0 + 320) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v52 + 4, v52 + 12);
    *(_WORD *)(v52 + 12) = 2081;
    v54 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v50, v54);
    *(_QWORD *)(v0 + 328) = sub_100016940(v55, v56, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v124, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Not a managed periphereral: %{private,mask.hash}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 648), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  v59 = *(_QWORD *)(v0 + 360);
  v60 = *(_QWORD *)(v59 + *(_QWORD *)(v0 + 704));
  if (!*(_QWORD *)(v60 + 16))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 368));
LABEL_24:
    v68 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v69 = *(_QWORD *)(v0 + 576);
    v70 = *(_QWORD *)(v0 + 568);
    v71 = *(_QWORD *)(v0 + 520);
    v72 = *(_QWORD *)(v0 + 368);
    v73 = *(_QWORD *)(v0 + 352);
    v74 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_100004048(*(_QWORD *)(v0 + 528), &qword_1010F0F00);
    sub_10005972C(v69, v70, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v73, v71, type metadata accessor for ObservedAdvertisement);
    v68(v71, 0, 1, v72);
    swift_beginAccess(v74, v0 + 200, 33, 0);
    sub_1000FEDAC(v71, v70);
    swift_endAccess(v0 + 200);
    v75 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 760) = v75;
    v76 = sub_1006AA5B8;
LABEL_25:
    *v75 = v0;
    v75[1] = v76;
    return sub_1006ACE6C(*(_QWORD *)(v0 + 352));
  }
  v61 = *(_QWORD *)(v0 + 576);
  swift_bridgeObjectRetain(*(_QWORD *)(v59 + *(_QWORD *)(v0 + 704)));
  v62 = sub_1005191EC(v61);
  if ((v63 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v60 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 376) + 72) * v62, *(_QWORD *)(v0 + 528), type metadata accessor for ObservedAdvertisement);
    v64 = 0;
  }
  else
  {
    v64 = 1;
  }
  v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  v66 = *(_QWORD *)(v0 + 528);
  v67 = *(_QWORD *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v66, v64, 1, v67);
  swift_bridgeObjectRelease();
  if (v65(v66, 1, v67) == 1)
    goto LABEL_24;
  v77 = *(_QWORD *)(v0 + 416);
  v78 = *(_QWORD *)(v0 + 368);
  v79 = *(_QWORD *)(v0 + 352);
  sub_1000126EC(*(_QWORD *)(v0 + 528), v77, type metadata accessor for ObservedAdvertisement);
  v80 = *(int *)(v78 + 44);
  v81 = v79 + v80;
  v82 = v77 + v80;
  v83 = type metadata accessor for Date(0);
  v84 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v81, v82, v83, v84) & 1) == 0)
  {
    v108 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v109 = *(_QWORD *)(v0 + 568);
    v110 = *(_QWORD *)(v0 + 520);
    v111 = *(_QWORD *)(v0 + 368);
    v112 = *(_QWORD *)(v0 + 352);
    v113 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_10005972C(*(_QWORD *)(v0 + 576), v109, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v112, v110, type metadata accessor for ObservedAdvertisement);
    v108(v110, 0, 1, v111);
    swift_beginAccess(v113, v0 + 176, 33, 0);
    sub_1000FEDAC(v110, v109);
    swift_endAccess(v0 + 176);
    v75 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 752) = v75;
    v76 = sub_1006AA4AC;
    goto LABEL_25;
  }
  v129 = (__int128 *)(v0 + 56);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v85 = *(_QWORD *)(v0 + 408);
  v86 = *(_QWORD *)(v0 + 416);
  v88 = *(_QWORD *)(v0 + 392);
  v87 = *(_QWORD *)(v0 + 400);
  v89 = *(_QWORD *)(v0 + 384);
  v90 = *(_QWORD *)(v0 + 352);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  sub_10005972C(v90, v85, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v86, v87, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v90, v88, type metadata accessor for ObservedAdvertisement);
  v91 = sub_10005972C(v86, v89, type metadata accessor for ObservedAdvertisement);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.debug.getter(v92);
  v94 = os_log_type_enabled(v92, v93);
  v95 = *(_QWORD *)(v0 + 408);
  v96 = *(_QWORD *)(v0 + 416);
  v97 = *(_QWORD *)(v0 + 392);
  v98 = *(_QWORD *)(v0 + 400);
  if (v94)
  {
    typea = *(_QWORD *)(v0 + 384);
    v99 = swift_slowAlloc(42, -1);
    v123 = swift_slowAlloc(64, -1);
    v131 = v123;
    *(_DWORD *)v99 = 136315906;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 288) = sub_100016940(v100, v101, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v99 + 4, v99 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v95, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v99 + 12) = 2080;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 296) = sub_100016940(v102, v103, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v125, v99 + 14, v99 + 22);
    swift_bridgeObjectRelease();
    v104 = sub_1000126B0(v98, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v99 + 22) = 2048;
    v105 = Date.epoch.getter(v104);
    sub_1000126B0(v97, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 272) = v105;
    v106 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v99 + 24, v99 + 32);
    *(_WORD *)(v99 + 32) = 2048;
    v107 = Date.epoch.getter(v106);
    sub_1000126B0(typea, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 312) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v126, v0 + 320, v99 + 34, v99 + 42);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v99, 0x2Au);
    swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v123, -1, -1);
    swift_slowDealloc(v99, -1, -1);

  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v97, type metadata accessor for ObservedAdvertisement);

    sub_1000126B0(v98, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v95, type metadata accessor for ObservedAdvertisement);
  }
  sub_1000126B0(v96, type metadata accessor for ObservedAdvertisement);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v129, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC(v129, v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v130 = (uint64_t (*)(void))((char *)&dword_1010EBB70 + dword_1010EBB70);
    v114 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 768) = v114;
    *v114 = v0;
    v114[1] = sub_1006AA6B4;
    return v130();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AA440()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 744));
  v3 = *(_QWORD *)(v2 + 360);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1006ABA74;
  }
  else
  {
    v4 = sub_1006AF754;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1006AA4AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 752));
  return swift_task_switch(sub_1006AA504, v1, 0);
}

uint64_t sub_1006AA504()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  sub_1000126B0(*(_QWORD *)(v0 + 416), type metadata accessor for ObservedAdvertisement);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBB70 + dword_1010EBB70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 768) = v2;
    *v2 = v0;
    v2[1] = sub_1006AA6B4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AA5B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 760));
  return swift_task_switch(sub_1006AA610, v1, 0);
}

uint64_t sub_1006AA610()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBB70 + dword_1010EBB70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 768) = v2;
    *v2 = v0;
    v2[1] = sub_1006AA6B4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AA6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 768);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 776) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006AA714, v3, 0);
}

uint64_t sub_1006AA714()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[97];
  v2 = v0[83];
  v3 = v0[80];
  v4 = v0[79];
  v5 = v0[78];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 17);
  sub_10005972C(v2, v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101088148, v7 + v4, v6 | 7);
  v0[98] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  sub_1000126EC(v3, v8 + v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[99] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v10 = v0;
  v10[1] = sub_1006AA818;
  return unsafeBlocking<A>(_:)(v0 + 100, sub_1006ADB48, v8, v11);
}

uint64_t sub_1006AA818()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 360);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 792));
  swift_release();
  return swift_task_switch(sub_1006AA87C, v1, 0);
}

uint64_t sub_1006AA87C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 600);
  v3 = *(_QWORD *)(v0 + 592);
  v4 = *(_QWORD *)(v0 + 584);
  v5 = *(_QWORD *)(v0 + 576);
  v6 = *(_QWORD *)(v0 + 552);
  swift_release();
  swift_release();
  sub_100004048(v6, &qword_1010F0F00);
  sub_1000126B0(v5, type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v7 = *(_QWORD *)(v0 + 656);
  v8 = *(_QWORD *)(v0 + 648);
  v9 = *(_QWORD *)(v0 + 640);
  v10 = *(_QWORD *)(v0 + 608);
  v11 = *(_QWORD *)(v0 + 600);
  v12 = *(_QWORD *)(v0 + 576);
  v13 = *(_QWORD *)(v0 + 568);
  v14 = *(_QWORD *)(v0 + 552);
  v15 = *(_QWORD *)(v0 + 544);
  v17 = *(_QWORD *)(v0 + 536);
  v18 = *(_QWORD *)(v0 + 528);
  v19 = *(_QWORD *)(v0 + 520);
  v20 = *(_QWORD *)(v0 + 512);
  v21 = *(_QWORD *)(v0 + 504);
  v22 = *(_QWORD *)(v0 + 496);
  v23 = *(_QWORD *)(v0 + 488);
  v24 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 440);
  v26 = *(_QWORD *)(v0 + 416);
  v27 = *(_QWORD *)(v0 + 408);
  v28 = *(_QWORD *)(v0 + 400);
  v29 = *(_QWORD *)(v0 + 392);
  v30 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 664));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006AAA68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uid_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  __objc2_ivar_list **p_ivars;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t (*v74)();
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t (__cdecl *v116)();
  uint64_t v117;

  *(_BYTE *)(v0 + 802) = 0;
  v1 = *(_QWORD *)(v0 + 664);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = getuid();
  sub_100A06500(v5);
  v6 = v2 + *(int *)(v3 + 20);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v0 + 696) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v6, v1, v7);
  v8 = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  *(_QWORD *)(v0 + 704) = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  v9 = (uint64_t *)(v4 + v8);
  v10 = swift_beginAccess(v4 + v8, v0 + 224, 0, 0);
  v11 = *v9;
  if (*(_QWORD *)(*v9 + 16))
  {
    v12 = *(_QWORD *)(v0 + 576);
    swift_bridgeObjectRetain(v11);
    v13 = sub_1005191EC(v12);
    v14 = *(_QWORD *)(v0 + 552);
    v15 = *(_QWORD *)(v0 + 368);
    v16 = *(_QWORD *)(v0 + 376);
    if ((v17 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v11 + 56) + *(_QWORD *)(v16 + 72) * v13, *(_QWORD *)(v0 + 552), type metadata accessor for ObservedAdvertisement);
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v18(v14, 0, 1, v15);
    }
    else
    {
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
      v18(*(_QWORD *)(v0 + 552), 1, 1, v15);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 376) + 56);
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))v18)(*(_QWORD *)(v0 + 552), 1, 1, *(_QWORD *)(v0 + 368), v10);
  }
  *(_QWORD *)(v0 + 712) = v18;
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 376);
  sub_10000F9B8(*(_QWORD *)(v0 + 552), v19, &qword_1010F0F00);
  v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  *(_QWORD *)(v0 + 720) = v22;
  LODWORD(v20) = v22(v19, 1, v20);
  v23 = sub_100004048(v19, &qword_1010F0F00);
  if ((_DWORD)v20 == 1)
  {
    ContinuousClock.now.getter(v23);
    v24 = (_QWORD *)swift_task_alloc(dword_10111BAF4);
    *(_QWORD *)(v0 + 728) = v24;
    *v24 = v0;
    v24[1] = sub_1006A96BC;
    return sub_100C654F4(*(_QWORD *)(v0 + 536), *(_QWORD *)(v0 + 576));
  }
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v27 = sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "insert(observedAdvertisement:) Using cached lastAdvertisement", v30, 2u);
    swift_slowDealloc(v30, -1, -1);
  }

  if (*(_BYTE *)(v0 + 802) == 1)
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v31 = *(_QWORD *)(v0 + 664);
    v32 = *(_QWORD *)(v0 + 656);
    sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
    v33 = sub_10005972C(v31, v32, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = *(_QWORD *)(v0 + 696);
      v37 = *(_QWORD *)(v0 + 656);
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(32, -1);
      v117 = v39;
      *(_DWORD *)v38 = 141558275;
      *(_QWORD *)(v0 + 336) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v36, v40);
      *(_QWORD *)(v0 + 344) = sub_100016940(v41, v42, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v37, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Managed periphereral: %{private,mask.hash}s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 656), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    v56 = (_QWORD *)swift_task_alloc(dword_101103DF4);
    *(_QWORD *)(v0 + 744) = v56;
    *v56 = v0;
    v56[1] = sub_1006AA440;
    return sub_1006AC4D0(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 352));
  }
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v43 = *(_QWORD *)(v0 + 664);
  v44 = *(_QWORD *)(v0 + 648);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  v45 = sub_10005972C(v43, v44, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.info.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = *(_QWORD *)(v0 + 696);
    v49 = *(_QWORD *)(v0 + 648);
    v50 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(32, -1);
    v117 = v51;
    *(_DWORD *)v50 = 141558275;
    *(_QWORD *)(v0 + 320) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v50 + 4, v50 + 12);
    *(_WORD *)(v50 + 12) = 2081;
    v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v53 = dispatch thunk of CustomStringConvertible.description.getter(v48, v52);
    *(_QWORD *)(v0 + 328) = sub_100016940(v53, v54, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v49, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Not a managed periphereral: %{private,mask.hash}s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    v55 = v51;
    p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 648), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  v57 = *(_QWORD *)(v0 + 360);
  v58 = *(_QWORD *)(v57 + *(_QWORD *)(v0 + 704));
  if (!*(_QWORD *)(v58 + 16))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 368));
LABEL_31:
    v66 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v67 = *(_QWORD *)(v0 + 576);
    v68 = *(_QWORD *)(v0 + 568);
    v69 = *(_QWORD *)(v0 + 520);
    v70 = *(_QWORD *)(v0 + 368);
    v71 = *(_QWORD *)(v0 + 352);
    v72 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_100004048(*(_QWORD *)(v0 + 528), &qword_1010F0F00);
    sub_10005972C(v67, v68, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v71, v69, type metadata accessor for ObservedAdvertisement);
    v66(v69, 0, 1, v70);
    swift_beginAccess(v72, v0 + 200, 33, 0);
    sub_1000FEDAC(v69, v68);
    swift_endAccess(v0 + 200);
    v73 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 760) = v73;
    v74 = sub_1006AA5B8;
LABEL_32:
    *v73 = v0;
    v73[1] = v74;
    return sub_1006ACE6C(*(_QWORD *)(v0 + 352));
  }
  v59 = *(_QWORD *)(v0 + 576);
  swift_bridgeObjectRetain(*(_QWORD *)(v57 + *(_QWORD *)(v0 + 704)));
  v60 = sub_1005191EC(v59);
  if ((v61 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v58 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 376) + 72) * v60, *(_QWORD *)(v0 + 528), type metadata accessor for ObservedAdvertisement);
    v62 = 0;
  }
  else
  {
    v62 = 1;
  }
  v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  v64 = *(_QWORD *)(v0 + 528);
  v65 = *(_QWORD *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v64, v62, 1, v65);
  swift_bridgeObjectRelease();
  if (v63(v64, 1, v65) == 1)
    goto LABEL_31;
  v75 = *(_QWORD *)(v0 + 416);
  v76 = *(_QWORD *)(v0 + 368);
  v77 = *(_QWORD *)(v0 + 352);
  sub_1000126EC(*(_QWORD *)(v0 + 528), v75, type metadata accessor for ObservedAdvertisement);
  v78 = *(int *)(v76 + 44);
  v79 = v77 + v78;
  v80 = v75 + v78;
  v81 = type metadata accessor for Date(0);
  v82 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v79, v80, v81, v82) & 1) == 0)
  {
    v107 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v108 = *(_QWORD *)(v0 + 568);
    v109 = *(_QWORD *)(v0 + 520);
    v110 = *(_QWORD *)(v0 + 368);
    v111 = *(_QWORD *)(v0 + 352);
    v112 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_10005972C(*(_QWORD *)(v0 + 576), v108, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v111, v109, type metadata accessor for ObservedAdvertisement);
    v107(v109, 0, 1, v110);
    swift_beginAccess(v112, v0 + 176, 33, 0);
    sub_1000FEDAC(v109, v108);
    swift_endAccess(v0 + 176);
    v73 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 752) = v73;
    v74 = sub_1006AA4AC;
    goto LABEL_32;
  }
  v115 = (__int128 *)(v0 + 56);
  if (p_ivars[455] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v83 = *(_QWORD *)(v0 + 408);
  v84 = *(_QWORD *)(v0 + 416);
  v86 = *(_QWORD *)(v0 + 392);
  v85 = *(_QWORD *)(v0 + 400);
  v87 = *(_QWORD *)(v0 + 384);
  v88 = *(_QWORD *)(v0 + 352);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  sub_10005972C(v88, v83, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v84, v85, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v88, v86, type metadata accessor for ObservedAdvertisement);
  v89 = sub_10005972C(v84, v87, type metadata accessor for ObservedAdvertisement);
  v90 = Logger.logObject.getter(v89);
  v91 = static os_log_type_t.debug.getter(v90);
  v92 = os_log_type_enabled(v90, v91);
  v93 = *(_QWORD *)(v0 + 408);
  v94 = *(_QWORD *)(v0 + 416);
  v96 = *(_QWORD *)(v0 + 392);
  v95 = *(_QWORD *)(v0 + 400);
  v97 = *(_QWORD *)(v0 + 384);
  if (v92)
  {
    v98 = swift_slowAlloc(42, -1);
    v114 = swift_slowAlloc(64, -1);
    v117 = v114;
    *(_DWORD *)v98 = 136315906;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 288) = sub_100016940(v99, v100, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v93, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v98 + 12) = 2080;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 296) = sub_100016940(v101, v102, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v98 + 14, v98 + 22);
    swift_bridgeObjectRelease();
    v103 = sub_1000126B0(v95, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v98 + 22) = 2048;
    v104 = Date.epoch.getter(v103);
    sub_1000126B0(v96, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 272) = v104;
    v105 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v98 + 24, v98 + 32);
    *(_WORD *)(v98 + 32) = 2048;
    v106 = Date.epoch.getter(v105);
    sub_1000126B0(v97, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 312) = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v98 + 34, v98 + 42);
    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v98, 0x2Au);
    swift_arrayDestroy(v114, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    swift_slowDealloc(v98, -1, -1);

  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v96, type metadata accessor for ObservedAdvertisement);

    sub_1000126B0(v95, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v93, type metadata accessor for ObservedAdvertisement);
  }
  sub_1000126B0(v94, type metadata accessor for ObservedAdvertisement);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v115, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC(v115, v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v116 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v113 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 768) = v113;
    *v113 = v0;
    v113[1] = sub_1006AA6B4;
    return v116();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AB6FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 480) + 8))(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 472));
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v1 = *(_QWORD *)(v0 + 736);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 736);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v6);
    v9 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 280) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not get latest advertisement: %@.", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }
  v11 = *(_QWORD *)(v0 + 664);
  v12 = *(_QWORD *)(v0 + 600);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 552);
  swift_errorRelease(*(_QWORD *)(v0 + 736));
  sub_100004048(v16, &qword_1010F0F00);
  sub_1000126B0(v15, type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  sub_1000126B0(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v17 = *(_QWORD *)(v0 + 656);
  v18 = *(_QWORD *)(v0 + 648);
  v19 = *(_QWORD *)(v0 + 640);
  v20 = *(_QWORD *)(v0 + 608);
  v21 = *(_QWORD *)(v0 + 600);
  v22 = *(_QWORD *)(v0 + 576);
  v23 = *(_QWORD *)(v0 + 568);
  v24 = *(_QWORD *)(v0 + 552);
  v25 = *(_QWORD *)(v0 + 544);
  v27 = *(_QWORD *)(v0 + 536);
  v28 = *(_QWORD *)(v0 + 528);
  v29 = *(_QWORD *)(v0 + 520);
  v30 = *(_QWORD *)(v0 + 512);
  v31 = *(_QWORD *)(v0 + 504);
  v32 = *(_QWORD *)(v0 + 496);
  v33 = *(_QWORD *)(v0 + 488);
  v34 = *(_QWORD *)(v0 + 464);
  v35 = *(_QWORD *)(v0 + 440);
  v36 = *(_QWORD *)(v0 + 416);
  v37 = *(_QWORD *)(v0 + 408);
  v38 = *(_QWORD *)(v0 + 400);
  v39 = *(_QWORD *)(v0 + 392);
  v40 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 664));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006ABA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)();
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  __int128 *v61;
  uint64_t (__cdecl *v62)();
  uint64_t v63;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704));
  if (!*(_QWORD *)(v1 + 16))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 712))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 368));
LABEL_7:
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v10 = *(_QWORD *)(v0 + 576);
    v11 = *(_QWORD *)(v0 + 568);
    v12 = *(_QWORD *)(v0 + 520);
    v13 = *(_QWORD *)(v0 + 368);
    v14 = *(_QWORD *)(v0 + 352);
    v15 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_100004048(*(_QWORD *)(v0 + 528), &qword_1010F0F00);
    sub_10005972C(v10, v11, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v14, v12, type metadata accessor for ObservedAdvertisement);
    v9(v12, 0, 1, v13);
    swift_beginAccess(v15, v0 + 200, 33, 0);
    sub_1000FEDAC(v12, v11);
    swift_endAccess(v0 + 200);
    v16 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 760) = v16;
    v17 = sub_1006AA5B8;
LABEL_8:
    *v16 = v0;
    v16[1] = v17;
    return sub_1006ACE6C(*(_QWORD *)(v0 + 352));
  }
  v2 = *(_QWORD *)(v0 + 576);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704)));
  v3 = sub_1005191EC(v2);
  if ((v4 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v1 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 376) + 72) * v3, *(_QWORD *)(v0 + 528), type metadata accessor for ObservedAdvertisement);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v7, v5, 1, v8);
  swift_bridgeObjectRelease();
  if (v6(v7, 1, v8) == 1)
    goto LABEL_7;
  v19 = *(_QWORD *)(v0 + 416);
  v20 = *(_QWORD *)(v0 + 368);
  v21 = *(_QWORD *)(v0 + 352);
  sub_1000126EC(*(_QWORD *)(v0 + 528), v19, type metadata accessor for ObservedAdvertisement);
  v22 = *(int *)(v20 + 44);
  v23 = v21 + v22;
  v24 = v19 + v22;
  v25 = type metadata accessor for Date(0);
  v26 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v23, v24, v25, v26) & 1) == 0)
  {
    v52 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 712);
    v53 = *(_QWORD *)(v0 + 568);
    v54 = *(_QWORD *)(v0 + 520);
    v55 = *(_QWORD *)(v0 + 368);
    v56 = *(_QWORD *)(v0 + 352);
    v57 = *(_QWORD *)(v0 + 360) + *(_QWORD *)(v0 + 704);
    sub_10005972C(*(_QWORD *)(v0 + 576), v53, type metadata accessor for BeaconIdentifier);
    sub_10005972C(v56, v54, type metadata accessor for ObservedAdvertisement);
    v52(v54, 0, 1, v55);
    swift_beginAccess(v57, v0 + 176, 33, 0);
    sub_1000FEDAC(v54, v53);
    swift_endAccess(v0 + 176);
    v16 = (_QWORD *)swift_task_alloc(dword_101103DEC);
    *(_QWORD *)(v0 + 752) = v16;
    v17 = sub_1006AA4AC;
    goto LABEL_8;
  }
  v61 = (__int128 *)(v0 + 56);
  if (qword_1010E9E38 != -1)
    swift_once(&qword_1010E9E38, sub_10069FCEC);
  v27 = *(_QWORD *)(v0 + 408);
  v28 = *(_QWORD *)(v0 + 416);
  v30 = *(_QWORD *)(v0 + 392);
  v29 = *(_QWORD *)(v0 + 400);
  v31 = *(_QWORD *)(v0 + 384);
  v32 = *(_QWORD *)(v0 + 352);
  sub_10001A9E8(*(_QWORD *)(v0 + 448), (uint64_t)qword_1011B7440);
  sub_10005972C(v32, v27, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v28, v29, type metadata accessor for ObservedAdvertisement);
  sub_10005972C(v32, v30, type metadata accessor for ObservedAdvertisement);
  v33 = sub_10005972C(v28, v31, type metadata accessor for ObservedAdvertisement);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  v37 = *(_QWORD *)(v0 + 408);
  v38 = *(_QWORD *)(v0 + 416);
  v40 = *(_QWORD *)(v0 + 392);
  v39 = *(_QWORD *)(v0 + 400);
  v41 = *(_QWORD *)(v0 + 384);
  if (v36)
  {
    v60 = *(_QWORD *)(v0 + 416);
    v42 = swift_slowAlloc(42, -1);
    v59 = swift_slowAlloc(64, -1);
    v63 = v59;
    *(_DWORD *)v42 = 136315906;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 288) = sub_100016940(v43, v44, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v37, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v42 + 12) = 2080;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 296) = sub_100016940(v45, v46, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease();
    v47 = sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v42 + 22) = 2048;
    v48 = Date.epoch.getter(v47);
    sub_1000126B0(v40, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 272) = v48;
    v49 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v42 + 24, v42 + 32);
    *(_WORD *)(v42 + 32) = 2048;
    v50 = Date.epoch.getter(v49);
    sub_1000126B0(v41, type metadata accessor for ObservedAdvertisement);
    *(_QWORD *)(v0 + 312) = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v42 + 34, v42 + 42);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Not caching because observation with equal or newer scanDate already cached.\nobserved: %s\nexisting: %s\nepochs: [observed: %lld, existing: %lld]", (uint8_t *)v42, 0x2Au);
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    v51 = v60;
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v40, type metadata accessor for ObservedAdvertisement);

    sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v37, type metadata accessor for ObservedAdvertisement);
    v51 = v38;
  }
  sub_1000126B0(v51, type metadata accessor for ObservedAdvertisement);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v61, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC(v61, v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v62 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
    v58 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
    *(_QWORD *)(v0 + 768) = v58;
    *v58 = v0;
    v58[1] = sub_1006AA6B4;
    return v62();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AC0CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 200) = v0;
  return swift_task_switch(sub_1006AC0E4, v0, 0);
}

uint64_t sub_1006AC0E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBDF0 + dword_1010EBDF0);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBDF4);
    *(_QWORD *)(v0 + 208) = v3;
    *v3 = v0;
    v3[1] = sub_1006AC1E4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AC1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006AC240, v3, 0);
}

uint64_t sub_1006AC240()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t (*v5)(void);

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 216))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1010EB95C);
    *(_QWORD *)(v0 + 224) = v2;
    *v2 = v0;
    v2[1] = sub_1006AC32C;
    return sub_10002890C();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v5 = (uint64_t (*)(void))((char *)&dword_1010EBDD8 + dword_1010EBDD8);
      v4 = (_QWORD *)swift_task_alloc(unk_1010EBDDC);
      *(_QWORD *)(v0 + 232) = v4;
      *v4 = v0;
      v4[1] = sub_1006AC430;
      return v5();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1006AC32C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_1006AC384, v1, 0);
}

uint64_t sub_1006AC384()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  swift_release();
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBDD8 + dword_1010EBDD8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBDDC);
    *(_QWORD *)(v0 + 232) = v2;
    *v2 = v0;
    v2[1] = sub_1006AC430;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AC430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006AC490, v3, 0);
}

uint64_t sub_1006AC490()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v1)
    swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006AC4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3[6] = a1;
  v3[7] = a2;
  v4 = type metadata accessor for UUID(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF3F8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v6);
  v3[12] = swift_task_alloc(v6);
  v7 = sub_10001A9A8(&qword_1010F0F00);
  v3[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ObservedAdvertisement(0);
  v3[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[15] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v10);
  v3[17] = swift_task_alloc(v10);
  v3[18] = swift_task_alloc(v10);
  v3[19] = swift_task_alloc(v10);
  v3[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_1006AC5E4, v2, 0);
}

uint64_t sub_1006AC5E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90[2];

  v1 = v0 + 32;
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  sub_10000F9B8(*(_QWORD *)(v0 + 48), v4, &qword_1010F0F00);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) != 1)
  {
    v21 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 56);
    sub_1000126EC(*(_QWORD *)(v0 + 104), v21, type metadata accessor for ObservedAdvertisement);
    v23 = *(_QWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 24);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = *(_QWORD *)(v22 + 24);
    if ((v24 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0x2000000000000000) != 0)
      {
        v88 = v0 + 32;
        sub_10012C644(v23, v24);
        sub_10012C644(v25, v26);
        v27 = v23;
        v28 = v24 & 0xDFFFFFFFFFFFFFFFLL;
LABEL_17:
        _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v27, v28);
        v87 = v40;
        v42 = *(_QWORD *)(v0 + 152);
        v41 = *(_QWORD *)(v0 + 160);
        v43 = *(_QWORD *)(v0 + 144);
        v44 = *(_QWORD *)(v0 + 56);
        sub_10012C494(v25, v26);
        sub_10012C494(v23, v24);
        sub_10005972C(v41, v42, type metadata accessor for ObservedAdvertisement);
        sub_10005972C(v44, v43, type metadata accessor for ObservedAdvertisement);
        v1 = v88;
        if ((v87 & 1) != 0)
        {
          v46 = *(_QWORD *)(v0 + 144);
          v45 = *(_QWORD *)(v0 + 152);
          v47 = *(unsigned __int8 *)(v45 + 34);
          v48 = *(_BYTE *)(v45 + 35);
          sub_1000126B0(v45, type metadata accessor for ObservedAdvertisement);
          v49 = *(unsigned __int8 *)(v46 + 34);
          v50 = *(_BYTE *)(v46 + 35);
          sub_1000126B0(v46, type metadata accessor for ObservedAdvertisement);
          if ((v48 & 1) != 0)
          {
            v1 = v88;
            if ((v50 & 1) != 0)
            {
LABEL_37:
              sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for ObservedAdvertisement);
              goto LABEL_32;
            }
          }
          else
          {
            if (v47 == v49)
              v85 = v50;
            else
              v85 = 1;
            v1 = v88;
            if ((v85 & 1) == 0)
              goto LABEL_37;
          }
LABEL_22:
          if (qword_1010E9F38 != -1)
            swift_once(&qword_1010E9F38, sub_1007A03F4);
          v52 = *(_QWORD *)(v0 + 160);
          v53 = *(_QWORD *)(v0 + 136);
          v54 = type metadata accessor for Logger(0);
          sub_10001A9E8(v54, (uint64_t)qword_1011B7660);
          v55 = sub_10005972C(v52, v53, type metadata accessor for ObservedAdvertisement);
          v56 = Logger.logObject.getter(v55);
          v57 = static os_log_type_t.default.getter(v56);
          v58 = os_log_type_enabled(v56, v57);
          v59 = *(_QWORD *)(v0 + 136);
          if (v58)
          {
            v60 = *(_QWORD *)(v0 + 112);
            v61 = *(_QWORD *)(v0 + 96);
            v62 = swift_slowAlloc(22, -1);
            v89 = swift_slowAlloc(32, -1);
            v90[0] = v89;
            *(_DWORD *)v62 = 141558275;
            *(_QWORD *)(v0 + 32) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v1, v0 + 40, v62 + 4, v62 + 12);
            *(_WORD *)(v62 + 12) = 2081;
            sub_10000F9B8(v59 + *(int *)(v60 + 52), v61, &qword_1010EF3F8);
            v63 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
            v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v61, 1, v63);
            v65 = *(_QWORD *)(v0 + 96);
            if (v64 == 1)
            {
              v66 = 0x6E776F6E6B6E55;
              sub_100004048(*(_QWORD *)(v0 + 96), &qword_1010EF3F8);
              v67 = 0xE700000000000000;
            }
            else
            {
              v68 = *(_QWORD *)(v0 + 72);
              v69 = *(_QWORD *)(v0 + 80);
              v70 = *(_QWORD *)(v0 + 64);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v68 + 16))(v69, *(_QWORD *)(v0 + 96), v70);
              v71 = sub_1000126B0(v65, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
              v66 = UUID.uuidString.getter(v71);
              v67 = v72;
              (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
            }
            v73 = *(_QWORD *)(v0 + 136);
            *(_QWORD *)(v0 + 40) = sub_100016940(v66, v67, v90);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v62 + 14, v62 + 22);
            swift_bridgeObjectRelease();
            sub_1000126B0(v73, type metadata accessor for ObservedAdvertisement);
            _os_log_impl((void *)&_mh_execute_header, v56, v57, "Change detected in reconciled advt for %{private,mask.hash}s. Posting SPManagedCBPeripheralChanged.", (uint8_t *)v62, 0x16u);
            swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v89, -1, -1);
            swift_slowDealloc(v62, -1, -1);
          }
          else
          {
            sub_1000126B0(*(_QWORD *)(v0 + 136), type metadata accessor for ObservedAdvertisement);
          }

          v74 = (void *)SPManagedCBPeripheralChangedNotification;
          v75 = type metadata accessor for DarwinNotificationHelper(0);
          swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
          DarwinNotificationHelper.init(notificationName:rateLimit:)(v74, 0.0);
          dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
          sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for ObservedAdvertisement);
          goto LABEL_31;
        }
LABEL_21:
        v51 = *(_QWORD *)(v0 + 152);
        sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for ObservedAdvertisement);
        sub_1000126B0(v51, type metadata accessor for ObservedAdvertisement);
        goto LABEL_22;
      }
    }
    else if ((v26 & 0x2000000000000000) == 0)
    {
      v88 = v0 + 32;
      sub_10012C644(v23, v24);
      sub_10012C644(v25, v26);
      v27 = v23;
      v28 = v24;
      goto LABEL_17;
    }
    v29 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 56);
    sub_10005972C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 152), type metadata accessor for ObservedAdvertisement);
    sub_10005972C(v30, v29, type metadata accessor for ObservedAdvertisement);
    goto LABEL_21;
  }
  sub_100004048(*(_QWORD *)(v0 + 104), &qword_1010F0F00);
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7660);
  v8 = sub_10005972C(v6, v5, type metadata accessor for ObservedAdvertisement);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 128);
  if (v11)
  {
    v13 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 88);
    v15 = swift_slowAlloc(22, -1);
    v86 = swift_slowAlloc(32, -1);
    v90[0] = v86;
    *(_DWORD *)v15 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    sub_10000F9B8(v12 + *(int *)(v13 + 52), v14, &qword_1010EF3F8);
    v16 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v14, 1, v16);
    v18 = *(_QWORD *)(v0 + 88);
    if (v17 == 1)
    {
      v19 = 0x6E776F6E6B6E55;
      sub_100004048(*(_QWORD *)(v0 + 88), &qword_1010EF3F8);
      v20 = 0xE700000000000000;
    }
    else
    {
      v32 = *(_QWORD *)(v0 + 72);
      v31 = *(_QWORD *)(v0 + 80);
      v33 = *(_QWORD *)(v0 + 64);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v31, v18, v33);
      v34 = sub_1000126B0(v18, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v19 = UUID.uuidString.getter(v34);
      v20 = v35;
      v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v1 = v0 + 32;
      v36(v31, v33);
    }
    v37 = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 24) = sub_100016940(v19, v20, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v1, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v37, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "First time we get an advertisement for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 128), type metadata accessor for ObservedAdvertisement);
  }

  v38 = (void *)SPManagedCBPeripheralChangedNotification;
  v39 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v38, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
LABEL_31:
  swift_release();
LABEL_32:
  v76 = *(_QWORD *)(v0 + 152);
  v78 = *(_QWORD *)(v0 + 136);
  v77 = *(_QWORD *)(v0 + 144);
  v79 = *(_QWORD *)(v0 + 128);
  v81 = *(_QWORD *)(v0 + 96);
  v80 = *(_QWORD *)(v0 + 104);
  v83 = *(_QWORD *)(v0 + 80);
  v82 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006ACE6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[19] = v5;
  v2[20] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F7AE0);
  v2[21] = v6;
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeySyncRecord(0);
  v2[23] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[24] = v8;
  v2[25] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF3F8);
  v2[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v2[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[28] = v11;
  v2[29] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006ACF6C, v1, 0);
}

uint64_t sub_1006ACF6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 240) = v3;
    *v3 = v0;
    v3[1] = sub_1006AD06C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006AD06C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006AD0CC, v3, 0);
}

uint64_t sub_1006AD0CC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v0 + 248))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E99B0 != -1)
      swift_once(&qword_1010E99B0, sub_100154004);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6988);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to get BeaconStoreActor!", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    goto LABEL_17;
  }
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 120);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v6 = type metadata accessor for ObservedAdvertisement(0);
  *(_QWORD *)(v0 + 256) = v6;
  sub_10000F9B8(v5 + *(int *)(v6 + 52), v4, &qword_1010EF3F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
  {
    v13 = *(_QWORD *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 216);
    sub_1000126EC(*(_QWORD *)(v0 + 208), v13, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    if (*(_BYTE *)(v13 + *(int *)(v14 + 20)))
    {
      if (*(_BYTE *)(v13 + *(int *)(v14 + 20)) == 1)
      {
        v15 = 0xE900000000000079;
        v16 = 0x7261646E6F636553;
      }
      else
      {
        v15 = 0xEF736E6F69746163;
        v16 = 0x6F4C657275636553;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, 0x7972616D697250, 0xE700000000000000, 0);
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        sub_1000126B0(*(_QWORD *)(v0 + 232), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        swift_release();
        goto LABEL_17;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    return swift_task_switch(sub_1006AD34C, *(_QWORD *)(v0 + 248), 0);
  }
  v7 = *(_QWORD *)(v0 + 208);
  swift_release();
  sub_100004048(v7, &qword_1010EF3F8);
LABEL_17:
  v19 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006AD34C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[31];
  v3 = v0[19];
  v2 = v0[20];
  v4 = v0[17];
  v5 = v0[18];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[29], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101088170, v7 + v3, v6 | 7);
  v0[33] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[34] = v10;
  *v10 = v0;
  v10[1] = sub_1006AD424;
  return unsafeBlocking<A>(_:)(v0[22], sub_1006ADBB0, v8, v0[21]);
}

uint64_t sub_1006AD424()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_release();
  return swift_task_switch(sub_1006AD484, v1, 0);
}

uint64_t sub_1006AD484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;

  v1 = *(_QWORD *)(v0 + 176);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 48))(v1, 1, *(_QWORD *)(v0 + 184)) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 232), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_release();
    sub_100004048(v1, &qword_1010F7AE0);
    v2 = *(_QWORD *)(v0 + 200);
    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 248);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 232);
    v10 = *(_QWORD *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 120);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 200), type metadata accessor for KeySyncRecord);
    v12 = *(_QWORD *)(v9 + *(int *)(v10 + 24));
    v13 = v11 + *(int *)(v8 + 44);
    v15 = (char *)&dword_10110D550 + dword_10110D550;
    v14 = (_QWORD *)swift_task_alloc(unk_10110D554);
    *(_QWORD *)(v0 + 280) = v14;
    *v14 = v0;
    v14[1] = sub_1006AD5D8;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v15)(*(_QWORD *)(v0 + 200), v13, v12, v7);
  }
}

uint64_t sub_1006AD5D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  return swift_task_switch(sub_1006AD630, v1, 0);
}

uint64_t sub_1006AD630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 200);
  swift_release();
  sub_1000126B0(v2, type metadata accessor for KeySyncRecord);
  sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  v3 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006AD6C4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v3 = *(_QWORD *)(result + 280);
    v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v5 = type metadata accessor for BeaconKeyManager(0);
    result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v3, v4, (char *)&type metadata for () + 8, v5);
    v6 = v7;
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1006AD748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  uint64_t v13;

  if (a1)
  {
    v12[2] = a1;
    v12[3] = a2;
    v12[4] = a3;
    v5 = sub_10001A9A8((uint64_t *)&unk_101115F20);
    OS_dispatch_queue.sync<A>(execute:)(sub_1006ADC3C, v12, v5);
    v6 = v13;
    v7 = *(_QWORD *)(v13 + 16);
    v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (v7)
    {
      sub_10005972C(v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a4, type metadata accessor for BeaconKeyManager.IndexInformation);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(a4, 0, 1, v8);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, 1, 1, v8);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    v10 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a4, 1, 1, v10);
  }
}

uint64_t sub_1006AD878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;

  if (a1)
    return sub_100DCF760(a2, a3, a4);
  v6 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a4, 1, 1, v6);
}

uint64_t sub_1006AD8D4(uint64_t a1)
{
  uint64_t v1;

  return sub_10072E348(a1, v1);
}

uint64_t sub_1006AD8DC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1006AD908(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101103D7C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1006A1B1C(a1, v4, v5, v6);
}

uint64_t sub_1006AD974(uint64_t a1)
{
  uint64_t v1;

  return sub_100112714(a1, v1);
}

uint64_t sub_1006AD97C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for DiscoveredObject(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  v7 = *(_QWORD *)(v0 + v4 + 16);
  if (v7 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v6 + 8), v7);
  v8 = v4 + v5;
  v9 = v6 + v1[7];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v6 + v1[8];
  v12 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  sub_10012C494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[14]), *(_QWORD *)(v6 + v1[14] + 8));
  return swift_deallocObject(v0, v8, v3 | 7);
}

uint64_t sub_1006ADA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DiscoveredObject(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_101103DAC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_1006A222C(v3, v4);
}

uint64_t sub_1006ADAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  swift_release();
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1006ADB48@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v4 = *(_QWORD *)(v1 + 16);
  if (v4)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80);
    result = sub_10020EEDC(v1 + ((v5 + 24) & ~v5));
  }
  *a1 = v4 == 0;
  return result;
}

uint64_t sub_1006ADBA4()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_1006ADBB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A82AB0(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1006ADBF0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1006ADC14@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1006AD6C4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1006ADC20@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1006AD878(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1006ADC30@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1006AD748(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1006ADC3C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100DCEF5C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1006ADC58(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2[16] = a1;
  v2[17] = v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101100320) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v3);
  v2[19] = swift_task_alloc(v3);
  v4 = type metadata accessor for ObservedAdvertisement(0);
  v2[20] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[21] = swift_task_alloc(v5);
  v2[22] = swift_task_alloc(v5);
  v2[23] = swift_task_alloc(v5);
  v2[24] = swift_task_alloc(v5);
  v2[25] = swift_task_alloc(v5);
  v2[26] = swift_task_alloc(v5);
  v2[27] = swift_task_alloc(v5);
  v6 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v2[28] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[29] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[30] = swift_task_alloc(v8);
  v2[31] = swift_task_alloc(v8);
  v2[32] = swift_task_alloc(v8);
  v2[33] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1011091A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[34] = swift_task_alloc(v9);
  v2[35] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF3F8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[36] = swift_task_alloc(v10);
  v2[37] = swift_task_alloc(v10);
  return swift_task_switch(sub_1006ADDEC, v1, 0);
}

uint64_t sub_1006ADDEC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((sub_100159074(1) & 1) != 0)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_101103E14);
    *(_QWORD *)(v0 + 304) = v1;
    *v1 = v0;
    v1[1] = sub_1006AE0B4;
    return sub_1006A60C0(*(_QWORD *)(v0 + 128));
  }
  else
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7440);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v28 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000036, 0x8000000100EC2BE0, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cannot save observedAdvertisement. Missing entitlement: %{public}s.", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = sub_100159E20();
    v27 = swift_allocError(&type metadata for AdvertisementCacheService.AdvertisementCacheServiceError, v9, 0, 0);
    *v10 = 0;
    swift_willThrow(v27);
    v11 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 280);
    v15 = *(_QWORD *)(v0 + 256);
    v14 = *(_QWORD *)(v0 + 264);
    v17 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 248);
    v18 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 200);
    v21 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 176);
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006AE0B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  return swift_task_switch(sub_1006AE10C, v1, 0);
}

uint64_t sub_1006AE10C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[16];
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101103DBC);
  v0[39] = v4;
  *v4 = v0;
  v4[1] = sub_1006AE174;
  return sub_1006A3F94(v0[35], v3, v2);
}

uint64_t sub_1006AE174()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  return swift_task_switch(sub_1006AE1CC, v1, 0);
}

uint64_t sub_1006AE1CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  __int16 v45;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 232);
  sub_10000F9B8(*(_QWORD *)(v0 + 280), v1, &qword_1011091A0);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = *(_QWORD *)(v0 + 272);
  if (v4 == 1)
  {
    v6 = *(_QWORD *)(v0 + 128);
    sub_100004048(v5, &qword_1011091A0);
    if ((*(_BYTE *)(v6 + 31) & 0x20) != 0
      || (v7 = *(_QWORD *)(v0 + 144),
          sub_10000F9B8(*(_QWORD *)(v0 + 128) + *(int *)(*(_QWORD *)(v0 + 160) + 48), v7, (uint64_t *)&unk_101100320),
          v8 = type metadata accessor for ObservedAdvertisement.Location(0),
          v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8),
          sub_100004048(v7, (uint64_t *)&unk_101100320),
          v9 == 1))
    {
      sub_100004048(*(_QWORD *)(v0 + 280), &qword_1011091A0);
      v10 = *(_QWORD *)(v0 + 288);
      v12 = *(_QWORD *)(v0 + 272);
      v11 = *(_QWORD *)(v0 + 280);
      v14 = *(_QWORD *)(v0 + 256);
      v13 = *(_QWORD *)(v0 + 264);
      v15 = *(_QWORD *)(v0 + 240);
      v16 = *(_QWORD *)(v0 + 248);
      v18 = *(_QWORD *)(v0 + 208);
      v17 = *(_QWORD *)(v0 + 216);
      v35 = *(_QWORD *)(v0 + 200);
      v36 = *(_QWORD *)(v0 + 192);
      v37 = *(_QWORD *)(v0 + 184);
      v38 = *(_QWORD *)(v0 + 176);
      v40 = *(_QWORD *)(v0 + 168);
      v42 = *(_QWORD *)(v0 + 152);
      v44 = *(_QWORD *)(v0 + 144);
      swift_task_dealloc(*(_QWORD *)(v0 + 296));
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v16);
      swift_task_dealloc(v15);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v40);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 296);
      v22 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
      v23 = *(_QWORD *)(v0 + 296);
      v25 = *(int **)(v0 + 160);
      v24 = *(_QWORD *)(v0 + 168);
      v26 = *(_QWORD *)(v0 + 128);
      v27 = *(_BYTE *)(v26 + 9);
      v28 = *(_QWORD *)(v26 + 16);
      v29 = *(_QWORD *)(v26 + 24);
      v45 = *(_WORD *)(v26 + 32);
      v43 = *(_BYTE *)(v26 + 34);
      v41 = *(_BYTE *)(v26 + 35);
      v39 = *(_DWORD *)(v26 + 36);
      v30 = v25[11];
      v31 = v26 + v30;
      v32 = v24 + v30;
      v33 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, v31, v33);
      LOBYTE(v31) = *(_BYTE *)(v26 + v25[14]);
      sub_10000F9B8(v26 + v25[12], v24 + v25[12], (uint64_t *)&unk_101100320);
      sub_10000F9B8(v23, v24 + v25[13], &qword_1010EF3F8);
      *(_QWORD *)v24 = 0;
      *(_BYTE *)(v24 + 8) = 1;
      *(_BYTE *)(v24 + 9) = v27;
      *(_QWORD *)(v24 + 16) = v28;
      *(_QWORD *)(v24 + 24) = v29;
      *(_WORD *)(v24 + 32) = v45;
      *(_BYTE *)(v24 + 34) = v43;
      *(_BYTE *)(v24 + 35) = v41;
      *(_DWORD *)(v24 + 36) = v39;
      *(_BYTE *)(v24 + v25[14]) = v31;
      sub_10012C644(v28, v29);
      v34 = (_QWORD *)swift_task_alloc(dword_101103E1C);
      *(_QWORD *)(v0 + 328) = v34;
      *v34 = v0;
      v34[1] = sub_1006AF1FC;
      return sub_1006A6D74(*(_QWORD *)(v0 + 168));
    }
  }
  else
  {
    sub_1000126EC(v5, *(_QWORD *)(v0 + 264), type metadata accessor for BeaconKeyManager.IndexInformation);
    v20 = (_QWORD *)swift_task_alloc(dword_101103DCC);
    *(_QWORD *)(v0 + 320) = v20;
    *v20 = v0;
    v20[1] = sub_1006AE550;
    return sub_1006A4DCC(*(_QWORD *)(v0 + 264));
  }
}

uint64_t sub_1006AE550(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_BYTE *)(*(_QWORD *)v1 + 357) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006AE5B0, v3, 0);
}

uint64_t sub_1006AE5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  os_log_type_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  NSObject *v126;
  uint64_t v127;
  NSObject *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;

  if (*(_BYTE *)(v0 + 357) == 1)
  {
    v2 = *(_QWORD *)(v0 + 288);
    v1 = *(_QWORD *)(v0 + 296);
    v3 = *(_QWORD *)(v0 + 264);
    v119 = *(_QWORD *)(v0 + 224);
    v4 = (_QWORD *)(v3 + *(int *)(v119 + 20));
    v5 = v4[3];
    v6 = v4[4];
    sub_10001AA44(v4, v5);
    LOBYTE(v5) = sub_100ABA6B0(v5, v6);
    v7 = v4[3];
    v8 = v4[4];
    sub_10001AA44(v4, v7);
    dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 56), v7, *(_QWORD *)(v8 + 56));
    v9 = *(_QWORD *)(v0 + 56);
    v122 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v2, v3);
    v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
    *(_BYTE *)(v2 + *(int *)(v10 + 20)) = v5;
    *(_QWORD *)(v2 + *(int *)(v10 + 24)) = v9;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v2, 0, 1, v10);
    sub_100005CF0(v2, v1, &qword_1010EF3F8);
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v11 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 256);
    v12 = *(_QWORD *)(v0 + 264);
    v125 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 200);
    v130 = *(_QWORD *)(v0 + 184);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B7440);
    sub_10005972C(v11, v14, type metadata accessor for ObservedAdvertisement);
    sub_10005972C(v11, v15, type metadata accessor for ObservedAdvertisement);
    sub_10005972C(v11, v17, type metadata accessor for ObservedAdvertisement);
    sub_10005972C(v11, v16, type metadata accessor for ObservedAdvertisement);
    sub_10005972C(v12, v13, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10005972C(v12, v125, type metadata accessor for BeaconKeyManager.IndexInformation);
    v19 = sub_10005972C(v11, v130, type metadata accessor for ObservedAdvertisement);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v116 = v21;
      v126 = v20;
      v110 = v0 + 96;
      v111 = v0 + 104;
      v22 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 216);
      v112 = v0 + 112;
      v113 = v0 + 120;
      v108 = *(_QWORD *)(v0 + 200);
      v24 = swift_slowAlloc(88, -1);
      v114 = swift_slowAlloc(192, -1);
      v134 = v114;
      *(_DWORD *)v24 = 141560067;
      *(_QWORD *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      v25 = *(_QWORD *)(v23 + 16);
      v26 = *(_QWORD *)(v23 + 24);
      sub_10012C644(v25, v26);
      v27 = sub_1001B495C(v25, v26);
      v29 = v28;
      sub_10012C494(v25, v26);
      *(_QWORD *)(v0 + 72) = sub_100016940(v27, v29, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v23, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 22) = 2082;
      v30 = sub_1000AF25C(*(_BYTE *)(v22 + 32) & 0xB);
      v31 = sub_1000AEBCC(v30 & 0x10101FF);
      *(_QWORD *)(v0 + 80) = sub_100016940(v31, v32, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v24 + 24, v24 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v22, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 32) = 2082;
      if ((*(_BYTE *)(v108 + 35) & 1) != 0)
      {
        v33 = 0xE400000000000000;
        v34 = 1701736302;
      }
      else
      {
        *(_BYTE *)(v0 + 356) = *(_BYTE *)(*(_QWORD *)(v0 + 200) + 34);
        v74 = sub_100059570();
        v75 = FixedWidthInteger.data.getter(&type metadata for UInt8, v74);
        v77 = v76;
        v34 = Data.hexString.getter(v75, v76);
        v33 = v78;
        sub_10001BC14(v75, v77);
      }
      v79 = *(_QWORD *)(v0 + 256);
      v80 = *(_QWORD *)(v0 + 192);
      v81 = *(_QWORD *)(v0 + 200);
      v107 = *(_QWORD *)(v0 + 160);
      v109 = *(_QWORD *)(v0 + 184);
      v105 = *(_QWORD *)(v0 + 248);
      v106 = *(_QWORD *)(v0 + 152);
      *(_QWORD *)(v0 + 88) = sub_100016940(v34, v33, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v110, v24 + 34, v24 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v81, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 42) = 2082;
      v82 = sub_1000AEDC4(*(unsigned __int8 *)(v80 + 32));
      *(_QWORD *)(v0 + 96) = sub_100016940(v82, v83, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, v111, v24 + 44, v24 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v80, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 52) = 2082;
      v84 = (_QWORD *)(v79 + *(int *)(v119 + 20));
      v86 = v84[3];
      v85 = v84[4];
      sub_10001AA44(v84, v86);
      v87 = dispatch thunk of CustomStringConvertible.description.getter(v86, *(_QWORD *)(v85 + 16));
      *(_QWORD *)(v0 + 104) = sub_100016940(v87, v88, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, v112, v24 + 54, v24 + 62);
      swift_bridgeObjectRelease();
      sub_1000126B0(v79, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v24 + 62) = 2160;
      *(_QWORD *)(v0 + 112) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v113, v24 + 64, v24 + 72);
      *(_WORD *)(v24 + 72) = 2081;
      v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v122, v89);
      *(_QWORD *)(v0 + 120) = sub_100016940(v90, v91, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v113, v0 + 128, v24 + 74, v24 + 82);
      swift_bridgeObjectRelease();
      sub_1000126B0(v105, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v24 + 82) = 1024;
      sub_10000F9B8(v109 + *(int *)(v107 + 48), v106, (uint64_t *)&unk_101100320);
      v92 = type metadata accessor for ObservedAdvertisement.Location(0);
      LODWORD(v86) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 48))(v106, 1, v92) != 1;
      sub_100004048(v106, (uint64_t *)&unk_101100320);
      sub_1000126B0(v109, type metadata accessor for ObservedAdvertisement);
      *(_DWORD *)(v0 + 352) = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 356, v24 + 84, v24 + 88);
      _os_log_impl((void *)&_mh_execute_header, v126, v116, "\"Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public}s,\nindex: %{public}s, beacon: %{private,mask.hash}s,\nhasLocation: %{BOOL}d.", (uint8_t *)v24, 0x58u);
      swift_arrayDestroy(v114, 6, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      v58 = *(_QWORD *)(v0 + 248);
      v59 = *(_QWORD *)(v0 + 256);
      v61 = *(_QWORD *)(v0 + 208);
      v60 = *(_QWORD *)(v0 + 216);
      v63 = *(_QWORD *)(v0 + 192);
      v62 = *(_QWORD *)(v0 + 200);
      sub_1000126B0(*(_QWORD *)(v0 + 184), type metadata accessor for ObservedAdvertisement);
      sub_1000126B0(v60, type metadata accessor for ObservedAdvertisement);
      sub_1000126B0(v61, type metadata accessor for ObservedAdvertisement);
      sub_1000126B0(v62, type metadata accessor for ObservedAdvertisement);
      sub_1000126B0(v63, type metadata accessor for ObservedAdvertisement);
      sub_1000126B0(v59, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_1000126B0(v58, type metadata accessor for BeaconKeyManager.IndexInformation);

    }
    sub_1000126B0(*(_QWORD *)(v0 + 264), type metadata accessor for BeaconKeyManager.IndexInformation);
    v93 = *(_QWORD *)(v0 + 296);
    v95 = *(int **)(v0 + 160);
    v94 = *(_QWORD *)(v0 + 168);
    v96 = *(_QWORD *)(v0 + 128);
    v97 = *(_BYTE *)(v96 + 9);
    v98 = *(_QWORD *)(v96 + 16);
    v99 = *(_QWORD *)(v96 + 24);
    v133 = *(_WORD *)(v96 + 32);
    v129 = *(_BYTE *)(v96 + 34);
    v124 = *(_BYTE *)(v96 + 35);
    v121 = *(_DWORD *)(v96 + 36);
    v100 = v95[11];
    v101 = v96 + v100;
    v102 = v94 + v100;
    v103 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 16))(v102, v101, v103);
    LOBYTE(v101) = *(_BYTE *)(v96 + v95[14]);
    sub_10000F9B8(v96 + v95[12], v94 + v95[12], (uint64_t *)&unk_101100320);
    sub_10000F9B8(v93, v94 + v95[13], &qword_1010EF3F8);
    *(_QWORD *)v94 = 0;
    *(_BYTE *)(v94 + 8) = 1;
    *(_BYTE *)(v94 + 9) = v97;
    *(_QWORD *)(v94 + 16) = v98;
    *(_QWORD *)(v94 + 24) = v99;
    *(_WORD *)(v94 + 32) = v133;
    *(_BYTE *)(v94 + 34) = v129;
    *(_BYTE *)(v94 + 35) = v124;
    *(_DWORD *)(v94 + 36) = v121;
    *(_BYTE *)(v94 + v95[14]) = v101;
    sub_10012C644(v98, v99);
    v104 = (_QWORD *)swift_task_alloc(dword_101103E1C);
    *(_QWORD *)(v0 + 328) = v104;
    *v104 = v0;
    v104[1] = sub_1006AF1FC;
    return sub_1006A6D74(*(_QWORD *)(v0 + 168));
  }
  else
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v35 = *(_QWORD *)(v0 + 264);
    v36 = *(_QWORD *)(v0 + 240);
    v37 = *(_QWORD *)(v0 + 176);
    v38 = *(_QWORD *)(v0 + 128);
    v39 = type metadata accessor for Logger(0);
    sub_10001A9E8(v39, (uint64_t)qword_1011B7440);
    sub_10005972C(v35, v36, type metadata accessor for BeaconKeyManager.IndexInformation);
    v40 = sub_10005972C(v38, v37, type metadata accessor for ObservedAdvertisement);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.info.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v44 = *(_QWORD *)(v0 + 280);
    v45 = *(_QWORD *)(v0 + 240);
    v46 = *(_QWORD *)(v0 + 176);
    if (v43)
    {
      v131 = *(_QWORD *)(v0 + 280);
      v47 = swift_slowAlloc(42, -1);
      v127 = swift_slowAlloc(64, -1);
      v134 = v127;
      *(_DWORD *)v47 = 141558787;
      *(_QWORD *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v47 + 4, v47 + 12);
      *(_WORD *)(v47 + 12) = 2081;
      v48 = type metadata accessor for UUID(0);
      v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
      *(_QWORD *)(v0 + 32) = sub_100016940(v50, v51, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v47 + 14, v47 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v45, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v47 + 22) = 2160;
      *(_QWORD *)(v0 + 40) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v47 + 24, v47 + 32);
      *(_WORD *)(v47 + 32) = 2081;
      v52 = *(_QWORD *)(v46 + 16);
      v53 = *(_QWORD *)(v46 + 24);
      sub_10012C644(v52, v53);
      v54 = sub_1001B495C(v52, v53);
      v56 = v55;
      sub_10012C494(v52, v53);
      *(_QWORD *)(v0 + 48) = sub_100016940(v54, v56, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v47 + 34, v47 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v46, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Ignoring unsupported beacon %{private,mask.hash}s,\nadvertisement %{private,mask.hash}s!", (uint8_t *)v47, 0x2Au);
      swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v127, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      v57 = v131;
    }
    else
    {

      sub_1000126B0(v46, type metadata accessor for ObservedAdvertisement);
      sub_1000126B0(v45, type metadata accessor for BeaconKeyManager.IndexInformation);
      v57 = v44;
    }
    sub_100004048(v57, &qword_1011091A0);
    sub_1000126B0(*(_QWORD *)(v0 + 264), type metadata accessor for BeaconKeyManager.IndexInformation);
    v64 = *(_QWORD *)(v0 + 288);
    v66 = *(_QWORD *)(v0 + 272);
    v65 = *(_QWORD *)(v0 + 280);
    v68 = *(_QWORD *)(v0 + 256);
    v67 = *(_QWORD *)(v0 + 264);
    v69 = *(_QWORD *)(v0 + 240);
    v70 = *(_QWORD *)(v0 + 248);
    v72 = *(_QWORD *)(v0 + 208);
    v71 = *(_QWORD *)(v0 + 216);
    v115 = *(_QWORD *)(v0 + 200);
    v117 = *(_QWORD *)(v0 + 192);
    v118 = *(_QWORD *)(v0 + 184);
    v120 = *(_QWORD *)(v0 + 176);
    v123 = *(_QWORD *)(v0 + 168);
    v128 = *(NSObject **)(v0 + 152);
    v132 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v128);
    swift_task_dealloc(v132);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006AF1FC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 328));
  v2 = (_QWORD *)swift_task_alloc(dword_101103DC4);
  *(_QWORD *)(v1 + 336) = v2;
  *v2 = v4;
  v2[1] = sub_1006AF268;
  return sub_1006A56AC(*(_QWORD *)(v1 + 168));
}

uint64_t sub_1006AF268()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 336);
  *(_QWORD *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1006AF414;
  else
    v4 = sub_1006AF2CC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), 0);
}

uint64_t sub_1006AF2CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 280);
  sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for ObservedAdvertisement);
  sub_100004048(v2, &qword_1011091A0);
  sub_100004048(v1, &qword_1010EF3F8);
  v3 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 240);
  v9 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006AF414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 280);
  sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for ObservedAdvertisement);
  sub_100004048(v2, &qword_1011091A0);
  sub_100004048(v1, &qword_1010EF3F8);
  v3 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 240);
  v8 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 184);
  v16 = *(_QWORD *)(v0 + 176);
  v17 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006AF56C()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

uint64_t sub_1006AF578(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1006AF5F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return sub_100A82EC4(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1006AF634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for BeaconStatus(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 3;
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 24);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006AF6EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for BeaconStatus(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100A83018(*(_QWORD *)(v0 + 16), v0 + v2, *(unsigned __int8 *)(v0 + *(_QWORD *)(v1 + 64) + v2), *(unsigned __int8 *)(v0 + *(_QWORD *)(v1 + 64) + v2 + 1) | (unsigned __int16)(*(unsigned __int8 *)(v0 + *(_QWORD *)(v1 + 64) + v2 + 2) << 8));
}

uint64_t sub_1006AF758(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, &v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_1006AF7C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(_QWORD *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }
  return v3;
}

uint64_t sub_1006AF834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 16))();
  return a1;
}

uint64_t sub_1006AF864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))();
  return a1;
}

uint64_t sub_1006AF894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 32))();
  return a1;
}

uint64_t sub_1006AF8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 40))();
  return a1;
}

uint64_t sub_1006AF8F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1006AF9A4 + 4 * byte_100E48F58[(v7 - 1)]))();
}

void sub_1006AF9F4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = &dword_100000004;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v11 = 0;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t _s11MaterializeVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&_s11MaterializeVMn);
}

void *sub_1006AFBB0()
{
  return &protocol witness table for Never;
}

uint64_t sub_1006AFBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t WitnessTable;
  _QWORD v22[4];

  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v10 + 24);
  v22[0] = *(_QWORD *)(v10 + 16);
  v11 = v22[0];
  v22[1] = v13;
  v22[2] = v12;
  v22[3] = v14;
  v15 = _s11MaterializeV5InnerVMa(0, (uint64_t)v22);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  sub_1006AFCE8((uint64_t)v9, v11, a3, v12, a4, (uint64_t)v18);
  WitnessTable = swift_getWitnessTable(byte_100E49090, v15);
  Publisher.subscribe<A>(_:)(v18, v11, v15, v12, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_1006AFCE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD v11[4];

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a6, a1);
  v11[0] = a2;
  v11[1] = a3;
  v11[2] = a4;
  v11[3] = a5;
  _s11MaterializeV5InnerVMa(0, (uint64_t)v11);
  return CombineIdentifier.init()();
}

uint64_t sub_1006AFD60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_101103F28);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v1, a1);
  v14 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v10, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v12, _swiftEmptyArrayStorage, v10, v6, a1);
}

void sub_1006AFEB0(_QWORD *a1@<X8>)
{
  a1[3] = &type metadata for String;
  *a1 = 0x6C6169726574614DLL;
  a1[1] = 0xEB00000000657A69;
}

uint64_t sub_1006AFEE0(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of Subscriber.receive(subscription:)(a1, *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 40));
}

uint64_t sub_1006AFEF0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;

  v4 = a2[4];
  v5 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v7 = swift_getAssociatedTypeWitness(255, v4, v5, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Failure);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, v7, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
  v9 = type metadata accessor for Result(0, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))((char *)&v15 - v11, a1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload(v12, v9, 0);
  v13 = dispatch thunk of Subscriber.receive(_:)(v12, a2[3], a2[5]);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t sub_1006B0028(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v4 = a2[4];
  v5 = a2[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v5, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Output);
  v7 = swift_getAssociatedTypeWitness(255, v4, v5, &protocol requirements base descriptor for Publisher, &associated type descriptor for Publisher.Failure);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, v7, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
  v9 = type metadata accessor for Result(0, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  v24 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v23 - v11;
  v13 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v10);
  v15 = (char *)&v23 - v14;
  v16 = type metadata accessor for Subscribers.Completion(0, v7, AssociatedConformanceWitness);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v23 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v23 - v18, a1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v20 = a2[3];
    v21 = a2[5];
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, v7);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v12, v15, v7);
    swift_storeEnumTagMultiPayload(v12, v9, 1);
    v20 = a2[3];
    v21 = a2[5];
    dispatch thunk of Subscriber.receive(_:)(v12, v20, v21);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v7);
  }
  v25 = 1;
  return dispatch thunk of Subscriber.receive(completion:)(&v25, v20, v21);
}

uint64_t sub_1006B0278()
{
  return 0x6C6169726574614DLL;
}

uint64_t sub_1006B02A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = type metadata accessor for CombineIdentifier(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1006B02E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1006AFBBC(a1, a4, a2, a3);
}

uint64_t _s11MaterializeV5InnerVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s11MaterializeV5InnerVMn);
}

uint64_t sub_1006B0300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_1006B0308(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for CombineIdentifier(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v5, a1 + 48);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1006B0390(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for CombineIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain(v15);
  }
  else
  {
    v16 = v8;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_1006B0470(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for CombineIdentifier(0);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))((v4 + a1 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80), v5);
}

uint64_t sub_1006B04C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for CombineIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_1006B0534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for CombineIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_1006B05A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for CombineIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_1006B0614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for CombineIdentifier(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_1006B0684(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for CombineIdentifier(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_1006B081C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for CombineIdentifier(0) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = &dword_100000004;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = &_mh_execute_header.magic + 1;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1006B0A38(uint64_t a1)
{
  return swift_getWitnessTable(aQ_25, a1);
}

uint64_t sub_1006B0A48(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 16), a1, &protocol requirements base descriptor for Publisher, &associated conformance descriptor for Publisher.Publisher.Failure: Error);
}

void sub_1006B0A68(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  int v16;
  int v17;
  double v18;
  BOOL v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  double v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  double v37;
  double v38;
  unsigned int v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  char v46;
  uint64_t v47;
  unint64_t v48;

  objc_msgSend(a1, "overflowFlag");
  v5 = sub_100024908();
  v6 = FixedWidthInteger.data.getter(&type metadata for Int, v5);
  sub_1002F7C0C(1, v6, v7);
  sub_100C57B70(v47, v48);
  v9 = v8;
  sub_10001BC14(v47, v48);
  if (v2)
  {

    return;
  }
  v10 = sub_100C576E8(6u, v9);
  v11 = 765;
  if ((sub_100C576E8(1u, v9) & 1) != 0)
    v12 = 765;
  else
    v12 = 0;
  if ((sub_100C576E8(3u, v9) & 1) != 0)
    v13 = 765;
  else
    v13 = 0;
  if ((sub_100C576E8(2u, v9) & 1) == 0)
    v11 = 0;
  v14 = sub_100C576E8(5u, v9);
  v46 = sub_100C576E8(0, v9);
  v45 = sub_100C576E8(4u, v9);
  v44 = sub_100C576E8(7u, v9);
  v15 = (unint64_t)objc_msgSend(a1, "crashCount");
  if ((v15 & 0x8000000000000000) != 0)
    goto LABEL_80;
  if (v15 >= 0x10000)
    goto LABEL_79;
  if ((v10 & 1) != 0)
    v16 = 255;
  else
    v16 = 0;
  v17 = v16 + (unsigned __int16)v15;
  if ((v17 & 0x10000) != 0)
  {
    __break(1u);
    goto LABEL_57;
  }
  objc_msgSend(a1, "multiTime");
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v18 <= -1.0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v18 >= 1.84467441e19)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  v19 = __CFADD__((unint64_t)v18, v12);
  v20 = (unint64_t)v18 + v12;
  if (v19)
  {
LABEL_60:
    __break(1u);
    goto LABEL_61;
  }
  objc_msgSend(a1, "nearOwnerTime");
  if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) == 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v21 <= -1.0)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v21 >= 1.84467441e19)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  v19 = __CFADD__((unint64_t)v21, v13);
  v22 = (unint64_t)v21 + v13;
  if (v19)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  objc_msgSend(a1, "wildTime");
  if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) == 0)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (v23 <= -1.0)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v23 >= 1.84467441e19)
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v19 = __CFADD__((unint64_t)v23, v11);
  v24 = (unint64_t)v23 + v11;
  if (v19)
  {
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v25 = (unint64_t)objc_msgSend(a1, "soundCount");
  if ((v25 & 0x8000000000000000) != 0)
  {
LABEL_80:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    goto LABEL_81;
  }
  if (HIDWORD(v25))
    goto LABEL_79;
  if ((v14 & 1) != 0)
    v26 = 510;
  else
    v26 = 0;
  v27 = v25 + v26;
  if (__CFADD__((_DWORD)v25, v26))
    goto LABEL_69;
  objc_msgSend(a1, "soundTime");
  if ((~*(_QWORD *)&v28 & 0x7FF0000000000000) == 0)
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (v28 <= -1.0)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (v28 >= 4294967300.0)
  {
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  v42 = v20;
  v43 = v24;
  v29 = v28;
  if ((v46 & 1) != 0)
    v30 = 510;
  else
    v30 = 0;
  v31 = v29 + v30;
  if (__CFADD__(v29, v30))
    goto LABEL_73;
  v32 = v27;
  v33 = (unint64_t)objc_msgSend(a1, "rangingCount");
  if ((v33 & 0x8000000000000000) != 0)
    goto LABEL_80;
  if (!HIDWORD(v33))
  {
    v34 = v22;
    if ((v45 & 1) != 0)
      v35 = 510;
    else
      v35 = 0;
    v36 = v33 + v35;
    if (!__CFADD__((_DWORD)v33, v35))
    {
      objc_msgSend(a1, "rangingTime");
      v38 = v37;

      if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) != 0)
      {
        if (v38 > -1.0)
        {
          if (v38 < 4294967300.0)
          {
            v39 = v38;
            if ((v44 & 1) != 0)
              v40 = 510;
            else
              v40 = 0;
            v19 = __CFADD__(v39, v40);
            v41 = v39 + v40;
            if (!v19)
            {
              *(_OWORD *)a2 = xmmword_100E22B20;
              *(_BYTE *)(a2 + 16) = v9;
              *(_WORD *)(a2 + 18) = v17;
              *(_QWORD *)(a2 + 24) = v42;
              *(_QWORD *)(a2 + 32) = v34;
              *(_QWORD *)(a2 + 40) = v43;
              *(_DWORD *)(a2 + 48) = v32;
              *(_DWORD *)(a2 + 52) = v31;
              *(_DWORD *)(a2 + 56) = v36;
              *(_DWORD *)(a2 + 60) = v41;
              *(_BYTE *)(a2 + 64) = 2;
              return;
            }
            goto LABEL_78;
          }
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
          goto LABEL_79;
        }
LABEL_76:
        __break(1u);
        goto LABEL_77;
      }
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
LABEL_79:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_81:
  __break(1u);
}

ValueMetadata *type metadata accessor for AccessoryProductDataResponsePayload()
{
  return &type metadata for AccessoryProductDataResponsePayload;
}

uint64_t sub_1006B0F28@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1006B0FC0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_1006B0F50(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1006B0F7C();
  result = sub_1003ECE38();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1006B0F7C()
{
  unint64_t result;

  result = qword_101103F30;
  if (!qword_101103F30)
  {
    result = swift_getWitnessTable(asc_100E49114, &type metadata for AccessoryProductDataResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101103F30);
  }
  return result;
}

uint64_t sub_1006B0FC0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v17, v3, v4);
  v5 = v18;
  v6 = v19;
  sub_10009F5D0((uint64_t)v17, v18);
  v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v5, v6);
  if (!v1)
  {
    v9 = v7;
    v10 = v8;
    sub_10001BBBC(v7, v8);
    sub_1001EE65C(v9, v10);
    if (v12 >> 60 != 15)
    {
      v6 = v11;
      sub_10001BC14(v9, v10);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v6;
    }
    v6 = type metadata accessor for BinaryEncodingError(0);
    v13 = sub_1001120A4();
    swift_allocError(v6, v13, 0, 0);
    v15 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v6 - 8) + 104))(v14, enum case for BinaryEncodingError.encodingError(_:), v6);
    swift_willThrow(v15);
    sub_10001BC14(v9, v10);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v6;
}

void sub_1006B110C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  void (*v21)(char *, char *, uint64_t);
  char v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v37 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v35 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v30 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v30 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v30 - v16;
  v18 = sub_1001E7CC8();
  v19 = sub_1001C46A0(v18);
  swift_bridgeObjectRelease();
  sub_1001E5FD4(v19, v5);
  swift_bridgeObjectRelease();
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v36 = a1;
  if (v20 == 1)
  {
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v21(v17, v5, v6);
    Date.addingTimeInterval(_:)(86400.0);
    v22 = static Date.< infix(_:_:)(v15, a1);
    v23 = *(void (**)(char *, uint64_t))(v7 + 8);
    v23(v15, v6);
    if ((v22 & 1) != 0)
    {
      v32 = type metadata accessor for Transaction(0);
      v33 = v23;
      v24 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v24(v15, a1, v6);
      v24(v12, (uint64_t)v17, v6);
      v25 = *(unsigned __int8 *)(v7 + 80);
      v26 = (v25 + 25) & ~v25;
      v27 = (v8 + v25 + v26) & ~v25;
      v28 = swift_allocObject(&unk_101088588, v27 + v8, v25 | 7);
      *(_QWORD *)(v28 + 16) = v34;
      v31 = v12;
      v29 = v37;
      *(_BYTE *)(v28 + 24) = v37;
      v21((char *)(v28 + v26), v15, v6);
      v21((char *)(v28 + v27), v31, v6);
      swift_retain();
      static Transaction.asyncTask(name:block:)("PublishRecordCount", 18, 2, &unk_1011040D8, v28);
      swift_release();
      v33(v17, v6);
      goto LABEL_7;
    }
    v23(v17, v6);
  }
  v29 = v37;
LABEL_7:
  __asm { BR              X10 }
}

void sub_1006B13E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(unint64_t, uint64_t, uint64_t);

  v7 = sub_1001E7CC8();
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_100518DA0(0x6C65437265776F70, v1 + 3), (v9 & 1) != 0))
  {
    v10 = *(_QWORD **)(*(_QWORD *)(v7 + 56) + 8 * v8);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v10 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v0, v2);
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
    v10 = (_QWORD *)sub_1007C77C0(0, v10[2] + 1, 1, (unint64_t)v10);
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = (_QWORD *)sub_1007C77C0(v11 > 1, v12 + 1, 1, (unint64_t)v10);
  v10[2] = v12 + 1;
  v13 = (unint64_t)v10
      + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(_QWORD *)(v3 + 72) * v12;
  v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(_QWORD *)(v6 - 120) = v2;
  v14(v13, v4, v2);
  __asm { BR              X10 }
}

uint64_t sub_1006B18F0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = a4;
  *(_BYTE *)(v4 + 64) = a2;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch(sub_1006B1910, 0, 0);
}

uint64_t sub_1006B1910()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 40) = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000033;
  *((_QWORD *)v2 + 16) = 0x8000000100EE0C90;
  swift_retain();
  return swift_task_switch(sub_1006B1A18, v2, 0);
}

uint64_t sub_1006B1A18()
{
  uint64_t v0;

  sub_100CE2FCC(*(_QWORD *)(v0 + 40));
  swift_release();
  return swift_task_switch(sub_1006B1A84, 0, 0);
}

uint64_t sub_1006B1A84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[6] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[7] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1006B1AF0;
  return sub_100CD63AC(v0[5]);
}

uint64_t sub_1006B1AF0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_release();
  return swift_task_switch(sub_1006B1B4C, 0, 0);
}

void sub_1006B1B4C()
{
  uint64_t v0;
  id v1;
  Class isa;
  NSString v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1001E7CC8();
  swift_bridgeObjectRelease();
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10001A9A8(&qword_1011040C8);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setObject:forKey:", isa, v3);

  static os_log_type_t.default.getter(v4);
  if (qword_1010EA2B0 != -1)
    swift_once(&qword_1010EA2B0, sub_100B5DE10);
  v5 = *(unsigned __int8 *)(v0 + 64);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  *(_OWORD *)(swift_allocObject(v6, 192, 7) + 16) = xmmword_100E26E00;
  __asm { BR              X9 }
}

uint64_t sub_1006B1E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7458);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7458);
  if (qword_1010EA608 != -1)
    swift_once(&qword_1010EA608, sub_100DAE7F8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B84E8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1006B1EAC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return swift_task_switch(sub_1006B1ECC, v1, 0);
}

uint64_t sub_1006B1ECC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7458);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received publish event trigger.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[4];
  v7 = v0[5];
  v8 = v0[3];

  v10 = sub_100006C64(&qword_101104068, v9, (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService, (uint64_t)&unk_100E4922C);
  v11 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v11;
  v11[2] = v6;
  v11[3] = v8;
  v11[4] = v7;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v12;
  v13 = sub_10001A9A8(&qword_101104098);
  *v12 = v0;
  v12[1] = sub_1006B2058;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v6, v10, 0xD000000000000018, 0x8000000100EE0C10, sub_1006B7FD0, v11, v13);
}

uint64_t sub_1006B2058()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 32);
    v5 = sub_1006B20CC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 32);
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v5 = sub_10055ABCC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1006B20CC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006B2100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a4;
  v7 = sub_10001A9A8(&qword_1011040A0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v16 = sub_100006C64(&qword_101104068, v15, (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService, (uint64_t)&unk_100E4922C);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 48) & ~v17;
  v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (char *)swift_allocObject(&unk_101088538, v19 + 8, v17 | 7);
  *((_QWORD *)v20 + 2) = a2;
  *((_QWORD *)v20 + 3) = v16;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v18], v10, v7);
  *(_QWORD *)&v20[v19] = v24;
  swift_retain();
  swift_retain_n(a2, 2);
  v21 = sub_100691AC0((uint64_t)v13, (uint64_t)&unk_1011040B0, (uint64_t)v20);
  return swift_release(v21);
}

uint64_t sub_1006B229C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  v9 = sub_10001A9A8(&qword_1011040A0);
  v7[10] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[11] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[12] = v11;
  v7[13] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006B230C, a4, 0);
}

uint64_t sub_1006B230C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  char *v16;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[8];
  v7 = v0[6];
  v6 = v0[7];
  v15 = v0[9];
  v0[2] = 0x6873696C627550;
  v0[3] = 0xE700000000000000;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_101088560, v10 + 8, v8 | 7);
  v0[14] = v11;
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v1, v3);
  *(_QWORD *)(v11 + v10) = v15;
  v12 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
        + 1);
  v16 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
      + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[15] = v13;
  *v13 = v0;
  v13[1] = sub_1006B2450;
  return ((uint64_t (*)(_QWORD *, void *, uint64_t, uint64_t (*)(), _QWORD))v16)(v0 + 2, &unk_1011040C0, v11, sub_1006B7804, 0);
}

uint64_t sub_1006B2450()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 120);
  v3 = *v1;
  *(_QWORD *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
    return swift_task_switch(sub_1006B24E0, *(_QWORD *)(v3 + 48), 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 104));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1006B24E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v1 = *(_QWORD *)(v0 + 128);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7458);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 128);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Throttled publish event threw error: %{public}@.", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 128));
    swift_errorRelease(v7);
  }
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 80);

  *(_QWORD *)(v0 + 32) = v12;
  CheckedContinuation.resume(throwing:)(v0 + 32, v13);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006B26BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v3[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006B2744, 0, 0);
}

uint64_t sub_1006B2744()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t MyNetworkPublishDateProvider;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7458);
  v0[15] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Publish event is executing.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = v0[13];
  v6 = v0[14];
  v9 = v0[11];
  v8 = v0[12];

  MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  v11 = swift_allocObject(MyNetworkPublishDateProvider, 112, 15);
  v0[16] = v11;
  swift_defaultActor_initialize(v11);
  static Date.trustedNow.getter(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v6, v8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v8);
  sub_1006B7D5C(v9);
  v12 = (_QWORD *)swift_task_alloc(dword_101103F7C);
  v0[17] = v12;
  *v12 = v0;
  v12[1] = sub_1006B28C0;
  v13 = v0[8];
  v12[16] = v13;
  return swift_task_switch(sub_1006B6344, v13, 0);
}

uint64_t sub_1006B28C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*v1 + 136);
  v3 = *v1;
  *(_QWORD *)(v3 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1006B2FAC, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(dword_101103F74);
  *(_QWORD *)(v3 + 152) = v5;
  *v5 = v3;
  v5[1] = sub_1006B294C;
  return sub_1006B5758();
}

uint64_t sub_1006B294C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1006B301C;
  else
    v5 = sub_1006B29B8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1006B29B8()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  _QWORD *v6;

  swift_bridgeObjectRetain(v0[20]);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[20];
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    v0[7] = *(_QWORD *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Publish found %ld observations to publish.", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v6 = (_QWORD *)swift_task_alloc(dword_101103F6C);
  v0[22] = v6;
  *v6 = v0;
  v6[1] = sub_1006B2AD0;
  return sub_1006B35E8(v0[20]);
}

uint64_t sub_1006B2AD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 176);
  *(_QWORD *)(v3 + 184) = a1;
  *(_QWORD *)(v3 + 192) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1006B308C;
  else
    v5 = sub_1006B2B3C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1006B2B3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 72);
  if (v1)
  {
    v2 = dword_101103F84;
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 200) = v3;
    *v3 = v0;
    v3[1] = sub_1006B2D78;
    return sub_1006B6870(v1, *(_QWORD *)(v0 + 160), 0);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 160));
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 160);
    if (v8)
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v10 = 134217984;
      v11 = *(_QWORD *)(v9 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 48) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Published %ld observations to Find My network.", v10, 0xCu);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);
    }

    v12 = *(void **)(v0 + 184);
    v14 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 112);
    v15 = *(_QWORD *)(v0 + 96);
    v16 = sub_100CA7D40((uint64_t)&off_10104DAF8);
    v17 = sub_1006B7904();
    v18 = sub_100A0658C(v17, v16);
    swift_bridgeObjectRelease();
    v19 = sub_100031198();
    if ((v19 & 1) != 0)
      v20 = 2;
    else
      v20 = 3;
    if ((v18 & 1) != 0)
      v21 = v20;
    else
      v21 = (v19 & 1) == 0;
    sub_1006B110C(v13, v21);
    *(_QWORD *)(v0 + 40) = v12;
    v22 = v12;
    v23 = sub_10001A9A8(&qword_1011040A0);
    CheckedContinuation.resume(returning:)(v0 + 40, v23);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    v24 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
}

uint64_t sub_1006B2D78()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  return swift_task_switch(sub_1006B2DCC, 0, 0);
}

uint64_t sub_1006B2DCC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;

  swift_release();
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 160));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 160);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v5 = 134217984;
    v6 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 48) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Published %ld observations to Find My network.", v5, 0xCu);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);
  }

  v7 = *(void **)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 96);
  v11 = sub_100CA7D40((uint64_t)&off_10104DAF8);
  v12 = sub_1006B7904();
  v13 = sub_100A0658C(v12, v11);
  swift_bridgeObjectRelease();
  v14 = sub_100031198();
  if ((v14 & 1) != 0)
    v15 = 2;
  else
    v15 = 3;
  if ((v13 & 1) != 0)
    v16 = v15;
  else
    v16 = (v14 & 1) == 0;
  sub_1006B110C(v8, v16);
  *(_QWORD *)(v0 + 40) = v7;
  v17 = v7;
  v18 = sub_10001A9A8(&qword_1011040A0);
  CheckedContinuation.resume(returning:)(v0 + 40, v18);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  v19 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1006B2FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1006B301C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1006B308C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 192);
  if (v1)
  {
    swift_retain();
    swift_errorRetain(v2);
    v3 = (_QWORD *)swift_task_alloc(dword_101103F84);
    *(_QWORD *)(v0 + 208) = v3;
    *v3 = v0;
    v3[1] = sub_1006B3338;
    return sub_1006B6870(v1, *(_QWORD *)(v0 + 160), v2);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 160);
    swift_errorRetain(*(_QWORD *)(v0 + 192));
    swift_bridgeObjectRetain(v5);
    v6 = swift_errorRetain(v2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 160);
    if (v9)
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 134218242;
      v14 = *(_QWORD *)(v11 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 24) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2114;
      swift_errorRetain(v10);
      v15 = _swift_stdlib_bridgeErrorToNSError(v10);
      *(_QWORD *)(v0 + 32) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v12 + 14, v12 + 22);
      *v13 = v15;
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to publish %ld observations to Find My network. %{public}@.", (uint8_t *)v12, 0x16u);
      v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v13, 1, v16);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);
      swift_errorRelease(v10);
      swift_errorRelease(v10);
    }
    v17 = *(_QWORD *)(v0 + 192);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);

    *(_QWORD *)(v0 + 16) = v17;
    swift_errorRetain(v17);
    v21 = sub_10001A9A8(&qword_1011040A0);
    CheckedContinuation.resume(throwing:)(v0 + 16, v21);
    swift_release();
    swift_errorRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    v22 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
}

uint64_t sub_1006B3338()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_errorRelease(v1);
  return swift_task_switch(sub_1006B3398, 0, 0);
}

uint64_t sub_1006B3398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v21;

  swift_release();
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 160);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 192);
    v21 = v4;
    v7 = *(_QWORD *)(v0 + 160);
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 134218242;
    v10 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v6);
    v11 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 32) = v11;
    v4 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v21, v5, "Failed to publish %ld observations to Find My network. %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 192);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 160), 2);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }
  v14 = *(_QWORD *)(v0 + 192);
  v16 = *(_QWORD *)(v0 + 104);
  v15 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 96);

  *(_QWORD *)(v0 + 16) = v14;
  swift_errorRetain(v14);
  v18 = sub_10001A9A8(&qword_1011040A0);
  CheckedContinuation.resume(throwing:)(v0 + 16, v18);
  swift_release();
  swift_errorRelease(v14);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  v19 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1006B35E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[33] = a1;
  v2[34] = v1;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v2[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[36] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[37] = v5;
  v2[38] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v2[39] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[40] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v8);
  v2[42] = swift_task_alloc(v8);
  return swift_task_switch(sub_1006B36A4, v1, 0);
}

uint64_t sub_1006B36A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 264);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 272) + 128);
    v3 = unk_1011202D4;
    v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1011202D0 + dword_1011202D0);
    swift_bridgeObjectRetain(v1);
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 344) = v4;
    *v4 = v0;
    v4[1] = sub_1006B3828;
    return v14(*(_QWORD *)(v0 + 264), v2);
  }
  else
  {
    if (qword_1010E9E40 != -1)
      swift_once(&qword_1010E9E40, sub_1006B1E1C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7458);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No observations to publish.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(_QWORD *)(v0 + 328);
    v12 = *(_QWORD *)(v0 + 304);
    v13 = *(_QWORD *)(v0 + 280);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_1006B3828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(*v4 + 344);
  v6 = *v4;
  *(_QWORD *)(v6 + 352) = a1;
  *(_QWORD *)(v6 + 360) = a2;
  *(_QWORD *)(v6 + 368) = a3;
  swift_task_dealloc(v5);
  if (!v3)
    return swift_task_switch(sub_1006B38D4, *(_QWORD *)(v6 + 272), 0);
  v7 = *(_QWORD *)(v6 + 328);
  v8 = *(_QWORD *)(v6 + 304);
  v9 = *(_QWORD *)(v6 + 280);
  swift_task_dealloc(*(_QWORD *)(v6 + 336));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1006B38D4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[45];
  v2 = v0[46];
  v3 = v0[44];
  v0[5] = &type metadata for SubmitUploadv2;
  v0[6] = sub_1006B7F48();
  v0[2] = v3;
  v0[3] = v1;
  v0[4] = v2;
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v1, v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[47] = v4;
  *v4 = v0;
  v4[1] = sub_1006B3978;
  return sub_100338A60(v0[42], (uint64_t)(v0 + 2));
}

uint64_t sub_1006B3978()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  *(_QWORD *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 272);
    v5 = sub_1006B4C2C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_1006B39EC;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1006B39EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (__cdecl *v29)();

  if ((unint64_t)(FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1) - 300) >= 0xFFFFFFFFFFFFFF9CLL)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v1 + 216, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v1 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v1 + 160))
    {
      sub_10000F9FC((__int128 *)(v1 + 136), v1 + 56);
      sub_10001AA44((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
      v29 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
      v18 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
      *(_QWORD *)(v1 + 392) = v18;
      *v18 = v1;
      v18[1] = sub_1006B3CE4;
      return v29();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9E38 != -1)
      swift_once(&qword_1010E9E38, sub_10069FCEC);
    v2 = *(_QWORD *)(v1 + 328);
    v3 = *(_QWORD *)(v1 + 336);
    v4 = *(_QWORD *)(v1 + 312);
    v5 = *(_QWORD *)(v1 + 320);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7440);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v1 + 320);
    v11 = *(_QWORD *)(v1 + 328);
    v13 = *(_QWORD *)(v1 + 312);
    if (v10)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v14 = 134217984;
      v15 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v14);
      v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v16(v11, v13);
      *(_QWORD *)(v1 + 256) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 256, v1 + 264, v14 + 4, v14 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to publish payloads. Got %ld.", v14, 0xCu);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v16(*(_QWORD *)(v1 + 328), *(_QWORD *)(v1 + 312));
    }
    v20 = *(_QWORD *)(v1 + 360);
    v19 = *(_QWORD *)(v1 + 368);
    v21 = *(_QWORD *)(v1 + 336);
    v22 = *(_QWORD *)(v1 + 312);

    v23 = sub_1006B7F8C();
    v24 = swift_allocError(&type metadata for FindMyNetworkPublisherService.Error, v23, 0, 0);
    *v25 = 0;
    swift_willThrow(v24);
    swift_bridgeObjectRelease();
    sub_10001BC14(v20, v19);
    v16(v21, v22);
    v26 = *(_QWORD *)(v1 + 328);
    v27 = *(_QWORD *)(v1 + 304);
    v28 = *(_QWORD *)(v1 + 280);
    swift_task_dealloc(*(_QWORD *)(v1 + 336));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  return result;
}

uint64_t sub_1006B3CE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 400) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006B3D44, v3, 0);
}

uint64_t sub_1006B3D44()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0 + 7;
  if (v0[50])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111BAB4);
    v0[51] = v2;
    *v2 = v0;
    v2[1] = sub_1006B3FB0;
    return sub_100C65684(v0[33]);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000017;
    v6[1] = 0x8000000100ED5AC0;
    swift_willThrow(v5);
    if (qword_1010E9E40 != -1)
      swift_once(&qword_1010E9E40, sub_1006B1E1C);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7458);
    swift_errorRetain(v5);
    v8 = swift_errorRetain(v5);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      swift_errorRetain(v5);
      v13 = _swift_stdlib_bridgeErrorToNSError(v5);
      v0[31] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v11 + 4, v11 + 12);
      *v12 = v13;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to delete observations: %{public}@.", v11, 0xCu);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    return swift_task_switch(sub_1006B4020, v0[34], 0);
  }
}

uint64_t sub_1006B3FB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 408);
  *(_QWORD *)(*v1 + 416) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 272);
    v5 = sub_1006B4CAC;
  }
  else
  {
    swift_release();
    v4 = *(_QWORD *)(v2 + 272);
    v5 = sub_1006B4020;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1006B4020()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 176);
    sub_10001AA44((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 424) = v2;
    *v2 = v0;
    v2[1] = sub_1006B40C4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006B40C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006B4124, v3, 0);
}

uint64_t sub_1006B4124()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __objc2_ivar_list **p_ivars;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const __CFData *isa;
  SecCertificateRef v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  Class v61;
  Class v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;

  v1 = (_QWORD *)(v0 + 176);
  if (*(_QWORD *)(v0 + 432))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111BAAC);
    *(_QWORD *)(v0 + 440) = v2;
    *v2 = v0;
    v2[1] = sub_1006B4784;
    return sub_100C657D8(*(_QWORD *)(v0 + 264));
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v4 = sub_100033220();
  v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
  *v6 = 0xD000000000000017;
  v6[1] = 0x8000000100ED5AC0;
  swift_willThrow(v5);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B7458);
  swift_errorRetain(v5);
  v9 = swift_errorRetain(v5);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138543362;
    swift_errorRetain(v5);
    v13 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 240) = v13;
    p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 4, v12 + 12);
    *v69 = v13;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to mark observations published: %{public}@.", v12, 0xCu);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v69, 1, v14);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v15 = swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  v16 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v15);
  v17 = sub_1006B544C(v16);
  swift_bridgeObjectRelease();
  if (!v17[2] || (v18 = sub_100518DA0(0xD000000000000014, 0x8000000100EE0BF0), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v21 = *(_QWORD *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 296);
  v22 = *(_QWORD *)(v0 + 280);
  v23 = (uint64_t *)(v17[7] + 16 * v18);
  v24 = *v23;
  v25 = v23[1];
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  UUID.init(uuidString:)(v24, v25);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v22, 1, v21) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 280), &qword_1010ED860);
LABEL_13:
    if (p_ivars[456] != (__objc2_ivar_list *)-1)
      swift_once(&qword_1010E9E40, sub_1006B1E1C);
    v26 = sub_10001A9E8(v8, (uint64_t)qword_1011B7458);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to parse X-Apple-Sign1 header", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
    v31 = *(_QWORD *)(v0 + 360);
    v30 = *(_QWORD *)(v0 + 368);
    v32 = *(_QWORD *)(v0 + 336);
    v33 = *(_QWORD *)(v0 + 312);
    v34 = *(_QWORD *)(v0 + 320);

    swift_bridgeObjectRelease();
    sub_10001BC14(v31, v30);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v33);
    v35 = 0;
    goto LABEL_18;
  }
  v39 = *(_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 32))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
  v40 = sub_1006B544C(v39);
  if (!v40[2] || (v41 = sub_100518DA0(0x2D656C7070612D78, 0xED0000316E676973), (v42 & 1) == 0))
  {
    v49 = *(_QWORD *)(v0 + 296);
    v50 = *(_QWORD *)(v0 + 304);
    v51 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
    goto LABEL_13;
  }
  v43 = (uint64_t *)(v40[7] + 16 * v41);
  v44 = *v43;
  v45 = v43[1];
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease();
  v46 = Data.init(base64Encoded:options:)(v44, v45, 0);
  v48 = v47;
  swift_bridgeObjectRelease();
  if (v48 >> 60 == 15)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));
    goto LABEL_13;
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  v53 = SecCertificateCreateWithData(0, isa);

  if (!v53)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));
LABEL_29:
    sub_10001EF3C(v46, v48);
    goto LABEL_13;
  }
  v54 = SecCertificateCopySubjectPublicKeyInfoSHA256Digest(v53);
  if (!v54)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));

    goto LABEL_29;
  }
  v55 = (void *)v54;
  v65 = *(_QWORD *)(v0 + 360);
  v66 = *(_QWORD *)(v0 + 368);
  v67 = *(_QWORD *)(v0 + 320);
  v56 = *(_QWORD *)(v0 + 304);
  v68 = *(_QWORD *)(v0 + 312);
  v70 = *(_QWORD *)(v0 + 336);
  v63 = *(_QWORD *)(v0 + 296);
  v64 = *(_QWORD *)(v0 + 288);
  v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
  v59 = v58;

  v60 = objc_allocWithZone((Class)SPPublishResult);
  v61 = UUID._bridgeToObjectiveC()().super.isa;
  v62 = Data._bridgeToObjectiveC()().super.isa;
  v35 = objc_msgSend(v60, "initWithRequestUUID:aaaPubKeyHash:", v61, v62);

  sub_10001BC14(v57, v59);
  sub_10001EF3C(v46, v48);

  swift_bridgeObjectRelease();
  sub_10001BC14(v65, v66);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v56, v64);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v70, v68);
LABEL_18:
  v36 = *(_QWORD *)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 304);
  v38 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(id))(v0 + 8))(v35);
}

uint64_t sub_1006B4784()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 440);
  *(_QWORD *)(*v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 272);
    v5 = sub_1006B4E84;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 272);
    swift_release();
    v5 = sub_1006B47F8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1006B47F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const __CFData *isa;
  SecCertificateRef v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  Class v49;
  Class v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(a1);
  v3 = sub_1006B544C(v2);
  swift_bridgeObjectRelease();
  if (v3[2] && (v4 = sub_100518DA0(0xD000000000000014, 0x8000000100EE0BF0), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(v1 + 288);
    v7 = *(_QWORD *)(v1 + 296);
    v8 = *(_QWORD *)(v1 + 280);
    v9 = (uint64_t *)(v3[7] + 16 * v4);
    v10 = *v9;
    v11 = v9[1];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)(v10, v11);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) == 1)
    {
      sub_100004048(*(_QWORD *)(v1 + 280), &qword_1010ED860);
    }
    else
    {
      v27 = *(_QWORD *)(v1 + 352);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 296) + 32))(*(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 288));
      v28 = sub_1006B544C(v27);
      if (v28[2] && (v29 = sub_100518DA0(0x2D656C7070612D78, 0xED0000316E676973), (v30 & 1) != 0))
      {
        v31 = (uint64_t *)(v28[7] + 16 * v29);
        v32 = *v31;
        v33 = v31[1];
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRelease();
        v34 = Data.init(base64Encoded:options:)(v32, v33, 0);
        v36 = v35;
        swift_bridgeObjectRelease();
        if (v36 >> 60 == 15)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 296) + 8))(*(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 288));
        }
        else
        {
          isa = Data._bridgeToObjectiveC()().super.isa;
          v41 = SecCertificateCreateWithData(0, isa);

          if (v41)
          {
            v42 = SecCertificateCopySubjectPublicKeyInfoSHA256Digest(v41);
            if (v42)
            {
              v43 = (void *)v42;
              v53 = *(_QWORD *)(v1 + 360);
              v54 = *(_QWORD *)(v1 + 368);
              v55 = *(_QWORD *)(v1 + 320);
              v44 = *(_QWORD *)(v1 + 304);
              v56 = *(_QWORD *)(v1 + 312);
              v57 = *(_QWORD *)(v1 + 336);
              v51 = *(_QWORD *)(v1 + 296);
              v52 = *(_QWORD *)(v1 + 288);
              v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
              v47 = v46;

              v48 = objc_allocWithZone((Class)SPPublishResult);
              v49 = UUID._bridgeToObjectiveC()().super.isa;
              v50 = Data._bridgeToObjectiveC()().super.isa;
              v22 = objc_msgSend(v48, "initWithRequestUUID:aaaPubKeyHash:", v49, v50);

              sub_10001BC14(v45, v47);
              sub_10001EF3C(v34, v36);

              swift_bridgeObjectRelease();
              sub_10001BC14(v53, v54);
              (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v44, v52);
              (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v57, v56);
              goto LABEL_11;
            }
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 296) + 8))(*(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 288));

          }
          else
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 296) + 8))(*(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 288));
          }
          sub_10001EF3C(v34, v36);
        }
      }
      else
      {
        v38 = *(_QWORD *)(v1 + 296);
        v37 = *(_QWORD *)(v1 + 304);
        v39 = *(_QWORD *)(v1 + 288);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7458);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to parse X-Apple-Sign1 header", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }
  v18 = *(_QWORD *)(v1 + 360);
  v17 = *(_QWORD *)(v1 + 368);
  v19 = *(_QWORD *)(v1 + 336);
  v20 = *(_QWORD *)(v1 + 312);
  v21 = *(_QWORD *)(v1 + 320);

  swift_bridgeObjectRelease();
  sub_10001BC14(v18, v17);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  v22 = 0;
LABEL_11:
  v23 = *(_QWORD *)(v1 + 328);
  v24 = *(_QWORD *)(v1 + 304);
  v25 = *(_QWORD *)(v1 + 280);
  swift_task_dealloc(*(_QWORD *)(v1 + 336));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(id))(v1 + 8))(v22);
}

uint64_t sub_1006B4C2C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 360);
  v1 = *(_QWORD *)(v0 + 368);
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006B4CAC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  swift_release();
  v1 = v0[52];
  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7458);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    v0[31] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to delete observations: %{public}@.", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  return swift_task_switch(sub_1006B4020, v0[34], 0);
}

uint64_t sub_1006B4E84()
{
  uint64_t v0;
  uint64_t v1;
  __objc2_ivar_list **p_ivars;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const __CFData *isa;
  SecCertificateRef v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  Class v57;
  Class v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  swift_release();
  v1 = *(_QWORD *)(v0 + 448);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7458);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 240) = v8;
    p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v7 + 4, v7 + 12);
    *v65 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to mark observations published: %{public}@.", v7, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v65, 1, v9);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v10 = swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v11 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v10);
  v12 = sub_1006B544C(v11);
  swift_bridgeObjectRelease();
  if (v12[2] && (v13 = sub_100518DA0(0xD000000000000014, 0x8000000100EE0BF0), (v14 & 1) != 0))
  {
    v16 = *(_QWORD *)(v0 + 288);
    v15 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 280);
    v18 = (uint64_t *)(v12[7] + 16 * v13);
    v19 = *v18;
    v20 = v18[1];
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)(v19, v20);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v17, 1, v16) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 280), &qword_1010ED860);
    }
    else
    {
      v35 = *(_QWORD *)(v0 + 352);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 32))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
      v36 = sub_1006B544C(v35);
      if (v36[2] && (v37 = sub_100518DA0(0x2D656C7070612D78, 0xED0000316E676973), (v38 & 1) != 0))
      {
        v39 = (uint64_t *)(v36[7] + 16 * v37);
        v40 = *v39;
        v41 = v39[1];
        swift_bridgeObjectRetain(v41);
        swift_bridgeObjectRelease();
        v42 = Data.init(base64Encoded:options:)(v40, v41, 0);
        v44 = v43;
        swift_bridgeObjectRelease();
        if (v44 >> 60 == 15)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));
        }
        else
        {
          isa = Data._bridgeToObjectiveC()().super.isa;
          v49 = SecCertificateCreateWithData(0, isa);

          if (v49)
          {
            v50 = SecCertificateCopySubjectPublicKeyInfoSHA256Digest(v49);
            if (v50)
            {
              v51 = (void *)v50;
              v61 = *(_QWORD *)(v0 + 360);
              v62 = *(_QWORD *)(v0 + 368);
              v63 = *(_QWORD *)(v0 + 320);
              v52 = *(_QWORD *)(v0 + 304);
              v64 = *(_QWORD *)(v0 + 312);
              v66 = *(_QWORD *)(v0 + 336);
              v59 = *(_QWORD *)(v0 + 296);
              v60 = *(_QWORD *)(v0 + 288);
              v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
              v55 = v54;

              v56 = objc_allocWithZone((Class)SPPublishResult);
              v57 = UUID._bridgeToObjectiveC()().super.isa;
              v58 = Data._bridgeToObjectiveC()().super.isa;
              v30 = objc_msgSend(v56, "initWithRequestUUID:aaaPubKeyHash:", v57, v58);

              sub_10001BC14(v53, v55);
              sub_10001EF3C(v42, v44);

              swift_bridgeObjectRelease();
              sub_10001BC14(v61, v62);
              (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v52, v60);
              (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v66, v64);
              goto LABEL_16;
            }
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));

          }
          else
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 296) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));
          }
          sub_10001EF3C(v42, v44);
        }
      }
      else
      {
        v45 = *(_QWORD *)(v0 + 296);
        v46 = *(_QWORD *)(v0 + 304);
        v47 = *(_QWORD *)(v0 + 288);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (p_ivars[456] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v21 = sub_10001A9E8(v3, (uint64_t)qword_1011B7458);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to parse X-Apple-Sign1 header", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }
  v26 = *(_QWORD *)(v0 + 360);
  v25 = *(_QWORD *)(v0 + 368);
  v27 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD *)(v0 + 312);
  v29 = *(_QWORD *)(v0 + 320);

  swift_bridgeObjectRelease();
  sub_10001BC14(v26, v25);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
  v30 = 0;
LABEL_16:
  v31 = *(_QWORD *)(v0 + 328);
  v32 = *(_QWORD *)(v0 + 304);
  v33 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(id))(v0 + 8))(v30);
}

_QWORD *sub_1006B544C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *result;
  uint64_t v29;
  int64_t v30;

  v29 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  while (1)
  {
    if (v3)
    {
      v6 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v7 = v6 | (v4 << 6);
    }
    else
    {
      v8 = v4 + 1;
      if (__OFADD__(v4, 1))
        goto LABEL_40;
      if (v8 >= v30)
      {
LABEL_37:
        swift_release();
        return _swiftEmptyDictionarySingleton;
      }
      v9 = *(_QWORD *)(v29 + 8 * v8);
      ++v4;
      if (!v9)
      {
        v4 = v8 + 1;
        if (v8 + 1 >= v30)
          goto LABEL_37;
        v9 = *(_QWORD *)(v29 + 8 * v4);
        if (!v9)
        {
          v4 = v8 + 2;
          if (v8 + 2 >= v30)
            goto LABEL_37;
          v9 = *(_QWORD *)(v29 + 8 * v4);
          if (!v9)
          {
            v4 = v8 + 3;
            if (v8 + 3 >= v30)
              goto LABEL_37;
            v9 = *(_QWORD *)(v29 + 8 * v4);
            if (!v9)
            {
              v4 = v8 + 4;
              if (v8 + 4 >= v30)
                goto LABEL_37;
              v9 = *(_QWORD *)(v29 + 8 * v4);
              if (!v9)
              {
                v10 = v8 + 5;
                if (v10 >= v30)
                  goto LABEL_37;
                v9 = *(_QWORD *)(v29 + 8 * v10);
                if (!v9)
                {
                  while (1)
                  {
                    v4 = v10 + 1;
                    if (__OFADD__(v10, 1))
                      goto LABEL_41;
                    if (v4 >= v30)
                      goto LABEL_37;
                    v9 = *(_QWORD *)(v29 + 8 * v4);
                    ++v10;
                    if (v9)
                      goto LABEL_25;
                  }
                }
                v4 = v10;
              }
            }
          }
        }
      }
LABEL_25:
      v3 = (v9 - 1) & v9;
      v7 = __clz(__rbit64(v9)) + (v4 << 6);
    }
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v7);
    v12 = *v11;
    v13 = v11[1];
    v14 = String.lowercased()();
    swift_bridgeObjectRetain(v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v17 = sub_100518DA0(v14._countAndFlagsBits, (uint64_t)v14._object);
    v18 = _swiftEmptyDictionarySingleton[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      break;
    v21 = v16;
    if (_swiftEmptyDictionarySingleton[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100A99D98();
        if ((v21 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100A84DD4(v20, isUniquelyReferenced_nonNull_native);
      v22 = sub_100518DA0(v14._countAndFlagsBits, (uint64_t)v14._object);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_42;
      v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_4:
        v5 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v17);
        swift_bridgeObjectRelease();
        *v5 = v12;
        v5[1] = v13;
        goto LABEL_5;
      }
    }
    _swiftEmptyDictionarySingleton[(v17 >> 6) + 8] |= 1 << v17;
    *(Swift::String *)(_swiftEmptyDictionarySingleton[6] + 16 * v17) = v14;
    v24 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v17);
    *v24 = v12;
    v24[1] = v13;
    v25 = _swiftEmptyDictionarySingleton[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_39;
    _swiftEmptyDictionarySingleton[2] = v27;
    swift_bridgeObjectRetain(v14._object);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1006B5758()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[29] = v0;
  v2 = sub_10001A9A8((uint64_t *)&unk_101100320);
  v1[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for ObservedAdvertisement(0);
  v1[31] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[32] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[33] = swift_task_alloc(v5);
  v1[34] = swift_task_alloc(v5);
  return swift_task_switch(sub_1006B57EC, v0, 0);
}

uint64_t sub_1006B57EC()
{
  uint64_t v0;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  *(_QWORD *)(v0 + 280) = qword_1011B71A8;
  return swift_task_switch(sub_1006B5854, 0, 0);
}

uint64_t sub_1006B5854()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 288) = v2;
  *v2 = v0;
  v2[1] = sub_1006B58C8;
  return unsafeBlocking<A>(_:)(v0 + 200, sub_100033264, *(_QWORD *)(v0 + 280), &type metadata for Configuration);
}

uint64_t sub_1006B58C8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  swift_release();
  return swift_task_switch(sub_1006B5924, 0, 0);
}

uint64_t sub_1006B5924()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[29];
  v0[37] = v0[25];
  return swift_task_switch(sub_1006B5940, v1, 0);
}

uint64_t sub_1006B5940()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  *(_QWORD *)(v0 + 304) = sub_100C1AE54(*(_QWORD *)(v0 + 296));
  swift_bridgeObjectRelease();
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 312) = v2;
    *v2 = v0;
    v2[1] = sub_1006B5A44;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006B5A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006B5AA4, v3, 0);
}

uint64_t sub_1006B5AA4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 320))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111BB64);
    *(_QWORD *)(v0 + 328) = v2;
    *v2 = v0;
    v2[1] = sub_1006B5B84;
    return sub_100C67084(*(_QWORD *)(v0 + 304));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000017;
    v6[1] = 0x8000000100ED5AC0;
    swift_willThrow(v5);
    v7 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006B5B84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 328);
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[29];
    v6 = sub_1006B6270;
  }
  else
  {
    v7 = v3[29];
    swift_release();
    v6 = sub_1006B5C00;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

void sub_1006B5C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(void);

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 336) + 16);
  *(_QWORD *)(v0 + 352) = v2;
  v3 = __OFSUB__(v1, v2);
  v4 = v1 - v2;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v0 + 360) = v4 & ~(v4 >> 63);
    sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 160))
    {
      sub_10000F9FC((__int128 *)(v0 + 136), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v6 = (void (*)(void))((char *)&dword_1010EBC00 + dword_1010EBC00);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
      *(_QWORD *)(v0 + 368) = v5;
      *v5 = v0;
      v5[1] = sub_1006B5CC8;
      v6();
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1006B5CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006B5D28, v3, 0);
}

uint64_t sub_1006B5D28()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 376))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10111BB94);
    *(_QWORD *)(v0 + 384) = v2;
    *v2 = v0;
    v2[1] = sub_1006B5E1C;
    return sub_100C672B4(*(_QWORD *)(v0 + 360), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000017;
    v6[1] = 0x8000000100ED5AC0;
    swift_willThrow(v5);
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 272));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006B5E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 384);
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[29];
    v6 = sub_1006B62C8;
  }
  else
  {
    v7 = v3[29];
    swift_release();
    v6 = sub_1006B5E98;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1006B5E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v1 = *(_QWORD *)(v0 + 392);
  v36 = *(_QWORD **)(v0 + 336);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v1);
  sub_100302A9C(v2);
  v3 = v36;
  v4 = _swiftEmptyArrayStorage;
  v5 = v36[2];
  if (v5)
  {
    v6 = 0;
    v7 = *(_QWORD *)(v0 + 256);
    v32 = v7;
    v33 = *(_QWORD *)(v0 + 248);
    while (v6 < v36[2])
    {
      v8 = v4;
      v9 = *(_QWORD *)(v0 + 272);
      v10 = *(_QWORD *)(v0 + 240);
      v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v35 = *(_QWORD *)(v7 + 72);
      sub_100159F24((uint64_t)v36 + v11 + v35 * v6, v9);
      sub_10000F9B8(v9 + *(int *)(v33 + 48), v10, (uint64_t *)&unk_101100320);
      v12 = type metadata accessor for ObservedAdvertisement.Location(0);
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v10, 1, v12);
      sub_100004048(v10, (uint64_t *)&unk_101100320);
      v13 = *(_QWORD *)(v0 + 272);
      if ((_DWORD)v9 == 1)
      {
        sub_1000126B0(v13, type metadata accessor for ObservedAdvertisement);
        v4 = v8;
      }
      else
      {
        sub_1006B7F04(v13, *(_QWORD *)(v0 + 264));
        v4 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_10009AA18(0, v8[2] + 1, 1);
          v4 = _swiftEmptyArrayStorage;
        }
        v15 = v4[2];
        v14 = v4[3];
        if (v15 >= v14 >> 1)
        {
          sub_10009AA18(v14 > 1, v15 + 1, 1);
          v4 = _swiftEmptyArrayStorage;
        }
        v16 = *(_QWORD *)(v0 + 264);
        v4[2] = v15 + 1;
        sub_1006B7F04(v16, (uint64_t)v4 + v11 + v15 * v35);
        v7 = v32;
      }
      if (v5 == ++v6)
        goto LABEL_12;
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    v3 = v4;
    swift_bridgeObjectRelease();
    if (qword_1010E9E40 == -1)
      goto LABEL_13;
  }
  swift_once(&qword_1010E9E40, sub_1006B1E1C);
LABEL_13:
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B7458);
  swift_retain_n(v3, 2);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v17);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 392);
  if (v23)
  {
    v34 = *(_QWORD *)(v0 + 352);
    v25 = swift_slowAlloc(32, -1);
    *(_DWORD *)v25 = 134218496;
    v26 = *(_QWORD *)(v24 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 208) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 12) = 2048;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 216) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2048;
    v27 = v3[2];
    swift_release();
    *(_QWORD *)(v0 + 224) = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v25 + 24, v25 + 32);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Reconciled = %ld, Anonymous = %ld, with location: %ld.", (uint8_t *)v25, 0x20u);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 336);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease_n(v24, 2);
  }

  v29 = *(_QWORD *)(v0 + 264);
  v30 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
}

uint64_t sub_1006B6270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 320));
  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006B62C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 376);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 336));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006B632C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = v0;
  return swift_task_switch(sub_1006B6344, v0, 0);
}

uint64_t sub_1006B6344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t (__cdecl *v8)();

  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7458);
  *(_QWORD *)(v0 + 136) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Purge observations start.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v8 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v7 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 144) = v7;
    *v7 = v0;
    v7[1] = sub_1006B64E8;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1006B64E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1006B6548, v3, 0);
}

uint64_t sub_1006B6548()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 152);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    *(_QWORD *)(v0 + 160) = 0;
    *(_QWORD *)(v0 + 168) = sub_100C1B8E4(*(_QWORD *)(v0 + 120));
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1006B665C, *(_QWORD *)(v0 + 152), 0);
  }
  else
  {
    v3 = sub_100033220();
    v4 = swift_allocError(&type metadata for DaemonError, v3, 0, 0);
    *v5 = 0xD000000000000017;
    v5[1] = 0x8000000100ED5AC0;
    swift_willThrow(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006B665C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v1 = v0[20];
  sub_100C681A4(v0[21]);
  v0[22] = v1;
  if (v1)
  {
    v2 = v0[16];
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1006B6808, v2, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = (_QWORD *)swift_task_alloc(dword_10111BB5C);
    v0[23] = v4;
    *v4 = v0;
    v4[1] = sub_1006B66F4;
    return sub_100C644B0();
  }
}

uint64_t sub_1006B66F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1006B683C;
  else
    v4 = sub_1006B6758;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 128), 0);
}

uint64_t sub_1006B6758(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Purge observations finished.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 152);

  swift_release(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1006B6808()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006B683C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1006B6870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  v4[9] = v7;
  v4[10] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1006B68F8, v3, 0);
}

uint64_t sub_1006B68F8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = unk_10111D5A4;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D5A0 + dword_10111D5A0);
  swift_bridgeObjectRetain(v0[3]);
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[11] = v2;
  *v2 = v0;
  v2[1] = sub_1006B6964;
  return v4(v0[2], v0[3]);
}

uint64_t sub_1006B6964()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 88));
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v2 + 40);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_1006B849C;
  }
  else
  {
    v4 = sub_1006B69E4;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1006B69E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v0[12] = v1;
  v2 = swift_allocObject(v1, 112, 15);
  v0[13] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[14] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_1006B6A54;
  return sub_100CD63AC(v0[2]);
}

uint64_t sub_1006B6A54()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release();
  return swift_task_switch(sub_1006B6AB4, v1, 0);
}

uint64_t sub_1006B6AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 120) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 16);
    v5 = OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_identifier;
    *(_QWORD *)(v0 + 128) = OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_identifier;
    v7 = *(_QWORD *)(v0 + 64);
    v6 = *(_QWORD *)(v0 + 72);
    v8 = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 192) = v8;
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(v6 + 72);
    *(_QWORD *)(v0 + 144) = 0;
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v12 = v1 + ((v8 + 32) & ~(unint64_t)v8);
    v13 = v4 + v5;
    swift_bridgeObjectRetain(v1);
    sub_100159F24(v12, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v7, v13, v10);
    v14 = type metadata accessor for AnalyticsEvent(0);
    v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    *(_QWORD *)(v0 + 152) = v15;
    swift_defaultActor_initialize(v15);
    v16 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v15 + 14) = v16;
    UUID.init()(v16);
    v17 = &v15[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    v18 = type metadata accessor for DispatchTime(0);
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
    v19(v17, 1, 1, v18);
    v19(&v15[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v18);
    *((_QWORD *)v15 + 15) = 0xD000000000000038;
    *((_QWORD *)v15 + 16) = 0x8000000100EE0880;
    v20 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 160) = v20;
    *(_QWORD *)(v20 + 16) = v9;
    *(_QWORD *)(v20 + 24) = v7;
    *(_BYTE *)(v20 + 32) = v3 == 0;
    *(_QWORD *)(v20 + 40) = v3;
    v21 = (_QWORD *)swift_task_alloc(dword_10111D0D4);
    *(_QWORD *)(v0 + 168) = v21;
    *v21 = v0;
    v21[1] = sub_1006B6CB4;
    return sub_100CD48A8((uint64_t)&unk_101104078, v20);
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1006B6CB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 168));
  v3 = *(_QWORD *)(v2 + 160);
  v4 = *(_QWORD *)(v2 + 40);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    v5 = sub_1006B84A0;
  }
  else
  {
    swift_task_dealloc(v3);
    v5 = sub_1006B6D3C;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1006B6D3C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_allocObject(v0[12], 112, 15);
  v0[22] = v1;
  swift_defaultActor_initialize(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_10111D22C);
  v0[23] = v2;
  *v2 = v0;
  v2[1] = sub_1006B6DA4;
  return sub_100CD63AC(v0[19]);
}

uint64_t sub_1006B6DA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_1006B6E04, v1, 0);
}

uint64_t sub_1006B6E04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_1000126B0(v3, type metadata accessor for ObservedAdvertisement);
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    v7 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 144) + 1;
    *(_QWORD *)(v0 + 144) = v10;
    v11 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 48);
    v15 = *(_QWORD *)(v0 + 32);
    v16 = *(_QWORD *)(v0 + 16) + *(_QWORD *)(v0 + 128);
    sub_100159F24(*(_QWORD *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ v9 * v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v16, v14);
    v17 = type metadata accessor for AnalyticsEvent(0);
    v18 = (char *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    *(_QWORD *)(v0 + 152) = v18;
    swift_defaultActor_initialize(v18);
    v19 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v18 + 14) = v19;
    UUID.init()(v19);
    v20 = &v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    v21 = type metadata accessor for DispatchTime(0);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
    v22(v20, 1, 1, v21);
    v22(&v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v21);
    *((_QWORD *)v18 + 15) = 0xD000000000000038;
    *((_QWORD *)v18 + 16) = 0x8000000100EE0880;
    v23 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 160) = v23;
    *(_QWORD *)(v23 + 16) = v11;
    *(_QWORD *)(v23 + 24) = v12;
    *(_BYTE *)(v23 + 32) = v15 == 0;
    *(_QWORD *)(v23 + 40) = v15;
    v24 = (_QWORD *)swift_task_alloc(dword_10111D0D4);
    *(_QWORD *)(v0 + 168) = v24;
    *v24 = v0;
    v24[1] = sub_1006B6CB4;
    return sub_100CD48A8((uint64_t)&unk_101104078, v23);
  }
}

uint64_t sub_1006B7028(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 176) = a1;
  return swift_task_switch(sub_1006B7040, 0, 0);
}

uint64_t sub_1006B7040()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 16);
  v2 = sub_100CEEE68(v1);
  v3 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  *(_QWORD *)(inited + 32) = 0xD000000000000010;
  *(_QWORD *)(inited + 40) = 0x8000000100EC5DD0;
  *(_QWORD *)(inited + 72) = &type metadata for Int;
  v5 = sub_1000331DC();
  *(_QWORD *)(inited + 80) = v5;
  *(_QWORD *)(inited + 48) = v1;
  *(_WORD *)(inited + 88) = 2;
  *(_QWORD *)(inited + 96) = 0xD000000000000015;
  *(_QWORD *)(inited + 104) = 0x8000000100EE0BD0;
  *(_QWORD *)(inited + 136) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = v5;
  *(_QWORD *)(inited + 112) = v2;
  *(_WORD *)(inited + 152) = 2;
  v6 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
}

uint64_t sub_1006B7120(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v4 + 832) = a4;
  *(_BYTE *)(v4 + 602) = a3;
  *(_QWORD *)(v4 + 824) = a2;
  *(_QWORD *)(v4 + 816) = a1;
  v5 = sub_10001A9A8((uint64_t *)&unk_101100320);
  *(_QWORD *)(v4 + 840) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  *(_QWORD *)(v4 + 848) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  *(_QWORD *)(v4 + 856) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 864) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 872) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 880) = swift_task_alloc(v9);
  return swift_task_switch(sub_1006B71E4, 0, 0);
}

uint64_t sub_1006B71E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t inited;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v1 = *(_QWORD *)(v0 + 840);
  v2 = *(_QWORD *)(v0 + 816);
  v3 = type metadata accessor for ObservedAdvertisement(0);
  sub_10000F9B8(v2 + *(int *)(v3 + 48), v1, (uint64_t *)&unk_101100320);
  v4 = type metadata accessor for ObservedAdvertisement.Location(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v1, 1, v4);
  v6 = *(_QWORD *)(v0 + 864);
  v7 = *(_QWORD *)(v0 + 856);
  v8 = *(_QWORD *)(v0 + 848);
  v9 = *(_QWORD *)(v0 + 840);
  if (v5 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 840), (uint64_t *)&unk_101100320);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v8, 1, 1, v7);
LABEL_4:
    v11 = *(_QWORD *)(v0 + 848);
    static Date.distantPast.getter(v10);
    sub_100004048(v11, (uint64_t *)&unk_1010EA690);
    goto LABEL_6;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v6 + 16))(*(_QWORD *)(v0 + 848), v9 + *(int *)(v4 + 28), *(_QWORD *)(v0 + 856));
  sub_1000126B0(v9, type metadata accessor for ObservedAdvertisement.Location);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v7);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7);
  if ((_DWORD)v10 == 1)
    goto LABEL_4;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 864) + 32))(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 848), *(_QWORD *)(v0 + 856));
LABEL_6:
  v12 = *(_QWORD *)(v0 + 872);
  v13 = *(_QWORD *)(v0 + 864);
  v14 = *(_QWORD *)(v0 + 856);
  v47 = *(_QWORD *)(v0 + 832);
  v15 = *(_BYTE *)(v0 + 602);
  v16 = *(_QWORD *)(v0 + 816);
  v17 = v16 + *(int *)(v3 + 44);
  v18 = Date.timeIntervalSince(_:)(v17);
  static Date.trustedNow.getter(v12);
  v19 = Date.timeIntervalSince(_:)(v17);
  v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v20(v12, v14);
  v21 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v21, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E49180;
  *(_QWORD *)(inited + 32) = 0x496E6F6973736573;
  *(_QWORD *)(inited + 40) = 0xE900000000000044;
  v23 = UUID.uuidString.getter(inited);
  v25 = v24;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  v46 = sub_1000330C8();
  *(_QWORD *)(inited + 80) = v46;
  *(_QWORD *)(inited + 48) = v23;
  *(_QWORD *)(inited + 56) = v25;
  *(_WORD *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = 0xD000000000000016;
  *(_QWORD *)(inited + 104) = 0x8000000100EE08C0;
  *(_QWORD *)(inited + 136) = &type metadata for Double;
  v26 = sub_100033198();
  *(_QWORD *)(inited + 144) = v26;
  *(double *)(inited + 112) = v18;
  *(_WORD *)(inited + 152) = 3;
  *(_QWORD *)(inited + 160) = 0xD000000000000015;
  *(_QWORD *)(inited + 168) = 0x8000000100EE08E0;
  *(_QWORD *)(inited + 200) = &type metadata for Double;
  *(_QWORD *)(inited + 208) = v26;
  *(double *)(inited + 176) = v19;
  *(_WORD *)(inited + 216) = 3;
  *(_QWORD *)(inited + 224) = 0x7942737574617473;
  *(_QWORD *)(inited + 232) = 0xEA00000000006574;
  LOBYTE(v25) = *(_BYTE *)(v16 + 32);
  *(_QWORD *)(inited + 264) = &type metadata for UInt8;
  *(_QWORD *)(inited + 272) = sub_1001B5E80();
  *(_BYTE *)(inited + 240) = v25;
  *(_WORD *)(inited + 280) = 2;
  *(_QWORD *)(inited + 288) = 0xD000000000000015;
  *(_QWORD *)(inited + 296) = 0x8000000100ED02A0;
  *(_QWORD *)(inited + 328) = &type metadata for Int;
  v27 = sub_1000331DC();
  *(_QWORD *)(inited + 336) = v27;
  *(_QWORD *)(inited + 304) = 0;
  *(_WORD *)(inited + 344) = 2;
  *(_QWORD *)(inited + 352) = 0x7265747461426E6FLL;
  *(_QWORD *)(inited + 360) = 0xE900000000000079;
  v28 = sub_100CA7D40((uint64_t)&off_10104DB20);
  v29 = sub_1006B7904();
  v30 = sub_100A0658C(v29, v28);
  swift_bridgeObjectRelease();
  *(_BYTE *)(inited + 368) = v30 & 1;
  *(_WORD *)(inited + 408) = 0;
  *(_QWORD *)(inited + 416) = 0x696669576E6FLL;
  *(_QWORD *)(inited + 424) = 0xE600000000000000;
  *(_BYTE *)(inited + 432) = sub_100031198() & 1;
  *(_WORD *)(inited + 472) = 0;
  *(_QWORD *)(inited + 480) = 0x6563637553646964;
  *(_QWORD *)(inited + 488) = 0xEA00000000006465;
  *(_BYTE *)(inited + 496) = v15;
  *(_WORD *)(inited + 536) = 0;
  v31 = sub_1006B8C78(inited);
  if (v47)
  {
    v48 = *(_QWORD *)(v0 + 856);
    v32 = *(_QWORD *)(v0 + 832);
    v45 = *(_QWORD *)(v0 + 880);
    swift_getErrorValue(v32, v0 + 800, v0 + 752);
    v44 = v20;
    v33 = *(_QWORD *)(v0 + 760);
    v34 = *(_QWORD *)(v0 + 768);
    swift_errorRetain(v32);
    v35 = Error.domain.getter(v33, v34);
    *(_QWORD *)(v0 + 584) = &type metadata for String;
    *(_QWORD *)(v0 + 592) = v46;
    *(_QWORD *)(v0 + 560) = v35;
    *(_QWORD *)(v0 + 568) = v36;
    *(_WORD *)(v0 + 600) = 1;
    sub_10050DE28(v0 + 560, v0 + 608);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
    sub_10010D254(v0 + 608, 0x6D6F44726F727265, 0xEB000000006E6961, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_getErrorValue(v32, v0 + 808, v0 + 776);
    v38 = Error.code.getter(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 792));
    *(_QWORD *)(v0 + 680) = &type metadata for Int;
    *(_QWORD *)(v0 + 688) = v27;
    *(_QWORD *)(v0 + 656) = v38;
    *(_WORD *)(v0 + 696) = 2;
    sub_10050DE28(v0 + 656, v0 + 704);
    v39 = swift_isUniquelyReferenced_nonNull_native(v31);
    sub_10010D254(v0 + 704, 0x646F43726F727265, 0xE900000000000065, v39);
    swift_bridgeObjectRelease();
    swift_errorRelease(v32);
    v44(v45, v48);
  }
  else
  {
    v20(*(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 856));
  }
  v40 = *(_QWORD *)(v0 + 872);
  v41 = *(_QWORD *)(v0 + 848);
  v42 = *(_QWORD *)(v0 + 840);
  swift_task_dealloc(*(_QWORD *)(v0 + 880));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v31);
}

uint64_t sub_1006B7764()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 152));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublisherService()
{
  return objc_opt_self(_TtC12searchpartyd29FindMyNetworkPublisherService);
}

uint64_t sub_1006B77C8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_101104068, a2, (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService, (uint64_t)&unk_100E4922C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1006B7804()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  if (qword_1010E9E40 != -1)
    swift_once(&qword_1010E9E40, sub_1006B1E1C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7458);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Publish in progress, throttled for delay.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_1006B7F8C();
  v6 = swift_allocError(&type metadata for FindMyNetworkPublisherService.Error, v5, 0, 0);
  *v7 = 1;
  return swift_willThrow(v6);
}

uint64_t sub_1006B7904()
{
  CFMutableDictionaryRef v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_registry_entry_t v3;
  __CFString *v4;
  CFTypeRef CFProperty;
  CFTypeID v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  CFTypeRef v21;
  __CFString *v23;
  CFTypeRef v24;
  CFTypeID v25;
  char v26;
  unint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  CFTypeRef v35;

  v0 = IOServiceMatching("IOPMPowerSource");
  if (!v0)
  {
    v11 = sub_100253E58();
    v12 = (void *)static OS_os_log.default.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    os_log(_:dso:log:type:_:)("PowerStateMonitor: Could not read power source. Battery state unknown.", 70, 2, &_mh_execute_header, v12, v13, _swiftEmptyArrayStorage);

    return 0;
  }
  v1 = v0;
  MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (!MatchingService)
  {
    v14 = sub_100253E58();
    v15 = (void *)static OS_os_log.default.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("PowerStateMonitor: Could not get matching service for power source. Battery state unknown.", 90, 2, &_mh_execute_header, v15, v16, _swiftEmptyArrayStorage);
LABEL_10:

LABEL_14:
    return 0;
  }
  v3 = MatchingService;
  v4 = (__CFString *)String._bridgeToObjectiveC()();
  CFProperty = IORegistryEntryCreateCFProperty(v3, v4, kCFAllocatorDefault, 0);

  if (!CFProperty)
  {
    v17 = sub_100253E58();
    v15 = (void *)static OS_os_log.default.getter(v17);
    v18 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("PowerStateMonitor: Could not create value for fully charged key. Battery state unknown.", 87, 2, &_mh_execute_header, v15, v18, _swiftEmptyArrayStorage);
    goto LABEL_10;
  }
  v6 = CFGetTypeID(CFProperty);
  if (v6 != CFBooleanGetTypeID())
  {
    v19 = sub_100253E58();
    v15 = (void *)static OS_os_log.default.getter(v19);
    v20 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("PowerStateMonitor: unexpected type for kIOPMFullyChargedKey. Battery state unknown.", 83, 2, &_mh_execute_header, v15, v20, _swiftEmptyArrayStorage);
LABEL_12:

    v21 = CFProperty;
LABEL_13:
    swift_unknownObjectRelease(v21);
    goto LABEL_14;
  }
  v35 = CFProperty;
  swift_unknownObjectRetain(CFProperty);
  swift_dynamicCast(&v34, &v35, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 7);
  if ((v34 & 1) != 0)
  {
    v7 = sub_100253E58();
    v8 = (void *)static OS_os_log.default.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    os_log(_:dso:log:type:_:)("PowerStateMonitor: Battery state charged.", 41, 2, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    return 3;
  }
  v23 = (__CFString *)String._bridgeToObjectiveC()();
  v24 = IORegistryEntryCreateCFProperty(v3, v23, kCFAllocatorDefault, 0);

  if (!v24)
  {
    v30 = sub_100253E58();
    v15 = (void *)static OS_os_log.default.getter(v30);
    v31 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("PowerStateMonitor: Could not create value for is charging key. Battery state unknown.", 85, 2, &_mh_execute_header, v15, v31, _swiftEmptyArrayStorage);
    goto LABEL_12;
  }
  v25 = CFGetTypeID(v24);
  if (v25 != CFBooleanGetTypeID())
  {
    v32 = sub_100253E58();
    v15 = (void *)static OS_os_log.default.getter(v32);
    v33 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("PowerStateMonitor: unexpected type for kIOPMPSIsChargingKey. Battery state unknown.", 83, 2, &_mh_execute_header, v15, v33, _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    v21 = v24;
    goto LABEL_13;
  }
  v35 = v24;
  swift_unknownObjectRetain(v24);
  swift_dynamicCast(&v34, &v35, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 7);
  v26 = v34;
  v27 = sub_100253E58();
  v28 = (void *)static OS_os_log.default.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if ((v26 & 1) != 0)
  {
    v10 = 2;
    os_log(_:dso:log:type:_:)("PowerStateMonitor: Battery state charging.", 42, 2, &_mh_execute_header, v28, v29, _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    swift_unknownObjectRelease(v24);

  }
  else
  {
    os_log(_:dso:log:type:_:)("PowerStateMonitor: Battery state discharging.", 45, 2, &_mh_execute_header, v28, v29, _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    swift_unknownObjectRelease(v24);

    return 1;
  }
  return v10;
}

uint64_t sub_1006B7D5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Class isa;
  NSString v9;
  uint64_t v11;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_10000F9B8(a1, (uint64_t)v4, (uint64_t *)&unk_1010EA690);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v9);

  swift_unknownObjectRelease(isa);
  return sub_100004048(a1, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_1006B7E9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_101104074);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000D9CC0;
  return sub_1006B7120(v2, v3, v4, v5);
}

uint64_t sub_1006B7F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ObservedAdvertisement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1006B7F48()
{
  unint64_t result;

  result = qword_101104088;
  if (!qword_101104088)
  {
    result = swift_getWitnessTable(aI_27, &type metadata for SubmitUploadv2);
    atomic_store(result, (unint64_t *)&qword_101104088);
  }
  return result;
}

unint64_t sub_1006B7F8C()
{
  unint64_t result;

  result = qword_101104090;
  if (!qword_101104090)
  {
    result = swift_getWitnessTable(byte_100E492C4, &type metadata for FindMyNetworkPublisherService.Error);
    atomic_store(result, (unint64_t *)&qword_101104090);
  }
  return result;
}

uint64_t sub_1006B7FD0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1006B2100(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1006B7FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1011040A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006B8070(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1011040A0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1011040AC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100004A74;
  return sub_1006B229C(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1006B812C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1011040A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1006B81B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_1011040A0) - 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6 = (_QWORD *)swift_task_alloc(dword_1011040BC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100067F58;
  return sub_1006B26BC(v3, v4, v5);
}

uint64_t sub_1006B824C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 25) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1006B82E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 25) & ~v3;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_BYTE *)(v0 + 24);
  v7 = v0 + v4;
  v8 = v0 + ((*(_QWORD *)(v2 + 64) + v3 + v4) & ~v3);
  v9 = swift_task_alloc(dword_1011040D4);
  *(_QWORD *)(v1 + 16) = v9;
  *(_QWORD *)v9 = v1;
  *(_QWORD *)(v9 + 8) = sub_100004C28;
  *(_QWORD *)(v9 + 24) = v7;
  *(_QWORD *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 64) = v6;
  *(_QWORD *)(v9 + 16) = v5;
  return swift_task_switch(sub_1006B1910, 0, 0);
}

uint64_t storeEnumTagSinglePayload for FindMyNetworkPublisherService.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1006B83D0 + 4 * byte_100E491A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1006B8404 + 4 * byte_100E491A0[v4]))();
}

uint64_t sub_1006B8404(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006B840C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006B8414);
  return result;
}

uint64_t sub_1006B8420(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006B8428);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1006B842C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006B8434(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindMyNetworkPublisherService.Error()
{
  return &type metadata for FindMyNetworkPublisherService.Error;
}

unint64_t sub_1006B8454()
{
  unint64_t result;

  result = qword_1011040E0;
  if (!qword_1011040E0)
  {
    result = swift_getWitnessTable(byte_100E4929C, &type metadata for FindMyNetworkPublisherService.Error);
    atomic_store(result, (unint64_t *)&qword_1011040E0);
  }
  return result;
}

unint64_t sub_1006B84A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101111CA0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100518DA0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B85B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104120);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100518DA0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B86C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_10001A9A8(&qword_101104108);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_10001A9A8(&qword_101104118);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104108);
    v15 = *v5;
    v16 = v5[1];
    result = sub_100518DA0(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for SystemVersionNumber(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1006B8864(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_10001A9A8(&qword_1011040F8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }
  sub_10001A9A8(&qword_101104110);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_1011040F8);
    v15 = *v5;
    result = sub_100518DB4(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for FeatureSupportMatrix(0);
    result = sub_1000126EC(v10, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, type metadata accessor for FeatureSupportMatrix);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_12;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v24 = v26;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1006B8A00(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1011040E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100518DA0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B8B10(uint64_t a1)
{
  return sub_1006B9A40(a1, &qword_1010F9F80, &qword_1010F9F88, (uint64_t (*)(uint64_t *, unint64_t))sub_10010F90C);
}

unint64_t sub_1006B8B2C(uint64_t a1)
{
  return sub_1006BB0DC(a1, (uint64_t *)&unk_101111CC0);
}

unint64_t sub_1006B8B38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101111490);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v7, (uint64_t)&v16, &qword_101104138);
    v8 = v16;
    v9 = v17;
    result = sub_100518DA0(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_1006C92F8((uint64_t)&v18, v4[7] + 48 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 64;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B8C78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104148);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v7, (uint64_t)&v16, &qword_101104150);
    v8 = v16;
    v9 = v17;
    result = sub_100518DA0(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_10050DE28((uint64_t)&v18, v4[7] + 48 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 64;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B8DB8(uint64_t a1)
{
  return sub_1006BB0DC(a1, &qword_1011042E0);
}

unint64_t sub_1006B8DC4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104168);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    result = sub_100518DA0(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B8EE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = sub_10001A9A8(&qword_101104210);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101111A00);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104210);
    v15 = *v5;
    result = sub_100518EE0(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for BookmarkMetaData(0);
    result = sub_1000126EC(v10, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, type metadata accessor for BookmarkMetaData);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9080(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_101104158, &qword_101104160);
}

unint64_t sub_1006B9094(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_1011041D8, (uint64_t *)&unk_101111920);
}

unint64_t sub_1006B90A8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[2];

  v6 = sub_10001A9A8(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v27[1] = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v17, (uint64_t)v9, a2);
    result = sub_100003FB0((uint64_t)v9);
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = v12[6];
    v23 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v9, v23);
    *(_QWORD *)(v12[7] + 8 * v21) = *(_QWORD *)&v9[v14];
    v24 = v12[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_11;
    v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9234(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104140);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = *(v5 - 1);
    v8 = v6;
    result = sub_100519054((uint64_t)v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v3[6] + v11) = v7;
    *(_QWORD *)(v3[7] + v11) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B933C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1011042D8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = (id)*(v5 - 1);
    swift_errorRetain(v6);
    result = sub_1005190D4((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v7;
    *(_QWORD *)(v3[7] + v10) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9444(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104130);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (char *)(a1 + 56);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 3);
    v7 = *((_QWORD *)v5 - 2);
    v8 = (void *)*((_QWORD *)v5 - 1);
    v9 = *v5;
    swift_bridgeObjectRetain(v7);
    sub_1006C92E8(v8, v9);
    result = sub_100518DA0(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = v3[7] + 16 * result;
    *(_QWORD *)v13 = v8;
    *(_BYTE *)(v13 + 8) = v9;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 32;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9570(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1011119F0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    result = sub_100518DA0(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_BYTE *)(v3[7] + result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 24;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9680(uint64_t a1)
{
  return sub_1006BA758(a1, &qword_101104180);
}

unint64_t sub_1006B968C(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_1010FB190, &qword_1010FB240);
}

unint64_t sub_1006B96A0(uint64_t a1)
{
  return sub_1006BB0DC(a1, &qword_1011042D0);
}

unint64_t sub_1006B96AC(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_1011042C8, &qword_101111DE0);
}

unint64_t sub_1006B96C0(uint64_t a1)
{
  return sub_1006BB0DC(a1, &qword_101104238);
}

unint64_t sub_1006B96CC(uint64_t a1)
{
  return sub_1006BB0DC(a1, (uint64_t *)&unk_101111C90);
}

unint64_t sub_1006B96D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = sub_10001A9A8(&qword_101104128);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8((uint64_t *)&unk_101111800);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104128);
    v15 = *v5;
    result = sub_100518D70(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v8[6] + result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for Date(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, v10, v20);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9870(uint64_t a1)
{
  return sub_1006BB66C(a1, &qword_1010F2B70, &qword_1010FB320);
}

unint64_t sub_1006B9884(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = sub_10001A9A8(&qword_1010F4688);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101111DD0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (__int128 *)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_1010F4688);
    result = sub_100003FB0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = sub_10000F9FC(v10, v8[7] + 40 * v17);
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9A24(uint64_t a1)
{
  return sub_1006B9A40(a1, (uint64_t *)&unk_1010F6370, (uint64_t *)&unk_101103AA0, (uint64_t (*)(uint64_t *, unint64_t))sub_10010F90C);
}

unint64_t sub_1006B9A40(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v12, (uint64_t)&v21, a3);
    v13 = v21;
    v14 = v22;
    result = sub_100518DA0(v21, v22);
    if ((v16 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = (uint64_t *)(v9[6] + 16 * result);
    *v17 = v13;
    v17[1] = v14;
    result = a4(&v23, v9[7] + 32 * result);
    v18 = v9[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v9[2] = v20;
    v12 += 48;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9B78(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_101104250, &qword_101111D00);
}

unint64_t sub_1006B9B8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = sub_10001A9A8(&qword_1011042C0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8((uint64_t *)&unk_101111DC0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_1011042C0);
    result = sub_1005193C8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for MACAddress(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for Date(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9D44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = sub_10001A9A8(&qword_1011042B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1011042B8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_1011042B0);
    result = sub_1005193C8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for MACAddress(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9ED8(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_1010FB2C8, &qword_101111510);
}

unint64_t sub_1006B9EEC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8((uint64_t *)&unk_1011118B0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = *(v5 - 1);
    v8 = v6;
    result = sub_100519464(v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v3[6] + v11) = v7;
    *(_QWORD *)(v3[7] + v11) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006B9FF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = sub_10001A9A8(&qword_101104248);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101111560);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104248);
    result = sub_1005194F4((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for OwnedBeaconRecord(0);
    result = sub_1000126EC((uint64_t)v5, v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BA18C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104278);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_QWORD *)(a1 + 56);
  while (1)
  {
    v6 = *((_BYTE *)v5 - 24);
    v7 = *(v5 - 2);
    v8 = *(v5 - 1);
    v9 = *v5;
    swift_bridgeObjectRetain(v8);
    swift_retain();
    result = sub_100519120(v6, v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = v3[6] + 24 * result;
    *(_BYTE *)v12 = v6;
    *(_QWORD *)(v12 + 8) = v7;
    *(_QWORD *)(v12 + 16) = v8;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 4;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BA2C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = sub_10001A9A8(&qword_101104290);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8((uint64_t *)&unk_1011114B0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104290);
    result = sub_100003FB0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BA458(uint64_t a1)
{
  return sub_1006BA470(a1, &qword_101104280);
}

unint64_t sub_1006BA464(uint64_t a1)
{
  return sub_1006BA470(a1, &qword_101104288);
}

unint64_t sub_1006BA470(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v4 = sub_10001A9A8(&qword_101104258);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
    v10 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(a2);
  v9 = static _DictionaryStorage.allocate(capacity:)(v8);
  v10 = (_QWORD *)v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v10;
  }
  v12 = *(int *)(v4 + 48);
  v13 = v9 + 64;
  v14 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v25[1] = a1;
  v15 = a1 + v14;
  v16 = *(_QWORD *)(v5 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v15, (uint64_t)v7, &qword_101104258);
    result = sub_100003FB0((uint64_t)v7);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = v10[6];
    v21 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v19, v7, v21);
    *(_OWORD *)(v10[7] + 16 * v19) = *(_OWORD *)&v7[v12];
    v22 = v10[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v10[2] = v24;
    v15 += v16;
    if (!--v11)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BA600(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1011041B0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (unint64_t *)(a1 + 64);
  while (1)
  {
    v6 = *((_BYTE *)v5 - 32);
    v7 = *(v5 - 3);
    v8 = *(v5 - 2);
    v9 = *(v5 - 1);
    v10 = *v5;
    swift_bridgeObjectRetain(v8);
    sub_10001BBBC(v9, v10);
    result = sub_100519120(v6, v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = v3[6] + 24 * result;
    *(_BYTE *)v13 = v6;
    *(_QWORD *)(v13 + 8) = v7;
    *(_QWORD *)(v13 + 16) = v8;
    v14 = (uint64_t *)(v3[7] + 16 * result);
    *v14 = v9;
    v14[1] = v10;
    v15 = v3[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5 += 5;
    v3[2] = v17;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BA740(uint64_t a1)
{
  return sub_1006BA470(a1, &qword_101104260);
}

unint64_t sub_1006BA74C(uint64_t a1)
{
  return sub_1006BA758(a1, &qword_101111840);
}

unint64_t sub_1006BA758(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v15 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_retain();
    result = sub_100518DA0(v7, v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v4[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v15;
    v12 = v4[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BA87C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD v25[2];

  v2 = sub_10001A9A8(&qword_101104268);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104270);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104268);
    result = sub_100003FB0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7];
    v21 = type metadata accessor for DispatchTime(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20 + *(_QWORD *)(*(_QWORD *)(v21 - 8) + 72) * v17, v10, v21);
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BAA34(uint64_t a1)
{
  return sub_1006BAD74(a1, &qword_101104178, &qword_101111650, type metadata accessor for BeaconEstimatedLocation);
}

unint64_t sub_1006BAA50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101111D80);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v7, (uint64_t)v16, &qword_1011041A8);
    result = sub_100518E58((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10010F90C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BAB90(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_1011041B8, &qword_1011041C0);
}

unint64_t sub_1006BABA4(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_1011041C8, &qword_1011041D0);
}

unint64_t sub_1006BABB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = sub_10001A9A8(&qword_1011041F0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8((uint64_t *)&unk_1011119D0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_1011041F0);
    v15 = *v5;
    v16 = v5[1];
    result = sub_100518DA0(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    result = sub_1000126EC(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, type metadata accessor for MultipartAccessoryPairingInfo);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BAD58(uint64_t a1)
{
  return sub_1006BAD74(a1, &qword_1011042A8, &qword_101111DA0, type metadata accessor for BeaconState);
}

unint64_t sub_1006BAD74(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v7 = sub_10001A9A8(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v13;
  }
  v15 = (uint64_t)&v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v18, (uint64_t)v10, v31);
    result = sub_100003FB0((uint64_t)v10);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = v13[6];
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 32))(v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v10, v24);
    v25 = v13[7];
    v26 = a4(0);
    result = sub_1000126EC(v15, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v22, a4);
    v27 = v13[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_11;
    v13[2] = v29;
    v18 += v19;
    if (!--v14)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BAF20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = sub_10001A9A8(&qword_101104298);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1011042A0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104298);
    result = sub_100003FB0((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7] + 40 * v17;
    v21 = *(_OWORD *)(v10 + 8);
    v22 = *(_OWORD *)(v10 + 24);
    *(_QWORD *)v20 = *(_QWORD *)v10;
    *(_OWORD *)(v20 + 8) = v21;
    *(_OWORD *)(v20 + 24) = v22;
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BB0D0(uint64_t a1)
{
  return sub_1006BB0DC(a1, &qword_101104240);
}

unint64_t sub_1006BB0DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  swift_retain();
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100518DA0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BB1F0(uint64_t a1)
{
  return sub_1006BB218(a1, &qword_101104228, &qword_101104230);
}

unint64_t sub_1006BB204(uint64_t a1)
{
  return sub_1006BB218(a1, &qword_101104220, &qword_1011114F0);
}

unint64_t sub_1006BB218(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = sub_10001A9A8(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v27 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v27);
    return (unint64_t)v12;
  }
  sub_10001A9A8(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    goto LABEL_9;
  v14 = *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29 = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v17, (uint64_t)v9, a2);
    result = sub_100519AC8((uint64_t)v9);
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = v12[6];
    v23 = type metadata accessor for BeaconKeyManager.FileKey(0);
    result = sub_1000126EC((uint64_t)v9, v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, type metadata accessor for BeaconKeyManager.FileKey);
    *(_QWORD *)(v12[7] + 8 * v21) = *(_QWORD *)&v9[v14];
    v24 = v12[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_12;
    v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      v27 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_1006BB3A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8((uint64_t *)&unk_1011117F0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    v7 = (uint64_t)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    v9 = v8;
    result = sub_100518DA0(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BB4BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[2];

  v2 = sub_10001A9A8(&qword_101104170);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101111640);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104170);
    v15 = *v5;
    result = sub_100518FA4(*v5);
    if ((v17 & 1) != 0)
      break;
    v18 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v8[6] + 8 * result) = v15;
    v19 = v8[7];
    v20 = type metadata accessor for BeaconStoreFileRecord(0);
    result = sub_1000126EC(v10, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v18, type metadata accessor for BeaconStoreFileRecord);
    v21 = v8[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BB658(uint64_t a1)
{
  return sub_1006BB66C(a1, &qword_101104218, &qword_1010FB398);
}

unint64_t sub_1006BB66C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[2];

  v6 = sub_10001A9A8(a2);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
    v12 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(a3);
  v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = *(int *)(v6 + 48);
  v15 = v11 + 64;
  v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v27[1] = a1;
  v17 = a1 + v16;
  v18 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v17, (uint64_t)v9, a2);
    result = sub_100003FB0((uint64_t)v9);
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = v12[6];
    v23 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v22 + *(_QWORD *)(*(_QWORD *)(v23 - 8) + 72) * v21, v9, v23);
    *(_BYTE *)(v12[7] + v21) = v9[v14];
    v24 = v12[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_11;
    v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BB7F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[2];

  v2 = sub_10001A9A8(&qword_101104200);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_101104208);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_101104200);
    result = sub_1005193C8((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for MACAddress(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_11;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BB98C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[2];

  v2 = sub_10001A9A8(&qword_1011041F8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_QWORD *)((char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8((uint64_t *)&unk_1011118D0);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v13, (uint64_t)v5, &qword_1011041F8);
    v15 = *v5;
    v16 = v5[1];
    result = sub_100518E4C(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    result = sub_1000126EC(v10, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, type metadata accessor for OwnedBeaconGroup.PairingState);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_11;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1006BBB2C(uint64_t a1)
{
  return sub_1006BAD74(a1, &qword_1011041E8, &qword_101111960, type metadata accessor for SafeLocation);
}

unint64_t sub_1006BBB48(uint64_t a1)
{
  return sub_1006B90A8(a1, &qword_101104190, &qword_101104198);
}

unint64_t sub_1006BBB5C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1010FD050);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10000F9B8(v7, (uint64_t)&v14, &qword_101104188);
    v8 = v14;
    result = sub_100519054(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_10010F90C(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1006BBC88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;

  if (qword_1010E9E48 != -1)
    swift_once(&qword_1010E9E48, sub_1006C55D8);
  v2 = qword_1011B7470;
  v3 = *(_QWORD *)algn_1011B7478;
  *(_QWORD *)a1 = qword_1011B7470;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = 3;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0x408C200000000000;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0x406E000000000000;
  *(_WORD *)(a1 + 56) = 0;
  sub_10001BBBC(v2, v3);
  if (qword_1010E9E50 != -1)
    swift_once(&qword_1010E9E50, sub_1006C5660);
  v4 = qword_1011B7480;
  *(_QWORD *)(a1 + 64) = qword_1011B7480;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0xD000000000000012;
  *(_QWORD *)(a1 + 88) = 0x8000000100ECC3F0;
  *(_QWORD *)(a1 + 96) = 1;
  *(_BYTE *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 105) = 256;
  *(_QWORD *)(a1 + 112) = 60;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 15;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 1440;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 5000;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 3;
  *(_BYTE *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0x4000000000000000;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 60;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 60;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0x40F5180000000000;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 5;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 604800;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 43200;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 24;
  *(_BYTE *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 313) = 1;
  v5 = qword_1010E9E58;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1)
    swift_once(&qword_1010E9E58, sub_1006C5674);
  v6 = qword_1011B7488;
  *(_QWORD *)(a1 + 320) = qword_1011B7488;
  *(_QWORD *)(a1 + 328) = 4;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 24;
  *(_BYTE *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 1440;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 1200;
  *(_BYTE *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 600;
  *(_BYTE *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 8640;
  *(_BYTE *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 8640;
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 2880;
  *(_BYTE *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 10080;
  *(_BYTE *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 2880;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 481) = 1;
  *(_QWORD *)(a1 + 488) = 5;
  *(_BYTE *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 3;
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 520) = 10;
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 1200;
  *(_BYTE *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 10080;
  *(_BYTE *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 568) = 600;
  *(_BYTE *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 584) = 1440;
  *(_BYTE *)(a1 + 592) = 0;
  swift_bridgeObjectRetain(v6);
  *(_QWORD *)(a1 + 600) = sub_1006C8E68();
  *(_QWORD *)(a1 + 608) = 0x403E000000000000;
  *(_BYTE *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 624) = 0x408C200000000000;
  *(_BYTE *)(a1 + 632) = 0;
  if (qword_1010E9E60 != -1)
    swift_once(&qword_1010E9E60, sub_1006C5904);
  v7 = (void *)qword_1011B7490;
  *(_QWORD *)(a1 + 640) = qword_1011B7490;
  v8 = qword_1010E9E68;
  v9 = v7;
  if (v8 != -1)
    swift_once(&qword_1010E9E68, sub_1006C591C);
  v10 = qword_1011B7498;
  *(_QWORD *)(a1 + 648) = qword_1011B7498;
  *(_QWORD *)(a1 + 672) = 7;
  *(_BYTE *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 656) = 20;
  *(_BYTE *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 688) = 300;
  *(_BYTE *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 704) = 60;
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 1440;
  *(_BYTE *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 729) = 1;
  v11 = qword_1010E9E70;
  swift_bridgeObjectRetain(v10);
  if (v11 != -1)
    swift_once(&qword_1010E9E70, sub_1006C5968);
  v120 = xmmword_1011B74B0;
  v121 = xmmword_1011B74A0;
  v12 = xmmword_1011B74C0;
  v13 = qword_1011B74D0;
  v118 = unk_1011B74E8;
  v119 = unk_1011B74D8;
  v15 = qword_1011B74F8;
  v14 = unk_1011B7500;
  v16 = qword_1011B7508;
  v17 = (int *)type metadata accessor for DefaultConfigurationLayer(0);
  v18 = a1 + v17[70];
  *(_OWORD *)v18 = v121;
  *(_OWORD *)(v18 + 16) = v120;
  *(_OWORD *)(v18 + 32) = v12;
  *(_QWORD *)(v18 + 48) = v13;
  *(_OWORD *)(v18 + 56) = v119;
  *(_OWORD *)(v18 + 72) = v118;
  *(_QWORD *)(v18 + 88) = v15;
  *(_QWORD *)(v18 + 96) = v14;
  *(_QWORD *)(v18 + 104) = v16;
  v19 = a1 + v17[60];
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = a1 + v17[61];
  v22 = type metadata accessor for Date(0);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v23(v21, 1, 1, v22);
  v24 = a1 + v17[62];
  *(_QWORD *)v24 = 0;
  *(_BYTE *)(v24 + 8) = 1;
  v23(a1 + v17[63], 1, 1, v22);
  v25 = a1 + v17[64];
  *(_QWORD *)v25 = 48;
  *(_BYTE *)(v25 + 8) = 0;
  v26 = a1 + v17[65];
  *(_QWORD *)v26 = 48;
  *(_BYTE *)(v26 + 8) = 0;
  v27 = a1 + v17[66];
  *(_QWORD *)v27 = 0x4010000000000000;
  *(_BYTE *)(v27 + 8) = 0;
  v28 = a1 + v17[67];
  *(_QWORD *)v28 = 0x4004CCCCCCCCCCCDLL;
  *(_BYTE *)(v28 + 8) = 0;
  strcpy((char *)(a1 + v17[68]), "333333\a@");
  v29 = a1 + v17[69];
  *(_QWORD *)v29 = 0x3FF999999999999ALL;
  *(_BYTE *)(v29 + 8) = 0;
  *(_BYTE *)(a1 + v17[71]) = 1;
  *(_BYTE *)(a1 + v17[72]) = 1;
  *(_BYTE *)(a1 + v17[73]) = 0;
  v30 = a1 + v17[74];
  *(_QWORD *)v30 = 0x4092C00000000000;
  *(_BYTE *)(v30 + 8) = 0;
  v31 = a1 + v17[75];
  *(_QWORD *)v31 = 0x4082C00000000000;
  *(_BYTE *)(v31 + 8) = 0;
  v32 = a1 + v17[76];
  *(_QWORD *)v32 = 0x4092C00000000000;
  *(_BYTE *)(v32 + 8) = 0;
  v33 = a1 + v17[77];
  *(_QWORD *)v33 = 0x4082C00000000000;
  *(_BYTE *)(v33 + 8) = 0;
  v34 = a1 + v17[78];
  *(_QWORD *)v34 = 0x40B0E00000000000;
  *(_BYTE *)(v34 + 8) = 0;
  v35 = a1 + v17[79];
  *(_QWORD *)v35 = 0x4150266000000000;
  *(_BYTE *)(v35 + 8) = 0;
  v36 = a1 + v17[80];
  *(_QWORD *)v36 = 0x4122750000000000;
  *(_BYTE *)(v36 + 8) = 0;
  v37 = (_QWORD *)(a1 + v17[81]);
  *v37 = 0xD000000000000010;
  v37[1] = 0x8000000100EE0D40;
  *(_BYTE *)(a1 + v17[82]) = 0;
  v38 = a1 + v17[83];
  *(_QWORD *)v38 = 43200;
  *(_BYTE *)(v38 + 8) = 0;
  v39 = a1 + v17[84];
  *(_QWORD *)v39 = 0x40AC200000000000;
  *(_BYTE *)(v39 + 8) = 0;
  v40 = a1 + v17[85];
  *(_QWORD *)v40 = 60;
  *(_BYTE *)(v40 + 8) = 0;
  v41 = (_QWORD *)(a1 + v17[86]);
  *v41 = 0xD000000000000015;
  v41[1] = 0x8000000100EE0D60;
  v42 = a1 + v17[87];
  *(_QWORD *)v42 = 10;
  *(_BYTE *)(v42 + 8) = 0;
  v43 = (_QWORD *)(a1 + v17[88]);
  *v43 = 0xD000000000000019;
  v43[1] = 0x8000000100EE0D80;
  v44 = a1 + v17[89];
  *(_QWORD *)v44 = 43200;
  *(_BYTE *)(v44 + 8) = 0;
  v45 = (_QWORD *)(a1 + v17[90]);
  *v45 = 0xD000000000000018;
  v45[1] = 0x8000000100EE0DA0;
  v46 = a1 + v17[91];
  *(_QWORD *)v46 = 0x404E000000000000;
  *(_BYTE *)(v46 + 8) = 0;
  *(_BYTE *)(a1 + v17[92]) = 1;
  *(_BYTE *)(a1 + v17[93]) = 1;
  *(_BYTE *)(a1 + v17[94]) = 1;
  *(_BYTE *)(a1 + v17[95]) = 1;
  v47 = qword_1010E9E78;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  if (v47 != -1)
    swift_once(&qword_1010E9E78, sub_1006C59B4);
  v48 = a1 + v17[96];
  *(_QWORD *)v48 = qword_1011B7510;
  *(_BYTE *)(v48 + 8) = 0;
  v49 = a1 + v17[97];
  *(_QWORD *)v49 = 15;
  *(_BYTE *)(v49 + 8) = 0;
  v50 = a1 + v17[98];
  *(_QWORD *)v50 = 5;
  *(_BYTE *)(v50 + 8) = 0;
  v51 = a1 + v17[99];
  *(_QWORD *)v51 = 120;
  *(_BYTE *)(v51 + 8) = 0;
  v52 = a1 + v17[100];
  *(_QWORD *)v52 = 24;
  *(_BYTE *)(v52 + 8) = 0;
  v53 = a1 + v17[101];
  *(_QWORD *)v53 = 0x4049000000000000;
  *(_BYTE *)(v53 + 8) = 0;
  v54 = a1 + v17[102];
  *(_QWORD *)v54 = 0x4024000000000000;
  *(_BYTE *)(v54 + 8) = 0;
  v55 = a1 + v17[103];
  *(_QWORD *)v55 = 0x4044000000000000;
  *(_BYTE *)(v55 + 8) = 0;
  v56 = a1 + v17[104];
  *(_QWORD *)v56 = 32;
  *(_BYTE *)(v56 + 8) = 0;
  v57 = a1 + v17[105];
  *(_QWORD *)v57 = 12;
  *(_BYTE *)(v57 + 8) = 0;
  v58 = a1 + v17[106];
  *(_QWORD *)v58 = 32;
  *(_BYTE *)(v58 + 8) = 0;
  v59 = a1 + v17[107];
  *(_QWORD *)v59 = 0x4034000000000000;
  *(_BYTE *)(v59 + 8) = 0;
  v60 = a1 + v17[108];
  *(_QWORD *)v60 = 0x403E000000000000;
  *(_BYTE *)(v60 + 8) = 0;
  v61 = a1 + v17[109];
  *(_QWORD *)v61 = 7;
  *(_BYTE *)(v61 + 8) = 0;
  v62 = a1 + v17[110];
  *(_QWORD *)v62 = 30;
  *(_BYTE *)(v62 + 8) = 0;
  v63 = a1 + v17[111];
  *(_QWORD *)v63 = 60;
  *(_BYTE *)(v63 + 8) = 0;
  v64 = a1 + v17[112];
  *(_QWORD *)v64 = 30;
  *(_BYTE *)(v64 + 8) = 0;
  v65 = a1 + v17[113];
  *(_QWORD *)v65 = 14;
  *(_BYTE *)(v65 + 8) = 0;
  v66 = a1 + v17[114];
  *(_QWORD *)v66 = 4320;
  *(_BYTE *)(v66 + 8) = 0;
  v67 = a1 + v17[115];
  *(_QWORD *)v67 = 2160;
  *(_BYTE *)(v67 + 8) = 0;
  v68 = a1 + v17[116];
  *(_QWORD *)v68 = 2160;
  *(_BYTE *)(v68 + 8) = 0;
  v69 = a1 + v17[117];
  *(_QWORD *)v69 = 0x405E000000000000;
  *(_BYTE *)(v69 + 8) = 0;
  *(_BYTE *)(a1 + v17[118]) = 1;
  if (qword_1010E9E80 != -1)
    swift_once(&qword_1010E9E80, sub_1006C59C4);
  v70 = a1 + v17[119];
  *(_QWORD *)v70 = qword_1011B7518;
  *(_BYTE *)(v70 + 8) = 0;
  v71 = a1 + v17[120];
  *(_QWORD *)v71 = 0x4000000000000000;
  *(_BYTE *)(v71 + 8) = 0;
  v72 = a1 + v17[121];
  *(_QWORD *)v72 = 50;
  *(_BYTE *)(v72 + 8) = 0;
  *(_BYTE *)(a1 + v17[122]) = 1;
  *(_BYTE *)(a1 + v17[123]) = 1;
  *(_BYTE *)(a1 + v17[124]) = 1;
  v73 = a1 + v17[125];
  *(_QWORD *)v73 = 86400;
  *(_BYTE *)(v73 + 8) = 0;
  v74 = a1 + v17[126];
  *(_QWORD *)v74 = 0x4014000000000000;
  *(_BYTE *)(v74 + 8) = 0;
  if (qword_1010E9E88 != -1)
    swift_once(&qword_1010E9E88, sub_1006C59D8);
  v75 = a1 + v17[127];
  *(_QWORD *)v75 = qword_1011B7520;
  *(_BYTE *)(v75 + 8) = 0;
  v76 = a1 + v17[128];
  *(_QWORD *)v76 = 96;
  *(_BYTE *)(v76 + 8) = 0;
  v77 = a1 + v17[129];
  *(_QWORD *)v77 = 0;
  *(_BYTE *)(v77 + 8) = 0;
  v78 = a1 + v17[130];
  *(_QWORD *)v78 = 96;
  *(_BYTE *)(v78 + 8) = 0;
  v79 = a1 + v17[131];
  *(_QWORD *)v79 = 0;
  *(_BYTE *)(v79 + 8) = 0;
  if (qword_1010E9E90 != -1)
    swift_once(&qword_1010E9E90, sub_1006C59EC);
  v80 = a1 + v17[132];
  *(_QWORD *)v80 = qword_1011B7528;
  *(_BYTE *)(v80 + 8) = 0;
  *(_BYTE *)(a1 + v17[133]) = 1;
  v81 = a1 + v17[134];
  *(_QWORD *)v81 = 0x404E000000000000;
  *(_BYTE *)(v81 + 8) = 0;
  if (qword_1010E9EA0 != -1)
    swift_once(&qword_1010E9EA0, sub_1006C5A14);
  v82 = qword_1011B7538;
  *(_QWORD *)(a1 + v17[135]) = qword_1011B7538;
  v83 = qword_1010E9E98;
  swift_bridgeObjectRetain(v82);
  if (v83 != -1)
    swift_once(&qword_1010E9E98, sub_1006C5A00);
  v84 = a1 + v17[136];
  *(_QWORD *)v84 = qword_1011B7530;
  *(_BYTE *)(v84 + 8) = 0;
  *(_BYTE *)(a1 + v17[137]) = 1;
  if (qword_1010E9EA8 != -1)
    swift_once(&qword_1010E9EA8, sub_1006C5A28);
  v85 = qword_1011B7540;
  *(_QWORD *)(a1 + v17[138]) = qword_1011B7540;
  *(_BYTE *)(a1 + v17[139]) = 0;
  v86 = a1 + v17[140];
  *(_QWORD *)v86 = 0x3FB999999999999ALL;
  *(_BYTE *)(v86 + 8) = 0;
  v87 = a1 + v17[141];
  *(_QWORD *)v87 = 0x40F5180000000000;
  *(_BYTE *)(v87 + 8) = 0;
  *(_BYTE *)(a1 + v17[142]) = 1;
  *(_BYTE *)(a1 + v17[143]) = 0;
  v88 = a1 + v17[144];
  *(_QWORD *)v88 = 6;
  *(_BYTE *)(v88 + 8) = 0;
  v89 = a1 + v17[145];
  *(_QWORD *)v89 = 8;
  *(_BYTE *)(v89 + 8) = 0;
  v90 = a1 + v17[146];
  *(_QWORD *)v90 = 165;
  *(_BYTE *)(v90 + 8) = 0;
  v91 = a1 + v17[147];
  *(_QWORD *)v91 = 32;
  *(_BYTE *)(v91 + 8) = 0;
  v92 = a1 + v17[148];
  *(_QWORD *)v92 = 32;
  *(_BYTE *)(v92 + 8) = 0;
  v93 = a1 + v17[149];
  *(_QWORD *)v93 = 200;
  *(_BYTE *)(v93 + 8) = 0;
  v94 = a1 + v17[150];
  *(_QWORD *)v94 = 5;
  *(_BYTE *)(v94 + 8) = 0;
  v95 = a1 + v17[151];
  *(_QWORD *)v95 = 32;
  *(_BYTE *)(v95 + 8) = 0;
  v96 = a1 + v17[152];
  *(_QWORD *)v96 = 7;
  *(_BYTE *)(v96 + 8) = 0;
  v97 = a1 + v17[153];
  *(_QWORD *)v97 = 3;
  *(_BYTE *)(v97 + 8) = 0;
  v98 = a1 + v17[154];
  *(_QWORD *)v98 = 3;
  *(_BYTE *)(v98 + 8) = 0;
  v99 = a1 + v17[155];
  *(_QWORD *)v99 = 30;
  *(_BYTE *)(v99 + 8) = 0;
  v100 = a1 + v17[156];
  *(_QWORD *)v100 = 300;
  *(_BYTE *)(v100 + 8) = 0;
  v101 = a1 + v17[157];
  *(_QWORD *)v101 = 2160;
  *(_BYTE *)(v101 + 8) = 0;
  v102 = a1 + v17[158];
  *(_QWORD *)v102 = 1200;
  *(_BYTE *)(v102 + 8) = 0;
  v103 = a1 + v17[159];
  *(_QWORD *)v103 = 0x404E000000000000;
  *(_BYTE *)(v103 + 8) = 0;
  v104 = a1 + v17[160];
  *(_QWORD *)v104 = 0x4132750000000000;
  *(_BYTE *)(v104 + 8) = 0;
  *(_BYTE *)(a1 + v17[161]) = 0;
  *(_BYTE *)(a1 + v17[162]) = 0;
  v105 = a1 + v17[163];
  *(_QWORD *)v105 = 0x40AC200000000000;
  *(_BYTE *)(v105 + 8) = 0;
  v106 = a1 + v17[164];
  *(_QWORD *)v106 = 0x409C200000000000;
  *(_BYTE *)(v106 + 8) = 0;
  *(_BYTE *)(a1 + v17[165]) = 0;
  v107 = a1 + v17[166];
  *(_DWORD *)v107 = 2;
  *(_BYTE *)(v107 + 4) = 0;
  v108 = a1 + v17[167];
  *(_QWORD *)v108 = 10;
  *(_BYTE *)(v108 + 8) = 0;
  v109 = a1 + v17[168];
  *(_QWORD *)v109 = 0x404E000000000000;
  *(_BYTE *)(v109 + 8) = 0;
  v110 = a1 + v17[169];
  *(_QWORD *)v110 = 0x4034000000000000;
  *(_BYTE *)(v110 + 8) = 0;
  v111 = a1 + v17[170];
  *(_QWORD *)v111 = 0x4014000000000000;
  *(_BYTE *)(v111 + 8) = 0;
  v112 = a1 + v17[171];
  *(_QWORD *)v112 = 0x408C200000000000;
  *(_BYTE *)(v112 + 8) = 0;
  v113 = a1 + v17[172];
  *(_QWORD *)v113 = 0x408C200000000000;
  *(_BYTE *)(v113 + 8) = 0;
  v114 = a1 + v17[173];
  *(_QWORD *)v114 = 0x404E000000000000;
  *(_BYTE *)(v114 + 8) = 0;
  *(_BYTE *)(a1 + v17[174]) = 0;
  v115 = a1 + v17[175];
  *(_QWORD *)v115 = 0x40F5180000000000;
  *(_BYTE *)(v115 + 8) = 0;
  v116 = a1 + v17[176];
  *(_QWORD *)v116 = 0x4122750000000000;
  *(_BYTE *)(v116 + 8) = 0;
  return swift_bridgeObjectRetain(v85);
}

uint64_t sub_1006BCA4C@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char *v256;
  char v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  char v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  char v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  char v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  char v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  char v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char *v316;
  char v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  char v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  char v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  char v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  char v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  char v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  char v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  char *v364;
  char v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  char v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  char *v379;
  char v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  char v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  char *v394;
  char v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char *v399;
  char v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  char v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  char *v414;
  char v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  char *v421;
  char v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  char *v426;
  char v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  char v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  char v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  char *v447;
  char v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  char v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  char *v457;
  char v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  char v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  char v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  char *v472;
  char v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  char *v477;
  char v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char *v484;
  char v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  char *v491;
  char v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  char *v502;
  char v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char *v507;
  char v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  char *v516;
  char v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  char *v521;
  char v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  char *v526;
  char v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  char *v531;
  char v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  char *v536;
  char v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  char *v541;
  char v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  char *v546;
  char v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  char *v551;
  char v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  char *v556;
  char v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  char *v561;
  char v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  char *v566;
  char v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  char v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  char *v576;
  char v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  char v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  char *v586;
  char v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  char *v591;
  char v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  char *v596;
  char v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  char *v605;
  char v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  char *v610;
  char v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  char *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  char *v621;
  char v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  char *v626;
  char v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  char *v631;
  char v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  char *v636;
  char v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  char *v641;
  char v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  char *v646;
  char v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  char *v651;
  char v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  char *v658;
  char v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  char *v663;
  char v664;
  _QWORD v666[14];

  v6 = (int *)type metadata accessor for DefaultConfigurationLayer(0);
  __chkstk_darwin(v6);
  v8 = (char *)v666 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  *(_QWORD *)v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  *((_QWORD *)v8 + 1) = v11;
  v8[25] = a2;
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  *((_QWORD *)v8 + 2) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  v8[24] = v14 & 1;
  v15 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v15);
  *((_QWORD *)v8 + 4) = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  v8[40] = v17 & 1;
  v18 = a1[3];
  v19 = a1[4];
  sub_10001AA44(a1, v18);
  *((_QWORD *)v8 + 6) = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  v8[56] = v20 & 1;
  v21 = a1[3];
  v22 = a1[4];
  sub_10001AA44(a1, v21);
  v8[57] = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 40))(v21, v22);
  v23 = a1[3];
  v24 = a1[4];
  sub_10001AA44(a1, v23);
  *((_QWORD *)v8 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 48))(v23, v24);
  v25 = a1[3];
  v26 = a1[4];
  sub_10001AA44(a1, v25);
  v8[72] = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 56))(v25, v26);
  v27 = a1[3];
  v28 = a1[4];
  sub_10001AA44(a1, v27);
  *((_QWORD *)v8 + 10) = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28);
  *((_QWORD *)v8 + 11) = v29;
  v30 = a1[3];
  v31 = a1[4];
  sub_10001AA44(a1, v30);
  *((_QWORD *)v8 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 80))(v30, v31);
  v8[104] = v32 & 1;
  v33 = a1[3];
  v34 = a1[4];
  sub_10001AA44(a1, v33);
  v8[105] = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 72))(v33, v34);
  v35 = a1[3];
  v36 = a1[4];
  sub_10001AA44(a1, v35);
  v8[106] = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 88))(v35, v36);
  v37 = a1[3];
  v38 = a1[4];
  sub_10001AA44(a1, v37);
  *((_QWORD *)v8 + 14) = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 96))(v37, v38);
  v8[120] = v39 & 1;
  v40 = a1[3];
  v41 = a1[4];
  sub_10001AA44(a1, v40);
  *((_QWORD *)v8 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 104))(v40, v41);
  v8[136] = v42 & 1;
  v43 = a1[3];
  v44 = a1[4];
  sub_10001AA44(a1, v43);
  *((_QWORD *)v8 + 18) = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 112))(v43, v44);
  v8[152] = v45 & 1;
  v46 = a1[3];
  v47 = a1[4];
  sub_10001AA44(a1, v46);
  *((_QWORD *)v8 + 20) = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 120))(v46, v47);
  v8[168] = v48 & 1;
  v49 = a1[3];
  v50 = a1[4];
  sub_10001AA44(a1, v49);
  *((_QWORD *)v8 + 22) = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 128))(v49, v50);
  v8[184] = v51 & 1;
  v52 = a1[3];
  v53 = a1[4];
  sub_10001AA44(a1, v52);
  *((_QWORD *)v8 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 136))(v52, v53);
  v8[200] = v54 & 1;
  v55 = a1[3];
  v56 = a1[4];
  sub_10001AA44(a1, v55);
  *((_QWORD *)v8 + 26) = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 144))(v55, v56);
  v8[216] = v57 & 1;
  v58 = a1[3];
  v59 = a1[4];
  sub_10001AA44(a1, v58);
  *((_QWORD *)v8 + 28) = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 152))(v58, v59);
  v8[232] = v60 & 1;
  v61 = a1[3];
  v62 = a1[4];
  sub_10001AA44(a1, v61);
  *((_QWORD *)v8 + 30) = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 160))(v61, v62);
  v8[248] = v63 & 1;
  v64 = a1[3];
  v65 = a1[4];
  sub_10001AA44(a1, v64);
  *((_QWORD *)v8 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(v64, v65);
  v8[264] = v66 & 1;
  v67 = a1[3];
  v68 = a1[4];
  sub_10001AA44(a1, v67);
  *((_QWORD *)v8 + 34) = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 176))(v67, v68);
  v8[280] = v69 & 1;
  v70 = a1[3];
  v71 = a1[4];
  sub_10001AA44(a1, v70);
  *((_QWORD *)v8 + 36) = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 184))(v70, v71);
  v8[296] = v72 & 1;
  v73 = a1[3];
  v74 = a1[4];
  sub_10001AA44(a1, v73);
  *((_QWORD *)v8 + 38) = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 192))(v73, v74);
  v8[312] = v75 & 1;
  v76 = a1[3];
  v77 = a1[4];
  sub_10001AA44(a1, v76);
  v8[313] = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 200))(v76, v77);
  v78 = a1[3];
  v79 = a1[4];
  sub_10001AA44(a1, v78);
  *((_QWORD *)v8 + 40) = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 208))(v78, v79);
  v80 = a1[3];
  v81 = a1[4];
  sub_10001AA44(a1, v80);
  *((_QWORD *)v8 + 41) = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 216))(v80, v81);
  v8[336] = v82 & 1;
  v83 = a1[3];
  v84 = a1[4];
  sub_10001AA44(a1, v83);
  *((_QWORD *)v8 + 43) = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 224))(v83, v84);
  v8[352] = v85 & 1;
  v86 = a1[3];
  v87 = a1[4];
  sub_10001AA44(a1, v86);
  *((_QWORD *)v8 + 45) = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 232))(v86, v87);
  v8[368] = v88 & 1;
  v89 = a1[3];
  v90 = a1[4];
  sub_10001AA44(a1, v89);
  *((_QWORD *)v8 + 47) = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 240))(v89, v90);
  v8[384] = v91 & 1;
  v92 = a1[3];
  v93 = a1[4];
  sub_10001AA44(a1, v92);
  *((_QWORD *)v8 + 49) = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 248))(v92, v93);
  v8[400] = v94 & 1;
  v95 = a1[3];
  v96 = a1[4];
  sub_10001AA44(a1, v95);
  *((_QWORD *)v8 + 51) = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 256))(v95, v96);
  v8[416] = v97 & 1;
  v98 = a1[3];
  v99 = a1[4];
  sub_10001AA44(a1, v98);
  *((_QWORD *)v8 + 53) = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 264))(v98, v99);
  v8[432] = v100 & 1;
  v101 = a1[3];
  v102 = a1[4];
  sub_10001AA44(a1, v101);
  *((_QWORD *)v8 + 55) = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 264))(v101, v102);
  v8[448] = v103 & 1;
  v104 = a1[3];
  v105 = a1[4];
  sub_10001AA44(a1, v104);
  *((_QWORD *)v8 + 57) = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 280))(v104, v105);
  v8[464] = v106 & 1;
  v107 = a1[3];
  v108 = a1[4];
  sub_10001AA44(a1, v107);
  *((_QWORD *)v8 + 59) = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 288))(v107, v108);
  v8[480] = v109 & 1;
  v110 = a1[3];
  v111 = a1[4];
  sub_10001AA44(a1, v110);
  v8[481] = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 296))(v110, v111);
  v112 = a1[3];
  v113 = a1[4];
  sub_10001AA44(a1, v112);
  *((_QWORD *)v8 + 61) = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 304))(v112, v113);
  v8[496] = v114 & 1;
  v115 = a1[3];
  v116 = a1[4];
  sub_10001AA44(a1, v115);
  *((_QWORD *)v8 + 63) = (*(uint64_t (**)(uint64_t, uint64_t))(v116 + 312))(v115, v116);
  v8[512] = v117 & 1;
  v118 = a1[3];
  v119 = a1[4];
  sub_10001AA44(a1, v118);
  *((_QWORD *)v8 + 65) = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 320))(v118, v119);
  v8[528] = v120 & 1;
  v121 = a1[3];
  v122 = a1[4];
  sub_10001AA44(a1, v121);
  *((_QWORD *)v8 + 67) = (*(uint64_t (**)(uint64_t, uint64_t))(v122 + 328))(v121, v122);
  v8[544] = v123 & 1;
  v124 = a1[3];
  v125 = a1[4];
  sub_10001AA44(a1, v124);
  *((_QWORD *)v8 + 69) = (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 336))(v124, v125);
  v8[560] = v126 & 1;
  v127 = a1[3];
  v128 = a1[4];
  sub_10001AA44(a1, v127);
  *((_QWORD *)v8 + 71) = (*(uint64_t (**)(uint64_t, uint64_t))(v128 + 344))(v127, v128);
  v8[576] = v129 & 1;
  v130 = a1[3];
  v131 = a1[4];
  sub_10001AA44(a1, v130);
  *((_QWORD *)v8 + 73) = (*(uint64_t (**)(uint64_t, uint64_t))(v131 + 352))(v130, v131);
  v8[592] = v132 & 1;
  v133 = a1[3];
  v134 = a1[4];
  sub_10001AA44(a1, v133);
  *((_QWORD *)v8 + 75) = (*(uint64_t (**)(uint64_t, uint64_t))(v134 + 360))(v133, v134);
  v135 = a1[3];
  v136 = a1[4];
  sub_10001AA44(a1, v135);
  *((_QWORD *)v8 + 76) = (*(uint64_t (**)(uint64_t, uint64_t))(v136 + 368))(v135, v136);
  v8[616] = v137 & 1;
  v138 = a1[3];
  v139 = a1[4];
  sub_10001AA44(a1, v138);
  *((_QWORD *)v8 + 78) = (*(uint64_t (**)(uint64_t, uint64_t))(v139 + 376))(v138, v139);
  v8[632] = v140 & 1;
  v141 = a1[3];
  v142 = a1[4];
  sub_10001AA44(a1, v141);
  *((_QWORD *)v8 + 80) = (*(uint64_t (**)(uint64_t, uint64_t))(v142 + 384))(v141, v142);
  v143 = a1[3];
  v144 = a1[4];
  sub_10001AA44(a1, v143);
  *((_QWORD *)v8 + 81) = (*(uint64_t (**)(uint64_t, uint64_t))(v144 + 392))(v143, v144);
  v145 = a1[3];
  v146 = a1[4];
  sub_10001AA44(a1, v145);
  *((_QWORD *)v8 + 82) = (*(uint64_t (**)(uint64_t, uint64_t))(v146 + 400))(v145, v146);
  v8[664] = v147 & 1;
  v148 = a1[3];
  v149 = a1[4];
  sub_10001AA44(a1, v148);
  *((_QWORD *)v8 + 84) = (*(uint64_t (**)(uint64_t, uint64_t))(v149 + 408))(v148, v149);
  v8[680] = v150 & 1;
  v151 = a1[3];
  v152 = a1[4];
  sub_10001AA44(a1, v151);
  *((_QWORD *)v8 + 86) = (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 416))(v151, v152);
  v8[696] = v153 & 1;
  v154 = a1[3];
  v155 = a1[4];
  sub_10001AA44(a1, v154);
  *((_QWORD *)v8 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(v155 + 424))(v154, v155);
  v8[712] = v156 & 1;
  v157 = a1[3];
  v158 = a1[4];
  sub_10001AA44(a1, v157);
  *((_QWORD *)v8 + 90) = (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 432))(v157, v158);
  v8[728] = v159 & 1;
  v160 = a1[3];
  v161 = a1[4];
  sub_10001AA44(a1, v160);
  v8[729] = (*(uint64_t (**)(uint64_t, uint64_t))(v161 + 440))(v160, v161);
  v162 = a1[3];
  v163 = a1[4];
  sub_10001AA44(a1, v162);
  (*(void (**)(uint64_t, uint64_t))(v163 + 448))(v162, v163);
  v164 = a1[3];
  v165 = a1[4];
  sub_10001AA44(a1, v164);
  (*(void (**)(uint64_t, uint64_t))(v165 + 456))(v164, v165);
  v166 = a1[3];
  v167 = a1[4];
  sub_10001AA44(a1, v166);
  v168 = (*(uint64_t (**)(uint64_t, uint64_t))(v167 + 464))(v166, v167);
  v169 = &v8[v6[62]];
  *(_QWORD *)v169 = v168;
  v169[8] = v170 & 1;
  v171 = a1[3];
  v172 = a1[4];
  sub_10001AA44(a1, v171);
  (*(void (**)(uint64_t, uint64_t))(v172 + 472))(v171, v172);
  v173 = a1[3];
  v174 = a1[4];
  sub_10001AA44(a1, v173);
  v175 = (*(uint64_t (**)(uint64_t, uint64_t))(v174 + 480))(v173, v174);
  v176 = &v8[v6[64]];
  *(_QWORD *)v176 = v175;
  v176[8] = v177 & 1;
  v178 = a1[3];
  v179 = a1[4];
  sub_10001AA44(a1, v178);
  v180 = (*(uint64_t (**)(uint64_t, uint64_t))(v179 + 488))(v178, v179);
  v181 = &v8[v6[65]];
  *(_QWORD *)v181 = v180;
  v181[8] = v182 & 1;
  v183 = a1[3];
  v184 = a1[4];
  sub_10001AA44(a1, v183);
  v185 = (*(uint64_t (**)(uint64_t, uint64_t))(v184 + 496))(v183, v184);
  v186 = &v8[v6[66]];
  *(_QWORD *)v186 = v185;
  v186[8] = v187 & 1;
  v188 = a1[3];
  v189 = a1[4];
  sub_10001AA44(a1, v188);
  v190 = (*(uint64_t (**)(uint64_t, uint64_t))(v189 + 504))(v188, v189);
  v191 = &v8[v6[67]];
  *(_QWORD *)v191 = v190;
  v191[8] = v192 & 1;
  v193 = a1[3];
  v194 = a1[4];
  sub_10001AA44(a1, v193);
  v195 = (*(uint64_t (**)(uint64_t, uint64_t))(v194 + 512))(v193, v194);
  v196 = &v8[v6[68]];
  *(_QWORD *)v196 = v195;
  v196[8] = v197 & 1;
  v198 = a1[3];
  v199 = a1[4];
  sub_10001AA44(a1, v198);
  v200 = (*(uint64_t (**)(uint64_t, uint64_t))(v199 + 520))(v198, v199);
  v201 = &v8[v6[69]];
  *(_QWORD *)v201 = v200;
  v201[8] = v202 & 1;
  v203 = a1[3];
  v204 = a1[4];
  sub_10001AA44(a1, v203);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v204 + 528))(v666, v203, v204);
  sub_100005CF0((uint64_t)v666, (uint64_t)&v8[v6[70]], &qword_1011041E0);
  v205 = a1[3];
  v206 = a1[4];
  sub_10001AA44(a1, v205);
  v8[v6[71]] = (*(uint64_t (**)(uint64_t, uint64_t))(v206 + 536))(v205, v206);
  v207 = a1[3];
  v208 = a1[4];
  sub_10001AA44(a1, v207);
  v8[v6[72]] = (*(uint64_t (**)(uint64_t, uint64_t))(v208 + 544))(v207, v208);
  v209 = a1[3];
  v210 = a1[4];
  sub_10001AA44(a1, v209);
  v8[v6[73]] = (*(uint64_t (**)(uint64_t, uint64_t))(v210 + 552))(v209, v210);
  v211 = a1[3];
  v212 = a1[4];
  sub_10001AA44(a1, v211);
  v213 = (*(uint64_t (**)(uint64_t, uint64_t))(v212 + 560))(v211, v212);
  v214 = &v8[v6[74]];
  *(_QWORD *)v214 = v213;
  v214[8] = v215 & 1;
  v216 = a1[3];
  v217 = a1[4];
  sub_10001AA44(a1, v216);
  v218 = (*(uint64_t (**)(uint64_t, uint64_t))(v217 + 568))(v216, v217);
  v219 = &v8[v6[75]];
  *(_QWORD *)v219 = v218;
  v219[8] = v220 & 1;
  v221 = a1[3];
  v222 = a1[4];
  sub_10001AA44(a1, v221);
  v223 = (*(uint64_t (**)(uint64_t, uint64_t))(v222 + 576))(v221, v222);
  v224 = &v8[v6[76]];
  *(_QWORD *)v224 = v223;
  v224[8] = v225 & 1;
  v226 = a1[3];
  v227 = a1[4];
  sub_10001AA44(a1, v226);
  v228 = (*(uint64_t (**)(uint64_t, uint64_t))(v227 + 584))(v226, v227);
  v229 = &v8[v6[77]];
  *(_QWORD *)v229 = v228;
  v229[8] = v230 & 1;
  v231 = a1[3];
  v232 = a1[4];
  sub_10001AA44(a1, v231);
  v233 = (*(uint64_t (**)(uint64_t, uint64_t))(v232 + 592))(v231, v232);
  v234 = &v8[v6[78]];
  *(_QWORD *)v234 = v233;
  v234[8] = v235 & 1;
  v236 = a1[3];
  v237 = a1[4];
  sub_10001AA44(a1, v236);
  v238 = (*(uint64_t (**)(uint64_t, uint64_t))(v237 + 600))(v236, v237);
  v239 = &v8[v6[79]];
  *(_QWORD *)v239 = v238;
  v239[8] = v240 & 1;
  v241 = a1[3];
  v242 = a1[4];
  sub_10001AA44(a1, v241);
  v243 = (*(uint64_t (**)(uint64_t, uint64_t))(v242 + 608))(v241, v242);
  v244 = &v8[v6[80]];
  *(_QWORD *)v244 = v243;
  v244[8] = v245 & 1;
  v246 = a1[3];
  v247 = a1[4];
  sub_10001AA44(a1, v246);
  v248 = (*(uint64_t (**)(uint64_t, uint64_t))(v247 + 616))(v246, v247);
  v249 = (uint64_t *)&v8[v6[81]];
  *v249 = v248;
  v249[1] = v250;
  v251 = a1[3];
  v252 = a1[4];
  sub_10001AA44(a1, v251);
  v8[v6[82]] = (*(uint64_t (**)(uint64_t, uint64_t))(v252 + 624))(v251, v252);
  v253 = a1[3];
  v254 = a1[4];
  sub_10001AA44(a1, v253);
  v255 = (*(uint64_t (**)(uint64_t, uint64_t))(v254 + 632))(v253, v254);
  v256 = &v8[v6[83]];
  *(_QWORD *)v256 = v255;
  v256[8] = v257 & 1;
  v258 = a1[3];
  v259 = a1[4];
  sub_10001AA44(a1, v258);
  v260 = (*(uint64_t (**)(uint64_t, uint64_t))(v259 + 640))(v258, v259);
  v261 = &v8[v6[84]];
  *(_QWORD *)v261 = v260;
  v261[8] = v262 & 1;
  v263 = a1[3];
  v264 = a1[4];
  sub_10001AA44(a1, v263);
  v265 = (*(uint64_t (**)(uint64_t, uint64_t))(v264 + 648))(v263, v264);
  v266 = &v8[v6[85]];
  *(_QWORD *)v266 = v265;
  v266[8] = v267 & 1;
  v268 = a1[3];
  v269 = a1[4];
  sub_10001AA44(a1, v268);
  v270 = (*(uint64_t (**)(uint64_t, uint64_t))(v269 + 656))(v268, v269);
  v271 = (uint64_t *)&v8[v6[86]];
  *v271 = v270;
  v271[1] = v272;
  v273 = a1[3];
  v274 = a1[4];
  sub_10001AA44(a1, v273);
  v275 = (*(uint64_t (**)(uint64_t, uint64_t))(v274 + 664))(v273, v274);
  v276 = &v8[v6[87]];
  *(_QWORD *)v276 = v275;
  v276[8] = v277 & 1;
  v278 = a1[3];
  v279 = a1[4];
  sub_10001AA44(a1, v278);
  v280 = (*(uint64_t (**)(uint64_t, uint64_t))(v279 + 672))(v278, v279);
  v281 = (uint64_t *)&v8[v6[88]];
  *v281 = v280;
  v281[1] = v282;
  v283 = a1[3];
  v284 = a1[4];
  sub_10001AA44(a1, v283);
  v285 = (*(uint64_t (**)(uint64_t, uint64_t))(v284 + 680))(v283, v284);
  v286 = &v8[v6[89]];
  *(_QWORD *)v286 = v285;
  v286[8] = v287 & 1;
  v288 = a1[3];
  v289 = a1[4];
  sub_10001AA44(a1, v288);
  v290 = (*(uint64_t (**)(uint64_t, uint64_t))(v289 + 688))(v288, v289);
  v291 = (uint64_t *)&v8[v6[90]];
  *v291 = v290;
  v291[1] = v292;
  v293 = a1[3];
  v294 = a1[4];
  sub_10001AA44(a1, v293);
  v295 = (*(uint64_t (**)(uint64_t, uint64_t))(v294 + 696))(v293, v294);
  v296 = &v8[v6[91]];
  *(_QWORD *)v296 = v295;
  v296[8] = v297 & 1;
  v298 = a1[3];
  v299 = a1[4];
  sub_10001AA44(a1, v298);
  v300 = (*(uint64_t (**)(uint64_t, uint64_t))(v299 + 736))(v298, v299);
  v301 = &v8[v6[96]];
  *(_QWORD *)v301 = v300;
  v301[8] = v302 & 1;
  v303 = a1[3];
  v304 = a1[4];
  sub_10001AA44(a1, v303);
  v305 = (*(uint64_t (**)(uint64_t, uint64_t))(v304 + 744))(v303, v304);
  v306 = &v8[v6[97]];
  *(_QWORD *)v306 = v305;
  v306[8] = v307 & 1;
  v308 = a1[3];
  v309 = a1[4];
  sub_10001AA44(a1, v308);
  v310 = (*(uint64_t (**)(uint64_t, uint64_t))(v309 + 752))(v308, v309);
  v311 = &v8[v6[98]];
  *(_QWORD *)v311 = v310;
  v311[8] = v312 & 1;
  v313 = a1[3];
  v314 = a1[4];
  sub_10001AA44(a1, v313);
  v315 = (*(uint64_t (**)(uint64_t, uint64_t))(v314 + 760))(v313, v314);
  v316 = &v8[v6[99]];
  *(_QWORD *)v316 = v315;
  v316[8] = v317 & 1;
  v318 = a1[3];
  v319 = a1[4];
  sub_10001AA44(a1, v318);
  v320 = (*(uint64_t (**)(uint64_t, uint64_t))(v319 + 768))(v318, v319);
  v321 = &v8[v6[100]];
  *(_QWORD *)v321 = v320;
  v321[8] = v322 & 1;
  v323 = a1[3];
  v324 = a1[4];
  sub_10001AA44(a1, v323);
  v325 = (*(uint64_t (**)(uint64_t, uint64_t))(v324 + 776))(v323, v324);
  v326 = &v8[v6[101]];
  *(_QWORD *)v326 = v325;
  v326[8] = v327 & 1;
  v328 = a1[3];
  v329 = a1[4];
  sub_10001AA44(a1, v328);
  v330 = (*(uint64_t (**)(uint64_t, uint64_t))(v329 + 784))(v328, v329);
  v331 = &v8[v6[102]];
  *(_QWORD *)v331 = v330;
  v331[8] = v332 & 1;
  v333 = a1[3];
  v334 = a1[4];
  sub_10001AA44(a1, v333);
  v335 = (*(uint64_t (**)(uint64_t, uint64_t))(v334 + 792))(v333, v334);
  v336 = &v8[v6[103]];
  *(_QWORD *)v336 = v335;
  v336[8] = v337 & 1;
  v338 = a1[3];
  v339 = a1[4];
  sub_10001AA44(a1, v338);
  v340 = (*(uint64_t (**)(uint64_t, uint64_t))(v339 + 800))(v338, v339);
  v341 = &v8[v6[104]];
  *(_QWORD *)v341 = v340;
  v341[8] = v342 & 1;
  v343 = a1[3];
  v344 = a1[4];
  sub_10001AA44(a1, v343);
  v345 = (*(uint64_t (**)(uint64_t, uint64_t))(v344 + 808))(v343, v344);
  v346 = &v8[v6[105]];
  *(_QWORD *)v346 = v345;
  v346[8] = v347 & 1;
  v348 = a1[3];
  v349 = a1[4];
  sub_10001AA44(a1, v348);
  v350 = (*(uint64_t (**)(uint64_t, uint64_t))(v349 + 816))(v348, v349);
  v351 = &v8[v6[106]];
  *(_QWORD *)v351 = v350;
  v351[8] = v352 & 1;
  v353 = a1[3];
  v354 = a1[4];
  sub_10001AA44(a1, v353);
  v8[v6[92]] = (*(uint64_t (**)(uint64_t, uint64_t))(v354 + 704))(v353, v354);
  v355 = a1[3];
  v356 = a1[4];
  sub_10001AA44(a1, v355);
  v8[v6[93]] = (*(uint64_t (**)(uint64_t, uint64_t))(v356 + 712))(v355, v356);
  v357 = a1[3];
  v358 = a1[4];
  sub_10001AA44(a1, v357);
  v8[v6[94]] = (*(uint64_t (**)(uint64_t, uint64_t))(v358 + 720))(v357, v358);
  v359 = a1[3];
  v360 = a1[4];
  sub_10001AA44(a1, v359);
  v8[v6[95]] = (*(uint64_t (**)(uint64_t, uint64_t))(v360 + 728))(v359, v360);
  v361 = a1[3];
  v362 = a1[4];
  sub_10001AA44(a1, v361);
  v363 = (*(uint64_t (**)(uint64_t, uint64_t))(v362 + 824))(v361, v362);
  v364 = &v8[v6[107]];
  *(_QWORD *)v364 = v363;
  v364[8] = v365 & 1;
  v366 = a1[3];
  v367 = a1[4];
  sub_10001AA44(a1, v366);
  v368 = (*(uint64_t (**)(uint64_t, uint64_t))(v367 + 832))(v366, v367);
  v369 = &v8[v6[108]];
  *(_QWORD *)v369 = v368;
  v369[8] = v370 & 1;
  v371 = a1[3];
  v372 = a1[4];
  sub_10001AA44(a1, v371);
  v373 = (*(uint64_t (**)(uint64_t, uint64_t))(v372 + 840))(v371, v372);
  v374 = &v8[v6[109]];
  *(_QWORD *)v374 = v373;
  v374[8] = v375 & 1;
  v376 = a1[3];
  v377 = a1[4];
  sub_10001AA44(a1, v376);
  v378 = (*(uint64_t (**)(uint64_t, uint64_t))(v377 + 848))(v376, v377);
  v379 = &v8[v6[110]];
  *(_QWORD *)v379 = v378;
  v379[8] = v380 & 1;
  v381 = a1[3];
  v382 = a1[4];
  sub_10001AA44(a1, v381);
  v383 = (*(uint64_t (**)(uint64_t, uint64_t))(v382 + 856))(v381, v382);
  v384 = &v8[v6[111]];
  *(_QWORD *)v384 = v383;
  v384[8] = v385 & 1;
  v386 = a1[3];
  v387 = a1[4];
  sub_10001AA44(a1, v386);
  v388 = (*(uint64_t (**)(uint64_t, uint64_t))(v387 + 864))(v386, v387);
  v389 = &v8[v6[112]];
  *(_QWORD *)v389 = v388;
  v389[8] = v390 & 1;
  v391 = a1[3];
  v392 = a1[4];
  sub_10001AA44(a1, v391);
  v393 = (*(uint64_t (**)(uint64_t, uint64_t))(v392 + 872))(v391, v392);
  v394 = &v8[v6[113]];
  *(_QWORD *)v394 = v393;
  v394[8] = v395 & 1;
  v396 = a1[3];
  v397 = a1[4];
  sub_10001AA44(a1, v396);
  v398 = (*(uint64_t (**)(uint64_t, uint64_t))(v397 + 880))(v396, v397);
  v399 = &v8[v6[114]];
  *(_QWORD *)v399 = v398;
  v399[8] = v400 & 1;
  v401 = a1[3];
  v402 = a1[4];
  sub_10001AA44(a1, v401);
  v403 = (*(uint64_t (**)(uint64_t, uint64_t))(v402 + 888))(v401, v402);
  v404 = &v8[v6[115]];
  *(_QWORD *)v404 = v403;
  v404[8] = v405 & 1;
  v406 = a1[3];
  v407 = a1[4];
  sub_10001AA44(a1, v406);
  v408 = (*(uint64_t (**)(uint64_t, uint64_t))(v407 + 896))(v406, v407);
  v409 = &v8[v6[116]];
  *(_QWORD *)v409 = v408;
  v409[8] = v410 & 1;
  v411 = a1[3];
  v412 = a1[4];
  sub_10001AA44(a1, v411);
  v413 = (*(uint64_t (**)(uint64_t, uint64_t))(v412 + 904))(v411, v412);
  v414 = &v8[v6[117]];
  *(_QWORD *)v414 = v413;
  v414[8] = v415 & 1;
  v416 = a1[3];
  v417 = a1[4];
  sub_10001AA44(a1, v416);
  v8[v6[118]] = (*(uint64_t (**)(uint64_t, uint64_t))(v417 + 912))(v416, v417);
  v418 = a1[3];
  v419 = a1[4];
  sub_10001AA44(a1, v418);
  v420 = (*(uint64_t (**)(uint64_t, uint64_t))(v419 + 920))(v418, v419);
  v421 = &v8[v6[119]];
  *(_QWORD *)v421 = v420;
  v421[8] = v422 & 1;
  v423 = a1[3];
  v424 = a1[4];
  sub_10001AA44(a1, v423);
  v425 = (*(uint64_t (**)(uint64_t, uint64_t))(v424 + 928))(v423, v424);
  v426 = &v8[v6[120]];
  *(_QWORD *)v426 = v425;
  v426[8] = v427 & 1;
  v428 = a1[3];
  v429 = a1[4];
  sub_10001AA44(a1, v428);
  v430 = (*(uint64_t (**)(uint64_t, uint64_t))(v429 + 936))(v428, v429);
  v431 = &v8[v6[121]];
  *(_QWORD *)v431 = v430;
  v431[8] = v432 & 1;
  v433 = a1[3];
  v434 = a1[4];
  sub_10001AA44(a1, v433);
  v8[v6[122]] = (*(uint64_t (**)(uint64_t, uint64_t))(v434 + 944))(v433, v434);
  v435 = a1[3];
  v436 = a1[4];
  sub_10001AA44(a1, v435);
  v8[v6[123]] = (*(uint64_t (**)(uint64_t, uint64_t))(v436 + 952))(v435, v436);
  v437 = a1[3];
  v438 = a1[4];
  sub_10001AA44(a1, v437);
  v8[v6[124]] = (*(uint64_t (**)(uint64_t, uint64_t))(v438 + 960))(v437, v438);
  v439 = a1[3];
  v440 = a1[4];
  sub_10001AA44(a1, v439);
  v441 = (*(uint64_t (**)(uint64_t, uint64_t))(v440 + 968))(v439, v440);
  v442 = &v8[v6[125]];
  *(_QWORD *)v442 = v441;
  v442[8] = v443 & 1;
  v444 = a1[3];
  v445 = a1[4];
  sub_10001AA44(a1, v444);
  v446 = (*(uint64_t (**)(uint64_t, uint64_t))(v445 + 976))(v444, v445);
  v447 = &v8[v6[126]];
  *(_QWORD *)v447 = v446;
  v447[8] = v448 & 1;
  v449 = a1[3];
  v450 = a1[4];
  sub_10001AA44(a1, v449);
  v451 = (*(uint64_t (**)(uint64_t, uint64_t))(v450 + 984))(v449, v450);
  v452 = &v8[v6[127]];
  *(_QWORD *)v452 = v451;
  v452[8] = v453 & 1;
  v454 = a1[3];
  v455 = a1[4];
  sub_10001AA44(a1, v454);
  v456 = (*(uint64_t (**)(uint64_t, uint64_t))(v455 + 992))(v454, v455);
  v457 = &v8[v6[128]];
  *(_QWORD *)v457 = v456;
  v457[8] = v458 & 1;
  v459 = a1[3];
  v460 = a1[4];
  sub_10001AA44(a1, v459);
  v461 = (*(uint64_t (**)(uint64_t, uint64_t))(v460 + 1000))(v459, v460);
  v462 = &v8[v6[129]];
  *(_QWORD *)v462 = v461;
  v462[8] = v463 & 1;
  v464 = a1[3];
  v465 = a1[4];
  sub_10001AA44(a1, v464);
  v466 = (*(uint64_t (**)(uint64_t, uint64_t))(v465 + 1008))(v464, v465);
  v467 = &v8[v6[130]];
  *(_QWORD *)v467 = v466;
  v467[8] = v468 & 1;
  v469 = a1[3];
  v470 = a1[4];
  sub_10001AA44(a1, v469);
  v471 = (*(uint64_t (**)(uint64_t, uint64_t))(v470 + 1016))(v469, v470);
  v472 = &v8[v6[131]];
  *(_QWORD *)v472 = v471;
  v472[8] = v473 & 1;
  v474 = a1[3];
  v475 = a1[4];
  sub_10001AA44(a1, v474);
  v476 = (*(uint64_t (**)(uint64_t, uint64_t))(v475 + 1024))(v474, v475);
  v477 = &v8[v6[132]];
  *(_QWORD *)v477 = v476;
  v477[8] = v478 & 1;
  v479 = a1[3];
  v480 = a1[4];
  sub_10001AA44(a1, v479);
  v8[v6[133]] = (*(uint64_t (**)(uint64_t, uint64_t))(v480 + 1032))(v479, v480);
  v481 = a1[3];
  v482 = a1[4];
  sub_10001AA44(a1, v481);
  v483 = (*(uint64_t (**)(uint64_t, uint64_t))(v482 + 1040))(v481, v482);
  v484 = &v8[v6[134]];
  *(_QWORD *)v484 = v483;
  v484[8] = v485 & 1;
  v486 = a1[3];
  v487 = a1[4];
  sub_10001AA44(a1, v486);
  *(_QWORD *)&v8[v6[135]] = (*(uint64_t (**)(uint64_t, uint64_t))(v487 + 1048))(v486, v487);
  v488 = a1[3];
  v489 = a1[4];
  sub_10001AA44(a1, v488);
  v490 = (*(uint64_t (**)(uint64_t, uint64_t))(v489 + 1056))(v488, v489);
  v491 = &v8[v6[136]];
  *(_QWORD *)v491 = v490;
  v491[8] = v492 & 1;
  v493 = a1[3];
  v494 = a1[4];
  sub_10001AA44(a1, v493);
  v8[v6[137]] = (*(uint64_t (**)(uint64_t, uint64_t))(v494 + 1064))(v493, v494);
  v495 = a1[3];
  v496 = a1[4];
  sub_10001AA44(a1, v495);
  *(_QWORD *)&v8[v6[138]] = (*(uint64_t (**)(uint64_t, uint64_t))(v496 + 1072))(v495, v496);
  v497 = a1[3];
  v498 = a1[4];
  sub_10001AA44(a1, v497);
  v8[v6[139]] = (*(uint64_t (**)(uint64_t, uint64_t))(v498 + 1080))(v497, v498);
  v499 = a1[3];
  v500 = a1[4];
  sub_10001AA44(a1, v499);
  v501 = (*(uint64_t (**)(uint64_t, uint64_t))(v500 + 1088))(v499, v500);
  v502 = &v8[v6[140]];
  *(_QWORD *)v502 = v501;
  v502[8] = v503 & 1;
  v504 = a1[3];
  v505 = a1[4];
  sub_10001AA44(a1, v504);
  v506 = (*(uint64_t (**)(uint64_t, uint64_t))(v505 + 1096))(v504, v505);
  v507 = &v8[v6[141]];
  *(_QWORD *)v507 = v506;
  v507[8] = v508 & 1;
  v509 = a1[3];
  v510 = a1[4];
  sub_10001AA44(a1, v509);
  v8[v6[142]] = (*(uint64_t (**)(uint64_t, uint64_t))(v510 + 1104))(v509, v510);
  v511 = a1[3];
  v512 = a1[4];
  sub_10001AA44(a1, v511);
  v8[v6[143]] = (*(uint64_t (**)(uint64_t, uint64_t))(v512 + 1112))(v511, v512);
  v513 = a1[3];
  v514 = a1[4];
  sub_10001AA44(a1, v513);
  v515 = (*(uint64_t (**)(uint64_t, uint64_t))(v514 + 1120))(v513, v514);
  v516 = &v8[v6[144]];
  *(_QWORD *)v516 = v515;
  v516[8] = v517 & 1;
  v518 = a1[3];
  v519 = a1[4];
  sub_10001AA44(a1, v518);
  v520 = (*(uint64_t (**)(uint64_t, uint64_t))(v519 + 1128))(v518, v519);
  v521 = &v8[v6[145]];
  *(_QWORD *)v521 = v520;
  v521[8] = v522 & 1;
  v523 = a1[3];
  v524 = a1[4];
  sub_10001AA44(a1, v523);
  v525 = (*(uint64_t (**)(uint64_t, uint64_t))(v524 + 1136))(v523, v524);
  v526 = &v8[v6[146]];
  *(_QWORD *)v526 = v525;
  v526[8] = v527 & 1;
  v528 = a1[3];
  v529 = a1[4];
  sub_10001AA44(a1, v528);
  v530 = (*(uint64_t (**)(uint64_t, uint64_t))(v529 + 1144))(v528, v529);
  v531 = &v8[v6[147]];
  *(_QWORD *)v531 = v530;
  v531[8] = v532 & 1;
  v533 = a1[3];
  v534 = a1[4];
  sub_10001AA44(a1, v533);
  v535 = (*(uint64_t (**)(uint64_t, uint64_t))(v534 + 1152))(v533, v534);
  v536 = &v8[v6[148]];
  *(_QWORD *)v536 = v535;
  v536[8] = v537 & 1;
  v538 = a1[3];
  v539 = a1[4];
  sub_10001AA44(a1, v538);
  v540 = (*(uint64_t (**)(uint64_t, uint64_t))(v539 + 1160))(v538, v539);
  v541 = &v8[v6[149]];
  *(_QWORD *)v541 = v540;
  v541[8] = v542 & 1;
  v543 = a1[3];
  v544 = a1[4];
  sub_10001AA44(a1, v543);
  v545 = (*(uint64_t (**)(uint64_t, uint64_t))(v544 + 1168))(v543, v544);
  v546 = &v8[v6[150]];
  *(_QWORD *)v546 = v545;
  v546[8] = v547 & 1;
  v548 = a1[3];
  v549 = a1[4];
  sub_10001AA44(a1, v548);
  v550 = (*(uint64_t (**)(uint64_t, uint64_t))(v549 + 1176))(v548, v549);
  v551 = &v8[v6[151]];
  *(_QWORD *)v551 = v550;
  v551[8] = v552 & 1;
  v553 = a1[3];
  v554 = a1[4];
  sub_10001AA44(a1, v553);
  v555 = (*(uint64_t (**)(uint64_t, uint64_t))(v554 + 1184))(v553, v554);
  v556 = &v8[v6[152]];
  *(_QWORD *)v556 = v555;
  v556[8] = v557 & 1;
  v558 = a1[3];
  v559 = a1[4];
  sub_10001AA44(a1, v558);
  v560 = (*(uint64_t (**)(uint64_t, uint64_t))(v559 + 1192))(v558, v559);
  v561 = &v8[v6[153]];
  *(_QWORD *)v561 = v560;
  v561[8] = v562 & 1;
  v563 = a1[3];
  v564 = a1[4];
  sub_10001AA44(a1, v563);
  v565 = (*(uint64_t (**)(uint64_t, uint64_t))(v564 + 1200))(v563, v564);
  v566 = &v8[v6[154]];
  *(_QWORD *)v566 = v565;
  v566[8] = v567 & 1;
  v568 = a1[3];
  v569 = a1[4];
  sub_10001AA44(a1, v568);
  v570 = (*(uint64_t (**)(uint64_t, uint64_t))(v569 + 1208))(v568, v569);
  v571 = &v8[v6[155]];
  *(_QWORD *)v571 = v570;
  v571[8] = v572 & 1;
  v573 = a1[3];
  v574 = a1[4];
  sub_10001AA44(a1, v573);
  v575 = (*(uint64_t (**)(uint64_t, uint64_t))(v574 + 1216))(v573, v574);
  v576 = &v8[v6[156]];
  *(_QWORD *)v576 = v575;
  v576[8] = v577 & 1;
  v578 = a1[3];
  v579 = a1[4];
  sub_10001AA44(a1, v578);
  v580 = (*(uint64_t (**)(uint64_t, uint64_t))(v579 + 1224))(v578, v579);
  v581 = &v8[v6[157]];
  *(_QWORD *)v581 = v580;
  v581[8] = v582 & 1;
  v583 = a1[3];
  v584 = a1[4];
  sub_10001AA44(a1, v583);
  v585 = (*(uint64_t (**)(uint64_t, uint64_t))(v584 + 1232))(v583, v584);
  v586 = &v8[v6[158]];
  *(_QWORD *)v586 = v585;
  v586[8] = v587 & 1;
  v588 = a1[3];
  v589 = a1[4];
  sub_10001AA44(a1, v588);
  v590 = (*(uint64_t (**)(uint64_t, uint64_t))(v589 + 1240))(v588, v589);
  v591 = &v8[v6[159]];
  *(_QWORD *)v591 = v590;
  v591[8] = v592 & 1;
  v593 = a1[3];
  v594 = a1[4];
  sub_10001AA44(a1, v593);
  v595 = (*(uint64_t (**)(uint64_t, uint64_t))(v594 + 1248))(v593, v594);
  v596 = &v8[v6[160]];
  *(_QWORD *)v596 = v595;
  v596[8] = v597 & 1;
  v598 = a1[3];
  v599 = a1[4];
  sub_10001AA44(a1, v598);
  v8[v6[161]] = (*(uint64_t (**)(uint64_t, uint64_t))(v599 + 1256))(v598, v599);
  v600 = a1[3];
  v601 = a1[4];
  sub_10001AA44(a1, v600);
  v8[v6[162]] = (*(uint64_t (**)(uint64_t, uint64_t))(v601 + 1264))(v600, v601);
  v602 = a1[3];
  v603 = a1[4];
  sub_10001AA44(a1, v602);
  v604 = (*(uint64_t (**)(uint64_t, uint64_t))(v603 + 1272))(v602, v603);
  v605 = &v8[v6[163]];
  *(_QWORD *)v605 = v604;
  v605[8] = v606 & 1;
  v607 = a1[3];
  v608 = a1[4];
  sub_10001AA44(a1, v607);
  v609 = (*(uint64_t (**)(uint64_t, uint64_t))(v608 + 1280))(v607, v608);
  v610 = &v8[v6[164]];
  *(_QWORD *)v610 = v609;
  v610[8] = v611 & 1;
  v612 = a1[3];
  v613 = a1[4];
  sub_10001AA44(a1, v612);
  v8[v6[165]] = (*(uint64_t (**)(uint64_t, uint64_t))(v613 + 1288))(v612, v613);
  v614 = a1[3];
  v615 = a1[4];
  sub_10001AA44(a1, v614);
  v616 = (*(uint64_t (**)(uint64_t, uint64_t))(v615 + 1296))(v614, v615);
  v617 = &v8[v6[166]];
  *(_DWORD *)v617 = v616;
  v617[4] = BYTE4(v616) & 1;
  v618 = a1[3];
  v619 = a1[4];
  sub_10001AA44(a1, v618);
  v620 = (*(uint64_t (**)(uint64_t, uint64_t))(v619 + 1304))(v618, v619);
  v621 = &v8[v6[167]];
  *(_QWORD *)v621 = v620;
  v621[8] = v622 & 1;
  v623 = a1[3];
  v624 = a1[4];
  sub_10001AA44(a1, v623);
  v625 = (*(uint64_t (**)(uint64_t, uint64_t))(v624 + 1312))(v623, v624);
  v626 = &v8[v6[168]];
  *(_QWORD *)v626 = v625;
  v626[8] = v627 & 1;
  v628 = a1[3];
  v629 = a1[4];
  sub_10001AA44(a1, v628);
  v630 = (*(uint64_t (**)(uint64_t, uint64_t))(v629 + 1320))(v628, v629);
  v631 = &v8[v6[169]];
  *(_QWORD *)v631 = v630;
  v631[8] = v632 & 1;
  v633 = a1[3];
  v634 = a1[4];
  sub_10001AA44(a1, v633);
  v635 = (*(uint64_t (**)(uint64_t, uint64_t))(v634 + 1328))(v633, v634);
  v636 = &v8[v6[170]];
  *(_QWORD *)v636 = v635;
  v636[8] = v637 & 1;
  v638 = a1[3];
  v639 = a1[4];
  sub_10001AA44(a1, v638);
  v640 = (*(uint64_t (**)(uint64_t, uint64_t))(v639 + 1336))(v638, v639);
  v641 = &v8[v6[171]];
  *(_QWORD *)v641 = v640;
  v641[8] = v642 & 1;
  v643 = a1[3];
  v644 = a1[4];
  sub_10001AA44(a1, v643);
  v645 = (*(uint64_t (**)(uint64_t, uint64_t))(v644 + 1344))(v643, v644);
  v646 = &v8[v6[172]];
  *(_QWORD *)v646 = v645;
  v646[8] = v647 & 1;
  v648 = a1[3];
  v649 = a1[4];
  sub_10001AA44(a1, v648);
  v650 = (*(uint64_t (**)(uint64_t, uint64_t))(v649 + 1352))(v648, v649);
  v651 = &v8[v6[173]];
  *(_QWORD *)v651 = v650;
  v651[8] = v652 & 1;
  v653 = a1[3];
  v654 = a1[4];
  sub_10001AA44(a1, v653);
  v8[v6[174]] = (*(uint64_t (**)(uint64_t, uint64_t))(v654 + 1360))(v653, v654);
  v655 = a1[3];
  v656 = a1[4];
  sub_10001AA44(a1, v655);
  v657 = (*(uint64_t (**)(uint64_t, uint64_t))(v656 + 1368))(v655, v656);
  v658 = &v8[v6[175]];
  *(_QWORD *)v658 = v657;
  v658[8] = v659 & 1;
  v660 = a1[3];
  v661 = a1[4];
  sub_10001AA44(a1, v660);
  v662 = (*(uint64_t (**)(uint64_t, uint64_t))(v661 + 1376))(v660, v661);
  v663 = &v8[v6[176]];
  *(_QWORD *)v663 = v662;
  v663[8] = v664 & 1;
  sub_1000126EC((uint64_t)v8, a3, type metadata accessor for DefaultConfigurationLayer);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1006BED20(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1006BED5C + 4 * word_100E49310[a1]))(0xD000000000000010, 0x8000000100EC3B10);
}

uint64_t sub_1006BED5C()
{
  return 0x754E6C6169726573;
}

uint64_t sub_1006BED7C()
{
  return 0x656372756F73;
}

uint64_t sub_1006BED90()
{
  return 0x496873696C627570;
}

uint64_t sub_1006BEDB4()
{
  uint64_t v0;

  return v0 - 11;
}

unint64_t sub_1006BF898()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1006BF8C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t *v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  unsigned int *v407;
  uint64_t v408;
  uint64_t *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD v437[13];
  id v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  _BYTE v452[4];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104680);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v437 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006CE1A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DefaultConfigurationLayer.CodingKeys, &type metadata for DefaultConfigurationLayer.CodingKeys, v11, v9, v10);
  v13 = *(_QWORD *)(v3 + 8);
  v438 = *(id *)v3;
  v12 = (uint64_t)v438;
  v439 = v13;
  v452[0] = 0;
  sub_10001BD08((uint64_t)v438, v13);
  v14 = sub_100036A58();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, &type metadata for Data, v14);
  if (v2)
  {
    sub_10001EF3C(v12, v13);
  }
  else
  {
    sub_10001EF3C((uint64_t)v438, v439);
    v15 = *(_QWORD *)(v3 + 16);
    v16 = *(unsigned __int8 *)(v3 + 24);
    LOBYTE(v438) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v438, v5);
    LOBYTE(v438) = *(_BYTE *)(v3 + 25);
    v452[0] = 2;
    v17 = sub_1006CE3C0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v438, v452, v5, &type metadata for ConfigurationCoordinator.ConfigurationSource, v17);
    v18 = *(_QWORD *)(v3 + 32);
    v19 = *(unsigned __int8 *)(v3 + 40);
    LOBYTE(v438) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v438, v5);
    v20 = *(_QWORD *)(v3 + 48);
    v21 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v438) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v438, v5);
    v22 = *(unsigned __int8 *)(v3 + 57);
    LOBYTE(v438) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, &v438, v5);
    v438 = *(id *)(v3 + 64);
    v452[0] = 6;
    swift_bridgeObjectRetain(v438);
    v23 = sub_10001A9A8(&qword_1011063B0);
    v24 = sub_1006CE5BC((unint64_t *)&qword_1010F9680, &qword_1011063B0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, v23, v24);
    swift_bridgeObjectRelease();
    v25 = *(unsigned __int8 *)(v3 + 72);
    LOBYTE(v438) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, &v438, v5);
    v26 = *(_QWORD *)(v3 + 80);
    v27 = *(_QWORD *)(v3 + 88);
    LOBYTE(v438) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v438, v5);
    v28 = *(_QWORD *)(v3 + 96);
    v29 = *(unsigned __int8 *)(v3 + 104);
    LOBYTE(v438) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v438, v5);
    v30 = *(unsigned __int8 *)(v3 + 105);
    LOBYTE(v438) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, &v438, v5);
    v31 = *(unsigned __int8 *)(v3 + 106);
    LOBYTE(v438) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, &v438, v5);
    v32 = *(_QWORD *)(v3 + 112);
    v33 = *(unsigned __int8 *)(v3 + 120);
    LOBYTE(v438) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v438, v5);
    v34 = *(_QWORD *)(v3 + 128);
    v35 = *(unsigned __int8 *)(v3 + 136);
    LOBYTE(v438) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v438, v5);
    v36 = *(_QWORD *)(v3 + 144);
    v37 = *(unsigned __int8 *)(v3 + 152);
    LOBYTE(v438) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v438, v5);
    v38 = *(_QWORD *)(v3 + 160);
    v39 = *(unsigned __int8 *)(v3 + 168);
    LOBYTE(v438) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &v438, v5);
    v40 = *(_QWORD *)(v3 + 176);
    v41 = *(unsigned __int8 *)(v3 + 184);
    LOBYTE(v438) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, &v438, v5);
    v42 = *(_QWORD *)(v3 + 192);
    v43 = *(unsigned __int8 *)(v3 + 200);
    LOBYTE(v438) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, &v438, v5);
    v44 = *(_QWORD *)(v3 + 208);
    v45 = *(unsigned __int8 *)(v3 + 216);
    LOBYTE(v438) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, &v438, v5);
    v46 = *(_QWORD *)(v3 + 224);
    v47 = *(unsigned __int8 *)(v3 + 232);
    LOBYTE(v438) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v47, &v438, v5);
    v48 = *(_QWORD *)(v3 + 240);
    v49 = *(unsigned __int8 *)(v3 + 248);
    LOBYTE(v438) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v49, &v438, v5);
    v50 = *(_QWORD *)(v3 + 256);
    v51 = *(unsigned __int8 *)(v3 + 264);
    LOBYTE(v438) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v51, &v438, v5);
    v52 = *(_QWORD *)(v3 + 272);
    v53 = *(unsigned __int8 *)(v3 + 280);
    LOBYTE(v438) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, v53, &v438, v5);
    v54 = *(_QWORD *)(v3 + 288);
    v55 = *(unsigned __int8 *)(v3 + 296);
    LOBYTE(v438) = 23;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v54, v55, &v438, v5);
    v56 = *(_QWORD *)(v3 + 304);
    v57 = *(unsigned __int8 *)(v3 + 312);
    LOBYTE(v438) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v56, v57, &v438, v5);
    v58 = *(unsigned __int8 *)(v3 + 313);
    LOBYTE(v438) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58, &v438, v5);
    v438 = *(id *)(v3 + 320);
    v452[0] = 26;
    swift_bridgeObjectRetain(v438);
    v60 = sub_10001A9A8(&qword_1010ED5F8);
    v61 = sub_1006CE404();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, v60, v61);
    swift_bridgeObjectRelease();
    v62 = *(_QWORD *)(v3 + 328);
    v63 = *(unsigned __int8 *)(v3 + 336);
    LOBYTE(v438) = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v62, v63, &v438, v5);
    v64 = *(_QWORD *)(v3 + 344);
    v65 = *(unsigned __int8 *)(v3 + 352);
    LOBYTE(v438) = 28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v64, v65, &v438, v5);
    v66 = *(_QWORD *)(v3 + 360);
    v67 = *(unsigned __int8 *)(v3 + 368);
    LOBYTE(v438) = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v67, &v438, v5);
    v68 = *(_QWORD *)(v3 + 376);
    v69 = *(unsigned __int8 *)(v3 + 384);
    LOBYTE(v438) = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68, v69, &v438, v5);
    v70 = *(_QWORD *)(v3 + 392);
    v71 = *(unsigned __int8 *)(v3 + 400);
    LOBYTE(v438) = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v70, v71, &v438, v5);
    v72 = *(_QWORD *)(v3 + 408);
    v73 = *(unsigned __int8 *)(v3 + 416);
    LOBYTE(v438) = 32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v72, v73, &v438, v5);
    v74 = *(_QWORD *)(v3 + 424);
    v75 = *(unsigned __int8 *)(v3 + 432);
    LOBYTE(v438) = 33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v74, v75, &v438, v5);
    v76 = *(_QWORD *)(v3 + 440);
    v77 = *(unsigned __int8 *)(v3 + 448);
    LOBYTE(v438) = 34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v76, v77, &v438, v5);
    v78 = *(_QWORD *)(v3 + 456);
    v79 = *(unsigned __int8 *)(v3 + 464);
    LOBYTE(v438) = 35;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v78, v79, &v438, v5);
    v80 = *(_QWORD *)(v3 + 472);
    v81 = *(unsigned __int8 *)(v3 + 480);
    LOBYTE(v438) = 36;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v80, v81, &v438, v5);
    v82 = *(unsigned __int8 *)(v3 + 481);
    LOBYTE(v438) = 37;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v82, &v438, v5);
    v83 = *(_QWORD *)(v3 + 488);
    v84 = *(unsigned __int8 *)(v3 + 496);
    LOBYTE(v438) = 38;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v83, v84, &v438, v5);
    v85 = *(_QWORD *)(v3 + 504);
    v86 = *(unsigned __int8 *)(v3 + 512);
    LOBYTE(v438) = 39;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v85, v86, &v438, v5);
    v87 = *(_QWORD *)(v3 + 520);
    v88 = *(unsigned __int8 *)(v3 + 528);
    LOBYTE(v438) = 40;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v87, v88, &v438, v5);
    v89 = *(_QWORD *)(v3 + 536);
    v90 = *(unsigned __int8 *)(v3 + 544);
    LOBYTE(v438) = 41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v89, v90, &v438, v5);
    v91 = *(_QWORD *)(v3 + 552);
    v92 = *(unsigned __int8 *)(v3 + 560);
    LOBYTE(v438) = 42;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v91, v92, &v438, v5);
    v93 = *(_QWORD *)(v3 + 568);
    v94 = *(unsigned __int8 *)(v3 + 576);
    LOBYTE(v438) = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v93, v94, &v438, v5);
    v95 = *(_QWORD *)(v3 + 584);
    v96 = *(unsigned __int8 *)(v3 + 592);
    LOBYTE(v438) = 44;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v95, v96, &v438, v5);
    v438 = *(id *)(v3 + 600);
    v452[0] = 45;
    swift_bridgeObjectRetain(v438);
    v97 = sub_10001A9A8(&qword_1010ED608);
    v98 = sub_1006CE4CC(&qword_1011046A8, (uint64_t (*)(void))sub_1006CE534, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, v97, v98);
    swift_bridgeObjectRelease();
    v99 = *(_QWORD *)(v3 + 608);
    v100 = *(unsigned __int8 *)(v3 + 616);
    LOBYTE(v438) = 46;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v99, v100, &v438, v5);
    v101 = *(_QWORD *)(v3 + 624);
    v102 = *(unsigned __int8 *)(v3 + 632);
    LOBYTE(v438) = 47;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v101, v102, &v438, v5);
    v438 = *(id *)(v3 + 640);
    v103 = v438;
    v452[0] = 48;
    type metadata accessor for SPServiceState(0);
    v105 = v104;
    v106 = sub_100006204(&qword_1011046B8, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&protocol conformance descriptor for SPServiceState);
    v103;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, v105, v106);

    v438 = *(id *)(v3 + 648);
    v452[0] = 49;
    swift_bridgeObjectRetain(v438);
    v107 = sub_10001A9A8(&qword_1010ED5E0);
    v108 = sub_1006CE2F8(&qword_1011046C0, &qword_1011046C8, (uint64_t)&protocol conformance descriptor for SPDisabledReason, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, v107, v108);
    swift_bridgeObjectRelease();
    v109 = *(_QWORD *)(v3 + 656);
    v110 = *(unsigned __int8 *)(v3 + 664);
    LOBYTE(v438) = 50;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v109, v110, &v438, v5);
    v111 = *(_QWORD *)(v3 + 672);
    v112 = *(unsigned __int8 *)(v3 + 680);
    LOBYTE(v438) = 51;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v111, v112, &v438, v5);
    v113 = *(_QWORD *)(v3 + 688);
    v114 = *(unsigned __int8 *)(v3 + 696);
    LOBYTE(v438) = 52;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v113, v114, &v438, v5);
    v115 = *(_QWORD *)(v3 + 704);
    v116 = *(unsigned __int8 *)(v3 + 712);
    LOBYTE(v438) = 53;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v115, v116, &v438, v5);
    v117 = *(_QWORD *)(v3 + 720);
    v118 = *(unsigned __int8 *)(v3 + 728);
    LOBYTE(v438) = 54;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v117, v118, &v438, v5);
    v119 = *(unsigned __int8 *)(v3 + 729);
    LOBYTE(v438) = 55;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v119, &v438, v5);
    v120 = (int *)type metadata accessor for DefaultConfigurationLayer(0);
    v121 = v3 + v120[60];
    LOBYTE(v438) = 56;
    v122 = type metadata accessor for UUID(0);
    v123 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v121, &v438, v5, v122, v123);
    v124 = v3 + v120[61];
    LOBYTE(v438) = 57;
    v125 = type metadata accessor for Date(0);
    v126 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v124, &v438, v5, v125, v126);
    v127 = (uint64_t *)(v3 + v120[62]);
    v128 = *v127;
    v129 = *((unsigned __int8 *)v127 + 8);
    LOBYTE(v438) = 58;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v128, v129, &v438, v5);
    v130 = v3 + v120[63];
    LOBYTE(v438) = 59;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v130, &v438, v5, v125, v126);
    v131 = (uint64_t *)(v3 + v120[64]);
    v132 = *v131;
    v133 = *((unsigned __int8 *)v131 + 8);
    LOBYTE(v438) = 60;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v132, v133, &v438, v5);
    v134 = (uint64_t *)(v3 + v120[65]);
    v135 = *v134;
    v136 = *((unsigned __int8 *)v134 + 8);
    LOBYTE(v438) = 61;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v135, v136, &v438, v5);
    v137 = (uint64_t *)(v3 + v120[66]);
    v138 = *v137;
    v139 = *((unsigned __int8 *)v137 + 8);
    LOBYTE(v438) = 62;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v138, v139, &v438, v5);
    v140 = (uint64_t *)(v3 + v120[67]);
    v141 = *v140;
    v142 = *((unsigned __int8 *)v140 + 8);
    LOBYTE(v438) = 63;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v141, v142, &v438, v5);
    v143 = (uint64_t *)(v3 + v120[68]);
    v144 = *v143;
    v145 = *((unsigned __int8 *)v143 + 8);
    LOBYTE(v438) = 64;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v144, v145, &v438, v5);
    v146 = (uint64_t *)(v3 + v120[69]);
    v147 = *v146;
    v148 = *((unsigned __int8 *)v146 + 8);
    LOBYTE(v438) = 65;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v147, v148, &v438, v5);
    v149 = v3 + v120[70];
    v150 = *(_QWORD *)(v149 + 8);
    v151 = *(_QWORD *)(v149 + 16);
    v152 = *(_QWORD *)(v149 + 24);
    v153 = *(_QWORD *)(v149 + 32);
    v154 = *(_QWORD *)(v149 + 40);
    v155 = *(_QWORD *)(v149 + 48);
    v156 = *(_QWORD *)(v149 + 56);
    v157 = *(_QWORD *)(v149 + 64);
    v158 = *(_QWORD *)(v149 + 72);
    v159 = *(_QWORD *)(v149 + 80);
    v160 = *(_QWORD *)(v149 + 88);
    v161 = *(_QWORD *)(v149 + 96);
    v162 = *(_QWORD *)(v149 + 104);
    v438 = *(id *)v149;
    v439 = v150;
    v440 = v151;
    v441 = v152;
    v442 = v153;
    v443 = v154;
    v444 = v155;
    v445 = v156;
    v446 = v157;
    v447 = v158;
    v448 = v159;
    v449 = v160;
    v450 = v161;
    v451 = v162;
    v452[0] = 66;
    v437[1] = v160;
    v437[2] = v159;
    v437[3] = v158;
    v437[4] = v157;
    v437[11] = v150;
    v437[12] = v438;
    v437[9] = v152;
    v437[10] = v151;
    v437[7] = v154;
    v437[8] = v153;
    v437[6] = v155;
    v437[5] = v156;
    sub_1006C9628((uint64_t)v438, v150, v151, v152, v153, v154, v155, v156, v157, v158, v159, v160, v161, v162);
    v163 = sub_1006CE578();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, &type metadata for AllMacBeaconConfigs, v163);
    sub_1006C9720((uint64_t)v438, v439, v440, v441, v442, v443, v444, v445, v446, v447, v448, v449, v450, v451);
    v164 = *(unsigned __int8 *)(v3 + v120[71]);
    LOBYTE(v438) = 67;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v164, &v438, v5);
    v165 = *(unsigned __int8 *)(v3 + v120[72]);
    LOBYTE(v438) = 68;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v165, &v438, v5);
    v166 = *(unsigned __int8 *)(v3 + v120[73]);
    LOBYTE(v438) = 69;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v166, &v438, v5);
    v167 = (uint64_t *)(v3 + v120[74]);
    v168 = *v167;
    v169 = *((unsigned __int8 *)v167 + 8);
    LOBYTE(v438) = 70;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v168, v169, &v438, v5);
    v170 = (uint64_t *)(v3 + v120[75]);
    v171 = *v170;
    v172 = *((unsigned __int8 *)v170 + 8);
    LOBYTE(v438) = 71;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v171, v172, &v438, v5);
    v173 = (uint64_t *)(v3 + v120[76]);
    v174 = *v173;
    v175 = *((unsigned __int8 *)v173 + 8);
    LOBYTE(v438) = 72;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v174, v175, &v438, v5);
    v176 = (uint64_t *)(v3 + v120[77]);
    v177 = *v176;
    v178 = *((unsigned __int8 *)v176 + 8);
    LOBYTE(v438) = 73;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v177, v178, &v438, v5);
    v179 = (uint64_t *)(v3 + v120[78]);
    v180 = *v179;
    v181 = *((unsigned __int8 *)v179 + 8);
    LOBYTE(v438) = 74;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v180, v181, &v438, v5);
    v182 = (uint64_t *)(v3 + v120[79]);
    v183 = *v182;
    v184 = *((unsigned __int8 *)v182 + 8);
    LOBYTE(v438) = 75;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v183, v184, &v438, v5);
    v185 = (uint64_t *)(v3 + v120[80]);
    v186 = *v185;
    v187 = *((unsigned __int8 *)v185 + 8);
    LOBYTE(v438) = 76;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v186, v187, &v438, v5);
    v188 = (uint64_t *)(v3 + v120[81]);
    v189 = *v188;
    v190 = v188[1];
    LOBYTE(v438) = 77;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v189, v190, &v438, v5);
    v191 = *(unsigned __int8 *)(v3 + v120[82]);
    LOBYTE(v438) = 78;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v191, &v438, v5);
    v192 = (uint64_t *)(v3 + v120[83]);
    v193 = *v192;
    v194 = *((unsigned __int8 *)v192 + 8);
    LOBYTE(v438) = 79;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v193, v194, &v438, v5);
    v195 = (uint64_t *)(v3 + v120[84]);
    v196 = *v195;
    v197 = *((unsigned __int8 *)v195 + 8);
    LOBYTE(v438) = 80;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v196, v197, &v438, v5);
    v198 = (uint64_t *)(v3 + v120[85]);
    v199 = *v198;
    v200 = *((unsigned __int8 *)v198 + 8);
    LOBYTE(v438) = 81;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v199, v200, &v438, v5);
    v201 = (uint64_t *)(v3 + v120[86]);
    v202 = *v201;
    v203 = v201[1];
    LOBYTE(v438) = 82;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v202, v203, &v438, v5);
    v204 = (uint64_t *)(v3 + v120[87]);
    v205 = *v204;
    v206 = *((unsigned __int8 *)v204 + 8);
    LOBYTE(v438) = 83;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v205, v206, &v438, v5);
    v207 = (uint64_t *)(v3 + v120[88]);
    v208 = *v207;
    v209 = v207[1];
    LOBYTE(v438) = 84;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v208, v209, &v438, v5);
    v210 = (uint64_t *)(v3 + v120[89]);
    v211 = *v210;
    v212 = *((unsigned __int8 *)v210 + 8);
    LOBYTE(v438) = 85;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v211, v212, &v438, v5);
    v213 = (uint64_t *)(v3 + v120[90]);
    v214 = *v213;
    v215 = v213[1];
    LOBYTE(v438) = 86;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v214, v215, &v438, v5);
    v216 = (uint64_t *)(v3 + v120[91]);
    v217 = *v216;
    v218 = *((unsigned __int8 *)v216 + 8);
    LOBYTE(v438) = 87;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v217, v218, &v438, v5);
    v219 = *(unsigned __int8 *)(v3 + v120[92]);
    LOBYTE(v438) = 88;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v219, &v438, v5);
    v220 = *(unsigned __int8 *)(v3 + v120[93]);
    LOBYTE(v438) = 89;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v220, &v438, v5);
    v221 = *(unsigned __int8 *)(v3 + v120[94]);
    LOBYTE(v438) = 90;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v221, &v438, v5);
    v222 = *(unsigned __int8 *)(v3 + v120[95]);
    LOBYTE(v438) = 91;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v222, &v438, v5);
    v223 = (uint64_t *)(v3 + v120[96]);
    v224 = *v223;
    v225 = *((unsigned __int8 *)v223 + 8);
    LOBYTE(v438) = 92;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v224, v225, &v438, v5);
    v226 = (uint64_t *)(v3 + v120[97]);
    v227 = *v226;
    v228 = *((unsigned __int8 *)v226 + 8);
    LOBYTE(v438) = 93;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v227, v228, &v438, v5);
    v229 = (uint64_t *)(v3 + v120[98]);
    v230 = *v229;
    v231 = *((unsigned __int8 *)v229 + 8);
    LOBYTE(v438) = 94;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v230, v231, &v438, v5);
    v232 = (uint64_t *)(v3 + v120[99]);
    v233 = *v232;
    v234 = *((unsigned __int8 *)v232 + 8);
    LOBYTE(v438) = 95;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v233, v234, &v438, v5);
    v235 = (uint64_t *)(v3 + v120[100]);
    v236 = *v235;
    v237 = *((unsigned __int8 *)v235 + 8);
    LOBYTE(v438) = 96;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v236, v237, &v438, v5);
    v238 = (uint64_t *)(v3 + v120[101]);
    v239 = *v238;
    v240 = *((unsigned __int8 *)v238 + 8);
    LOBYTE(v438) = 97;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v239, v240, &v438, v5);
    v241 = (uint64_t *)(v3 + v120[102]);
    v242 = *v241;
    v243 = *((unsigned __int8 *)v241 + 8);
    LOBYTE(v438) = 98;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v242, v243, &v438, v5);
    v244 = (uint64_t *)(v3 + v120[103]);
    v245 = *v244;
    v246 = *((unsigned __int8 *)v244 + 8);
    LOBYTE(v438) = 99;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v245, v246, &v438, v5);
    v247 = (uint64_t *)(v3 + v120[104]);
    v248 = *v247;
    v249 = *((unsigned __int8 *)v247 + 8);
    LOBYTE(v438) = 100;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v248, v249, &v438, v5);
    v250 = (uint64_t *)(v3 + v120[105]);
    v251 = *v250;
    v252 = *((unsigned __int8 *)v250 + 8);
    LOBYTE(v438) = 101;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v251, v252, &v438, v5);
    v253 = (uint64_t *)(v3 + v120[106]);
    v254 = *v253;
    v255 = *((unsigned __int8 *)v253 + 8);
    LOBYTE(v438) = 102;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v254, v255, &v438, v5);
    v256 = (uint64_t *)(v3 + v120[107]);
    v257 = *v256;
    v258 = *((unsigned __int8 *)v256 + 8);
    LOBYTE(v438) = 103;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v257, v258, &v438, v5);
    v259 = (uint64_t *)(v3 + v120[108]);
    v260 = *v259;
    v261 = *((unsigned __int8 *)v259 + 8);
    LOBYTE(v438) = 104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v260, v261, &v438, v5);
    v262 = (uint64_t *)(v3 + v120[109]);
    v263 = *v262;
    v264 = *((unsigned __int8 *)v262 + 8);
    LOBYTE(v438) = 105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v263, v264, &v438, v5);
    v265 = (uint64_t *)(v3 + v120[110]);
    v266 = *v265;
    v267 = *((unsigned __int8 *)v265 + 8);
    LOBYTE(v438) = 106;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v266, v267, &v438, v5);
    v268 = (uint64_t *)(v3 + v120[111]);
    v269 = *v268;
    v270 = *((unsigned __int8 *)v268 + 8);
    LOBYTE(v438) = 107;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v269, v270, &v438, v5);
    v271 = (uint64_t *)(v3 + v120[112]);
    v272 = *v271;
    v273 = *((unsigned __int8 *)v271 + 8);
    LOBYTE(v438) = 108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v272, v273, &v438, v5);
    v274 = (uint64_t *)(v3 + v120[113]);
    v275 = *v274;
    v276 = *((unsigned __int8 *)v274 + 8);
    LOBYTE(v438) = 109;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v275, v276, &v438, v5);
    v277 = (uint64_t *)(v3 + v120[114]);
    v278 = *v277;
    v279 = *((unsigned __int8 *)v277 + 8);
    LOBYTE(v438) = 110;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v278, v279, &v438, v5);
    v280 = (uint64_t *)(v3 + v120[115]);
    v281 = *v280;
    v282 = *((unsigned __int8 *)v280 + 8);
    LOBYTE(v438) = 111;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v281, v282, &v438, v5);
    v283 = (uint64_t *)(v3 + v120[116]);
    v284 = *v283;
    v285 = *((unsigned __int8 *)v283 + 8);
    LOBYTE(v438) = 112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v284, v285, &v438, v5);
    v286 = (uint64_t *)(v3 + v120[117]);
    v287 = *v286;
    v288 = *((unsigned __int8 *)v286 + 8);
    LOBYTE(v438) = 113;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v287, v288, &v438, v5);
    v289 = *(unsigned __int8 *)(v3 + v120[118]);
    LOBYTE(v438) = 114;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v289, &v438, v5);
    v290 = (uint64_t *)(v3 + v120[119]);
    v291 = *v290;
    v292 = *((unsigned __int8 *)v290 + 8);
    LOBYTE(v438) = 115;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v291, v292, &v438, v5);
    v293 = (uint64_t *)(v3 + v120[120]);
    v294 = *v293;
    v295 = *((unsigned __int8 *)v293 + 8);
    LOBYTE(v438) = 116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v294, v295, &v438, v5);
    v296 = (uint64_t *)(v3 + v120[121]);
    v297 = *v296;
    v298 = *((unsigned __int8 *)v296 + 8);
    LOBYTE(v438) = 117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v297, v298, &v438, v5);
    v299 = *(unsigned __int8 *)(v3 + v120[122]);
    LOBYTE(v438) = 118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v299, &v438, v5);
    v300 = *(unsigned __int8 *)(v3 + v120[123]);
    LOBYTE(v438) = 119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v300, &v438, v5);
    v301 = *(unsigned __int8 *)(v3 + v120[124]);
    LOBYTE(v438) = 120;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v301, &v438, v5);
    v302 = (uint64_t *)(v3 + v120[125]);
    v303 = *v302;
    v304 = *((unsigned __int8 *)v302 + 8);
    LOBYTE(v438) = 121;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v303, v304, &v438, v5);
    v305 = (uint64_t *)(v3 + v120[126]);
    v306 = *v305;
    v307 = *((unsigned __int8 *)v305 + 8);
    LOBYTE(v438) = 122;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v306, v307, &v438, v5);
    v308 = (uint64_t *)(v3 + v120[127]);
    v309 = *v308;
    v310 = *((unsigned __int8 *)v308 + 8);
    LOBYTE(v438) = 123;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v309, v310, &v438, v5);
    v311 = (uint64_t *)(v3 + v120[128]);
    v312 = *v311;
    v313 = *((unsigned __int8 *)v311 + 8);
    LOBYTE(v438) = 124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v312, v313, &v438, v5);
    v314 = (uint64_t *)(v3 + v120[129]);
    v315 = *v314;
    v316 = *((unsigned __int8 *)v314 + 8);
    LOBYTE(v438) = 125;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v315, v316, &v438, v5);
    v317 = (uint64_t *)(v3 + v120[130]);
    v318 = *v317;
    v319 = *((unsigned __int8 *)v317 + 8);
    LOBYTE(v438) = 126;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v318, v319, &v438, v5);
    v320 = (uint64_t *)(v3 + v120[131]);
    v321 = *v320;
    v322 = *((unsigned __int8 *)v320 + 8);
    LOBYTE(v438) = 127;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v321, v322, &v438, v5);
    v323 = (uint64_t *)(v3 + v120[132]);
    v324 = *v323;
    v325 = *((unsigned __int8 *)v323 + 8);
    LOBYTE(v438) = 0x80;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v324, v325, &v438, v5);
    v326 = *(unsigned __int8 *)(v3 + v120[133]);
    LOBYTE(v438) = -127;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v326, &v438, v5);
    v327 = (uint64_t *)(v3 + v120[134]);
    v328 = *v327;
    v329 = *((unsigned __int8 *)v327 + 8);
    LOBYTE(v438) = -126;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v328, v329, &v438, v5);
    v438 = *(id *)(v3 + v120[135]);
    v452[0] = -125;
    v330 = sub_10001A9A8(&qword_1010ED5A0);
    v331 = sub_1006CE5BC(&qword_1010F3B60, &qword_1010ED5A0, (uint64_t)&protocol witness table for Int, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, v330, v331);
    v332 = (uint64_t *)(v3 + v120[136]);
    v333 = *v332;
    v334 = *((unsigned __int8 *)v332 + 8);
    LOBYTE(v438) = -124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v333, v334, &v438, v5);
    v335 = *(unsigned __int8 *)(v3 + v120[137]);
    LOBYTE(v438) = -123;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v335, &v438, v5);
    v438 = *(id *)(v3 + v120[138]);
    v452[0] = -122;
    v336 = sub_10001A9A8(&qword_1010ED590);
    v337 = sub_1006CE618(&qword_1011046D8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Double, (const char *)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v438, v452, v5, v336, v337);
    v338 = *(unsigned __int8 *)(v3 + v120[139]);
    LOBYTE(v438) = -121;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v338, &v438, v5);
    v339 = (uint64_t *)(v3 + v120[140]);
    v340 = *v339;
    v341 = *((unsigned __int8 *)v339 + 8);
    LOBYTE(v438) = -120;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v340, v341, &v438, v5);
    v342 = (uint64_t *)(v3 + v120[141]);
    v343 = *v342;
    v344 = *((unsigned __int8 *)v342 + 8);
    LOBYTE(v438) = -119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v343, v344, &v438, v5);
    v345 = *(unsigned __int8 *)(v3 + v120[142]);
    LOBYTE(v438) = -118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v345, &v438, v5);
    v346 = *(unsigned __int8 *)(v3 + v120[143]);
    LOBYTE(v438) = -117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v346, &v438, v5);
    v347 = (uint64_t *)(v3 + v120[144]);
    v348 = *v347;
    v349 = *((unsigned __int8 *)v347 + 8);
    LOBYTE(v438) = -116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v348, v349, &v438, v5);
    v350 = (uint64_t *)(v3 + v120[145]);
    v351 = *v350;
    v352 = *((unsigned __int8 *)v350 + 8);
    LOBYTE(v438) = -115;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v351, v352, &v438, v5);
    v353 = (uint64_t *)(v3 + v120[146]);
    v354 = *v353;
    v355 = *((unsigned __int8 *)v353 + 8);
    LOBYTE(v438) = -114;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v354, v355, &v438, v5);
    v356 = (uint64_t *)(v3 + v120[147]);
    v357 = *v356;
    v358 = *((unsigned __int8 *)v356 + 8);
    LOBYTE(v438) = -113;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v357, v358, &v438, v5);
    v359 = (uint64_t *)(v3 + v120[148]);
    v360 = *v359;
    v361 = *((unsigned __int8 *)v359 + 8);
    LOBYTE(v438) = -112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v360, v361, &v438, v5);
    v362 = (uint64_t *)(v3 + v120[149]);
    v363 = *v362;
    v364 = *((unsigned __int8 *)v362 + 8);
    LOBYTE(v438) = -111;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v363, v364, &v438, v5);
    v365 = (uint64_t *)(v3 + v120[150]);
    v366 = *v365;
    v367 = *((unsigned __int8 *)v365 + 8);
    LOBYTE(v438) = -110;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v366, v367, &v438, v5);
    v368 = (uint64_t *)(v3 + v120[151]);
    v369 = *v368;
    v370 = *((unsigned __int8 *)v368 + 8);
    LOBYTE(v438) = -109;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v369, v370, &v438, v5);
    v371 = (uint64_t *)(v3 + v120[152]);
    v372 = *v371;
    v373 = *((unsigned __int8 *)v371 + 8);
    LOBYTE(v438) = -108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v372, v373, &v438, v5);
    v374 = (uint64_t *)(v3 + v120[153]);
    v375 = *v374;
    v376 = *((unsigned __int8 *)v374 + 8);
    LOBYTE(v438) = -107;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v375, v376, &v438, v5);
    v377 = (uint64_t *)(v3 + v120[154]);
    v378 = *v377;
    v379 = *((unsigned __int8 *)v377 + 8);
    LOBYTE(v438) = -106;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v378, v379, &v438, v5);
    v380 = (uint64_t *)(v3 + v120[155]);
    v381 = *v380;
    v382 = *((unsigned __int8 *)v380 + 8);
    LOBYTE(v438) = -105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v381, v382, &v438, v5);
    v383 = (uint64_t *)(v3 + v120[156]);
    v384 = *v383;
    v385 = *((unsigned __int8 *)v383 + 8);
    LOBYTE(v438) = -104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v384, v385, &v438, v5);
    v386 = (uint64_t *)(v3 + v120[157]);
    v387 = *v386;
    v388 = *((unsigned __int8 *)v386 + 8);
    LOBYTE(v438) = -103;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v387, v388, &v438, v5);
    v389 = (uint64_t *)(v3 + v120[158]);
    v390 = *v389;
    v391 = *((unsigned __int8 *)v389 + 8);
    LOBYTE(v438) = -102;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v390, v391, &v438, v5);
    v392 = (uint64_t *)(v3 + v120[159]);
    v393 = *v392;
    v394 = *((unsigned __int8 *)v392 + 8);
    LOBYTE(v438) = -101;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v393, v394, &v438, v5);
    v395 = (uint64_t *)(v3 + v120[160]);
    v396 = *v395;
    v397 = *((unsigned __int8 *)v395 + 8);
    LOBYTE(v438) = -100;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v396, v397, &v438, v5);
    v398 = *(unsigned __int8 *)(v3 + v120[161]);
    LOBYTE(v438) = -99;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v398, &v438, v5);
    v399 = *(unsigned __int8 *)(v3 + v120[162]);
    LOBYTE(v438) = -98;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v399, &v438, v5);
    v400 = (uint64_t *)(v3 + v120[163]);
    v401 = *v400;
    v402 = *((unsigned __int8 *)v400 + 8);
    LOBYTE(v438) = -97;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v401, v402, &v438, v5);
    v403 = (uint64_t *)(v3 + v120[164]);
    v404 = *v403;
    v405 = *((unsigned __int8 *)v403 + 8);
    LOBYTE(v438) = -96;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v404, v405, &v438, v5);
    v406 = *(unsigned __int8 *)(v3 + v120[165]);
    LOBYTE(v438) = -95;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v406, &v438, v5);
    v407 = (unsigned int *)(v3 + v120[166]);
    v408 = *v407;
    LOBYTE(v407) = *((_BYTE *)v407 + 4);
    LOBYTE(v438) = -94;
    v452[0] = (_BYTE)v407;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v408 | ((unint64_t)v407 << 32), &v438, v5);
    v409 = (uint64_t *)(v3 + v120[167]);
    v410 = *v409;
    v411 = *((unsigned __int8 *)v409 + 8);
    LOBYTE(v438) = -93;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v410, v411, &v438, v5);
    v412 = (uint64_t *)(v3 + v120[168]);
    v413 = *v412;
    v414 = *((unsigned __int8 *)v412 + 8);
    LOBYTE(v438) = -92;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v413, v414, &v438, v5);
    v415 = (uint64_t *)(v3 + v120[169]);
    v416 = *v415;
    v417 = *((unsigned __int8 *)v415 + 8);
    LOBYTE(v438) = -91;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v416, v417, &v438, v5);
    v418 = (uint64_t *)(v3 + v120[170]);
    v419 = *v418;
    v420 = *((unsigned __int8 *)v418 + 8);
    LOBYTE(v438) = -90;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v419, v420, &v438, v5);
    v421 = (uint64_t *)(v3 + v120[171]);
    v422 = *v421;
    v423 = *((unsigned __int8 *)v421 + 8);
    LOBYTE(v438) = -89;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v422, v423, &v438, v5);
    v424 = (uint64_t *)(v3 + v120[172]);
    v425 = *v424;
    v426 = *((unsigned __int8 *)v424 + 8);
    LOBYTE(v438) = -88;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v425, v426, &v438, v5);
    v427 = (uint64_t *)(v3 + v120[173]);
    v428 = *v427;
    v429 = *((unsigned __int8 *)v427 + 8);
    LOBYTE(v438) = -87;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v428, v429, &v438, v5);
    v430 = *(unsigned __int8 *)(v3 + v120[174]);
    LOBYTE(v438) = -86;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v430, &v438, v5);
    v431 = (uint64_t *)(v3 + v120[175]);
    v432 = *v431;
    v433 = *((unsigned __int8 *)v431 + 8);
    LOBYTE(v438) = -85;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v432, v433, &v438, v5);
    v434 = (uint64_t *)(v3 + v120[176]);
    v435 = *v434;
    v436 = *((unsigned __int8 *)v434 + 8);
    LOBYTE(v438) = -84;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v435, v436, &v438, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1006C1DF4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  unint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  char v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  uint64_t v190;
  char v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char v225;
  char *v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char v257;
  char *v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t v271;
  char v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  char v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  char *v308;
  uint64_t v309;
  char v310;
  uint64_t v311;
  char v312;
  uint64_t v313;
  char v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  char v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  char v323;
  char *v324;
  uint64_t v325;
  uint64_t v326;
  char v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  char v331;
  char *v332;
  uint64_t v333;
  uint64_t v334;
  char v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  char v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  char v343;
  char *v344;
  uint64_t v345;
  uint64_t v346;
  char v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  char v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  char v355;
  char *v356;
  uint64_t v357;
  uint64_t v358;
  char v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  char v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  char v371;
  char *v372;
  uint64_t v373;
  uint64_t v374;
  char v375;
  char *v376;
  uint64_t v377;
  uint64_t v378;
  char v379;
  char *v380;
  uint64_t v381;
  uint64_t v382;
  char v383;
  char *v384;
  uint64_t v385;
  uint64_t v386;
  char v387;
  char *v388;
  uint64_t v389;
  uint64_t v390;
  char v391;
  char *v392;
  uint64_t v393;
  uint64_t v394;
  char v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  char v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  char v403;
  char *v404;
  uint64_t v405;
  char v406;
  uint64_t v407;
  uint64_t v408;
  char v409;
  char *v410;
  uint64_t v411;
  uint64_t v412;
  char v413;
  char *v414;
  uint64_t v415;
  uint64_t v416;
  char v417;
  char *v418;
  uint64_t v419;
  char v420;
  uint64_t v421;
  char v422;
  uint64_t v423;
  char v424;
  uint64_t v425;
  uint64_t v426;
  char v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  char v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  char v435;
  char *v436;
  uint64_t v437;
  uint64_t v438;
  char v439;
  char *v440;
  uint64_t v441;
  uint64_t v442;
  char v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  char v447;
  char *v448;
  uint64_t v449;
  uint64_t v450;
  char v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  char v455;
  char *v456;
  uint64_t v457;
  char v458;
  uint64_t v459;
  uint64_t v460;
  char v461;
  char *v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  char v468;
  uint64_t v469;
  char v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  char v474;
  uint64_t v475;
  uint64_t v476;
  char v477;
  char *v478;
  uint64_t v479;
  uint64_t v480;
  char v481;
  char *v482;
  uint64_t v483;
  char v484;
  uint64_t v485;
  char v486;
  uint64_t v487;
  uint64_t v488;
  char v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  char v493;
  char *v494;
  uint64_t v495;
  uint64_t v496;
  char v497;
  char *v498;
  uint64_t v499;
  uint64_t v500;
  char v501;
  char *v502;
  uint64_t v503;
  uint64_t v504;
  char v505;
  char *v506;
  uint64_t v507;
  uint64_t v508;
  char v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  char v513;
  char *v514;
  uint64_t v515;
  uint64_t v516;
  char v517;
  char *v518;
  uint64_t v519;
  uint64_t v520;
  char v521;
  char *v522;
  uint64_t v523;
  uint64_t v524;
  char v525;
  char *v526;
  uint64_t v527;
  uint64_t v528;
  char v529;
  char *v530;
  uint64_t v531;
  uint64_t v532;
  char v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  char v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  char v541;
  char *v542;
  uint64_t v543;
  uint64_t v544;
  char v545;
  char *v546;
  uint64_t v547;
  uint64_t v548;
  char v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  char v553;
  char *v554;
  uint64_t v555;
  char v556;
  uint64_t v557;
  char v558;
  uint64_t v559;
  uint64_t v560;
  char v561;
  char *v562;
  uint64_t v563;
  uint64_t v564;
  char v565;
  char *v566;
  uint64_t v567;
  char v568;
  uint64_t v569;
  uint64_t v570;
  char *v571;
  uint64_t v572;
  uint64_t v573;
  char v574;
  char *v575;
  uint64_t v576;
  uint64_t v577;
  char v578;
  char *v579;
  uint64_t v580;
  uint64_t v581;
  char v582;
  char *v583;
  uint64_t v584;
  uint64_t v585;
  char v586;
  char *v587;
  uint64_t v588;
  uint64_t v589;
  char v590;
  char *v591;
  uint64_t v592;
  uint64_t v593;
  char v594;
  char *v595;
  uint64_t v596;
  uint64_t v597;
  char v598;
  char *v599;
  uint64_t v600;
  char v601;
  uint64_t v602;
  uint64_t v603;
  char v604;
  char *v605;
  uint64_t v606;
  uint64_t v607;
  char v608;
  id *v609;
  uint64_t *v610;
  uint64_t v611;
  char v612;
  uint64_t v613;
  char *v614;
  uint64_t v615;
  uint64_t v616;
  char *v617;
  uint64_t v618;
  _QWORD *v619;
  uint64_t v620;
  int *v621;
  char *v622;
  _OWORD v623[8];
  char v624;

  v616 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v615 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v615 - v8;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v615 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v618 = sub_10001A9A8(&qword_101104628);
  v13 = *(_QWORD *)(v618 - 8);
  __chkstk_darwin(v618);
  v15 = (char *)&v615 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v621 = (int *)type metadata accessor for DefaultConfigurationLayer(0);
  __chkstk_darwin(v621);
  v17 = (char *)&v615 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v17 + 2) = 0;
  v622 = v17;
  v17[24] = 1;
  v18 = a1[3];
  v19 = a1[4];
  v619 = a1;
  sub_10001AA44(a1, v18);
  v20 = sub_1006CE1A8();
  v617 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DefaultConfigurationLayer.CodingKeys, &type metadata for DefaultConfigurationLayer.CodingKeys, v20, v18, v19);
  v620 = v2;
  if (v2)
    goto LABEL_4;
  v624 = 0;
  v21 = sub_100036994();
  v22 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v624, v618, &type metadata for Data, v21);
  if (v22)
  {
    v620 = v22;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
LABEL_4:
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    goto LABEL_5;
  }
  v31 = v622;
  *(_OWORD *)v622 = v623[0];
  LOBYTE(v623[0]) = 1;
  *((_QWORD *)v31 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v31[24] = v32 & 1;
  v624 = 2;
  v33 = sub_1006CE1EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v623, &type metadata for ConfigurationCoordinator.ConfigurationSource, &v624, v618, &type metadata for ConfigurationCoordinator.ConfigurationSource, v33);
  v31[25] = v623[0];
  LOBYTE(v623[0]) = 3;
  *((_QWORD *)v31 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v31[40] = v34 & 1;
  LOBYTE(v623[0]) = 4;
  *((_QWORD *)v31 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v31[56] = v35 & 1;
  LOBYTE(v623[0]) = 5;
  v31[57] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v36 = sub_10001A9A8(&qword_1011063B0);
  v624 = 6;
  v37 = sub_1006CE5BC((unint64_t *)&qword_1010F9668, &qword_1011063B0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, &v624, v618, v36, v37);
  *((_QWORD *)v31 + 8) = *(_QWORD *)&v623[0];
  LOBYTE(v623[0]) = 7;
  v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = 0;
  v622[72] = v38;
  LOBYTE(v623[0]) = 8;
  v39 = v620;
  v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v39;
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 65;
    goto LABEL_5;
  }
  v42 = v622;
  *((_QWORD *)v622 + 10) = v40;
  *((_QWORD *)v42 + 11) = v41;
  LOBYTE(v623[0]) = 9;
  v43 = v620;
  v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v43;
  if (v43)
    goto LABEL_54;
  v46 = v622;
  *((_QWORD *)v622 + 12) = v44;
  v46[104] = v45 & 1;
  LOBYTE(v623[0]) = 10;
  v47 = v620;
  v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v47;
  if (v47)
    goto LABEL_54;
  v622[105] = v48;
  LOBYTE(v623[0]) = 11;
  v49 = v620;
  v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v49;
  if (v49)
    goto LABEL_54;
  v622[106] = v50;
  LOBYTE(v623[0]) = 12;
  v51 = v620;
  v52 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v51;
  if (v51)
    goto LABEL_54;
  v54 = v622;
  *((_QWORD *)v622 + 14) = v52;
  v54[120] = v53 & 1;
  LOBYTE(v623[0]) = 13;
  v55 = v620;
  v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v55;
  if (v55)
    goto LABEL_54;
  v58 = v622;
  *((_QWORD *)v622 + 16) = v56;
  v58[136] = v57 & 1;
  LOBYTE(v623[0]) = 14;
  v59 = v620;
  v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v59;
  if (v59)
    goto LABEL_54;
  v62 = v622;
  *((_QWORD *)v622 + 18) = v60;
  v62[152] = v61 & 1;
  LOBYTE(v623[0]) = 15;
  v63 = v620;
  v64 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v63;
  if (v63)
    goto LABEL_54;
  v66 = v622;
  *((_QWORD *)v622 + 20) = v64;
  v66[168] = v65 & 1;
  LOBYTE(v623[0]) = 16;
  v67 = v620;
  v68 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v67;
  if (v67)
    goto LABEL_54;
  v70 = v622;
  *((_QWORD *)v622 + 22) = v68;
  v70[184] = v69 & 1;
  LOBYTE(v623[0]) = 17;
  v71 = v620;
  v72 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v71;
  if (v71)
    goto LABEL_54;
  v74 = v622;
  *((_QWORD *)v622 + 24) = v72;
  v74[200] = v73 & 1;
  LOBYTE(v623[0]) = 18;
  v75 = v620;
  v76 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v75;
  if (v75)
    goto LABEL_54;
  v78 = v622;
  *((_QWORD *)v622 + 26) = v76;
  v78[216] = v77 & 1;
  LOBYTE(v623[0]) = 19;
  v79 = v620;
  v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v79;
  if (v79)
    goto LABEL_54;
  v82 = v622;
  *((_QWORD *)v622 + 28) = v80;
  v82[232] = v81 & 1;
  LOBYTE(v623[0]) = 20;
  v83 = v620;
  v84 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v83;
  if (v83)
    goto LABEL_54;
  v86 = v622;
  *((_QWORD *)v622 + 30) = v84;
  v86[248] = v85 & 1;
  LOBYTE(v623[0]) = 21;
  v87 = v620;
  v88 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v87;
  if (v87)
    goto LABEL_54;
  v90 = v622;
  v91 = v622 + 264;
  *((_QWORD *)v622 + 32) = v88;
  v90[264] = v89 & 1;
  LOBYTE(v623[0]) = 22;
  v92 = v620;
  v93 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v92;
  if (v92)
    goto LABEL_54;
  *((_QWORD *)v622 + 34) = v93;
  v91[16] = v94 & 1;
  LOBYTE(v623[0]) = 23;
  v95 = v620;
  v96 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v95;
  if (v95)
    goto LABEL_54;
  *((_QWORD *)v622 + 36) = v96;
  v91[32] = v97 & 1;
  LOBYTE(v623[0]) = 24;
  v98 = v620;
  v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v98;
  if (v98)
    goto LABEL_54;
  *((_QWORD *)v622 + 38) = v99;
  v91[48] = v100 & 1;
  LOBYTE(v623[0]) = 25;
  v101 = v620;
  v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v101;
  if (v101
    || (v622[313] = v102,
        v103 = sub_10001A9A8(&qword_1010ED5F8),
        v624 = 26,
        v104 = sub_1006CE230(),
        v105 = v620,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v103, &v624, v618, v103, v104),
        (v620 = v105) != 0))
  {
LABEL_54:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 321;
    goto LABEL_5;
  }
  v25 = 0;
  v24 = 67109185;
  *((_QWORD *)v622 + 40) = *(_QWORD *)&v623[0];
  LOBYTE(v623[0]) = 27;
  v106 = v620;
  v107 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v106;
  if (v106)
    goto LABEL_97;
  *((_QWORD *)v622 + 41) = v107;
  v91[72] = v108 & 1;
  LOBYTE(v623[0]) = 28;
  v109 = v620;
  v110 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v109;
  if (v109)
    goto LABEL_97;
  *((_QWORD *)v622 + 43) = v110;
  v91[88] = v111 & 1;
  LOBYTE(v623[0]) = 29;
  v112 = v620;
  v113 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v112;
  if (v112)
    goto LABEL_97;
  *((_QWORD *)v622 + 45) = v113;
  v91[104] = v114 & 1;
  LOBYTE(v623[0]) = 30;
  v115 = v620;
  v116 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v115;
  if (v115)
    goto LABEL_97;
  *((_QWORD *)v622 + 47) = v116;
  v91[120] = v117 & 1;
  LOBYTE(v623[0]) = 31;
  v118 = v620;
  v119 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v118;
  if (v118)
    goto LABEL_97;
  *((_QWORD *)v622 + 49) = v119;
  v91[136] = v120 & 1;
  LOBYTE(v623[0]) = 32;
  v121 = v620;
  v122 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v121;
  if (v121)
    goto LABEL_97;
  *((_QWORD *)v622 + 51) = v122;
  v91[152] = v123 & 1;
  LOBYTE(v623[0]) = 33;
  v124 = v620;
  v125 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v124;
  if (v124)
    goto LABEL_97;
  *((_QWORD *)v622 + 53) = v125;
  v91[168] = v126 & 1;
  LOBYTE(v623[0]) = 34;
  v127 = v620;
  v128 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v127;
  if (v127)
    goto LABEL_97;
  *((_QWORD *)v622 + 55) = v128;
  v91[184] = v129 & 1;
  LOBYTE(v623[0]) = 35;
  v130 = v620;
  v131 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v130;
  if (v130)
    goto LABEL_97;
  *((_QWORD *)v622 + 57) = v131;
  v91[200] = v132 & 1;
  LOBYTE(v623[0]) = 36;
  v133 = v620;
  v134 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v133;
  if (v133)
    goto LABEL_97;
  *((_QWORD *)v622 + 59) = v134;
  v91[216] = v135 & 1;
  LOBYTE(v623[0]) = 37;
  v136 = v620;
  v137 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v136;
  if (v136)
    goto LABEL_97;
  v622[481] = v137;
  LOBYTE(v623[0]) = 38;
  v138 = v620;
  v139 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v138;
  if (v138)
    goto LABEL_97;
  *((_QWORD *)v622 + 61) = v139;
  v91[232] = v140 & 1;
  LOBYTE(v623[0]) = 39;
  v141 = v620;
  v142 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v141;
  if (v141)
    goto LABEL_97;
  *((_QWORD *)v622 + 63) = v142;
  v91[248] = v143 & 1;
  LOBYTE(v623[0]) = 40;
  v144 = v620;
  v145 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v144;
  if (v144)
    goto LABEL_97;
  *((_QWORD *)v622 + 65) = v145;
  v91[264] = v146 & 1;
  LOBYTE(v623[0]) = 41;
  v147 = v620;
  v148 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v147;
  if (v147)
    goto LABEL_97;
  *((_QWORD *)v622 + 67) = v148;
  v91[280] = v149 & 1;
  LOBYTE(v623[0]) = 42;
  v150 = v620;
  v151 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v150;
  if (v150)
    goto LABEL_97;
  *((_QWORD *)v622 + 69) = v151;
  v91[296] = v152 & 1;
  LOBYTE(v623[0]) = 43;
  v153 = v620;
  v154 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v153;
  if (v153)
    goto LABEL_97;
  *((_QWORD *)v622 + 71) = v154;
  v91[312] = v155 & 1;
  LOBYTE(v623[0]) = 44;
  v156 = v620;
  v157 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v156;
  if (v156)
    goto LABEL_97;
  *((_QWORD *)v622 + 73) = v157;
  v91[328] = v158 & 1;
  v159 = sub_10001A9A8(&qword_1010ED608);
  v624 = 45;
  v160 = sub_1006CE4CC(&qword_1010FDA30, (uint64_t (*)(void))sub_1004E9C70, (const char *)&protocol conformance descriptor for <A> [A]);
  v161 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v159, &v624, v618, v159, v160);
  v620 = v161;
  if (v161)
    goto LABEL_97;
  v25 = 0;
  v24 = 0x200004000141;
  *((_QWORD *)v622 + 75) = *(_QWORD *)&v623[0];
  LOBYTE(v623[0]) = 46;
  v162 = v620;
  v163 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v162;
  if (v162)
    goto LABEL_97;
  *((_QWORD *)v622 + 76) = v163;
  v91[352] = v164 & 1;
  LOBYTE(v623[0]) = 47;
  v165 = v620;
  v166 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v165;
  if (v165)
    goto LABEL_97;
  *((_QWORD *)v622 + 78) = v166;
  v91[368] = v167 & 1;
  type metadata accessor for SPServiceState(0);
  v169 = v168;
  v624 = 48;
  v170 = sub_100006204(&qword_101104658, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&protocol conformance descriptor for SPServiceState);
  v171 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v169, &v624, v618, v169, v170);
  v620 = v171;
  if (v171)
    goto LABEL_97;
  *((_QWORD *)v622 + 80) = *(_QWORD *)&v623[0];
  v172 = sub_10001A9A8(&qword_1010ED5E0);
  v624 = 49;
  v173 = sub_1006CE2F8(&qword_101104660, &qword_101104668, (uint64_t)&protocol conformance descriptor for SPDisabledReason, (const char *)&protocol conformance descriptor for <A> [A]);
  v174 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v172, &v624, v618, v172, v173);
  v620 = v174;
  if (v174)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0x1200004000141;
    goto LABEL_5;
  }
  v25 = 0;
  v24 = 0x3200004000141;
  *((_QWORD *)v622 + 81) = *(_QWORD *)&v623[0];
  LOBYTE(v623[0]) = 50;
  v175 = v620;
  v176 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v175;
  if (v175)
    goto LABEL_97;
  *((_QWORD *)v622 + 82) = v176;
  v91[400] = v177 & 1;
  LOBYTE(v623[0]) = 51;
  v178 = v620;
  v179 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v178;
  if (v178)
    goto LABEL_97;
  *((_QWORD *)v622 + 84) = v179;
  v91[416] = v180 & 1;
  LOBYTE(v623[0]) = 52;
  v181 = v620;
  v182 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v181;
  if (v181)
    goto LABEL_97;
  *((_QWORD *)v622 + 86) = v182;
  v91[432] = v183 & 1;
  LOBYTE(v623[0]) = 53;
  v184 = v620;
  v185 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v184;
  if (v184)
    goto LABEL_97;
  *((_QWORD *)v622 + 88) = v185;
  v91[448] = v186 & 1;
  LOBYTE(v623[0]) = 54;
  v187 = v620;
  v188 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v187;
  if (v187)
    goto LABEL_97;
  *((_QWORD *)v622 + 90) = v188;
  v91[464] = v189 & 1;
  LOBYTE(v623[0]) = 55;
  v190 = v620;
  v191 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v190;
  if (v190)
    goto LABEL_97;
  v622[729] = v191;
  v192 = type metadata accessor for UUID(0);
  LOBYTE(v623[0]) = 56;
  v193 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v194 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v192, v623, v618, v192, v193);
  v620 = v194;
  if (v194)
    goto LABEL_97;
  sub_100005CF0((uint64_t)v12, (uint64_t)&v622[v621[60]], &qword_1010ED860);
  v195 = type metadata accessor for Date(0);
  LOBYTE(v623[0]) = 57;
  v196 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v197 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v195, v623, v618, v195, v196);
  v620 = v197;
  if (v197)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
    v23 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0x103200004000141;
    goto LABEL_5;
  }
  v25 = 0;
  v24 = 0x303200004000141;
  sub_100005CF0((uint64_t)v9, (uint64_t)&v622[v621[61]], (uint64_t *)&unk_1010EA690);
  LOBYTE(v623[0]) = 58;
  v198 = v620;
  v199 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v198;
  if (v198)
    goto LABEL_97;
  v201 = &v622[v621[62]];
  *(_QWORD *)v201 = v199;
  v201[8] = v200 & 1;
  LOBYTE(v623[0]) = 59;
  v202 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v195, v623, v618, v195, v196);
  v620 = v202;
  if (v202)
    goto LABEL_97;
  v25 = 0;
  v24 = 0xB03200004000141;
  sub_100005CF0((uint64_t)v7, (uint64_t)&v622[v621[63]], (uint64_t *)&unk_1010EA690);
  LOBYTE(v623[0]) = 60;
  v203 = v620;
  v204 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v203;
  if (v203)
    goto LABEL_97;
  v206 = &v622[v621[64]];
  *(_QWORD *)v206 = v204;
  v206[8] = v205 & 1;
  LOBYTE(v623[0]) = 61;
  v207 = v620;
  v208 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v207;
  if (v207)
    goto LABEL_97;
  v210 = &v622[v621[65]];
  *(_QWORD *)v210 = v208;
  v210[8] = v209 & 1;
  LOBYTE(v623[0]) = 62;
  v211 = v620;
  v212 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v211;
  if (v211)
    goto LABEL_97;
  v214 = &v622[v621[66]];
  *(_QWORD *)v214 = v212;
  v214[8] = v213 & 1;
  LOBYTE(v623[0]) = 63;
  v215 = v620;
  v216 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v215;
  if (v215)
    goto LABEL_97;
  v218 = &v622[v621[67]];
  *(_QWORD *)v218 = v216;
  v218[8] = v217 & 1;
  LOBYTE(v623[0]) = 64;
  v219 = v620;
  v220 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v219;
  if (v219)
    goto LABEL_97;
  v222 = &v622[v621[68]];
  *(_QWORD *)v222 = v220;
  v222[8] = v221 & 1;
  LOBYTE(v623[0]) = 65;
  v223 = v620;
  v224 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v223;
  if (v223)
    goto LABEL_97;
  v226 = &v622[v621[69]];
  *(_QWORD *)v226 = v224;
  v226[8] = v225 & 1;
  v624 = 66;
  v227 = sub_1006CE37C();
  v228 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for AllMacBeaconConfigs, &v624, v618, &type metadata for AllMacBeaconConfigs, v227);
  v620 = v228;
  if (v228)
  {
LABEL_97:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
    v23 = 0;
    v26 = 0;
    goto LABEL_5;
  }
  v26 = 0;
  v25 = 4;
  v229 = &v622[v621[70]];
  v230 = v623[1];
  *(_OWORD *)v229 = v623[0];
  *((_OWORD *)v229 + 1) = v230;
  v231 = v623[3];
  *((_OWORD *)v229 + 2) = v623[2];
  *((_OWORD *)v229 + 3) = v231;
  v232 = v623[5];
  *((_OWORD *)v229 + 4) = v623[4];
  *((_OWORD *)v229 + 5) = v232;
  *((_OWORD *)v229 + 6) = v623[6];
  LOBYTE(v623[0]) = 67;
  v233 = v620;
  v234 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v233;
  if (v233)
    goto LABEL_165;
  v622[v621[71]] = v234;
  LOBYTE(v623[0]) = 68;
  v235 = v620;
  v236 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v235;
  if (v235)
    goto LABEL_165;
  v622[v621[72]] = v236;
  LOBYTE(v623[0]) = 69;
  v237 = v620;
  v238 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v237;
  if (v237)
    goto LABEL_165;
  v622[v621[73]] = v238;
  LOBYTE(v623[0]) = 70;
  v239 = v620;
  v240 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v239;
  if (v239)
    goto LABEL_165;
  v242 = &v622[v621[74]];
  *(_QWORD *)v242 = v240;
  v242[8] = v241 & 1;
  LOBYTE(v623[0]) = 71;
  v243 = v620;
  v244 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v243;
  if (v243)
    goto LABEL_165;
  v246 = &v622[v621[75]];
  *(_QWORD *)v246 = v244;
  v246[8] = v245 & 1;
  LOBYTE(v623[0]) = 72;
  v247 = v620;
  v248 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v247;
  if (v247)
    goto LABEL_165;
  v250 = &v622[v621[76]];
  *(_QWORD *)v250 = v248;
  v250[8] = v249 & 1;
  LOBYTE(v623[0]) = 73;
  v251 = v620;
  v252 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v251;
  if (v251)
    goto LABEL_165;
  v254 = &v622[v621[77]];
  *(_QWORD *)v254 = v252;
  v254[8] = v253 & 1;
  LOBYTE(v623[0]) = 74;
  v255 = v620;
  v256 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v255;
  if (v255)
    goto LABEL_165;
  v258 = &v622[v621[78]];
  *(_QWORD *)v258 = v256;
  v258[8] = v257 & 1;
  LOBYTE(v623[0]) = 75;
  v259 = v620;
  v260 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v259;
  if (v259)
    goto LABEL_165;
  v262 = &v622[v621[79]];
  *(_QWORD *)v262 = v260;
  v262[8] = v261 & 1;
  LOBYTE(v623[0]) = 76;
  v263 = v620;
  v264 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v263;
  if (v263)
    goto LABEL_165;
  v266 = &v622[v621[80]];
  *(_QWORD *)v266 = v264;
  v266[8] = v265 & 1;
  LOBYTE(v623[0]) = 77;
  v267 = v620;
  v268 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v267;
  if (v267)
    goto LABEL_165;
  v26 = 0;
  v25 = 8196;
  v270 = (uint64_t *)&v622[v621[81]];
  *v270 = v268;
  v270[1] = v269;
  LOBYTE(v623[0]) = 78;
  v271 = v620;
  v272 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v271;
  if (v271)
    goto LABEL_165;
  v622[v621[82]] = v272;
  LOBYTE(v623[0]) = 79;
  v273 = v620;
  v274 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v273;
  if (v273)
    goto LABEL_165;
  v276 = &v622[v621[83]];
  *(_QWORD *)v276 = v274;
  v276[8] = v275 & 1;
  LOBYTE(v623[0]) = 80;
  v277 = v620;
  v278 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v277;
  if (v277)
    goto LABEL_165;
  v280 = &v622[v621[84]];
  *(_QWORD *)v280 = v278;
  v280[8] = v279 & 1;
  LOBYTE(v623[0]) = 81;
  v281 = v620;
  v282 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v281;
  if (v281)
    goto LABEL_165;
  v284 = &v622[v621[85]];
  *(_QWORD *)v284 = v282;
  v284[8] = v283 & 1;
  LOBYTE(v623[0]) = 82;
  v285 = v620;
  v286 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v285;
  if (v285)
    goto LABEL_165;
  v26 = 0;
  v25 = 270340;
  v288 = (uint64_t *)&v622[v621[86]];
  *v288 = v286;
  v288[1] = v287;
  LOBYTE(v623[0]) = 83;
  v289 = v620;
  v290 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v289;
  if (v289)
    goto LABEL_165;
  v292 = &v622[v621[87]];
  *(_QWORD *)v292 = v290;
  v292[8] = v291 & 1;
  LOBYTE(v623[0]) = 84;
  v293 = v620;
  v294 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v293;
  if (v293)
    goto LABEL_165;
  v26 = 0;
  v25 = 1318916;
  v296 = (uint64_t *)&v622[v621[88]];
  *v296 = v294;
  v296[1] = v295;
  LOBYTE(v623[0]) = 85;
  v297 = v620;
  v298 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v297;
  if (v297)
    goto LABEL_165;
  v300 = &v622[v621[89]];
  *(_QWORD *)v300 = v298;
  v300[8] = v299 & 1;
  LOBYTE(v623[0]) = 86;
  v301 = v620;
  v302 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v301;
  if (v301)
    goto LABEL_165;
  v26 = 0;
  v25 = 5513220;
  v304 = (uint64_t *)&v622[v621[90]];
  *v304 = v302;
  v304[1] = v303;
  LOBYTE(v623[0]) = 87;
  v305 = v620;
  v306 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v305;
  if (v305)
    goto LABEL_165;
  v308 = &v622[v621[91]];
  *(_QWORD *)v308 = v306;
  v308[8] = v307 & 1;
  LOBYTE(v623[0]) = 88;
  v309 = v620;
  v310 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v309;
  if (v309)
    goto LABEL_165;
  v622[v621[92]] = v310;
  LOBYTE(v623[0]) = 89;
  v311 = v620;
  v312 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v311;
  if (v311)
    goto LABEL_165;
  v622[v621[93]] = v312;
  LOBYTE(v623[0]) = 90;
  v313 = v620;
  v314 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v313;
  if (v313)
    goto LABEL_165;
  v622[v621[94]] = v314;
  LOBYTE(v623[0]) = 91;
  v315 = v620;
  v316 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v315;
  if (v315)
    goto LABEL_165;
  v622[v621[95]] = v316;
  LOBYTE(v623[0]) = 92;
  v317 = v620;
  v318 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v317;
  if (v317)
    goto LABEL_165;
  v320 = &v622[v621[96]];
  *(_QWORD *)v320 = v318;
  v320[8] = v319 & 1;
  LOBYTE(v623[0]) = 93;
  v321 = v620;
  v322 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v321;
  if (v321)
    goto LABEL_165;
  v324 = &v622[v621[97]];
  *(_QWORD *)v324 = v322;
  v324[8] = v323 & 1;
  LOBYTE(v623[0]) = 94;
  v325 = v620;
  v326 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v325;
  if (v325)
    goto LABEL_165;
  v328 = &v622[v621[98]];
  *(_QWORD *)v328 = v326;
  v328[8] = v327 & 1;
  LOBYTE(v623[0]) = 95;
  v329 = v620;
  v330 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v329;
  if (v329)
    goto LABEL_165;
  v332 = &v622[v621[99]];
  *(_QWORD *)v332 = v330;
  v332[8] = v331 & 1;
  LOBYTE(v623[0]) = 96;
  v333 = v620;
  v334 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v333;
  if (v333)
    goto LABEL_165;
  v336 = &v622[v621[100]];
  *(_QWORD *)v336 = v334;
  v336[8] = v335 & 1;
  LOBYTE(v623[0]) = 97;
  v337 = v620;
  v338 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v337;
  if (v337)
    goto LABEL_165;
  v340 = &v622[v621[101]];
  *(_QWORD *)v340 = v338;
  v340[8] = v339 & 1;
  LOBYTE(v623[0]) = 98;
  v341 = v620;
  v342 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v341;
  if (v341)
    goto LABEL_165;
  v344 = &v622[v621[102]];
  *(_QWORD *)v344 = v342;
  v344[8] = v343 & 1;
  LOBYTE(v623[0]) = 99;
  v345 = v620;
  v346 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v345;
  if (v345)
    goto LABEL_165;
  v348 = &v622[v621[103]];
  *(_QWORD *)v348 = v346;
  v348[8] = v347 & 1;
  LOBYTE(v623[0]) = 100;
  v349 = v620;
  v350 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v349;
  if (v349)
    goto LABEL_165;
  v352 = &v622[v621[104]];
  *(_QWORD *)v352 = v350;
  v352[8] = v351 & 1;
  LOBYTE(v623[0]) = 101;
  v353 = v620;
  v354 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v353;
  if (v353)
    goto LABEL_165;
  v356 = &v622[v621[105]];
  *(_QWORD *)v356 = v354;
  v356[8] = v355 & 1;
  LOBYTE(v623[0]) = 102;
  v357 = v620;
  v358 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v357;
  if (v357)
    goto LABEL_165;
  v360 = &v622[v621[106]];
  *(_QWORD *)v360 = v358;
  v360[8] = v359 & 1;
  LOBYTE(v623[0]) = 103;
  v361 = v620;
  v362 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v361;
  if (v361)
    goto LABEL_165;
  v364 = &v622[v621[107]];
  *(_QWORD *)v364 = v362;
  v364[8] = v363 & 1;
  LOBYTE(v623[0]) = 104;
  v365 = v620;
  v366 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v365;
  if (v365)
    goto LABEL_165;
  v368 = &v622[v621[108]];
  *(_QWORD *)v368 = v366;
  v368[8] = v367 & 1;
  LOBYTE(v623[0]) = 105;
  v369 = v620;
  v370 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v369;
  if (v369)
    goto LABEL_165;
  v372 = &v622[v621[109]];
  *(_QWORD *)v372 = v370;
  v372[8] = v371 & 1;
  LOBYTE(v623[0]) = 106;
  v373 = v620;
  v374 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v373;
  if (v373)
    goto LABEL_165;
  v376 = &v622[v621[110]];
  *(_QWORD *)v376 = v374;
  v376[8] = v375 & 1;
  LOBYTE(v623[0]) = 107;
  v377 = v620;
  v378 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v377;
  if (v377)
    goto LABEL_165;
  v380 = &v622[v621[111]];
  *(_QWORD *)v380 = v378;
  v380[8] = v379 & 1;
  LOBYTE(v623[0]) = 108;
  v381 = v620;
  v382 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v381;
  if (v381)
    goto LABEL_165;
  v384 = &v622[v621[112]];
  *(_QWORD *)v384 = v382;
  v384[8] = v383 & 1;
  LOBYTE(v623[0]) = 109;
  v385 = v620;
  v386 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v385;
  if (v385)
    goto LABEL_165;
  v388 = &v622[v621[113]];
  *(_QWORD *)v388 = v386;
  v388[8] = v387 & 1;
  LOBYTE(v623[0]) = 110;
  v389 = v620;
  v390 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v389;
  if (v389)
    goto LABEL_165;
  v392 = &v622[v621[114]];
  *(_QWORD *)v392 = v390;
  v392[8] = v391 & 1;
  LOBYTE(v623[0]) = 111;
  v393 = v620;
  v394 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v393;
  if (v393)
    goto LABEL_165;
  v396 = &v622[v621[115]];
  *(_QWORD *)v396 = v394;
  v396[8] = v395 & 1;
  LOBYTE(v623[0]) = 112;
  v397 = v620;
  v398 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v397;
  if (v397)
    goto LABEL_165;
  v400 = &v622[v621[116]];
  *(_QWORD *)v400 = v398;
  v400[8] = v399 & 1;
  LOBYTE(v623[0]) = 113;
  v401 = v620;
  v402 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v401;
  if (v401)
    goto LABEL_165;
  v404 = &v622[v621[117]];
  *(_QWORD *)v404 = v402;
  v404[8] = v403 & 1;
  LOBYTE(v623[0]) = 114;
  v405 = v620;
  v406 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v405;
  if (v405)
    goto LABEL_165;
  v622[v621[118]] = v406;
  LOBYTE(v623[0]) = 115;
  v407 = v620;
  v408 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v407;
  if (v407)
    goto LABEL_165;
  v410 = &v622[v621[119]];
  *(_QWORD *)v410 = v408;
  v410[8] = v409 & 1;
  LOBYTE(v623[0]) = 116;
  v411 = v620;
  v412 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v411;
  if (v411)
    goto LABEL_165;
  v414 = &v622[v621[120]];
  *(_QWORD *)v414 = v412;
  v414[8] = v413 & 1;
  LOBYTE(v623[0]) = 117;
  v415 = v620;
  v416 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v415;
  if (v415)
    goto LABEL_165;
  v418 = &v622[v621[121]];
  *(_QWORD *)v418 = v416;
  v418[8] = v417 & 1;
  LOBYTE(v623[0]) = 118;
  v419 = v620;
  v420 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v419;
  if (v419)
    goto LABEL_165;
  v622[v621[122]] = v420;
  LOBYTE(v623[0]) = 119;
  v421 = v620;
  v422 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v421;
  if (v421)
    goto LABEL_165;
  v622[v621[123]] = v422;
  LOBYTE(v623[0]) = 120;
  v423 = v620;
  v424 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v423;
  if (v423)
    goto LABEL_165;
  v622[v621[124]] = v424;
  LOBYTE(v623[0]) = 121;
  v425 = v620;
  v426 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v425;
  if (v425)
    goto LABEL_165;
  v428 = &v622[v621[125]];
  *(_QWORD *)v428 = v426;
  v428[8] = v427 & 1;
  LOBYTE(v623[0]) = 122;
  v429 = v620;
  v430 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v429;
  if (v429)
    goto LABEL_165;
  v432 = &v622[v621[126]];
  *(_QWORD *)v432 = v430;
  v432[8] = v431 & 1;
  LOBYTE(v623[0]) = 123;
  v433 = v620;
  v434 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v433;
  if (v433)
    goto LABEL_165;
  v436 = &v622[v621[127]];
  *(_QWORD *)v436 = v434;
  v436[8] = v435 & 1;
  LOBYTE(v623[0]) = 124;
  v437 = v620;
  v438 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v437;
  if (v437)
    goto LABEL_165;
  v440 = &v622[v621[128]];
  *(_QWORD *)v440 = v438;
  v440[8] = v439 & 1;
  LOBYTE(v623[0]) = 125;
  v441 = v620;
  v442 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v441;
  if (v441)
    goto LABEL_165;
  v444 = &v622[v621[129]];
  *(_QWORD *)v444 = v442;
  v444[8] = v443 & 1;
  LOBYTE(v623[0]) = 126;
  v445 = v620;
  v446 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v445;
  if (v445)
    goto LABEL_165;
  v448 = &v622[v621[130]];
  *(_QWORD *)v448 = v446;
  v448[8] = v447 & 1;
  LOBYTE(v623[0]) = 127;
  v449 = v620;
  v450 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v449;
  if (v449)
    goto LABEL_165;
  v452 = &v622[v621[131]];
  *(_QWORD *)v452 = v450;
  v452[8] = v451 & 1;
  LOBYTE(v623[0]) = 0x80;
  v453 = v620;
  v454 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v453;
  if (v453)
    goto LABEL_165;
  v456 = &v622[v621[132]];
  *(_QWORD *)v456 = v454;
  v456[8] = v455 & 1;
  LOBYTE(v623[0]) = -127;
  v457 = v620;
  v458 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v457;
  if (v457)
    goto LABEL_165;
  v622[v621[133]] = v458;
  LOBYTE(v623[0]) = -126;
  v459 = v620;
  v460 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v459;
  if (v459)
    goto LABEL_165;
  v462 = &v622[v621[134]];
  *(_QWORD *)v462 = v460;
  v462[8] = v461 & 1;
  v463 = sub_10001A9A8(&qword_1010ED5A0);
  v624 = -125;
  v464 = sub_1006CE5BC(&qword_1010F3BA0, &qword_1010ED5A0, (uint64_t)&protocol witness table for Int, (const char *)&protocol conformance descriptor for <A> [A]);
  v465 = v620;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v463, &v624, v618, v463, v464);
  v620 = v465;
  if (v465)
    goto LABEL_165;
  v26 = 8;
  v25 = 5513220;
  *(_QWORD *)&v622[v621[135]] = *(_QWORD *)&v623[0];
  LOBYTE(v623[0]) = -124;
  v466 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = 0;
  v467 = &v622[v621[136]];
  *(_QWORD *)v467 = v466;
  v467[8] = v468 & 1;
  LOBYTE(v623[0]) = -123;
  v469 = v620;
  v470 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v469;
  if (v469
    || (v622[v621[137]] = v470,
        v471 = sub_10001A9A8(&qword_1010ED590),
        v624 = -122,
        v472 = sub_1006CE618((unint64_t *)&qword_101104678, (uint64_t)&protocol witness table for String, (uint64_t)&protocol witness table for Double, (const char *)&protocol conformance descriptor for <> [A : B]), v473 = v620, KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v471, &v624, v618, v471, v472), (v620 = v473) != 0))
  {
LABEL_165:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
    v23 = 0;
    goto LABEL_5;
  }
  v26 = 72;
  v25 = 5513220;
  *(_QWORD *)&v622[v621[138]] = *(_QWORD *)&v623[0];
  LOBYTE(v623[0]) = -121;
  v474 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = 0;
  v622[v621[139]] = v474;
  LOBYTE(v623[0]) = -120;
  v475 = v620;
  v476 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v475;
  if (v475)
    goto LABEL_199;
  v478 = &v622[v621[140]];
  *(_QWORD *)v478 = v476;
  v478[8] = v477 & 1;
  LOBYTE(v623[0]) = -119;
  v479 = v620;
  v480 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v479;
  if (v479)
    goto LABEL_199;
  v482 = &v622[v621[141]];
  *(_QWORD *)v482 = v480;
  v482[8] = v481 & 1;
  LOBYTE(v623[0]) = -118;
  v483 = v620;
  v484 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v483;
  if (v483)
    goto LABEL_199;
  v622[v621[142]] = v484;
  LOBYTE(v623[0]) = -117;
  v485 = v620;
  v486 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v485;
  if (v485)
    goto LABEL_199;
  v622[v621[143]] = v486;
  LOBYTE(v623[0]) = -116;
  v487 = v620;
  v488 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v487;
  if (v487)
    goto LABEL_199;
  v490 = &v622[v621[144]];
  *(_QWORD *)v490 = v488;
  v490[8] = v489 & 1;
  LOBYTE(v623[0]) = -115;
  v491 = v620;
  v492 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v491;
  if (v491)
    goto LABEL_199;
  v494 = &v622[v621[145]];
  *(_QWORD *)v494 = v492;
  v494[8] = v493 & 1;
  LOBYTE(v623[0]) = -114;
  v495 = v620;
  v496 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v495;
  if (v495)
    goto LABEL_199;
  v498 = &v622[v621[146]];
  *(_QWORD *)v498 = v496;
  v498[8] = v497 & 1;
  LOBYTE(v623[0]) = -113;
  v499 = v620;
  v500 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v499;
  if (v499)
    goto LABEL_199;
  v502 = &v622[v621[147]];
  *(_QWORD *)v502 = v500;
  v502[8] = v501 & 1;
  LOBYTE(v623[0]) = -112;
  v503 = v620;
  v504 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v503;
  if (v503)
    goto LABEL_199;
  v506 = &v622[v621[148]];
  *(_QWORD *)v506 = v504;
  v506[8] = v505 & 1;
  LOBYTE(v623[0]) = -111;
  v507 = v620;
  v508 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v507;
  if (v507)
    goto LABEL_199;
  v510 = &v622[v621[149]];
  *(_QWORD *)v510 = v508;
  v510[8] = v509 & 1;
  LOBYTE(v623[0]) = -110;
  v511 = v620;
  v512 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v511;
  if (v511)
    goto LABEL_199;
  v514 = &v622[v621[150]];
  *(_QWORD *)v514 = v512;
  v514[8] = v513 & 1;
  LOBYTE(v623[0]) = -109;
  v515 = v620;
  v516 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v515;
  if (v515)
    goto LABEL_199;
  v518 = &v622[v621[151]];
  *(_QWORD *)v518 = v516;
  v518[8] = v517 & 1;
  LOBYTE(v623[0]) = -108;
  v519 = v620;
  v520 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v519;
  if (v519)
    goto LABEL_199;
  v522 = &v622[v621[152]];
  *(_QWORD *)v522 = v520;
  v522[8] = v521 & 1;
  LOBYTE(v623[0]) = -107;
  v523 = v620;
  v524 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v523;
  if (v523)
    goto LABEL_199;
  v526 = &v622[v621[153]];
  *(_QWORD *)v526 = v524;
  v526[8] = v525 & 1;
  LOBYTE(v623[0]) = -106;
  v527 = v620;
  v528 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v527;
  if (v527)
    goto LABEL_199;
  v530 = &v622[v621[154]];
  *(_QWORD *)v530 = v528;
  v530[8] = v529 & 1;
  LOBYTE(v623[0]) = -105;
  v531 = v620;
  v532 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v531;
  if (v531)
    goto LABEL_199;
  v534 = &v622[v621[155]];
  *(_QWORD *)v534 = v532;
  v534[8] = v533 & 1;
  LOBYTE(v623[0]) = -104;
  v535 = v620;
  v536 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v535;
  if (v535)
    goto LABEL_199;
  v538 = &v622[v621[156]];
  *(_QWORD *)v538 = v536;
  v538[8] = v537 & 1;
  LOBYTE(v623[0]) = -103;
  v539 = v620;
  v540 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v539;
  if (v539)
    goto LABEL_199;
  v542 = &v622[v621[157]];
  *(_QWORD *)v542 = v540;
  v542[8] = v541 & 1;
  LOBYTE(v623[0]) = -102;
  v543 = v620;
  v544 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v543;
  if (v543)
    goto LABEL_199;
  v546 = &v622[v621[158]];
  *(_QWORD *)v546 = v544;
  v546[8] = v545 & 1;
  LOBYTE(v623[0]) = -101;
  v547 = v620;
  v548 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v547;
  if (v547)
    goto LABEL_199;
  v550 = &v622[v621[159]];
  *(_QWORD *)v550 = v548;
  v550[8] = v549 & 1;
  LOBYTE(v623[0]) = -100;
  v551 = v620;
  v552 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v551;
  if (v551)
    goto LABEL_199;
  v554 = &v622[v621[160]];
  *(_QWORD *)v554 = v552;
  v554[8] = v553 & 1;
  LOBYTE(v623[0]) = -99;
  v555 = v620;
  v556 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v555;
  if (v555)
    goto LABEL_199;
  v622[v621[161]] = v556;
  LOBYTE(v623[0]) = -98;
  v557 = v620;
  v558 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v557;
  if (v557)
    goto LABEL_199;
  v622[v621[162]] = v558;
  LOBYTE(v623[0]) = -97;
  v559 = v620;
  v560 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v559;
  if (v559)
    goto LABEL_199;
  v562 = &v622[v621[163]];
  *(_QWORD *)v562 = v560;
  v562[8] = v561 & 1;
  LOBYTE(v623[0]) = -96;
  v563 = v620;
  v564 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v563;
  if (v563)
    goto LABEL_199;
  v566 = &v622[v621[164]];
  *(_QWORD *)v566 = v564;
  v566[8] = v565 & 1;
  LOBYTE(v623[0]) = -95;
  v567 = v620;
  v568 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v567;
  if (v567)
    goto LABEL_199;
  v622[v621[165]] = v568;
  LOBYTE(v623[0]) = -94;
  v569 = v620;
  v570 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v569;
  if (v569)
    goto LABEL_199;
  v571 = &v622[v621[166]];
  *(_DWORD *)v571 = v570;
  v571[4] = BYTE4(v570) & 1;
  LOBYTE(v623[0]) = -93;
  v572 = v620;
  v573 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v572;
  if (v572)
    goto LABEL_199;
  v575 = &v622[v621[167]];
  *(_QWORD *)v575 = v573;
  v575[8] = v574 & 1;
  LOBYTE(v623[0]) = -92;
  v576 = v620;
  v577 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v576;
  if (v576)
    goto LABEL_199;
  v579 = &v622[v621[168]];
  *(_QWORD *)v579 = v577;
  v579[8] = v578 & 1;
  LOBYTE(v623[0]) = -91;
  v580 = v620;
  v581 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v580;
  if (v580)
    goto LABEL_199;
  v583 = &v622[v621[169]];
  *(_QWORD *)v583 = v581;
  v583[8] = v582 & 1;
  LOBYTE(v623[0]) = -90;
  v584 = v620;
  v585 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v584;
  if (v584)
    goto LABEL_199;
  v587 = &v622[v621[170]];
  *(_QWORD *)v587 = v585;
  v587[8] = v586 & 1;
  LOBYTE(v623[0]) = -89;
  v588 = v620;
  v589 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v588;
  if (v588
    || (v591 = &v622[v621[171]],
        *(_QWORD *)v591 = v589,
        v591[8] = v590 & 1,
        LOBYTE(v623[0]) = -88,
        v592 = v620,
        v593 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618),
        (v620 = v592) != 0))
  {
LABEL_199:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
    v23 = 1;
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v619);
    v13 = (v25 >> 13) & 1;
    v27 = (v25 >> 18) & 1;
    v28 = (v25 >> 20) & 1;
    v29 = (v25 >> 22) & 1;
    v30 = (v26 >> 3) & 1;
    if ((v24 & 1) != 0)
    {
      sub_10001EF3C(*(_QWORD *)v622, *((_QWORD *)v622 + 1));
      if ((v24 & 0x40) == 0)
      {
LABEL_7:
        if ((v24 & 0x100) == 0)
          goto LABEL_8;
        goto LABEL_19;
      }
    }
    else if ((v24 & 0x40) == 0)
    {
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    if ((v24 & 0x100) == 0)
    {
LABEL_8:
      if ((v24 & 0x4000000) == 0)
        goto LABEL_9;
      goto LABEL_20;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    if ((v24 & 0x4000000) == 0)
    {
LABEL_9:
      if ((v24 & 0x200000000000) == 0)
        goto LABEL_10;
      goto LABEL_21;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    if ((v24 & 0x200000000000) == 0)
    {
LABEL_10:
      if ((v24 & 0x1000000000000) == 0)
        goto LABEL_11;
      goto LABEL_22;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    if ((v24 & 0x1000000000000) == 0)
    {
LABEL_11:
      if ((v24 & 0x2000000000000) == 0)
        goto LABEL_12;
      goto LABEL_23;
    }
LABEL_22:

    if ((v24 & 0x2000000000000) == 0)
    {
LABEL_12:
      if ((v24 & 0x100000000000000) == 0)
        goto LABEL_13;
      goto LABEL_24;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    if ((v24 & 0x100000000000000) == 0)
    {
LABEL_13:
      if ((v24 & 0x200000000000000) == 0)
        goto LABEL_14;
      goto LABEL_25;
    }
LABEL_24:
    sub_100004048((uint64_t)&v622[v621[60]], &qword_1010ED860);
    if ((v24 & 0x200000000000000) == 0)
    {
LABEL_14:
      if ((v24 & 0x800000000000000) == 0)
        goto LABEL_15;
      goto LABEL_26;
    }
LABEL_25:
    sub_100004048((uint64_t)&v622[v621[61]], (uint64_t *)&unk_1010EA690);
    if ((v24 & 0x800000000000000) == 0)
    {
LABEL_15:
      if ((v25 & 4) != 0)
        goto LABEL_205;
LABEL_27:
      if ((v25 & 0x2000) == 0)
        goto LABEL_206;
LABEL_28:
      swift_bridgeObjectRelease();
      if ((v27 & 1) != 0)
        goto LABEL_207;
LABEL_29:
      if (!(_DWORD)v28)
        goto LABEL_208;
LABEL_30:
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
        goto LABEL_209;
LABEL_31:
      if (!(_DWORD)v30)
        goto LABEL_210;
      goto LABEL_32;
    }
LABEL_26:
    sub_100004048((uint64_t)&v622[v621[63]], (uint64_t *)&unk_1010EA690);
    if ((v25 & 4) != 0)
      goto LABEL_205;
    goto LABEL_27;
  }
  v595 = &v622[v621[172]];
  *(_QWORD *)v595 = v593;
  v595[8] = v594 & 1;
  LOBYTE(v623[0]) = -87;
  v596 = v620;
  v597 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
  v620 = v596;
  if (!v596)
  {
    v599 = &v622[v621[173]];
    *(_QWORD *)v599 = v597;
    v599[8] = v598 & 1;
    LOBYTE(v623[0]) = -86;
    v600 = v620;
    v601 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
    v620 = v600;
    if (!v600)
    {
      v622[v621[174]] = v601;
      LOBYTE(v623[0]) = -85;
      v602 = v620;
      v603 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
      v620 = v602;
      if (!v602)
      {
        v605 = &v622[v621[175]];
        *(_QWORD *)v605 = v603;
        v605[8] = v604 & 1;
        LOBYTE(v623[0]) = -84;
        v606 = v620;
        v607 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v623, v618);
        v620 = v606;
        if (!v606)
        {
          v611 = v607;
          v612 = v608;
          (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
          v613 = (uint64_t)v622;
          v614 = &v622[v621[176]];
          *(_QWORD *)v614 = v611;
          v614[8] = v612 & 1;
          sub_100018E88(v613, v616);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v619);
          sub_100018F44(v613);
          return;
        }
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v13 + 8))(v617, v618);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v619);
  v609 = (id *)v622;
  sub_10001EF3C(*(_QWORD *)v622, *((_QWORD *)v622 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v29 = (uint64_t)v621;
  sub_100004048((uint64_t)v609 + v621[60], &qword_1010ED860);
  sub_100004048((uint64_t)v609 + *(int *)(v29 + 244), (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v609 + *(int *)(v29 + 252), (uint64_t *)&unk_1010EA690);
  LOBYTE(v13) = 1;
  LODWORD(v27) = 1;
  LODWORD(v28) = 1;
  LODWORD(v29) = 1;
  LODWORD(v30) = 1;
  v23 = 1;
LABEL_205:
  v610 = (uint64_t *)&v622[v621[70]];
  sub_1006C9720(*v610, v610[1], v610[2], v610[3], v610[4], v610[5], v610[6], v610[7], v610[8], v610[9], v610[10], v610[11], v610[12], v610[13]);
  if ((v13 & 1) != 0)
    goto LABEL_28;
LABEL_206:
  if (!(_DWORD)v27)
    goto LABEL_29;
LABEL_207:
  swift_bridgeObjectRelease();
  if ((v28 & 1) != 0)
    goto LABEL_30;
LABEL_208:
  if (!(_DWORD)v29)
    goto LABEL_31;
LABEL_209:
  swift_bridgeObjectRelease();
  if ((v30 & 1) == 0)
  {
LABEL_210:
    if (!v23)
      return;
    goto LABEL_211;
  }
LABEL_32:
  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
    return;
LABEL_211:
  swift_bridgeObjectRelease();
}

uint64_t sub_1006C490C()
{
  unsigned __int8 *v0;

  return sub_1006BED20(*v0);
}

uint64_t sub_1006C4914@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006CE8B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1006C4938(_BYTE *a1@<X8>)
{
  *a1 = -83;
}

uint64_t sub_1006C4944(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006CE1A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006C496C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006CE1A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006C4994()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1006C49A0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1006C49AC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t sub_1006C49B8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 57);
}

uint64_t sub_1006C49C0()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_1006C49C8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

uint64_t sub_1006C49D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t sub_1006C49FC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t sub_1006C4A04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t sub_1006C4A10()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 106);
}

uint64_t sub_1006C4A18()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t sub_1006C4A24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t sub_1006C4A30()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t sub_1006C4A3C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t sub_1006C4A48()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t sub_1006C4A54()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t sub_1006C4A60()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 208);
}

uint64_t sub_1006C4A6C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 224);
}

uint64_t sub_1006C4A78()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t sub_1006C4A84()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 256);
}

uint64_t sub_1006C4A94()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t sub_1006C4AA4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 288);
}

uint64_t sub_1006C4AB4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 304);
}

uint64_t sub_1006C4AC4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 313);
}

uint64_t sub_1006C4ACC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 320));
}

uint64_t sub_1006C4AD4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 328);
}

uint64_t sub_1006C4AE4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 344);
}

uint64_t sub_1006C4AF4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 360);
}

uint64_t sub_1006C4B04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 376);
}

uint64_t sub_1006C4B14()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 392);
}

uint64_t sub_1006C4B24()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 408);
}

uint64_t sub_1006C4B34()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 424);
}

uint64_t sub_1006C4B44()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 440);
}

uint64_t sub_1006C4B54()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 456);
}

uint64_t sub_1006C4B64()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 472);
}

uint64_t sub_1006C4B74()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 481);
}

uint64_t sub_1006C4B7C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 488);
}

uint64_t sub_1006C4B8C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 504);
}

uint64_t sub_1006C4B9C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 520);
}

uint64_t sub_1006C4BAC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 536);
}

uint64_t sub_1006C4BBC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 552);
}

uint64_t sub_1006C4BCC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 568);
}

uint64_t sub_1006C4BDC()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 584);
}

uint64_t sub_1006C4BEC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 600));
}

uint64_t sub_1006C4BF4()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 608);
}

uint64_t sub_1006C4C04()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 624);
}

void *sub_1006C4C14()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 640);
  v2 = v1;
  return v1;
}

uint64_t sub_1006C4C38()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 648));
}

uint64_t sub_1006C4C40()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 656);
}

uint64_t sub_1006C4C50()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 672);
}

uint64_t sub_1006C4C60()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 688);
}

uint64_t sub_1006C4C70()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 704);
}

uint64_t sub_1006C4C80()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 720);
}

uint64_t sub_1006C4C90()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 729);
}

uint64_t sub_1006C4C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 240), a2, &qword_1010ED860);
}

uint64_t sub_1006C4CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 244), a2, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_1006C4CE8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 248));
}

uint64_t sub_1006C4CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 252), a2, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_1006C4D24(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 256));
}

uint64_t sub_1006C4D38(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 260));
}

uint64_t sub_1006C4D4C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 264));
}

uint64_t sub_1006C4D60(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 268));
}

uint64_t sub_1006C4D74(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 272));
}

uint64_t sub_1006C4D88(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 276));
}

uint64_t sub_1006C4D9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 280), a2, &qword_1011041E0);
}

uint64_t sub_1006C4DC4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 284));
}

uint64_t sub_1006C4DD0(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 288));
}

uint64_t sub_1006C4DDC(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 292));
}

uint64_t sub_1006C4DE8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 296));
}

uint64_t sub_1006C4DFC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 300));
}

uint64_t sub_1006C4E10(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 304));
}

uint64_t sub_1006C4E24(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 308));
}

uint64_t sub_1006C4E38(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 316));
}

uint64_t sub_1006C4E4C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 320));
}

uint64_t sub_1006C4E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 324));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1006C4E94(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 328));
}

uint64_t sub_1006C4EA0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 332));
}

uint64_t sub_1006C4EB4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 336));
}

uint64_t sub_1006C4EC8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 340));
}

uint64_t sub_1006C4EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 344));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1006C4F10(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 348));
}

uint64_t sub_1006C4F24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 352));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1006C4F58(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 356));
}

uint64_t sub_1006C4F6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 360));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1006C4FA0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 364));
}

uint64_t sub_1006C4FB4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 368));
}

uint64_t sub_1006C4FC0(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 372));
}

uint64_t sub_1006C4FCC(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 376));
}

uint64_t sub_1006C4FD8(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 380));
}

uint64_t sub_1006C4FE4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 384));
}

uint64_t sub_1006C4FF8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 388));
}

uint64_t sub_1006C500C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 392));
}

uint64_t sub_1006C5020(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 396));
}

uint64_t sub_1006C5034(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 400));
}

uint64_t sub_1006C5048(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 404));
}

uint64_t sub_1006C505C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 408));
}

uint64_t sub_1006C5070(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 412));
}

uint64_t sub_1006C5084(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 416));
}

uint64_t sub_1006C5098(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 420));
}

uint64_t sub_1006C50AC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 424));
}

uint64_t sub_1006C50C0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 428));
}

uint64_t sub_1006C50D4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 432));
}

uint64_t sub_1006C50E8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 436));
}

uint64_t sub_1006C50FC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 440));
}

uint64_t sub_1006C5110(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 444));
}

uint64_t sub_1006C5124(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 448));
}

uint64_t sub_1006C5138(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 452));
}

uint64_t sub_1006C514C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 456));
}

uint64_t sub_1006C5160(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 460));
}

uint64_t sub_1006C5174(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 464));
}

uint64_t sub_1006C5188(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 468));
}

uint64_t sub_1006C519C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 472));
}

uint64_t sub_1006C51A8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 476));
}

uint64_t sub_1006C51BC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 480));
}

uint64_t sub_1006C51D0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 484));
}

uint64_t sub_1006C51E4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 488));
}

uint64_t sub_1006C51F0(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 492));
}

uint64_t sub_1006C51FC(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 496));
}

uint64_t sub_1006C5208(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 500));
}

uint64_t sub_1006C521C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 504));
}

uint64_t sub_1006C5230(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 508));
}

uint64_t sub_1006C5244(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 512));
}

uint64_t sub_1006C5258(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 516));
}

uint64_t sub_1006C526C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 520));
}

uint64_t sub_1006C5280(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 524));
}

uint64_t sub_1006C5294(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 528));
}

uint64_t sub_1006C52A8(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 532));
}

uint64_t sub_1006C52B4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 536));
}

uint64_t sub_1006C52C8(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 540)));
}

uint64_t sub_1006C52D4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 544));
}

uint64_t sub_1006C52E8(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 548));
}

uint64_t sub_1006C52F4(uint64_t a1)
{
  uint64_t v1;

  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + *(int *)(a1 + 552)));
}

uint64_t sub_1006C5300(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 556));
}

uint64_t sub_1006C530C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 564));
}

uint64_t sub_1006C5320(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 568));
}

uint64_t sub_1006C532C(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 572));
}

uint64_t sub_1006C5338(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 580));
}

uint64_t sub_1006C534C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 584));
}

uint64_t sub_1006C5360(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 588));
}

uint64_t sub_1006C5374(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 592));
}

uint64_t sub_1006C5388(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 596));
}

uint64_t sub_1006C539C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 600));
}

uint64_t sub_1006C53B0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 604));
}

uint64_t sub_1006C53C4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 608));
}

uint64_t sub_1006C53D8(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 612));
}

uint64_t sub_1006C53EC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 616));
}

uint64_t sub_1006C5400(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 620));
}

uint64_t sub_1006C5414(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 624));
}

uint64_t sub_1006C5428(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 628));
}

uint64_t sub_1006C543C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 632));
}

uint64_t sub_1006C5450(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 636));
}

uint64_t sub_1006C5464(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 640));
}

uint64_t sub_1006C5478(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 644));
}

uint64_t sub_1006C5484(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 648));
}

uint64_t sub_1006C5490(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 652));
}

uint64_t sub_1006C54A4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 656));
}

uint64_t sub_1006C54B8(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 660));
}

unint64_t sub_1006C54C4(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned int *)(v1 + *(int *)(a1 + 664)) | ((unint64_t)*(unsigned __int8 *)(v1 + *(int *)(a1 + 664) + 4) << 32);
}

uint64_t sub_1006C54EC(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 668));
}

uint64_t sub_1006C5500(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 672));
}

uint64_t sub_1006C5514(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 676));
}

uint64_t sub_1006C5528(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 680));
}

uint64_t sub_1006C553C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 684));
}

uint64_t sub_1006C5550(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 688));
}

uint64_t sub_1006C5564(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 692));
}

uint64_t sub_1006C5578(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 696));
}

uint64_t sub_1006C5584(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 700));
}

uint64_t sub_1006C5598(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 704));
}

void sub_1006C55AC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1006C1DF4(a1, a2);
}

uint64_t sub_1006C55C0(_QWORD *a1)
{
  return sub_1006BF8C0(a1);
}

uint64_t sub_1006C55D8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = sub_1006B84A4((uint64_t)&off_101047C28);
  v1 = Dictionary<>.dataRepresentation.getter(v0, &type metadata for String, &type metadata for Bool, &protocol witness table for String, &protocol witness table for String, &protocol witness table for String, &protocol witness table for Bool, &protocol witness table for Bool);
  v3 = v2;
  result = swift_bridgeObjectRelease(v0);
  qword_1011B7470 = v1;
  *(_QWORD *)algn_1011B7478 = v3;
  return result;
}

void sub_1006C5660()
{
  qword_1011B7480 = (uint64_t)&off_101047C60;
}

unint64_t sub_1006C5674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t result;
  unint64_t v22;
  uint64_t v23;

  v0 = sub_10001A9A8(&qword_1011040F0);
  v1 = sub_10001A9A8(&qword_1011040F8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(unsigned __int8 *)(v2 + 80);
  v5 = (v4 + 32) & ~v4;
  v23 = swift_allocObject(v0, v5 + v3, v4 | 7);
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v6 = v23 + v5 + *(int *)(v1 + 48);
  *(_BYTE *)(v23 + v5) = 1;
  v22 = sub_1006B85B4((uint64_t)&off_101047CC0);
  v7 = sub_10001A9A8(&qword_101104100);
  v8 = *(_QWORD *)(sub_10001A9A8(&qword_101104108) - 8);
  v9 = *(_QWORD *)(v8 + 72);
  v10 = *(unsigned __int8 *)(v8 + 80);
  v11 = (v10 + 32) & ~v10;
  v12 = swift_allocObject(v7, v11 + 5 * v9, v10 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E27910;
  v13 = (_QWORD *)(v12 + v11);
  *v13 = 0x656E6F685069;
  v13[1] = 0xE600000000000000;
  SystemVersionNumber.init(stringLiteral:)(809580849, 0xE400000000000000);
  v14 = (_QWORD *)(v12 + v11 + v9);
  *v14 = 1684099177;
  v14[1] = 0xE400000000000000;
  SystemVersionNumber.init(stringLiteral:)(809580849, 0xE400000000000000);
  v15 = (_QWORD *)(v12 + v11 + 2 * v9);
  *v15 = 0x506B6F6F4263614DLL;
  v15[1] = 0xEA00000000006F72;
  SystemVersionNumber.init(stringLiteral:)(809578802, 0xE400000000000000);
  v16 = (_QWORD *)(v12 + v11 + 3 * v9);
  *v16 = 0x416B6F6F4263614DLL;
  v16[1] = 0xEA00000000007269;
  SystemVersionNumber.init(stringLiteral:)(809578802, 0xE400000000000000);
  v17 = (_QWORD *)(v12 + v11 + 4 * v9);
  *v17 = 1685016681;
  v17[1] = 0xE400000000000000;
  SystemVersionNumber.init(stringLiteral:)(809580849, 0xE400000000000000);
  v18 = sub_1006B86C4(v12);
  *(_BYTE *)v6 = 1;
  *(_QWORD *)(v6 + 8) = v22;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = v18;
  *(_QWORD *)(v6 + 32) = 0;
  type metadata accessor for FeatureSupportMatrix(0);
  v19 = sub_100330BA4();
  v20 = sub_100330BE8();
  CustomCodableKeyDictionary.init(wrappedValue:)(0, &type metadata for FeatureSupportMatrixProductType, &type metadata for Bool, v19, v20, &protocol witness table for Bool, &protocol witness table for Bool);
  result = sub_1006B8864(v23);
  qword_1011B7488 = result;
  return result;
}

id sub_1006C5904()
{
  qword_1011B7490 = SPServiceStateEnabled;
  return SPServiceStateEnabled;
}

id sub_1006C591C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v0 = sub_10001A9A8(&qword_1011091E0);
  v1 = swift_allocObject(v0, 40, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100E22B00;
  v2 = (void *)SPDisabledReasoniCloudSignedOut;
  *(_QWORD *)(v1 + 32) = SPDisabledReasoniCloudSignedOut;
  qword_1011B7498 = v1;
  return v2;
}

double sub_1006C5968()
{
  double result;

  xmmword_1011B74A0 = xmmword_100E49700;
  xmmword_1011B74B0 = xmmword_100E49710;
  xmmword_1011B74C0 = xmmword_100E49720;
  qword_1011B74D0 = (uint64_t)&off_101047D58;
  result = 0.0;
  unk_1011B74D8 = 0u;
  unk_1011B74E8 = 0u;
  *(_OWORD *)&qword_1011B74F8 = 0u;
  qword_1011B7508 = 0;
  return result;
}

void sub_1006C59B4()
{
  qword_1011B7510 = 150;
}

void sub_1006C59C4()
{
  qword_1011B7518 = 0x4122750000000000;
}

void sub_1006C59D8()
{
  qword_1011B7520 = 0x408C200000000000;
}

void sub_1006C59EC()
{
  qword_1011B7528 = 0x40F5180000000000;
}

void sub_1006C5A00()
{
  qword_1011B7530 = 0x4143C68000000000;
}

void sub_1006C5A14()
{
  qword_1011B7538 = (uint64_t)&off_101047D88;
}

unint64_t sub_1006C5A28()
{
  unint64_t result;

  result = sub_1006B8A00((uint64_t)&off_101047DC0);
  qword_1011B7540 = result;
  return result;
}

BOOL sub_1006C5A4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _BOOL8 result;
  char v38;
  char v39;
  uint64_t *v40;
  char v41;
  uint64_t *v42;
  char v43;
  char v44;
  char v45;
  int v46;
  int v47;
  _BOOL4 v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  int v60;
  int v61;
  uint64_t *v62;
  _BOOL4 v63;
  int v64;
  int v65;
  _BOOL4 v66;
  char v67;
  uint64_t *v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _BYTE *v77;
  char v78;
  char v79;
  char v80;
  char v81;
  int v82;
  int v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  int v99;
  int v100;
  _BOOL4 v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  void *v113;
  void *v114;
  id v115;
  id v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  char v122;
  char v123;
  char v124;
  char v125;
  char v126;
  int v127;
  int v128;
  _BOOL4 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int (*v133)(uint64_t, uint64_t, uint64_t);
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  void (*v142)(uint64_t, uint64_t);
  int *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unsigned int (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  void (*v155)(uint64_t, uint64_t);
  uint64_t v156;
  _QWORD *v157;
  char v158;
  _QWORD *v159;
  int v160;
  int *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t v173;
  _QWORD *v174;
  char v175;
  _QWORD *v176;
  int v177;
  uint64_t v178;
  _QWORD *v179;
  char v180;
  _QWORD *v181;
  int v182;
  uint64_t v183;
  double *v184;
  char v185;
  double *v186;
  int v187;
  uint64_t v188;
  double *v189;
  char v190;
  double *v191;
  int v192;
  uint64_t v193;
  double *v194;
  char v195;
  double *v196;
  int v197;
  uint64_t v198;
  double *v199;
  char v200;
  double *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  int v267;
  _BOOL4 v268;
  uint64_t v269;
  int v270;
  int v271;
  _BOOL4 v272;
  uint64_t v273;
  int v274;
  int v275;
  _BOOL4 v276;
  uint64_t v277;
  double *v278;
  char v279;
  double *v280;
  int v281;
  uint64_t v282;
  double *v283;
  char v284;
  double *v285;
  int v286;
  uint64_t v287;
  double *v288;
  char v289;
  double *v290;
  int v291;
  uint64_t v292;
  double *v293;
  char v294;
  double *v295;
  int v296;
  uint64_t v297;
  double *v298;
  char v299;
  double *v300;
  int v301;
  uint64_t v302;
  double *v303;
  char v304;
  double *v305;
  int v306;
  uint64_t v307;
  double *v308;
  char v309;
  double *v310;
  int v311;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  char v317;
  uint64_t v318;
  int v319;
  int v320;
  _BOOL4 v321;
  uint64_t v322;
  _QWORD *v323;
  char v324;
  _QWORD *v325;
  int v326;
  uint64_t v327;
  double *v328;
  char v329;
  double *v330;
  int v331;
  uint64_t v332;
  _QWORD *v333;
  char v334;
  _QWORD *v335;
  int v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t v341;
  char v342;
  uint64_t v343;
  _QWORD *v344;
  char v345;
  _QWORD *v346;
  int v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  char v353;
  uint64_t v354;
  _QWORD *v355;
  char v356;
  _QWORD *v357;
  int v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  _QWORD *v362;
  uint64_t v363;
  char v364;
  uint64_t v365;
  double *v366;
  char v367;
  double *v368;
  int v369;
  uint64_t v370;
  int v371;
  int v372;
  _BOOL4 v373;
  uint64_t v374;
  int v375;
  int v376;
  _BOOL4 v377;
  uint64_t v378;
  int v379;
  int v380;
  _BOOL4 v381;
  uint64_t v382;
  int v383;
  int v384;
  _BOOL4 v385;
  uint64_t v386;
  _QWORD *v387;
  char v388;
  _QWORD *v389;
  int v390;
  uint64_t v391;
  _QWORD *v392;
  char v393;
  _QWORD *v394;
  int v395;
  uint64_t v396;
  _QWORD *v397;
  char v398;
  _QWORD *v399;
  int v400;
  uint64_t v401;
  _QWORD *v402;
  char v403;
  _QWORD *v404;
  int v405;
  uint64_t v406;
  _QWORD *v407;
  char v408;
  _QWORD *v409;
  int v410;
  uint64_t v411;
  double *v412;
  char v413;
  double *v414;
  int v415;
  uint64_t v416;
  double *v417;
  char v418;
  double *v419;
  int v420;
  uint64_t v421;
  double *v422;
  char v423;
  double *v424;
  int v425;
  uint64_t v426;
  _QWORD *v427;
  char v428;
  _QWORD *v429;
  int v430;
  uint64_t v431;
  _QWORD *v432;
  char v433;
  _QWORD *v434;
  int v435;
  uint64_t v436;
  _QWORD *v437;
  char v438;
  _QWORD *v439;
  int v440;
  uint64_t v441;
  double *v442;
  char v443;
  double *v444;
  int v445;
  uint64_t v446;
  double *v447;
  char v448;
  double *v449;
  int v450;
  uint64_t v451;
  _QWORD *v452;
  char v453;
  _QWORD *v454;
  int v455;
  uint64_t v456;
  _QWORD *v457;
  char v458;
  _QWORD *v459;
  int v460;
  uint64_t v461;
  _QWORD *v462;
  char v463;
  _QWORD *v464;
  int v465;
  uint64_t v466;
  _QWORD *v467;
  char v468;
  _QWORD *v469;
  int v470;
  uint64_t v471;
  _QWORD *v472;
  char v473;
  _QWORD *v474;
  int v475;
  uint64_t v476;
  _QWORD *v477;
  char v478;
  _QWORD *v479;
  int v480;
  uint64_t v481;
  _QWORD *v482;
  char v483;
  _QWORD *v484;
  int v485;
  uint64_t v486;
  _QWORD *v487;
  char v488;
  _QWORD *v489;
  int v490;
  uint64_t v491;
  double *v492;
  char v493;
  double *v494;
  int v495;
  uint64_t v496;
  int v497;
  int v498;
  _BOOL4 v499;
  uint64_t v500;
  double *v501;
  char v502;
  double *v503;
  int v504;
  uint64_t v505;
  double *v506;
  char v507;
  double *v508;
  int v509;
  uint64_t v510;
  _QWORD *v511;
  char v512;
  _QWORD *v513;
  int v514;
  uint64_t v515;
  int v516;
  int v517;
  _BOOL4 v518;
  uint64_t v519;
  int v520;
  int v521;
  _BOOL4 v522;
  uint64_t v523;
  int v524;
  int v525;
  _BOOL4 v526;
  uint64_t v527;
  _QWORD *v528;
  char v529;
  _QWORD *v530;
  int v531;
  uint64_t v532;
  double *v533;
  char v534;
  double *v535;
  int v536;
  uint64_t v537;
  double *v538;
  char v539;
  double *v540;
  int v541;
  uint64_t v542;
  _QWORD *v543;
  char v544;
  _QWORD *v545;
  int v546;
  uint64_t v547;
  _QWORD *v548;
  char v549;
  _QWORD *v550;
  int v551;
  uint64_t v552;
  _QWORD *v553;
  char v554;
  _QWORD *v555;
  int v556;
  uint64_t v557;
  _QWORD *v558;
  char v559;
  _QWORD *v560;
  int v561;
  uint64_t v562;
  double *v563;
  char v564;
  double *v565;
  int v566;
  uint64_t v567;
  int v568;
  int v569;
  _BOOL4 v570;
  uint64_t v571;
  double *v572;
  char v573;
  double *v574;
  int v575;
  uint64_t v576;
  _QWORD *v577;
  _QWORD *v578;
  uint64_t v579;
  double *v580;
  char v581;
  double *v582;
  int v583;
  uint64_t v584;
  int v585;
  int v586;
  _BOOL4 v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  char v592;
  uint64_t v593;
  int v594;
  int v595;
  _BOOL4 v596;
  uint64_t v597;
  double *v598;
  char v599;
  double *v600;
  int v601;
  uint64_t v602;
  double *v603;
  char v604;
  double *v605;
  int v606;
  uint64_t v607;
  int v608;
  int v609;
  _BOOL4 v610;
  uint64_t v611;
  int v612;
  int v613;
  _BOOL4 v614;
  uint64_t v615;
  _QWORD *v616;
  char v617;
  _QWORD *v618;
  int v619;
  uint64_t v620;
  _QWORD *v621;
  char v622;
  _QWORD *v623;
  int v624;
  uint64_t v625;
  _QWORD *v626;
  char v627;
  _QWORD *v628;
  int v629;
  uint64_t v630;
  _QWORD *v631;
  char v632;
  _QWORD *v633;
  int v634;
  uint64_t v635;
  _QWORD *v636;
  char v637;
  _QWORD *v638;
  int v639;
  uint64_t v640;
  _QWORD *v641;
  char v642;
  _QWORD *v643;
  int v644;
  uint64_t v645;
  _QWORD *v646;
  char v647;
  _QWORD *v648;
  int v649;
  uint64_t v650;
  _QWORD *v651;
  char v652;
  _QWORD *v653;
  int v654;
  uint64_t v655;
  _QWORD *v656;
  char v657;
  _QWORD *v658;
  int v659;
  uint64_t v660;
  _QWORD *v661;
  char v662;
  _QWORD *v663;
  int v664;
  uint64_t v665;
  _QWORD *v666;
  char v667;
  _QWORD *v668;
  int v669;
  uint64_t v670;
  _QWORD *v671;
  char v672;
  _QWORD *v673;
  int v674;
  uint64_t v675;
  _QWORD *v676;
  char v677;
  _QWORD *v678;
  int v679;
  uint64_t v680;
  _QWORD *v681;
  char v682;
  _QWORD *v683;
  int v684;
  uint64_t v685;
  _QWORD *v686;
  char v687;
  _QWORD *v688;
  int v689;
  uint64_t v690;
  double *v691;
  char v692;
  double *v693;
  int v694;
  uint64_t v695;
  double *v696;
  char v697;
  double *v698;
  int v699;
  uint64_t v700;
  int v701;
  int v702;
  _BOOL4 v703;
  uint64_t v704;
  int v705;
  int v706;
  _BOOL4 v707;
  uint64_t v708;
  double *v709;
  char v710;
  double *v711;
  int v712;
  uint64_t v713;
  double *v714;
  char v715;
  double *v716;
  int v717;
  uint64_t v718;
  int v719;
  int v720;
  _BOOL4 v721;
  uint64_t v722;
  _DWORD *v723;
  char v724;
  _DWORD *v725;
  int v726;
  uint64_t v727;
  _QWORD *v728;
  char v729;
  _QWORD *v730;
  int v731;
  uint64_t v732;
  double *v733;
  char v734;
  double *v735;
  int v736;
  uint64_t v737;
  double *v738;
  char v739;
  double *v740;
  int v741;
  uint64_t v742;
  double *v743;
  char v744;
  double *v745;
  int v746;
  uint64_t v747;
  double *v748;
  char v749;
  double *v750;
  int v751;
  uint64_t v752;
  double *v753;
  char v754;
  double *v755;
  int v756;
  uint64_t v757;
  double *v758;
  char v759;
  double *v760;
  int v761;
  uint64_t v762;
  int v763;
  int v764;
  _BOOL4 v765;
  uint64_t v766;
  double *v767;
  char v768;
  double *v769;
  int v770;
  uint64_t v771;
  double *v772;
  char v773;
  double *v774;
  char v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  int v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  int *v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t *v811;
  uint64_t v812;
  uint64_t v813;
  uint64_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  _QWORD v840[15];

  v4 = type metadata accessor for Date(0);
  v809 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v808 = (uint64_t)&v781 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v804 = sub_10001A9A8(&qword_1010ED570);
  v6 = __chkstk_darwin(v804);
  v810 = (uint64_t)&v781 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v803 = (uint64_t)&v781 - v8;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v10 = __chkstk_darwin(v9);
  v807 = (uint64_t)&v781 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v805 = (uint64_t)&v781 - v13;
  v14 = __chkstk_darwin(v12);
  v806 = (uint64_t)&v781 - v15;
  v16 = __chkstk_darwin(v14);
  v802 = (uint64_t)&v781 - v17;
  v18 = __chkstk_darwin(v16);
  v800 = (uint64_t)&v781 - v19;
  __chkstk_darwin(v18);
  v801 = (uint64_t)&v781 - v20;
  v799 = type metadata accessor for UUID(0);
  v797 = *(_QWORD *)(v799 - 8);
  __chkstk_darwin(v799);
  v796 = (uint64_t)&v781 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v22);
  v798 = (uint64_t)&v781 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010ED860);
  v25 = __chkstk_darwin(v24);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v781 - v27;
  __chkstk_darwin(v26);
  v31 = (char *)&v781 - v30;
  v33 = *a1;
  v32 = a1[1];
  v811 = a1;
  v35 = *a2;
  v34 = a2[1];
  if (v32 >> 60 == 15)
  {
    if (v34 >> 60 == 15)
    {
      v794 = v29;
      v795 = v4;
      v36 = a2;
      sub_10001BD08(v33, v32);
      sub_10001BD08(v35, v34);
      sub_10001EF3C(v33, v32);
      goto LABEL_7;
    }
LABEL_5:
    sub_10001BD08(v33, v32);
    sub_10001BD08(v35, v34);
    sub_10001EF3C(v33, v32);
    sub_10001EF3C(v35, v34);
    return 0;
  }
  if (v34 >> 60 == 15)
    goto LABEL_5;
  v794 = v29;
  v795 = v4;
  v36 = a2;
  sub_10001BD08(v33, v32);
  sub_10001BD08(v35, v34);
  sub_10001BD08(v33, v32);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v33, v32);
  v39 = v38;
  sub_10001EF3C(v35, v34);
  sub_10001EF3C(v33, v32);
  sub_10001EF3C(v33, v32);
  if ((v39 & 1) == 0)
    return 0;
LABEL_7:
  v40 = v36;
  v41 = *((_BYTE *)v36 + 24);
  if ((v811[3] & 1) != 0)
  {
    if (!*((_BYTE *)v36 + 24))
      return 0;
  }
  else
  {
    if (v811[2] != v36[2])
      v41 = 1;
    if ((v41 & 1) != 0)
      return 0;
  }
  v42 = v811;
  sub_1005124DC(*((_BYTE *)v811 + 25));
  if ((v43 & 1) == 0)
    return 0;
  v44 = *((_BYTE *)v40 + 40);
  if ((v42[5] & 1) != 0)
  {
    if (!*((_BYTE *)v40 + 40))
      return 0;
  }
  else
  {
    if (*((double *)v42 + 4) != *((double *)v40 + 4))
      v44 = 1;
    if ((v44 & 1) != 0)
      return 0;
  }
  v45 = *((_BYTE *)v40 + 56);
  if ((v811[7] & 1) != 0)
  {
    if (!*((_BYTE *)v40 + 56))
      return 0;
  }
  else
  {
    if (*((double *)v811 + 6) != *((double *)v40 + 6))
      v45 = 1;
    if ((v45 & 1) != 0)
      return 0;
  }
  v46 = *((unsigned __int8 *)v811 + 57);
  v47 = *((unsigned __int8 *)v40 + 57);
  if (v46 == 2)
  {
    if (v47 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v48 = (v46 & 1) == 0;
    if (v47 == 2 || ((v48 ^ v47) & 1) == 0)
      return result;
  }
  v49 = (_QWORD *)v811[8];
  v50 = (_QWORD *)v40[8];
  if (v49)
  {
    if (!v50 || (sub_1002478F4(v49, v50) & 1) == 0)
      return 0;
  }
  else if (v50)
  {
    return 0;
  }
  v51 = *((unsigned __int8 *)v811 + 72);
  v52 = *((unsigned __int8 *)v40 + 72);
  if (v51 == 2)
  {
    if (v52 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v53 = (v51 & 1) == 0;
    if (v52 == 2 || ((v53 ^ v52) & 1) == 0)
      return result;
  }
  v54 = v811[11];
  v55 = v40[11];
  if (!v54)
  {
    if (v55)
      return 0;
    goto LABEL_48;
  }
  if (!v55)
    return 0;
  v56 = v811[10];
  v57 = v40[10];
  if (v56 == v57 && v54 == v55
    || (v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v54, v57, v55, 0), result = 0, (v58 & 1) != 0))
  {
LABEL_48:
    v59 = *((_BYTE *)v40 + 104);
    if ((v811[13] & 1) != 0)
    {
      if (!*((_BYTE *)v40 + 104))
        return 0;
    }
    else
    {
      if (v811[12] != v40[12])
        v59 = 1;
      if ((v59 & 1) != 0)
        return 0;
    }
    v60 = *((unsigned __int8 *)v811 + 105);
    v61 = *((unsigned __int8 *)v40 + 105);
    if (v60 == 2)
    {
      v62 = v40;
      if (v61 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v63 = (v60 & 1) == 0;
      if (v61 == 2)
        return result;
      v62 = v40;
      if (((v63 ^ v61) & 1) == 0)
        return result;
    }
    v64 = *((unsigned __int8 *)v811 + 106);
    v65 = *((unsigned __int8 *)v62 + 106);
    if (v64 == 2)
    {
      if (v65 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v66 = (v64 & 1) == 0;
      if (v65 == 2 || ((v66 ^ v65) & 1) == 0)
        return result;
    }
    v67 = *((_BYTE *)v62 + 120);
    if ((v811[15] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 120))
        return 0;
    }
    else
    {
      if (v811[14] != v62[14])
        v67 = 1;
      if ((v67 & 1) != 0)
        return 0;
    }
    v68 = v62;
    v69 = *((_BYTE *)v62 + 136);
    if ((v811[17] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 136))
        return 0;
    }
    else
    {
      if (v811[16] != v62[16])
        v69 = 1;
      if ((v69 & 1) != 0)
        return 0;
    }
    v70 = *((_BYTE *)v62 + 152);
    if ((v811[19] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 152))
        return 0;
    }
    else
    {
      if (v811[18] != v62[18])
        v70 = 1;
      if ((v70 & 1) != 0)
        return 0;
    }
    v71 = *((_BYTE *)v62 + 168);
    if ((v811[21] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 168))
        return 0;
    }
    else
    {
      if (v811[20] != v62[20])
        v71 = 1;
      if ((v71 & 1) != 0)
        return 0;
    }
    v72 = *((_BYTE *)v62 + 184);
    if ((v811[23] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 184))
        return 0;
    }
    else
    {
      if (v811[22] != v62[22])
        v72 = 1;
      if ((v72 & 1) != 0)
        return 0;
    }
    v73 = *((_BYTE *)v62 + 200);
    if ((v811[25] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 200))
        return 0;
    }
    else
    {
      if (*((double *)v811 + 24) != *((double *)v62 + 24))
        v73 = 1;
      if ((v73 & 1) != 0)
        return 0;
    }
    v74 = *((_BYTE *)v62 + 216);
    if ((v811[27] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 216))
        return 0;
    }
    else
    {
      if (v811[26] != v62[26])
        v74 = 1;
      if ((v74 & 1) != 0)
        return 0;
    }
    v75 = *((_BYTE *)v62 + 232);
    if ((v811[29] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 232))
        return 0;
    }
    else
    {
      if (v811[28] != v62[28])
        v75 = 1;
      if ((v75 & 1) != 0)
        return 0;
    }
    v76 = *((_BYTE *)v62 + 248);
    if ((v811[31] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 248))
        return 0;
    }
    else
    {
      if (*((double *)v811 + 30) != *((double *)v62 + 30))
        v76 = 1;
      if ((v76 & 1) != 0)
        return 0;
    }
    v77 = v811 + 33;
    v78 = *((_BYTE *)v62 + 264);
    if ((v811[33] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 264))
        return 0;
    }
    else
    {
      if (v811[32] != v62[32])
        v78 = 1;
      if ((v78 & 1) != 0)
        return 0;
    }
    v79 = *((_BYTE *)v62 + 280);
    if ((v811[35] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 280))
        return 0;
    }
    else
    {
      if (v811[34] != v62[34])
        v79 = 1;
      if ((v79 & 1) != 0)
        return 0;
    }
    v80 = *((_BYTE *)v62 + 296);
    if ((v811[37] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 296))
        return 0;
    }
    else
    {
      if (v811[36] != v62[36])
        v80 = 1;
      if ((v80 & 1) != 0)
        return 0;
    }
    v81 = *((_BYTE *)v62 + 312);
    if ((v811[39] & 1) != 0)
    {
      if (!*((_BYTE *)v62 + 312))
        return 0;
    }
    else
    {
      if (v811[38] != v62[38])
        v81 = 1;
      if ((v81 & 1) != 0)
        return 0;
    }
    v82 = *((unsigned __int8 *)v811 + 313);
    v83 = *((unsigned __int8 *)v62 + 313);
    if (v82 == 2)
    {
      if (v83 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v84 = (v82 & 1) == 0;
      if (v83 == 2 || ((v84 ^ v83) & 1) == 0)
        return result;
    }
    v85 = v811[40];
    v86 = v62[40];
    if (v85)
    {
      if (!v86)
        return 0;
      swift_bridgeObjectRetain(v62[40]);
      v87 = swift_bridgeObjectRetain(v85);
      v88 = sub_100325BB8(v87, v86);
      swift_bridgeObjectRelease(v85);
      swift_bridgeObjectRelease(v86);
      if ((v88 & 1) == 0)
        return 0;
    }
    else if (v86)
    {
      return 0;
    }
    v89 = *((_BYTE *)v68 + 336);
    if ((v77[72] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 336))
        return 0;
    }
    else
    {
      if (v811[41] != v68[41])
        v89 = 1;
      if ((v89 & 1) != 0)
        return 0;
    }
    v90 = *((_BYTE *)v68 + 352);
    if ((v77[88] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 352))
        return 0;
    }
    else
    {
      if (v811[43] != v68[43])
        v90 = 1;
      if ((v90 & 1) != 0)
        return 0;
    }
    v91 = *((_BYTE *)v68 + 368);
    if ((v77[104] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 368))
        return 0;
    }
    else
    {
      if (v811[45] != v68[45])
        v91 = 1;
      if ((v91 & 1) != 0)
        return 0;
    }
    v92 = *((_BYTE *)v68 + 384);
    if ((v77[120] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 384))
        return 0;
    }
    else
    {
      if (v811[47] != v68[47])
        v92 = 1;
      if ((v92 & 1) != 0)
        return 0;
    }
    v93 = *((_BYTE *)v68 + 400);
    if ((v77[136] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 400))
        return 0;
    }
    else
    {
      if (v811[49] != v68[49])
        v93 = 1;
      if ((v93 & 1) != 0)
        return 0;
    }
    v94 = *((_BYTE *)v68 + 416);
    if ((v77[152] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 416))
        return 0;
    }
    else
    {
      if (v811[51] != v68[51])
        v94 = 1;
      if ((v94 & 1) != 0)
        return 0;
    }
    v95 = *((_BYTE *)v68 + 432);
    if ((v77[168] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 432))
        return 0;
    }
    else
    {
      if (v811[53] != v68[53])
        v95 = 1;
      if ((v95 & 1) != 0)
        return 0;
    }
    v96 = *((_BYTE *)v68 + 448);
    if ((v77[184] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 448))
        return 0;
    }
    else
    {
      if (v811[55] != v68[55])
        v96 = 1;
      if ((v96 & 1) != 0)
        return 0;
    }
    v97 = *((_BYTE *)v68 + 464);
    if ((v77[200] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 464))
        return 0;
    }
    else
    {
      if (v811[57] != v68[57])
        v97 = 1;
      if ((v97 & 1) != 0)
        return 0;
    }
    v98 = *((_BYTE *)v68 + 480);
    if ((v77[216] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 480))
        return 0;
    }
    else
    {
      if (v811[59] != v68[59])
        v98 = 1;
      if ((v98 & 1) != 0)
        return 0;
    }
    v99 = *((unsigned __int8 *)v811 + 481);
    v100 = *((unsigned __int8 *)v68 + 481);
    if (v99 == 2)
    {
      if (v100 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v101 = (v99 & 1) == 0;
      if (v100 == 2 || ((v101 ^ v100) & 1) == 0)
        return result;
    }
    v102 = *((_BYTE *)v68 + 496);
    if ((v77[232] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 496))
        return 0;
    }
    else
    {
      if (v811[61] != v68[61])
        v102 = 1;
      if ((v102 & 1) != 0)
        return 0;
    }
    v103 = *((_BYTE *)v68 + 512);
    if ((v77[248] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 512))
        return 0;
    }
    else
    {
      if (v811[63] != v68[63])
        v103 = 1;
      if ((v103 & 1) != 0)
        return 0;
    }
    v104 = *((_BYTE *)v68 + 528);
    if ((v77[264] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 528))
        return 0;
    }
    else
    {
      if (v811[65] != v68[65])
        v104 = 1;
      if ((v104 & 1) != 0)
        return 0;
    }
    v105 = *((_BYTE *)v68 + 544);
    if ((v77[280] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 544))
        return 0;
    }
    else
    {
      if (v811[67] != v68[67])
        v105 = 1;
      if ((v105 & 1) != 0)
        return 0;
    }
    v106 = *((_BYTE *)v68 + 560);
    if ((v77[296] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 560))
        return 0;
    }
    else
    {
      if (v811[69] != v68[69])
        v106 = 1;
      if ((v106 & 1) != 0)
        return 0;
    }
    v107 = *((_BYTE *)v68 + 576);
    if ((v77[312] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 576))
        return 0;
    }
    else
    {
      if (v811[71] != v68[71])
        v107 = 1;
      if ((v107 & 1) != 0)
        return 0;
    }
    v108 = *((_BYTE *)v68 + 592);
    if ((v77[328] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 592))
        return 0;
    }
    else
    {
      if (v811[73] != v68[73])
        v108 = 1;
      if ((v108 & 1) != 0)
        return 0;
    }
    v109 = v811[75];
    v110 = v68[75];
    if (v109)
    {
      if (!v110 || (sub_1002486C4(v109, v110) & 1) == 0)
        return 0;
    }
    else if (v110)
    {
      return 0;
    }
    v111 = *((_BYTE *)v68 + 616);
    if ((v77[352] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 616))
        return 0;
    }
    else
    {
      if (*((double *)v811 + 76) != *((double *)v68 + 76))
        v111 = 1;
      if ((v111 & 1) != 0)
        return 0;
    }
    v112 = *((_BYTE *)v68 + 632);
    if ((v77[368] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 632))
        return 0;
    }
    else
    {
      if (*((double *)v811 + 78) != *((double *)v68 + 78))
        v112 = 1;
      if ((v112 & 1) != 0)
        return 0;
    }
    v113 = (void *)v811[80];
    v114 = (void *)v68[80];
    if (v113)
    {
      if (!v114)
        return 0;
      v115 = v114;
      v116 = v113;
      v117 = sub_100512454((uint64_t)v116, (uint64_t)v115);

      if ((v117 & 1) == 0)
        return 0;
    }
    else if (v114)
    {
      return 0;
    }
    v118 = v811[81];
    v119 = v68[81];
    if (v118)
    {
      if (!v119)
        return 0;
      swift_bridgeObjectRetain(v68[81]);
      v120 = swift_bridgeObjectRetain(v118);
      v121 = sub_100248830(v120, v119);
      swift_bridgeObjectRelease(v118);
      swift_bridgeObjectRelease(v119);
      if ((v121 & 1) == 0)
        return 0;
    }
    else if (v119)
    {
      return 0;
    }
    v122 = *((_BYTE *)v68 + 664);
    if ((v77[400] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 664))
        return 0;
    }
    else
    {
      if (v811[82] != v68[82])
        v122 = 1;
      if ((v122 & 1) != 0)
        return 0;
    }
    v123 = *((_BYTE *)v68 + 680);
    if ((v77[416] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 680))
        return 0;
    }
    else
    {
      if (v811[84] != v68[84])
        v123 = 1;
      if ((v123 & 1) != 0)
        return 0;
    }
    v124 = *((_BYTE *)v68 + 696);
    if ((v77[432] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 696))
        return 0;
    }
    else
    {
      if (v811[86] != v68[86])
        v124 = 1;
      if ((v124 & 1) != 0)
        return 0;
    }
    v125 = *((_BYTE *)v68 + 712);
    if ((v77[448] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 712))
        return 0;
    }
    else
    {
      if (v811[88] != v68[88])
        v125 = 1;
      if ((v125 & 1) != 0)
        return 0;
    }
    v126 = *((_BYTE *)v68 + 728);
    if ((v77[464] & 1) != 0)
    {
      if (!*((_BYTE *)v68 + 728))
        return 0;
    }
    else
    {
      if (v811[90] != v68[90])
        v126 = 1;
      if ((v126 & 1) != 0)
        return 0;
    }
    v127 = *((unsigned __int8 *)v811 + 729);
    v128 = *((unsigned __int8 *)v68 + 729);
    if (v127 == 2)
    {
      if (v128 != 2)
        return 0;
    }
    else
    {
      result = 0;
      v129 = (v127 & 1) == 0;
      if (v128 == 2 || ((v129 ^ v128) & 1) == 0)
        return result;
    }
    v130 = type metadata accessor for DefaultConfigurationLayer(0);
    sub_10000F9B8((uint64_t)v811 + *(int *)(v130 + 240), (uint64_t)v31, &qword_1010ED860);
    v793 = (int *)v130;
    sub_10000F9B8((uint64_t)v68 + *(int *)(v130 + 240), (uint64_t)v28, &qword_1010ED860);
    v131 = v798;
    v132 = v798 + *(int *)(v22 + 48);
    sub_10000F9B8((uint64_t)v31, v798, &qword_1010ED860);
    sub_10000F9B8((uint64_t)v28, v132, &qword_1010ED860);
    v133 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v797 + 48);
    if (v133(v131, 1, v799) == 1)
    {
      sub_100004048((uint64_t)v28, &qword_1010ED860);
      sub_100004048((uint64_t)v31, &qword_1010ED860);
      if (v133(v132, 1, v799) == 1)
      {
        sub_100004048(v798, &qword_1010ED860);
        goto LABEL_328;
      }
    }
    else
    {
      sub_10000F9B8(v798, v794, &qword_1010ED860);
      if (v133(v132, 1, v799) != 1)
      {
        v137 = v796;
        v136 = v797;
        v138 = v799;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v797 + 32))(v796, v132, v799);
        v139 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v140 = v794;
        v141 = dispatch thunk of static Equatable.== infix(_:_:)(v794, v137, v138, v139);
        v142 = *(void (**)(uint64_t, uint64_t))(v136 + 8);
        v142(v137, v138);
        sub_100004048((uint64_t)v28, &qword_1010ED860);
        sub_100004048((uint64_t)v31, &qword_1010ED860);
        v142(v140, v138);
        sub_100004048(v798, &qword_1010ED860);
        if ((v141 & 1) == 0)
          return 0;
LABEL_328:
        v143 = v793;
        v144 = v801;
        sub_10000F9B8((uint64_t)v811 + v793[61], v801, (uint64_t *)&unk_1010EA690);
        v145 = v800;
        sub_10000F9B8((uint64_t)v68 + v143[61], v800, (uint64_t *)&unk_1010EA690);
        v146 = v803;
        v147 = v803 + *(int *)(v804 + 48);
        sub_10000F9B8(v144, v803, (uint64_t *)&unk_1010EA690);
        sub_10000F9B8(v145, v147, (uint64_t *)&unk_1010EA690);
        v148 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v809 + 48);
        if (v148(v146, 1, v795) == 1)
        {
          sub_100004048(v800, (uint64_t *)&unk_1010EA690);
          sub_100004048(v801, (uint64_t *)&unk_1010EA690);
          if (v148(v147, 1, v795) == 1)
          {
            sub_100004048(v803, (uint64_t *)&unk_1010EA690);
LABEL_336:
            v156 = v793[62];
            v157 = (uint64_t *)((char *)v811 + v156);
            v158 = *((_BYTE *)v811 + v156 + 8);
            v159 = (uint64_t *)((char *)v68 + v156);
            v160 = *((unsigned __int8 *)v68 + v156 + 8);
            if ((v158 & 1) != 0)
            {
              if (!v160)
                return 0;
            }
            else
            {
              if (*v157 != *v159)
                LOBYTE(v160) = 1;
              if ((v160 & 1) != 0)
                return 0;
            }
            v161 = v793;
            v162 = v806;
            sub_10000F9B8((uint64_t)v811 + v793[63], v806, (uint64_t *)&unk_1010EA690);
            v163 = v805;
            sub_10000F9B8((uint64_t)v68 + v161[63], v805, (uint64_t *)&unk_1010EA690);
            v164 = v810;
            v165 = v810 + *(int *)(v804 + 48);
            sub_10000F9B8(v162, v810, (uint64_t *)&unk_1010EA690);
            sub_10000F9B8(v163, v165, (uint64_t *)&unk_1010EA690);
            if (v148(v164, 1, v795) == 1)
            {
              sub_100004048(v805, (uint64_t *)&unk_1010EA690);
              sub_100004048(v806, (uint64_t *)&unk_1010EA690);
              if (v148(v165, 1, v795) == 1)
              {
                sub_100004048(v810, (uint64_t *)&unk_1010EA690);
                goto LABEL_349;
              }
            }
            else
            {
              sub_10000F9B8(v810, v807, (uint64_t *)&unk_1010EA690);
              if (v148(v165, 1, v795) != 1)
              {
                v167 = v808;
                v166 = v809;
                v168 = v795;
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v809 + 32))(v808, v165, v795);
                v169 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v170 = v807;
                v171 = dispatch thunk of static Equatable.== infix(_:_:)(v807, v167, v168, v169);
                v172 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
                v172(v167, v168);
                sub_100004048(v805, (uint64_t *)&unk_1010EA690);
                sub_100004048(v806, (uint64_t *)&unk_1010EA690);
                v172(v170, v168);
                sub_100004048(v810, (uint64_t *)&unk_1010EA690);
                if ((v171 & 1) == 0)
                  return 0;
LABEL_349:
                v173 = v793[64];
                v174 = (uint64_t *)((char *)v811 + v173);
                v175 = *((_BYTE *)v811 + v173 + 8);
                v176 = (uint64_t *)((char *)v68 + v173);
                v177 = *((unsigned __int8 *)v68 + v173 + 8);
                if ((v175 & 1) != 0)
                {
                  if (!v177)
                    return 0;
                }
                else
                {
                  if (*v174 != *v176)
                    LOBYTE(v177) = 1;
                  if ((v177 & 1) != 0)
                    return 0;
                }
                v178 = v793[65];
                v179 = (uint64_t *)((char *)v811 + v178);
                v180 = *((_BYTE *)v811 + v178 + 8);
                v181 = (uint64_t *)((char *)v68 + v178);
                v182 = *((unsigned __int8 *)v68 + v178 + 8);
                if ((v180 & 1) != 0)
                {
                  if (!v182)
                    return 0;
                }
                else
                {
                  if (*v179 != *v181)
                    LOBYTE(v182) = 1;
                  if ((v182 & 1) != 0)
                    return 0;
                }
                v183 = v793[66];
                v184 = (double *)((char *)v811 + v183);
                v185 = *((_BYTE *)v811 + v183 + 8);
                v186 = (double *)((char *)v68 + v183);
                v187 = *((unsigned __int8 *)v68 + v183 + 8);
                if ((v185 & 1) != 0)
                {
                  if (!v187)
                    return 0;
                }
                else
                {
                  if (*v184 != *v186)
                    LOBYTE(v187) = 1;
                  if ((v187 & 1) != 0)
                    return 0;
                }
                v188 = v793[67];
                v189 = (double *)((char *)v811 + v188);
                v190 = *((_BYTE *)v811 + v188 + 8);
                v191 = (double *)((char *)v68 + v188);
                v192 = *((unsigned __int8 *)v68 + v188 + 8);
                if ((v190 & 1) != 0)
                {
                  if (!v192)
                    return 0;
                }
                else
                {
                  if (*v189 != *v191)
                    LOBYTE(v192) = 1;
                  if ((v192 & 1) != 0)
                    return 0;
                }
                v193 = v793[68];
                v194 = (double *)((char *)v811 + v193);
                v195 = *((_BYTE *)v811 + v193 + 8);
                v196 = (double *)((char *)v68 + v193);
                v197 = *((unsigned __int8 *)v68 + v193 + 8);
                if ((v195 & 1) != 0)
                {
                  if (!v197)
                    return 0;
                }
                else
                {
                  if (*v194 != *v196)
                    LOBYTE(v197) = 1;
                  if ((v197 & 1) != 0)
                    return 0;
                }
                v198 = v793[69];
                v199 = (double *)((char *)v811 + v198);
                v200 = *((_BYTE *)v811 + v198 + 8);
                v201 = (double *)((char *)v68 + v198);
                v202 = *((unsigned __int8 *)v68 + v198 + 8);
                if ((v200 & 1) != 0)
                {
                  if (!v202)
                    return 0;
                }
                else
                {
                  if (*v199 != *v201)
                    LOBYTE(v202) = 1;
                  if ((v202 & 1) != 0)
                    return 0;
                }
                v203 = v793[70];
                v205 = *(uint64_t *)((char *)v811 + v203);
                v204 = *(uint64_t *)((char *)v811 + v203 + 8);
                v207 = *(uint64_t *)((char *)v811 + v203 + 16);
                v206 = *(uint64_t *)((char *)v811 + v203 + 24);
                v209 = *(uint64_t *)((char *)v811 + v203 + 32);
                v208 = *(uint64_t *)((char *)v811 + v203 + 40);
                v210 = *(uint64_t *)((char *)v811 + v203 + 48);
                v211 = *(uint64_t *)((char *)v811 + v203 + 56);
                v212 = *(uint64_t *)((char *)v811 + v203 + 64);
                v213 = *(uint64_t *)((char *)v811 + v203 + 72);
                v214 = *(uint64_t *)((char *)v811 + v203 + 80);
                v215 = *(uint64_t *)((char *)v811 + v203 + 88);
                v216 = *(uint64_t *)((char *)v811 + v203 + 96);
                v217 = *(uint64_t *)((char *)v811 + v203 + 104);
                v218 = (uint64_t *)((char *)v68 + v203);
                v804 = *v218;
                v805 = v218[1];
                v806 = v218[2];
                v807 = v218[3];
                v808 = v218[4];
                v219 = v218[6];
                v809 = v218[5];
                v810 = v218[7];
                v803 = v218[8];
                v802 = v218[9];
                v801 = v218[10];
                v220 = v218[11];
                v797 = v213;
                v798 = v220;
                v221 = v218[12];
                v799 = v218[13];
                v800 = v221;
                v795 = v214;
                v796 = v215;
                v794 = v216;
                v792 = v217;
                if (v210)
                {
                  if (v219)
                  {
                    v840[0] = v205;
                    v840[1] = v204;
                    v784 = v205;
                    v785 = v207;
                    v222 = v204;
                    v840[2] = v207;
                    v840[3] = v206;
                    v223 = v207;
                    v224 = v206;
                    v787 = v209;
                    v788 = v206;
                    v840[4] = v209;
                    v840[5] = v208;
                    v225 = v209;
                    v789 = v208;
                    v840[6] = v210;
                    v840[7] = v211;
                    v226 = v211;
                    v786 = v211;
                    v840[8] = v212;
                    v840[9] = v213;
                    v790 = v219;
                    v791 = v212;
                    v840[10] = v214;
                    v840[11] = v215;
                    v840[12] = v216;
                    v840[13] = v217;
                    v227 = v803;
                    v812 = v804;
                    v813 = v805;
                    v814 = v806;
                    v815 = v807;
                    v816 = v808;
                    v817 = v809;
                    v818 = v219;
                    v819 = v810;
                    v229 = v801;
                    v228 = v802;
                    v820 = v803;
                    v821 = v802;
                    v231 = v798;
                    v230 = v799;
                    v822 = v801;
                    v823 = v798;
                    v232 = v800;
                    v824 = v800;
                    v825 = v799;
                    v778 = v217;
                    v233 = v205;
                    v234 = v222;
                    v782 = v222;
                    v235 = v210;
                    sub_1006C9628(v233, v222, v223, v224, v225, v208, v210, v226, v212, v213, v214, v215, v216, v778);
                    sub_1006C9628(v804, v805, v806, v807, v808, v809, v790, v810, v227, v228, v229, v231, v232, v230);
                    v236 = v792;
                    v237 = v794;
                    v238 = v795;
                    v240 = v784;
                    v239 = v785;
                    sub_1006C9628(v784, v234, v785, v788, v787, v789, v235, v786, v791, v797, v795, v796, v794, v792);
                    v783 = _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v840, (uint64_t)&v812);
                    sub_1006C9720(v804, v805, v806, v807, v808, v809, v790, v810, v803, v802, v801, v231, v800, v799);
                    v777 = v237;
                    v779 = v236;
                    v241 = v796;
                    v776 = v238;
                    v242 = v797;
                    v243 = v240;
                    v244 = v782;
                    v245 = v239;
                    v246 = v787;
                    v247 = v788;
                    v248 = v789;
                    v249 = v786;
                    sub_1006C9720(v243, v782, v245, v788, v787, v789, v235, v786, v791, v797, v776, v796, v777, v779);
                    sub_1006C9720(v784, v244, v785, v247, v246, v248, v235, v249, v791, v242, v795, v241, v794, v792);
                    if ((v783 & 1) == 0)
                      return 0;
LABEL_392:
                    v265 = v793[71];
                    v266 = *((unsigned __int8 *)v811 + v265);
                    v267 = *((unsigned __int8 *)v68 + v265);
                    if (v266 == 2)
                    {
                      if (v267 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v268 = (v266 & 1) == 0;
                      if (v267 == 2 || ((v268 ^ v267) & 1) == 0)
                        return result;
                    }
                    v269 = v793[72];
                    v270 = *((unsigned __int8 *)v811 + v269);
                    v271 = *((unsigned __int8 *)v68 + v269);
                    if (v270 == 2)
                    {
                      if (v271 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v272 = (v270 & 1) == 0;
                      if (v271 == 2 || ((v272 ^ v271) & 1) == 0)
                        return result;
                    }
                    v273 = v793[73];
                    v274 = *((unsigned __int8 *)v811 + v273);
                    v275 = *((unsigned __int8 *)v68 + v273);
                    if (v274 == 2)
                    {
                      if (v275 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v276 = (v274 & 1) == 0;
                      if (v275 == 2 || ((v276 ^ v275) & 1) == 0)
                        return result;
                    }
                    v277 = v793[74];
                    v278 = (double *)((char *)v811 + v277);
                    v279 = *((_BYTE *)v811 + v277 + 8);
                    v280 = (double *)((char *)v68 + v277);
                    v281 = *((unsigned __int8 *)v68 + v277 + 8);
                    if ((v279 & 1) != 0)
                    {
                      if (!v281)
                        return 0;
                    }
                    else
                    {
                      if (*v278 != *v280)
                        LOBYTE(v281) = 1;
                      if ((v281 & 1) != 0)
                        return 0;
                    }
                    v282 = v793[75];
                    v283 = (double *)((char *)v811 + v282);
                    v284 = *((_BYTE *)v811 + v282 + 8);
                    v285 = (double *)((char *)v68 + v282);
                    v286 = *((unsigned __int8 *)v68 + v282 + 8);
                    if ((v284 & 1) != 0)
                    {
                      if (!v286)
                        return 0;
                    }
                    else
                    {
                      if (*v283 != *v285)
                        LOBYTE(v286) = 1;
                      if ((v286 & 1) != 0)
                        return 0;
                    }
                    v287 = v793[76];
                    v288 = (double *)((char *)v811 + v287);
                    v289 = *((_BYTE *)v811 + v287 + 8);
                    v290 = (double *)((char *)v68 + v287);
                    v291 = *((unsigned __int8 *)v68 + v287 + 8);
                    if ((v289 & 1) != 0)
                    {
                      if (!v291)
                        return 0;
                    }
                    else
                    {
                      if (*v288 != *v290)
                        LOBYTE(v291) = 1;
                      if ((v291 & 1) != 0)
                        return 0;
                    }
                    v292 = v793[77];
                    v293 = (double *)((char *)v811 + v292);
                    v294 = *((_BYTE *)v811 + v292 + 8);
                    v295 = (double *)((char *)v68 + v292);
                    v296 = *((unsigned __int8 *)v68 + v292 + 8);
                    if ((v294 & 1) != 0)
                    {
                      if (!v296)
                        return 0;
                    }
                    else
                    {
                      if (*v293 != *v295)
                        LOBYTE(v296) = 1;
                      if ((v296 & 1) != 0)
                        return 0;
                    }
                    v297 = v793[78];
                    v298 = (double *)((char *)v811 + v297);
                    v299 = *((_BYTE *)v811 + v297 + 8);
                    v300 = (double *)((char *)v68 + v297);
                    v301 = *((unsigned __int8 *)v68 + v297 + 8);
                    if ((v299 & 1) != 0)
                    {
                      if (!v301)
                        return 0;
                    }
                    else
                    {
                      if (*v298 != *v300)
                        LOBYTE(v301) = 1;
                      if ((v301 & 1) != 0)
                        return 0;
                    }
                    v302 = v793[79];
                    v303 = (double *)((char *)v811 + v302);
                    v304 = *((_BYTE *)v811 + v302 + 8);
                    v305 = (double *)((char *)v68 + v302);
                    v306 = *((unsigned __int8 *)v68 + v302 + 8);
                    if ((v304 & 1) != 0)
                    {
                      if (!v306)
                        return 0;
                    }
                    else
                    {
                      if (*v303 != *v305)
                        LOBYTE(v306) = 1;
                      if ((v306 & 1) != 0)
                        return 0;
                    }
                    v307 = v793[80];
                    v308 = (double *)((char *)v811 + v307);
                    v309 = *((_BYTE *)v811 + v307 + 8);
                    v310 = (double *)((char *)v68 + v307);
                    v311 = *((unsigned __int8 *)v68 + v307 + 8);
                    if ((v309 & 1) != 0)
                    {
                      if (!v311)
                        return 0;
                    }
                    else
                    {
                      if (*v308 != *v310)
                        LOBYTE(v311) = 1;
                      if ((v311 & 1) != 0)
                        return 0;
                    }
                    v312 = v793[81];
                    v313 = (uint64_t *)((char *)v811 + v312);
                    v314 = *(uint64_t *)((char *)v811 + v312 + 8);
                    v315 = (uint64_t *)((char *)v68 + v312);
                    v316 = v315[1];
                    if (v314)
                    {
                      if (!v316)
                        return 0;
                      if (*v313 != *v315 || v314 != v316)
                      {
                        v317 = _stringCompareWithSmolCheck(_:_:expecting:)(*v313, v314, *v315, v316, 0);
                        result = 0;
                        if ((v317 & 1) == 0)
                          return result;
                      }
                    }
                    else if (v316)
                    {
                      return 0;
                    }
                    v318 = v793[82];
                    v319 = *((unsigned __int8 *)v811 + v318);
                    v320 = *((unsigned __int8 *)v68 + v318);
                    if (v319 == 2)
                    {
                      if (v320 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v321 = (v319 & 1) == 0;
                      if (v320 == 2 || ((v321 ^ v320) & 1) == 0)
                        return result;
                    }
                    v322 = v793[83];
                    v323 = (uint64_t *)((char *)v811 + v322);
                    v324 = *((_BYTE *)v811 + v322 + 8);
                    v325 = (uint64_t *)((char *)v68 + v322);
                    v326 = *((unsigned __int8 *)v68 + v322 + 8);
                    if ((v324 & 1) != 0)
                    {
                      if (!v326)
                        return 0;
                    }
                    else
                    {
                      if (*v323 != *v325)
                        LOBYTE(v326) = 1;
                      if ((v326 & 1) != 0)
                        return 0;
                    }
                    v327 = v793[84];
                    v328 = (double *)((char *)v811 + v327);
                    v329 = *((_BYTE *)v811 + v327 + 8);
                    v330 = (double *)((char *)v68 + v327);
                    v331 = *((unsigned __int8 *)v68 + v327 + 8);
                    if ((v329 & 1) != 0)
                    {
                      if (!v331)
                        return 0;
                    }
                    else
                    {
                      if (*v328 != *v330)
                        LOBYTE(v331) = 1;
                      if ((v331 & 1) != 0)
                        return 0;
                    }
                    v332 = v793[85];
                    v333 = (uint64_t *)((char *)v811 + v332);
                    v334 = *((_BYTE *)v811 + v332 + 8);
                    v335 = (uint64_t *)((char *)v68 + v332);
                    v336 = *((unsigned __int8 *)v68 + v332 + 8);
                    if ((v334 & 1) != 0)
                    {
                      if (!v336)
                        return 0;
                    }
                    else
                    {
                      if (*v333 != *v335)
                        LOBYTE(v336) = 1;
                      if ((v336 & 1) != 0)
                        return 0;
                    }
                    v337 = v793[86];
                    v338 = (uint64_t *)((char *)v811 + v337);
                    v339 = *(uint64_t *)((char *)v811 + v337 + 8);
                    v340 = (uint64_t *)((char *)v68 + v337);
                    v341 = v340[1];
                    if (v339)
                    {
                      if (!v341)
                        return 0;
                      if (*v338 != *v340 || v339 != v341)
                      {
                        v342 = _stringCompareWithSmolCheck(_:_:expecting:)(*v338, v339, *v340, v341, 0);
                        result = 0;
                        if ((v342 & 1) == 0)
                          return result;
                      }
                    }
                    else if (v341)
                    {
                      return 0;
                    }
                    v343 = v793[87];
                    v344 = (uint64_t *)((char *)v811 + v343);
                    v345 = *((_BYTE *)v811 + v343 + 8);
                    v346 = (uint64_t *)((char *)v68 + v343);
                    v347 = *((unsigned __int8 *)v68 + v343 + 8);
                    if ((v345 & 1) != 0)
                    {
                      if (!v347)
                        return 0;
                    }
                    else
                    {
                      if (*v344 != *v346)
                        LOBYTE(v347) = 1;
                      if ((v347 & 1) != 0)
                        return 0;
                    }
                    v348 = v793[88];
                    v349 = (uint64_t *)((char *)v811 + v348);
                    v350 = *(uint64_t *)((char *)v811 + v348 + 8);
                    v351 = (uint64_t *)((char *)v68 + v348);
                    v352 = v351[1];
                    if (v350)
                    {
                      if (!v352)
                        return 0;
                      if (*v349 != *v351 || v350 != v352)
                      {
                        v353 = _stringCompareWithSmolCheck(_:_:expecting:)(*v349, v350, *v351, v352, 0);
                        result = 0;
                        if ((v353 & 1) == 0)
                          return result;
                      }
                    }
                    else if (v352)
                    {
                      return 0;
                    }
                    v354 = v793[89];
                    v355 = (uint64_t *)((char *)v811 + v354);
                    v356 = *((_BYTE *)v811 + v354 + 8);
                    v357 = (uint64_t *)((char *)v68 + v354);
                    v358 = *((unsigned __int8 *)v68 + v354 + 8);
                    if ((v356 & 1) != 0)
                    {
                      if (!v358)
                        return 0;
                    }
                    else
                    {
                      if (*v355 != *v357)
                        LOBYTE(v358) = 1;
                      if ((v358 & 1) != 0)
                        return 0;
                    }
                    v359 = v793[90];
                    v360 = (uint64_t *)((char *)v811 + v359);
                    v361 = *(uint64_t *)((char *)v811 + v359 + 8);
                    v362 = (uint64_t *)((char *)v68 + v359);
                    v363 = v362[1];
                    if (v361)
                    {
                      if (!v363)
                        return 0;
                      if (*v360 != *v362 || v361 != v363)
                      {
                        v364 = _stringCompareWithSmolCheck(_:_:expecting:)(*v360, v361, *v362, v363, 0);
                        result = 0;
                        if ((v364 & 1) == 0)
                          return result;
                      }
                    }
                    else if (v363)
                    {
                      return 0;
                    }
                    v365 = v793[91];
                    v366 = (double *)((char *)v811 + v365);
                    v367 = *((_BYTE *)v811 + v365 + 8);
                    v368 = (double *)((char *)v68 + v365);
                    v369 = *((unsigned __int8 *)v68 + v365 + 8);
                    if ((v367 & 1) != 0)
                    {
                      if (!v369)
                        return 0;
                    }
                    else
                    {
                      if (*v366 != *v368)
                        LOBYTE(v369) = 1;
                      if ((v369 & 1) != 0)
                        return 0;
                    }
                    v370 = v793[92];
                    v371 = *((unsigned __int8 *)v811 + v370);
                    v372 = *((unsigned __int8 *)v68 + v370);
                    if (v371 == 2)
                    {
                      if (v372 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v373 = (v371 & 1) == 0;
                      if (v372 == 2 || ((v373 ^ v372) & 1) == 0)
                        return result;
                    }
                    v374 = v793[93];
                    v375 = *((unsigned __int8 *)v811 + v374);
                    v376 = *((unsigned __int8 *)v68 + v374);
                    if (v375 == 2)
                    {
                      if (v376 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v377 = (v375 & 1) == 0;
                      if (v376 == 2 || ((v377 ^ v376) & 1) == 0)
                        return result;
                    }
                    v378 = v793[94];
                    v379 = *((unsigned __int8 *)v811 + v378);
                    v380 = *((unsigned __int8 *)v68 + v378);
                    if (v379 == 2)
                    {
                      if (v380 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v381 = (v379 & 1) == 0;
                      if (v380 == 2 || ((v381 ^ v380) & 1) == 0)
                        return result;
                    }
                    v382 = v793[95];
                    v383 = *((unsigned __int8 *)v811 + v382);
                    v384 = *((unsigned __int8 *)v68 + v382);
                    if (v383 == 2)
                    {
                      if (v384 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v385 = (v383 & 1) == 0;
                      if (v384 == 2 || ((v385 ^ v384) & 1) == 0)
                        return result;
                    }
                    v386 = v793[96];
                    v387 = (uint64_t *)((char *)v811 + v386);
                    v388 = *((_BYTE *)v811 + v386 + 8);
                    v389 = (uint64_t *)((char *)v68 + v386);
                    v390 = *((unsigned __int8 *)v68 + v386 + 8);
                    if ((v388 & 1) != 0)
                    {
                      if (!v390)
                        return 0;
                    }
                    else
                    {
                      if (*v387 != *v389)
                        LOBYTE(v390) = 1;
                      if ((v390 & 1) != 0)
                        return 0;
                    }
                    v391 = v793[97];
                    v392 = (uint64_t *)((char *)v811 + v391);
                    v393 = *((_BYTE *)v811 + v391 + 8);
                    v394 = (uint64_t *)((char *)v68 + v391);
                    v395 = *((unsigned __int8 *)v68 + v391 + 8);
                    if ((v393 & 1) != 0)
                    {
                      if (!v395)
                        return 0;
                    }
                    else
                    {
                      if (*v392 != *v394)
                        LOBYTE(v395) = 1;
                      if ((v395 & 1) != 0)
                        return 0;
                    }
                    v396 = v793[98];
                    v397 = (uint64_t *)((char *)v811 + v396);
                    v398 = *((_BYTE *)v811 + v396 + 8);
                    v399 = (uint64_t *)((char *)v68 + v396);
                    v400 = *((unsigned __int8 *)v68 + v396 + 8);
                    if ((v398 & 1) != 0)
                    {
                      if (!v400)
                        return 0;
                    }
                    else
                    {
                      if (*v397 != *v399)
                        LOBYTE(v400) = 1;
                      if ((v400 & 1) != 0)
                        return 0;
                    }
                    v401 = v793[99];
                    v402 = (uint64_t *)((char *)v811 + v401);
                    v403 = *((_BYTE *)v811 + v401 + 8);
                    v404 = (uint64_t *)((char *)v68 + v401);
                    v405 = *((unsigned __int8 *)v68 + v401 + 8);
                    if ((v403 & 1) != 0)
                    {
                      if (!v405)
                        return 0;
                    }
                    else
                    {
                      if (*v402 != *v404)
                        LOBYTE(v405) = 1;
                      if ((v405 & 1) != 0)
                        return 0;
                    }
                    v406 = v793[100];
                    v407 = (uint64_t *)((char *)v811 + v406);
                    v408 = *((_BYTE *)v811 + v406 + 8);
                    v409 = (uint64_t *)((char *)v68 + v406);
                    v410 = *((unsigned __int8 *)v68 + v406 + 8);
                    if ((v408 & 1) != 0)
                    {
                      if (!v410)
                        return 0;
                    }
                    else
                    {
                      if (*v407 != *v409)
                        LOBYTE(v410) = 1;
                      if ((v410 & 1) != 0)
                        return 0;
                    }
                    v411 = v793[101];
                    v412 = (double *)((char *)v811 + v411);
                    v413 = *((_BYTE *)v811 + v411 + 8);
                    v414 = (double *)((char *)v68 + v411);
                    v415 = *((unsigned __int8 *)v68 + v411 + 8);
                    if ((v413 & 1) != 0)
                    {
                      if (!v415)
                        return 0;
                    }
                    else
                    {
                      if (*v412 != *v414)
                        LOBYTE(v415) = 1;
                      if ((v415 & 1) != 0)
                        return 0;
                    }
                    v416 = v793[102];
                    v417 = (double *)((char *)v811 + v416);
                    v418 = *((_BYTE *)v811 + v416 + 8);
                    v419 = (double *)((char *)v68 + v416);
                    v420 = *((unsigned __int8 *)v68 + v416 + 8);
                    if ((v418 & 1) != 0)
                    {
                      if (!v420)
                        return 0;
                    }
                    else
                    {
                      if (*v417 != *v419)
                        LOBYTE(v420) = 1;
                      if ((v420 & 1) != 0)
                        return 0;
                    }
                    v421 = v793[103];
                    v422 = (double *)((char *)v811 + v421);
                    v423 = *((_BYTE *)v811 + v421 + 8);
                    v424 = (double *)((char *)v68 + v421);
                    v425 = *((unsigned __int8 *)v68 + v421 + 8);
                    if ((v423 & 1) != 0)
                    {
                      if (!v425)
                        return 0;
                    }
                    else
                    {
                      if (*v422 != *v424)
                        LOBYTE(v425) = 1;
                      if ((v425 & 1) != 0)
                        return 0;
                    }
                    v426 = v793[104];
                    v427 = (uint64_t *)((char *)v811 + v426);
                    v428 = *((_BYTE *)v811 + v426 + 8);
                    v429 = (uint64_t *)((char *)v68 + v426);
                    v430 = *((unsigned __int8 *)v68 + v426 + 8);
                    if ((v428 & 1) != 0)
                    {
                      if (!v430)
                        return 0;
                    }
                    else
                    {
                      if (*v427 != *v429)
                        LOBYTE(v430) = 1;
                      if ((v430 & 1) != 0)
                        return 0;
                    }
                    v431 = v793[105];
                    v432 = (uint64_t *)((char *)v811 + v431);
                    v433 = *((_BYTE *)v811 + v431 + 8);
                    v434 = (uint64_t *)((char *)v68 + v431);
                    v435 = *((unsigned __int8 *)v68 + v431 + 8);
                    if ((v433 & 1) != 0)
                    {
                      if (!v435)
                        return 0;
                    }
                    else
                    {
                      if (*v432 != *v434)
                        LOBYTE(v435) = 1;
                      if ((v435 & 1) != 0)
                        return 0;
                    }
                    v436 = v793[106];
                    v437 = (uint64_t *)((char *)v811 + v436);
                    v438 = *((_BYTE *)v811 + v436 + 8);
                    v439 = (uint64_t *)((char *)v68 + v436);
                    v440 = *((unsigned __int8 *)v68 + v436 + 8);
                    if ((v438 & 1) != 0)
                    {
                      if (!v440)
                        return 0;
                    }
                    else
                    {
                      if (*v437 != *v439)
                        LOBYTE(v440) = 1;
                      if ((v440 & 1) != 0)
                        return 0;
                    }
                    v441 = v793[107];
                    v442 = (double *)((char *)v811 + v441);
                    v443 = *((_BYTE *)v811 + v441 + 8);
                    v444 = (double *)((char *)v68 + v441);
                    v445 = *((unsigned __int8 *)v68 + v441 + 8);
                    if ((v443 & 1) != 0)
                    {
                      if (!v445)
                        return 0;
                    }
                    else
                    {
                      if (*v442 != *v444)
                        LOBYTE(v445) = 1;
                      if ((v445 & 1) != 0)
                        return 0;
                    }
                    v446 = v793[108];
                    v447 = (double *)((char *)v811 + v446);
                    v448 = *((_BYTE *)v811 + v446 + 8);
                    v449 = (double *)((char *)v68 + v446);
                    v450 = *((unsigned __int8 *)v68 + v446 + 8);
                    if ((v448 & 1) != 0)
                    {
                      if (!v450)
                        return 0;
                    }
                    else
                    {
                      if (*v447 != *v449)
                        LOBYTE(v450) = 1;
                      if ((v450 & 1) != 0)
                        return 0;
                    }
                    v451 = v793[109];
                    v452 = (uint64_t *)((char *)v811 + v451);
                    v453 = *((_BYTE *)v811 + v451 + 8);
                    v454 = (uint64_t *)((char *)v68 + v451);
                    v455 = *((unsigned __int8 *)v68 + v451 + 8);
                    if ((v453 & 1) != 0)
                    {
                      if (!v455)
                        return 0;
                    }
                    else
                    {
                      if (*v452 != *v454)
                        LOBYTE(v455) = 1;
                      if ((v455 & 1) != 0)
                        return 0;
                    }
                    v456 = v793[110];
                    v457 = (uint64_t *)((char *)v811 + v456);
                    v458 = *((_BYTE *)v811 + v456 + 8);
                    v459 = (uint64_t *)((char *)v68 + v456);
                    v460 = *((unsigned __int8 *)v68 + v456 + 8);
                    if ((v458 & 1) != 0)
                    {
                      if (!v460)
                        return 0;
                    }
                    else
                    {
                      if (*v457 != *v459)
                        LOBYTE(v460) = 1;
                      if ((v460 & 1) != 0)
                        return 0;
                    }
                    v461 = v793[111];
                    v462 = (uint64_t *)((char *)v811 + v461);
                    v463 = *((_BYTE *)v811 + v461 + 8);
                    v464 = (uint64_t *)((char *)v68 + v461);
                    v465 = *((unsigned __int8 *)v68 + v461 + 8);
                    if ((v463 & 1) != 0)
                    {
                      if (!v465)
                        return 0;
                    }
                    else
                    {
                      if (*v462 != *v464)
                        LOBYTE(v465) = 1;
                      if ((v465 & 1) != 0)
                        return 0;
                    }
                    v466 = v793[112];
                    v467 = (uint64_t *)((char *)v811 + v466);
                    v468 = *((_BYTE *)v811 + v466 + 8);
                    v469 = (uint64_t *)((char *)v68 + v466);
                    v470 = *((unsigned __int8 *)v68 + v466 + 8);
                    if ((v468 & 1) != 0)
                    {
                      if (!v470)
                        return 0;
                    }
                    else
                    {
                      if (*v467 != *v469)
                        LOBYTE(v470) = 1;
                      if ((v470 & 1) != 0)
                        return 0;
                    }
                    v471 = v793[113];
                    v472 = (uint64_t *)((char *)v811 + v471);
                    v473 = *((_BYTE *)v811 + v471 + 8);
                    v474 = (uint64_t *)((char *)v68 + v471);
                    v475 = *((unsigned __int8 *)v68 + v471 + 8);
                    if ((v473 & 1) != 0)
                    {
                      if (!v475)
                        return 0;
                    }
                    else
                    {
                      if (*v472 != *v474)
                        LOBYTE(v475) = 1;
                      if ((v475 & 1) != 0)
                        return 0;
                    }
                    v476 = v793[114];
                    v477 = (uint64_t *)((char *)v811 + v476);
                    v478 = *((_BYTE *)v811 + v476 + 8);
                    v479 = (uint64_t *)((char *)v68 + v476);
                    v480 = *((unsigned __int8 *)v68 + v476 + 8);
                    if ((v478 & 1) != 0)
                    {
                      if (!v480)
                        return 0;
                    }
                    else
                    {
                      if (*v477 != *v479)
                        LOBYTE(v480) = 1;
                      if ((v480 & 1) != 0)
                        return 0;
                    }
                    v481 = v793[115];
                    v482 = (uint64_t *)((char *)v811 + v481);
                    v483 = *((_BYTE *)v811 + v481 + 8);
                    v484 = (uint64_t *)((char *)v68 + v481);
                    v485 = *((unsigned __int8 *)v68 + v481 + 8);
                    if ((v483 & 1) != 0)
                    {
                      if (!v485)
                        return 0;
                    }
                    else
                    {
                      if (*v482 != *v484)
                        LOBYTE(v485) = 1;
                      if ((v485 & 1) != 0)
                        return 0;
                    }
                    v486 = v793[116];
                    v487 = (uint64_t *)((char *)v811 + v486);
                    v488 = *((_BYTE *)v811 + v486 + 8);
                    v489 = (uint64_t *)((char *)v68 + v486);
                    v490 = *((unsigned __int8 *)v68 + v486 + 8);
                    if ((v488 & 1) != 0)
                    {
                      if (!v490)
                        return 0;
                    }
                    else
                    {
                      if (*v487 != *v489)
                        LOBYTE(v490) = 1;
                      if ((v490 & 1) != 0)
                        return 0;
                    }
                    v491 = v793[117];
                    v492 = (double *)((char *)v811 + v491);
                    v493 = *((_BYTE *)v811 + v491 + 8);
                    v494 = (double *)((char *)v68 + v491);
                    v495 = *((unsigned __int8 *)v68 + v491 + 8);
                    if ((v493 & 1) != 0)
                    {
                      if (!v495)
                        return 0;
                    }
                    else
                    {
                      if (*v492 != *v494)
                        LOBYTE(v495) = 1;
                      if ((v495 & 1) != 0)
                        return 0;
                    }
                    v496 = v793[118];
                    v497 = *((unsigned __int8 *)v811 + v496);
                    v498 = *((unsigned __int8 *)v68 + v496);
                    if (v497 == 2)
                    {
                      if (v498 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v499 = (v497 & 1) == 0;
                      if (v498 == 2 || ((v499 ^ v498) & 1) == 0)
                        return result;
                    }
                    v500 = v793[119];
                    v501 = (double *)((char *)v811 + v500);
                    v502 = *((_BYTE *)v811 + v500 + 8);
                    v503 = (double *)((char *)v68 + v500);
                    v504 = *((unsigned __int8 *)v68 + v500 + 8);
                    if ((v502 & 1) != 0)
                    {
                      if (!v504)
                        return 0;
                    }
                    else
                    {
                      if (*v501 != *v503)
                        LOBYTE(v504) = 1;
                      if ((v504 & 1) != 0)
                        return 0;
                    }
                    v505 = v793[120];
                    v506 = (double *)((char *)v811 + v505);
                    v507 = *((_BYTE *)v811 + v505 + 8);
                    v508 = (double *)((char *)v68 + v505);
                    v509 = *((unsigned __int8 *)v68 + v505 + 8);
                    if ((v507 & 1) != 0)
                    {
                      if (!v509)
                        return 0;
                    }
                    else
                    {
                      if (*v506 != *v508)
                        LOBYTE(v509) = 1;
                      if ((v509 & 1) != 0)
                        return 0;
                    }
                    v510 = v793[121];
                    v511 = (uint64_t *)((char *)v811 + v510);
                    v512 = *((_BYTE *)v811 + v510 + 8);
                    v513 = (uint64_t *)((char *)v68 + v510);
                    v514 = *((unsigned __int8 *)v68 + v510 + 8);
                    if ((v512 & 1) != 0)
                    {
                      if (!v514)
                        return 0;
                    }
                    else
                    {
                      if (*v511 != *v513)
                        LOBYTE(v514) = 1;
                      if ((v514 & 1) != 0)
                        return 0;
                    }
                    v515 = v793[122];
                    v516 = *((unsigned __int8 *)v811 + v515);
                    v517 = *((unsigned __int8 *)v68 + v515);
                    if (v516 == 2)
                    {
                      if (v517 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v518 = (v516 & 1) == 0;
                      if (v517 == 2 || ((v518 ^ v517) & 1) == 0)
                        return result;
                    }
                    v519 = v793[123];
                    v520 = *((unsigned __int8 *)v811 + v519);
                    v521 = *((unsigned __int8 *)v68 + v519);
                    if (v520 == 2)
                    {
                      if (v521 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v522 = (v520 & 1) == 0;
                      if (v521 == 2 || ((v522 ^ v521) & 1) == 0)
                        return result;
                    }
                    v523 = v793[124];
                    v524 = *((unsigned __int8 *)v811 + v523);
                    v525 = *((unsigned __int8 *)v68 + v523);
                    if (v524 == 2)
                    {
                      if (v525 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v526 = (v524 & 1) == 0;
                      if (v525 == 2 || ((v526 ^ v525) & 1) == 0)
                        return result;
                    }
                    v527 = v793[125];
                    v528 = (uint64_t *)((char *)v811 + v527);
                    v529 = *((_BYTE *)v811 + v527 + 8);
                    v530 = (uint64_t *)((char *)v68 + v527);
                    v531 = *((unsigned __int8 *)v68 + v527 + 8);
                    if ((v529 & 1) != 0)
                    {
                      if (!v531)
                        return 0;
                    }
                    else
                    {
                      if (*v528 != *v530)
                        LOBYTE(v531) = 1;
                      if ((v531 & 1) != 0)
                        return 0;
                    }
                    v532 = v793[126];
                    v533 = (double *)((char *)v811 + v532);
                    v534 = *((_BYTE *)v811 + v532 + 8);
                    v535 = (double *)((char *)v68 + v532);
                    v536 = *((unsigned __int8 *)v68 + v532 + 8);
                    if ((v534 & 1) != 0)
                    {
                      if (!v536)
                        return 0;
                    }
                    else
                    {
                      if (*v533 != *v535)
                        LOBYTE(v536) = 1;
                      if ((v536 & 1) != 0)
                        return 0;
                    }
                    v537 = v793[127];
                    v538 = (double *)((char *)v811 + v537);
                    v539 = *((_BYTE *)v811 + v537 + 8);
                    v540 = (double *)((char *)v68 + v537);
                    v541 = *((unsigned __int8 *)v68 + v537 + 8);
                    if ((v539 & 1) != 0)
                    {
                      if (!v541)
                        return 0;
                    }
                    else
                    {
                      if (*v538 != *v540)
                        LOBYTE(v541) = 1;
                      if ((v541 & 1) != 0)
                        return 0;
                    }
                    v542 = v793[128];
                    v543 = (uint64_t *)((char *)v811 + v542);
                    v544 = *((_BYTE *)v811 + v542 + 8);
                    v545 = (uint64_t *)((char *)v68 + v542);
                    v546 = *((unsigned __int8 *)v68 + v542 + 8);
                    if ((v544 & 1) != 0)
                    {
                      if (!v546)
                        return 0;
                    }
                    else
                    {
                      if (*v543 != *v545)
                        LOBYTE(v546) = 1;
                      if ((v546 & 1) != 0)
                        return 0;
                    }
                    v547 = v793[129];
                    v548 = (uint64_t *)((char *)v811 + v547);
                    v549 = *((_BYTE *)v811 + v547 + 8);
                    v550 = (uint64_t *)((char *)v68 + v547);
                    v551 = *((unsigned __int8 *)v68 + v547 + 8);
                    if ((v549 & 1) != 0)
                    {
                      if (!v551)
                        return 0;
                    }
                    else
                    {
                      if (*v548 != *v550)
                        LOBYTE(v551) = 1;
                      if ((v551 & 1) != 0)
                        return 0;
                    }
                    v552 = v793[130];
                    v553 = (uint64_t *)((char *)v811 + v552);
                    v554 = *((_BYTE *)v811 + v552 + 8);
                    v555 = (uint64_t *)((char *)v68 + v552);
                    v556 = *((unsigned __int8 *)v68 + v552 + 8);
                    if ((v554 & 1) != 0)
                    {
                      if (!v556)
                        return 0;
                    }
                    else
                    {
                      if (*v553 != *v555)
                        LOBYTE(v556) = 1;
                      if ((v556 & 1) != 0)
                        return 0;
                    }
                    v557 = v793[131];
                    v558 = (uint64_t *)((char *)v811 + v557);
                    v559 = *((_BYTE *)v811 + v557 + 8);
                    v560 = (uint64_t *)((char *)v68 + v557);
                    v561 = *((unsigned __int8 *)v68 + v557 + 8);
                    if ((v559 & 1) != 0)
                    {
                      if (!v561)
                        return 0;
                    }
                    else
                    {
                      if (*v558 != *v560)
                        LOBYTE(v561) = 1;
                      if ((v561 & 1) != 0)
                        return 0;
                    }
                    v562 = v793[132];
                    v563 = (double *)((char *)v811 + v562);
                    v564 = *((_BYTE *)v811 + v562 + 8);
                    v565 = (double *)((char *)v68 + v562);
                    v566 = *((unsigned __int8 *)v68 + v562 + 8);
                    if ((v564 & 1) != 0)
                    {
                      if (!v566)
                        return 0;
                    }
                    else
                    {
                      if (*v563 != *v565)
                        LOBYTE(v566) = 1;
                      if ((v566 & 1) != 0)
                        return 0;
                    }
                    v567 = v793[133];
                    v568 = *((unsigned __int8 *)v811 + v567);
                    v569 = *((unsigned __int8 *)v68 + v567);
                    if (v568 == 2)
                    {
                      if (v569 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v570 = (v568 & 1) == 0;
                      if (v569 == 2 || ((v570 ^ v569) & 1) == 0)
                        return result;
                    }
                    v571 = v793[134];
                    v572 = (double *)((char *)v811 + v571);
                    v573 = *((_BYTE *)v811 + v571 + 8);
                    v574 = (double *)((char *)v68 + v571);
                    v575 = *((unsigned __int8 *)v68 + v571 + 8);
                    if ((v573 & 1) != 0)
                    {
                      if (!v575)
                        return 0;
                    }
                    else
                    {
                      if (*v572 != *v574)
                        LOBYTE(v575) = 1;
                      if ((v575 & 1) != 0)
                        return 0;
                    }
                    v576 = v793[135];
                    v577 = *(_QWORD **)((char *)v811 + v576);
                    v578 = *(_QWORD **)((char *)v68 + v576);
                    if (v577)
                    {
                      if (!v578 || !sub_100248904(v577, v578))
                        return 0;
                    }
                    else if (v578)
                    {
                      return 0;
                    }
                    v579 = v793[136];
                    v580 = (double *)((char *)v811 + v579);
                    v581 = *((_BYTE *)v811 + v579 + 8);
                    v582 = (double *)((char *)v68 + v579);
                    v583 = *((unsigned __int8 *)v68 + v579 + 8);
                    if ((v581 & 1) != 0)
                    {
                      if (!v583)
                        return 0;
                    }
                    else
                    {
                      if (*v580 != *v582)
                        LOBYTE(v583) = 1;
                      if ((v583 & 1) != 0)
                        return 0;
                    }
                    v584 = v793[137];
                    v585 = *((unsigned __int8 *)v811 + v584);
                    v586 = *((unsigned __int8 *)v68 + v584);
                    if (v585 == 2)
                    {
                      if (v586 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v587 = (v585 & 1) == 0;
                      if (v586 == 2 || ((v587 ^ v586) & 1) == 0)
                        return result;
                    }
                    v588 = v793[138];
                    v589 = *(uint64_t *)((char *)v811 + v588);
                    v590 = *(uint64_t *)((char *)v68 + v588);
                    if (v589)
                    {
                      if (!v590)
                        return 0;
                      swift_bridgeObjectRetain(*(uint64_t *)((char *)v68 + v588));
                      v591 = swift_bridgeObjectRetain(v589);
                      v592 = sub_1003260A8(v591, v590);
                      swift_bridgeObjectRelease(v589);
                      swift_bridgeObjectRelease(v590);
                      if ((v592 & 1) == 0)
                        return 0;
                    }
                    else if (v590)
                    {
                      return 0;
                    }
                    v593 = v793[139];
                    v594 = *((unsigned __int8 *)v811 + v593);
                    v595 = *((unsigned __int8 *)v68 + v593);
                    if (v594 == 2)
                    {
                      if (v595 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v596 = (v594 & 1) == 0;
                      if (v595 == 2 || ((v596 ^ v595) & 1) == 0)
                        return result;
                    }
                    v597 = v793[140];
                    v598 = (double *)((char *)v811 + v597);
                    v599 = *((_BYTE *)v811 + v597 + 8);
                    v600 = (double *)((char *)v68 + v597);
                    v601 = *((unsigned __int8 *)v68 + v597 + 8);
                    if ((v599 & 1) != 0)
                    {
                      if (!v601)
                        return 0;
                    }
                    else
                    {
                      if (*v598 != *v600)
                        LOBYTE(v601) = 1;
                      if ((v601 & 1) != 0)
                        return 0;
                    }
                    v602 = v793[141];
                    v603 = (double *)((char *)v811 + v602);
                    v604 = *((_BYTE *)v811 + v602 + 8);
                    v605 = (double *)((char *)v68 + v602);
                    v606 = *((unsigned __int8 *)v68 + v602 + 8);
                    if ((v604 & 1) != 0)
                    {
                      if (!v606)
                        return 0;
                    }
                    else
                    {
                      if (*v603 != *v605)
                        LOBYTE(v606) = 1;
                      if ((v606 & 1) != 0)
                        return 0;
                    }
                    v607 = v793[142];
                    v608 = *((unsigned __int8 *)v811 + v607);
                    v609 = *((unsigned __int8 *)v68 + v607);
                    if (v608 == 2)
                    {
                      if (v609 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v610 = (v608 & 1) == 0;
                      if (v609 == 2 || ((v610 ^ v609) & 1) == 0)
                        return result;
                    }
                    v611 = v793[143];
                    v612 = *((unsigned __int8 *)v811 + v611);
                    v613 = *((unsigned __int8 *)v68 + v611);
                    if (v612 == 2)
                    {
                      if (v613 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v614 = (v612 & 1) == 0;
                      if (v613 == 2 || ((v614 ^ v613) & 1) == 0)
                        return result;
                    }
                    v615 = v793[144];
                    v616 = (uint64_t *)((char *)v811 + v615);
                    v617 = *((_BYTE *)v811 + v615 + 8);
                    v618 = (uint64_t *)((char *)v68 + v615);
                    v619 = *((unsigned __int8 *)v68 + v615 + 8);
                    if ((v617 & 1) != 0)
                    {
                      if (!v619)
                        return 0;
                    }
                    else
                    {
                      if (*v616 != *v618)
                        LOBYTE(v619) = 1;
                      if ((v619 & 1) != 0)
                        return 0;
                    }
                    v620 = v793[145];
                    v621 = (uint64_t *)((char *)v811 + v620);
                    v622 = *((_BYTE *)v811 + v620 + 8);
                    v623 = (uint64_t *)((char *)v68 + v620);
                    v624 = *((unsigned __int8 *)v68 + v620 + 8);
                    if ((v622 & 1) != 0)
                    {
                      if (!v624)
                        return 0;
                    }
                    else
                    {
                      if (*v621 != *v623)
                        LOBYTE(v624) = 1;
                      if ((v624 & 1) != 0)
                        return 0;
                    }
                    v625 = v793[146];
                    v626 = (uint64_t *)((char *)v811 + v625);
                    v627 = *((_BYTE *)v811 + v625 + 8);
                    v628 = (uint64_t *)((char *)v68 + v625);
                    v629 = *((unsigned __int8 *)v68 + v625 + 8);
                    if ((v627 & 1) != 0)
                    {
                      if (!v629)
                        return 0;
                    }
                    else
                    {
                      if (*v626 != *v628)
                        LOBYTE(v629) = 1;
                      if ((v629 & 1) != 0)
                        return 0;
                    }
                    v630 = v793[147];
                    v631 = (uint64_t *)((char *)v811 + v630);
                    v632 = *((_BYTE *)v811 + v630 + 8);
                    v633 = (uint64_t *)((char *)v68 + v630);
                    v634 = *((unsigned __int8 *)v68 + v630 + 8);
                    if ((v632 & 1) != 0)
                    {
                      if (!v634)
                        return 0;
                    }
                    else
                    {
                      if (*v631 != *v633)
                        LOBYTE(v634) = 1;
                      if ((v634 & 1) != 0)
                        return 0;
                    }
                    v635 = v793[148];
                    v636 = (uint64_t *)((char *)v811 + v635);
                    v637 = *((_BYTE *)v811 + v635 + 8);
                    v638 = (uint64_t *)((char *)v68 + v635);
                    v639 = *((unsigned __int8 *)v68 + v635 + 8);
                    if ((v637 & 1) != 0)
                    {
                      if (!v639)
                        return 0;
                    }
                    else
                    {
                      if (*v636 != *v638)
                        LOBYTE(v639) = 1;
                      if ((v639 & 1) != 0)
                        return 0;
                    }
                    v640 = v793[149];
                    v641 = (uint64_t *)((char *)v811 + v640);
                    v642 = *((_BYTE *)v811 + v640 + 8);
                    v643 = (uint64_t *)((char *)v68 + v640);
                    v644 = *((unsigned __int8 *)v68 + v640 + 8);
                    if ((v642 & 1) != 0)
                    {
                      if (!v644)
                        return 0;
                    }
                    else
                    {
                      if (*v641 != *v643)
                        LOBYTE(v644) = 1;
                      if ((v644 & 1) != 0)
                        return 0;
                    }
                    v645 = v793[150];
                    v646 = (uint64_t *)((char *)v811 + v645);
                    v647 = *((_BYTE *)v811 + v645 + 8);
                    v648 = (uint64_t *)((char *)v68 + v645);
                    v649 = *((unsigned __int8 *)v68 + v645 + 8);
                    if ((v647 & 1) != 0)
                    {
                      if (!v649)
                        return 0;
                    }
                    else
                    {
                      if (*v646 != *v648)
                        LOBYTE(v649) = 1;
                      if ((v649 & 1) != 0)
                        return 0;
                    }
                    v650 = v793[151];
                    v651 = (uint64_t *)((char *)v811 + v650);
                    v652 = *((_BYTE *)v811 + v650 + 8);
                    v653 = (uint64_t *)((char *)v68 + v650);
                    v654 = *((unsigned __int8 *)v68 + v650 + 8);
                    if ((v652 & 1) != 0)
                    {
                      if (!v654)
                        return 0;
                    }
                    else
                    {
                      if (*v651 != *v653)
                        LOBYTE(v654) = 1;
                      if ((v654 & 1) != 0)
                        return 0;
                    }
                    v655 = v793[152];
                    v656 = (uint64_t *)((char *)v811 + v655);
                    v657 = *((_BYTE *)v811 + v655 + 8);
                    v658 = (uint64_t *)((char *)v68 + v655);
                    v659 = *((unsigned __int8 *)v68 + v655 + 8);
                    if ((v657 & 1) != 0)
                    {
                      if (!v659)
                        return 0;
                    }
                    else
                    {
                      if (*v656 != *v658)
                        LOBYTE(v659) = 1;
                      if ((v659 & 1) != 0)
                        return 0;
                    }
                    v660 = v793[153];
                    v661 = (uint64_t *)((char *)v811 + v660);
                    v662 = *((_BYTE *)v811 + v660 + 8);
                    v663 = (uint64_t *)((char *)v68 + v660);
                    v664 = *((unsigned __int8 *)v68 + v660 + 8);
                    if ((v662 & 1) != 0)
                    {
                      if (!v664)
                        return 0;
                    }
                    else
                    {
                      if (*v661 != *v663)
                        LOBYTE(v664) = 1;
                      if ((v664 & 1) != 0)
                        return 0;
                    }
                    v665 = v793[154];
                    v666 = (uint64_t *)((char *)v811 + v665);
                    v667 = *((_BYTE *)v811 + v665 + 8);
                    v668 = (uint64_t *)((char *)v68 + v665);
                    v669 = *((unsigned __int8 *)v68 + v665 + 8);
                    if ((v667 & 1) != 0)
                    {
                      if (!v669)
                        return 0;
                    }
                    else
                    {
                      if (*v666 != *v668)
                        LOBYTE(v669) = 1;
                      if ((v669 & 1) != 0)
                        return 0;
                    }
                    v670 = v793[155];
                    v671 = (uint64_t *)((char *)v811 + v670);
                    v672 = *((_BYTE *)v811 + v670 + 8);
                    v673 = (uint64_t *)((char *)v68 + v670);
                    v674 = *((unsigned __int8 *)v68 + v670 + 8);
                    if ((v672 & 1) != 0)
                    {
                      if (!v674)
                        return 0;
                    }
                    else
                    {
                      if (*v671 != *v673)
                        LOBYTE(v674) = 1;
                      if ((v674 & 1) != 0)
                        return 0;
                    }
                    v675 = v793[156];
                    v676 = (uint64_t *)((char *)v811 + v675);
                    v677 = *((_BYTE *)v811 + v675 + 8);
                    v678 = (uint64_t *)((char *)v68 + v675);
                    v679 = *((unsigned __int8 *)v68 + v675 + 8);
                    if ((v677 & 1) != 0)
                    {
                      if (!v679)
                        return 0;
                    }
                    else
                    {
                      if (*v676 != *v678)
                        LOBYTE(v679) = 1;
                      if ((v679 & 1) != 0)
                        return 0;
                    }
                    v680 = v793[157];
                    v681 = (uint64_t *)((char *)v811 + v680);
                    v682 = *((_BYTE *)v811 + v680 + 8);
                    v683 = (uint64_t *)((char *)v68 + v680);
                    v684 = *((unsigned __int8 *)v68 + v680 + 8);
                    if ((v682 & 1) != 0)
                    {
                      if (!v684)
                        return 0;
                    }
                    else
                    {
                      if (*v681 != *v683)
                        LOBYTE(v684) = 1;
                      if ((v684 & 1) != 0)
                        return 0;
                    }
                    v685 = v793[158];
                    v686 = (uint64_t *)((char *)v811 + v685);
                    v687 = *((_BYTE *)v811 + v685 + 8);
                    v688 = (uint64_t *)((char *)v68 + v685);
                    v689 = *((unsigned __int8 *)v68 + v685 + 8);
                    if ((v687 & 1) != 0)
                    {
                      if (!v689)
                        return 0;
                    }
                    else
                    {
                      if (*v686 != *v688)
                        LOBYTE(v689) = 1;
                      if ((v689 & 1) != 0)
                        return 0;
                    }
                    v690 = v793[159];
                    v691 = (double *)((char *)v811 + v690);
                    v692 = *((_BYTE *)v811 + v690 + 8);
                    v693 = (double *)((char *)v68 + v690);
                    v694 = *((unsigned __int8 *)v68 + v690 + 8);
                    if ((v692 & 1) != 0)
                    {
                      if (!v694)
                        return 0;
                    }
                    else
                    {
                      if (*v691 != *v693)
                        LOBYTE(v694) = 1;
                      if ((v694 & 1) != 0)
                        return 0;
                    }
                    v695 = v793[160];
                    v696 = (double *)((char *)v811 + v695);
                    v697 = *((_BYTE *)v811 + v695 + 8);
                    v698 = (double *)((char *)v68 + v695);
                    v699 = *((unsigned __int8 *)v68 + v695 + 8);
                    if ((v697 & 1) != 0)
                    {
                      if (!v699)
                        return 0;
                    }
                    else
                    {
                      if (*v696 != *v698)
                        LOBYTE(v699) = 1;
                      if ((v699 & 1) != 0)
                        return 0;
                    }
                    v700 = v793[161];
                    v701 = *((unsigned __int8 *)v811 + v700);
                    v702 = *((unsigned __int8 *)v68 + v700);
                    if (v701 == 2)
                    {
                      if (v702 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v703 = (v701 & 1) == 0;
                      if (v702 == 2 || ((v703 ^ v702) & 1) == 0)
                        return result;
                    }
                    v704 = v793[162];
                    v705 = *((unsigned __int8 *)v811 + v704);
                    v706 = *((unsigned __int8 *)v68 + v704);
                    if (v705 == 2)
                    {
                      if (v706 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v707 = (v705 & 1) == 0;
                      if (v706 == 2 || ((v707 ^ v706) & 1) == 0)
                        return result;
                    }
                    v708 = v793[163];
                    v709 = (double *)((char *)v811 + v708);
                    v710 = *((_BYTE *)v811 + v708 + 8);
                    v711 = (double *)((char *)v68 + v708);
                    v712 = *((unsigned __int8 *)v68 + v708 + 8);
                    if ((v710 & 1) != 0)
                    {
                      if (!v712)
                        return 0;
                    }
                    else
                    {
                      if (*v709 != *v711)
                        LOBYTE(v712) = 1;
                      if ((v712 & 1) != 0)
                        return 0;
                    }
                    v713 = v793[164];
                    v714 = (double *)((char *)v811 + v713);
                    v715 = *((_BYTE *)v811 + v713 + 8);
                    v716 = (double *)((char *)v68 + v713);
                    v717 = *((unsigned __int8 *)v68 + v713 + 8);
                    if ((v715 & 1) != 0)
                    {
                      if (!v717)
                        return 0;
                    }
                    else
                    {
                      if (*v714 != *v716)
                        LOBYTE(v717) = 1;
                      if ((v717 & 1) != 0)
                        return 0;
                    }
                    v718 = v793[165];
                    v719 = *((unsigned __int8 *)v811 + v718);
                    v720 = *((unsigned __int8 *)v68 + v718);
                    if (v719 == 2)
                    {
                      if (v720 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v721 = (v719 & 1) == 0;
                      if (v720 == 2 || ((v721 ^ v720) & 1) == 0)
                        return result;
                    }
                    v722 = v793[166];
                    v723 = (_DWORD *)((char *)v811 + v722);
                    v724 = *((_BYTE *)v811 + v722 + 4);
                    v725 = (_DWORD *)((char *)v68 + v722);
                    v726 = *((unsigned __int8 *)v68 + v722 + 4);
                    if ((v724 & 1) != 0)
                    {
                      if (!v726)
                        return 0;
                    }
                    else
                    {
                      if (*v723 != *v725)
                        LOBYTE(v726) = 1;
                      if ((v726 & 1) != 0)
                        return 0;
                    }
                    v727 = v793[167];
                    v728 = (uint64_t *)((char *)v811 + v727);
                    v729 = *((_BYTE *)v811 + v727 + 8);
                    v730 = (uint64_t *)((char *)v68 + v727);
                    v731 = *((unsigned __int8 *)v68 + v727 + 8);
                    if ((v729 & 1) != 0)
                    {
                      if (!v731)
                        return 0;
                    }
                    else
                    {
                      if (*v728 != *v730)
                        LOBYTE(v731) = 1;
                      if ((v731 & 1) != 0)
                        return 0;
                    }
                    v732 = v793[168];
                    v733 = (double *)((char *)v811 + v732);
                    v734 = *((_BYTE *)v811 + v732 + 8);
                    v735 = (double *)((char *)v68 + v732);
                    v736 = *((unsigned __int8 *)v68 + v732 + 8);
                    if ((v734 & 1) != 0)
                    {
                      if (!v736)
                        return 0;
                    }
                    else
                    {
                      if (*v733 != *v735)
                        LOBYTE(v736) = 1;
                      if ((v736 & 1) != 0)
                        return 0;
                    }
                    v737 = v793[169];
                    v738 = (double *)((char *)v811 + v737);
                    v739 = *((_BYTE *)v811 + v737 + 8);
                    v740 = (double *)((char *)v68 + v737);
                    v741 = *((unsigned __int8 *)v68 + v737 + 8);
                    if ((v739 & 1) != 0)
                    {
                      if (!v741)
                        return 0;
                    }
                    else
                    {
                      if (*v738 != *v740)
                        LOBYTE(v741) = 1;
                      if ((v741 & 1) != 0)
                        return 0;
                    }
                    v742 = v793[170];
                    v743 = (double *)((char *)v811 + v742);
                    v744 = *((_BYTE *)v811 + v742 + 8);
                    v745 = (double *)((char *)v68 + v742);
                    v746 = *((unsigned __int8 *)v68 + v742 + 8);
                    if ((v744 & 1) != 0)
                    {
                      if (!v746)
                        return 0;
                    }
                    else
                    {
                      if (*v743 != *v745)
                        LOBYTE(v746) = 1;
                      if ((v746 & 1) != 0)
                        return 0;
                    }
                    v747 = v793[171];
                    v748 = (double *)((char *)v811 + v747);
                    v749 = *((_BYTE *)v811 + v747 + 8);
                    v750 = (double *)((char *)v68 + v747);
                    v751 = *((unsigned __int8 *)v68 + v747 + 8);
                    if ((v749 & 1) != 0)
                    {
                      if (!v751)
                        return 0;
                    }
                    else
                    {
                      if (*v748 != *v750)
                        LOBYTE(v751) = 1;
                      if ((v751 & 1) != 0)
                        return 0;
                    }
                    v752 = v793[172];
                    v753 = (double *)((char *)v811 + v752);
                    v754 = *((_BYTE *)v811 + v752 + 8);
                    v755 = (double *)((char *)v68 + v752);
                    v756 = *((unsigned __int8 *)v68 + v752 + 8);
                    if ((v754 & 1) != 0)
                    {
                      if (!v756)
                        return 0;
                    }
                    else
                    {
                      if (*v753 != *v755)
                        LOBYTE(v756) = 1;
                      if ((v756 & 1) != 0)
                        return 0;
                    }
                    v757 = v793[173];
                    v758 = (double *)((char *)v811 + v757);
                    v759 = *((_BYTE *)v811 + v757 + 8);
                    v760 = (double *)((char *)v68 + v757);
                    v761 = *((unsigned __int8 *)v68 + v757 + 8);
                    if ((v759 & 1) != 0)
                    {
                      if (!v761)
                        return 0;
                    }
                    else
                    {
                      if (*v758 != *v760)
                        LOBYTE(v761) = 1;
                      if ((v761 & 1) != 0)
                        return 0;
                    }
                    v762 = v793[174];
                    v763 = *((unsigned __int8 *)v811 + v762);
                    v764 = *((unsigned __int8 *)v68 + v762);
                    if (v763 == 2)
                    {
                      if (v764 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v765 = (v763 & 1) == 0;
                      if (v764 == 2 || ((v765 ^ v764) & 1) == 0)
                        return result;
                    }
                    v766 = v793[175];
                    v767 = (double *)((char *)v811 + v766);
                    v768 = *((_BYTE *)v811 + v766 + 8);
                    v769 = (double *)((char *)v68 + v766);
                    v770 = *((unsigned __int8 *)v68 + v766 + 8);
                    if ((v768 & 1) == 0)
                    {
                      if (*v767 != *v769)
                        LOBYTE(v770) = 1;
                      if ((v770 & 1) != 0)
                        return 0;
                      goto LABEL_999;
                    }
                    if (v770)
                    {
LABEL_999:
                      v771 = v793[176];
                      v772 = (double *)((char *)v811 + v771);
                      v773 = *((_BYTE *)v811 + v771 + 8);
                      v774 = (double *)((char *)v68 + v771);
                      v775 = *((_BYTE *)v68 + v771 + 8);
                      if ((v773 & 1) == 0)
                      {
                        if (*v772 != *v774)
                          v775 = 1;
                        return (v775 & 1) == 0;
                      }
                      return (v775 & 1) != 0;
                    }
                    return 0;
                  }
                }
                else if (!v219)
                {
                  v780 = v217;
                  v263 = v212;
                  v264 = v208;
                  sub_1006C9628(v205, v204, v207, v206, v209, v208, 0, v211, v212, v213, v214, v215, v216, v780);
                  sub_1006C9628(v804, v805, v806, v807, v808, v809, 0, v810, v803, v802, v801, v798, v800, v799);
                  sub_1006C9720(v205, v204, v207, v206, v209, v264, 0, v211, v263, v797, v795, v796, v794, v792);
                  goto LABEL_392;
                }
                v250 = v205;
                v812 = v205;
                v813 = v204;
                v251 = v204;
                v252 = v207;
                v814 = v207;
                v815 = v206;
                v253 = v206;
                v254 = v209;
                v816 = v209;
                v817 = v208;
                v818 = v210;
                v819 = v211;
                v255 = v211;
                v820 = v212;
                v821 = v213;
                v822 = v214;
                v823 = v215;
                v824 = v216;
                v825 = v217;
                v256 = v804;
                v826 = v804;
                v827 = v805;
                v828 = v806;
                v829 = v807;
                v830 = v808;
                v831 = v809;
                v832 = v219;
                v833 = v810;
                v258 = v802;
                v257 = v803;
                v834 = v803;
                v835 = v802;
                v260 = v800;
                v259 = v801;
                v261 = v798;
                v262 = v799;
                v836 = v801;
                v837 = v798;
                v838 = v800;
                v839 = v799;
                sub_1006C9628(v250, v251, v252, v253, v254, v208, v210, v255, v212, v213, v214, v215, v216, v217);
                sub_1006C9628(v256, v805, v806, v807, v808, v809, v219, v810, v257, v258, v259, v261, v260, v262);
                sub_1006C9658((uint64_t)&v812);
                return 0;
              }
              sub_100004048(v805, (uint64_t *)&unk_1010EA690);
              sub_100004048(v806, (uint64_t *)&unk_1010EA690);
              (*(void (**)(uint64_t, uint64_t))(v809 + 8))(v807, v795);
            }
            v134 = &qword_1010ED570;
            v135 = v810;
LABEL_334:
            sub_100004048(v135, v134);
            return 0;
          }
        }
        else
        {
          sub_10000F9B8(v803, v802, (uint64_t *)&unk_1010EA690);
          if (v148(v147, 1, v795) != 1)
          {
            v150 = v808;
            v149 = v809;
            v151 = v795;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v809 + 32))(v808, v147, v795);
            v152 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v153 = v802;
            v154 = dispatch thunk of static Equatable.== infix(_:_:)(v802, v150, v151, v152);
            v155 = *(void (**)(uint64_t, uint64_t))(v149 + 8);
            v155(v150, v151);
            sub_100004048(v800, (uint64_t *)&unk_1010EA690);
            sub_100004048(v801, (uint64_t *)&unk_1010EA690);
            v155(v153, v151);
            sub_100004048(v803, (uint64_t *)&unk_1010EA690);
            if ((v154 & 1) == 0)
              return 0;
            goto LABEL_336;
          }
          sub_100004048(v800, (uint64_t *)&unk_1010EA690);
          sub_100004048(v801, (uint64_t *)&unk_1010EA690);
          (*(void (**)(uint64_t, uint64_t))(v809 + 8))(v802, v795);
        }
        v134 = &qword_1010ED570;
        v135 = v803;
        goto LABEL_334;
      }
      sub_100004048((uint64_t)v28, &qword_1010ED860);
      sub_100004048((uint64_t)v31, &qword_1010ED860);
      (*(void (**)(uint64_t, uint64_t))(v797 + 8))(v794, v799);
    }
    v134 = (uint64_t *)&unk_10110EE90;
    v135 = v798;
    goto LABEL_334;
  }
  return result;
}

char *sub_1006C8E68()
{
  char *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  int64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  int64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  int64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;

  v0 = sub_1007C7694(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v2 = *((_QWORD *)v0 + 2);
  v1 = *((_QWORD *)v0 + 3);
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    v0 = sub_1007C7694((char *)(v1 > 1), v2 + 1, 1, v0);
    v1 = *((_QWORD *)v0 + 3);
    v3 = v1 >> 1;
  }
  *((_QWORD *)v0 + 2) = v4;
  v5 = &v0[40 * v2];
  *((_OWORD *)v5 + 2) = xmmword_100E49730;
  *((_QWORD *)v5 + 6) = 0xE800000000000000;
  *((_QWORD *)v5 + 7) = 2458820592;
  *((_QWORD *)v5 + 8) = 0xA400000000000000;
  v6 = v2 + 2;
  if (v3 <= v4)
    v0 = sub_1007C7694((char *)(v1 > 1), v6, 1, v0);
  *((_QWORD *)v0 + 2) = v6;
  v7 = &v0[40 * v4];
  *((_OWORD *)v7 + 2) = xmmword_100E49740;
  *((_QWORD *)v7 + 6) = 0xE400000000000000;
  *((_QWORD *)v7 + 7) = 2996477936;
  *((_QWORD *)v7 + 8) = 0xA400000000000000;
  v9 = *((_QWORD *)v0 + 2);
  v8 = *((_QWORD *)v0 + 3);
  v10 = v8 >> 1;
  v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    v0 = sub_1007C7694((char *)(v8 > 1), v9 + 1, 1, v0);
    v8 = *((_QWORD *)v0 + 3);
    v10 = v8 >> 1;
  }
  *((_QWORD *)v0 + 2) = v11;
  v12 = &v0[40 * v9];
  *((_OWORD *)v12 + 2) = xmmword_100E49750;
  *((_QWORD *)v12 + 6) = 0xE600000000000000;
  *((_QWORD *)v12 + 7) = 3079905264;
  *((_QWORD *)v12 + 8) = 0xA400000000000000;
  v13 = v9 + 2;
  if (v10 <= v11)
    v0 = sub_1007C7694((char *)(v8 > 1), v13, 1, v0);
  *((_QWORD *)v0 + 2) = v13;
  v14 = &v0[40 * v11];
  *((_OWORD *)v14 + 2) = xmmword_100E49760;
  *((_QWORD *)v14 + 6) = 0xE700000000000000;
  *((_QWORD *)v14 + 7) = 2626789360;
  *((_QWORD *)v14 + 8) = 0xA400000000000000;
  v16 = *((_QWORD *)v0 + 2);
  v15 = *((_QWORD *)v0 + 3);
  v17 = v15 >> 1;
  v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    v0 = sub_1007C7694((char *)(v15 > 1), v16 + 1, 1, v0);
    v15 = *((_QWORD *)v0 + 3);
    v17 = v15 >> 1;
  }
  *((_QWORD *)v0 + 2) = v18;
  v19 = &v0[40 * v16];
  *((_OWORD *)v19 + 2) = xmmword_100E49770;
  *((_QWORD *)v19 + 6) = 0xE600000000000000;
  *((_QWORD *)v19 + 7) = 2779226096;
  *((_QWORD *)v19 + 8) = 0xA400000000000000;
  v20 = v16 + 2;
  if (v17 <= v18)
    v0 = sub_1007C7694((char *)(v15 > 1), v20, 1, v0);
  *((_QWORD *)v0 + 2) = v20;
  v21 = &v0[40 * v18];
  *((_OWORD *)v21 + 2) = xmmword_100E49780;
  *((_QWORD *)v21 + 6) = 0xE400000000000000;
  *((_QWORD *)v21 + 7) = 2442436592;
  *((_QWORD *)v21 + 8) = 0xA400000000000000;
  v23 = *((_QWORD *)v0 + 2);
  v22 = *((_QWORD *)v0 + 3);
  v24 = v22 >> 1;
  v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    v0 = sub_1007C7694((char *)(v22 > 1), v23 + 1, 1, v0);
    v22 = *((_QWORD *)v0 + 3);
    v24 = v22 >> 1;
  }
  *((_QWORD *)v0 + 2) = v25;
  v26 = &v0[40 * v23];
  *((_OWORD *)v26 + 2) = xmmword_100E49790;
  *((_QWORD *)v26 + 6) = 0xE700000000000000;
  *((_QWORD *)v26 + 7) = 3014107120;
  *((_QWORD *)v26 + 8) = 0xA400000000000000;
  v27 = v23 + 2;
  if (v24 <= v25)
    v0 = sub_1007C7694((char *)(v22 > 1), v27, 1, v0);
  *((_QWORD *)v0 + 2) = v27;
  v28 = &v0[40 * v25];
  *((_OWORD *)v28 + 2) = xmmword_100E497A0;
  *((_QWORD *)v28 + 6) = 0xE800000000000000;
  *((_QWORD *)v28 + 7) = 0x8FB8EF8298E2;
  *((_QWORD *)v28 + 8) = 0xA600000000000000;
  v30 = *((_QWORD *)v0 + 2);
  v29 = *((_QWORD *)v0 + 3);
  v31 = v29 >> 1;
  v32 = v30 + 1;
  if (v29 >> 1 <= v30)
  {
    v0 = sub_1007C7694((char *)(v29 > 1), v30 + 1, 1, v0);
    v29 = *((_QWORD *)v0 + 3);
    v31 = v29 >> 1;
  }
  *((_QWORD *)v0 + 2) = v32;
  v33 = &v0[40 * v30];
  *((_OWORD *)v33 + 2) = xmmword_100E497B0;
  *((_QWORD *)v33 + 6) = 0xE600000000000000;
  *((_QWORD *)v33 + 7) = 3012730864;
  *((_QWORD *)v33 + 8) = 0xA400000000000000;
  v34 = v30 + 2;
  if (v31 <= v32)
    v0 = sub_1007C7694((char *)(v29 > 1), v34, 1, v0);
  *((_QWORD *)v0 + 2) = v34;
  v35 = &v0[40 * v32];
  *((_OWORD *)v35 + 2) = xmmword_100E497C0;
  *((_QWORD *)v35 + 6) = 0xEB00000000656D61;
  *((_QWORD *)v35 + 7) = 2157486064;
  *((_QWORD *)v35 + 8) = 0xA400000000000000;
  v36 = sub_1007C7588(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v38 = *((_QWORD *)v36 + 2);
  v37 = *((_QWORD *)v36 + 3);
  if (v38 >= v37 >> 1)
    v36 = sub_1007C7588((char *)(v37 > 1), v38 + 1, 1, v36);
  *((_QWORD *)v36 + 2) = v38 + 1;
  v39 = &v36[32 * v38];
  *((_OWORD *)v39 + 2) = xmmword_100E497D0;
  *((_QWORD *)v39 + 6) = 0xE500000000000000;
  *((_QWORD *)v39 + 7) = v0;
  return v36;
}

id sub_1006C92E8(id result, char a2)
{
  if (!a2)
    return result;
  return result;
}

uint64_t sub_1006C92F8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AnalyticsEvent.DiscreteType(a2, a1);
  return a2;
}

unint64_t sub_1006C9334(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t result;
  char v8;
  unint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_10001A9A8(&qword_1010F1AE8);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  result = sub_1005191B0(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  v9 = (unint64_t *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    v10 = (uint64_t *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    sub_10001BBBC(v5, v6);
    if (!--v1)
      return (unint64_t)v3;
    v4 = *((_BYTE *)v9 - 16);
    v5 = *(v9 - 1);
    v6 = *v9;
    result = sub_1005191B0(v4);
    v9 += 3;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1006C9434(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  __n128 v6;
  unint64_t result;
  char v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  __n128 v17;
  char v18;
  id v19;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_10001A9A8((uint64_t *)&unk_101111950);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = a1[4];
  v5 = (void *)a1[5];
  result = sub_100519460(v4, v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    v19 = v5;
    return (unint64_t)v3;
  }
  v9 = (void **)(a1 + 7);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v3[6] + v10) = v4;
    *(_QWORD *)(v3[7] + v10) = v5;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 2;
    v4 = (uint64_t)*(v9 - 1);
    v15 = *v9;
    v16 = v5;
    result = sub_100519460(v4, v17);
    v9 = v14;
    v5 = v15;
    if ((v18 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_1006C9528(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_10001A9A8(&qword_101111520);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_100518FF0(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain(v5);
    result = sub_100518FF0(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_1006C9628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a7)
  {
    swift_bridgeObjectRetain(a14);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t sub_1006C9658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 168);
  v12 = *(_OWORD *)(a1 + 192);
  v13 = *(_OWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 208);
  v9 = *(_QWORD *)(a1 + 216);
  sub_1006C9720(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_1006C9720(v14, v2, v3, v4, v5, v6, v7, v8, v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10, v9);
  return a1;
}

uint64_t sub_1006C9720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t result;

  if (a7)
  {
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a14);
  }
  return result;
}

unint64_t sub_1006C9750(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)_swiftEmptyDictionarySingleton;
  sub_10001A9A8(&qword_1011041A0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_QWORD *)(a1 + 32);
  v13 = *(_OWORD *)(a1 + 40);
  result = sub_100518D38(v4);
  if ((v6 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    v8 = v3[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      break;
    v3[2] = v10;
    if (!--v1)
      goto LABEL_8;
    v11 = (_OWORD *)((char *)v7 + 24);
    v4 = *((_QWORD *)v7 - 1);
    v13 = *v7;
    swift_retain();
    result = sub_100518D38(v4);
    v7 = v11;
    if ((v12 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

_OWORD *sub_1006C9854(_OWORD *a1, uint64_t a2, int *a3)
{
  _OWORD *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t, __n128);
  id v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int (*v57)(const void *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  uint64_t v321;
  char *v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  uint64_t v341;
  char *v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  uint64_t v359;
  char *__dst;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)v4 = v9;
      *((_QWORD *)v4 + 1) = v7;
    }
    *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 16);
    *((_WORD *)v4 + 12) = *(_WORD *)(a2 + 24);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
    *((_BYTE *)v4 + 40) = *(_BYTE *)(a2 + 40);
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 48);
    *((_WORD *)v4 + 28) = *(_WORD *)(a2 + 56);
    v364 = *(_QWORD *)(a2 + 64);
    *((_QWORD *)v4 + 8) = v364;
    *((_BYTE *)v4 + 72) = *(_BYTE *)(a2 + 72);
    v363 = *(_QWORD *)(a2 + 88);
    *((_QWORD *)v4 + 10) = *(_QWORD *)(a2 + 80);
    *((_QWORD *)v4 + 11) = v363;
    *((_QWORD *)v4 + 12) = *(_QWORD *)(a2 + 96);
    *((_BYTE *)v4 + 104) = *(_BYTE *)(a2 + 104);
    *(_WORD *)((char *)v4 + 105) = *(_WORD *)(a2 + 105);
    *((_QWORD *)v4 + 14) = *(_QWORD *)(a2 + 112);
    *((_BYTE *)v4 + 120) = *(_BYTE *)(a2 + 120);
    *((_QWORD *)v4 + 16) = *(_QWORD *)(a2 + 128);
    *((_BYTE *)v4 + 136) = *(_BYTE *)(a2 + 136);
    v10 = *(_QWORD *)(a2 + 144);
    *((_BYTE *)v4 + 152) = *(_BYTE *)(a2 + 152);
    *((_QWORD *)v4 + 18) = v10;
    *((_BYTE *)v4 + 168) = *(_BYTE *)(a2 + 168);
    *((_QWORD *)v4 + 20) = *(_QWORD *)(a2 + 160);
    *((_BYTE *)v4 + 184) = *(_BYTE *)(a2 + 184);
    *((_QWORD *)v4 + 22) = *(_QWORD *)(a2 + 176);
    *((_BYTE *)v4 + 200) = *(_BYTE *)(a2 + 200);
    *((_QWORD *)v4 + 24) = *(_QWORD *)(a2 + 192);
    *((_BYTE *)v4 + 216) = *(_BYTE *)(a2 + 216);
    *((_QWORD *)v4 + 26) = *(_QWORD *)(a2 + 208);
    v11 = *(_QWORD *)(a2 + 224);
    *((_BYTE *)v4 + 232) = *(_BYTE *)(a2 + 232);
    *((_QWORD *)v4 + 28) = v11;
    v12 = *(_QWORD *)(a2 + 240);
    *((_BYTE *)v4 + 248) = *(_BYTE *)(a2 + 248);
    *((_QWORD *)v4 + 30) = v12;
    v13 = *(_QWORD *)(a2 + 256);
    *((_BYTE *)v4 + 264) = *(_BYTE *)(a2 + 264);
    *((_QWORD *)v4 + 32) = v13;
    v14 = *(_QWORD *)(a2 + 272);
    *((_BYTE *)v4 + 280) = *(_BYTE *)(a2 + 280);
    *((_QWORD *)v4 + 34) = v14;
    v15 = *(_QWORD *)(a2 + 288);
    *((_BYTE *)v4 + 296) = *(_BYTE *)(a2 + 296);
    *((_QWORD *)v4 + 36) = v15;
    v16 = *(_QWORD *)(a2 + 304);
    *((_BYTE *)v4 + 312) = *(_BYTE *)(a2 + 312);
    *((_QWORD *)v4 + 38) = v16;
    *((_BYTE *)v4 + 313) = *(_BYTE *)(a2 + 313);
    v17 = *(_QWORD *)(a2 + 328);
    v362 = *(_QWORD *)(a2 + 320);
    *((_BYTE *)v4 + 336) = *(_BYTE *)(a2 + 336);
    *((_QWORD *)v4 + 40) = v362;
    *((_QWORD *)v4 + 41) = v17;
    v18 = *(_QWORD *)(a2 + 344);
    *((_BYTE *)v4 + 352) = *(_BYTE *)(a2 + 352);
    *((_QWORD *)v4 + 43) = v18;
    v19 = *(_QWORD *)(a2 + 360);
    *((_BYTE *)v4 + 368) = *(_BYTE *)(a2 + 368);
    *((_QWORD *)v4 + 45) = v19;
    v20 = *(_QWORD *)(a2 + 376);
    *((_BYTE *)v4 + 384) = *(_BYTE *)(a2 + 384);
    *((_QWORD *)v4 + 47) = v20;
    v21 = *(_QWORD *)(a2 + 392);
    *((_BYTE *)v4 + 400) = *(_BYTE *)(a2 + 400);
    *((_QWORD *)v4 + 49) = v21;
    v22 = *(_QWORD *)(a2 + 408);
    *((_BYTE *)v4 + 416) = *(_BYTE *)(a2 + 416);
    *((_QWORD *)v4 + 51) = v22;
    v23 = *(_QWORD *)(a2 + 424);
    *((_BYTE *)v4 + 432) = *(_BYTE *)(a2 + 432);
    *((_QWORD *)v4 + 53) = v23;
    v24 = *(_QWORD *)(a2 + 440);
    *((_BYTE *)v4 + 448) = *(_BYTE *)(a2 + 448);
    *((_QWORD *)v4 + 55) = v24;
    v25 = *(_QWORD *)(a2 + 456);
    *((_BYTE *)v4 + 464) = *(_BYTE *)(a2 + 464);
    *((_QWORD *)v4 + 57) = v25;
    v26 = *(_QWORD *)(a2 + 472);
    *((_BYTE *)v4 + 480) = *(_BYTE *)(a2 + 480);
    *((_QWORD *)v4 + 59) = v26;
    *((_BYTE *)v4 + 481) = *(_BYTE *)(a2 + 481);
    v27 = *(_QWORD *)(a2 + 488);
    *((_BYTE *)v4 + 496) = *(_BYTE *)(a2 + 496);
    *((_QWORD *)v4 + 61) = v27;
    v28 = *(_QWORD *)(a2 + 504);
    *((_BYTE *)v4 + 512) = *(_BYTE *)(a2 + 512);
    *((_QWORD *)v4 + 63) = v28;
    v29 = *(_QWORD *)(a2 + 520);
    *((_BYTE *)v4 + 528) = *(_BYTE *)(a2 + 528);
    *((_QWORD *)v4 + 65) = v29;
    v30 = *(_QWORD *)(a2 + 536);
    *((_BYTE *)v4 + 544) = *(_BYTE *)(a2 + 544);
    *((_QWORD *)v4 + 67) = v30;
    v31 = *(_QWORD *)(a2 + 552);
    *((_BYTE *)v4 + 560) = *(_BYTE *)(a2 + 560);
    *((_QWORD *)v4 + 69) = v31;
    v32 = *(_QWORD *)(a2 + 568);
    *((_BYTE *)v4 + 576) = *(_BYTE *)(a2 + 576);
    *((_QWORD *)v4 + 71) = v32;
    v33 = *(_QWORD *)(a2 + 584);
    *((_BYTE *)v4 + 592) = *(_BYTE *)(a2 + 592);
    *((_QWORD *)v4 + 73) = v33;
    v34 = *(_QWORD *)(a2 + 600);
    *((_QWORD *)v4 + 75) = v34;
    v35 = *(_QWORD *)(a2 + 608);
    *((_BYTE *)v4 + 616) = *(_BYTE *)(a2 + 616);
    *((_QWORD *)v4 + 76) = v35;
    v36 = *(_QWORD *)(a2 + 624);
    *((_BYTE *)v4 + 632) = *(_BYTE *)(a2 + 632);
    *((_QWORD *)v4 + 78) = v36;
    v37 = *(void **)(a2 + 640);
    *((_QWORD *)v4 + 80) = v37;
    v38 = *(_QWORD *)(a2 + 648);
    v39 = *(_QWORD *)(a2 + 656);
    *((_BYTE *)v4 + 664) = *(_BYTE *)(a2 + 664);
    *((_QWORD *)v4 + 82) = v39;
    v40 = *(_QWORD *)(a2 + 672);
    *((_BYTE *)v4 + 680) = *(_BYTE *)(a2 + 680);
    *((_QWORD *)v4 + 84) = v40;
    v41 = *(_QWORD *)(a2 + 688);
    *((_BYTE *)v4 + 696) = *(_BYTE *)(a2 + 696);
    *((_QWORD *)v4 + 86) = v41;
    v42 = *(_QWORD *)(a2 + 704);
    *((_BYTE *)v4 + 712) = *(_BYTE *)(a2 + 712);
    *((_QWORD *)v4 + 88) = v42;
    v43 = *(_QWORD *)(a2 + 720);
    *((_BYTE *)v4 + 728) = *(_BYTE *)(a2 + 728);
    *((_QWORD *)v4 + 90) = v43;
    *((_BYTE *)v4 + 729) = *(_BYTE *)(a2 + 729);
    v44 = a3[60];
    __dst = (char *)v4 + v44;
    v45 = (const void *)(a2 + v44);
    *((_QWORD *)v4 + 81) = v38;
    v46 = type metadata accessor for UUID(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v47 + 48);
    swift_bridgeObjectRetain(v364);
    swift_bridgeObjectRetain(v363);
    swift_bridgeObjectRetain(v362);
    swift_bridgeObjectRetain(v34);
    v49 = v37;
    v50 = swift_bridgeObjectRetain(v38);
    if (v48(v45, 1, v46, v50))
    {
      v51 = sub_10001A9A8(&qword_1010ED860);
      memcpy(__dst, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v47 + 16))(__dst, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(__dst, 0, 1, v46);
    }
    v52 = a3[61];
    v53 = (char *)v4 + v52;
    v54 = (const void *)(a2 + v52);
    v55 = type metadata accessor for Date(0);
    v56 = *(_QWORD *)(v55 - 8);
    v57 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v56 + 48);
    if (v57(v54, 1, v55))
    {
      v58 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v56 + 16))(v53, v54, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
    }
    v59 = a3[62];
    v60 = a3[63];
    v61 = (char *)v4 + v59;
    v62 = a2 + v59;
    *(_QWORD *)v61 = *(_QWORD *)v62;
    v61[8] = *(_BYTE *)(v62 + 8);
    v63 = (char *)v4 + v60;
    v64 = (const void *)(a2 + v60);
    if (v57((const void *)(a2 + v60), 1, v55))
    {
      v65 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v56 + 16))(v63, v64, v55);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v63, 0, 1, v55);
    }
    v66 = a3[64];
    v67 = (char *)v4 + v66;
    v68 = a2 + v66;
    *(_QWORD *)v67 = *(_QWORD *)v68;
    v67[8] = *(_BYTE *)(v68 + 8);
    v69 = a3[65];
    v70 = (char *)v4 + v69;
    v71 = a2 + v69;
    *(_QWORD *)v70 = *(_QWORD *)v71;
    v70[8] = *(_BYTE *)(v71 + 8);
    v72 = a3[66];
    v73 = (char *)v4 + v72;
    v74 = a2 + v72;
    *(_QWORD *)v73 = *(_QWORD *)v74;
    v73[8] = *(_BYTE *)(v74 + 8);
    v75 = a3[67];
    v76 = (char *)v4 + v75;
    v77 = a2 + v75;
    *(_QWORD *)v76 = *(_QWORD *)v77;
    v76[8] = *(_BYTE *)(v77 + 8);
    v78 = a3[68];
    v79 = (char *)v4 + v78;
    v80 = (uint64_t *)(a2 + v78);
    v81 = *v80;
    v79[8] = *((_BYTE *)v80 + 8);
    *(_QWORD *)v79 = v81;
    v82 = a3[69];
    v83 = (char *)v4 + v82;
    v84 = a2 + v82;
    v83[8] = *(_BYTE *)(v84 + 8);
    *(_QWORD *)v83 = *(_QWORD *)v84;
    v85 = a3[70];
    v86 = (char *)v4 + v85;
    v87 = a2 + v85;
    v88 = *(_QWORD *)(v87 + 48);
    if (v88)
    {
      v89 = *(_OWORD *)(v87 + 16);
      *(_OWORD *)v86 = *(_OWORD *)v87;
      *((_OWORD *)v86 + 1) = v89;
      *((_OWORD *)v86 + 2) = *(_OWORD *)(v87 + 32);
      *((_QWORD *)v86 + 6) = v88;
      *(_OWORD *)(v86 + 56) = *(_OWORD *)(v87 + 56);
      *(_OWORD *)(v86 + 72) = *(_OWORD *)(v87 + 72);
      *(_OWORD *)(v86 + 88) = *(_OWORD *)(v87 + 88);
      v90 = *(_QWORD *)(v87 + 104);
      *((_QWORD *)v86 + 13) = v90;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v90);
    }
    else
    {
      v91 = *(_OWORD *)(v87 + 80);
      *((_OWORD *)v86 + 4) = *(_OWORD *)(v87 + 64);
      *((_OWORD *)v86 + 5) = v91;
      *((_OWORD *)v86 + 6) = *(_OWORD *)(v87 + 96);
      v92 = *(_OWORD *)(v87 + 16);
      *(_OWORD *)v86 = *(_OWORD *)v87;
      *((_OWORD *)v86 + 1) = v92;
      v93 = *(_OWORD *)(v87 + 48);
      *((_OWORD *)v86 + 2) = *(_OWORD *)(v87 + 32);
      *((_OWORD *)v86 + 3) = v93;
    }
    *((_BYTE *)v4 + a3[71]) = *(_BYTE *)(a2 + a3[71]);
    *((_BYTE *)v4 + a3[72]) = *(_BYTE *)(a2 + a3[72]);
    *((_BYTE *)v4 + a3[73]) = *(_BYTE *)(a2 + a3[73]);
    v94 = a3[74];
    v95 = (char *)v4 + v94;
    v96 = a2 + v94;
    *(_QWORD *)v95 = *(_QWORD *)v96;
    v95[8] = *(_BYTE *)(v96 + 8);
    v97 = a3[75];
    v98 = (char *)v4 + v97;
    v99 = a2 + v97;
    *(_QWORD *)v98 = *(_QWORD *)v99;
    v98[8] = *(_BYTE *)(v99 + 8);
    v100 = a3[76];
    v101 = (char *)v4 + v100;
    v102 = a2 + v100;
    *(_QWORD *)v101 = *(_QWORD *)v102;
    v101[8] = *(_BYTE *)(v102 + 8);
    v103 = a3[77];
    v104 = (char *)v4 + v103;
    v105 = a2 + v103;
    *(_QWORD *)v104 = *(_QWORD *)v105;
    v104[8] = *(_BYTE *)(v105 + 8);
    v106 = a3[78];
    v107 = (char *)v4 + v106;
    v108 = (uint64_t *)(a2 + v106);
    v109 = *v108;
    v107[8] = *((_BYTE *)v108 + 8);
    *(_QWORD *)v107 = v109;
    v110 = a3[79];
    v111 = (char *)v4 + v110;
    v112 = a2 + v110;
    *(_QWORD *)v111 = *(_QWORD *)v112;
    v111[8] = *(_BYTE *)(v112 + 8);
    v113 = a3[80];
    v114 = (char *)v4 + v113;
    v115 = a2 + v113;
    *(_QWORD *)v114 = *(_QWORD *)v115;
    v114[8] = *(_BYTE *)(v115 + 8);
    v116 = a3[81];
    v117 = (_QWORD *)((char *)v4 + v116);
    v118 = (_QWORD *)(a2 + v116);
    v119 = v118[1];
    *v117 = *v118;
    v117[1] = v119;
    *((_BYTE *)v4 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
    v120 = a3[83];
    v121 = (char *)v4 + v120;
    v122 = a2 + v120;
    *(_QWORD *)v121 = *(_QWORD *)v122;
    v121[8] = *(_BYTE *)(v122 + 8);
    v123 = a3[84];
    v124 = (char *)v4 + v123;
    v125 = a2 + v123;
    *(_QWORD *)v124 = *(_QWORD *)v125;
    v124[8] = *(_BYTE *)(v125 + 8);
    v126 = a3[85];
    v127 = (char *)v4 + v126;
    v128 = a2 + v126;
    *(_QWORD *)v127 = *(_QWORD *)v128;
    v127[8] = *(_BYTE *)(v128 + 8);
    v129 = a3[86];
    v130 = (_QWORD *)((char *)v4 + v129);
    v131 = (_QWORD *)(a2 + v129);
    v132 = v131[1];
    *v130 = *v131;
    v130[1] = v132;
    v133 = a3[87];
    v134 = (char *)v4 + v133;
    v135 = a2 + v133;
    *(_QWORD *)v134 = *(_QWORD *)v135;
    v134[8] = *(_BYTE *)(v135 + 8);
    v136 = a3[88];
    v137 = (_QWORD *)((char *)v4 + v136);
    v138 = (_QWORD *)(a2 + v136);
    v139 = v138[1];
    *v137 = *v138;
    v137[1] = v139;
    v140 = a3[89];
    v141 = (char *)v4 + v140;
    v142 = a2 + v140;
    *(_QWORD *)v141 = *(_QWORD *)v142;
    v141[8] = *(_BYTE *)(v142 + 8);
    v143 = a3[90];
    v144 = (_QWORD *)((char *)v4 + v143);
    v145 = (_QWORD *)(a2 + v143);
    v146 = v145[1];
    *v144 = *v145;
    v144[1] = v146;
    v147 = a3[91];
    v148 = (char *)v4 + v147;
    v149 = a2 + v147;
    *(_QWORD *)v148 = *(_QWORD *)v149;
    v148[8] = *(_BYTE *)(v149 + 8);
    *((_BYTE *)v4 + a3[92]) = *(_BYTE *)(a2 + a3[92]);
    *((_BYTE *)v4 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
    *((_BYTE *)v4 + a3[94]) = *(_BYTE *)(a2 + a3[94]);
    *((_BYTE *)v4 + a3[95]) = *(_BYTE *)(a2 + a3[95]);
    v150 = a3[96];
    v151 = (char *)v4 + v150;
    v152 = a2 + v150;
    *(_QWORD *)v151 = *(_QWORD *)v152;
    v151[8] = *(_BYTE *)(v152 + 8);
    v153 = a3[97];
    v154 = (char *)v4 + v153;
    v155 = a2 + v153;
    *(_QWORD *)v154 = *(_QWORD *)v155;
    v154[8] = *(_BYTE *)(v155 + 8);
    v156 = a3[98];
    v157 = (char *)v4 + v156;
    v158 = a2 + v156;
    *(_QWORD *)v157 = *(_QWORD *)v158;
    v157[8] = *(_BYTE *)(v158 + 8);
    v159 = a3[99];
    v160 = (char *)v4 + v159;
    v161 = a2 + v159;
    *(_QWORD *)v160 = *(_QWORD *)v161;
    v160[8] = *(_BYTE *)(v161 + 8);
    v162 = a3[100];
    v163 = (char *)v4 + v162;
    v164 = (uint64_t *)(a2 + v162);
    v165 = *v164;
    v163[8] = *((_BYTE *)v164 + 8);
    *(_QWORD *)v163 = v165;
    v166 = a3[101];
    v167 = (char *)v4 + v166;
    v168 = a2 + v166;
    *(_QWORD *)v167 = *(_QWORD *)v168;
    v167[8] = *(_BYTE *)(v168 + 8);
    v169 = a3[102];
    v170 = (char *)v4 + v169;
    v171 = a2 + v169;
    *(_QWORD *)v170 = *(_QWORD *)v171;
    v170[8] = *(_BYTE *)(v171 + 8);
    v172 = a3[103];
    v173 = (char *)v4 + v172;
    v174 = a2 + v172;
    *(_QWORD *)v173 = *(_QWORD *)v174;
    v173[8] = *(_BYTE *)(v174 + 8);
    v175 = a3[104];
    v176 = (char *)v4 + v175;
    v177 = a2 + v175;
    *(_QWORD *)v176 = *(_QWORD *)v177;
    v176[8] = *(_BYTE *)(v177 + 8);
    v178 = a3[105];
    v179 = (char *)v4 + v178;
    v180 = a2 + v178;
    *(_QWORD *)v179 = *(_QWORD *)v180;
    v179[8] = *(_BYTE *)(v180 + 8);
    v181 = a3[106];
    v182 = (char *)v4 + v181;
    v183 = a2 + v181;
    *(_QWORD *)v182 = *(_QWORD *)v183;
    v182[8] = *(_BYTE *)(v183 + 8);
    v184 = a3[107];
    v185 = (char *)v4 + v184;
    v186 = a2 + v184;
    *(_QWORD *)v185 = *(_QWORD *)v186;
    v185[8] = *(_BYTE *)(v186 + 8);
    v187 = a3[108];
    v188 = (char *)v4 + v187;
    v189 = a2 + v187;
    *(_QWORD *)v188 = *(_QWORD *)v189;
    v188[8] = *(_BYTE *)(v189 + 8);
    v190 = a3[109];
    v191 = (char *)v4 + v190;
    v192 = a2 + v190;
    *(_QWORD *)v191 = *(_QWORD *)v192;
    v191[8] = *(_BYTE *)(v192 + 8);
    v193 = a3[110];
    v194 = (char *)v4 + v193;
    v195 = a2 + v193;
    *(_QWORD *)v194 = *(_QWORD *)v195;
    v194[8] = *(_BYTE *)(v195 + 8);
    v196 = a3[111];
    v197 = (char *)v4 + v196;
    v198 = a2 + v196;
    *(_QWORD *)v197 = *(_QWORD *)v198;
    v197[8] = *(_BYTE *)(v198 + 8);
    v199 = a3[112];
    v200 = (char *)v4 + v199;
    v201 = a2 + v199;
    *(_QWORD *)v200 = *(_QWORD *)v201;
    v200[8] = *(_BYTE *)(v201 + 8);
    v202 = a3[113];
    v203 = (char *)v4 + v202;
    v204 = a2 + v202;
    *(_QWORD *)v203 = *(_QWORD *)v204;
    v203[8] = *(_BYTE *)(v204 + 8);
    v205 = a3[114];
    v206 = (char *)v4 + v205;
    v207 = a2 + v205;
    *(_QWORD *)v206 = *(_QWORD *)v207;
    v206[8] = *(_BYTE *)(v207 + 8);
    v208 = a3[115];
    v209 = (char *)v4 + v208;
    v210 = a2 + v208;
    *(_QWORD *)v209 = *(_QWORD *)v210;
    v209[8] = *(_BYTE *)(v210 + 8);
    v211 = a3[116];
    v212 = (char *)v4 + v211;
    v213 = a2 + v211;
    *(_QWORD *)v212 = *(_QWORD *)v213;
    v212[8] = *(_BYTE *)(v213 + 8);
    v214 = a3[117];
    v215 = (char *)v4 + v214;
    v216 = a2 + v214;
    *(_QWORD *)v215 = *(_QWORD *)v216;
    v215[8] = *(_BYTE *)(v216 + 8);
    *((_BYTE *)v4 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
    v217 = a3[119];
    v218 = (char *)v4 + v217;
    v219 = a2 + v217;
    *(_QWORD *)v218 = *(_QWORD *)v219;
    v218[8] = *(_BYTE *)(v219 + 8);
    v220 = a3[120];
    v221 = (char *)v4 + v220;
    v222 = a2 + v220;
    *(_QWORD *)v221 = *(_QWORD *)v222;
    v221[8] = *(_BYTE *)(v222 + 8);
    v223 = a3[121];
    v224 = (char *)v4 + v223;
    v225 = a2 + v223;
    *(_QWORD *)v224 = *(_QWORD *)v225;
    v224[8] = *(_BYTE *)(v225 + 8);
    *((_BYTE *)v4 + a3[122]) = *(_BYTE *)(a2 + a3[122]);
    *((_BYTE *)v4 + a3[123]) = *(_BYTE *)(a2 + a3[123]);
    *((_BYTE *)v4 + a3[124]) = *(_BYTE *)(a2 + a3[124]);
    v226 = a3[125];
    v227 = (char *)v4 + v226;
    v228 = a2 + v226;
    *(_QWORD *)v227 = *(_QWORD *)v228;
    v227[8] = *(_BYTE *)(v228 + 8);
    v229 = a3[126];
    v230 = (char *)v4 + v229;
    v231 = a2 + v229;
    *(_QWORD *)v230 = *(_QWORD *)v231;
    v230[8] = *(_BYTE *)(v231 + 8);
    v232 = a3[127];
    v233 = (char *)v4 + v232;
    v234 = a2 + v232;
    *(_QWORD *)v233 = *(_QWORD *)v234;
    v233[8] = *(_BYTE *)(v234 + 8);
    v235 = a3[128];
    v236 = (char *)v4 + v235;
    v237 = a2 + v235;
    *(_QWORD *)v236 = *(_QWORD *)v237;
    v236[8] = *(_BYTE *)(v237 + 8);
    v238 = a3[129];
    v239 = (char *)v4 + v238;
    v240 = (uint64_t *)(a2 + v238);
    v241 = *v240;
    v239[8] = *((_BYTE *)v240 + 8);
    *(_QWORD *)v239 = v241;
    v242 = a3[130];
    v243 = (char *)v4 + v242;
    v244 = a2 + v242;
    *(_QWORD *)v243 = *(_QWORD *)v244;
    v243[8] = *(_BYTE *)(v244 + 8);
    v245 = a3[131];
    v246 = (char *)v4 + v245;
    v247 = a2 + v245;
    *(_QWORD *)v246 = *(_QWORD *)v247;
    v246[8] = *(_BYTE *)(v247 + 8);
    v248 = a3[132];
    v249 = (char *)v4 + v248;
    v250 = a2 + v248;
    *(_QWORD *)v249 = *(_QWORD *)v250;
    v249[8] = *(_BYTE *)(v250 + 8);
    *((_BYTE *)v4 + a3[133]) = *(_BYTE *)(a2 + a3[133]);
    v251 = a3[134];
    v252 = (char *)v4 + v251;
    v253 = a2 + v251;
    *(_QWORD *)v252 = *(_QWORD *)v253;
    v252[8] = *(_BYTE *)(v253 + 8);
    v254 = a3[135];
    v255 = *(_QWORD *)(a2 + v254);
    *(_QWORD *)((char *)v4 + v254) = v255;
    v256 = a3[136];
    v257 = (char *)v4 + v256;
    v258 = a2 + v256;
    *(_QWORD *)v257 = *(_QWORD *)v258;
    v257[8] = *(_BYTE *)(v258 + 8);
    *((_BYTE *)v4 + a3[137]) = *(_BYTE *)(a2 + a3[137]);
    v259 = a3[138];
    v260 = *(_QWORD *)(a2 + v259);
    *(_QWORD *)((char *)v4 + v259) = v260;
    *((_BYTE *)v4 + a3[139]) = *(_BYTE *)(a2 + a3[139]);
    v261 = a3[140];
    v262 = (char *)v4 + v261;
    v263 = a2 + v261;
    *(_QWORD *)v262 = *(_QWORD *)v263;
    v262[8] = *(_BYTE *)(v263 + 8);
    v264 = a3[141];
    v265 = (char *)v4 + v264;
    v266 = a2 + v264;
    *(_QWORD *)v265 = *(_QWORD *)v266;
    v265[8] = *(_BYTE *)(v266 + 8);
    *((_BYTE *)v4 + a3[142]) = *(_BYTE *)(a2 + a3[142]);
    *((_BYTE *)v4 + a3[143]) = *(_BYTE *)(a2 + a3[143]);
    v267 = a3[144];
    v268 = (char *)v4 + v267;
    v269 = a2 + v267;
    *(_QWORD *)v268 = *(_QWORD *)v269;
    v268[8] = *(_BYTE *)(v269 + 8);
    v270 = a3[145];
    v271 = (char *)v4 + v270;
    v272 = a2 + v270;
    *(_QWORD *)v271 = *(_QWORD *)v272;
    v271[8] = *(_BYTE *)(v272 + 8);
    v273 = a3[146];
    v274 = (char *)v4 + v273;
    v275 = a2 + v273;
    *(_QWORD *)v274 = *(_QWORD *)v275;
    v274[8] = *(_BYTE *)(v275 + 8);
    v276 = a3[147];
    v277 = (char *)v4 + v276;
    v278 = a2 + v276;
    *(_QWORD *)v277 = *(_QWORD *)v278;
    v277[8] = *(_BYTE *)(v278 + 8);
    v279 = a3[148];
    v280 = (char *)v4 + v279;
    v281 = (uint64_t *)(a2 + v279);
    v282 = *v281;
    v280[8] = *((_BYTE *)v281 + 8);
    *(_QWORD *)v280 = v282;
    v283 = a3[149];
    v284 = (char *)v4 + v283;
    v285 = a2 + v283;
    *(_QWORD *)v284 = *(_QWORD *)v285;
    v284[8] = *(_BYTE *)(v285 + 8);
    v286 = a3[150];
    v287 = (char *)v4 + v286;
    v288 = a2 + v286;
    *(_QWORD *)v287 = *(_QWORD *)v288;
    v287[8] = *(_BYTE *)(v288 + 8);
    v289 = a3[151];
    v290 = (char *)v4 + v289;
    v291 = a2 + v289;
    *(_QWORD *)v290 = *(_QWORD *)v291;
    v290[8] = *(_BYTE *)(v291 + 8);
    v292 = a3[152];
    v293 = (char *)v4 + v292;
    v294 = a2 + v292;
    *(_QWORD *)v293 = *(_QWORD *)v294;
    v293[8] = *(_BYTE *)(v294 + 8);
    v295 = a3[153];
    v296 = (char *)v4 + v295;
    v297 = a2 + v295;
    *(_QWORD *)v296 = *(_QWORD *)v297;
    v296[8] = *(_BYTE *)(v297 + 8);
    v298 = a3[154];
    v299 = (char *)v4 + v298;
    v300 = a2 + v298;
    *(_QWORD *)v299 = *(_QWORD *)v300;
    v299[8] = *(_BYTE *)(v300 + 8);
    v301 = a3[155];
    v302 = (char *)v4 + v301;
    v303 = a2 + v301;
    *(_QWORD *)v302 = *(_QWORD *)v303;
    v302[8] = *(_BYTE *)(v303 + 8);
    v304 = a3[156];
    v305 = (char *)v4 + v304;
    v306 = a2 + v304;
    *(_QWORD *)v305 = *(_QWORD *)v306;
    v305[8] = *(_BYTE *)(v306 + 8);
    v307 = a3[157];
    v308 = (char *)v4 + v307;
    v309 = a2 + v307;
    *(_QWORD *)v308 = *(_QWORD *)v309;
    v308[8] = *(_BYTE *)(v309 + 8);
    v310 = a3[158];
    v311 = (char *)v4 + v310;
    v312 = a2 + v310;
    *(_QWORD *)v311 = *(_QWORD *)v312;
    v311[8] = *(_BYTE *)(v312 + 8);
    v313 = a3[159];
    v314 = (char *)v4 + v313;
    v315 = a2 + v313;
    *(_QWORD *)v314 = *(_QWORD *)v315;
    v314[8] = *(_BYTE *)(v315 + 8);
    v316 = a3[160];
    v317 = (char *)v4 + v316;
    v318 = a2 + v316;
    *(_QWORD *)v317 = *(_QWORD *)v318;
    v319 = a3[161];
    v320 = *(_BYTE *)(a2 + v319);
    v317[8] = *(_BYTE *)(v318 + 8);
    *((_BYTE *)v4 + v319) = v320;
    *((_BYTE *)v4 + a3[162]) = *(_BYTE *)(a2 + a3[162]);
    v321 = a3[163];
    v322 = (char *)v4 + v321;
    v323 = a2 + v321;
    *(_QWORD *)v322 = *(_QWORD *)v323;
    v322[8] = *(_BYTE *)(v323 + 8);
    v324 = a3[164];
    v325 = (char *)v4 + v324;
    v326 = a2 + v324;
    *(_QWORD *)v325 = *(_QWORD *)v326;
    v327 = a3[165];
    v328 = *(_BYTE *)(a2 + v327);
    v325[8] = *(_BYTE *)(v326 + 8);
    *((_BYTE *)v4 + v327) = v328;
    v329 = a3[166];
    v330 = (char *)v4 + v329;
    v331 = a2 + v329;
    *(_DWORD *)v330 = *(_DWORD *)v331;
    v330[4] = *(_BYTE *)(v331 + 4);
    v332 = a3[167];
    v333 = (char *)v4 + v332;
    v334 = a2 + v332;
    *(_QWORD *)v333 = *(_QWORD *)v334;
    v333[8] = *(_BYTE *)(v334 + 8);
    v335 = a3[168];
    v336 = (char *)v4 + v335;
    v337 = a2 + v335;
    *(_QWORD *)v336 = *(_QWORD *)v337;
    v336[8] = *(_BYTE *)(v337 + 8);
    v338 = a3[169];
    v339 = (char *)v4 + v338;
    v340 = a2 + v338;
    *(_QWORD *)v339 = *(_QWORD *)v340;
    v339[8] = *(_BYTE *)(v340 + 8);
    v341 = a3[170];
    v342 = (char *)v4 + v341;
    v343 = (uint64_t *)(a2 + v341);
    v344 = *v343;
    v342[8] = *((_BYTE *)v343 + 8);
    *(_QWORD *)v342 = v344;
    v345 = a3[171];
    v346 = (char *)v4 + v345;
    v347 = a2 + v345;
    *(_QWORD *)v346 = *(_QWORD *)v347;
    v346[8] = *(_BYTE *)(v347 + 8);
    v348 = a3[172];
    v349 = (char *)v4 + v348;
    v350 = a2 + v348;
    *(_QWORD *)v349 = *(_QWORD *)v350;
    v349[8] = *(_BYTE *)(v350 + 8);
    v351 = a3[173];
    v352 = (char *)v4 + v351;
    v353 = a2 + v351;
    *(_QWORD *)v352 = *(_QWORD *)v353;
    v352[8] = *(_BYTE *)(v353 + 8);
    *((_BYTE *)v4 + a3[174]) = *(_BYTE *)(a2 + a3[174]);
    v354 = a3[175];
    v355 = (char *)v4 + v354;
    v356 = a2 + v354;
    *(_QWORD *)v355 = *(_QWORD *)v356;
    v355[8] = *(_BYTE *)(v356 + 8);
    v357 = a3[176];
    v358 = (char *)v4 + v357;
    v359 = a2 + v357;
    *(_QWORD *)v358 = *(_QWORD *)v359;
    v358[8] = *(_BYTE *)(v359 + 8);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v132);
    swift_bridgeObjectRetain(v139);
    swift_bridgeObjectRetain(v146);
    swift_bridgeObjectRetain(v255);
    swift_bridgeObjectRetain(v260);
  }
  return v4;
}

uint64_t sub_1006CA904(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void *, uint64_t, uint64_t);
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  char v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t *v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t *v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t *v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;

  v6 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 8) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)a2;
  sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v6;
  sub_10001BC14(v9, v10);
LABEL_8:
  v11 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v11;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v12 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v12;
  v13 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v13;
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v14 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v16;
  *(_BYTE *)(a1 + 105) = *(_BYTE *)(a2 + 105);
  *(_BYTE *)(a1 + 106) = *(_BYTE *)(a2 + 106);
  v17 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v17;
  v18 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v18;
  v19 = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = v19;
  v20 = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = v20;
  v21 = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = v21;
  v22 = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = v22;
  v23 = *(_QWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = v23;
  v24 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v24;
  v25 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v25;
  v26 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v26;
  v27 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v27;
  v28 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v28;
  v29 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v29;
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  v30 = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 320) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v31;
  v32 = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = v32;
  v33 = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = v33;
  v34 = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v34;
  v35 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v35;
  v36 = *(_QWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = v36;
  v37 = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v37;
  v38 = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v38;
  v39 = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v39;
  v40 = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = v40;
  *(_BYTE *)(a1 + 481) = *(_BYTE *)(a2 + 481);
  v41 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v41;
  v42 = *(_QWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = v42;
  v43 = *(_QWORD *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_QWORD *)(a1 + 520) = v43;
  v44 = *(_QWORD *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v44;
  v45 = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 552) = v45;
  v46 = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_QWORD *)(a1 + 568) = v46;
  v47 = *(_QWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_QWORD *)(a1 + 584) = v47;
  v48 = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 600) = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease();
  v49 = *(_QWORD *)(a2 + 608);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_QWORD *)(a1 + 608) = v49;
  LOBYTE(v49) = *(_BYTE *)(a2 + 632);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = v49;
  v50 = *(void **)(a1 + 640);
  v51 = *(void **)(a2 + 640);
  *(_QWORD *)(a1 + 640) = v51;
  v52 = v51;

  v53 = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 648) = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease();
  v54 = *(_QWORD *)(a2 + 656);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(_QWORD *)(a1 + 656) = v54;
  v55 = *(_QWORD *)(a2 + 672);
  *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
  *(_QWORD *)(a1 + 672) = v55;
  v56 = *(_QWORD *)(a2 + 688);
  *(_BYTE *)(a1 + 696) = *(_BYTE *)(a2 + 696);
  *(_QWORD *)(a1 + 688) = v56;
  v57 = *(_QWORD *)(a2 + 704);
  *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
  *(_QWORD *)(a1 + 704) = v57;
  v58 = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_QWORD *)(a1 + 720) = v58;
  *(_BYTE *)(a1 + 729) = *(_BYTE *)(a2 + 729);
  v59 = a3[60];
  v60 = (void *)(a1 + v59);
  v61 = (void *)(a2 + v59);
  v62 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v63 + 48);
  v65 = v64(v60, 1, v62);
  v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v63 + 16))(v60, v61, v62);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v63 + 8))(v60, v62);
LABEL_13:
    v67 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, void *, uint64_t))(v63 + 24))(v60, v61, v62);
LABEL_14:
  v68 = a3[61];
  v69 = (void *)(a1 + v68);
  v70 = (void *)(a2 + v68);
  v71 = type metadata accessor for Date(0);
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v72 + 48);
  v74 = v73(v69, 1, v71);
  v75 = v73(v70, 1, v71);
  if (v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v72 + 16))(v69, v70, v71);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v75)
  {
    (*(void (**)(void *, uint64_t))(v72 + 8))(v69, v71);
LABEL_19:
    v76 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(void *, void *, uint64_t))(v72 + 24))(v69, v70, v71);
LABEL_20:
  v77 = a3[62];
  v78 = a1 + v77;
  v79 = (uint64_t *)(a2 + v77);
  v80 = *v79;
  *(_BYTE *)(v78 + 8) = *((_BYTE *)v79 + 8);
  *(_QWORD *)v78 = v80;
  v81 = a3[63];
  v82 = (void *)(a1 + v81);
  v83 = (void *)(a2 + v81);
  v84 = v73((void *)(a1 + v81), 1, v71);
  v85 = v73(v83, 1, v71);
  if (v84)
  {
    if (!v85)
    {
      (*(void (**)(void *, void *, uint64_t))(v72 + 16))(v82, v83, v71);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v82, 0, 1, v71);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v85)
  {
    (*(void (**)(void *, uint64_t))(v72 + 8))(v82, v71);
LABEL_25:
    v86 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
    goto LABEL_26;
  }
  (*(void (**)(void *, void *, uint64_t))(v72 + 24))(v82, v83, v71);
LABEL_26:
  v87 = a3[64];
  v88 = a1 + v87;
  v89 = (uint64_t *)(a2 + v87);
  v90 = *v89;
  *(_BYTE *)(v88 + 8) = *((_BYTE *)v89 + 8);
  *(_QWORD *)v88 = v90;
  v91 = a3[65];
  v92 = a1 + v91;
  v93 = (uint64_t *)(a2 + v91);
  v94 = *v93;
  *(_BYTE *)(v92 + 8) = *((_BYTE *)v93 + 8);
  *(_QWORD *)v92 = v94;
  v95 = a3[66];
  v96 = a1 + v95;
  v97 = (uint64_t *)(a2 + v95);
  v98 = *v97;
  *(_BYTE *)(v96 + 8) = *((_BYTE *)v97 + 8);
  *(_QWORD *)v96 = v98;
  v99 = a3[67];
  v100 = a1 + v99;
  v101 = (uint64_t *)(a2 + v99);
  v102 = *v101;
  *(_BYTE *)(v100 + 8) = *((_BYTE *)v101 + 8);
  *(_QWORD *)v100 = v102;
  v103 = a3[68];
  v104 = a1 + v103;
  v105 = (uint64_t *)(a2 + v103);
  v106 = *v105;
  *(_BYTE *)(v104 + 8) = *((_BYTE *)v105 + 8);
  *(_QWORD *)v104 = v106;
  v107 = a3[69];
  v108 = a1 + v107;
  v109 = (uint64_t *)(a2 + v107);
  v110 = *v109;
  *(_BYTE *)(v108 + 8) = *((_BYTE *)v109 + 8);
  *(_QWORD *)v108 = v110;
  v111 = a3[70];
  v112 = (_QWORD *)(a1 + v111);
  v113 = (_QWORD *)(a2 + v111);
  v114 = *(_QWORD *)(a1 + v111 + 48);
  v115 = *(_QWORD *)(a2 + v111 + 48);
  if (v114)
  {
    if (v115)
    {
      *v112 = *v113;
      v112[1] = v113[1];
      v112[2] = v113[2];
      v112[3] = v113[3];
      v112[4] = v113[4];
      v112[5] = v113[5];
      v116 = v113[6];
      v112[6] = v116;
      swift_bridgeObjectRetain(v116);
      swift_bridgeObjectRelease();
      v112[7] = v113[7];
      v112[8] = v113[8];
      v112[9] = v113[9];
      v112[10] = v113[10];
      v112[11] = v113[11];
      v112[12] = v113[12];
      v117 = v113[13];
      v112[13] = v117;
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1006CBC2C((uint64_t)v112);
      v121 = *((_OWORD *)v113 + 1);
      v120 = *((_OWORD *)v113 + 2);
      *(_OWORD *)v112 = *(_OWORD *)v113;
      *((_OWORD *)v112 + 1) = v121;
      *((_OWORD *)v112 + 2) = v120;
      v122 = *((_OWORD *)v113 + 6);
      v124 = *((_OWORD *)v113 + 3);
      v123 = *((_OWORD *)v113 + 4);
      *((_OWORD *)v112 + 5) = *((_OWORD *)v113 + 5);
      *((_OWORD *)v112 + 6) = v122;
      *((_OWORD *)v112 + 3) = v124;
      *((_OWORD *)v112 + 4) = v123;
    }
  }
  else if (v115)
  {
    *v112 = *v113;
    v112[1] = v113[1];
    v112[2] = v113[2];
    v112[3] = v113[3];
    v112[4] = v113[4];
    v112[5] = v113[5];
    v118 = v113[6];
    v112[6] = v118;
    v112[7] = v113[7];
    v112[8] = v113[8];
    v112[9] = v113[9];
    v112[10] = v113[10];
    v112[11] = v113[11];
    v112[12] = v113[12];
    v119 = v113[13];
    v112[13] = v119;
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v119);
  }
  else
  {
    v125 = *(_OWORD *)v113;
    v126 = *((_OWORD *)v113 + 2);
    *((_OWORD *)v112 + 1) = *((_OWORD *)v113 + 1);
    *((_OWORD *)v112 + 2) = v126;
    *(_OWORD *)v112 = v125;
    v127 = *((_OWORD *)v113 + 3);
    v128 = *((_OWORD *)v113 + 4);
    v129 = *((_OWORD *)v113 + 6);
    *((_OWORD *)v112 + 5) = *((_OWORD *)v113 + 5);
    *((_OWORD *)v112 + 6) = v129;
    *((_OWORD *)v112 + 3) = v127;
    *((_OWORD *)v112 + 4) = v128;
  }
  *(_BYTE *)(a1 + a3[71]) = *(_BYTE *)(a2 + a3[71]);
  *(_BYTE *)(a1 + a3[72]) = *(_BYTE *)(a2 + a3[72]);
  *(_BYTE *)(a1 + a3[73]) = *(_BYTE *)(a2 + a3[73]);
  v130 = a3[74];
  v131 = a1 + v130;
  v132 = (uint64_t *)(a2 + v130);
  v133 = *v132;
  *(_BYTE *)(v131 + 8) = *((_BYTE *)v132 + 8);
  *(_QWORD *)v131 = v133;
  v134 = a3[75];
  v135 = a1 + v134;
  v136 = (uint64_t *)(a2 + v134);
  v137 = *v136;
  *(_BYTE *)(v135 + 8) = *((_BYTE *)v136 + 8);
  *(_QWORD *)v135 = v137;
  v138 = a3[76];
  v139 = a1 + v138;
  v140 = (uint64_t *)(a2 + v138);
  v141 = *v140;
  *(_BYTE *)(v139 + 8) = *((_BYTE *)v140 + 8);
  *(_QWORD *)v139 = v141;
  v142 = a3[77];
  v143 = a1 + v142;
  v144 = (uint64_t *)(a2 + v142);
  v145 = *v144;
  *(_BYTE *)(v143 + 8) = *((_BYTE *)v144 + 8);
  *(_QWORD *)v143 = v145;
  v146 = a3[78];
  v147 = a1 + v146;
  v148 = (uint64_t *)(a2 + v146);
  v149 = *v148;
  *(_BYTE *)(v147 + 8) = *((_BYTE *)v148 + 8);
  *(_QWORD *)v147 = v149;
  v150 = a3[79];
  v151 = a1 + v150;
  v152 = (uint64_t *)(a2 + v150);
  v153 = *v152;
  *(_BYTE *)(v151 + 8) = *((_BYTE *)v152 + 8);
  *(_QWORD *)v151 = v153;
  v154 = a3[80];
  v155 = a1 + v154;
  v156 = (uint64_t *)(a2 + v154);
  v157 = *v156;
  *(_BYTE *)(v155 + 8) = *((_BYTE *)v156 + 8);
  *(_QWORD *)v155 = v157;
  v158 = a3[81];
  v159 = (_QWORD *)(a1 + v158);
  v160 = (_QWORD *)(a2 + v158);
  *v159 = *v160;
  v161 = v160[1];
  v159[1] = v161;
  swift_bridgeObjectRetain(v161);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
  v162 = a3[83];
  v163 = a1 + v162;
  v164 = a2 + v162;
  v165 = *(_BYTE *)(v164 + 8);
  *(_QWORD *)v163 = *(_QWORD *)v164;
  *(_BYTE *)(v163 + 8) = v165;
  v166 = a3[84];
  v167 = a1 + v166;
  v168 = (uint64_t *)(a2 + v166);
  v169 = *v168;
  *(_BYTE *)(v167 + 8) = *((_BYTE *)v168 + 8);
  *(_QWORD *)v167 = v169;
  v170 = a3[85];
  v171 = a1 + v170;
  v172 = (uint64_t *)(a2 + v170);
  v173 = *v172;
  *(_BYTE *)(v171 + 8) = *((_BYTE *)v172 + 8);
  *(_QWORD *)v171 = v173;
  v174 = a3[86];
  v175 = (_QWORD *)(a1 + v174);
  v176 = (_QWORD *)(a2 + v174);
  *v175 = *v176;
  v177 = v176[1];
  v175[1] = v177;
  swift_bridgeObjectRetain(v177);
  swift_bridgeObjectRelease();
  v178 = a3[87];
  v179 = a1 + v178;
  v180 = (uint64_t *)(a2 + v178);
  v181 = *v180;
  *(_BYTE *)(v179 + 8) = *((_BYTE *)v180 + 8);
  *(_QWORD *)v179 = v181;
  v182 = a3[88];
  v183 = (_QWORD *)(a1 + v182);
  v184 = (_QWORD *)(a2 + v182);
  *v183 = *v184;
  v185 = v184[1];
  v183[1] = v185;
  swift_bridgeObjectRetain(v185);
  swift_bridgeObjectRelease();
  v186 = a3[89];
  v187 = a1 + v186;
  v188 = (uint64_t *)(a2 + v186);
  v189 = *v188;
  *(_BYTE *)(v187 + 8) = *((_BYTE *)v188 + 8);
  *(_QWORD *)v187 = v189;
  v190 = a3[90];
  v191 = (_QWORD *)(a1 + v190);
  v192 = (_QWORD *)(a2 + v190);
  *v191 = *v192;
  v193 = v192[1];
  v191[1] = v193;
  swift_bridgeObjectRetain(v193);
  swift_bridgeObjectRelease();
  v194 = a3[91];
  v195 = a1 + v194;
  v196 = (uint64_t *)(a2 + v194);
  v197 = *v196;
  *(_BYTE *)(v195 + 8) = *((_BYTE *)v196 + 8);
  *(_QWORD *)v195 = v197;
  *(_BYTE *)(a1 + a3[92]) = *(_BYTE *)(a2 + a3[92]);
  *(_BYTE *)(a1 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
  *(_BYTE *)(a1 + a3[94]) = *(_BYTE *)(a2 + a3[94]);
  *(_BYTE *)(a1 + a3[95]) = *(_BYTE *)(a2 + a3[95]);
  v198 = a3[96];
  v199 = a1 + v198;
  v200 = (uint64_t *)(a2 + v198);
  v201 = *v200;
  *(_BYTE *)(v199 + 8) = *((_BYTE *)v200 + 8);
  *(_QWORD *)v199 = v201;
  v202 = a3[97];
  v203 = a1 + v202;
  v204 = (uint64_t *)(a2 + v202);
  v205 = *v204;
  *(_BYTE *)(v203 + 8) = *((_BYTE *)v204 + 8);
  *(_QWORD *)v203 = v205;
  v206 = a3[98];
  v207 = a1 + v206;
  v208 = (uint64_t *)(a2 + v206);
  v209 = *v208;
  *(_BYTE *)(v207 + 8) = *((_BYTE *)v208 + 8);
  *(_QWORD *)v207 = v209;
  v210 = a3[99];
  v211 = a1 + v210;
  v212 = (uint64_t *)(a2 + v210);
  v213 = *v212;
  *(_BYTE *)(v211 + 8) = *((_BYTE *)v212 + 8);
  *(_QWORD *)v211 = v213;
  v214 = a3[100];
  v215 = a1 + v214;
  v216 = (uint64_t *)(a2 + v214);
  v217 = *v216;
  *(_BYTE *)(v215 + 8) = *((_BYTE *)v216 + 8);
  *(_QWORD *)v215 = v217;
  v218 = a3[101];
  v219 = a1 + v218;
  v220 = (uint64_t *)(a2 + v218);
  v221 = *v220;
  *(_BYTE *)(v219 + 8) = *((_BYTE *)v220 + 8);
  *(_QWORD *)v219 = v221;
  v222 = a3[102];
  v223 = a1 + v222;
  v224 = (uint64_t *)(a2 + v222);
  v225 = *v224;
  *(_BYTE *)(v223 + 8) = *((_BYTE *)v224 + 8);
  *(_QWORD *)v223 = v225;
  v226 = a3[103];
  v227 = a1 + v226;
  v228 = (uint64_t *)(a2 + v226);
  v229 = *v228;
  *(_BYTE *)(v227 + 8) = *((_BYTE *)v228 + 8);
  *(_QWORD *)v227 = v229;
  v230 = a3[104];
  v231 = a1 + v230;
  v232 = (uint64_t *)(a2 + v230);
  v233 = *v232;
  *(_BYTE *)(v231 + 8) = *((_BYTE *)v232 + 8);
  *(_QWORD *)v231 = v233;
  v234 = a3[105];
  v235 = a1 + v234;
  v236 = (uint64_t *)(a2 + v234);
  v237 = *v236;
  *(_BYTE *)(v235 + 8) = *((_BYTE *)v236 + 8);
  *(_QWORD *)v235 = v237;
  v238 = a3[106];
  v239 = a1 + v238;
  v240 = (uint64_t *)(a2 + v238);
  v241 = *v240;
  *(_BYTE *)(v239 + 8) = *((_BYTE *)v240 + 8);
  *(_QWORD *)v239 = v241;
  v242 = a3[107];
  v243 = a1 + v242;
  v244 = (uint64_t *)(a2 + v242);
  v245 = *v244;
  *(_BYTE *)(v243 + 8) = *((_BYTE *)v244 + 8);
  *(_QWORD *)v243 = v245;
  v246 = a3[108];
  v247 = a1 + v246;
  v248 = (uint64_t *)(a2 + v246);
  v249 = *v248;
  *(_BYTE *)(v247 + 8) = *((_BYTE *)v248 + 8);
  *(_QWORD *)v247 = v249;
  v250 = a3[109];
  v251 = a1 + v250;
  v252 = (uint64_t *)(a2 + v250);
  v253 = *v252;
  *(_BYTE *)(v251 + 8) = *((_BYTE *)v252 + 8);
  *(_QWORD *)v251 = v253;
  v254 = a3[110];
  v255 = a1 + v254;
  v256 = (uint64_t *)(a2 + v254);
  v257 = *v256;
  *(_BYTE *)(v255 + 8) = *((_BYTE *)v256 + 8);
  *(_QWORD *)v255 = v257;
  v258 = a3[111];
  v259 = a1 + v258;
  v260 = (uint64_t *)(a2 + v258);
  v261 = *v260;
  *(_BYTE *)(v259 + 8) = *((_BYTE *)v260 + 8);
  *(_QWORD *)v259 = v261;
  v262 = a3[112];
  v263 = a1 + v262;
  v264 = (uint64_t *)(a2 + v262);
  v265 = *v264;
  *(_BYTE *)(v263 + 8) = *((_BYTE *)v264 + 8);
  *(_QWORD *)v263 = v265;
  v266 = a3[113];
  v267 = a1 + v266;
  v268 = (uint64_t *)(a2 + v266);
  v269 = *v268;
  *(_BYTE *)(v267 + 8) = *((_BYTE *)v268 + 8);
  *(_QWORD *)v267 = v269;
  v270 = a3[114];
  v271 = a1 + v270;
  v272 = (uint64_t *)(a2 + v270);
  v273 = *v272;
  *(_BYTE *)(v271 + 8) = *((_BYTE *)v272 + 8);
  *(_QWORD *)v271 = v273;
  v274 = a3[115];
  v275 = a1 + v274;
  v276 = (uint64_t *)(a2 + v274);
  v277 = *v276;
  *(_BYTE *)(v275 + 8) = *((_BYTE *)v276 + 8);
  *(_QWORD *)v275 = v277;
  v278 = a3[116];
  v279 = a1 + v278;
  v280 = (uint64_t *)(a2 + v278);
  v281 = *v280;
  *(_BYTE *)(v279 + 8) = *((_BYTE *)v280 + 8);
  *(_QWORD *)v279 = v281;
  v282 = a3[117];
  v283 = a1 + v282;
  v284 = (uint64_t *)(a2 + v282);
  v285 = *v284;
  *(_BYTE *)(v283 + 8) = *((_BYTE *)v284 + 8);
  *(_QWORD *)v283 = v285;
  *(_BYTE *)(a1 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
  v286 = a3[119];
  v287 = a1 + v286;
  v288 = (uint64_t *)(a2 + v286);
  v289 = *v288;
  *(_BYTE *)(v287 + 8) = *((_BYTE *)v288 + 8);
  *(_QWORD *)v287 = v289;
  v290 = a3[120];
  v291 = a1 + v290;
  v292 = (uint64_t *)(a2 + v290);
  v293 = *v292;
  *(_BYTE *)(v291 + 8) = *((_BYTE *)v292 + 8);
  *(_QWORD *)v291 = v293;
  v294 = a3[121];
  v295 = a1 + v294;
  v296 = (uint64_t *)(a2 + v294);
  v297 = *v296;
  *(_BYTE *)(v295 + 8) = *((_BYTE *)v296 + 8);
  *(_QWORD *)v295 = v297;
  *(_BYTE *)(a1 + a3[122]) = *(_BYTE *)(a2 + a3[122]);
  *(_BYTE *)(a1 + a3[123]) = *(_BYTE *)(a2 + a3[123]);
  *(_BYTE *)(a1 + a3[124]) = *(_BYTE *)(a2 + a3[124]);
  v298 = a3[125];
  v299 = a1 + v298;
  v300 = (uint64_t *)(a2 + v298);
  v301 = *v300;
  *(_BYTE *)(v299 + 8) = *((_BYTE *)v300 + 8);
  *(_QWORD *)v299 = v301;
  v302 = a3[126];
  v303 = a1 + v302;
  v304 = (uint64_t *)(a2 + v302);
  v305 = *v304;
  *(_BYTE *)(v303 + 8) = *((_BYTE *)v304 + 8);
  *(_QWORD *)v303 = v305;
  v306 = a3[127];
  v307 = a1 + v306;
  v308 = (uint64_t *)(a2 + v306);
  v309 = *v308;
  *(_BYTE *)(v307 + 8) = *((_BYTE *)v308 + 8);
  *(_QWORD *)v307 = v309;
  v310 = a3[128];
  v311 = a1 + v310;
  v312 = (uint64_t *)(a2 + v310);
  v313 = *v312;
  *(_BYTE *)(v311 + 8) = *((_BYTE *)v312 + 8);
  *(_QWORD *)v311 = v313;
  v314 = a3[129];
  v315 = a1 + v314;
  v316 = (uint64_t *)(a2 + v314);
  v317 = *v316;
  *(_BYTE *)(v315 + 8) = *((_BYTE *)v316 + 8);
  *(_QWORD *)v315 = v317;
  v318 = a3[130];
  v319 = a1 + v318;
  v320 = (uint64_t *)(a2 + v318);
  v321 = *v320;
  *(_BYTE *)(v319 + 8) = *((_BYTE *)v320 + 8);
  *(_QWORD *)v319 = v321;
  v322 = a3[131];
  v323 = a1 + v322;
  v324 = (uint64_t *)(a2 + v322);
  v325 = *v324;
  *(_BYTE *)(v323 + 8) = *((_BYTE *)v324 + 8);
  *(_QWORD *)v323 = v325;
  v326 = a3[132];
  v327 = a1 + v326;
  v328 = (uint64_t *)(a2 + v326);
  v329 = *v328;
  *(_BYTE *)(v327 + 8) = *((_BYTE *)v328 + 8);
  *(_QWORD *)v327 = v329;
  *(_BYTE *)(a1 + a3[133]) = *(_BYTE *)(a2 + a3[133]);
  v330 = a3[134];
  v331 = a1 + v330;
  v332 = (uint64_t *)(a2 + v330);
  v333 = *v332;
  *(_BYTE *)(v331 + 8) = *((_BYTE *)v332 + 8);
  *(_QWORD *)v331 = v333;
  v334 = a3[135];
  v335 = *(_QWORD *)(a2 + v334);
  *(_QWORD *)(a1 + v334) = v335;
  swift_bridgeObjectRetain(v335);
  swift_bridgeObjectRelease();
  v336 = a3[136];
  v337 = a1 + v336;
  v338 = (uint64_t *)(a2 + v336);
  v339 = *v338;
  *(_BYTE *)(v337 + 8) = *((_BYTE *)v338 + 8);
  *(_QWORD *)v337 = v339;
  *(_BYTE *)(a1 + a3[137]) = *(_BYTE *)(a2 + a3[137]);
  v340 = a3[138];
  v341 = *(_QWORD *)(a2 + v340);
  *(_QWORD *)(a1 + v340) = v341;
  swift_bridgeObjectRetain(v341);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[139]) = *(_BYTE *)(a2 + a3[139]);
  v342 = a3[140];
  v343 = a1 + v342;
  v344 = a2 + v342;
  v345 = *(_BYTE *)(v344 + 8);
  *(_QWORD *)v343 = *(_QWORD *)v344;
  *(_BYTE *)(v343 + 8) = v345;
  v346 = a3[141];
  v347 = a1 + v346;
  v348 = (uint64_t *)(a2 + v346);
  v349 = *v348;
  *(_BYTE *)(v347 + 8) = *((_BYTE *)v348 + 8);
  *(_QWORD *)v347 = v349;
  *(_BYTE *)(a1 + a3[142]) = *(_BYTE *)(a2 + a3[142]);
  *(_BYTE *)(a1 + a3[143]) = *(_BYTE *)(a2 + a3[143]);
  v350 = a3[144];
  v351 = a1 + v350;
  v352 = (uint64_t *)(a2 + v350);
  v353 = *v352;
  *(_BYTE *)(v351 + 8) = *((_BYTE *)v352 + 8);
  *(_QWORD *)v351 = v353;
  v354 = a3[145];
  v355 = a1 + v354;
  v356 = (uint64_t *)(a2 + v354);
  v357 = *v356;
  *(_BYTE *)(v355 + 8) = *((_BYTE *)v356 + 8);
  *(_QWORD *)v355 = v357;
  v358 = a3[146];
  v359 = a1 + v358;
  v360 = (uint64_t *)(a2 + v358);
  v361 = *v360;
  *(_BYTE *)(v359 + 8) = *((_BYTE *)v360 + 8);
  *(_QWORD *)v359 = v361;
  v362 = a3[147];
  v363 = a1 + v362;
  v364 = (uint64_t *)(a2 + v362);
  v365 = *v364;
  *(_BYTE *)(v363 + 8) = *((_BYTE *)v364 + 8);
  *(_QWORD *)v363 = v365;
  v366 = a3[148];
  v367 = a1 + v366;
  v368 = (uint64_t *)(a2 + v366);
  v369 = *v368;
  *(_BYTE *)(v367 + 8) = *((_BYTE *)v368 + 8);
  *(_QWORD *)v367 = v369;
  v370 = a3[149];
  v371 = a1 + v370;
  v372 = (uint64_t *)(a2 + v370);
  v373 = *v372;
  *(_BYTE *)(v371 + 8) = *((_BYTE *)v372 + 8);
  *(_QWORD *)v371 = v373;
  v374 = a3[150];
  v375 = a1 + v374;
  v376 = (uint64_t *)(a2 + v374);
  v377 = *v376;
  *(_BYTE *)(v375 + 8) = *((_BYTE *)v376 + 8);
  *(_QWORD *)v375 = v377;
  v378 = a3[151];
  v379 = a1 + v378;
  v380 = (uint64_t *)(a2 + v378);
  v381 = *v380;
  *(_BYTE *)(v379 + 8) = *((_BYTE *)v380 + 8);
  *(_QWORD *)v379 = v381;
  v382 = a3[152];
  v383 = a1 + v382;
  v384 = (uint64_t *)(a2 + v382);
  v385 = *v384;
  *(_BYTE *)(v383 + 8) = *((_BYTE *)v384 + 8);
  *(_QWORD *)v383 = v385;
  v386 = a3[153];
  v387 = a1 + v386;
  v388 = (uint64_t *)(a2 + v386);
  v389 = *v388;
  *(_BYTE *)(v387 + 8) = *((_BYTE *)v388 + 8);
  *(_QWORD *)v387 = v389;
  v390 = a3[154];
  v391 = a1 + v390;
  v392 = (uint64_t *)(a2 + v390);
  v393 = *v392;
  *(_BYTE *)(v391 + 8) = *((_BYTE *)v392 + 8);
  *(_QWORD *)v391 = v393;
  v394 = a3[155];
  v395 = a1 + v394;
  v396 = (uint64_t *)(a2 + v394);
  v397 = *v396;
  *(_BYTE *)(v395 + 8) = *((_BYTE *)v396 + 8);
  *(_QWORD *)v395 = v397;
  v398 = a3[156];
  v399 = a1 + v398;
  v400 = (uint64_t *)(a2 + v398);
  v401 = *v400;
  *(_BYTE *)(v399 + 8) = *((_BYTE *)v400 + 8);
  *(_QWORD *)v399 = v401;
  v402 = a3[157];
  v403 = a1 + v402;
  v404 = (uint64_t *)(a2 + v402);
  v405 = *v404;
  *(_BYTE *)(v403 + 8) = *((_BYTE *)v404 + 8);
  *(_QWORD *)v403 = v405;
  v406 = a3[158];
  v407 = a1 + v406;
  v408 = (uint64_t *)(a2 + v406);
  v409 = *v408;
  *(_BYTE *)(v407 + 8) = *((_BYTE *)v408 + 8);
  *(_QWORD *)v407 = v409;
  v410 = a3[159];
  v411 = a1 + v410;
  v412 = (uint64_t *)(a2 + v410);
  v413 = *v412;
  *(_BYTE *)(v411 + 8) = *((_BYTE *)v412 + 8);
  *(_QWORD *)v411 = v413;
  v414 = a3[160];
  v415 = a1 + v414;
  v416 = (uint64_t *)(a2 + v414);
  v417 = *v416;
  *(_BYTE *)(v415 + 8) = *((_BYTE *)v416 + 8);
  *(_QWORD *)v415 = v417;
  *(_BYTE *)(a1 + a3[161]) = *(_BYTE *)(a2 + a3[161]);
  *(_BYTE *)(a1 + a3[162]) = *(_BYTE *)(a2 + a3[162]);
  v418 = a3[163];
  v419 = a1 + v418;
  v420 = (uint64_t *)(a2 + v418);
  v421 = *v420;
  *(_BYTE *)(v419 + 8) = *((_BYTE *)v420 + 8);
  *(_QWORD *)v419 = v421;
  v422 = a3[164];
  v423 = a1 + v422;
  v424 = (uint64_t *)(a2 + v422);
  v425 = *v424;
  *(_BYTE *)(v423 + 8) = *((_BYTE *)v424 + 8);
  *(_QWORD *)v423 = v425;
  *(_BYTE *)(a1 + a3[165]) = *(_BYTE *)(a2 + a3[165]);
  v426 = a3[166];
  v427 = a1 + v426;
  v428 = a2 + v426;
  LODWORD(v425) = *(_DWORD *)v428;
  *(_BYTE *)(v427 + 4) = *(_BYTE *)(v428 + 4);
  *(_DWORD *)v427 = v425;
  v429 = a3[167];
  v430 = a1 + v429;
  v431 = (uint64_t *)(a2 + v429);
  v432 = *v431;
  *(_BYTE *)(v430 + 8) = *((_BYTE *)v431 + 8);
  *(_QWORD *)v430 = v432;
  v433 = a3[168];
  v434 = a1 + v433;
  v435 = (uint64_t *)(a2 + v433);
  v436 = *v435;
  *(_BYTE *)(v434 + 8) = *((_BYTE *)v435 + 8);
  *(_QWORD *)v434 = v436;
  v437 = a3[169];
  v438 = a1 + v437;
  v439 = (uint64_t *)(a2 + v437);
  v440 = *v439;
  *(_BYTE *)(v438 + 8) = *((_BYTE *)v439 + 8);
  *(_QWORD *)v438 = v440;
  v441 = a3[170];
  v442 = a1 + v441;
  v443 = (uint64_t *)(a2 + v441);
  v444 = *v443;
  *(_BYTE *)(v442 + 8) = *((_BYTE *)v443 + 8);
  *(_QWORD *)v442 = v444;
  v445 = a3[171];
  v446 = a1 + v445;
  v447 = (uint64_t *)(a2 + v445);
  v448 = *v447;
  *(_BYTE *)(v446 + 8) = *((_BYTE *)v447 + 8);
  *(_QWORD *)v446 = v448;
  v449 = a3[172];
  v450 = a1 + v449;
  v451 = (uint64_t *)(a2 + v449);
  v452 = *v451;
  *(_BYTE *)(v450 + 8) = *((_BYTE *)v451 + 8);
  *(_QWORD *)v450 = v452;
  v453 = a3[173];
  v454 = a1 + v453;
  v455 = (uint64_t *)(a2 + v453);
  v456 = *v455;
  *(_BYTE *)(v454 + 8) = *((_BYTE *)v455 + 8);
  *(_QWORD *)v454 = v456;
  *(_BYTE *)(a1 + a3[174]) = *(_BYTE *)(a2 + a3[174]);
  v457 = a3[175];
  v458 = a1 + v457;
  v459 = (uint64_t *)(a2 + v457);
  v460 = *v459;
  *(_BYTE *)(v458 + 8) = *((_BYTE *)v459 + 8);
  *(_QWORD *)v458 = v460;
  v461 = a3[176];
  v462 = a1 + v461;
  v463 = (uint64_t *)(a2 + v461);
  v464 = *v463;
  *(_BYTE *)(v462 + 8) = *((_BYTE *)v463 + 8);
  *(_QWORD *)v462 = v464;
  return a1;
}

uint64_t sub_1006CBC2C(uint64_t a1)
{
  destroy for AllMacBeaconConfigs(a1);
  return a1;
}

uint64_t sub_1006CBC60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(const void *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v6 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v6;
  v7 = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = v7;
  v8 = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = v8;
  v9 = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = v9;
  v10 = *(_QWORD *)(a2 + 288);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = v10;
  v11 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v11;
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  v12 = *(_QWORD *)(a2 + 328);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a1 + 328) = v12;
  v13 = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 344) = v13;
  v14 = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_QWORD *)(a1 + 360) = v14;
  v15 = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = v15;
  v16 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v16;
  v17 = *(_QWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = v17;
  v18 = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = v18;
  v19 = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = v19;
  v20 = *(_QWORD *)(a2 + 456);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = v20;
  v21 = *(_QWORD *)(a2 + 472);
  *(_BYTE *)(a1 + 480) = *(_BYTE *)(a2 + 480);
  *(_QWORD *)(a1 + 472) = v21;
  *(_BYTE *)(a1 + 481) = *(_BYTE *)(a2 + 481);
  v22 = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = v22;
  v23 = *(_QWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = v23;
  v24 = *(_QWORD *)(a2 + 520);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_QWORD *)(a1 + 520) = v24;
  v25 = *(_QWORD *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v25;
  v26 = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 552) = v26;
  v27 = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_QWORD *)(a1 + 568) = v27;
  v28 = *(_QWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_QWORD *)(a1 + 584) = v28;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  v29 = *(_QWORD *)(a2 + 608);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_QWORD *)(a1 + 608) = v29;
  v30 = *(_QWORD *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  *(_QWORD *)(a1 + 624) = v30;
  v31 = *(_OWORD *)(a2 + 640);
  v32 = *(_QWORD *)(a2 + 656);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(_QWORD *)(a1 + 656) = v32;
  v33 = *(_QWORD *)(a2 + 672);
  *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
  *(_QWORD *)(a1 + 672) = v33;
  v34 = *(_QWORD *)(a2 + 688);
  *(_BYTE *)(a1 + 696) = *(_BYTE *)(a2 + 696);
  *(_QWORD *)(a1 + 688) = v34;
  v35 = *(_QWORD *)(a2 + 704);
  *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
  *(_QWORD *)(a1 + 704) = v35;
  v36 = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_QWORD *)(a1 + 720) = v36;
  *(_BYTE *)(a1 + 729) = *(_BYTE *)(a2 + 729);
  v37 = a3[60];
  v38 = (void *)(a1 + v37);
  v39 = (const void *)(a2 + v37);
  *(_OWORD *)(a1 + 640) = v31;
  v40 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    v42 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v43 = a3[61];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  v46 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v47 + 48);
  if (v48(v45, 1, v46))
  {
    v49 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 32))(v44, v45, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v50 = a3[62];
  v51 = a3[63];
  v52 = a1 + v50;
  v53 = a2 + v50;
  *(_QWORD *)v52 = *(_QWORD *)v53;
  *(_BYTE *)(v52 + 8) = *(_BYTE *)(v53 + 8);
  v54 = (void *)(a1 + v51);
  v55 = (const void *)(a2 + v51);
  if (v48((const void *)(a2 + v51), 1, v46))
  {
    v56 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v47 + 32))(v54, v55, v46);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v54, 0, 1, v46);
  }
  v57 = a3[64];
  v58 = a1 + v57;
  v59 = a2 + v57;
  *(_QWORD *)v58 = *(_QWORD *)v59;
  *(_BYTE *)(v58 + 8) = *(_BYTE *)(v59 + 8);
  v60 = a3[65];
  v61 = a1 + v60;
  v62 = a2 + v60;
  *(_QWORD *)v61 = *(_QWORD *)v62;
  *(_BYTE *)(v61 + 8) = *(_BYTE *)(v62 + 8);
  v63 = a3[66];
  v64 = a1 + v63;
  v65 = a2 + v63;
  *(_QWORD *)v64 = *(_QWORD *)v65;
  *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
  v66 = a3[67];
  v67 = a1 + v66;
  v68 = a2 + v66;
  *(_BYTE *)(v67 + 8) = *(_BYTE *)(v68 + 8);
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v69 = a3[68];
  v70 = a1 + v69;
  v71 = a2 + v69;
  *(_QWORD *)v70 = *(_QWORD *)v71;
  *(_BYTE *)(v70 + 8) = *(_BYTE *)(v71 + 8);
  v72 = a3[69];
  v73 = a1 + v72;
  v74 = a2 + v72;
  *(_QWORD *)v73 = *(_QWORD *)v74;
  *(_BYTE *)(v73 + 8) = *(_BYTE *)(v74 + 8);
  v75 = a3[70];
  v76 = (_OWORD *)(a1 + v75);
  v77 = (_OWORD *)(a2 + v75);
  v78 = v77[1];
  *v76 = *v77;
  v76[1] = v78;
  v79 = v77[6];
  v80 = v77[4];
  v76[5] = v77[5];
  v76[6] = v79;
  v81 = v77[3];
  v76[2] = v77[2];
  v76[3] = v81;
  v76[4] = v80;
  *(_BYTE *)(a1 + a3[71]) = *(_BYTE *)(a2 + a3[71]);
  *(_BYTE *)(a1 + a3[72]) = *(_BYTE *)(a2 + a3[72]);
  *(_BYTE *)(a1 + a3[73]) = *(_BYTE *)(a2 + a3[73]);
  v82 = a3[74];
  v83 = a1 + v82;
  v84 = a2 + v82;
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *(_BYTE *)(v83 + 8) = *(_BYTE *)(v84 + 8);
  v85 = a3[75];
  v86 = a1 + v85;
  v87 = a2 + v85;
  *(_QWORD *)v86 = *(_QWORD *)v87;
  *(_BYTE *)(v86 + 8) = *(_BYTE *)(v87 + 8);
  v88 = a3[76];
  v89 = a1 + v88;
  v90 = a2 + v88;
  *(_QWORD *)v89 = *(_QWORD *)v90;
  *(_BYTE *)(v89 + 8) = *(_BYTE *)(v90 + 8);
  v91 = a3[77];
  v92 = a1 + v91;
  v93 = a2 + v91;
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *(_BYTE *)(v92 + 8) = *(_BYTE *)(v93 + 8);
  v94 = a3[78];
  v95 = a1 + v94;
  v96 = (uint64_t *)(a2 + v94);
  v97 = *v96;
  *(_BYTE *)(v95 + 8) = *((_BYTE *)v96 + 8);
  *(_QWORD *)v95 = v97;
  v98 = a3[79];
  v99 = a1 + v98;
  v100 = a2 + v98;
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  v101 = a3[80];
  v102 = a1 + v101;
  v103 = a2 + v101;
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  *(_OWORD *)(a1 + a3[81]) = *(_OWORD *)(a2 + a3[81]);
  *(_BYTE *)(a1 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
  v104 = a3[83];
  v105 = a1 + v104;
  v106 = a2 + v104;
  *(_QWORD *)v105 = *(_QWORD *)v106;
  *(_BYTE *)(v105 + 8) = *(_BYTE *)(v106 + 8);
  v107 = a3[84];
  v108 = a1 + v107;
  v109 = a2 + v107;
  *(_QWORD *)v108 = *(_QWORD *)v109;
  *(_BYTE *)(v108 + 8) = *(_BYTE *)(v109 + 8);
  v110 = a3[85];
  v111 = a1 + v110;
  v112 = a2 + v110;
  *(_QWORD *)v111 = *(_QWORD *)v112;
  v113 = a3[86];
  v114 = *(_OWORD *)(a2 + v113);
  *(_BYTE *)(v111 + 8) = *(_BYTE *)(v112 + 8);
  *(_OWORD *)(a1 + v113) = v114;
  v115 = a3[87];
  v116 = a1 + v115;
  v117 = a2 + v115;
  *(_QWORD *)v116 = *(_QWORD *)v117;
  v118 = a3[88];
  v119 = *(_OWORD *)(a2 + v118);
  *(_BYTE *)(v116 + 8) = *(_BYTE *)(v117 + 8);
  *(_OWORD *)(a1 + v118) = v119;
  v120 = a3[89];
  v121 = a1 + v120;
  v122 = a2 + v120;
  *(_QWORD *)v121 = *(_QWORD *)v122;
  v123 = a3[90];
  v124 = *(_OWORD *)(a2 + v123);
  *(_BYTE *)(v121 + 8) = *(_BYTE *)(v122 + 8);
  *(_OWORD *)(a1 + v123) = v124;
  v125 = a3[91];
  v126 = a1 + v125;
  v127 = a2 + v125;
  *(_QWORD *)v126 = *(_QWORD *)v127;
  v128 = a3[92];
  v129 = *(_BYTE *)(a2 + v128);
  *(_BYTE *)(v126 + 8) = *(_BYTE *)(v127 + 8);
  *(_BYTE *)(a1 + v128) = v129;
  *(_BYTE *)(a1 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
  *(_BYTE *)(a1 + a3[94]) = *(_BYTE *)(a2 + a3[94]);
  *(_BYTE *)(a1 + a3[95]) = *(_BYTE *)(a2 + a3[95]);
  v130 = a3[96];
  v131 = a1 + v130;
  v132 = a2 + v130;
  *(_QWORD *)v131 = *(_QWORD *)v132;
  *(_BYTE *)(v131 + 8) = *(_BYTE *)(v132 + 8);
  v133 = a3[97];
  v134 = a1 + v133;
  v135 = a2 + v133;
  *(_QWORD *)v134 = *(_QWORD *)v135;
  *(_BYTE *)(v134 + 8) = *(_BYTE *)(v135 + 8);
  v136 = a3[98];
  v137 = a1 + v136;
  v138 = a2 + v136;
  *(_QWORD *)v137 = *(_QWORD *)v138;
  *(_BYTE *)(v137 + 8) = *(_BYTE *)(v138 + 8);
  v139 = a3[99];
  v140 = a1 + v139;
  v141 = a2 + v139;
  *(_QWORD *)v140 = *(_QWORD *)v141;
  *(_BYTE *)(v140 + 8) = *(_BYTE *)(v141 + 8);
  v142 = a3[100];
  v143 = a1 + v142;
  v144 = (uint64_t *)(a2 + v142);
  v145 = *v144;
  *(_BYTE *)(v143 + 8) = *((_BYTE *)v144 + 8);
  *(_QWORD *)v143 = v145;
  v146 = a3[101];
  v147 = a1 + v146;
  v148 = a2 + v146;
  *(_QWORD *)v147 = *(_QWORD *)v148;
  *(_BYTE *)(v147 + 8) = *(_BYTE *)(v148 + 8);
  v149 = a3[102];
  v150 = a1 + v149;
  v151 = a2 + v149;
  *(_QWORD *)v150 = *(_QWORD *)v151;
  *(_BYTE *)(v150 + 8) = *(_BYTE *)(v151 + 8);
  v152 = a3[103];
  v153 = a1 + v152;
  v154 = a2 + v152;
  *(_QWORD *)v153 = *(_QWORD *)v154;
  *(_BYTE *)(v153 + 8) = *(_BYTE *)(v154 + 8);
  v155 = a3[104];
  v156 = a1 + v155;
  v157 = a2 + v155;
  *(_QWORD *)v156 = *(_QWORD *)v157;
  *(_BYTE *)(v156 + 8) = *(_BYTE *)(v157 + 8);
  v158 = a3[105];
  v159 = a1 + v158;
  v160 = a2 + v158;
  *(_QWORD *)v159 = *(_QWORD *)v160;
  *(_BYTE *)(v159 + 8) = *(_BYTE *)(v160 + 8);
  v161 = a3[106];
  v162 = a1 + v161;
  v163 = a2 + v161;
  *(_QWORD *)v162 = *(_QWORD *)v163;
  *(_BYTE *)(v162 + 8) = *(_BYTE *)(v163 + 8);
  v164 = a3[107];
  v165 = a1 + v164;
  v166 = a2 + v164;
  *(_QWORD *)v165 = *(_QWORD *)v166;
  *(_BYTE *)(v165 + 8) = *(_BYTE *)(v166 + 8);
  v167 = a3[108];
  v168 = a1 + v167;
  v169 = a2 + v167;
  *(_QWORD *)v168 = *(_QWORD *)v169;
  *(_BYTE *)(v168 + 8) = *(_BYTE *)(v169 + 8);
  v170 = a3[109];
  v171 = a1 + v170;
  v172 = a2 + v170;
  *(_QWORD *)v171 = *(_QWORD *)v172;
  *(_BYTE *)(v171 + 8) = *(_BYTE *)(v172 + 8);
  v173 = a3[110];
  v174 = a1 + v173;
  v175 = a2 + v173;
  *(_QWORD *)v174 = *(_QWORD *)v175;
  *(_BYTE *)(v174 + 8) = *(_BYTE *)(v175 + 8);
  v176 = a3[111];
  v177 = a1 + v176;
  v178 = a2 + v176;
  *(_QWORD *)v177 = *(_QWORD *)v178;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  v179 = a3[112];
  v180 = a1 + v179;
  v181 = a2 + v179;
  *(_QWORD *)v180 = *(_QWORD *)v181;
  *(_BYTE *)(v180 + 8) = *(_BYTE *)(v181 + 8);
  v182 = a3[113];
  v183 = a1 + v182;
  v184 = a2 + v182;
  *(_QWORD *)v183 = *(_QWORD *)v184;
  *(_BYTE *)(v183 + 8) = *(_BYTE *)(v184 + 8);
  v185 = a3[114];
  v186 = a1 + v185;
  v187 = a2 + v185;
  *(_QWORD *)v186 = *(_QWORD *)v187;
  *(_BYTE *)(v186 + 8) = *(_BYTE *)(v187 + 8);
  v188 = a3[115];
  v189 = a1 + v188;
  v190 = a2 + v188;
  *(_QWORD *)v189 = *(_QWORD *)v190;
  *(_BYTE *)(v189 + 8) = *(_BYTE *)(v190 + 8);
  v191 = a3[116];
  v192 = a1 + v191;
  v193 = a2 + v191;
  *(_QWORD *)v192 = *(_QWORD *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  v194 = a3[117];
  v195 = a1 + v194;
  v196 = a2 + v194;
  *(_QWORD *)v195 = *(_QWORD *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  *(_BYTE *)(a1 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
  v197 = a3[119];
  v198 = a1 + v197;
  v199 = a2 + v197;
  *(_QWORD *)v198 = *(_QWORD *)v199;
  *(_BYTE *)(v198 + 8) = *(_BYTE *)(v199 + 8);
  v200 = a3[120];
  v201 = a1 + v200;
  v202 = a2 + v200;
  *(_QWORD *)v201 = *(_QWORD *)v202;
  *(_BYTE *)(v201 + 8) = *(_BYTE *)(v202 + 8);
  v203 = a3[121];
  v204 = a1 + v203;
  v205 = a2 + v203;
  *(_QWORD *)v204 = *(_QWORD *)v205;
  v206 = a3[122];
  v207 = *(_BYTE *)(a2 + v206);
  *(_BYTE *)(v204 + 8) = *(_BYTE *)(v205 + 8);
  *(_BYTE *)(a1 + v206) = v207;
  *(_BYTE *)(a1 + a3[123]) = *(_BYTE *)(a2 + a3[123]);
  *(_BYTE *)(a1 + a3[124]) = *(_BYTE *)(a2 + a3[124]);
  v208 = a3[125];
  v209 = a1 + v208;
  v210 = a2 + v208;
  *(_QWORD *)v209 = *(_QWORD *)v210;
  *(_BYTE *)(v209 + 8) = *(_BYTE *)(v210 + 8);
  v211 = a3[126];
  v212 = a1 + v211;
  v213 = a2 + v211;
  *(_QWORD *)v212 = *(_QWORD *)v213;
  *(_BYTE *)(v212 + 8) = *(_BYTE *)(v213 + 8);
  v214 = a3[127];
  v215 = a1 + v214;
  v216 = a2 + v214;
  *(_QWORD *)v215 = *(_QWORD *)v216;
  *(_BYTE *)(v215 + 8) = *(_BYTE *)(v216 + 8);
  v217 = a3[128];
  v218 = a1 + v217;
  v219 = a2 + v217;
  *(_QWORD *)v218 = *(_QWORD *)v219;
  *(_BYTE *)(v218 + 8) = *(_BYTE *)(v219 + 8);
  v220 = a3[129];
  v221 = a1 + v220;
  v222 = (uint64_t *)(a2 + v220);
  v223 = *v222;
  *(_BYTE *)(v221 + 8) = *((_BYTE *)v222 + 8);
  *(_QWORD *)v221 = v223;
  v224 = a3[130];
  v225 = a1 + v224;
  v226 = a2 + v224;
  *(_QWORD *)v225 = *(_QWORD *)v226;
  *(_BYTE *)(v225 + 8) = *(_BYTE *)(v226 + 8);
  v227 = a3[131];
  v228 = a1 + v227;
  v229 = a2 + v227;
  *(_QWORD *)v228 = *(_QWORD *)v229;
  *(_BYTE *)(v228 + 8) = *(_BYTE *)(v229 + 8);
  v230 = a3[132];
  v231 = a1 + v230;
  v232 = a2 + v230;
  *(_QWORD *)v231 = *(_QWORD *)v232;
  v233 = a3[133];
  v234 = *(_BYTE *)(a2 + v233);
  *(_BYTE *)(v231 + 8) = *(_BYTE *)(v232 + 8);
  *(_BYTE *)(a1 + v233) = v234;
  v235 = a3[134];
  v236 = a1 + v235;
  v237 = a2 + v235;
  *(_QWORD *)v236 = *(_QWORD *)v237;
  v238 = a3[135];
  v239 = *(_QWORD *)(a2 + v238);
  *(_BYTE *)(v236 + 8) = *(_BYTE *)(v237 + 8);
  *(_QWORD *)(a1 + v238) = v239;
  v240 = a3[136];
  v241 = a1 + v240;
  v242 = a2 + v240;
  *(_QWORD *)v241 = *(_QWORD *)v242;
  v243 = a3[137];
  LOBYTE(v239) = *(_BYTE *)(a2 + v243);
  *(_BYTE *)(v241 + 8) = *(_BYTE *)(v242 + 8);
  *(_BYTE *)(a1 + v243) = v239;
  *(_QWORD *)(a1 + a3[138]) = *(_QWORD *)(a2 + a3[138]);
  *(_BYTE *)(a1 + a3[139]) = *(_BYTE *)(a2 + a3[139]);
  v244 = a3[140];
  v245 = a1 + v244;
  v246 = a2 + v244;
  *(_QWORD *)v245 = *(_QWORD *)v246;
  *(_BYTE *)(v245 + 8) = *(_BYTE *)(v246 + 8);
  v247 = a3[141];
  v248 = a1 + v247;
  v249 = a2 + v247;
  *(_QWORD *)v248 = *(_QWORD *)v249;
  v250 = a3[142];
  LOBYTE(v239) = *(_BYTE *)(a2 + v250);
  *(_BYTE *)(v248 + 8) = *(_BYTE *)(v249 + 8);
  *(_BYTE *)(a1 + v250) = v239;
  *(_BYTE *)(a1 + a3[143]) = *(_BYTE *)(a2 + a3[143]);
  v251 = a3[144];
  v252 = a1 + v251;
  v253 = a2 + v251;
  *(_QWORD *)v252 = *(_QWORD *)v253;
  *(_BYTE *)(v252 + 8) = *(_BYTE *)(v253 + 8);
  v254 = a3[145];
  v255 = a1 + v254;
  v256 = a2 + v254;
  *(_QWORD *)v255 = *(_QWORD *)v256;
  *(_BYTE *)(v255 + 8) = *(_BYTE *)(v256 + 8);
  v257 = a3[146];
  v258 = a1 + v257;
  v259 = a2 + v257;
  *(_QWORD *)v258 = *(_QWORD *)v259;
  *(_BYTE *)(v258 + 8) = *(_BYTE *)(v259 + 8);
  v260 = a3[147];
  v261 = a1 + v260;
  v262 = a2 + v260;
  *(_QWORD *)v261 = *(_QWORD *)v262;
  *(_BYTE *)(v261 + 8) = *(_BYTE *)(v262 + 8);
  v263 = a3[148];
  v264 = a1 + v263;
  v265 = (uint64_t *)(a2 + v263);
  v266 = *v265;
  *(_BYTE *)(v264 + 8) = *((_BYTE *)v265 + 8);
  *(_QWORD *)v264 = v266;
  v267 = a3[149];
  v268 = a1 + v267;
  v269 = a2 + v267;
  *(_QWORD *)v268 = *(_QWORD *)v269;
  *(_BYTE *)(v268 + 8) = *(_BYTE *)(v269 + 8);
  v270 = a3[150];
  v271 = a1 + v270;
  v272 = a2 + v270;
  *(_QWORD *)v271 = *(_QWORD *)v272;
  *(_BYTE *)(v271 + 8) = *(_BYTE *)(v272 + 8);
  v273 = a3[151];
  v274 = a1 + v273;
  v275 = a2 + v273;
  *(_QWORD *)v274 = *(_QWORD *)v275;
  *(_BYTE *)(v274 + 8) = *(_BYTE *)(v275 + 8);
  v276 = a3[152];
  v277 = a1 + v276;
  v278 = a2 + v276;
  *(_QWORD *)v277 = *(_QWORD *)v278;
  *(_BYTE *)(v277 + 8) = *(_BYTE *)(v278 + 8);
  v279 = a3[153];
  v280 = a1 + v279;
  v281 = a2 + v279;
  *(_QWORD *)v280 = *(_QWORD *)v281;
  *(_BYTE *)(v280 + 8) = *(_BYTE *)(v281 + 8);
  v282 = a3[154];
  v283 = a1 + v282;
  v284 = a2 + v282;
  *(_QWORD *)v283 = *(_QWORD *)v284;
  *(_BYTE *)(v283 + 8) = *(_BYTE *)(v284 + 8);
  v285 = a3[155];
  v286 = a1 + v285;
  v287 = a2 + v285;
  *(_QWORD *)v286 = *(_QWORD *)v287;
  *(_BYTE *)(v286 + 8) = *(_BYTE *)(v287 + 8);
  v288 = a3[156];
  v289 = a1 + v288;
  v290 = a2 + v288;
  *(_QWORD *)v289 = *(_QWORD *)v290;
  *(_BYTE *)(v289 + 8) = *(_BYTE *)(v290 + 8);
  v291 = a3[157];
  v292 = a1 + v291;
  v293 = a2 + v291;
  *(_QWORD *)v292 = *(_QWORD *)v293;
  *(_BYTE *)(v292 + 8) = *(_BYTE *)(v293 + 8);
  v294 = a3[158];
  v295 = a1 + v294;
  v296 = a2 + v294;
  *(_QWORD *)v295 = *(_QWORD *)v296;
  *(_BYTE *)(v295 + 8) = *(_BYTE *)(v296 + 8);
  v297 = a3[159];
  v298 = a1 + v297;
  v299 = a2 + v297;
  *(_QWORD *)v298 = *(_QWORD *)v299;
  *(_BYTE *)(v298 + 8) = *(_BYTE *)(v299 + 8);
  v300 = a3[160];
  v301 = a1 + v300;
  v302 = a2 + v300;
  *(_QWORD *)v301 = *(_QWORD *)v302;
  *(_BYTE *)(v301 + 8) = *(_BYTE *)(v302 + 8);
  *(_BYTE *)(a1 + a3[161]) = *(_BYTE *)(a2 + a3[161]);
  *(_BYTE *)(a1 + a3[162]) = *(_BYTE *)(a2 + a3[162]);
  v303 = a3[163];
  v304 = a1 + v303;
  v305 = a2 + v303;
  *(_QWORD *)v304 = *(_QWORD *)v305;
  *(_BYTE *)(v304 + 8) = *(_BYTE *)(v305 + 8);
  v306 = a3[164];
  v307 = a1 + v306;
  v308 = a2 + v306;
  *(_QWORD *)v307 = *(_QWORD *)v308;
  *(_BYTE *)(v307 + 8) = *(_BYTE *)(v308 + 8);
  *(_BYTE *)(a1 + a3[165]) = *(_BYTE *)(a2 + a3[165]);
  v309 = a3[166];
  v310 = a1 + v309;
  v311 = a2 + v309;
  *(_DWORD *)v310 = *(_DWORD *)v311;
  *(_BYTE *)(v310 + 4) = *(_BYTE *)(v311 + 4);
  v312 = a3[167];
  v313 = a1 + v312;
  v314 = a2 + v312;
  *(_QWORD *)v313 = *(_QWORD *)v314;
  *(_BYTE *)(v313 + 8) = *(_BYTE *)(v314 + 8);
  v315 = a3[168];
  v316 = a1 + v315;
  v317 = a2 + v315;
  *(_QWORD *)v316 = *(_QWORD *)v317;
  *(_BYTE *)(v316 + 8) = *(_BYTE *)(v317 + 8);
  v318 = a3[169];
  v319 = a1 + v318;
  v320 = a2 + v318;
  *(_QWORD *)v319 = *(_QWORD *)v320;
  *(_BYTE *)(v319 + 8) = *(_BYTE *)(v320 + 8);
  v321 = a3[170];
  v322 = a1 + v321;
  v323 = (uint64_t *)(a2 + v321);
  v324 = *v323;
  *(_BYTE *)(v322 + 8) = *((_BYTE *)v323 + 8);
  *(_QWORD *)v322 = v324;
  v325 = a3[171];
  v326 = a1 + v325;
  v327 = a2 + v325;
  *(_QWORD *)v326 = *(_QWORD *)v327;
  *(_BYTE *)(v326 + 8) = *(_BYTE *)(v327 + 8);
  v328 = a3[172];
  v329 = a1 + v328;
  v330 = a2 + v328;
  *(_QWORD *)v329 = *(_QWORD *)v330;
  *(_BYTE *)(v329 + 8) = *(_BYTE *)(v330 + 8);
  v331 = a3[173];
  v332 = a1 + v331;
  v333 = a2 + v331;
  *(_QWORD *)v332 = *(_QWORD *)v333;
  v334 = a3[174];
  LOBYTE(v239) = *(_BYTE *)(a2 + v334);
  *(_BYTE *)(v332 + 8) = *(_BYTE *)(v333 + 8);
  *(_BYTE *)(a1 + v334) = v239;
  v335 = a3[175];
  v336 = a1 + v335;
  v337 = a2 + v335;
  *(_QWORD *)v336 = *(_QWORD *)v337;
  *(_BYTE *)(v336 + 8) = *(_BYTE *)(v337 + 8);
  v338 = a3[176];
  v339 = a1 + v338;
  v340 = a2 + v338;
  *(_QWORD *)v339 = *(_QWORD *)v340;
  *(_BYTE *)(v339 + 8) = *(_BYTE *)(v340 + 8);
  return a1;
}

uint64_t sub_1006CCBCC(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  char v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v6);
LABEL_6:
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 200) = *(_BYTE *)(a2 + 200);
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a2 + 216);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  v10 = *(_QWORD *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(_QWORD *)(a1 + 224) = v10;
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 280) = *(_BYTE *)(a2 + 280);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_BYTE *)(a1 + 296) = *(_BYTE *)(a2 + 296);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  v11 = *(_QWORD *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(_QWORD *)(a1 + 304) = v11;
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_BYTE *)(a1 + 336) = *(_BYTE *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_BYTE *)(a1 + 352) = *(_BYTE *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_BYTE *)(a1 + 368) = *(_BYTE *)(a2 + 368);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  v12 = *(_QWORD *)(a2 + 392);
  *(_BYTE *)(a1 + 400) = *(_BYTE *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = v12;
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_BYTE *)(a1 + 416) = *(_BYTE *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_BYTE *)(a1 + 432) = *(_BYTE *)(a2 + 432);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_WORD *)(a1 + 480) = *(_WORD *)(a2 + 480);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 512) = *(_BYTE *)(a2 + 512);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_BYTE *)(a1 + 528) = *(_BYTE *)(a2 + 528);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  v13 = *(_QWORD *)(a2 + 536);
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  *(_QWORD *)(a1 + 536) = v13;
  v14 = *(_QWORD *)(a2 + 552);
  *(_BYTE *)(a1 + 560) = *(_BYTE *)(a2 + 560);
  *(_QWORD *)(a1 + 552) = v14;
  v15 = *(_QWORD *)(a2 + 568);
  *(_BYTE *)(a1 + 576) = *(_BYTE *)(a2 + 576);
  *(_QWORD *)(a1 + 568) = v15;
  v16 = *(_QWORD *)(a2 + 584);
  *(_BYTE *)(a1 + 592) = *(_BYTE *)(a2 + 592);
  *(_QWORD *)(a1 + 584) = v16;
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  *(_BYTE *)(a1 + 616) = *(_BYTE *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_BYTE *)(a1 + 632) = *(_BYTE *)(a2 + 632);
  v17 = *(void **)(a1 + 640);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);

  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_BYTE *)(a1 + 680) = *(_BYTE *)(a2 + 680);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_BYTE *)(a1 + 696) = *(_BYTE *)(a2 + 696);
  *(_BYTE *)(a1 + 712) = *(_BYTE *)(a2 + 712);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  v18 = *(_QWORD *)(a2 + 720);
  *(_BYTE *)(a1 + 728) = *(_BYTE *)(a2 + 728);
  *(_QWORD *)(a1 + 720) = v18;
  *(_BYTE *)(a1 + 729) = *(_BYTE *)(a2 + 729);
  v19 = a3[60];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_11:
    v27 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_12:
  v28 = a3[61];
  v29 = (void *)(a1 + v28);
  v30 = (void *)(a2 + v28);
  v31 = type metadata accessor for Date(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 32))(v29, v30, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v35)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v29, v31);
LABEL_17:
    v36 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 40))(v29, v30, v31);
LABEL_18:
  v37 = a3[62];
  v38 = a3[63];
  v39 = a1 + v37;
  v40 = a2 + v37;
  *(_QWORD *)v39 = *(_QWORD *)v40;
  *(_BYTE *)(v39 + 8) = *(_BYTE *)(v40 + 8);
  v41 = (void *)(a1 + v38);
  v42 = (void *)(a2 + v38);
  v43 = v33((void *)(a1 + v38), 1, v31);
  v44 = v33(v42, 1, v31);
  if (v43)
  {
    if (!v44)
    {
      (*(void (**)(void *, void *, uint64_t))(v32 + 32))(v41, v42, v31);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v41, 0, 1, v31);
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v44)
  {
    (*(void (**)(void *, uint64_t))(v32 + 8))(v41, v31);
LABEL_23:
    v45 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_24;
  }
  (*(void (**)(void *, void *, uint64_t))(v32 + 40))(v41, v42, v31);
LABEL_24:
  v46 = a3[64];
  v47 = a1 + v46;
  v48 = a2 + v46;
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_BYTE *)(v47 + 8) = *(_BYTE *)(v48 + 8);
  v49 = a3[65];
  v50 = a1 + v49;
  v51 = a2 + v49;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_BYTE *)(v50 + 8) = *(_BYTE *)(v51 + 8);
  v52 = a3[66];
  v53 = a1 + v52;
  v54 = a2 + v52;
  *(_QWORD *)v53 = *(_QWORD *)v54;
  *(_BYTE *)(v53 + 8) = *(_BYTE *)(v54 + 8);
  v55 = a3[67];
  v56 = a1 + v55;
  v57 = a2 + v55;
  *(_QWORD *)v56 = *(_QWORD *)v57;
  *(_BYTE *)(v56 + 8) = *(_BYTE *)(v57 + 8);
  v58 = a3[68];
  v59 = a1 + v58;
  v60 = (uint64_t *)(a2 + v58);
  v61 = *v60;
  *(_BYTE *)(v59 + 8) = *((_BYTE *)v60 + 8);
  *(_QWORD *)v59 = v61;
  v62 = a3[69];
  v63 = a1 + v62;
  v64 = a2 + v62;
  *(_BYTE *)(v63 + 8) = *(_BYTE *)(v64 + 8);
  *(_QWORD *)v63 = *(_QWORD *)v64;
  v65 = a3[70];
  v66 = a1 + v65;
  v67 = a2 + v65;
  if (!*(_QWORD *)(a1 + v65 + 48))
  {
LABEL_28:
    v70 = *(_OWORD *)(v67 + 80);
    *(_OWORD *)(v66 + 64) = *(_OWORD *)(v67 + 64);
    *(_OWORD *)(v66 + 80) = v70;
    *(_OWORD *)(v66 + 96) = *(_OWORD *)(v67 + 96);
    v71 = *(_OWORD *)(v67 + 16);
    *(_OWORD *)v66 = *(_OWORD *)v67;
    *(_OWORD *)(v66 + 16) = v71;
    v72 = *(_OWORD *)(v67 + 48);
    *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
    *(_OWORD *)(v66 + 48) = v72;
    goto LABEL_29;
  }
  v68 = *(_QWORD *)(v67 + 48);
  if (!v68)
  {
    sub_1006CBC2C(v66);
    goto LABEL_28;
  }
  v69 = *(_OWORD *)(v67 + 16);
  *(_OWORD *)v66 = *(_OWORD *)v67;
  *(_OWORD *)(v66 + 16) = v69;
  *(_OWORD *)(v66 + 32) = *(_OWORD *)(v67 + 32);
  *(_QWORD *)(v66 + 48) = v68;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v66 + 56) = *(_OWORD *)(v67 + 56);
  *(_OWORD *)(v66 + 72) = *(_OWORD *)(v67 + 72);
  *(_OWORD *)(v66 + 88) = *(_OWORD *)(v67 + 88);
  *(_QWORD *)(v66 + 104) = *(_QWORD *)(v67 + 104);
  swift_bridgeObjectRelease();
LABEL_29:
  *(_BYTE *)(a1 + a3[71]) = *(_BYTE *)(a2 + a3[71]);
  *(_BYTE *)(a1 + a3[72]) = *(_BYTE *)(a2 + a3[72]);
  *(_BYTE *)(a1 + a3[73]) = *(_BYTE *)(a2 + a3[73]);
  v73 = a3[74];
  v74 = a1 + v73;
  v75 = a2 + v73;
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_BYTE *)(v74 + 8) = *(_BYTE *)(v75 + 8);
  v76 = a3[75];
  v77 = a1 + v76;
  v78 = a2 + v76;
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *(_BYTE *)(v77 + 8) = *(_BYTE *)(v78 + 8);
  v79 = a3[76];
  v80 = a1 + v79;
  v81 = a2 + v79;
  *(_QWORD *)v80 = *(_QWORD *)v81;
  *(_BYTE *)(v80 + 8) = *(_BYTE *)(v81 + 8);
  v82 = a3[77];
  v83 = a1 + v82;
  v84 = a2 + v82;
  *(_QWORD *)v83 = *(_QWORD *)v84;
  *(_BYTE *)(v83 + 8) = *(_BYTE *)(v84 + 8);
  v85 = a3[78];
  v86 = a1 + v85;
  v87 = (uint64_t *)(a2 + v85);
  v88 = *v87;
  *(_BYTE *)(v86 + 8) = *((_BYTE *)v87 + 8);
  *(_QWORD *)v86 = v88;
  v89 = a3[79];
  v90 = a1 + v89;
  v91 = a2 + v89;
  *(_QWORD *)v90 = *(_QWORD *)v91;
  *(_BYTE *)(v90 + 8) = *(_BYTE *)(v91 + 8);
  v92 = a3[80];
  v93 = a1 + v92;
  v94 = a2 + v92;
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  v95 = a3[81];
  v96 = (_QWORD *)(a1 + v95);
  v97 = (uint64_t *)(a2 + v95);
  v99 = *v97;
  v98 = v97[1];
  *v96 = v99;
  v96[1] = v98;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[82]) = *(_BYTE *)(a2 + a3[82]);
  v100 = a3[83];
  v101 = a1 + v100;
  v102 = a2 + v100;
  *(_QWORD *)v101 = *(_QWORD *)v102;
  *(_BYTE *)(v101 + 8) = *(_BYTE *)(v102 + 8);
  v103 = a3[84];
  v104 = a1 + v103;
  v105 = a2 + v103;
  *(_QWORD *)v104 = *(_QWORD *)v105;
  *(_BYTE *)(v104 + 8) = *(_BYTE *)(v105 + 8);
  v106 = a3[85];
  v107 = a1 + v106;
  v108 = a2 + v106;
  *(_QWORD *)v107 = *(_QWORD *)v108;
  *(_BYTE *)(v107 + 8) = *(_BYTE *)(v108 + 8);
  v109 = a3[86];
  v110 = (_QWORD *)(a1 + v109);
  v111 = (uint64_t *)(a2 + v109);
  v113 = *v111;
  v112 = v111[1];
  *v110 = v113;
  v110[1] = v112;
  swift_bridgeObjectRelease();
  v114 = a3[87];
  v115 = a1 + v114;
  v116 = a2 + v114;
  *(_QWORD *)v115 = *(_QWORD *)v116;
  *(_BYTE *)(v115 + 8) = *(_BYTE *)(v116 + 8);
  v117 = a3[88];
  v118 = (_QWORD *)(a1 + v117);
  v119 = (uint64_t *)(a2 + v117);
  v121 = *v119;
  v120 = v119[1];
  *v118 = v121;
  v118[1] = v120;
  swift_bridgeObjectRelease();
  v122 = a3[89];
  v123 = a1 + v122;
  v124 = a2 + v122;
  *(_QWORD *)v123 = *(_QWORD *)v124;
  *(_BYTE *)(v123 + 8) = *(_BYTE *)(v124 + 8);
  v125 = a3[90];
  v126 = (_QWORD *)(a1 + v125);
  v127 = (uint64_t *)(a2 + v125);
  v129 = *v127;
  v128 = v127[1];
  *v126 = v129;
  v126[1] = v128;
  swift_bridgeObjectRelease();
  v130 = a3[91];
  v131 = a1 + v130;
  v132 = a2 + v130;
  *(_BYTE *)(v131 + 8) = *(_BYTE *)(v132 + 8);
  v133 = a3[92];
  v134 = *(_BYTE *)(a2 + v133);
  *(_QWORD *)v131 = *(_QWORD *)v132;
  *(_BYTE *)(a1 + v133) = v134;
  *(_BYTE *)(a1 + a3[93]) = *(_BYTE *)(a2 + a3[93]);
  *(_BYTE *)(a1 + a3[94]) = *(_BYTE *)(a2 + a3[94]);
  *(_BYTE *)(a1 + a3[95]) = *(_BYTE *)(a2 + a3[95]);
  v135 = a3[96];
  v136 = a1 + v135;
  v137 = a2 + v135;
  *(_QWORD *)v136 = *(_QWORD *)v137;
  *(_BYTE *)(v136 + 8) = *(_BYTE *)(v137 + 8);
  v138 = a3[97];
  v139 = a1 + v138;
  v140 = a2 + v138;
  *(_QWORD *)v139 = *(_QWORD *)v140;
  *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
  v141 = a3[98];
  v142 = a1 + v141;
  v143 = a2 + v141;
  *(_QWORD *)v142 = *(_QWORD *)v143;
  *(_BYTE *)(v142 + 8) = *(_BYTE *)(v143 + 8);
  v144 = a3[99];
  v145 = a1 + v144;
  v146 = a2 + v144;
  *(_QWORD *)v145 = *(_QWORD *)v146;
  *(_BYTE *)(v145 + 8) = *(_BYTE *)(v146 + 8);
  v147 = a3[100];
  v148 = a1 + v147;
  v149 = (uint64_t *)(a2 + v147);
  v150 = *v149;
  *(_BYTE *)(v148 + 8) = *((_BYTE *)v149 + 8);
  *(_QWORD *)v148 = v150;
  v151 = a3[101];
  v152 = a1 + v151;
  v153 = a2 + v151;
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *(_BYTE *)(v152 + 8) = *(_BYTE *)(v153 + 8);
  v154 = a3[102];
  v155 = a1 + v154;
  v156 = a2 + v154;
  *(_QWORD *)v155 = *(_QWORD *)v156;
  *(_BYTE *)(v155 + 8) = *(_BYTE *)(v156 + 8);
  v157 = a3[103];
  v158 = a1 + v157;
  v159 = a2 + v157;
  *(_QWORD *)v158 = *(_QWORD *)v159;
  *(_BYTE *)(v158 + 8) = *(_BYTE *)(v159 + 8);
  v160 = a3[104];
  v161 = a1 + v160;
  v162 = a2 + v160;
  *(_QWORD *)v161 = *(_QWORD *)v162;
  *(_BYTE *)(v161 + 8) = *(_BYTE *)(v162 + 8);
  v163 = a3[105];
  v164 = a1 + v163;
  v165 = a2 + v163;
  *(_QWORD *)v164 = *(_QWORD *)v165;
  *(_BYTE *)(v164 + 8) = *(_BYTE *)(v165 + 8);
  v166 = a3[106];
  v167 = a1 + v166;
  v168 = a2 + v166;
  *(_QWORD *)v167 = *(_QWORD *)v168;
  *(_BYTE *)(v167 + 8) = *(_BYTE *)(v168 + 8);
  v169 = a3[107];
  v170 = a1 + v169;
  v171 = a2 + v169;
  *(_QWORD *)v170 = *(_QWORD *)v171;
  *(_BYTE *)(v170 + 8) = *(_BYTE *)(v171 + 8);
  v172 = a3[108];
  v173 = a1 + v172;
  v174 = a2 + v172;
  *(_QWORD *)v173 = *(_QWORD *)v174;
  *(_BYTE *)(v173 + 8) = *(_BYTE *)(v174 + 8);
  v175 = a3[109];
  v176 = a1 + v175;
  v177 = a2 + v175;
  *(_QWORD *)v176 = *(_QWORD *)v177;
  *(_BYTE *)(v176 + 8) = *(_BYTE *)(v177 + 8);
  v178 = a3[110];
  v179 = a1 + v178;
  v180 = a2 + v178;
  *(_QWORD *)v179 = *(_QWORD *)v180;
  *(_BYTE *)(v179 + 8) = *(_BYTE *)(v180 + 8);
  v181 = a3[111];
  v182 = a1 + v181;
  v183 = a2 + v181;
  *(_QWORD *)v182 = *(_QWORD *)v183;
  *(_BYTE *)(v182 + 8) = *(_BYTE *)(v183 + 8);
  v184 = a3[112];
  v185 = a1 + v184;
  v186 = a2 + v184;
  *(_QWORD *)v185 = *(_QWORD *)v186;
  *(_BYTE *)(v185 + 8) = *(_BYTE *)(v186 + 8);
  v187 = a3[113];
  v188 = a1 + v187;
  v189 = a2 + v187;
  *(_QWORD *)v188 = *(_QWORD *)v189;
  *(_BYTE *)(v188 + 8) = *(_BYTE *)(v189 + 8);
  v190 = a3[114];
  v191 = a1 + v190;
  v192 = a2 + v190;
  *(_QWORD *)v191 = *(_QWORD *)v192;
  *(_BYTE *)(v191 + 8) = *(_BYTE *)(v192 + 8);
  v193 = a3[115];
  v194 = a1 + v193;
  v195 = a2 + v193;
  *(_QWORD *)v194 = *(_QWORD *)v195;
  *(_BYTE *)(v194 + 8) = *(_BYTE *)(v195 + 8);
  v196 = a3[116];
  v197 = a1 + v196;
  v198 = a2 + v196;
  *(_QWORD *)v197 = *(_QWORD *)v198;
  *(_BYTE *)(v197 + 8) = *(_BYTE *)(v198 + 8);
  v199 = a3[117];
  v200 = a1 + v199;
  v201 = a2 + v199;
  *(_QWORD *)v200 = *(_QWORD *)v201;
  *(_BYTE *)(v200 + 8) = *(_BYTE *)(v201 + 8);
  *(_BYTE *)(a1 + a3[118]) = *(_BYTE *)(a2 + a3[118]);
  v202 = a3[119];
  v203 = a1 + v202;
  v204 = a2 + v202;
  *(_QWORD *)v203 = *(_QWORD *)v204;
  *(_BYTE *)(v203 + 8) = *(_BYTE *)(v204 + 8);
  v205 = a3[120];
  v206 = a1 + v205;
  v207 = a2 + v205;
  *(_QWORD *)v206 = *(_QWORD *)v207;
  *(_BYTE *)(v206 + 8) = *(_BYTE *)(v207 + 8);
  v208 = a3[121];
  v209 = a1 + v208;
  v210 = a2 + v208;
  *(_QWORD *)v209 = *(_QWORD *)v210;
  v211 = a3[122];
  v212 = *(_BYTE *)(a2 + v211);
  *(_BYTE *)(v209 + 8) = *(_BYTE *)(v210 + 8);
  *(_BYTE *)(a1 + v211) = v212;
  *(_BYTE *)(a1 + a3[123]) = *(_BYTE *)(a2 + a3[123]);
  *(_BYTE *)(a1 + a3[124]) = *(_BYTE *)(a2 + a3[124]);
  v213 = a3[125];
  v214 = a1 + v213;
  v215 = a2 + v213;
  *(_QWORD *)v214 = *(_QWORD *)v215;
  *(_BYTE *)(v214 + 8) = *(_BYTE *)(v215 + 8);
  v216 = a3[126];
  v217 = a1 + v216;
  v218 = a2 + v216;
  *(_QWORD *)v217 = *(_QWORD *)v218;
  *(_BYTE *)(v217 + 8) = *(_BYTE *)(v218 + 8);
  v219 = a3[127];
  v220 = a1 + v219;
  v221 = a2 + v219;
  *(_QWORD *)v220 = *(_QWORD *)v221;
  *(_BYTE *)(v220 + 8) = *(_BYTE *)(v221 + 8);
  v222 = a3[128];
  v223 = a1 + v222;
  v224 = a2 + v222;
  *(_QWORD *)v223 = *(_QWORD *)v224;
  *(_BYTE *)(v223 + 8) = *(_BYTE *)(v224 + 8);
  v225 = a3[129];
  v226 = a1 + v225;
  v227 = (uint64_t *)(a2 + v225);
  v228 = *v227;
  *(_BYTE *)(v226 + 8) = *((_BYTE *)v227 + 8);
  *(_QWORD *)v226 = v228;
  v229 = a3[130];
  v230 = a1 + v229;
  v231 = a2 + v229;
  *(_QWORD *)v230 = *(_QWORD *)v231;
  *(_BYTE *)(v230 + 8) = *(_BYTE *)(v231 + 8);
  v232 = a3[131];
  v233 = a1 + v232;
  v234 = a2 + v232;
  *(_QWORD *)v233 = *(_QWORD *)v234;
  *(_BYTE *)(v233 + 8) = *(_BYTE *)(v234 + 8);
  v235 = a3[132];
  v236 = a1 + v235;
  v237 = a2 + v235;
  *(_QWORD *)v236 = *(_QWORD *)v237;
  *(_BYTE *)(v236 + 8) = *(_BYTE *)(v237 + 8);
  *(_BYTE *)(a1 + a3[133]) = *(_BYTE *)(a2 + a3[133]);
  v238 = a3[134];
  v239 = a1 + v238;
  v240 = a2 + v238;
  *(_QWORD *)v239 = *(_QWORD *)v240;
  *(_BYTE *)(v239 + 8) = *(_BYTE *)(v240 + 8);
  *(_QWORD *)(a1 + a3[135]) = *(_QWORD *)(a2 + a3[135]);
  swift_bridgeObjectRelease();
  v241 = a3[136];
  v242 = a1 + v241;
  v243 = a2 + v241;
  *(_QWORD *)v242 = *(_QWORD *)v243;
  *(_BYTE *)(v242 + 8) = *(_BYTE *)(v243 + 8);
  *(_BYTE *)(a1 + a3[137]) = *(_BYTE *)(a2 + a3[137]);
  *(_QWORD *)(a1 + a3[138]) = *(_QWORD *)(a2 + a3[138]);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[139]) = *(_BYTE *)(a2 + a3[139]);
  v244 = a3[140];
  v245 = a1 + v244;
  v246 = a2 + v244;
  *(_QWORD *)v245 = *(_QWORD *)v246;
  *(_BYTE *)(v245 + 8) = *(_BYTE *)(v246 + 8);
  v247 = a3[141];
  v248 = a1 + v247;
  v249 = a2 + v247;
  *(_QWORD *)v248 = *(_QWORD *)v249;
  v250 = a3[142];
  v251 = *(_BYTE *)(a2 + v250);
  *(_BYTE *)(v248 + 8) = *(_BYTE *)(v249 + 8);
  *(_BYTE *)(a1 + v250) = v251;
  *(_BYTE *)(a1 + a3[143]) = *(_BYTE *)(a2 + a3[143]);
  v252 = a3[144];
  v253 = a1 + v252;
  v254 = a2 + v252;
  *(_QWORD *)v253 = *(_QWORD *)v254;
  *(_BYTE *)(v253 + 8) = *(_BYTE *)(v254 + 8);
  v255 = a3[145];
  v256 = a1 + v255;
  v257 = a2 + v255;
  *(_QWORD *)v256 = *(_QWORD *)v257;
  *(_BYTE *)(v256 + 8) = *(_BYTE *)(v257 + 8);
  v258 = a3[146];
  v259 = a1 + v258;
  v260 = a2 + v258;
  *(_QWORD *)v259 = *(_QWORD *)v260;
  *(_BYTE *)(v259 + 8) = *(_BYTE *)(v260 + 8);
  v261 = a3[147];
  v262 = a1 + v261;
  v263 = a2 + v261;
  *(_QWORD *)v262 = *(_QWORD *)v263;
  *(_BYTE *)(v262 + 8) = *(_BYTE *)(v263 + 8);
  v264 = a3[148];
  v265 = a1 + v264;
  v266 = (uint64_t *)(a2 + v264);
  v267 = *v266;
  *(_BYTE *)(v265 + 8) = *((_BYTE *)v266 + 8);
  *(_QWORD *)v265 = v267;
  v268 = a3[149];
  v269 = a1 + v268;
  v270 = a2 + v268;
  *(_QWORD *)v269 = *(_QWORD *)v270;
  *(_BYTE *)(v269 + 8) = *(_BYTE *)(v270 + 8);
  v271 = a3[150];
  v272 = a1 + v271;
  v273 = a2 + v271;
  *(_QWORD *)v272 = *(_QWORD *)v273;
  *(_BYTE *)(v272 + 8) = *(_BYTE *)(v273 + 8);
  v274 = a3[151];
  v275 = a1 + v274;
  v276 = a2 + v274;
  *(_QWORD *)v275 = *(_QWORD *)v276;
  *(_BYTE *)(v275 + 8) = *(_BYTE *)(v276 + 8);
  v277 = a3[152];
  v278 = a1 + v277;
  v279 = a2 + v277;
  *(_QWORD *)v278 = *(_QWORD *)v279;
  *(_BYTE *)(v278 + 8) = *(_BYTE *)(v279 + 8);
  v280 = a3[153];
  v281 = a1 + v280;
  v282 = a2 + v280;
  *(_QWORD *)v281 = *(_QWORD *)v282;
  *(_BYTE *)(v281 + 8) = *(_BYTE *)(v282 + 8);
  v283 = a3[154];
  v284 = a1 + v283;
  v285 = a2 + v283;
  *(_QWORD *)v284 = *(_QWORD *)v285;
  *(_BYTE *)(v284 + 8) = *(_BYTE *)(v285 + 8);
  v286 = a3[155];
  v287 = a1 + v286;
  v288 = a2 + v286;
  *(_QWORD *)v287 = *(_QWORD *)v288;
  *(_BYTE *)(v287 + 8) = *(_BYTE *)(v288 + 8);
  v289 = a3[156];
  v290 = a1 + v289;
  v291 = a2 + v289;
  *(_QWORD *)v290 = *(_QWORD *)v291;
  *(_BYTE *)(v290 + 8) = *(_BYTE *)(v291 + 8);
  v292 = a3[157];
  v293 = a1 + v292;
  v294 = a2 + v292;
  *(_QWORD *)v293 = *(_QWORD *)v294;
  *(_BYTE *)(v293 + 8) = *(_BYTE *)(v294 + 8);
  v295 = a3[158];
  v296 = a1 + v295;
  v297 = a2 + v295;
  *(_QWORD *)v296 = *(_QWORD *)v297;
  *(_BYTE *)(v296 + 8) = *(_BYTE *)(v297 + 8);
  v298 = a3[159];
  v299 = a1 + v298;
  v300 = a2 + v298;
  *(_QWORD *)v299 = *(_QWORD *)v300;
  *(_BYTE *)(v299 + 8) = *(_BYTE *)(v300 + 8);
  v301 = a3[160];
  v302 = a1 + v301;
  v303 = a2 + v301;
  *(_QWORD *)v302 = *(_QWORD *)v303;
  *(_BYTE *)(v302 + 8) = *(_BYTE *)(v303 + 8);
  *(_BYTE *)(a1 + a3[161]) = *(_BYTE *)(a2 + a3[161]);
  *(_BYTE *)(a1 + a3[162]) = *(_BYTE *)(a2 + a3[162]);
  v304 = a3[163];
  v305 = a1 + v304;
  v306 = a2 + v304;
  *(_QWORD *)v305 = *(_QWORD *)v306;
  *(_BYTE *)(v305 + 8) = *(_BYTE *)(v306 + 8);
  v307 = a3[164];
  v308 = a1 + v307;
  v309 = a2 + v307;
  *(_QWORD *)v308 = *(_QWORD *)v309;
  *(_BYTE *)(v308 + 8) = *(_BYTE *)(v309 + 8);
  *(_BYTE *)(a1 + a3[165]) = *(_BYTE *)(a2 + a3[165]);
  v310 = a3[166];
  v311 = a1 + v310;
  v312 = a2 + v310;
  *(_DWORD *)v311 = *(_DWORD *)v312;
  *(_BYTE *)(v311 + 4) = *(_BYTE *)(v312 + 4);
  v313 = a3[167];
  v314 = a1 + v313;
  v315 = a2 + v313;
  *(_QWORD *)v314 = *(_QWORD *)v315;
  *(_BYTE *)(v314 + 8) = *(_BYTE *)(v315 + 8);
  v316 = a3[168];
  v317 = a1 + v316;
  v318 = a2 + v316;
  *(_QWORD *)v317 = *(_QWORD *)v318;
  *(_BYTE *)(v317 + 8) = *(_BYTE *)(v318 + 8);
  v319 = a3[169];
  v320 = a1 + v319;
  v321 = a2 + v319;
  *(_QWORD *)v320 = *(_QWORD *)v321;
  *(_BYTE *)(v320 + 8) = *(_BYTE *)(v321 + 8);
  v322 = a3[170];
  v323 = a1 + v322;
  v324 = (uint64_t *)(a2 + v322);
  v325 = *v324;
  *(_BYTE *)(v323 + 8) = *((_BYTE *)v324 + 8);
  *(_QWORD *)v323 = v325;
  v326 = a3[171];
  v327 = a1 + v326;
  v328 = a2 + v326;
  *(_QWORD *)v327 = *(_QWORD *)v328;
  *(_BYTE *)(v327 + 8) = *(_BYTE *)(v328 + 8);
  v329 = a3[172];
  v330 = a1 + v329;
  v331 = a2 + v329;
  *(_QWORD *)v330 = *(_QWORD *)v331;
  *(_BYTE *)(v330 + 8) = *(_BYTE *)(v331 + 8);
  v332 = a3[173];
  v333 = a1 + v332;
  v334 = a2 + v332;
  *(_QWORD *)v333 = *(_QWORD *)v334;
  v335 = a3[174];
  v336 = *(_BYTE *)(a2 + v335);
  *(_BYTE *)(v333 + 8) = *(_BYTE *)(v334 + 8);
  *(_BYTE *)(a1 + v335) = v336;
  v337 = a3[175];
  v338 = a1 + v337;
  v339 = a2 + v337;
  *(_QWORD *)v338 = *(_QWORD *)v339;
  *(_BYTE *)(v338 + 8) = *(_BYTE *)(v339 + 8);
  v340 = a3[176];
  v341 = a1 + v340;
  v342 = a2 + v340;
  *(_QWORD *)v341 = *(_QWORD *)v342;
  *(_BYTE *)(v341 + 8) = *(_BYTE *)(v342 + 8);
  return a1;
}

uint64_t sub_1006CDD2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 64);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10001A9A8(&qword_1010ED860);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 240);
    }
    else
    {
      v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 244);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }
}

uint64_t sub_1006CDDE0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 64) = a2;
  }
  else
  {
    v8 = sub_10001A9A8(&qword_1010ED860);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 240);
    }
    else
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 244);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1006CDE84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[57];
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  void *v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  void *v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  void *v120;
  void *v121;
  void *v122;

  v6[0] = &unk_100E494A0;
  v6[1] = &unk_100E494B8;
  v6[2] = &unk_100E494D0;
  v6[3] = &unk_100E494B8;
  v6[4] = &unk_100E494B8;
  v6[5] = &unk_100E494E8;
  v6[6] = &unk_100E49500;
  v6[7] = &unk_100E494E8;
  v6[8] = &unk_100E49518;
  v6[9] = &unk_100E494B8;
  v6[10] = &unk_100E494E8;
  v6[11] = &unk_100E494E8;
  v6[12] = &unk_100E494B8;
  v6[13] = &unk_100E494B8;
  v6[14] = &unk_100E494B8;
  v6[15] = &unk_100E494B8;
  v6[16] = &unk_100E494B8;
  v6[17] = &unk_100E494B8;
  v6[18] = &unk_100E494B8;
  v6[19] = &unk_100E494B8;
  v6[20] = &unk_100E494B8;
  v6[21] = &unk_100E494B8;
  v6[22] = &unk_100E494B8;
  v6[23] = &unk_100E494B8;
  v6[24] = &unk_100E494B8;
  v6[25] = &unk_100E494E8;
  v6[26] = &unk_100E49500;
  v6[27] = &unk_100E494B8;
  v6[28] = &unk_100E494B8;
  v6[29] = &unk_100E494B8;
  v6[30] = &unk_100E494B8;
  v6[31] = &unk_100E494B8;
  v6[32] = &unk_100E494B8;
  v6[33] = &unk_100E494B8;
  v6[34] = &unk_100E494B8;
  v6[35] = &unk_100E494B8;
  v6[36] = &unk_100E494B8;
  v6[37] = &unk_100E494E8;
  v6[38] = &unk_100E494B8;
  v6[39] = &unk_100E494B8;
  v6[40] = &unk_100E494B8;
  v6[41] = &unk_100E494B8;
  v6[42] = &unk_100E494B8;
  v6[43] = &unk_100E494B8;
  v6[44] = &unk_100E494B8;
  v6[45] = &unk_100E49500;
  v6[46] = &unk_100E494B8;
  v6[47] = &unk_100E494B8;
  v6[48] = &unk_100E49500;
  v6[49] = &unk_100E49500;
  v6[50] = &unk_100E494B8;
  v6[51] = &unk_100E494B8;
  v6[52] = &unk_100E494B8;
  v6[53] = &unk_100E494B8;
  v6[54] = &unk_100E494B8;
  v6[55] = &unk_100E494E8;
  sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[56] = *(_QWORD *)(v2 - 8) + 64;
    sub_100149C5C(319, (unint64_t *)&qword_10110D930, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = &unk_100E494B8;
      v9 = v7;
      v10 = &unk_100E494B8;
      v11 = &unk_100E494B8;
      v12 = &unk_100E494B8;
      v13 = &unk_100E494B8;
      v14 = &unk_100E494B8;
      v15 = &unk_100E494B8;
      v16 = &unk_100E49530;
      v17 = &unk_100E494E8;
      v18 = &unk_100E494E8;
      v19 = &unk_100E494E8;
      v20 = &unk_100E494B8;
      v21 = &unk_100E494B8;
      v22 = &unk_100E494B8;
      v23 = &unk_100E494B8;
      v24 = &unk_100E494B8;
      v25 = &unk_100E494B8;
      v26 = &unk_100E494B8;
      v27 = &unk_100E49518;
      v28 = &unk_100E494E8;
      v29 = &unk_100E494B8;
      v30 = &unk_100E494B8;
      v31 = &unk_100E494B8;
      v32 = &unk_100E49518;
      v33 = &unk_100E494B8;
      v34 = &unk_100E49518;
      v35 = &unk_100E494B8;
      v36 = &unk_100E49518;
      v37 = &unk_100E494B8;
      v38 = &unk_100E494E8;
      v39 = &unk_100E494E8;
      v40 = &unk_100E494E8;
      v41 = &unk_100E494E8;
      v42 = &unk_100E494B8;
      v43 = &unk_100E494B8;
      v44 = &unk_100E494B8;
      v45 = &unk_100E494B8;
      v46 = &unk_100E494B8;
      v47 = &unk_100E494B8;
      v48 = &unk_100E494B8;
      v49 = &unk_100E494B8;
      v50 = &unk_100E494B8;
      v51 = &unk_100E494B8;
      v52 = &unk_100E494B8;
      v53 = &unk_100E494B8;
      v54 = &unk_100E494B8;
      v55 = &unk_100E494B8;
      v56 = &unk_100E494B8;
      v57 = &unk_100E494B8;
      v58 = &unk_100E494B8;
      v59 = &unk_100E494B8;
      v60 = &unk_100E494B8;
      v61 = &unk_100E494B8;
      v62 = &unk_100E494B8;
      v63 = &unk_100E494B8;
      v64 = &unk_100E494E8;
      v65 = &unk_100E494B8;
      v66 = &unk_100E494B8;
      v67 = &unk_100E494B8;
      v68 = &unk_100E494E8;
      v69 = &unk_100E494E8;
      v70 = &unk_100E494E8;
      v71 = &unk_100E494B8;
      v72 = &unk_100E494B8;
      v73 = &unk_100E494B8;
      v74 = &unk_100E494B8;
      v75 = &unk_100E494B8;
      v76 = &unk_100E494B8;
      v77 = &unk_100E494B8;
      v78 = &unk_100E494B8;
      v79 = &unk_100E494E8;
      v80 = &unk_100E494B8;
      v81 = &unk_100E49500;
      v82 = &unk_100E494B8;
      v83 = &unk_100E494E8;
      v84 = &unk_100E49500;
      v85 = &unk_100E494E8;
      v86 = &unk_100E494B8;
      v87 = &unk_100E494B8;
      v88 = &unk_100E494E8;
      v89 = &unk_100E494E8;
      v90 = &unk_100E494B8;
      v91 = &unk_100E494B8;
      v92 = &unk_100E494B8;
      v93 = &unk_100E494B8;
      v94 = &unk_100E494B8;
      v95 = &unk_100E494B8;
      v96 = &unk_100E494B8;
      v97 = &unk_100E494B8;
      v98 = &unk_100E494B8;
      v99 = &unk_100E494B8;
      v100 = &unk_100E494B8;
      v101 = &unk_100E494B8;
      v102 = &unk_100E494B8;
      v103 = &unk_100E494B8;
      v104 = &unk_100E494B8;
      v105 = &unk_100E494B8;
      v106 = &unk_100E494B8;
      v107 = &unk_100E494E8;
      v108 = &unk_100E494E8;
      v109 = &unk_100E494B8;
      v110 = &unk_100E494B8;
      v111 = &unk_100E494E8;
      v112 = &unk_100E49548;
      v113 = &unk_100E494B8;
      v114 = &unk_100E494B8;
      v115 = &unk_100E494B8;
      v116 = &unk_100E494B8;
      v117 = &unk_100E494B8;
      v118 = &unk_100E494B8;
      v119 = &unk_100E494B8;
      v120 = &unk_100E494E8;
      v121 = &unk_100E494B8;
      v122 = &unk_100E494B8;
      swift_initStructMetadata(a1, 256, 173, v6, a1 + 16);
    }
  }
}

unint64_t sub_1006CE1A8()
{
  unint64_t result;

  result = qword_101104630;
  if (!qword_101104630)
  {
    result = swift_getWitnessTable(byte_100E496AC, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101104630);
  }
  return result;
}

unint64_t sub_1006CE1EC()
{
  unint64_t result;

  result = qword_101104638;
  if (!qword_101104638)
  {
    result = swift_getWitnessTable(byte_100E251CC, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_101104638);
  }
  return result;
}

unint64_t sub_1006CE230()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101104640;
  if (!qword_101104640)
  {
    v1 = sub_10001F784(&qword_1010ED5F8);
    v2[0] = sub_1006CE2B4();
    v2[1] = sub_100006204(&qword_101104650, type metadata accessor for FeatureSupportMatrix, (uint64_t)&unk_100E5B74C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101104640);
  }
  return result;
}

unint64_t sub_1006CE2B4()
{
  unint64_t result;

  result = qword_101104648;
  if (!qword_101104648)
  {
    result = swift_getWitnessTable(a5_8, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_101104648);
  }
  return result;
}

uint64_t sub_1006CE2F8(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010ED5E0);
    v10 = sub_100006204(a2, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1006CE37C()
{
  unint64_t result;

  result = qword_101104670;
  if (!qword_101104670)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AllMacBeaconConfigs, &type metadata for AllMacBeaconConfigs);
    atomic_store(result, (unint64_t *)&qword_101104670);
  }
  return result;
}

unint64_t sub_1006CE3C0()
{
  unint64_t result;

  result = qword_101104688;
  if (!qword_101104688)
  {
    result = swift_getWitnessTable(byte_100E251A4, &type metadata for ConfigurationCoordinator.ConfigurationSource);
    atomic_store(result, (unint64_t *)&qword_101104688);
  }
  return result;
}

unint64_t sub_1006CE404()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101104690;
  if (!qword_101104690)
  {
    v1 = sub_10001F784(&qword_1010ED5F8);
    v2[0] = sub_1006CE488();
    v2[1] = sub_100006204(&qword_1011046A0, type metadata accessor for FeatureSupportMatrix, (uint64_t)&unk_100E5B724);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101104690);
  }
  return result;
}

unint64_t sub_1006CE488()
{
  unint64_t result;

  result = qword_101104698;
  if (!qword_101104698)
  {
    result = swift_getWitnessTable(aM_27, &type metadata for ServerConfigurableFeature);
    atomic_store(result, (unint64_t *)&qword_101104698);
  }
  return result;
}

uint64_t sub_1006CE4CC(unint64_t *a1, uint64_t (*a2)(void), const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_1010ED608);
    v8 = a2();
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1006CE534()
{
  unint64_t result;

  result = qword_1011046B0;
  if (!qword_1011046B0)
  {
    result = swift_getWitnessTable(byte_100E402FC, &type metadata for RoleCategory);
    atomic_store(result, (unint64_t *)&qword_1011046B0);
  }
  return result;
}

unint64_t sub_1006CE578()
{
  unint64_t result;

  result = qword_1011046D0;
  if (!qword_1011046D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AllMacBeaconConfigs, &type metadata for AllMacBeaconConfigs);
    atomic_store(result, (unint64_t *)&qword_1011046D0);
  }
  return result;
}

uint64_t sub_1006CE5BC(unint64_t *a1, uint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_10001F784(a2);
    v9 = a3;
    result = swift_getWitnessTable(a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1006CE618(unint64_t *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD v10[2];

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010ED590);
    v10[0] = a2;
    v10[1] = a3;
    result = swift_getWitnessTable(a4, v9, v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DefaultConfigurationLayer.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x54)
    goto LABEL_17;
  if (a2 + 172 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 172) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 172;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 172;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 172;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xAD;
  v8 = v6 - 173;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultConfigurationLayer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 172 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 172) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x54)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x53)
    return ((uint64_t (*)(void))((char *)&loc_1006CE758 + 4 * byte_100E4946F[v4]))();
  *a1 = a2 - 84;
  return ((uint64_t (*)(void))((char *)sub_1006CE78C + 4 * byte_100E4946A[v4]))();
}

uint64_t sub_1006CE78C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006CE794(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1006CE79CLL);
  return result;
}

uint64_t sub_1006CE7A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1006CE7B0);
  *(_BYTE *)result = a2 - 84;
  return result;
}

uint64_t sub_1006CE7B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1006CE7BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DefaultConfigurationLayer.CodingKeys()
{
  return &type metadata for DefaultConfigurationLayer.CodingKeys;
}

unint64_t sub_1006CE7DC()
{
  unint64_t result;

  result = qword_1011046E0;
  if (!qword_1011046E0)
  {
    result = swift_getWitnessTable(asc_100E49684, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011046E0);
  }
  return result;
}

unint64_t sub_1006CE824()
{
  unint64_t result;

  result = qword_1011046E8;
  if (!qword_1011046E8)
  {
    result = swift_getWitnessTable(byte_100E495F4, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011046E8);
  }
  return result;
}

unint64_t sub_1006CE86C()
{
  unint64_t result;

  result = qword_1011046F0;
  if (!qword_1011046F0)
  {
    result = swift_getWitnessTable(byte_100E4961C, &type metadata for DefaultConfigurationLayer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011046F0);
  }
  return result;
}

uint64_t sub_1006CE8B0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  char v177;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC3B10;
    if (a2 == 0x8000000100EC3B10)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC3B10, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v6 = 0xEC0000007265626DLL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x496873696C627570 && a2 == 0xEF6C61767265746ELL)
  {
    v8 = 0xEF6C61767265746ELL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496873696C627570, 0xEF6C61767265746ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x8000000100EE0DC0;
    if (a2 == 0x8000000100EE0DC0)
      goto LABEL_28;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EE0DC0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x8000000100EE0DE0;
    if (a2 == 0x8000000100EE0DE0)
      goto LABEL_33;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EE0DE0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_33:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0xD000000000000015)
  {
    v11 = 0x8000000100EC3BE0;
    if (a2 == 0x8000000100EC3BE0)
      goto LABEL_38;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC3BE0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if (a1 == 0x74537265646E6966 && a2 == 0xEB00000000657461)
  {
    v12 = 0xEB00000000657461;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74537265646E6966, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x74736F486E736361 && a2 == 0xEC000000656D614ELL)
  {
    v13 = 0xEC000000656D614ELL;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74736F486E736361, 0xEC000000656D614ELL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0xD000000000000011)
  {
    v14 = 0x8000000100EE0E00;
    if (a2 == 0x8000000100EE0E00)
      goto LABEL_55;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EE0E00, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if (a1 == 0xD000000000000014)
  {
    v15 = 0x8000000100EE0E20;
    if (a2 == 0x8000000100EE0E20)
      goto LABEL_60;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EE0E20, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if (a1 == 0xD000000000000010)
  {
    v16 = 0x8000000100EC4020;
    if (a2 == 0x8000000100EC4020)
      goto LABEL_65;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC4020, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v17 = 0x8000000100EC4040;
    if (a2 == 0x8000000100EC4040)
      goto LABEL_70;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EC4040, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
LABEL_70:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if (a1 == 0xD000000000000021)
  {
    v18 = 0x8000000100EC4060;
    if (a2 == 0x8000000100EC4060)
      goto LABEL_75;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC4060, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_75:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if (a1 == 0xD00000000000002ALL)
  {
    v19 = 0x8000000100EC4090;
    if (a2 == 0x8000000100EC4090)
      goto LABEL_80;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x8000000100EC4090, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
LABEL_80:
    swift_bridgeObjectRelease(v19);
    return 14;
  }
  if (a1 == 0xD000000000000018)
  {
    v20 = 0x8000000100EC3BB0;
    if (a2 == 0x8000000100EC3BB0)
      goto LABEL_85;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC3BB0, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_85:
    swift_bridgeObjectRelease(v20);
    return 15;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v21 = 0x8000000100EC3C00;
    if (a2 == 0x8000000100EC3C00)
      goto LABEL_90;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC3C00, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_90:
    swift_bridgeObjectRelease(v21);
    return 16;
  }
  if (a1 == 0xD000000000000016)
  {
    v22 = 0x8000000100EC3C20;
    if (a2 == 0x8000000100EC3C20)
      goto LABEL_95;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EC3C20, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_95:
    swift_bridgeObjectRelease(v22);
    return 17;
  }
  if (a1 == 0xD000000000000017)
  {
    v23 = 0x8000000100EC3C40;
    if (a2 == 0x8000000100EC3C40)
      goto LABEL_100;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EC3C40, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
LABEL_100:
    swift_bridgeObjectRelease(v23);
    return 18;
  }
  if (a1 == 0xD000000000000024)
  {
    v24 = 0x8000000100EC3C60;
    if (a2 == 0x8000000100EC3C60)
      goto LABEL_105;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x8000000100EC3C60, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
LABEL_105:
    swift_bridgeObjectRelease(v24);
    return 19;
  }
  if (a1 == 0xD00000000000003ALL && a2 == 0x8000000100EC3C90)
  {
    v25 = 0x8000000100EC3C90;
LABEL_111:
    swift_bridgeObjectRelease(v25);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000003ALL, 0x8000000100EC3C90, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_111;
  }
  if (a1 == 0xD000000000000043 && a2 == 0x8000000100EC3CD0)
  {
    v26 = 0x8000000100EC3CD0;
LABEL_117:
    swift_bridgeObjectRelease(v26);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000043, 0x8000000100EC3CD0, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_117;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v27 = 0x8000000100EC3D20;
    if (a2 == 0x8000000100EC3D20)
      goto LABEL_122;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC3D20, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
LABEL_122:
    swift_bridgeObjectRelease(v27);
    return 22;
  }
  if (a1 == 0xD000000000000028)
  {
    v28 = 0x8000000100EC3D40;
    if (a2 == 0x8000000100EC3D40)
      goto LABEL_127;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028, 0x8000000100EC3D40, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
LABEL_127:
    swift_bridgeObjectRelease(v28);
    return 23;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v29 = 0x8000000100EC3D70;
    if (a2 == 0x8000000100EC3D70)
      goto LABEL_132;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EC3D70, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
LABEL_132:
    swift_bridgeObjectRelease(v29);
    return 24;
  }
  if (a1 == 0xD000000000000021)
  {
    v30 = 0x8000000100EC3D90;
    if (a2 == 0x8000000100EC3D90)
      goto LABEL_137;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC3D90, a1, a2, 0) & 1) != 0)
  {
    v30 = a2;
LABEL_137:
    swift_bridgeObjectRelease(v30);
    return 25;
  }
  if (a1 == 0xD000000000000014)
  {
    v31 = 0x8000000100EC3DC0;
    if (a2 == 0x8000000100EC3DC0)
      goto LABEL_142;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EC3DC0, a1, a2, 0) & 1) != 0)
  {
    v31 = a2;
LABEL_142:
    swift_bridgeObjectRelease(v31);
    return 26;
  }
  if (a1 == 0xD000000000000015)
  {
    v32 = 0x8000000100EC3DE0;
    if (a2 == 0x8000000100EC3DE0)
      goto LABEL_147;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC3DE0, a1, a2, 0) & 1) != 0)
  {
    v32 = a2;
LABEL_147:
    swift_bridgeObjectRelease(v32);
    return 27;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v33 = 0x8000000100EC3E00;
    if (a2 == 0x8000000100EC3E00)
      goto LABEL_152;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EC3E00, a1, a2, 0) & 1) != 0)
  {
    v33 = a2;
LABEL_152:
    swift_bridgeObjectRelease(v33);
    return 28;
  }
  if (a1 == 0xD000000000000023)
  {
    v34 = 0x8000000100EC3E20;
    if (a2 == 0x8000000100EC3E20)
      goto LABEL_157;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC3E20, a1, a2, 0) & 1) != 0)
  {
    v34 = a2;
LABEL_157:
    swift_bridgeObjectRelease(v34);
    return 29;
  }
  if (a1 == 0xD000000000000021)
  {
    v35 = 0x8000000100EE0E40;
    if (a2 == 0x8000000100EE0E40)
      goto LABEL_162;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EE0E40, a1, a2, 0) & 1) != 0)
  {
    v35 = a2;
LABEL_162:
    swift_bridgeObjectRelease(v35);
    return 30;
  }
  if (a1 == 0xD000000000000023)
  {
    v36 = 0x8000000100EE0E70;
    if (a2 == 0x8000000100EE0E70)
      goto LABEL_167;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EE0E70, a1, a2, 0) & 1) != 0)
  {
    v36 = a2;
LABEL_167:
    swift_bridgeObjectRelease(v36);
    return 31;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v37 = 0x8000000100EE0EA0;
    if (a2 == 0x8000000100EE0EA0)
      goto LABEL_172;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EE0EA0, a1, a2, 0) & 1) != 0)
  {
    v37 = a2;
LABEL_172:
    swift_bridgeObjectRelease(v37);
    return 32;
  }
  if (a1 == 0xD000000000000023)
  {
    v38 = 0x8000000100EC3ED0;
    if (a2 == 0x8000000100EC3ED0)
      goto LABEL_177;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC3ED0, a1, a2, 0) & 1) != 0)
  {
    v38 = a2;
LABEL_177:
    swift_bridgeObjectRelease(v38);
    return 33;
  }
  if (a1 == 0xD00000000000002ALL)
  {
    v39 = 0x8000000100EC3F00;
    if (a2 == 0x8000000100EC3F00)
      goto LABEL_182;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002ALL, 0x8000000100EC3F00, a1, a2, 0) & 1) != 0)
  {
    v39 = a2;
LABEL_182:
    swift_bridgeObjectRelease(v39);
    return 34;
  }
  if (a1 == 0xD000000000000025)
  {
    v40 = 0x8000000100EC3F30;
    if (a2 == 0x8000000100EC3F30)
      goto LABEL_187;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x8000000100EC3F30, a1, a2, 0) & 1) != 0)
  {
    v40 = a2;
LABEL_187:
    swift_bridgeObjectRelease(v40);
    return 35;
  }
  if (a1 == 0xD00000000000002CLL && a2 == 0x8000000100EC3F60)
  {
    v41 = 0x8000000100EC3F60;
LABEL_193:
    swift_bridgeObjectRelease(v41);
    return 36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002CLL, 0x8000000100EC3F60, a1, a2, 0) & 1) != 0)
  {
    v41 = a2;
    goto LABEL_193;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v42 = 0x8000000100EC3F90;
    if (a2 == 0x8000000100EC3F90)
      goto LABEL_198;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC3F90, a1, a2, 0) & 1) != 0)
  {
    v42 = a2;
LABEL_198:
    swift_bridgeObjectRelease(v42);
    return 37;
  }
  if (a1 == 0xD000000000000021)
  {
    v43 = 0x8000000100EC3FB0;
    if (a2 == 0x8000000100EC3FB0)
      goto LABEL_203;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC3FB0, a1, a2, 0) & 1) != 0)
  {
    v43 = a2;
LABEL_203:
    swift_bridgeObjectRelease(v43);
    return 38;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v44 = 0x8000000100EC3FE0;
    if (a2 == 0x8000000100EC3FE0)
      goto LABEL_208;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC3FE0, a1, a2, 0) & 1) != 0)
  {
    v44 = a2;
LABEL_208:
    swift_bridgeObjectRelease(v44);
    return 39;
  }
  if (a1 == 0xD000000000000017)
  {
    v45 = 0x8000000100EC4000;
    if (a2 == 0x8000000100EC4000)
      goto LABEL_213;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EC4000, a1, a2, 0) & 1) != 0)
  {
    v45 = a2;
LABEL_213:
    swift_bridgeObjectRelease(v45);
    return 40;
  }
  if (a1 == 0xD000000000000021)
  {
    v46 = 0x8000000100EC40C0;
    if (a2 == 0x8000000100EC40C0)
      goto LABEL_218;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC40C0, a1, a2, 0) & 1) != 0)
  {
    v46 = a2;
LABEL_218:
    swift_bridgeObjectRelease(v46);
    return 41;
  }
  if (a1 == 0xD000000000000025)
  {
    v47 = 0x8000000100EC40F0;
    if (a2 == 0x8000000100EC40F0)
      goto LABEL_223;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x8000000100EC40F0, a1, a2, 0) & 1) != 0)
  {
    v47 = a2;
LABEL_223:
    swift_bridgeObjectRelease(v47);
    return 42;
  }
  if (a1 == 0xD000000000000023)
  {
    v48 = 0x8000000100EC4120;
    if (a2 == 0x8000000100EC4120)
      goto LABEL_228;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4120, a1, a2, 0) & 1) != 0)
  {
    v48 = a2;
LABEL_228:
    swift_bridgeObjectRelease(v48);
    return 43;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v49 = 0x8000000100EC4150;
    if (a2 == 0x8000000100EC4150)
      goto LABEL_233;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC4150, a1, a2, 0) & 1) != 0)
  {
    v49 = a2;
LABEL_233:
    swift_bridgeObjectRelease(v49);
    return 44;
  }
  if (a1 == 0x65746143656C6F72 && a2 == 0xEE00736569726F67)
  {
    v50 = 0xEE00736569726F67;
LABEL_239:
    swift_bridgeObjectRelease(v50);
    return 45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65746143656C6F72, 0xEE00736569726F67, a1, a2, 0) & 1) != 0)
  {
    v50 = a2;
    goto LABEL_239;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v51 = 0x8000000100EC4170;
    if (a2 == 0x8000000100EC4170)
      goto LABEL_244;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC4170, a1, a2, 0) & 1) != 0)
  {
    v51 = a2;
LABEL_244:
    swift_bridgeObjectRelease(v51);
    return 46;
  }
  if (a1 == 0xD000000000000026)
  {
    v52 = 0x8000000100EC4190;
    if (a2 == 0x8000000100EC4190)
      goto LABEL_249;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026, 0x8000000100EC4190, a1, a2, 0) & 1) != 0)
  {
    v52 = a2;
LABEL_249:
    swift_bridgeObjectRelease(v52);
    return 47;
  }
  if (a1 == 0x5365636976726573 && a2 == 0xEC00000065746174)
  {
    v53 = 0xEC00000065746174;
LABEL_255:
    swift_bridgeObjectRelease(v53);
    return 48;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5365636976726573, 0xEC00000065746174, a1, a2, 0) & 1) != 0)
  {
    v53 = a2;
    goto LABEL_255;
  }
  if (a1 == 0xD000000000000016)
  {
    v54 = 0x8000000100EE0EC0;
    if (a2 == 0x8000000100EE0EC0)
      goto LABEL_260;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EE0EC0, a1, a2, 0) & 1) != 0)
  {
    v54 = a2;
LABEL_260:
    swift_bridgeObjectRelease(v54);
    return 49;
  }
  if (a1 == 0xD000000000000017)
  {
    v55 = 0x8000000100EC41E0;
    if (a2 == 0x8000000100EC41E0)
      goto LABEL_265;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EC41E0, a1, a2, 0) & 1) != 0)
  {
    v55 = a2;
LABEL_265:
    swift_bridgeObjectRelease(v55);
    return 50;
  }
  if (a1 == 0xD000000000000012)
  {
    v56 = 0x8000000100EC4200;
    if (a2 == 0x8000000100EC4200)
      goto LABEL_270;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EC4200, a1, a2, 0) & 1) != 0)
  {
    v56 = a2;
LABEL_270:
    swift_bridgeObjectRelease(v56);
    return 51;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v57 = 0x8000000100EC4220;
    if (a2 == 0x8000000100EC4220)
      goto LABEL_275;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC4220, a1, a2, 0) & 1) != 0)
  {
    v57 = a2;
LABEL_275:
    swift_bridgeObjectRelease(v57);
    return 52;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v58 = 0x8000000100EC4240;
    if (a2 == 0x8000000100EC4240)
      goto LABEL_280;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC4240, a1, a2, 0) & 1) != 0)
  {
    v58 = a2;
LABEL_280:
    swift_bridgeObjectRelease(v58);
    return 53;
  }
  if (a1 == 0xD000000000000011)
  {
    v59 = 0x8000000100EC4260;
    if (a2 == 0x8000000100EC4260)
      goto LABEL_285;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC4260, a1, a2, 0) & 1) != 0)
  {
    v59 = a2;
LABEL_285:
    swift_bridgeObjectRelease(v59);
    return 54;
  }
  if (a1 == 0xD000000000000013)
  {
    v60 = 0x8000000100EC4280;
    if (a2 == 0x8000000100EC4280)
      goto LABEL_290;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC4280, a1, a2, 0) & 1) != 0)
  {
    v60 = a2;
LABEL_290:
    swift_bridgeObjectRelease(v60);
    return 55;
  }
  if (a1 == 0x63616542666C6573 && a2 == 0xEE00444955556E6FLL)
  {
    v61 = 0xEE00444955556E6FLL;
LABEL_296:
    swift_bridgeObjectRelease(v61);
    return 56;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x63616542666C6573, 0xEE00444955556E6FLL, a1, a2, 0) & 1) != 0)
  {
    v61 = a2;
    goto LABEL_296;
  }
  if (a1 == 0xD000000000000016)
  {
    v62 = 0x8000000100EE0EE0;
    if (a2 == 0x8000000100EE0EE0)
      goto LABEL_301;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EE0EE0, a1, a2, 0) & 1) != 0)
  {
    v62 = a2;
LABEL_301:
    swift_bridgeObjectRelease(v62);
    return 57;
  }
  if (a1 == 0xD000000000000017)
  {
    v63 = 0x8000000100EE0F00;
    if (a2 == 0x8000000100EE0F00)
      goto LABEL_306;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EE0F00, a1, a2, 0) & 1) != 0)
  {
    v63 = a2;
LABEL_306:
    swift_bridgeObjectRelease(v63);
    return 58;
  }
  if (a1 == 0x5279654B7473616CLL && a2 == 0xEF657461446C6C6FLL)
  {
    v64 = 0xEF657461446C6C6FLL;
LABEL_312:
    swift_bridgeObjectRelease(v64);
    return 59;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5279654B7473616CLL, 0xEF657461446C6C6FLL, a1, a2, 0) & 1) != 0)
  {
    v64 = a2;
    goto LABEL_312;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v65 = 0x8000000100EC42A0;
    if (a2 == 0x8000000100EC42A0)
      goto LABEL_317;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC42A0, a1, a2, 0) & 1) != 0)
  {
    v65 = a2;
LABEL_317:
    swift_bridgeObjectRelease(v65);
    return 60;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v66 = 0x8000000100EC42C0;
    if (a2 == 0x8000000100EC42C0)
      goto LABEL_322;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC42C0, a1, a2, 0) & 1) != 0)
  {
    v66 = a2;
LABEL_322:
    swift_bridgeObjectRelease(v66);
    return 61;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v67 = 0x8000000100EC42E0;
    if (a2 == 0x8000000100EC42E0)
      goto LABEL_327;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC42E0, a1, a2, 0) & 1) != 0)
  {
    v67 = a2;
LABEL_327:
    swift_bridgeObjectRelease(v67);
    return 62;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v68 = 0x8000000100EC4300;
    if (a2 == 0x8000000100EC4300)
      goto LABEL_332;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC4300, a1, a2, 0) & 1) != 0)
  {
    v68 = a2;
LABEL_332:
    swift_bridgeObjectRelease(v68);
    return 63;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v69 = 0x8000000100EC4320;
    if (a2 == 0x8000000100EC4320)
      goto LABEL_337;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC4320, a1, a2, 0) & 1) != 0)
  {
    v69 = a2;
LABEL_337:
    swift_bridgeObjectRelease(v69);
    return 64;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v70 = 0x8000000100EC4340;
    if (a2 == 0x8000000100EC4340)
      goto LABEL_342;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC4340, a1, a2, 0) & 1) != 0)
  {
    v70 = a2;
LABEL_342:
    swift_bridgeObjectRelease(v70);
    return 65;
  }
  if (a1 == 0xD000000000000013)
  {
    v71 = 0x8000000100EE0F20;
    if (a2 == 0x8000000100EE0F20)
      goto LABEL_347;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EE0F20, a1, a2, 0) & 1) != 0)
  {
    v71 = a2;
LABEL_347:
    swift_bridgeObjectRelease(v71);
    return 66;
  }
  if (a1 == 0xD000000000000015)
  {
    v72 = 0x8000000100EC4360;
    if (a2 == 0x8000000100EC4360)
      goto LABEL_352;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC4360, a1, a2, 0) & 1) != 0)
  {
    v72 = a2;
LABEL_352:
    swift_bridgeObjectRelease(v72);
    return 67;
  }
  if (a1 == 0x724473776F6C6C61 && a2 == 0xEE00676E69746661)
  {
    v73 = 0xEE00676E69746661;
LABEL_358:
    swift_bridgeObjectRelease(v73);
    return 68;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x724473776F6C6C61, 0xEE00676E69746661, a1, a2, 0) & 1) != 0)
  {
    v73 = a2;
    goto LABEL_358;
  }
  if (a1 == 0xD000000000000014)
  {
    v74 = 0x8000000100EE0F40;
    if (a2 == 0x8000000100EE0F40)
      goto LABEL_363;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EE0F40, a1, a2, 0) & 1) != 0)
  {
    v74 = a2;
LABEL_363:
    swift_bridgeObjectRelease(v74);
    return 69;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v75 = 0x8000000100EC43B0;
    if (a2 == 0x8000000100EC43B0)
      goto LABEL_368;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC43B0, a1, a2, 0) & 1) != 0)
  {
    v75 = a2;
LABEL_368:
    swift_bridgeObjectRelease(v75);
    return 70;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v76 = 0x8000000100EC43D0;
    if (a2 == 0x8000000100EC43D0)
      goto LABEL_373;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC43D0, a1, a2, 0) & 1) != 0)
  {
    v76 = a2;
LABEL_373:
    swift_bridgeObjectRelease(v76);
    return 71;
  }
  if (a1 == 0xD000000000000025)
  {
    v77 = 0x8000000100EC43F0;
    if (a2 == 0x8000000100EC43F0)
      goto LABEL_378;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x8000000100EC43F0, a1, a2, 0) & 1) != 0)
  {
    v77 = a2;
LABEL_378:
    swift_bridgeObjectRelease(v77);
    return 72;
  }
  if (a1 == 0xD000000000000028)
  {
    v78 = 0x8000000100EC4420;
    if (a2 == 0x8000000100EC4420)
      goto LABEL_383;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028, 0x8000000100EC4420, a1, a2, 0) & 1) != 0)
  {
    v78 = a2;
LABEL_383:
    swift_bridgeObjectRelease(v78);
    return 73;
  }
  if (a1 == 0xD000000000000020)
  {
    v79 = 0x8000000100EC4450;
    if (a2 == 0x8000000100EC4450)
      goto LABEL_388;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100EC4450, a1, a2, 0) & 1) != 0)
  {
    v79 = a2;
LABEL_388:
    swift_bridgeObjectRelease(v79);
    return 74;
  }
  if (a1 == 0xD000000000000021)
  {
    v80 = 0x8000000100EC4480;
    if (a2 == 0x8000000100EC4480)
      goto LABEL_393;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC4480, a1, a2, 0) & 1) != 0)
  {
    v80 = a2;
LABEL_393:
    swift_bridgeObjectRelease(v80);
    return 75;
  }
  if (a1 == 0xD000000000000017)
  {
    v81 = 0x8000000100EC44B0;
    if (a2 == 0x8000000100EC44B0)
      goto LABEL_398;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EC44B0, a1, a2, 0) & 1) != 0)
  {
    v81 = a2;
LABEL_398:
    swift_bridgeObjectRelease(v81);
    return 76;
  }
  if (a1 == 0xD000000000000012)
  {
    v82 = 0x8000000100EE0F60;
    if (a2 == 0x8000000100EE0F60)
      goto LABEL_403;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EE0F60, a1, a2, 0) & 1) != 0)
  {
    v82 = a2;
LABEL_403:
    swift_bridgeObjectRelease(v82);
    return 77;
  }
  if (a1 == 0xD000000000000014)
  {
    v83 = 0x8000000100EE0F80;
    if (a2 == 0x8000000100EE0F80)
      goto LABEL_408;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EE0F80, a1, a2, 0) & 1) != 0)
  {
    v83 = a2;
LABEL_408:
    swift_bridgeObjectRelease(v83);
    return 78;
  }
  if (a1 == 0xD000000000000019)
  {
    v84 = 0x8000000100EE0FA0;
    if (a2 == 0x8000000100EE0FA0)
      goto LABEL_413;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100EE0FA0, a1, a2, 0) & 1) != 0)
  {
    v84 = a2;
LABEL_413:
    swift_bridgeObjectRelease(v84);
    return 79;
  }
  if (a1 == 0xD000000000000015)
  {
    v85 = 0x8000000100EE0FC0;
    if (a2 == 0x8000000100EE0FC0)
      goto LABEL_418;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EE0FC0, a1, a2, 0) & 1) != 0)
  {
    v85 = a2;
LABEL_418:
    swift_bridgeObjectRelease(v85);
    return 80;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v86 = 0x8000000100EE0FE0;
    if (a2 == 0x8000000100EE0FE0)
      goto LABEL_423;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EE0FE0, a1, a2, 0) & 1) != 0)
  {
    v86 = a2;
LABEL_423:
    swift_bridgeObjectRelease(v86);
    return 81;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v87 = 0x8000000100EE1000;
    if (a2 == 0x8000000100EE1000)
      goto LABEL_428;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100EE1000, a1, a2, 0) & 1) != 0)
  {
    v87 = a2;
LABEL_428:
    swift_bridgeObjectRelease(v87);
    return 82;
  }
  if (a1 == 0xD000000000000022)
  {
    v88 = 0x8000000100EE1020;
    if (a2 == 0x8000000100EE1020)
      goto LABEL_433;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100EE1020, a1, a2, 0) & 1) != 0)
  {
    v88 = a2;
LABEL_433:
    swift_bridgeObjectRelease(v88);
    return 83;
  }
  if (a1 == 0xD000000000000019)
  {
    v89 = 0x8000000100EE1050;
    if (a2 == 0x8000000100EE1050)
      goto LABEL_438;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100EE1050, a1, a2, 0) & 1) != 0)
  {
    v89 = a2;
LABEL_438:
    swift_bridgeObjectRelease(v89);
    return 84;
  }
  if (a1 == 0xD000000000000026)
  {
    v90 = 0x8000000100EE1070;
    if (a2 == 0x8000000100EE1070)
      goto LABEL_443;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000026, 0x8000000100EE1070, a1, a2, 0) & 1) != 0)
  {
    v90 = a2;
LABEL_443:
    swift_bridgeObjectRelease(v90);
    return 85;
  }
  if (a1 == 0xD000000000000014)
  {
    v91 = 0x8000000100EE10A0;
    if (a2 == 0x8000000100EE10A0)
      goto LABEL_448;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EE10A0, a1, a2, 0) & 1) != 0)
  {
    v91 = a2;
LABEL_448:
    swift_bridgeObjectRelease(v91);
    return 86;
  }
  if (a1 == 0xD000000000000013)
  {
    v92 = 0x8000000100EE10C0;
    if (a2 == 0x8000000100EE10C0)
      goto LABEL_453;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EE10C0, a1, a2, 0) & 1) != 0)
  {
    v92 = a2;
LABEL_453:
    swift_bridgeObjectRelease(v92);
    return 87;
  }
  if (a1 == 0xD00000000000002BLL)
  {
    v93 = 0x8000000100EE10E0;
    if (a2 == 0x8000000100EE10E0)
      goto LABEL_458;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100EE10E0, a1, a2, 0) & 1) != 0)
  {
    v93 = a2;
LABEL_458:
    swift_bridgeObjectRelease(v93);
    return 88;
  }
  if (a1 == 0x6941656C65487369 && a2 == 0xED000073646F5072)
  {
    v94 = 0xED000073646F5072;
LABEL_464:
    swift_bridgeObjectRelease(v94);
    return 89;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6941656C65487369, 0xED000073646F5072, a1, a2, 0) & 1) != 0)
  {
    v94 = a2;
    goto LABEL_464;
  }
  if (a1 == 0xD000000000000018)
  {
    v95 = 0x8000000100EC46C0;
    if (a2 == 0x8000000100EC46C0)
      goto LABEL_469;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC46C0, a1, a2, 0) & 1) != 0)
  {
    v95 = a2;
LABEL_469:
    swift_bridgeObjectRelease(v95);
    return 90;
  }
  if (a1 == 0xD000000000000013)
  {
    v96 = 0x8000000100EC46E0;
    if (a2 == 0x8000000100EC46E0)
      goto LABEL_474;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC46E0, a1, a2, 0) & 1) != 0)
  {
    v96 = a2;
LABEL_474:
    swift_bridgeObjectRelease(v96);
    return 91;
  }
  if (a1 == 0xD000000000000021)
  {
    v97 = 0x8000000100EC44D0;
    if (a2 == 0x8000000100EC44D0)
      goto LABEL_479;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC44D0, a1, a2, 0) & 1) != 0)
  {
    v97 = a2;
LABEL_479:
    swift_bridgeObjectRelease(v97);
    return 92;
  }
  if (a1 == 0xD000000000000023)
  {
    v98 = 0x8000000100EC4500;
    if (a2 == 0x8000000100EC4500)
      goto LABEL_484;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4500, a1, a2, 0) & 1) != 0)
  {
    v98 = a2;
LABEL_484:
    swift_bridgeObjectRelease(v98);
    return 93;
  }
  if (a1 == 0xD000000000000024)
  {
    v99 = 0x8000000100EC4530;
    if (a2 == 0x8000000100EC4530)
      goto LABEL_489;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x8000000100EC4530, a1, a2, 0) & 1) != 0)
  {
    v99 = a2;
LABEL_489:
    swift_bridgeObjectRelease(v99);
    return 94;
  }
  if (a1 == 0xD000000000000021)
  {
    v100 = 0x8000000100EC4560;
    if (a2 == 0x8000000100EC4560)
      goto LABEL_494;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100EC4560, a1, a2, 0) & 1) != 0)
  {
    v100 = a2;
LABEL_494:
    swift_bridgeObjectRelease(v100);
    return 95;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v101 = 0x8000000100EC4590;
    if (a2 == 0x8000000100EC4590)
      goto LABEL_499;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4590, a1, a2, 0) & 1) != 0)
  {
    v101 = a2;
LABEL_499:
    swift_bridgeObjectRelease(v101);
    return 96;
  }
  if (a1 == 0xD000000000000020)
  {
    v102 = 0x8000000100EC45B0;
    if (a2 == 0x8000000100EC45B0)
      goto LABEL_504;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100EC45B0, a1, a2, 0) & 1) != 0)
  {
    v102 = a2;
LABEL_504:
    swift_bridgeObjectRelease(v102);
    return 97;
  }
  if (a1 == 0xD000000000000019)
  {
    v103 = 0x8000000100EC45E0;
    if (a2 == 0x8000000100EC45E0)
      goto LABEL_509;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100EC45E0, a1, a2, 0) & 1) != 0)
  {
    v103 = a2;
LABEL_509:
    swift_bridgeObjectRelease(v103);
    return 98;
  }
  if (a1 == 0xD000000000000023)
  {
    v104 = 0x8000000100EC4600;
    if (a2 == 0x8000000100EC4600)
      goto LABEL_514;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4600, a1, a2, 0) & 1) != 0)
  {
    v104 = a2;
LABEL_514:
    swift_bridgeObjectRelease(v104);
    return 99;
  }
  if (a1 == 0xD000000000000016)
  {
    v105 = 0x8000000100EC41C0;
    if (a2 == 0x8000000100EC41C0)
      goto LABEL_519;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EC41C0, a1, a2, 0) & 1) != 0)
  {
    v105 = a2;
LABEL_519:
    swift_bridgeObjectRelease(v105);
    return 100;
  }
  if (a1 == 0xD000000000000015)
  {
    v106 = 0x8000000100EC4630;
    if (a2 == 0x8000000100EC4630)
      goto LABEL_524;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC4630, a1, a2, 0) & 1) != 0)
  {
    v106 = a2;
LABEL_524:
    swift_bridgeObjectRelease(v106);
    return 101;
  }
  if (a1 == 0xD000000000000018)
  {
    v107 = 0x8000000100EC4650;
    if (a2 == 0x8000000100EC4650)
      goto LABEL_529;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC4650, a1, a2, 0) & 1) != 0)
  {
    v107 = a2;
LABEL_529:
    swift_bridgeObjectRelease(v107);
    return 102;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v108 = 0x8000000100EC4670;
    if (a2 == 0x8000000100EC4670)
      goto LABEL_534;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC4670, a1, a2, 0) & 1) != 0)
  {
    v108 = a2;
LABEL_534:
    swift_bridgeObjectRelease(v108);
    return 103;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v109 = 0x8000000100EC4690;
    if (a2 == 0x8000000100EC4690)
      goto LABEL_539;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4690, a1, a2, 0) & 1) != 0)
  {
    v109 = a2;
LABEL_539:
    swift_bridgeObjectRelease(v109);
    return 104;
  }
  if (a1 == 0xD000000000000019)
  {
    v110 = 0x8000000100EC4700;
    if (a2 == 0x8000000100EC4700)
      goto LABEL_544;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100EC4700, a1, a2, 0) & 1) != 0)
  {
    v110 = a2;
LABEL_544:
    swift_bridgeObjectRelease(v110);
    return 105;
  }
  if (a1 == 0xD000000000000023)
  {
    v111 = 0x8000000100EC4720;
    if (a2 == 0x8000000100EC4720)
      goto LABEL_549;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4720, a1, a2, 0) & 1) != 0)
  {
    v111 = a2;
LABEL_549:
    swift_bridgeObjectRelease(v111);
    return 106;
  }
  if (a1 == 0xD000000000000025)
  {
    v112 = 0x8000000100EC4750;
    if (a2 == 0x8000000100EC4750)
      goto LABEL_554;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x8000000100EC4750, a1, a2, 0) & 1) != 0)
  {
    v112 = a2;
LABEL_554:
    swift_bridgeObjectRelease(v112);
    return 107;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v113 = 0x8000000100EC4780;
    if (a2 == 0x8000000100EC4780)
      goto LABEL_559;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EC4780, a1, a2, 0) & 1) != 0)
  {
    v113 = a2;
LABEL_559:
    swift_bridgeObjectRelease(v113);
    return 108;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v114 = 0x8000000100EC47A0;
    if (a2 == 0x8000000100EC47A0)
      goto LABEL_564;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC47A0, a1, a2, 0) & 1) != 0)
  {
    v114 = a2;
LABEL_564:
    swift_bridgeObjectRelease(v114);
    return 109;
  }
  if (a1 == 0xD000000000000017)
  {
    v115 = 0x8000000100EC47C0;
    if (a2 == 0x8000000100EC47C0)
      goto LABEL_569;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EC47C0, a1, a2, 0) & 1) != 0)
  {
    v115 = a2;
LABEL_569:
    swift_bridgeObjectRelease(v115);
    return 110;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v116 = 0x8000000100EC47E0;
    if (a2 == 0x8000000100EC47E0)
      goto LABEL_574;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC47E0, a1, a2, 0) & 1) != 0)
  {
    v116 = a2;
LABEL_574:
    swift_bridgeObjectRelease(v116);
    return 111;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v117 = 0x8000000100EC4800;
    if (a2 == 0x8000000100EC4800)
      goto LABEL_579;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC4800, a1, a2, 0) & 1) != 0)
  {
    v117 = a2;
LABEL_579:
    swift_bridgeObjectRelease(v117);
    return 112;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v118 = 0x8000000100EC4820;
    if (a2 == 0x8000000100EC4820)
      goto LABEL_584;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC4820, a1, a2, 0) & 1) != 0)
  {
    v118 = a2;
LABEL_584:
    swift_bridgeObjectRelease(v118);
    return 113;
  }
  if (a1 == 0xD000000000000020)
  {
    v119 = 0x8000000100EC4840;
    if (a2 == 0x8000000100EC4840)
      goto LABEL_589;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100EC4840, a1, a2, 0) & 1) != 0)
  {
    v119 = a2;
LABEL_589:
    swift_bridgeObjectRelease(v119);
    return 114;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    v120 = 0x8000000100EC4870;
    if (a2 == 0x8000000100EC4870)
      goto LABEL_594;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x8000000100EC4870, a1, a2, 0) & 1) != 0)
  {
    v120 = a2;
LABEL_594:
    swift_bridgeObjectRelease(v120);
    return 115;
  }
  if (a1 == 0xD000000000000022)
  {
    v121 = 0x8000000100EC4890;
    if (a2 == 0x8000000100EC4890)
      goto LABEL_599;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100EC4890, a1, a2, 0) & 1) != 0)
  {
    v121 = a2;
LABEL_599:
    swift_bridgeObjectRelease(v121);
    return 116;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v122 = 0x8000000100EC48C0;
    if (a2 == 0x8000000100EC48C0)
      goto LABEL_604;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC48C0, a1, a2, 0) & 1) != 0)
  {
    v122 = a2;
LABEL_604:
    swift_bridgeObjectRelease(v122);
    return 117;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v123 = 0x8000000100EC48E0;
    if (a2 == 0x8000000100EC48E0)
      goto LABEL_609;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EC48E0, a1, a2, 0) & 1) != 0)
  {
    v123 = a2;
LABEL_609:
    swift_bridgeObjectRelease(v123);
    return 118;
  }
  if (a1 == 0xD000000000000018)
  {
    v124 = 0x8000000100EC4900;
    if (a2 == 0x8000000100EC4900)
      goto LABEL_614;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC4900, a1, a2, 0) & 1) != 0)
  {
    v124 = a2;
LABEL_614:
    swift_bridgeObjectRelease(v124);
    return 119;
  }
  if (a1 == 0xD000000000000019)
  {
    v125 = 0x8000000100EC4920;
    if (a2 == 0x8000000100EC4920)
      goto LABEL_619;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100EC4920, a1, a2, 0) & 1) != 0)
  {
    v125 = a2;
LABEL_619:
    swift_bridgeObjectRelease(v125);
    return 120;
  }
  if (a1 == 0xD00000000000002BLL)
  {
    v126 = 0x8000000100EC4940;
    if (a2 == 0x8000000100EC4940)
      goto LABEL_624;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100EC4940, a1, a2, 0) & 1) != 0)
  {
    v126 = a2;
LABEL_624:
    swift_bridgeObjectRelease(v126);
    return 121;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v127 = 0x8000000100EC4970;
    if (a2 == 0x8000000100EC4970)
      goto LABEL_629;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100EC4970, a1, a2, 0) & 1) != 0)
  {
    v127 = a2;
LABEL_629:
    swift_bridgeObjectRelease(v127);
    return 122;
  }
  if (a1 == 0xD000000000000022)
  {
    v128 = 0x8000000100EC4990;
    if (a2 == 0x8000000100EC4990)
      goto LABEL_634;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100EC4990, a1, a2, 0) & 1) != 0)
  {
    v128 = a2;
LABEL_634:
    swift_bridgeObjectRelease(v128);
    return 123;
  }
  if (a1 == 0xD000000000000032)
  {
    v129 = 0x8000000100EE1110;
    if (a2 == 0x8000000100EE1110)
      goto LABEL_639;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032, 0x8000000100EE1110, a1, a2, 0) & 1) != 0)
  {
    v129 = a2;
LABEL_639:
    swift_bridgeObjectRelease(v129);
    return 124;
  }
  if (a1 == 0xD000000000000031)
  {
    v130 = 0x8000000100EE1150;
    if (a2 == 0x8000000100EE1150)
      goto LABEL_644;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000031, 0x8000000100EE1150, a1, a2, 0) & 1) != 0)
  {
    v130 = a2;
LABEL_644:
    swift_bridgeObjectRelease(v130);
    return 125;
  }
  if (a1 == 0xD000000000000032)
  {
    v131 = 0x8000000100EE1190;
    if (a2 == 0x8000000100EE1190)
      goto LABEL_649;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032, 0x8000000100EE1190, a1, a2, 0) & 1) != 0)
  {
    v131 = a2;
LABEL_649:
    swift_bridgeObjectRelease(v131);
    return 126;
  }
  if (a1 == 0xD000000000000031)
  {
    v132 = 0x8000000100EE11D0;
    if (a2 == 0x8000000100EE11D0)
      goto LABEL_654;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000031, 0x8000000100EE11D0, a1, a2, 0) & 1) != 0)
  {
    v132 = a2;
LABEL_654:
    swift_bridgeObjectRelease(v132);
    return 127;
  }
  if (a1 == 0xD000000000000028)
  {
    v133 = 0x8000000100EC49C0;
    if (a2 == 0x8000000100EC49C0)
      goto LABEL_659;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000028, 0x8000000100EC49C0, a1, a2, 0) & 1) != 0)
  {
    v133 = a2;
LABEL_659:
    swift_bridgeObjectRelease(v133);
    return 128;
  }
  if (a1 == 0xD00000000000002BLL)
  {
    v134 = 0x8000000100EC49F0;
    if (a2 == 0x8000000100EC49F0)
      goto LABEL_664;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100EC49F0, a1, a2, 0) & 1) != 0)
  {
    v134 = a2;
LABEL_664:
    swift_bridgeObjectRelease(v134);
    return 129;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v135 = 0x8000000100EC4A20;
    if (a2 == 0x8000000100EC4A20)
      goto LABEL_669;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4A20, a1, a2, 0) & 1) != 0)
  {
    v135 = a2;
LABEL_669:
    swift_bridgeObjectRelease(v135);
    return 130;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v136 = 0x8000000100EC4A40;
    if (a2 == 0x8000000100EC4A40)
      goto LABEL_674;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4A40, a1, a2, 0) & 1) != 0)
  {
    v136 = a2;
LABEL_674:
    swift_bridgeObjectRelease(v136);
    return 131;
  }
  if (a1 == 0xD000000000000032)
  {
    v137 = 0x8000000100EC4A60;
    if (a2 == 0x8000000100EC4A60)
      goto LABEL_679;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000032, 0x8000000100EC4A60, a1, a2, 0) & 1) != 0)
  {
    v137 = a2;
LABEL_679:
    swift_bridgeObjectRelease(v137);
    return 132;
  }
  if (a1 == 0xD000000000000015)
  {
    v138 = 0x8000000100EC4AA0;
    if (a2 == 0x8000000100EC4AA0)
      goto LABEL_684;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EC4AA0, a1, a2, 0) & 1) != 0)
  {
    v138 = a2;
LABEL_684:
    swift_bridgeObjectRelease(v138);
    return 133;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v139 = 0x8000000100EC4AC0;
    if (a2 == 0x8000000100EC4AC0)
      goto LABEL_689;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4AC0, a1, a2, 0) & 1) != 0)
  {
    v139 = a2;
LABEL_689:
    swift_bridgeObjectRelease(v139);
    return 134;
  }
  if (a1 == 0xD000000000000022)
  {
    v140 = 0x8000000100EE1210;
    if (a2 == 0x8000000100EE1210)
      goto LABEL_694;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100EE1210, a1, a2, 0) & 1) != 0)
  {
    v140 = a2;
LABEL_694:
    swift_bridgeObjectRelease(v140);
    return 135;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v141 = 0x8000000100EC4AE0;
    if (a2 == 0x8000000100EC4AE0)
      goto LABEL_699;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4AE0, a1, a2, 0) & 1) != 0)
  {
    v141 = a2;
LABEL_699:
    swift_bridgeObjectRelease(v141);
    return 136;
  }
  if (a1 == 0xD000000000000020)
  {
    v142 = 0x8000000100EC4B00;
    if (a2 == 0x8000000100EC4B00)
      goto LABEL_704;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100EC4B00, a1, a2, 0) & 1) != 0)
  {
    v142 = a2;
LABEL_704:
    swift_bridgeObjectRelease(v142);
    return 137;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v143 = 0x8000000100EC4B30;
    if (a2 == 0x8000000100EC4B30)
      goto LABEL_709;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EC4B30, a1, a2, 0) & 1) != 0)
  {
    v143 = a2;
LABEL_709:
    swift_bridgeObjectRelease(v143);
    return 138;
  }
  if (a1 == 0xD000000000000019)
  {
    v144 = 0x8000000100EC4B50;
    if (a2 == 0x8000000100EC4B50)
      goto LABEL_714;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100EC4B50, a1, a2, 0) & 1) != 0)
  {
    v144 = a2;
LABEL_714:
    swift_bridgeObjectRelease(v144);
    return 139;
  }
  if (a1 == 0xD000000000000010)
  {
    v145 = 0x8000000100EC4B70;
    if (a2 == 0x8000000100EC4B70)
      goto LABEL_719;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC4B70, a1, a2, 0) & 1) != 0)
  {
    v145 = a2;
LABEL_719:
    swift_bridgeObjectRelease(v145);
    return 140;
  }
  if (a1 == 0xD000000000000010)
  {
    v146 = 0x8000000100EC4B90;
    if (a2 == 0x8000000100EC4B90)
      goto LABEL_724;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC4B90, a1, a2, 0) & 1) != 0)
  {
    v146 = a2;
LABEL_724:
    swift_bridgeObjectRelease(v146);
    return 141;
  }
  if (a1 == 0x657261685378616DLL && a2 == 0xEF737265626D654DLL)
  {
    v147 = 0xEF737265626D654DLL;
LABEL_730:
    swift_bridgeObjectRelease(v147);
    return 142;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261685378616DLL, 0xEF737265626D654DLL, a1, a2, 0) & 1) != 0)
  {
    v147 = a2;
    goto LABEL_730;
  }
  if (a1 == 0x657261685378616DLL && a2 == 0xEE00736D65744964)
  {
    v148 = 0xEE00736D65744964;
LABEL_736:
    swift_bridgeObjectRelease(v148);
    return 143;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261685378616DLL, 0xEE00736D65744964, a1, a2, 0) & 1) != 0)
  {
    v148 = a2;
    goto LABEL_736;
  }
  if (a1 == 0xD000000000000016)
  {
    v149 = 0x8000000100EC4BC0;
    if (a2 == 0x8000000100EC4BC0)
      goto LABEL_741;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EC4BC0, a1, a2, 0) & 1) != 0)
  {
    v149 = a2;
LABEL_741:
    swift_bridgeObjectRelease(v149);
    return 144;
  }
  if (a1 == 0xD000000000000014)
  {
    v150 = 0x8000000100EC4BE0;
    if (a2 == 0x8000000100EC4BE0)
      goto LABEL_746;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100EC4BE0, a1, a2, 0) & 1) != 0)
  {
    v150 = a2;
LABEL_746:
    swift_bridgeObjectRelease(v150);
    return 145;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v151 = 0x8000000100EC4C00;
    if (a2 == 0x8000000100EC4C00)
      goto LABEL_751;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100EC4C00, a1, a2, 0) & 1) != 0)
  {
    v151 = a2;
LABEL_751:
    swift_bridgeObjectRelease(v151);
    return 146;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v152 = 0x8000000100EC4C20;
    if (a2 == 0x8000000100EC4C20)
      goto LABEL_756;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC4C20, a1, a2, 0) & 1) != 0)
  {
    v152 = a2;
LABEL_756:
    swift_bridgeObjectRelease(v152);
    return 147;
  }
  if (a1 == 0xD000000000000022)
  {
    v153 = 0x8000000100EC4C40;
    if (a2 == 0x8000000100EC4C40)
      goto LABEL_761;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100EC4C40, a1, a2, 0) & 1) != 0)
  {
    v153 = a2;
LABEL_761:
    swift_bridgeObjectRelease(v153);
    return 148;
  }
  if (a1 == 0xD000000000000023)
  {
    v154 = 0x8000000100EC4C70;
    if (a2 == 0x8000000100EC4C70)
      goto LABEL_766;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4C70, a1, a2, 0) & 1) != 0)
  {
    v154 = a2;
LABEL_766:
    swift_bridgeObjectRelease(v154);
    return 149;
  }
  if (a1 == 0xD000000000000023)
  {
    v155 = 0x8000000100EC4CA0;
    if (a2 == 0x8000000100EC4CA0)
      goto LABEL_771;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4CA0, a1, a2, 0) & 1) != 0)
  {
    v155 = a2;
LABEL_771:
    swift_bridgeObjectRelease(v155);
    return 150;
  }
  if (a1 == 0xD000000000000024)
  {
    v156 = 0x8000000100EC4CD0;
    if (a2 == 0x8000000100EC4CD0)
      goto LABEL_776;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x8000000100EC4CD0, a1, a2, 0) & 1) != 0)
  {
    v156 = a2;
LABEL_776:
    swift_bridgeObjectRelease(v156);
    return 151;
  }
  if (a1 == 0xD000000000000018)
  {
    v157 = 0x8000000100EC4D00;
    if (a2 == 0x8000000100EC4D00)
      goto LABEL_781;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC4D00, a1, a2, 0) & 1) != 0)
  {
    v157 = a2;
LABEL_781:
    swift_bridgeObjectRelease(v157);
    return 152;
  }
  if (a1 == 0xD00000000000002BLL)
  {
    v158 = 0x8000000100EC4D20;
    if (a2 == 0x8000000100EC4D20)
      goto LABEL_786;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x8000000100EC4D20, a1, a2, 0) & 1) != 0)
  {
    v158 = a2;
LABEL_786:
    swift_bridgeObjectRelease(v158);
    return 153;
  }
  if (a1 == 0xD00000000000002DLL)
  {
    v159 = 0x8000000100EC4D50;
    if (a2 == 0x8000000100EC4D50)
      goto LABEL_791;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002DLL, 0x8000000100EC4D50, a1, a2, 0) & 1) != 0)
  {
    v159 = a2;
LABEL_791:
    swift_bridgeObjectRelease(v159);
    return 154;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v160 = 0x8000000100EC4D80;
    if (a2 == 0x8000000100EC4D80)
      goto LABEL_796;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4D80, a1, a2, 0) & 1) != 0)
  {
    v160 = a2;
LABEL_796:
    swift_bridgeObjectRelease(v160);
    return 155;
  }
  if (a1 == 0xD000000000000023)
  {
    v161 = 0x8000000100EC4DA0;
    if (a2 == 0x8000000100EC4DA0)
      goto LABEL_801;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4DA0, a1, a2, 0) & 1) != 0)
  {
    v161 = a2;
LABEL_801:
    swift_bridgeObjectRelease(v161);
    return 156;
  }
  if (a1 == 0xD000000000000020)
  {
    v162 = 0x8000000100EC4DD0;
    if (a2 == 0x8000000100EC4DD0)
      goto LABEL_806;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x8000000100EC4DD0, a1, a2, 0) & 1) != 0)
  {
    v162 = a2;
LABEL_806:
    swift_bridgeObjectRelease(v162);
    return 157;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v163 = 0x8000000100EC4E00;
    if (a2 == 0x8000000100EC4E00)
      goto LABEL_811;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC4E00, a1, a2, 0) & 1) != 0)
  {
    v163 = a2;
LABEL_811:
    swift_bridgeObjectRelease(v163);
    return 158;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v164 = 0x8000000100EC4E20;
    if (a2 == 0x8000000100EC4E20)
      goto LABEL_816;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC4E20, a1, a2, 0) & 1) != 0)
  {
    v164 = a2;
LABEL_816:
    swift_bridgeObjectRelease(v164);
    return 159;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v165 = 0x8000000100EC4E40;
    if (a2 == 0x8000000100EC4E40)
      goto LABEL_821;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC4E40, a1, a2, 0) & 1) != 0)
  {
    v165 = a2;
LABEL_821:
    swift_bridgeObjectRelease(v165);
    return 160;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v166 = 0x8000000100EC4E60;
    if (a2 == 0x8000000100EC4E60)
      goto LABEL_826;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100EC4E60, a1, a2, 0) & 1) != 0)
  {
    v166 = a2;
LABEL_826:
    swift_bridgeObjectRelease(v166);
    return 161;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v167 = 0x8000000100EC4E80;
    if (a2 == 0x8000000100EC4E80)
      goto LABEL_831;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100EC4E80, a1, a2, 0) & 1) != 0)
  {
    v167 = a2;
LABEL_831:
    swift_bridgeObjectRelease(v167);
    return 162;
  }
  if (a1 == 0xD00000000000002DLL)
  {
    v168 = 0x8000000100EC4EA0;
    if (a2 == 0x8000000100EC4EA0)
      goto LABEL_836;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002DLL, 0x8000000100EC4EA0, a1, a2, 0) & 1) != 0)
  {
    v168 = a2;
LABEL_836:
    swift_bridgeObjectRelease(v168);
    return 163;
  }
  if (a1 == 0xD000000000000022)
  {
    v169 = 0x8000000100EC4ED0;
    if (a2 == 0x8000000100EC4ED0)
      goto LABEL_841;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100EC4ED0, a1, a2, 0) & 1) != 0)
  {
    v169 = a2;
LABEL_841:
    swift_bridgeObjectRelease(v169);
    return 164;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    v170 = 0x8000000100EC4F00;
    if (a2 == 0x8000000100EC4F00)
      goto LABEL_846;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100EC4F00, a1, a2, 0) & 1) != 0)
  {
    v170 = a2;
LABEL_846:
    swift_bridgeObjectRelease(v170);
    return 165;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v171 = 0x8000000100EC4F20;
    if (a2 == 0x8000000100EC4F20)
      goto LABEL_851;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4F20, a1, a2, 0) & 1) != 0)
  {
    v171 = a2;
LABEL_851:
    swift_bridgeObjectRelease(v171);
    return 166;
  }
  if (a1 == 0xD000000000000018)
  {
    v172 = 0x8000000100EC4F40;
    if (a2 == 0x8000000100EC4F40)
      goto LABEL_856;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC4F40, a1, a2, 0) & 1) != 0)
  {
    v172 = a2;
LABEL_856:
    swift_bridgeObjectRelease(v172);
    return 167;
  }
  if (a1 == 0xD000000000000023)
  {
    v173 = 0x8000000100EC4F60;
    if (a2 == 0x8000000100EC4F60)
      goto LABEL_861;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100EC4F60, a1, a2, 0) & 1) != 0)
  {
    v173 = a2;
LABEL_861:
    swift_bridgeObjectRelease(v173);
    return 168;
  }
  if (a1 == 0xD000000000000029 && a2 == 0x8000000100EC4F90)
  {
    v174 = 0x8000000100EC4F90;
LABEL_867:
    swift_bridgeObjectRelease(v174);
    return 169;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000029, 0x8000000100EC4F90, a1, a2, 0) & 1) != 0)
  {
    v174 = a2;
    goto LABEL_867;
  }
  if (a1 == 0xD000000000000011)
  {
    v175 = 0x8000000100EC4FC0;
    if (a2 == 0x8000000100EC4FC0)
      goto LABEL_872;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC4FC0, a1, a2, 0) & 1) != 0)
  {
    v175 = a2;
LABEL_872:
    swift_bridgeObjectRelease(v175);
    return 170;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v176 = 0x8000000100EC4FE0;
    if (a2 == 0x8000000100EC4FE0)
      goto LABEL_877;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC4FE0, a1, a2, 0) & 1) != 0)
  {
    v176 = a2;
LABEL_877:
    swift_bridgeObjectRelease(v176);
    return 171;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x8000000100EC5000)
  {
    swift_bridgeObjectRelease(0x8000000100EC5000);
    return 172;
  }
  else
  {
    v177 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x8000000100EC5000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v177 & 1) != 0)
      return 4294967212;
    else
      return 4294967213;
  }
}

Swift::Int sub_1006D23D8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for BeaconObservation(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F0EC(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1006D7C00(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1006D2458(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10088F2B8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1006D8A44(v5);
  *a1 = v2;
  return result;
}

unint64_t sub_1006D24C0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  void *v11;
  unint64_t result;
  unint64_t v13;
  unint64_t v14;
  _BYTE v15[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(Strong + 280);
    swift_retain();
    v7 = objc_autoreleasePoolPush();
    sub_1006D25E0(v5, v6, &v14);
    objc_autoreleasePoolPop(v7);
    v8 = v14;
    v9 = objc_autoreleasePoolPush();
    sub_1006D489C(v5, &v14);
    objc_autoreleasePoolPop(v9);
    v10 = v14;
    v11 = objc_autoreleasePoolPush();
    sub_1006D52A0(&v14);
    objc_autoreleasePoolPop(v11);
    swift_release();
    result = swift_release();
    v13 = v14;
  }
  else
  {
    v8 = sub_1006BAD58((uint64_t)_swiftEmptyArrayStorage);
    v13 = sub_1006BAF20((uint64_t)_swiftEmptyArrayStorage);
    result = sub_1006BAD58((uint64_t)_swiftEmptyArrayStorage);
    v10 = result;
  }
  *a2 = v8;
  a2[1] = v13;
  a2[2] = v10;
  return result;
}

uint64_t sub_1006D25E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  char isUniquelyReferenced_nonNull_native;
  void (*v28)(unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD v35[2];
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v43 = a2;
  v36 = a3;
  v44 = type metadata accessor for BeaconState(0);
  v5 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v40 = (uint64_t)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1011046F8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v35 - v11;
  v13 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = a1;
  v16 = sub_100017368();
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v39 = v10;
    v35[0] = v16;
    v35[1] = v3;
    v18 = v16 + 32;
    v19 = _swiftEmptyDictionarySingleton;
    v37 = v12;
    v38 = v5;
    do
    {
      sub_100030784(v18, (uint64_t)v45);
      v23 = v46;
      v22 = v47;
      sub_10001AA44(v45, v46);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v23);
      sub_1006D2948(v45, v43, (uint64_t)v12);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v44) == 1)
      {
        sub_100004048((uint64_t)v12, &qword_1011046F8);
        swift_bridgeObjectRetain(v19);
        v24 = sub_100003FB0((uint64_t)v15);
        v26 = v25;
        swift_bridgeObjectRelease();
        if ((v26 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
          v48 = v19;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100A9F90C();
            v19 = v48;
          }
          v28 = *(void (**)(unint64_t, uint64_t))(v41 + 8);
          v28(v19[6] + *(_QWORD *)(v41 + 72) * v24, v13);
          v19 = v48;
          v29 = v48[7] + *(_QWORD *)(v5 + 72) * v24;
          v30 = v5;
          v31 = v13;
          v32 = (uint64_t)v39;
          sub_1000126EC(v29, (uint64_t)v39, type metadata accessor for BeaconState);
          sub_100107E5C(v24, (uint64_t)v19);
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v44);
          v12 = v37;
        }
        else
        {
          v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
          v31 = v13;
          v32 = (uint64_t)v39;
          v33(v39, 1, 1, v44);
          v28 = *(void (**)(unint64_t, uint64_t))(v41 + 8);
        }
        v28((unint64_t)v15, v31);
        sub_100004048(v32, &qword_1011046F8);
        v13 = v31;
        v5 = v38;
      }
      else
      {
        v20 = v40;
        sub_1000126EC((uint64_t)v12, v40, type metadata accessor for BeaconState);
        v21 = swift_isUniquelyReferenced_nonNull_native(v19);
        v48 = v19;
        sub_10010D7F0(v20, (uint64_t)v15, v21);
        v19 = v48;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v13);
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
      v18 += 40;
      --v17;
    }
    while (v17);
    result = swift_bridgeObjectRelease();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v19 = _swiftEmptyDictionarySingleton;
  }
  *v36 = v19;
  return result;
}

uint64_t sub_1006D2948@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _OWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  int *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  _QWORD *v107;
  int64_t v108;
  _QWORD *v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (**v118)(_QWORD, uint64_t, uint64_t);
  void (*v119)(_QWORD, _QWORD);
  uint64_t v120;
  id v121;
  char **v122;
  char *v123;
  Class isa;
  Class v125;
  id v126;
  _QWORD *v127;
  int *v128;
  uint64_t v129;
  Class v130;
  Class v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char **v139;
  char *v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  uint64_t *v149;
  uint64_t *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  void (*v156)(char *, uint64_t);
  unint64_t v157;
  unint64_t v158;
  char *v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  _QWORD *v166;
  uint64_t v167;
  char **v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  NSDate v179;
  Class v180;
  char *v181;
  Class v182;
  id v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int *v187;
  uint64_t v188;
  _QWORD *v189;
  char *v190;
  uint64_t *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  uint64_t v195;
  _QWORD *v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t *v199;
  void (*v200)(char *, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  uint8_t *v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  int *v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  Class v241;
  Class v242;
  char *v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  _QWORD *v256;
  char *v257;
  NSDate v258;
  uint64_t v259;
  Class v260;
  Class v261;
  void (*v262)(char *, uint64_t);
  id v263;
  id v264;
  uint64_t v265;
  Class v266;
  Class v267;
  id v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int *v273;
  _QWORD *v274;
  __int16 v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t *v281;
  char *v282;
  void (**v283)(char *, uint64_t);
  void (*v284)(char *, uint64_t);
  _QWORD *v285;
  char *v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t *v289;
  _BYTE *v290;
  uint64_t v291;
  void (*v292)(char *, uint64_t);
  void (*v293)(char *, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  _QWORD *v301;
  char *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  char *v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  int *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _OWORD *v320;
  uint64_t v321;
  uint64_t v322;
  char *v323;
  char *v324;
  char *v325;
  char *v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  _QWORD *v339;
  uint64_t v340;
  uint64_t v341;
  void (*v342)(char *, uint64_t);
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  void (*v346)(_QWORD, _QWORD);
  void (**v347)(_QWORD, uint64_t, uint64_t);
  uint64_t v348;
  uint64_t v349;
  char *v350;
  uint64_t v351;
  char v352[8];
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;

  v321 = a2;
  v318 = a3;
  v298 = type metadata accessor for SharedBeaconState(0);
  __chkstk_darwin(v298);
  v299 = (char *)&v297 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v303 = type metadata accessor for SharedBeaconRecord(0);
  v5 = __chkstk_darwin(v303);
  v297 = (uint64_t)&v297 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v302 = (char *)&v297 - v7;
  v8 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v8);
  v316 = (uint64_t)&v297 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v310 = type metadata accessor for OwnedBeaconState(0);
  __chkstk_darwin(v310);
  v311 = (char *)&v297 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_10110EEB0);
  v12 = __chkstk_darwin(v11);
  v333 = (char *)&v297 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v307 = (uint64_t)&v297 - v14;
  v309 = type metadata accessor for ProductInfoState(0);
  v15 = __chkstk_darwin(v309);
  v308 = (char *)&v297 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v317 = (uint64_t)&v297 - v17;
  v337 = type metadata accessor for TimeZone(0);
  v332 = *(_QWORD *)(v337 - 8);
  __chkstk_darwin(v337);
  v334 = (char *)&v297 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v19);
  v331 = (uint64_t)&v297 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v345 = type metadata accessor for ShareRecord(0);
  v300 = *(_QWORD *)(v345 - 8);
  __chkstk_darwin(v345);
  v344 = (uint64_t)&v297 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v330 = type metadata accessor for ShareState(0);
  v329 = *(_QWORD *)(v330 - 8);
  __chkstk_darwin(v330);
  v343 = (uint64_t)&v297 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v23);
  v305 = (uint64_t)&v297 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v319 = type metadata accessor for OwnedBeaconRecord(0);
  v25 = __chkstk_darwin(v319);
  v322 = (uint64_t)&v297 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v341 = (uint64_t)&v297 - v27;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F47D0);
  __chkstk_darwin(v28);
  v328 = (uint64_t)&v297 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v327 = (_QWORD *)type metadata accessor for KeyAlignmentRecord(0);
  v326 = (char *)*(v327 - 1);
  __chkstk_darwin(v327);
  v301 = (uint64_t *)((char *)&v297 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v31);
  v314 = (uint64_t)&v297 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v315 = type metadata accessor for KeySyncRecord(0);
  v313 = *(_QWORD *)(v315 - 8);
  __chkstk_darwin(v315);
  v304 = (uint64_t)&v297 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v348 = type metadata accessor for UUID(0);
  v34 = *(_QWORD **)(v348 - 8);
  v35 = __chkstk_darwin(v348);
  v338 = (char *)&v297 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v38 = (char *)&v297 - v37;
  v39 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v39);
  v41 = (char *)&v297 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v336 = type metadata accessor for Date(0);
  v335 = *(_QWORD *)(v336 - 8);
  v42 = __chkstk_darwin(v336);
  v306 = (char *)&v297 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v42);
  v325 = (char *)&v297 - v45;
  v46 = __chkstk_darwin(v44);
  v323 = (char *)&v297 - v47;
  __chkstk_darwin(v46);
  v324 = (char *)&v297 - v48;
  v49 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v50 = *((_QWORD *)v49 - 1);
  v51 = __chkstk_darwin(v49);
  v53 = (char *)&v297 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v55 = (_OWORD *)((char *)&v297 - v54);
  v56 = a1;
  v58 = a1[3];
  v57 = a1[4];
  v339 = v56;
  sub_10001AA44(v56, v58);
  v59 = v58;
  v60 = v348;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 8) + 32))(v59);
  v349 = v321;
  v350 = v38;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029183C);
  v342 = (void (*)(char *, uint64_t))v34[1];
  v342(v38, v60);
  v61 = (*(uint64_t (**)(char *, uint64_t, int *))(v50 + 48))(v41, 1, v49);
  v347 = (void (**)(_QWORD, uint64_t, uint64_t))v34;
  v320 = v55;
  v312 = v49;
  if (v61 == 1)
  {
    v62 = sub_100004048((uint64_t)v41, (uint64_t *)&unk_101105880);
    UUID.init()(v62);
    v63 = v339;
    v65 = v339[3];
    v64 = v339[4];
    sub_10001AA44(v339, v65);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v64 + 8) + 8) + 32))(v65);
    *v55 = xmmword_100E22FC0;
    ((void (*)(char *, char *, uint64_t))v34[4])((char *)v55 + v49[5], v38, v60);
    *(_QWORD *)((char *)v55 + v49[7]) = -1;
    v66 = (_QWORD *)((char *)v55 + v49[8]);
    *v66 = 0xD000000000000017;
    v66[1] = 0x8000000100EE1280;
    v67 = (_QWORD *)((char *)v55 + v49[9]);
    *v67 = 0;
    v67[1] = 0;
    v68 = (uint64_t)v38;
    v69 = v63;
  }
  else
  {
    sub_1000126EC((uint64_t)v41, (uint64_t)v53, type metadata accessor for BeaconNamingRecord);
    sub_1000126EC((uint64_t)v53, (uint64_t)v55, type metadata accessor for BeaconNamingRecord);
    v68 = (uint64_t)v38;
    v69 = v339;
  }
  v71 = v69[3];
  v70 = v69[4];
  v72 = v69;
  sub_10001AA44(v69, v71);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v70 + 8) + 8) + 32))(v71);
  v73 = v314;
  sub_10081AECC(v68, v314);
  v342((char *)v68, v60);
  v74 = (int *)v315;
  v75 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v313 + 48))(v73, 1, v315);
  v76 = v336;
  v77 = v60;
  v78 = v327;
  if (v75 == 1)
  {
    v79 = sub_100004048(v73, &qword_1010F7AE0);
    static Date.distantPast.getter(v79);
    v313 = 0;
    v314 = 0;
  }
  else
  {
    v80 = v73;
    v81 = v304;
    sub_1000126EC(v80, v304, type metadata accessor for KeySyncRecord);
    v314 = *(_QWORD *)(v81 + v74[5]);
    (*(void (**)(char *, uint64_t, uint64_t))(v335 + 16))(v324, v81 + v74[7], v76);
    v313 = *(_QWORD *)(v81 + v74[10]);
    sub_1000126B0(v81, type metadata accessor for KeySyncRecord);
  }
  v82 = v337;
  v84 = v72[3];
  v83 = v72[4];
  sub_10001AA44(v72, v84);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v83 + 8) + 8) + 32))(v84);
  v85 = v328;
  sub_1008892B4(v328);
  v342((char *)v68, v77);
  if ((*((unsigned int (**)(uint64_t, uint64_t, _QWORD *))v326 + 6))(v85, 1, v78) == 1)
  {
    v86 = sub_100004048(v85, (uint64_t *)&unk_1010F47D0);
    static Date.distantPast.getter(v86);
    v304 = 0;
    v87 = v335;
  }
  else
  {
    v88 = v85;
    v89 = (uint64_t)v301;
    sub_1000126EC(v88, (uint64_t)v301, type metadata accessor for KeyAlignmentRecord);
    v90 = *((int *)v78 + 8);
    v304 = *(_QWORD *)(v89 + *((int *)v78 + 7));
    v87 = v335;
    (*(void (**)(char *, uint64_t, uint64_t))(v335 + 16))(v323, v89 + v90, v336);
    sub_1000126B0(v89, type metadata accessor for KeyAlignmentRecord);
  }
  v346 = (void (*)(_QWORD, _QWORD))v68;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v91 = qword_1011B7160;
  v92 = v72;
  v93 = v72[3];
  v94 = v92[4];
  sub_10001AA44(v92, v93);
  v95 = (uint64_t)v338;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v94 + 8) + 8) + 32))(v93);
  v96 = objc_autoreleasePoolPush();
  sub_10058DC14(v91, v95, 0, 0, &v355);
  objc_autoreleasePoolPop(v96);
  v97 = v355;
  v342((char *)v95, v77);
  v355 = v97;
  swift_bridgeObjectRetain(v97);
  sub_1006D23D8(&v355);
  swift_bridgeObjectRelease();
  v98 = sub_1006D9E68(v355);
  swift_release();
  sub_100030784((uint64_t)v92, (uint64_t)&v355);
  v99 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v100 = v341;
  v101 = v319;
  v102 = swift_dynamicCast(v341, &v355, v99, v319, 0);
  v103 = (uint64_t)v333;
  if ((v102 & 1) != 0)
  {
    v303 = 0;
    v315 = v98;
    v104 = v322;
    sub_1000126EC(v100, v322, type metadata accessor for OwnedBeaconRecord);
    v105 = v104 + *(int *)(v101 + 20);
    v106 = *(char **)(v321 + 160);
    v107 = sub_10088A6EC();
    v108 = v107[2];
    if (v108)
    {
      v302 = v106;
      v354 = _swiftEmptyArrayStorage;
      sub_10009B384(0, v108, 0);
      v109 = (_QWORD *)objc_opt_self(NSISO8601DateFormatter);
      v110 = (*(unsigned __int8 *)(v300 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v300 + 80);
      v301 = v107;
      v111 = (char *)v107 + v110;
      v326 = *(char **)(v300 + 72);
      v112 = v334;
      v328 = v105;
      v327 = v109;
      do
      {
        v342 = (void (*)(char *, uint64_t))v108;
        v341 = (uint64_t)v111;
        v113 = v344;
        sub_10005972C((uint64_t)v111, v344, type metadata accessor for ShareRecord);
        v114 = v113 + *(int *)(v345 + 32);
        v115 = v331;
        sub_10000F9B8(v114, v331, (uint64_t *)&unk_1010EA690);
        v116 = v336;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v115, 1, v336) == 1)
        {
          sub_100004048(v115, (uint64_t *)&unk_1010EA690);
          v340 = 0;
          v339 = (_QWORD *)0xE000000000000000;
          v117 = v332;
          v118 = v347;
          v119 = v346;
          v120 = v82;
          v121 = v327;
          v122 = &selRef_setDateFormat_;
        }
        else
        {
          v123 = v325;
          (*(void (**)(char *, uint64_t, uint64_t))(v87 + 32))(v325, v115, v116);
          isa = Date._bridgeToObjectiveC()().super.isa;
          static TimeZone.gmt.getter();
          v125 = TimeZone._bridgeToObjectiveC()().super.isa;
          v117 = v332;
          (*(void (**)(char *, uint64_t))(v332 + 8))(v112, v82);
          v122 = &selRef_setDateFormat_;
          v121 = v327;
          v126 = objc_msgSend(v327, "stringFromDate:timeZone:formatOptions:", isa, v125, 1907);

          v340 = static String._unconditionallyBridgeFromObjectiveC(_:)(v126);
          v339 = v127;

          (*(void (**)(char *, uint64_t))(v87 + 8))(v123, v116);
          v118 = v347;
          v119 = v346;
          v120 = v337;
        }
        v128 = (int *)v345;
        v129 = v344;
        ((void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v118)[2](v119, v344 + *(int *)(v345 + 20), v348);
        v130 = Date._bridgeToObjectiveC()().super.isa;
        static TimeZone.gmt.getter();
        v131 = TimeZone._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v117 + 8))(v112, v120);
        v132 = objc_msgSend(v121, v122[107], v130, v131, 1907);

        v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v132);
        v135 = v134;

        v136 = v129 + v128[9];
        v138 = *(_QWORD *)(v136 + 8);
        v137 = *(_QWORD *)(v136 + 16);
        v139 = (char **)(v129 + v128[10]);
        v140 = v139[1];
        v338 = *v139;
        v141 = *(_QWORD *)(v129 + v128[11]);
        v142 = *(_BYTE *)(v129 + v128[12]);
        swift_bridgeObjectRetain(v137);
        swift_bridgeObjectRetain(v140);
        sub_100690C6C(v142);
        v144 = v143;
        v146 = v145;
        v147 = v343;
        v347[4](v343, (uint64_t)v346, v348);
        v148 = (int *)v330;
        v149 = (uint64_t *)(v147 + *(int *)(v330 + 20));
        *v149 = v133;
        v149[1] = v135;
        v150 = (uint64_t *)(v147 + v148[6]);
        v151 = v339;
        *v150 = v340;
        v150[1] = (uint64_t)v151;
        v152 = (_QWORD *)(v147 + v148[7]);
        *v152 = v138;
        v152[1] = v137;
        v153 = (_QWORD *)(v147 + v148[8]);
        *v153 = v338;
        v153[1] = v140;
        *(_QWORD *)(v147 + v148[9]) = v141;
        v154 = (_QWORD *)(v147 + v148[10]);
        *v154 = v144;
        v154[1] = v146;
        sub_1000126B0(v129, type metadata accessor for ShareRecord);
        v155 = v354;
        if ((swift_isUniquelyReferenced_nonNull_native(v354) & 1) == 0)
        {
          sub_10009B384(0, v155[2] + 1, 1);
          v155 = v354;
        }
        v103 = (uint64_t)v333;
        v105 = v328;
        v156 = v342;
        v158 = v155[2];
        v157 = v155[3];
        v82 = v337;
        v112 = v334;
        if (v158 >= v157 >> 1)
        {
          sub_10009B384(v157 > 1, v158 + 1, 1);
          v155 = v354;
        }
        v155[2] = v158 + 1;
        sub_1000126EC(v343, (uint64_t)v155+ ((*(unsigned __int8 *)(v329 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v329 + 80))+ *(_QWORD *)(v329 + 72) * v158, type metadata accessor for ShareState);
        v111 = &v326[v341];
        v108 = (int64_t)v156 - 1;
        v87 = v335;
      }
      while (v108);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v155 = _swiftEmptyArrayStorage;
    }
    v215 = sub_100889888();
    v216 = v215[2];
    v217 = type metadata accessor for LeashRecord(0);
    v218 = *(_QWORD *)(v217 - 8);
    if (v216)
    {
      v219 = v305;
      sub_10005972C((uint64_t)v215 + ((*(unsigned __int8 *)(v218 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v218 + 80)), v305, type metadata accessor for LeashRecord);
      v220 = 0;
    }
    else
    {
      v220 = 1;
      v219 = v305;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v218 + 56))(v219, v220, 1, v217);
    swift_bridgeObjectRelease();
    v221 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v219, 1, v217);
    v222 = v219;
    v223 = (uint64_t)v308;
    if (v221 == 1)
    {
      sub_100004048(v222, &qword_101111B80);
      LODWORD(v348) = 0;
    }
    else
    {
      v224 = *(_QWORD *)(v222 + *(int *)(v217 + 24));
      swift_bridgeObjectRetain(v224);
      v225 = sub_1000126B0(v222, type metadata accessor for LeashRecord);
      __chkstk_darwin(v225);
      *(&v297 - 2) = v105;
      LODWORD(v348) = sub_1007EF65C((uint64_t (*)(char *))sub_100426430, (_BOOL8)(&v297 - 4), v224);
      swift_bridgeObjectRelease();
    }
    v226 = v334;
    v347 = (void (**)(_QWORD, uint64_t, uint64_t))sub_1004AA8E4(v322, v321);
    v227 = v307;
    sub_10081BB64(v105, v307);
    v228 = v227;
    sub_10000F9B8(v227, v223, &qword_10110EEB0);
    sub_10000F9B8(v227, v103, &qword_10110EEB0);
    v229 = type metadata accessor for BeaconProductInfoRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v229 - 8) + 48))(v103, 1, v229) == 1)
    {
      sub_100004048(v228, &qword_10110EEB0);
      sub_100004048(v103, &qword_10110EEB0);
      v230 = 0;
      v231 = 0;
    }
    else
    {
      v232 = *(_DWORD *)(v103 + *(int *)(v229 + 68));
      sub_1000126B0(v103, type metadata accessor for BeaconProductInfoRecord);
      v230 = sub_100C6C7C8(v232);
      v233 = v228;
      v231 = v234;
      sub_100004048(v233, &qword_10110EEB0);
    }
    v235 = (uint64_t *)(v223 + *(int *)(v309 + 20));
    *v235 = v230;
    v235[1] = v231;
    sub_1000126EC(v223, v317, type metadata accessor for ProductInfoState);
    v236 = (int *)v319;
    v237 = v322;
    sub_10005972C(v322 + *(int *)(v319 + 24), v316, type metadata accessor for StableIdentifier);
    v238 = v306;
    v239 = v336;
    (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v306, v237 + v236[8], v336);
    v240 = (char *)objc_opt_self(NSISO8601DateFormatter);
    v326 = v240;
    v241 = Date._bridgeToObjectiveC()().super.isa;
    static TimeZone.gmt.getter();
    v242 = TimeZone._bridgeToObjectiveC()().super.isa;
    v327 = *(_QWORD **)(v332 + 8);
    ((void (*)(char *, uint64_t))v327)(v226, v337);
    v243 = v226;
    v244 = objc_msgSend(v240, "stringFromDate:timeZone:formatOptions:", v241, v242, 1907);

    v345 = static String._unconditionallyBridgeFromObjectiveC(_:)(v244);
    v344 = v245;

    v346 = *(void (**)(_QWORD, _QWORD))(v87 + 8);
    v346(v238, v239);
    v246 = v312[7];
    v247 = (uint64_t *)((char *)v320 + v312[8]);
    v248 = v247[1];
    v340 = *v247;
    v331 = v248;
    v249 = v236[15];
    v250 = (uint64_t *)(v322 + v236[14]);
    v251 = (char *)v250[1];
    v341 = *v250;
    v333 = v251;
    v252 = v236[17];
    v330 = *(_QWORD *)(v322 + v236[16]);
    v253 = v330;
    v332 = *(_QWORD *)(v322 + v252);
    v254 = v332;
    v255 = *(char **)(v322 + v249 + 8);
    v342 = *(void (**)(char *, uint64_t))(v322 + v249);
    v334 = v255;
    v343 = *(_QWORD *)((char *)v320 + v246);
    LOBYTE(v242) = *(_BYTE *)(v322 + v236[19]);
    swift_bridgeObjectRetain(v248);
    swift_bridgeObjectRetain(v251);
    swift_bridgeObjectRetain(v255);
    sub_100DC6490((char)v242);
    v339 = v256;
    v338 = v257;
    LODWORD(v335) = sub_100A2D38C(v253, v254);
    v258.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v259 = v337;
    v260 = v258.super.isa;
    static TimeZone.gmt.getter();
    v261 = TimeZone._bridgeToObjectiveC()().super.isa;
    v262 = (void (*)(char *, uint64_t))v327;
    ((void (*)(char *, uint64_t))v327)(v226, v259);
    v263 = v326;
    v264 = objc_msgSend(v326, "stringFromDate:timeZone:formatOptions:", v260, v261, 1907);

    v329 = static String._unconditionallyBridgeFromObjectiveC(_:)(v264);
    v328 = v265;

    v266 = Date._bridgeToObjectiveC()().super.isa;
    static TimeZone.gmt.getter();
    v267 = TimeZone._bridgeToObjectiveC()().super.isa;
    v262(v243, v259);
    v268 = objc_msgSend(v263, "stringFromDate:timeZone:formatOptions:", v266, v267, 1907);

    v269 = static String._unconditionallyBridgeFromObjectiveC(_:)(v268);
    v271 = v270;

    LOBYTE(v266) = sub_100A077E4(8u, (uint64_t)v347);
    swift_bridgeObjectRelease();
    v272 = v322;
    v273 = (int *)v310;
    v274 = v311;
    sub_10000F9B8(v322 + v236[7], (uint64_t)&v311[*(int *)(v310 + 96)], &qword_1010ED860);
    sub_1009A2B44();
    LOWORD(v267) = v275;
    v276 = v317;
    sub_10005972C(v317, (uint64_t)v274 + v273[26], type metadata accessor for ProductInfoState);
    *v274 = 0x61654264656E774FLL;
    v274[1] = 0xEB000000006E6F63;
    sub_1000126EC(v316, (uint64_t)v274 + v273[5], type metadata accessor for StableIdentifier);
    v277 = (_QWORD *)((char *)v274 + v273[6]);
    v278 = v344;
    *v277 = v345;
    v277[1] = v278;
    v279 = (_QWORD *)((char *)v274 + v273[7]);
    v280 = v331;
    *v279 = v340;
    v279[1] = v280;
    v281 = (_QWORD *)((char *)v274 + v273[8]);
    v282 = v333;
    *v281 = v341;
    v281[1] = (uint64_t)v282;
    v283 = (void (**)(char *, uint64_t))((char *)v274 + v273[9]);
    v284 = (void (*)(char *, uint64_t))v334;
    *v283 = v342;
    v283[1] = v284;
    *(_QWORD *)((char *)v274 + v273[10]) = v330;
    *(_QWORD *)((char *)v274 + v273[11]) = v332;
    *(_QWORD *)((char *)v274 + v273[12]) = v343;
    v285 = (_QWORD *)((char *)v274 + v273[13]);
    v286 = v338;
    *v285 = v339;
    v285[1] = v286;
    *((_BYTE *)v274 + v273[14]) = v335 & 1;
    *(_QWORD *)((char *)v274 + v273[15]) = v314;
    v287 = (_QWORD *)((char *)v274 + v273[16]);
    v288 = v328;
    *v287 = v329;
    v287[1] = v288;
    *(_QWORD *)((char *)v274 + v273[17]) = v313;
    *(_QWORD *)((char *)v274 + v273[18]) = v304;
    v289 = (_QWORD *)((char *)v274 + v273[19]);
    *v289 = v269;
    v289[1] = v271;
    *(_QWORD *)((char *)v274 + v273[20]) = v155;
    *(_QWORD *)((char *)v274 + v273[21]) = v315;
    *((_BYTE *)v274 + v273[22]) = v348 & 1;
    *((_BYTE *)v274 + v273[23]) = v266 & 1;
    v290 = (char *)v274 + v273[25];
    *v290 = (_BYTE)v267;
    v290[1] = BYTE1(v267) & 1;
    sub_1000126B0(v276, type metadata accessor for ProductInfoState);
    sub_1000126B0(v272, type metadata accessor for OwnedBeaconRecord);
    v291 = v336;
    v292 = (void (*)(char *, uint64_t))v346;
    v346(v323, v336);
    v292(v324, v291);
    sub_1000126B0((uint64_t)v320, type metadata accessor for BeaconNamingRecord);
    v202 = v318;
    sub_1000126EC((uint64_t)v274, v318, type metadata accessor for OwnedBeaconState);
    v203 = type metadata accessor for BeaconState(0);
    v204 = v202;
    v205 = v203;
    v206 = 0;
    goto LABEL_41;
  }
  v159 = v302;
  v160 = (int *)v303;
  if (swift_dynamicCast(v302, &v355, v99, v303, 0))
  {
    v161 = (uint64_t)v159;
    v162 = v297;
    sub_1000126EC(v161, v297, type metadata accessor for SharedBeaconRecord);
    ((void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))v347)[2](v346, v162 + v160[6], v348);
    v163 = v160[8];
    v164 = v162 + v160[7];
    v165 = *(char **)(v164 + 16);
    v344 = *(_QWORD *)(v164 + 8);
    v326 = v165;
    v166 = *(_QWORD **)(v162 + v163 + 8);
    v345 = *(_QWORD *)(v162 + v163);
    v327 = v166;
    v167 = v312[7];
    v168 = (char **)((char *)v320 + v312[8]);
    v169 = v168[1];
    v333 = *v168;
    v170 = v160[10];
    v171 = v162 + v160[9];
    v172 = *(_QWORD *)(v171 + 8);
    v339 = *(_QWORD **)v171;
    v328 = v172;
    v173 = v160[12];
    v340 = *(_QWORD *)(v162 + v160[11]);
    v341 = *(_QWORD *)(v162 + v173);
    LODWORD(v342) = *(unsigned __int8 *)(v162 + v160[13]);
    v174 = *(_QWORD *)(v162 + v170 + 8);
    v338 = *(char **)(v162 + v170);
    v343 = *(_QWORD *)((char *)v320 + v167);
    v175 = *(_BYTE *)(v162 + v160[16]);
    swift_bridgeObjectRetain(v165);
    swift_bridgeObjectRetain(v166);
    swift_bridgeObjectRetain(v169);
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRetain(v174);
    sub_100690C6C(v175);
    v331 = v176;
    v330 = v177;
    v329 = *(_QWORD *)(v162 + v160[17]);
    v178 = (void *)objc_opt_self(NSISO8601DateFormatter);
    v179.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v315 = v98;
    v180 = v179.super.isa;
    v181 = v334;
    static TimeZone.gmt.getter();
    v182 = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v332 + 8))(v181, v82);
    v183 = objc_msgSend(v178, "stringFromDate:timeZone:formatOptions:", v180, v182, 1907);

    v184 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
    v186 = v185;

    v187 = (int *)v298;
    v188 = (uint64_t)v299;
    sub_10000F9B8(v162 + v160[19], (uint64_t)&v299[*(int *)(v298 + 76)], &qword_1010ED860);
    strcpy((char *)v188, "SharedBeacon");
    *(_BYTE *)(v188 + 13) = 0;
    *(_WORD *)(v188 + 14) = -5120;
    v347[4](v188 + v187[5], (uint64_t)v346, v348);
    v189 = (_QWORD *)(v188 + v187[6]);
    v190 = v326;
    *v189 = v344;
    v189[1] = v190;
    v191 = (uint64_t *)(v188 + v187[7]);
    v192 = v327;
    *v191 = v345;
    v191[1] = (uint64_t)v192;
    v193 = (_QWORD *)(v188 + v187[8]);
    *v193 = v333;
    v193[1] = v169;
    v194 = (_QWORD *)(v188 + v187[9]);
    v195 = v328;
    *v194 = v339;
    v194[1] = v195;
    v196 = (_QWORD *)(v188 + v187[10]);
    *v196 = v338;
    v196[1] = v174;
    *(_QWORD *)(v188 + v187[11]) = v340;
    *(_QWORD *)(v188 + v187[12]) = v341;
    *(_BYTE *)(v188 + v187[13]) = (_BYTE)v342;
    *(_QWORD *)(v188 + v187[14]) = v343;
    v197 = (_QWORD *)(v188 + v187[15]);
    v198 = v330;
    *v197 = v331;
    v197[1] = v198;
    *(_QWORD *)(v188 + v187[16]) = v329;
    v199 = (uint64_t *)(v188 + v187[17]);
    *v199 = v184;
    v199[1] = v186;
    *(_QWORD *)(v188 + v187[18]) = v315;
    sub_1000126B0(v162, type metadata accessor for SharedBeaconRecord);
    v200 = *(void (**)(char *, uint64_t))(v335 + 8);
    v201 = v336;
    v200(v323, v336);
    v200(v324, v201);
    sub_1000126B0((uint64_t)v320, type metadata accessor for BeaconNamingRecord);
    v202 = v318;
    sub_1000126EC(v188, v318, type metadata accessor for SharedBeaconState);
    v203 = type metadata accessor for BeaconState(0);
    v204 = v202;
    v205 = v203;
    v206 = 1;
LABEL_41:
    swift_storeEnumTagMultiPayload(v204, v205, v206);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v203 - 8) + 56))(v202, 0, 1, v203);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v355);
  }
  swift_bridgeObjectRelease();
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v207 = type metadata accessor for Logger(0);
  sub_10001A9E8(v207, (uint64_t)qword_1011B77E8);
  v208 = sub_100030784((uint64_t)v92, (uint64_t)&v354);
  v209 = Logger.logObject.getter(v208);
  v210 = static os_log_type_t.error.getter(v209);
  if (os_log_type_enabled(v209, v210))
  {
    v211 = (uint8_t *)swift_slowAlloc(12, -1);
    v212 = swift_slowAlloc(32, -1);
    v353 = v212;
    *(_DWORD *)v211 = 136315138;
    sub_100030784((uint64_t)&v354, (uint64_t)&v351);
    v213 = String.init<A>(describing:)(&v351, v99);
    v351 = sub_100016940(v213, v214, &v353);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v351, v352, v211 + 4, v211 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v354);
    _os_log_impl((void *)&_mh_execute_header, v209, v210, "Unhandled beacon type: %s", v211, 0xCu);
    swift_arrayDestroy(v212, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v212, -1, -1);
    swift_slowDealloc(v211, -1, -1);

  }
  else
  {

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v354);
  }
  v293 = *(void (**)(char *, uint64_t))(v87 + 8);
  v294 = v336;
  v293(v323, v336);
  v293(v324, v294);
  sub_1000126B0((uint64_t)v320, type metadata accessor for BeaconNamingRecord);
  v295 = type metadata accessor for BeaconState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v295 - 8) + 56))(v318, 1, 1, v295);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v355);
}

uint64_t sub_1006D489C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  v45 = a2;
  v3 = type metadata accessor for BeaconState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v50 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011046F8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v44 - v10;
  v49 = type metadata accessor for UUID(0);
  v53 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = a1;
  v14 = sub_10081CEB8();
  v15 = sub_10001BAFC((uint64_t)v14);
  swift_bridgeObjectRelease();
  v16 = sub_10001AFC0();
  v17 = sub_10001BAD8((uint64_t)v16);
  swift_bridgeObjectRelease();
  v54[0] = v15;
  sub_10001BB84((uint64_t)v17);
  v18 = *(_QWORD *)(v54[0] + 16);
  if (!v18)
  {
    result = swift_bridgeObjectRelease();
    v19 = _swiftEmptyDictionarySingleton;
LABEL_25:
    *v45 = v19;
    return result;
  }
  v48 = v11;
  v19 = _swiftEmptyDictionarySingleton;
  v44 = v54[0];
  v20 = v54[0] + 32;
  v52 = v13;
  v46 = v3;
  v47 = v9;
  while (1)
  {
    sub_100030784(v20, (uint64_t)v54);
    v23 = v55;
    v24 = v56;
    sub_10001AA44(v54, v55);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v25 = (uint64_t)v48;
    sub_1006D4D44((uint64_t)v54, (uint64_t)v48);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v25, 1, v3) == 1)
    {
      sub_100004048(v25, &qword_1011046F8);
      swift_bridgeObjectRetain(v19);
      v26 = sub_100003FB0((uint64_t)v13);
      v28 = v27;
      swift_bridgeObjectRelease();
      if ((v28 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        v57 = v19;
        v21 = (uint64_t)v47;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100A9F90C();
          v19 = v57;
        }
        v22 = *(void (**)(unint64_t, uint64_t))(v53 + 8);
        v22(v19[6] + *(_QWORD *)(v53 + 72) * v26, v49);
        v19 = v57;
        sub_1000126EC(v57[7] + *(_QWORD *)(v4 + 72) * v26, v21, type metadata accessor for BeaconState);
        sub_100107E5C(v26, (uint64_t)v19);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v21, 0, 1, v3);
      }
      else
      {
        v21 = (uint64_t)v47;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v47, 1, 1, v3);
        v22 = *(void (**)(unint64_t, uint64_t))(v53 + 8);
      }
      v13 = v52;
      ((void (*)(char *))v22)(v52);
      sub_100004048(v21, &qword_1011046F8);
      goto LABEL_5;
    }
    sub_1000126EC(v25, v50, type metadata accessor for BeaconState);
    v30 = swift_isUniquelyReferenced_nonNull_native(v19);
    v57 = v19;
    v32 = sub_100003FB0((uint64_t)v13);
    v33 = v19[2];
    v34 = (v31 & 1) == 0;
    v35 = v33 + v34;
    if (__OFADD__(v33, v34))
      break;
    v36 = v31;
    if (v19[3] >= v35)
    {
      if ((v30 & 1) != 0)
      {
        v19 = v57;
        if ((v31 & 1) == 0)
          goto LABEL_20;
      }
      else
      {
        sub_100A9F90C();
        v19 = v57;
        if ((v36 & 1) == 0)
          goto LABEL_20;
      }
    }
    else
    {
      sub_100A90EF4(v35, v30);
      v37 = sub_100003FB0((uint64_t)v52);
      if ((v36 & 1) != (v38 & 1))
        goto LABEL_28;
      v32 = v37;
      v19 = v57;
      if ((v36 & 1) == 0)
      {
LABEL_20:
        v19[(v32 >> 6) + 8] |= 1 << v32;
        v13 = v52;
        v39 = v49;
        (*(void (**)(unint64_t, char *, uint64_t))(v53 + 16))(v19[6] + *(_QWORD *)(v53 + 72) * v32, v52, v49);
        sub_1000126EC(v50, v19[7] + *(_QWORD *)(v4 + 72) * v32, type metadata accessor for BeaconState);
        v40 = v19[2];
        v41 = __OFADD__(v40, 1);
        v42 = v40 + 1;
        if (v41)
          goto LABEL_27;
        v19[2] = v42;
        v19 = v57;
        goto LABEL_22;
      }
    }
    sub_1006D7B28(v50, v19[7] + *(_QWORD *)(v4 + 72) * v32);
    v39 = v49;
    v13 = v52;
LABEL_22:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v39);
    v3 = v46;
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
    v20 += 40;
    if (!--v18)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v49);
  __break(1u);
  return result;
}

uint64_t sub_1006D4D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[5];
  _QWORD v55[6];

  v4 = type metadata accessor for SharedBeaconGroup(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v47 - v8;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v10);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v47 - v17;
  sub_100030784(a1, (uint64_t)v55);
  v19 = sub_10001A9A8(&qword_101108FB0);
  if (swift_dynamicCast(v18, v55, v19, v13, 0))
  {
    v20 = sub_1000126EC((uint64_t)v18, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    v21 = MACAddress.description.getter(v20);
    v49 = v22;
    v50 = v21;
    v23 = v13[9];
    v48 = v16[v13[8]];
    v24 = *(_QWORD *)&v16[v23 + 8];
    v47 = *(_QWORD *)&v16[v23];
    v25 = *(_QWORD *)&v16[v13[10]];
    type metadata accessor for OwnedBeaconGroup.PairingState(0);
    sub_1006D7B6C();
    sub_100059BCC();
    sub_100006204(&qword_101104708, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B038);
    swift_bridgeObjectRetain(v24);
    v26 = swift_bridgeObjectRetain(v25);
    v27 = Dictionary<>.stringRepresentation.getter(v26);
    swift_bridgeObjectRelease();
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v28 = qword_1011B7160;
    v29 = (uint64_t)&v16[v13[6]];
    v30 = objc_autoreleasePoolPush();
    sub_10058DC14(v28, v29, 0, 0, v54);
    objc_autoreleasePoolPop(v30);
    LOBYTE(v29) = sub_100372A20((uint64_t)v12, v54[0]);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010EA690);
    sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    *(_QWORD *)a2 = 0xD000000000000010;
    *(_QWORD *)(a2 + 8) = 0x8000000100EE1260;
    v31 = v49;
    *(_QWORD *)(a2 + 16) = v50;
    *(_QWORD *)(a2 + 24) = v31;
    *(_BYTE *)(a2 + 32) = v48;
    *(_QWORD *)(a2 + 40) = v47;
    *(_QWORD *)(a2 + 48) = v24;
    *(_QWORD *)(a2 + 56) = v27;
    *(_BYTE *)(a2 + 64) = v29 & 1;
    v32 = type metadata accessor for BeaconState(0);
    v33 = a2;
    v34 = v32;
    v35 = 2;
    goto LABEL_7;
  }
  if (swift_dynamicCast(v9, v55, v19, v4, 0))
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v7, type metadata accessor for SharedBeaconGroup);
    v36 = *(_QWORD *)&v7[*(int *)(v4 + 20)];
    swift_bridgeObjectRetain(v36);
    sub_1000126B0((uint64_t)v7, type metadata accessor for SharedBeaconGroup);
    *(_QWORD *)a2 = 0xD000000000000011;
    *(_QWORD *)(a2 + 8) = 0x8000000100EE1240;
    *(_QWORD *)(a2 + 16) = v36;
    v32 = type metadata accessor for BeaconState(0);
    v33 = a2;
    v34 = v32;
    v35 = 3;
LABEL_7:
    swift_storeEnumTagMultiPayload(v33, v34, v35);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(a2, 0, 1, v32);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  }
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v37 = type metadata accessor for Logger(0);
  sub_10001A9E8(v37, (uint64_t)qword_1011B77E8);
  v38 = sub_100030784(a1, (uint64_t)v54);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v53 = v42;
    *(_DWORD *)v41 = 136315138;
    sub_100030784((uint64_t)v54, (uint64_t)&v51);
    v43 = String.init<A>(describing:)(&v51, v19);
    v51 = sub_100016940(v43, v44, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unhandled beacon group type: %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  }

  v45 = type metadata accessor for BeaconState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(a2, 1, 1, v45);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
}

uint64_t sub_1006D52A0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t result;
  _QWORD v40[2];
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for SafeLocation(0);
  v8 = *((_QWORD *)v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001E350();
  v12 = v11[2];
  if (!v12)
  {
    result = swift_bridgeObjectRelease();
    v17 = _swiftEmptyDictionarySingleton;
LABEL_18:
    *a1 = v17;
    return result;
  }
  v41 = a1;
  v42 = v1;
  v13 = v7[5];
  v47 = v7[6];
  v48 = v10;
  v46 = &v10[v13];
  v14 = v7[13];
  v44 = v7[12];
  v45 = v14;
  v15 = *(unsigned __int8 *)(v8 + 80);
  v40[1] = v11;
  v16 = (uint64_t)v11 + ((v15 + 32) & ~v15);
  v43 = *(_QWORD *)(v8 + 72);
  v17 = _swiftEmptyDictionarySingleton;
  v49 = v4;
  while (1)
  {
    v50 = v12;
    v20 = (uint64_t)v48;
    sub_10005972C(v16, (uint64_t)v48, type metadata accessor for SafeLocation);
    v21 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v22 = v3;
    v21(v6, v46, v3);
    v23 = *(_QWORD *)(v20 + v45);
    v51 = *(unsigned __int8 *)(v20 + v44);
    v52 = *(unsigned __int8 *)(v20 + v47);
    swift_bridgeObjectRetain(v23);
    sub_1000126B0(v20, type metadata accessor for SafeLocation);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v53 = v17;
    v25 = (uint64_t)v6;
    v27 = sub_100003FB0((uint64_t)v6);
    v28 = v17[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v17[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v17 = v53;
        if ((v26 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_100A9F920();
        v17 = v53;
        if ((v31 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_100A90F08(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_100003FB0(v25);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_21;
      v27 = v32;
      v17 = v53;
      if ((v31 & 1) != 0)
      {
LABEL_3:
        v18 = v17[7] + 40 * v27;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        strcpy((char *)v18, "SafeLocation");
        *(_BYTE *)(v18 + 13) = 0;
        *(_WORD *)(v18 + 14) = -5120;
        *(_QWORD *)(v18 + 16) = v23;
        v19 = v52;
        *(_QWORD *)(v18 + 24) = v51;
        *(_QWORD *)(v18 + 32) = v19;
        v3 = v22;
        goto LABEL_4;
      }
    }
    v17[(v27 >> 6) + 8] |= 1 << v27;
    v3 = v22;
    v21((char *)(v17[6] + *(_QWORD *)(v49 + 72) * v27), (char *)v25, v22);
    v34 = v17[7] + 40 * v27;
    strcpy((char *)v34, "SafeLocation");
    *(_BYTE *)(v34 + 13) = 0;
    *(_WORD *)(v34 + 14) = -5120;
    *(_QWORD *)(v34 + 16) = v23;
    v35 = v52;
    *(_QWORD *)(v34 + 24) = v51;
    *(_QWORD *)(v34 + 32) = v35;
    v36 = v17[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_20;
    v17[2] = v38;
LABEL_4:
    swift_bridgeObjectRelease();
    v4 = v49;
    v6 = (char *)v25;
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v25, v3);
    v16 += v43;
    v12 = v50 - 1;
    if (v50 == 1)
    {
      result = swift_bridgeObjectRelease();
      a1 = v41;
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_20:
  __break(1u);
LABEL_21:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

void sub_1006D560C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[5];

  v2 = v1;
  v12 = type metadata accessor for SharedBeaconState(0);
  __chkstk_darwin(v12);
  v4 = type metadata accessor for OwnedBeaconState(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for BeaconState(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v9);
  dispatch thunk of Encoder.singleValueContainer()(v13, v9, v8);
  sub_10005972C(v2, (uint64_t)v7, type metadata accessor for BeaconState);
  v10 = (char *)sub_1006D5740 + 4 * byte_100E497E0[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

uint64_t sub_1006D5740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000126EC(v2, v0, type metadata accessor for OwnedBeaconState);
  v4 = *(_QWORD *)(v3 - 96);
  v5 = *(_QWORD *)(v3 - 88);
  sub_10009F5D0(v3 - 120, v4);
  v6 = sub_100006204(&qword_101104B90, type metadata accessor for OwnedBeaconState, (uint64_t)&unk_100E49A5C);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))dispatch thunk of SingleValueEncodingContainer.encode<A>(_:))(v0, v1, v6, v4, v5);
  sub_1000126B0(v0, type metadata accessor for OwnedBeaconState);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v3 - 120));
}

void sub_1006D592C(_QWORD *a1)
{
  sub_1006D560C(a1);
}

uint64_t sub_1006D5940(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104B98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006E7968();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SafeLocationState.CodingKeys, &type metadata for SafeLocationState.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v24, v5);
  if (!v2)
  {
    v23 = v3[2];
    v22 = 1;
    v14 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    v15 = sub_1006E79AC((unint64_t *)&qword_101114210, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v14, v15);
    v16 = v3[3];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v21, v5);
    v17 = v3[4];
    v20 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006D5AE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D5B08 + 4 * byte_100E497E4[*v0]))(1701869940, 0xE400000000000000);
}

unint64_t sub_1006D5B08()
{
  return 0xD000000000000011;
}

uint64_t sub_1006D5B28()
{
  return 0x6C61766F72707061;
}

unint64_t sub_1006D5B4C()
{
  return 0xD000000000000010;
}

uint64_t sub_1006D5B68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006E874C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D5B8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E7968();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D5BB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E7968();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D5BDC(_QWORD *a1)
{
  return sub_1006D5940(a1);
}

uint64_t sub_1006D5C14(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104B10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006E76F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ProductInfoState.CodingKeys, &type metadata for ProductInfoState.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for BeaconProductInfoRecord(0);
  v13 = sub_100006204(&qword_101100CF8, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_100E457A4);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = (uint64_t *)(v3 + *(int *)(type metadata accessor for ProductInfoState(0) + 20));
    v15 = *v14;
    v16 = v14[1];
    v19 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006D5D68()
{
  _BYTE *v0;

  if (*v0)
    return 0x696C696261706163;
  else
    return 0x49746375646F7270;
}

uint64_t sub_1006D5DB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006E890C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D5DD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E76F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D5E00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E76F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D5E28(_QWORD *a1)
{
  return sub_1006D5C14(a1);
}

uint64_t sub_1006D5E3C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D5E68 + 4 * byte_100E497E8[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1006D5E68()
{
  return 0x6449656C62617473;
}

uint64_t sub_1006D5E8C()
{
  return 0x44676E6972696170;
}

uint64_t sub_1006D5EAC()
{
  return 1701667182;
}

uint64_t sub_1006D5EB8()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1006D5ECC()
{
  return 0x65566D6574737973;
}

uint64_t sub_1006D5EF0()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1006D5F08()
{
  return 0x49746375646F7270;
}

void sub_1006D6064()
{
  JUMPOUT(0x1006D607CLL);
}

uint64_t sub_1006D6088(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned int v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104B20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006E7734();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconState.CodingKeys, &type metadata for OwnedBeaconState.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v62) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v62, v5);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for OwnedBeaconState(0);
    v15 = (char *)v3 + v14[5];
    LOBYTE(v62) = 1;
    v16 = type metadata accessor for StableIdentifier(0);
    v17 = sub_100006204((unint64_t *)&unk_10110EEF0, type metadata accessor for StableIdentifier, (uint64_t)&unk_100E6AF40);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v62, v5, v16, v17);
    v18 = (uint64_t *)((char *)v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v62) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v62, v5);
    v21 = (uint64_t *)((char *)v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v62) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v62, v5);
    v24 = (uint64_t *)((char *)v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v62) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v62, v5);
    v27 = (uint64_t *)((char *)v3 + v14[9]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v62) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v62, v5);
    v30 = *(uint64_t *)((char *)v3 + v14[10]);
    LOBYTE(v62) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v62, v5);
    v31 = *(uint64_t *)((char *)v3 + v14[11]);
    LOBYTE(v62) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v31, &v62, v5);
    v32 = *(uint64_t *)((char *)v3 + v14[12]);
    LOBYTE(v62) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v32, &v62, v5);
    v33 = (uint64_t *)((char *)v3 + v14[13]);
    v34 = *v33;
    v35 = v33[1];
    LOBYTE(v62) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v34, v35, &v62, v5);
    v36 = *((unsigned __int8 *)v3 + v14[14]);
    LOBYTE(v62) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v36, &v62, v5);
    v37 = *(uint64_t *)((char *)v3 + v14[15]);
    LOBYTE(v62) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v37, &v62, v5);
    v38 = (uint64_t *)((char *)v3 + v14[16]);
    v39 = *v38;
    v40 = v38[1];
    LOBYTE(v62) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v39, v40, &v62, v5);
    v41 = *(uint64_t *)((char *)v3 + v14[17]);
    LOBYTE(v62) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v41, &v62, v5);
    v42 = *(uint64_t *)((char *)v3 + v14[18]);
    LOBYTE(v62) = 14;
    KeyedEncodingContainer.encode(_:forKey:)(v42, &v62, v5);
    v43 = (uint64_t *)((char *)v3 + v14[19]);
    v44 = *v43;
    v45 = v43[1];
    LOBYTE(v62) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v44, v45, &v62, v5);
    v62 = *(uint64_t *)((char *)v3 + v14[20]);
    HIBYTE(v61) = 16;
    v46 = sub_10001A9A8(&qword_101104B30);
    v47 = sub_1006E7778();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, (char *)&v61 + 7, v5, v46, v47);
    v62 = *(uint64_t *)((char *)v3 + v14[21]);
    HIBYTE(v61) = 17;
    v48 = sub_10001A9A8(&qword_101104B48);
    v49 = sub_1006E77F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v62, (char *)&v61 + 7, v5, v48, v49);
    v50 = *((unsigned __int8 *)v3 + v14[22]);
    LOBYTE(v62) = 18;
    KeyedEncodingContainer.encode(_:forKey:)(v50, &v62, v5);
    v51 = *((unsigned __int8 *)v3 + v14[23]);
    LOBYTE(v62) = 19;
    KeyedEncodingContainer.encode(_:forKey:)(v51, &v62, v5);
    v52 = (char *)v3 + v14[24];
    LOBYTE(v62) = 20;
    v53 = type metadata accessor for UUID(0);
    v54 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v52, &v62, v5, v53, v54);
    v55 = (unsigned __int8 *)v3 + v14[25];
    v56 = *v55;
    LODWORD(v55) = v55[1];
    LOBYTE(v62) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v56 | ((_DWORD)v55 << 8), &v62, v5);
    v57 = (char *)v3 + v14[26];
    LOBYTE(v62) = 22;
    v58 = type metadata accessor for ProductInfoState(0);
    v59 = sub_100006204(&qword_101104B60, type metadata accessor for ProductInfoState, (uint64_t)&unk_100E49A84);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v57, &v62, v5, v58, v59);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006D6654(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D6690 + 4 * byte_100E497FF[a1]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1006D6690()
{
  return 0x7461446572616873;
}

uint64_t sub_1006D6738(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104B00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006E76AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareState.CodingKeys, &type metadata for ShareState.CodingKeys, v11, v9, v10);
  v39 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v39, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for ShareState(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    v38 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v38, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    v37 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v37, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v36 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v36, v5);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    v35 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v35, v5);
    v27 = *(_QWORD *)(v3 + v14[9]);
    v34 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v34, v5);
    v28 = (uint64_t *)(v3 + v14[10]);
    v29 = *v28;
    v30 = v28[1];
    v33 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v29, v30, &v33, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006D697C()
{
  unsigned __int8 *v0;

  return sub_1006D5E3C(*v0);
}

uint64_t sub_1006D6984@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006E8A2C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1006D69A8(_BYTE *a1@<X8>)
{
  *a1 = 23;
}

uint64_t sub_1006D69B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E7734();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D69DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E7734();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D6A04(_QWORD *a1)
{
  return sub_1006D6088(a1);
}

uint64_t sub_1006D6A18()
{
  unsigned __int8 *v0;

  return sub_1006D6654(*v0);
}

uint64_t sub_1006D6A20@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006E9350(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D6A44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E76AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D6A6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E76AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D6A94(_QWORD *a1)
{
  return sub_1006D6738(a1);
}

uint64_t sub_1006D6AA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D6AD4 + 4 * byte_100E49806[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1006D6AD4()
{
  return 0x6564496572616873;
}

uint64_t sub_1006D6AF8()
{
  return 0x6E614872656E776FLL;
}

unint64_t sub_1006D6B18()
{
  return 0xD000000000000015;
}

uint64_t sub_1006D6B34()
{
  return 1701667182;
}

uint64_t sub_1006D6B40()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1006D6B54()
{
  return 0x65566D6574737973;
}

uint64_t sub_1006D6B78()
{
  return 0x6449726F646E6576;
}

uint64_t sub_1006D6B90()
{
  return 0x49746375646F7270;
}

uint64_t sub_1006D6BB0()
{
  return 0x6465747065636361;
}

uint64_t sub_1006D6BC8()
{
  return 1701605234;
}

uint64_t sub_1006D6BD4()
{
  return 0x7079546572616873;
}

uint64_t sub_1006D6C28()
{
  return 0x746176726573626FLL;
}

uint64_t sub_1006D6C48()
{
  return 0x644970756F7267;
}

uint64_t sub_1006D6C60(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104B68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006E789C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharedBeaconState.CodingKeys, &type metadata for SharedBeaconState.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v50) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v50, v5);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for SharedBeaconState(0);
    v15 = (char *)v3 + v14[5];
    LOBYTE(v50) = 1;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v50, v5, v16, v17);
    v18 = (uint64_t *)((char *)v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v50) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v50, v5);
    v21 = (uint64_t *)((char *)v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v50) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v50, v5);
    v24 = (uint64_t *)((char *)v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v50) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v25, v26, &v50, v5);
    v27 = (uint64_t *)((char *)v3 + v14[9]);
    v28 = *v27;
    v29 = v27[1];
    LOBYTE(v50) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v28, v29, &v50, v5);
    v30 = (uint64_t *)((char *)v3 + v14[10]);
    v31 = *v30;
    v32 = v30[1];
    LOBYTE(v50) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v31, v32, &v50, v5);
    v33 = *(uint64_t *)((char *)v3 + v14[11]);
    LOBYTE(v50) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v33, &v50, v5);
    v34 = *(uint64_t *)((char *)v3 + v14[12]);
    LOBYTE(v50) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v34, &v50, v5);
    v35 = *((unsigned __int8 *)v3 + v14[13]);
    LOBYTE(v50) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v35, &v50, v5);
    v36 = *(uint64_t *)((char *)v3 + v14[14]);
    LOBYTE(v50) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v36, &v50, v5);
    v37 = (uint64_t *)((char *)v3 + v14[15]);
    v38 = *v37;
    v39 = v37[1];
    LOBYTE(v50) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v38, v39, &v50, v5);
    v40 = *(uint64_t *)((char *)v3 + v14[16]);
    LOBYTE(v50) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v40, &v50, v5);
    v41 = (uint64_t *)((char *)v3 + v14[17]);
    v42 = *v41;
    v43 = v41[1];
    LOBYTE(v50) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v42, v43, &v50, v5);
    v50 = *(uint64_t *)((char *)v3 + v14[18]);
    v49 = 14;
    v44 = sub_10001A9A8(&qword_101104B48);
    v45 = sub_1006E77F4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v50, &v49, v5, v44, v45);
    v46 = (char *)v3 + v14[19];
    LOBYTE(v50) = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v46, &v50, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006D7074()
{
  unsigned __int8 *v0;

  return sub_1006D6AA8(*v0);
}

uint64_t sub_1006D707C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006E9658(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D70A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E789C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D70C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E789C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D70F0(_QWORD *a1)
{
  return sub_1006D6C60(a1);
}

uint64_t sub_1006D7104(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1006D7130 + 4 * byte_100E49816[a1]))(1701869940, 0xE400000000000000);
}

uint64_t sub_1006D7130()
{
  return 0x657264644163616DLL;
}

unint64_t sub_1006D714C()
{
  return 0xD000000000000016;
}

uint64_t sub_1006D716C()
{
  return 1701667182;
}

uint64_t sub_1006D7178()
{
  return 0x614D6E6F63616562;
}

unint64_t sub_1006D7194()
{
  return 0xD000000000000012;
}

uint64_t sub_1006D71B0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101104C68);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1006EA2F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnedBeaconGroupState.CodingKeys, &type metadata for OwnedBeaconGroupState.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v30 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v30, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v29 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v29, v5);
    v16 = *((unsigned __int8 *)v3 + 32);
    v28 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v28, v5);
    v17 = v3[5];
    v18 = v3[6];
    v27 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v27, v5);
    v26 = v3[7];
    v25 = 4;
    v19 = sub_10001A9A8(&qword_101103CB8);
    v20 = sub_1006EA33C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v19, v20);
    v21 = *((unsigned __int8 *)v3 + 64);
    v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v24, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1006D7388()
{
  unsigned __int8 *v0;

  return sub_1006D7104(*v0);
}

uint64_t sub_1006D7390@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006E9D30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D73B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006EA2F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D73DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006EA2F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D7404(_QWORD *a1)
{
  return sub_1006D71B0(a1);
}

uint64_t sub_1006D7444(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_10001A9A8(&qword_101104C50);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1006EA2B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SharedBeaconGroupState.CodingKeys, &type metadata for SharedBeaconGroupState.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
    v16 = sub_1006E79AC(&qword_101104C60, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1006D75A8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v20 = a3;
  v8 = sub_10001A9A8(&qword_101104AB0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1006E74C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconStateCapture.CodingKeys, &type metadata for BeaconStateCapture.CodingKeys, v14, v12, v13);
  v22 = a2;
  v21 = 0;
  v15 = sub_10001A9A8(&qword_101104AC0);
  v16 = sub_1006E7504();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v8, v15, v16);
  if (!v4)
  {
    v22 = v20;
    v21 = 1;
    v17 = sub_10001A9A8(&qword_101104AD8);
    v18 = sub_1006E75A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v8, v17, v18);
    v22 = a4;
    v21 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1006D7748(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;

  v18 = a4;
  v8 = sub_10001A9A8(&qword_101104AF0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1006E7668();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ObservationState.CodingKeys, &type metadata for ObservationState.CodingKeys, v14, v12, v13);
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    v19 = v18;
    v20 = 1;
    v15 = sub_10001A9A8(&qword_1011063B0);
    v16 = sub_1003792A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1006D7894()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 1701869940;
}

uint64_t sub_1006D78CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006E9F9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D78F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006EA2B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D7918(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006EA2B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D7940(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1006D7444(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1006D795C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0x70756F72476C6C61;
  if (*v0)
    return v1;
  else
    return 0x6F636165426C6C61;
}

uint64_t sub_1006D79C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006EA078(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D79E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E74C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D7A10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E74C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D7A38(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1006D75A8(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1006D7A54()
{
  _BYTE *v0;

  if (*v0)
    return 0x7365746164;
  else
    return 1701869940;
}

uint64_t sub_1006D7A84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1006EA1DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1006D7AA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E7668();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1006D7AD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1006E7668();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1006D7AF8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1006D7748(a1, *v1, v1[1], v1[2]);
}

uint64_t type metadata accessor for BeaconState(uint64_t a1)
{
  return sub_10001B630(a1, qword_101104A78, (uint64_t)&nominal type descriptor for BeaconState);
}

uint64_t sub_1006D7B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1006D7B6C()
{
  unint64_t result;

  result = qword_101104700;
  if (!qword_101104700)
  {
    result = swift_getWitnessTable("Id#", &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_101104700);
  }
  return result;
}

uint64_t type metadata accessor for SharedBeaconState(uint64_t a1)
{
  return sub_10001B630(a1, qword_101104998, (uint64_t)&nominal type descriptor for SharedBeaconState);
}

uint64_t type metadata accessor for OwnedBeaconState(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011048B0, (uint64_t)&nominal type descriptor for OwnedBeaconState);
}

uint64_t type metadata accessor for ProductInfoState(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_101104818, (uint64_t)&nominal type descriptor for ProductInfoState);
}

uint64_t type metadata accessor for ShareState(uint64_t a1)
{
  return sub_10001B630(a1, qword_101104770, (uint64_t)&nominal type descriptor for ShareState);
}

Swift::Int sub_1006D7C00(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  Swift::Int result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  char *v37;
  unint64_t v38;
  Swift::Int v39;
  Swift::Int v40;
  uint64_t v41;
  Swift::Int v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  void (*v56)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v57;
  _BYTE *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  Swift::Int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  void (*v74)(_BYTE *, uint64_t, uint64_t);
  uint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  _BYTE *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  Swift::Int v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  Swift::Int v93;
  uint64_t v94;
  uint64_t v95;
  Swift::Int v96;
  Swift::Int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  uint64_t v112;
  void (*v113)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v114;
  _BYTE *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  char *v127;
  Swift::Int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  unint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  char v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  unint64_t v181;
  _QWORD *v182;
  Swift::Int v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  uint64_t v188;
  Swift::Int v189;
  char *v190;
  uint64_t v191;
  Swift::Int v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(_BYTE *, uint64_t, uint64_t);
  uint64_t v202;
  Swift::Int v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  Swift::Int v207;
  Swift::Int v208;
  uint64_t v209;
  uint64_t v210;
  _BYTE *v211;
  _BYTE *v212;
  uint64_t *v213;

  v2 = v1;
  v202 = sub_10001A9A8(&qword_101104710);
  v4 = __chkstk_darwin(v202);
  v212 = (char *)&v182 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v211 = (char *)&v182 - v7;
  v8 = __chkstk_darwin(v6);
  v196 = (char *)&v182 - v9;
  v10 = __chkstk_darwin(v8);
  v195 = (char *)&v182 - v11;
  v12 = __chkstk_darwin(v10);
  v187 = (char *)&v182 - v13;
  __chkstk_darwin(v12);
  v186 = (char *)&v182 - v14;
  v204 = type metadata accessor for BeaconObservation(0);
  v198 = *(_QWORD *)(v204 - 8);
  v15 = __chkstk_darwin(v204);
  v191 = (uint64_t)&v182 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v205 = (uint64_t)&v182 - v18;
  v19 = __chkstk_darwin(v17);
  v210 = (uint64_t)&v182 - v20;
  v21 = __chkstk_darwin(v19);
  v209 = (uint64_t)&v182 - v22;
  v23 = __chkstk_darwin(v21);
  v194 = (uint64_t)&v182 - v24;
  v25 = __chkstk_darwin(v23);
  v193 = (uint64_t)&v182 - v26;
  v27 = __chkstk_darwin(v25);
  v185 = (uint64_t)&v182 - v28;
  __chkstk_darwin(v27);
  v184 = (uint64_t)&v182 - v29;
  v213 = a1;
  v30 = a1[1];
  result = _minimumMergeRunLength(_:)(v30);
  if (result >= v30)
  {
    if (v30 < 0)
      goto LABEL_147;
    if (v30)
      return sub_1006D9100(0, v30, 1, v213);
    return result;
  }
  if (v30 >= 0)
    v32 = v30;
  else
    v32 = v30 + 1;
  if (v30 < -1)
    goto LABEL_155;
  v183 = result;
  if (v30 < 2)
  {
    v197 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v198 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v198 + 80));
    v182 = _swiftEmptyArrayStorage;
    if (v30 != 1)
    {
      v38 = _swiftEmptyArrayStorage[2];
      v37 = (char *)_swiftEmptyArrayStorage;
LABEL_113:
      if (v38 >= 2)
      {
        v175 = *v213;
        do
        {
          v176 = v38 - 2;
          if (v38 < 2)
            goto LABEL_142;
          if (!v175)
            goto LABEL_154;
          v177 = v37;
          v178 = *(_QWORD *)&v37[16 * v176 + 32];
          v179 = *(_QWORD *)&v37[16 * v38 + 24];
          sub_1006D9478(v175 + *(_QWORD *)(v198 + 72) * v178, v175 + *(_QWORD *)(v198 + 72) * *(_QWORD *)&v37[16 * v38 + 16], v175 + *(_QWORD *)(v198 + 72) * v179, v197);
          if (v2)
            break;
          if (v179 < v178)
            goto LABEL_143;
          if ((swift_isUniquelyReferenced_nonNull_native(v177) & 1) == 0)
            v177 = sub_10088F088((uint64_t)v177);
          if (v176 >= *((_QWORD *)v177 + 2))
            goto LABEL_144;
          v180 = &v177[16 * v176 + 32];
          *(_QWORD *)v180 = v178;
          *((_QWORD *)v180 + 1) = v179;
          v181 = *((_QWORD *)v177 + 2);
          if (v38 > v181)
            goto LABEL_145;
          memmove(&v177[16 * v38 + 16], &v177[16 * v38 + 32], 16 * (v181 - v38));
          v37 = v177;
          *((_QWORD *)v177 + 2) = v181 - 1;
          v38 = v181 - 1;
        }
        while (v181 > 2);
      }
LABEL_124:
      swift_bridgeObjectRelease();
      v182[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v33 = v32 >> 1;
    v34 = static Array._allocateBufferUninitialized(minimumCapacity:)(v32 >> 1, v204);
    *(_QWORD *)(v34 + 16) = v33;
    v35 = *(unsigned __int8 *)(v198 + 80);
    v182 = (_QWORD *)v34;
    v197 = v34 + ((v35 + 32) & ~v35);
  }
  v36 = 0;
  v37 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v39 = v36;
    v40 = v36 + 1;
    v190 = v37;
    v192 = v36;
    if (v36 + 1 >= v30)
    {
      v62 = v36 + 1;
    }
    else
    {
      v207 = v30;
      v41 = *v213;
      v42 = *(_QWORD *)(v198 + 72);
      v43 = v36;
      v44 = v184;
      sub_10005972C(*v213 + v42 * v40, v184, type metadata accessor for BeaconObservation);
      v188 = v41;
      v208 = v42;
      v45 = v41 + v42 * v43;
      v46 = v185;
      sub_10005972C(v45, v185, type metadata accessor for BeaconObservation);
      v48 = *(int *)(v204 + 20);
      v47 = *(int *)(v204 + 24);
      v49 = *(char *)(v44 + v47);
      v50 = v44 + v48;
      v51 = *(char *)(v46 + v47);
      v206 = v46 + v48;
      v52 = v186;
      *v186 = v49;
      v53 = v202;
      v54 = &v52[*(int *)(v202 + 48)];
      v55 = type metadata accessor for Date(0);
      v56 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
      v203 = (Swift::Int)v54;
      v56(v54, v50, v55);
      v57 = v187;
      *v187 = v51;
      v58 = &v57[*(int *)(v53 + 48)];
      v201 = v56;
      v56(v58, v206, v55);
      v59 = qword_100E4A508[v49];
      v60 = qword_100E4A508[v51];
      if (v59 == v60)
      {
        v61 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        LODWORD(v206) = dispatch thunk of static Comparable.< infix(_:_:)(v203, v58, v55, v61);
      }
      else
      {
        LODWORD(v206) = v59 < v60;
      }
      v30 = v207;
      sub_100004048((uint64_t)v187, &qword_101104710);
      sub_100004048((uint64_t)v186, &qword_101104710);
      sub_1000126B0(v185, type metadata accessor for BeaconObservation);
      sub_1000126B0(v184, type metadata accessor for BeaconObservation);
      v39 = v192;
      v62 = v192 + 2;
      if (v192 + 2 < v30)
      {
        v199 = v208 * v40;
        v200 = v55;
        v63 = v188;
        v189 = v208 * v62;
        while (1)
        {
          v203 = v62;
          v64 = v2;
          v65 = v193;
          sub_10005972C(v63 + v189, v193, type metadata accessor for BeaconObservation);
          v66 = v194;
          sub_10005972C(v63 + v199, v194, type metadata accessor for BeaconObservation);
          v68 = *(int *)(v204 + 20);
          v67 = *(int *)(v204 + 24);
          v69 = *(char *)(v65 + v67);
          v70 = v65 + v68;
          v71 = *(char *)(v66 + v67);
          v72 = v66 + v68;
          v73 = v195;
          *v195 = v69;
          v74 = v201;
          v75 = v202;
          v76 = &v73[*(int *)(v202 + 48)];
          v77 = v200;
          v201(v76, v70, v200);
          v78 = v196;
          *v196 = v71;
          v79 = &v78[*(int *)(v75 + 48)];
          v74(v79, v72, v77);
          v80 = qword_100E4A508[v69];
          v81 = qword_100E4A508[v71];
          if (v80 == v81)
          {
            v82 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v83 = dispatch thunk of static Comparable.< infix(_:_:)(v76, v79, v77, v82);
          }
          else
          {
            v83 = v80 < v81;
          }
          sub_100004048((uint64_t)v196, &qword_101104710);
          sub_100004048((uint64_t)v195, &qword_101104710);
          sub_1000126B0(v194, type metadata accessor for BeaconObservation);
          sub_1000126B0(v193, type metadata accessor for BeaconObservation);
          v2 = v64;
          v62 = v203;
          v30 = v207;
          if (((v206 ^ v83) & 1) != 0)
            break;
          v62 = v203 + 1;
          v63 += v208;
          if (v207 == v203 + 1)
          {
            v62 = v207;
            break;
          }
        }
        v39 = v192;
      }
      v37 = v190;
      if ((v206 & 1) != 0)
      {
        if (v62 < v39)
          goto LABEL_148;
        if (v39 < v62)
        {
          v84 = 0;
          v85 = v208 * (v62 - 1);
          v86 = v62 * v208;
          v87 = v39;
          v88 = v39 * v208;
          do
          {
            if (v87 != v62 + v84 - 1)
            {
              v91 = v188;
              if (!v188)
                goto LABEL_153;
              v92 = v188 + v88;
              v206 = v188 + v85;
              sub_1000126EC(v188 + v88, v191, type metadata accessor for BeaconObservation);
              if (v88 < v85 || v92 >= v91 + v86)
              {
                v89 = v91 + v88;
                v90 = v206;
                swift_arrayInitWithTakeFrontToBack(v89, v206, 1, v204);
              }
              else
              {
                v90 = v206;
                if (v88 != v85)
                  swift_arrayInitWithTakeBackToFront(v92, v206);
              }
              sub_1000126EC(v191, v90, type metadata accessor for BeaconObservation);
              v37 = v190;
              v39 = v192;
              v30 = v207;
            }
            ++v87;
            --v84;
            v85 -= v208;
            v86 -= v208;
            v88 += v208;
          }
          while (v87 < v62 + v84);
        }
      }
    }
    if (v62 < v30)
    {
      if (__OFSUB__(v62, v39))
        goto LABEL_146;
      if (v62 - v39 < v183)
        break;
    }
LABEL_63:
    if (v62 < v39)
      goto LABEL_141;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
    v203 = v62;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      v37 = v190;
    else
      v37 = sub_10088E710(0, *((_QWORD *)v190 + 2) + 1, 1, v190);
    v125 = *((_QWORD *)v37 + 2);
    v124 = *((_QWORD *)v37 + 3);
    v38 = v125 + 1;
    if (v125 >= v124 >> 1)
      v37 = sub_10088E710((char *)(v124 > 1), v125 + 1, 1, v37);
    *((_QWORD *)v37 + 2) = v38;
    v126 = v37 + 32;
    v127 = &v37[16 * v125 + 32];
    v128 = v203;
    *(_QWORD *)v127 = v39;
    *((_QWORD *)v127 + 1) = v128;
    if (v125)
    {
      while (1)
      {
        v129 = v38 - 1;
        if (v38 >= 4)
        {
          v134 = &v126[16 * v38];
          v135 = *((_QWORD *)v134 - 8);
          v136 = *((_QWORD *)v134 - 7);
          v140 = __OFSUB__(v136, v135);
          v137 = v136 - v135;
          if (v140)
            goto LABEL_130;
          v139 = *((_QWORD *)v134 - 6);
          v138 = *((_QWORD *)v134 - 5);
          v140 = __OFSUB__(v138, v139);
          v132 = v138 - v139;
          v133 = v140;
          if (v140)
            goto LABEL_131;
          v141 = v38 - 2;
          v142 = &v126[16 * v38 - 32];
          v144 = *(_QWORD *)v142;
          v143 = *((_QWORD *)v142 + 1);
          v140 = __OFSUB__(v143, v144);
          v145 = v143 - v144;
          if (v140)
            goto LABEL_133;
          v140 = __OFADD__(v132, v145);
          v146 = v132 + v145;
          if (v140)
            goto LABEL_136;
          if (v146 >= v137)
          {
            v164 = &v126[16 * v129];
            v166 = *(_QWORD *)v164;
            v165 = *((_QWORD *)v164 + 1);
            v140 = __OFSUB__(v165, v166);
            v167 = v165 - v166;
            if (v140)
              goto LABEL_140;
            v157 = v132 < v167;
            goto LABEL_100;
          }
        }
        else
        {
          if (v38 != 3)
          {
            v158 = *((_QWORD *)v37 + 4);
            v159 = *((_QWORD *)v37 + 5);
            v140 = __OFSUB__(v159, v158);
            v151 = v159 - v158;
            v152 = v140;
            goto LABEL_94;
          }
          v131 = *((_QWORD *)v37 + 4);
          v130 = *((_QWORD *)v37 + 5);
          v140 = __OFSUB__(v130, v131);
          v132 = v130 - v131;
          v133 = v140;
        }
        if ((v133 & 1) != 0)
          goto LABEL_132;
        v141 = v38 - 2;
        v147 = &v126[16 * v38 - 32];
        v149 = *(_QWORD *)v147;
        v148 = *((_QWORD *)v147 + 1);
        v150 = __OFSUB__(v148, v149);
        v151 = v148 - v149;
        v152 = v150;
        if (v150)
          goto LABEL_135;
        v153 = &v126[16 * v129];
        v155 = *(_QWORD *)v153;
        v154 = *((_QWORD *)v153 + 1);
        v140 = __OFSUB__(v154, v155);
        v156 = v154 - v155;
        if (v140)
          goto LABEL_138;
        if (__OFADD__(v151, v156))
          goto LABEL_139;
        if (v151 + v156 >= v132)
        {
          v157 = v132 < v156;
LABEL_100:
          if (v157)
            v129 = v141;
          goto LABEL_102;
        }
LABEL_94:
        if ((v152 & 1) != 0)
          goto LABEL_134;
        v160 = &v126[16 * v129];
        v162 = *(_QWORD *)v160;
        v161 = *((_QWORD *)v160 + 1);
        v140 = __OFSUB__(v161, v162);
        v163 = v161 - v162;
        if (v140)
          goto LABEL_137;
        if (v163 < v151)
          goto LABEL_14;
LABEL_102:
        v168 = v129 - 1;
        if (v129 - 1 >= v38)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        if (!*v213)
          goto LABEL_152;
        v169 = v37;
        v170 = &v126[16 * v168];
        v171 = *(_QWORD *)v170;
        v172 = &v126[16 * v129];
        v173 = *((_QWORD *)v172 + 1);
        sub_1006D9478(*v213 + *(_QWORD *)(v198 + 72) * *(_QWORD *)v170, *v213 + *(_QWORD *)(v198 + 72) * *(_QWORD *)v172, *v213 + *(_QWORD *)(v198 + 72) * v173, v197);
        if (v2)
          goto LABEL_124;
        if (v173 < v171)
          goto LABEL_127;
        if (v129 > *((_QWORD *)v169 + 2))
          goto LABEL_128;
        *(_QWORD *)v170 = v171;
        *(_QWORD *)&v126[16 * v168 + 8] = v173;
        v174 = *((_QWORD *)v169 + 2);
        if (v129 >= v174)
          goto LABEL_129;
        v38 = v174 - 1;
        memmove(&v126[16 * v129], v172 + 16, 16 * (v174 - 1 - v129));
        v37 = v169;
        *((_QWORD *)v169 + 2) = v174 - 1;
        if (v174 <= 2)
          goto LABEL_14;
      }
    }
    v38 = 1;
LABEL_14:
    v30 = v213[1];
    v36 = v203;
    if (v203 >= v30)
      goto LABEL_113;
  }
  if (__OFADD__(v39, v183))
    goto LABEL_149;
  if (v39 + v183 >= v30)
    v93 = v30;
  else
    v93 = v39 + v183;
  if (v93 >= v39)
  {
    if (v62 != v93)
    {
      v188 = v2;
      v94 = *(_QWORD *)(v198 + 72);
      v95 = v94 * (v62 - 1);
      v199 = v94;
      v96 = v62 * v94;
      v189 = v93;
      do
      {
        v98 = 0;
        v203 = v62;
        v200 = v96;
        v201 = (void (*)(_BYTE *, uint64_t, uint64_t))v95;
        while (1)
        {
          v99 = *v213;
          v207 = v96 + v98;
          v208 = v39;
          v100 = v209;
          sub_10005972C(v96 + v98 + v99, v209, type metadata accessor for BeaconObservation);
          v206 = v95 + v98;
          v101 = v95 + v98 + v99;
          v102 = v210;
          sub_10005972C(v101, v210, type metadata accessor for BeaconObservation);
          v104 = *(int *)(v204 + 20);
          v103 = *(int *)(v204 + 24);
          v105 = *(char *)(v100 + v103);
          v106 = v100 + v104;
          v107 = *(char *)(v102 + v103);
          v108 = v102 + v104;
          v109 = v211;
          *v211 = v105;
          v110 = v202;
          v111 = &v109[*(int *)(v202 + 48)];
          v112 = type metadata accessor for Date(0);
          v113 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 16);
          v113(v111, v106, v112);
          v114 = v212;
          *v212 = v107;
          v115 = &v114[*(int *)(v110 + 48)];
          v113(v115, v108, v112);
          v116 = qword_100E4A508[v105];
          v117 = qword_100E4A508[v107];
          if (v116 == v117)
          {
            v118 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v119 = dispatch thunk of static Comparable.< infix(_:_:)(v111, v115, v112, v118);
          }
          else
          {
            v119 = v116 < v117;
          }
          sub_100004048((uint64_t)v212, &qword_101104710);
          sub_100004048((uint64_t)v211, &qword_101104710);
          sub_1000126B0(v210, type metadata accessor for BeaconObservation);
          sub_1000126B0(v209, type metadata accessor for BeaconObservation);
          v96 = v200;
          if ((v119 & 1) == 0)
            break;
          v120 = *v213;
          v95 = (uint64_t)v201;
          if (!*v213)
            goto LABEL_151;
          v121 = v120 + v200 + v98;
          v122 = (uint64_t)v201 + v120 + v98;
          sub_1000126EC(v121, v205, type metadata accessor for BeaconObservation);
          swift_arrayInitWithTakeFrontToBack(v121, v122, 1, v204);
          sub_1000126EC(v205, v122, type metadata accessor for BeaconObservation);
          v98 -= v199;
          v39 = v208 + 1;
          v97 = v203;
          if (v203 == v208 + 1)
            goto LABEL_53;
        }
        v97 = v203;
        v95 = (uint64_t)v201;
LABEL_53:
        v62 = v97 + 1;
        v95 += v199;
        v96 += v199;
        v39 = v192;
      }
      while (v62 != v189);
      v62 = v189;
      v2 = v188;
      v37 = v190;
    }
    goto LABEL_63;
  }
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1006D8A44(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  char v19;
  Swift::Int v20;
  _BYTE *v21;
  char v22;
  unint64_t v23;
  Swift::Int v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  char v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  Swift::Int v95;
  Swift::Int v96;
  uint64_t v97;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v78 = 0;
      v79 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v81 = *(_BYTE *)(v79 + i);
        v82 = qword_100E4A508[v81];
        v83 = v78;
        do
        {
          v84 = *(char *)(v79 + v83);
          if (v82 >= qword_100E4A508[v84])
            break;
          if (!v79)
            goto LABEL_140;
          *(_BYTE *)(v79 + v83 + 1) = v84;
          *(_BYTE *)(v79 + v83--) = v81;
        }
        while (v83 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v95 = result;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      v85 = v11;
      v94 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v85;
          v89 = *(_QWORD *)&v85[16 * v87 + 32];
          v90 = *(_QWORD *)&v85[16 * v12 + 24];
          sub_1006D9C04((char *)(v86 + v89), (char *)(v86 + *(_QWORD *)&v85[16 * v12 + 16]), v86 + v90, __dst);
          if (v1)
            break;
          if (v90 < v89)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native(v88) & 1) == 0)
            v88 = sub_10088F088((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v91 = &v88[16 * v87 + 32];
          *(_QWORD *)v91 = v89;
          *((_QWORD *)v91 + 1) = v90;
          v92 = *((_QWORD *)v88 + 2);
          if (v12 > v92)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v92 - v12));
          v85 = v88;
          *((_QWORD *)v88 + 2) = v92 - 1;
          v12 = v92 - 1;
        }
        while (v92 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for BeaconObservation.ObservationType);
    *(_QWORD *)(v7 + 16) = v6;
    v94 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v93 = v2;
  v10 = *v2;
  v11 = (char *)_swiftEmptyArrayStorage;
  v96 = v3;
  v97 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(char *)(v10 + v9);
      v15 = qword_100E4A508[v14];
      v16 = qword_100E4A508[*(char *)(v10 + v13)];
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        while (v15 < v16 != qword_100E4A508[*(char *)(v10 + v9)] >= qword_100E4A508[(char)v14])
        {
          LOBYTE(v14) = *(_BYTE *)(v10 + v9++);
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v17 = v9 - 1;
          v18 = v13;
          do
          {
            if (v18 != v17)
            {
              if (!v10)
                goto LABEL_143;
              v19 = *(_BYTE *)(v10 + v18);
              *(_BYTE *)(v10 + v18) = *(_BYTE *)(v10 + v17);
              *(_BYTE *)(v10 + v17) = v19;
            }
            v59 = ++v18 < v17--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v95)
      goto LABEL_46;
    v20 = v13 + v95;
    if (__OFADD__(v13, v95))
      goto LABEL_138;
    if (v20 >= v3)
      v20 = v3;
    if (v20 < v13)
      break;
    if (v9 != v20)
    {
      v21 = (_BYTE *)(v10 + v9);
      do
      {
        v22 = *(_BYTE *)(v10 + v9);
        v23 = qword_100E4A508[v22];
        v24 = v13;
        v25 = v21;
        do
        {
          v26 = (char)*(v25 - 1);
          if (v23 >= qword_100E4A508[v26])
            break;
          if (!v10)
            goto LABEL_141;
          *v25 = v26;
          *--v25 = v22;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v21;
      }
      while (v9 != v20);
      v9 = v20;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_10088E710(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v97;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_10088E710((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v97;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        v31 = v12 - 1;
        if (v12 >= 4)
        {
          v36 = &v29[16 * v12];
          v37 = *((_QWORD *)v36 - 8);
          v38 = *((_QWORD *)v36 - 7);
          v42 = __OFSUB__(v38, v37);
          v39 = v38 - v37;
          if (v42)
            goto LABEL_119;
          v41 = *((_QWORD *)v36 - 6);
          v40 = *((_QWORD *)v36 - 5);
          v42 = __OFSUB__(v40, v41);
          v34 = v40 - v41;
          v35 = v42;
          if (v42)
            goto LABEL_120;
          v43 = v12 - 2;
          v44 = &v29[16 * v12 - 32];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v42 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v42)
            goto LABEL_122;
          v42 = __OFADD__(v34, v47);
          v48 = v34 + v47;
          if (v42)
            goto LABEL_125;
          if (v48 >= v39)
          {
            v66 = &v29[16 * v31];
            v68 = *(_QWORD *)v66;
            v67 = *((_QWORD *)v66 + 1);
            v42 = __OFSUB__(v67, v68);
            v69 = v67 - v68;
            if (v42)
              goto LABEL_129;
            v59 = v34 < v69;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v60 = *((_QWORD *)v11 + 4);
            v61 = *((_QWORD *)v11 + 5);
            v42 = __OFSUB__(v61, v60);
            v53 = v61 - v60;
            v54 = v42;
            goto LABEL_77;
          }
          v33 = *((_QWORD *)v11 + 4);
          v32 = *((_QWORD *)v11 + 5);
          v42 = __OFSUB__(v32, v33);
          v34 = v32 - v33;
          v35 = v42;
        }
        if ((v35 & 1) != 0)
          goto LABEL_121;
        v43 = v12 - 2;
        v49 = &v29[16 * v12 - 32];
        v51 = *(_QWORD *)v49;
        v50 = *((_QWORD *)v49 + 1);
        v52 = __OFSUB__(v50, v51);
        v53 = v50 - v51;
        v54 = v52;
        if (v52)
          goto LABEL_124;
        v55 = &v29[16 * v31];
        v57 = *(_QWORD *)v55;
        v56 = *((_QWORD *)v55 + 1);
        v42 = __OFSUB__(v56, v57);
        v58 = v56 - v57;
        if (v42)
          goto LABEL_127;
        if (__OFADD__(v53, v58))
          goto LABEL_128;
        if (v53 + v58 >= v34)
        {
          v59 = v34 < v58;
LABEL_83:
          if (v59)
            v31 = v43;
          goto LABEL_85;
        }
LABEL_77:
        if ((v54 & 1) != 0)
          goto LABEL_123;
        v62 = &v29[16 * v31];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v42 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v42)
          goto LABEL_126;
        if (v65 < v53)
          goto LABEL_15;
LABEL_85:
        v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v71 = &v29[16 * v70];
        v72 = *(_QWORD *)v71;
        v73 = v29;
        v74 = &v29[16 * v31];
        v75 = *((_QWORD *)v74 + 1);
        sub_1006D9C04((char *)(v10 + *(_QWORD *)v71), (char *)(v10 + *(_QWORD *)v74), v10 + v75, __dst);
        if (v1)
          goto LABEL_93;
        if (v75 < v72)
          goto LABEL_116;
        if (v31 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v71 = v72;
        *(_QWORD *)&v73[16 * v70 + 8] = v75;
        v76 = *((_QWORD *)v11 + 2);
        if (v31 >= v76)
          goto LABEL_118;
        v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        v29 = v73;
        *((_QWORD *)v11 + 2) = v76 - 1;
        v10 = v97;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v96;
    if (v9 >= v96)
    {
      v2 = v93;
      v8 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1006D9100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  void (*v33)(_BYTE *, char *, uint64_t);
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _BYTE *v60;

  v58 = a4;
  v45 = a1;
  v49 = sub_10001A9A8(&qword_101104710);
  v6 = __chkstk_darwin(v49);
  v60 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - v8;
  v54 = type metadata accessor for BeaconObservation(0);
  v10 = __chkstk_darwin(v54);
  v55 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v43 - v13;
  result = __chkstk_darwin(v12);
  v18 = (char *)&v43 - v17;
  v53 = a3;
  v44 = a2;
  if (a3 != a2)
  {
    v19 = *(_QWORD *)(v16 + 72);
    v20 = v19 * (v53 - 1);
    v50 = v19;
    v21 = v19 * v53;
    v47 = v14;
    v48 = v9;
    v46 = (char *)&v43 - v17;
LABEL_5:
    v22 = 0;
    v59 = v45;
    v51 = v21;
    v52 = v20;
    while (1)
    {
      v23 = *v58;
      v57 = v21 + v22;
      sub_10005972C(v21 + v22 + v23, (uint64_t)v18, type metadata accessor for BeaconObservation);
      v56 = v20 + v22;
      sub_10005972C(v20 + v22 + v23, (uint64_t)v14, type metadata accessor for BeaconObservation);
      v25 = *(int *)(v54 + 20);
      v24 = *(int *)(v54 + 24);
      v26 = v18[v24];
      v27 = &v18[v25];
      v28 = v14[v24];
      v29 = &v14[v25];
      *v9 = v26;
      v30 = v49;
      v31 = &v9[*(int *)(v49 + 48)];
      v32 = type metadata accessor for Date(0);
      v33 = *(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
      v33(v31, v27, v32);
      v34 = v60;
      *v60 = v28;
      v35 = &v34[*(int *)(v30 + 48)];
      v33(v35, v29, v32);
      v36 = qword_100E4A508[v26];
      v37 = qword_100E4A508[v28];
      if (v36 == v37)
      {
        v38 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v39 = dispatch thunk of static Comparable.< infix(_:_:)(v31, v35, v32, v38);
      }
      else
      {
        v39 = v36 < v37;
      }
      sub_100004048((uint64_t)v60, &qword_101104710);
      v9 = v48;
      sub_100004048((uint64_t)v48, &qword_101104710);
      v14 = v47;
      sub_1000126B0((uint64_t)v47, type metadata accessor for BeaconObservation);
      v18 = v46;
      result = sub_1000126B0((uint64_t)v46, type metadata accessor for BeaconObservation);
      v21 = v51;
      v20 = v52;
      if ((v39 & 1) == 0)
      {
LABEL_4:
        v20 += v50;
        v21 += v50;
        if (++v53 == v44)
          return result;
        goto LABEL_5;
      }
      v40 = *v58;
      if (!*v58)
        break;
      v41 = v40 + v51 + v22;
      v42 = v40 + v52 + v22;
      sub_1000126EC(v41, v55, type metadata accessor for BeaconObservation);
      swift_arrayInitWithTakeFrontToBack(v41, v42, 1, v54);
      result = sub_1000126EC(v55, v42, type metadata accessor for BeaconObservation);
      v22 -= v50;
      if (v53 == ++v59)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1006D9478(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v46;
  _BYTE *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  void (*v72)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v73;
  _BYTE *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t result;
  uint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _BYTE *v104;
  _BYTE *v105;

  v99 = sub_10001A9A8(&qword_101104710);
  v8 = __chkstk_darwin(v99);
  v98 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v87 - v11;
  v13 = __chkstk_darwin(v10);
  v97 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  v96 = (char *)&v87 - v15;
  v16 = type metadata accessor for BeaconObservation(0);
  v17 = __chkstk_darwin(v16);
  v95 = (uint64_t)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v94 = (uint64_t)&v87 - v20;
  v21 = __chkstk_darwin(v19);
  v93 = (uint64_t)&v87 - v22;
  __chkstk_darwin(v21);
  v92 = (uint64_t)&v87 - v23;
  v100 = *(_QWORD *)(v24 + 72);
  if (!v100)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  if (a2 - a1 == 0x8000000000000000 && v100 == -1)
    goto LABEL_67;
  v25 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v100 == -1)
    goto LABEL_68;
  v26 = (uint64_t)(a2 - a1) / v100;
  v105 = (_BYTE *)a1;
  v104 = (_BYTE *)a4;
  v27 = v25 / v100;
  if (v26 >= v25 / v100)
  {
    if ((v27 & 0x8000000000000000) == 0)
    {
      v29 = v27 * v100;
      if (a4 < a2 || a2 + v29 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v27, v16);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v57 = a4 + v29;
      v103 = a4 + v29;
      v105 = (_BYTE *)a2;
      if (v29 >= 1 && a1 < a2)
      {
        v100 = -v100;
        v90 = a4;
        v91 = v16;
        v88 = v12;
        v89 = a1;
        do
        {
          v101 = a3;
          v59 = v100;
          v60 = v94;
          sub_10005972C(v57 + v100, v94, type metadata accessor for BeaconObservation);
          v102 = a2;
          v61 = a2 + v59;
          v62 = v95;
          sub_10005972C(a2 + v59, v95, type metadata accessor for BeaconObservation);
          v64 = *(int *)(v16 + 20);
          v63 = *(int *)(v16 + 24);
          v65 = *(char *)(v60 + v63);
          v66 = v60 + v64;
          v67 = *(char *)(v62 + v63);
          v68 = v62 + v64;
          *v12 = v65;
          v69 = v99;
          v70 = &v12[*(int *)(v99 + 48)];
          v71 = type metadata accessor for Date(0);
          v72 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16);
          v72(v70, v66, v71);
          v73 = v98;
          *v98 = v67;
          v74 = &v73[*(int *)(v69 + 48)];
          v72(v74, v68, v71);
          v75 = qword_100E4A508[v65];
          v76 = qword_100E4A508[v67];
          if (v75 == v76)
          {
            v77 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v78 = dispatch thunk of static Comparable.< infix(_:_:)(v70, v74, v71, v77);
          }
          else
          {
            v78 = v75 < v76;
          }
          v80 = v100;
          v79 = v101;
          v81 = v101 + v100;
          sub_100004048((uint64_t)v98, &qword_101104710);
          v12 = v88;
          sub_100004048((uint64_t)v88, &qword_101104710);
          sub_1000126B0(v95, type metadata accessor for BeaconObservation);
          sub_1000126B0(v94, type metadata accessor for BeaconObservation);
          v16 = v91;
          if ((v78 & 1) != 0)
          {
            if (v79 < v102 || v81 >= v102)
            {
              swift_arrayInitWithTakeFrontToBack(v79 + v80, v61, 1, v91);
              v83 = v89;
              v82 = v90;
            }
            else
            {
              v83 = v89;
              v82 = v90;
              if (v79 != v102)
                swift_arrayInitWithTakeBackToFront(v79 + v80, v61);
            }
            v105 += v80;
          }
          else
          {
            v84 = v103;
            v85 = v103 + v80;
            v103 += v80;
            if (v79 < v84 || v81 >= v84)
            {
              swift_arrayInitWithTakeFrontToBack(v79 + v80, v85, 1, v91);
              v61 = v102;
              v83 = v89;
              v82 = v90;
            }
            else
            {
              v61 = v102;
              v83 = v89;
              v82 = v90;
              if (v79 != v84)
                swift_arrayInitWithTakeBackToFront(v79 + v80, v85);
            }
          }
          v57 = v103;
          if (v103 <= v82)
            break;
          a2 = v61;
          a3 = v81;
        }
        while (v61 > v83);
      }
      goto LABEL_65;
    }
  }
  else if ((v26 & 0x8000000000000000) == 0)
  {
    v28 = v26 * v100;
    if (a4 < a1 || a1 + v28 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v26, v16);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v98 = (_BYTE *)(a4 + v28);
    v103 = a4 + v28;
    if (v28 >= 1 && a2 < a3)
    {
      v31 = type metadata accessor for BeaconObservation;
      v91 = v16;
      v101 = a3;
      do
      {
        v102 = a2;
        v32 = v92;
        sub_10005972C(a2, v92, v31);
        v33 = v93;
        v34 = v31;
        sub_10005972C(a4, v93, v31);
        v36 = *(int *)(v16 + 20);
        v35 = *(int *)(v16 + 24);
        v37 = *(char *)(v32 + v35);
        v38 = v32 + v36;
        v39 = *(char *)(v33 + v35);
        v40 = v33 + v36;
        v41 = v96;
        *v96 = v37;
        v42 = v99;
        v43 = &v41[*(int *)(v99 + 48)];
        v44 = type metadata accessor for Date(0);
        v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16);
        v45(v43, v38, v44);
        v46 = v97;
        *v97 = v39;
        v47 = &v46[*(int *)(v42 + 48)];
        v45(v47, v40, v44);
        v48 = qword_100E4A508[v37];
        v49 = qword_100E4A508[v39];
        if (v48 == v49)
        {
          v50 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v51 = dispatch thunk of static Comparable.< infix(_:_:)(v43, v47, v44, v50);
        }
        else
        {
          v51 = v48 < v49;
        }
        sub_100004048((uint64_t)v97, &qword_101104710);
        sub_100004048((uint64_t)v96, &qword_101104710);
        v31 = v34;
        sub_1000126B0(v93, v34);
        sub_1000126B0(v92, v34);
        v52 = (unint64_t)v105;
        v54 = v101;
        v53 = v102;
        v16 = v91;
        if ((v51 & 1) != 0)
        {
          v55 = v102 + v100;
          if ((unint64_t)v105 < v102 || (unint64_t)v105 >= v55)
          {
            swift_arrayInitWithTakeFrontToBack(v105, v102, 1, v91);
          }
          else if (v105 == (_BYTE *)v102)
          {
            v52 = v102;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v105, v102);
          }
        }
        else
        {
          v56 = (unint64_t)&v104[v100];
          if (v105 < v104 || (unint64_t)v105 >= v56)
          {
            swift_arrayInitWithTakeFrontToBack(v105, v104, 1, v91);
          }
          else if (v105 != v104)
          {
            swift_arrayInitWithTakeBackToFront(v105, v104);
          }
          v104 = (_BYTE *)v56;
          v55 = v53;
        }
        v105 = (_BYTE *)(v52 + v100);
        a4 = (unint64_t)v104;
        if (v104 >= v98)
          break;
        a2 = v55;
      }
      while (v55 < v54);
    }
LABEL_65:
    sub_10088E8E0((unint64_t *)&v105, (unint64_t *)&v104, (uint64_t *)&v103);
    return 1;
  }
LABEL_69:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1006D9C04(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  size_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  char *v20;
  char *v21;
  char *v22;

  v22 = __src;
  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a3 - (_QWORD)a2;
  v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (_QWORD)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst)
        memmove(__dst, a2, a3 - (_QWORD)a2);
      v14 = &v4[v9];
      v20 = &v4[v9];
      v22 = v6;
      if (v7 < v6 && (char *)a3 != v6)
      {
        v15 = (char *)(a3 - 1);
        while (1)
        {
          v16 = v6 - 1;
          v17 = *(v6 - 1);
          v18 = v15 + 1;
          if (qword_100E4A508[*(v14 - 1)] >= qword_100E4A508[v17])
          {
            v20 = v14 - 1;
            if (v18 < v14 || v15 >= v14 || v18 != v14)
              *v15 = *(v14 - 1);
            --v14;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v18 != v6 || v15 >= v6)
              *v15 = v17;
            v22 = --v6;
            if (v16 <= v7)
              goto LABEL_38;
          }
          --v15;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst)
      memmove(__dst, __src, v8);
    v10 = &v4[v8];
    v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        v11 = *v6;
        v12 = *v4;
        if (qword_100E4A508[v11] >= qword_100E4A508[v12])
        {
          if (v7 != v4)
            *v7 = v12;
          v21 = ++v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            *v7 = v11;
        }
        ++v7;
        if (v4 >= v10)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    sub_10088EC54((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1006D9E68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  Class isa;
  char *v13;
  Class v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t result;
  _QWORD v55[2];
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v2 = type metadata accessor for TimeZone(0);
  v61 = *(_QWORD *)(v2 - 8);
  v62 = v2;
  __chkstk_darwin(v2);
  v60 = (char *)v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for BeaconObservation(0);
  v4 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (v7)
  {
    v58 = (id)objc_opt_self(NSISO8601DateFormatter);
    v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v9 = *(_QWORD *)(v4 + 72);
    v55[1] = a1;
    v56 = v9;
    swift_bridgeObjectRetain(a1);
    v10 = _swiftEmptyDictionarySingleton;
    v57 = v6;
    while (1)
    {
      sub_10005972C(v8, (uint64_t)v6, type metadata accessor for BeaconObservation);
      v11 = v6[*(int *)(v59 + 24)];
      swift_bridgeObjectRetain(v10);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v13 = v60;
      static TimeZone.gmt.getter();
      v14 = TimeZone._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v13, v62);
      v15 = objc_msgSend(v58, "stringFromDate:timeZone:formatOptions:", isa, v14, 1907);

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      v64 = v10;
      v21 = sub_100518FF0(v11);
      v22 = v10[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        break;
      v25 = v20;
      if (v10[3] >= v24)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v26 = v10;
        }
        else
        {
          sub_100A9F900();
          v26 = v64;
        }
      }
      else
      {
        sub_100A90C1C(v24, isUniquelyReferenced_nonNull_native);
        v26 = v64;
        v27 = sub_100518FF0(v11);
        if ((v25 & 1) != (v28 & 1))
          goto LABEL_35;
        v21 = v27;
      }
      swift_bridgeObjectRelease();
      if ((v25 & 1) == 0)
      {
        v26[(v21 >> 6) + 8] |= 1 << v21;
        *(_BYTE *)(v26[6] + v21) = v11;
        *(_QWORD *)(v26[7] + 8 * v21) = _swiftEmptyArrayStorage;
        v29 = v26[2];
        v30 = __OFADD__(v29, 1);
        v31 = v29 + 1;
        if (v30)
          goto LABEL_34;
        v26[2] = v31;
      }
      v32 = v26[7];
      v33 = *(_QWORD **)(v32 + 8 * v21);
      v34 = swift_isUniquelyReferenced_nonNull_native(v33);
      *(_QWORD *)(v32 + 8 * v21) = v33;
      v63 = v7;
      if ((v34 & 1) == 0)
      {
        v33 = sub_1007C7438(0, v33[2] + 1, 1, v33);
        *(_QWORD *)(v32 + 8 * v21) = v33;
      }
      v36 = v33[2];
      v35 = v33[3];
      if (v36 >= v35 >> 1)
      {
        v33 = sub_1007C7438((_QWORD *)(v35 > 1), v36 + 1, 1, v33);
        *(_QWORD *)(v32 + 8 * v21) = v33;
      }
      v33[2] = v36 + 1;
      v37 = &v33[2 * v36];
      v37[4] = v16;
      v37[5] = v18;
      v6 = v57;
      sub_1000126B0((uint64_t)v57, type metadata accessor for BeaconObservation);
      swift_bridgeObjectRelease();
      v8 += v56;
      v10 = v26;
      v7 = v63 - 1;
      if (v63 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
    __break(1u);
    result = swift_release();
    __break(1u);
  }
  else
  {
    v26 = _swiftEmptyDictionarySingleton;
LABEL_20:
    swift_bridgeObjectRetain_n(v26, 2);
    v38 = sub_100509644((uint64_t)v26);
    swift_bridgeObjectRelease();
    v64 = v38;
    sub_1006D2458((uint64_t *)&v64);
    swift_bridgeObjectRelease();
    v39 = (uint64_t)v64;
    v40 = v64[2];
    if (v40)
    {
      swift_retain();
      v41 = 0;
      v42 = _swiftEmptyArrayStorage;
      do
      {
        if (v26[2])
        {
          v44 = *(_BYTE *)(v39 + v41 + 32);
          v45 = sub_100518FF0(v44);
          if ((v46 & 1) != 0)
          {
            v47 = *(_QWORD *)(v26[7] + 8 * v45);
            swift_bridgeObjectRetain(v47);
            sub_1006EB054(v44);
            v49 = v48;
            v51 = v50;
            if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
              v42 = sub_1007CA290(0, v42[2] + 1, 1, v42);
            v53 = v42[2];
            v52 = v42[3];
            if (v53 >= v52 >> 1)
              v42 = sub_1007CA290((_QWORD *)(v52 > 1), v53 + 1, 1, v42);
            v42[2] = v53 + 1;
            v43 = &v42[3 * v53];
            v43[4] = v49;
            v43[5] = v51;
            v43[6] = v47;
          }
        }
        ++v41;
      }
      while (v40 != v41);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      v42 = _swiftEmptyArrayStorage;
    }
    swift_release();
    return (uint64_t)v42;
  }
  return result;
}

ValueMetadata *type metadata accessor for ObservationState()
{
  return &type metadata for ObservationState;
}

uint64_t *sub_1006DA348(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v28);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    *v25 = *v26;
    v25[1] = v27;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v27);
  }
  return a1;
}

uint64_t sub_1006DA454(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
}

uint64_t sub_1006DA4DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v26);
  return a1;
}

uint64_t sub_1006DA5BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v27 = a3[10];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_1006DA6F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_1006DA780(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_1006DA864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006DA870);
}

uint64_t sub_1006DA870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1006DA8F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006DA8FC);
}

uint64_t sub_1006DA8FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1006DA978(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E498C0;
    v4[2] = &unk_100E498C0;
    v4[3] = &unk_100E498C0;
    v4[4] = &unk_100E498C0;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = &unk_100E498C0;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1006DAA00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int *v46;
  unsigned int (*v47)(_QWORD *, uint64_t, int *, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t, __n128);
  __n128 v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  char *v97;
  char *__dst;
  _QWORD *__dsta;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
    v8 = *((_QWORD *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A9A8(&qword_10110EEB0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v100 = v6;
      v101 = v8;
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      *((_BYTE *)a1 + v7[5]) = *((_BYTE *)a2 + v7[5]);
      *((_BYTE *)a1 + v7[6]) = *((_BYTE *)a2 + v7[6]);
      *((_BYTE *)a1 + v7[7]) = *((_BYTE *)a2 + v7[7]);
      v12 = v7[8];
      v13 = (uint64_t *)((char *)a1 + v12);
      v14 = (uint64_t *)((char *)a2 + v12);
      v15 = v14[1];
      *v13 = *v14;
      v13[1] = v15;
      v16 = v7[9];
      v17 = (uint64_t *)((char *)a1 + v16);
      v18 = (uint64_t *)((char *)a2 + v16);
      v19 = v18[1];
      *v17 = *v18;
      v17[1] = v19;
      v20 = v7[10];
      v21 = (char *)a1 + v20;
      v22 = (char *)a2 + v20;
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v7[11];
      v24 = (uint64_t *)((char *)a1 + v23);
      v25 = (uint64_t *)((char *)a2 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      v27 = v7[12];
      __dst = (char *)a1 + v27;
      v28 = (char *)a2 + v27;
      v29 = type metadata accessor for URL(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v19);
      v32 = swift_bridgeObjectRetain(v26);
      v103 = v31;
      if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v31)(v28, 1, v29, v32))
      {
        v33 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v28, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v28, v29);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
      }
      v34 = v29;
      v35 = v7[13];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      v102 = v30;
      if (v103((char *)a2 + v35, 1, v34))
      {
        v38 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v36, v37, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v36, 0, 1, v34);
      }
      v39 = v7[14];
      v40 = (uint64_t *)((char *)a1 + v39);
      v41 = (uint64_t *)((char *)a2 + v39);
      v42 = v41[1];
      *v40 = *v41;
      v40[1] = v42;
      *(uint64_t *)((char *)a1 + v7[15]) = *(uint64_t *)((char *)a2 + v7[15]);
      v43 = v7[16];
      v44 = (uint64_t *)((char *)a1 + v43);
      v45 = (uint64_t *)((char *)a2 + v43);
      v46 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      __dsta = (_QWORD *)*((_QWORD *)v46 - 1);
      v47 = (unsigned int (*)(_QWORD *, uint64_t, int *, __n128))__dsta[6];
      v48 = swift_bridgeObjectRetain(v42);
      if (v47(v45, 1, v46, v48))
      {
        v49 = sub_10001A9A8(&qword_1010FBA50);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        v50 = v45[1];
        *v44 = *v45;
        v44[1] = v50;
        v51 = v45[3];
        v44[2] = v45[2];
        v44[3] = v51;
        v52 = v45[5];
        v44[4] = v45[4];
        v44[5] = v52;
        *((_WORD *)v44 + 24) = *((_WORD *)v45 + 24);
        *((_BYTE *)v44 + 72) = *((_BYTE *)v45 + 72);
        v53 = v45[8];
        v44[7] = v45[7];
        v44[8] = v53;
        v54 = v46[10];
        v97 = (char *)v44 + v54;
        v55 = (char *)v45 + v54;
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v51);
        v56 = swift_bridgeObjectRetain(v52);
        if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v103)(v55, 1, v34, v56))
        {
          v57 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v97, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v97, v55, v34);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v97, 0, 1, v34);
        }
        v58 = v46[11];
        v59 = (char *)v44 + v58;
        v60 = (char *)v45 + v58;
        if (v103((char *)v45 + v58, 1, v34))
        {
          v61 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v59, v60, v34);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v59, 0, 1, v34);
        }
        v62 = v46[12];
        v63 = (char *)v44 + v62;
        v64 = (char *)v45 + v62;
        *(_QWORD *)v63 = *(_QWORD *)v64;
        v63[8] = v64[8];
        v65 = v46[13];
        v66 = (_QWORD *)((char *)v44 + v65);
        v67 = (_QWORD *)((char *)v45 + v65);
        v68 = v67[1];
        *v66 = *v67;
        v66[1] = v68;
        v69 = v46[14];
        v70 = *(_QWORD *)((char *)v45 + v69);
        *(_QWORD *)((char *)v44 + v69) = v70;
        v71 = v46[15];
        v72 = (_QWORD *)((char *)v44 + v71);
        v73 = (_QWORD *)((char *)v45 + v71);
        v74 = v73[1];
        *v72 = *v73;
        v72[1] = v74;
        v75 = v46[16];
        v76 = *(_QWORD *)((char *)v45 + v75);
        *(_QWORD *)((char *)v44 + v75) = v76;
        v77 = v46[17];
        v78 = (char *)v44 + v77;
        v79 = (char *)v45 + v77;
        *(_OWORD *)v78 = *(_OWORD *)v79;
        v78[16] = v79[16];
        v80 = v46[18];
        v81 = (char *)v44 + v80;
        v82 = (char *)v45 + v80;
        *(_OWORD *)v81 = *(_OWORD *)v82;
        v81[16] = v82[16];
        v83 = (void (*)(_QWORD *, _QWORD, uint64_t, int *, __n128))__dsta[7];
        swift_bridgeObjectRetain(v68);
        swift_bridgeObjectRetain(v70);
        swift_bridgeObjectRetain(v74);
        v84 = swift_bridgeObjectRetain(v76);
        v83(v44, 0, 1, v46, v84);
      }
      *(_DWORD *)((char *)a1 + v7[17]) = *(_DWORD *)((char *)a2 + v7[17]);
      v85 = v7[18];
      v86 = *(uint64_t *)((char *)a2 + v85);
      *(uint64_t *)((char *)a1 + v85) = v86;
      v87 = v7[19];
      v88 = (char *)a1 + v87;
      v89 = (char *)a2 + v87;
      v90 = *(void (**)(char *, char *, uint64_t, __n128))(v102 + 16);
      v91 = swift_bridgeObjectRetain(v86);
      v90(v88, v89, v34, v91);
      ((void (*)(char *, char *, uint64_t))v90)((char *)a1 + v7[20], (char *)a2 + v7[20], v34);
      ((void (*)(char *, char *, uint64_t))v90)((char *)a1 + v7[21], (char *)a2 + v7[21], v34);
      ((void (*)(char *, char *, uint64_t))v90)((char *)a1 + v7[22], (char *)a2 + v7[22], v34);
      ((void (*)(char *, char *, uint64_t))v90)((char *)a1 + v7[23], (char *)a2 + v7[23], v34);
      ((void (*)(char *, char *, uint64_t))v90)((char *)a1 + v7[24], (char *)a2 + v7[24], v34);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(v101 + 56))(a1, 0, 1, v7);
      v6 = v100;
    }
    v92 = *(int *)(v6 + 20);
    v93 = (uint64_t *)((char *)a1 + v92);
    v94 = (uint64_t *)((char *)a2 + v92);
    v95 = v94[1];
    *v93 = *v94;
    v93[1] = v95;
    swift_bridgeObjectRetain(v95);
  }
  return a1;
}

uint64_t sub_1006DAFF4(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  v2 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v2 - 1) + 48))(a1, 1, v2))
  {
    v3 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = a1 + v2[12];
    v5 = type metadata accessor for URL(0);
    v6 = *(_QWORD *)(v5 - 8);
    v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    if (!v7(v4, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    v8 = a1 + v2[13];
    if (!v7(v8, 1, v5))
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    v9 = a1 + v2[16];
    v10 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11 = v9 + *(int *)(v10 + 40);
      if (!v7(v11, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v5);
      v12 = v9 + *(int *)(v10 + 44);
      if (!v7(v12, 1, v5))
        (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v12, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v13(a1 + v2[19], v5);
    v13(a1 + v2[20], v5);
    v13(a1 + v2[21], v5);
    v13(a1 + v2[22], v5);
    v13(a1 + v2[23], v5);
    v13(a1 + v2[24], v5);
  }
  return swift_bridgeObjectRelease();
}

char *sub_1006DB278(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  void (**v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int *v44;
  uint64_t v45;
  unsigned int (*v46)(char *, uint64_t, int *, __n128);
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  void (*v83)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  void (*v90)(char *, char *, uint64_t);
  __n128 v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v97;
  uint64_t v98;
  char *__dst;
  void (**__dsta)(char *, char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int (*v104)(char *, uint64_t, uint64_t, __n128);

  v6 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v102 = v7;
    v103 = a3;
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    a1[v6[5]] = a2[v6[5]];
    a1[v6[6]] = a2[v6[6]];
    a1[v6[7]] = a2[v6[7]];
    v10 = v6[8];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = v6[9];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = *((_QWORD *)v16 + 1);
    *(_QWORD *)v15 = *(_QWORD *)v16;
    *((_QWORD *)v15 + 1) = v17;
    v18 = v6[10];
    v19 = &a1[v18];
    v20 = &a2[v18];
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = v6[11];
    v22 = &a1[v21];
    v23 = &a2[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = v6[12];
    __dst = &a1[v25];
    v26 = &a2[v25];
    v27 = type metadata accessor for URL(0);
    v28 = *(_QWORD *)(v27 - 8);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v28 + 48);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v17);
    v30 = swift_bridgeObjectRetain(v24);
    v104 = v29;
    if (v29(v26, 1, v27, v30))
    {
      v31 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v26, v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
    }
    v32 = (void (**)(char *, char *, uint64_t))v28;
    v33 = v6[13];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v101 = v27;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v29)(&a2[v33], 1, v27))
    {
      v36 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v32[2](v34, v35, v27);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v32[7])(v34, 0, 1, v27);
    }
    v37 = v6[14];
    v38 = &a1[v37];
    v39 = &a2[v37];
    v40 = *((_QWORD *)v39 + 1);
    *(_QWORD *)v38 = *(_QWORD *)v39;
    *((_QWORD *)v38 + 1) = v40;
    *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
    v41 = v6[16];
    v42 = &a1[v41];
    v43 = &a2[v41];
    v44 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v45 = *((_QWORD *)v44 - 1);
    v46 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v45 + 48);
    v47 = swift_bridgeObjectRetain(v40);
    if (v46(v43, 1, v44, v47))
    {
      v48 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      v49 = v101;
    }
    else
    {
      v98 = v45;
      __dsta = v32;
      v50 = *((_QWORD *)v43 + 1);
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *((_QWORD *)v42 + 1) = v50;
      v51 = *((_QWORD *)v43 + 3);
      *((_QWORD *)v42 + 2) = *((_QWORD *)v43 + 2);
      *((_QWORD *)v42 + 3) = v51;
      v52 = *((_QWORD *)v43 + 5);
      *((_QWORD *)v42 + 4) = *((_QWORD *)v43 + 4);
      *((_QWORD *)v42 + 5) = v52;
      *((_WORD *)v42 + 24) = *((_WORD *)v43 + 24);
      v42[72] = v43[72];
      v53 = *((_QWORD *)v43 + 8);
      *((_QWORD *)v42 + 7) = *((_QWORD *)v43 + 7);
      *((_QWORD *)v42 + 8) = v53;
      v54 = v44[10];
      v97 = &v42[v54];
      v55 = &v43[v54];
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v51);
      v56 = swift_bridgeObjectRetain(v52);
      v49 = v101;
      if (v104(v55, 1, v101, v56))
      {
        v57 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v97, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        __dsta[2](v97, v55, v101);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dsta[7])(v97, 0, 1, v101);
      }
      v58 = v44[11];
      v59 = &v42[v58];
      v60 = &v43[v58];
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v104)(&v43[v58], 1, v101))
      {
        v61 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v59, v60, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      }
      else
      {
        __dsta[2](v59, v60, v101);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dsta[7])(v59, 0, 1, v101);
      }
      v62 = v44[12];
      v63 = &v42[v62];
      v64 = &v43[v62];
      *(_QWORD *)v63 = *(_QWORD *)v64;
      v63[8] = v64[8];
      v65 = v44[13];
      v66 = &v42[v65];
      v67 = &v43[v65];
      v68 = *((_QWORD *)v67 + 1);
      *(_QWORD *)v66 = *(_QWORD *)v67;
      *((_QWORD *)v66 + 1) = v68;
      v69 = v44[14];
      v70 = *(_QWORD *)&v43[v69];
      *(_QWORD *)&v42[v69] = v70;
      v71 = v44[15];
      v72 = &v42[v71];
      v73 = &v43[v71];
      v74 = *((_QWORD *)v73 + 1);
      *(_QWORD *)v72 = *(_QWORD *)v73;
      *((_QWORD *)v72 + 1) = v74;
      v75 = v44[16];
      v76 = *(_QWORD *)&v43[v75];
      *(_QWORD *)&v42[v75] = v76;
      v77 = v44[17];
      v78 = &v42[v77];
      v79 = &v43[v77];
      *(_OWORD *)v78 = *(_OWORD *)v79;
      v78[16] = v79[16];
      v80 = v44[18];
      v81 = &v42[v80];
      v82 = &v43[v80];
      *(_OWORD *)v81 = *(_OWORD *)v82;
      v81[16] = v82[16];
      v83 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v98 + 56);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v74);
      v84 = swift_bridgeObjectRetain(v76);
      v83(v42, 0, 1, v44, v84);
      v32 = __dsta;
    }
    *(_DWORD *)&a1[v6[17]] = *(_DWORD *)&a2[v6[17]];
    v85 = v6[18];
    v86 = *(_QWORD *)&a2[v85];
    *(_QWORD *)&a1[v85] = v86;
    v87 = v6[19];
    v88 = &a1[v87];
    v89 = &a2[v87];
    v90 = v32[2];
    v91 = swift_bridgeObjectRetain(v86);
    ((void (*)(char *, char *, uint64_t, __n128))v90)(v88, v89, v49, v91);
    v90(&a1[v6[20]], &a2[v6[20]], v49);
    v90(&a1[v6[21]], &a2[v6[21]], v49);
    v90(&a1[v6[22]], &a2[v6[22]], v49);
    v90(&a1[v6[23]], &a2[v6[23]], v49);
    v90(&a1[v6[24]], &a2[v6[24]], v49);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v102 + 56))(a1, 0, 1, v6);
    a3 = v103;
  }
  v92 = *(int *)(a3 + 20);
  v93 = &a1[v92];
  v94 = &a2[v92];
  v95 = *((_QWORD *)v94 + 1);
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *((_QWORD *)v93 + 1) = v95;
  swift_bridgeObjectRetain(v95);
  return a1;
}

_BYTE *sub_1006DB848(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  int *v74;
  uint64_t v75;
  unsigned int (*v76)(_QWORD *, uint64_t, int *, __n128);
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  __n128 v87;
  unsigned int (*v88)(char *, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  int *v104;
  uint64_t (*v105)(uint64_t, uint64_t, int *);
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __int128 v140;
  uint64_t v141;
  char *v142;
  char *v143;
  __int128 v144;
  void (*v145)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  void (*v152)(char *, char *, uint64_t, __n128);
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  int v160;
  int v161;
  size_t v162;
  void *v163;
  uint64_t v164;
  void *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  __int128 v191;
  void (*v192)(uint64_t, _QWORD, uint64_t, int *, __n128);
  __n128 v193;
  uint64_t v194;
  char *v195;
  int v196;
  int v197;
  size_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  uint64_t v230;
  uint64_t v232;
  char *__dst;
  void *__dsta;
  void *__dstb;
  void *__dstc;
  unsigned int (*__src)(char *, uint64_t, uint64_t);
  _QWORD *__srca;
  uint64_t v239;
  unsigned int (*v240)(char *, uint64_t, uint64_t, __n128);
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;

  v6 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1000126B0((uint64_t)a1, type metadata accessor for BeaconProductInfoRecord);
      goto LABEL_7;
    }
    v38 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(a1, a2, v38);
    a1[v6[5]] = a2[v6[5]];
    a1[v6[6]] = a2[v6[6]];
    a1[v6[7]] = a2[v6[7]];
    v39 = v6[8];
    v40 = &a1[v39];
    v41 = &a2[v39];
    *v40 = *v41;
    v42 = v41[1];
    v40[1] = v42;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRelease();
    v43 = v6[9];
    v44 = &a1[v43];
    v45 = &a2[v43];
    *v44 = *v45;
    v46 = v45[1];
    v44[1] = v46;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRelease();
    v47 = v6[10];
    v48 = &a1[v47];
    v49 = &a2[v47];
    v50 = *(_QWORD *)v49;
    v48[8] = v49[8];
    *(_QWORD *)v48 = v50;
    v51 = v6[11];
    v52 = &a1[v51];
    v53 = &a2[v51];
    *v52 = *v53;
    v54 = v53[1];
    v52[1] = v54;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRelease();
    v55 = v6[12];
    v56 = &a1[v55];
    v57 = &a2[v55];
    v58 = type metadata accessor for URL(0);
    v59 = *(_QWORD *)(v58 - 8);
    v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
    v61 = v60(v56, 1, v58);
    v62 = v60(v57, 1, v58);
    if (v61)
    {
      if (!v62)
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        goto LABEL_22;
      }
    }
    else
    {
      if (!v62)
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 24))(v56, v57, v58);
LABEL_22:
        v91 = v6[13];
        v92 = &a1[v91];
        v93 = &a2[v91];
        v94 = v60(&a1[v91], 1, v58);
        v95 = v60(v93, 1, v58);
        v240 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v60;
        v242 = v59;
        if (v94)
        {
          if (!v95)
          {
            (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v92, v93, v58);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v92, 0, 1, v58);
            goto LABEL_28;
          }
        }
        else
        {
          if (!v95)
          {
            (*(void (**)(char *, char *, uint64_t))(v59 + 24))(v92, v93, v58);
LABEL_28:
            v97 = v6[14];
            v98 = &a1[v97];
            v99 = &a2[v97];
            *v98 = *v99;
            v100 = v99[1];
            v98[1] = v100;
            swift_bridgeObjectRetain(v100);
            swift_bridgeObjectRelease();
            *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
            v101 = v6[16];
            v102 = (uint64_t)&a1[v101];
            v103 = &a2[v101];
            v104 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            __srca = (_QWORD *)*((_QWORD *)v104 - 1);
            v105 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            v106 = v105(v102, 1, v104);
            v107 = v105((uint64_t)v103, 1, v104);
            if (v106)
            {
              if (!v107)
              {
                v244 = a3;
                *(_QWORD *)v102 = *(_QWORD *)v103;
                v108 = *((_QWORD *)v103 + 1);
                *(_QWORD *)(v102 + 8) = v108;
                *(_QWORD *)(v102 + 16) = *((_QWORD *)v103 + 2);
                v109 = *((_QWORD *)v103 + 3);
                *(_QWORD *)(v102 + 24) = v109;
                *(_QWORD *)(v102 + 32) = *((_QWORD *)v103 + 4);
                v110 = *((_QWORD *)v103 + 5);
                *(_QWORD *)(v102 + 40) = v110;
                *(_WORD *)(v102 + 48) = *((_WORD *)v103 + 24);
                *(_QWORD *)(v102 + 56) = *((_QWORD *)v103 + 7);
                v111 = *((_QWORD *)v103 + 8);
                *(_BYTE *)(v102 + 72) = v103[72];
                *(_QWORD *)(v102 + 64) = v111;
                v112 = v104[10];
                __dsta = (void *)(v102 + v112);
                v113 = &v103[v112];
                swift_bridgeObjectRetain(v108);
                swift_bridgeObjectRetain(v109);
                v114 = swift_bridgeObjectRetain(v110);
                if (v240(v113, 1, v58, v114))
                {
                  v115 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(__dsta, v113, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v242 + 16))(__dsta, v113, v58);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v242 + 56))(__dsta, 0, 1, v58);
                }
                v164 = v104[11];
                v165 = (void *)(v102 + v164);
                v166 = &v103[v164];
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v240)(&v103[v164], 1, v58))
                {
                  v167 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v242 + 16))(v165, v166, v58);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v242 + 56))(v165, 0, 1, v58);
                }
                v168 = v104[12];
                v169 = v102 + v168;
                v170 = &v103[v168];
                v171 = *(_QWORD *)v170;
                *(_BYTE *)(v169 + 8) = v170[8];
                *(_QWORD *)v169 = v171;
                v172 = v104[13];
                v173 = (_QWORD *)(v102 + v172);
                v174 = &v103[v172];
                *v173 = *(_QWORD *)v174;
                v175 = *((_QWORD *)v174 + 1);
                v173[1] = v175;
                v176 = v104[14];
                v177 = *(_QWORD *)&v103[v176];
                *(_QWORD *)(v102 + v176) = v177;
                v178 = v104[15];
                v179 = (_QWORD *)(v102 + v178);
                v180 = &v103[v178];
                *v179 = *(_QWORD *)v180;
                v181 = *((_QWORD *)v180 + 1);
                v179[1] = v181;
                v182 = v104[16];
                v183 = *(_QWORD *)&v103[v182];
                *(_QWORD *)(v102 + v182) = v183;
                v184 = v104[17];
                v185 = v102 + v184;
                v186 = &v103[v184];
                v187 = *(_OWORD *)v186;
                *(_BYTE *)(v185 + 16) = v186[16];
                *(_OWORD *)v185 = v187;
                v188 = v104[18];
                v189 = v102 + v188;
                v190 = &v103[v188];
                v191 = *(_OWORD *)v190;
                *(_BYTE *)(v189 + 16) = v190[16];
                *(_OWORD *)v189 = v191;
                v192 = (void (*)(uint64_t, _QWORD, uint64_t, int *, __n128))__srca[7];
                swift_bridgeObjectRetain(v175);
                swift_bridgeObjectRetain(v177);
                swift_bridgeObjectRetain(v181);
                v193 = swift_bridgeObjectRetain(v183);
                v192(v102, 0, 1, v104, v193);
                a3 = v244;
                goto LABEL_65;
              }
              goto LABEL_34;
            }
            if (v107)
            {
              sub_1000126B0(v102, type metadata accessor for AccessoryInfoResponseContent.Configuration);
LABEL_34:
              v116 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v102, v103, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
LABEL_65:
              *(_DWORD *)&a1[v6[17]] = *(_DWORD *)&a2[v6[17]];
              v224 = v6[18];
              v225 = *(_QWORD *)&a2[v224];
              *(_QWORD *)&a1[v224] = v225;
              swift_bridgeObjectRetain(v225);
              swift_bridgeObjectRelease();
              v226 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v242 + 24);
              v226(&a1[v6[19]], &a2[v6[19]], v58);
              v226(&a1[v6[20]], &a2[v6[20]], v58);
              v226(&a1[v6[21]], &a2[v6[21]], v58);
              v226(&a1[v6[22]], &a2[v6[22]], v58);
              v226(&a1[v6[23]], &a2[v6[23]], v58);
              v226(&a1[v6[24]], &a2[v6[24]], v58);
              goto LABEL_66;
            }
            v245 = a3;
            *(_QWORD *)v102 = *(_QWORD *)v103;
            v154 = *((_QWORD *)v103 + 1);
            *(_QWORD *)(v102 + 8) = v154;
            swift_bridgeObjectRetain(v154);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v102 + 16) = *((_QWORD *)v103 + 2);
            v155 = *((_QWORD *)v103 + 3);
            *(_QWORD *)(v102 + 24) = v155;
            swift_bridgeObjectRetain(v155);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v102 + 32) = *((_QWORD *)v103 + 4);
            v156 = *((_QWORD *)v103 + 5);
            *(_QWORD *)(v102 + 40) = v156;
            swift_bridgeObjectRetain(v156);
            swift_bridgeObjectRelease();
            *(_WORD *)(v102 + 48) = *((_WORD *)v103 + 24);
            *(_QWORD *)(v102 + 56) = *((_QWORD *)v103 + 7);
            v157 = *((_QWORD *)v103 + 8);
            *(_BYTE *)(v102 + 72) = v103[72];
            *(_QWORD *)(v102 + 64) = v157;
            v158 = v104[10];
            v159 = &v103[v158];
            __dstb = (void *)(v102 + v158);
            v160 = ((uint64_t (*)(void))v240)();
            v161 = ((uint64_t (*)(char *, uint64_t, uint64_t))v240)(v159, 1, v58);
            if (v160)
            {
              if (v161)
              {
                v162 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v163 = __dstb;
LABEL_53:
                memcpy(v163, v159, v162);
                goto LABEL_56;
              }
              (*(void (**)(void *, char *, uint64_t))(v242 + 16))(__dstb, v159, v58);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v242 + 56))(__dstb, 0, 1, v58);
            }
            else
            {
              if (v161)
              {
                (*(void (**)(void *, uint64_t))(v242 + 8))(__dstb, v58);
                v162 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v163 = __dstb;
                goto LABEL_53;
              }
              (*(void (**)(void *, char *, uint64_t))(v242 + 24))(__dstb, v159, v58);
            }
LABEL_56:
            v194 = v104[11];
            v195 = &v103[v194];
            __dstc = (void *)(v102 + v194);
            v196 = ((uint64_t (*)(void))v240)();
            v197 = ((uint64_t (*)(char *, uint64_t, uint64_t))v240)(v195, 1, v58);
            if (v196)
            {
              if (!v197)
              {
                (*(void (**)(void *, char *, uint64_t))(v242 + 16))(__dstc, v195, v58);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v242 + 56))(__dstc, 0, 1, v58);
                goto LABEL_64;
              }
              v198 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v199 = __dstc;
            }
            else
            {
              if (!v197)
              {
                (*(void (**)(void *, char *, uint64_t))(v242 + 24))(__dstc, v195, v58);
                goto LABEL_64;
              }
              (*(void (**)(void *, uint64_t))(v242 + 8))(__dstc, v58);
              v198 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v199 = __dstc;
            }
            memcpy(v199, v195, v198);
LABEL_64:
            a3 = v245;
            v200 = v104[12];
            v201 = v102 + v200;
            v202 = &v103[v200];
            v203 = *(_QWORD *)v202;
            *(_BYTE *)(v201 + 8) = v202[8];
            *(_QWORD *)v201 = v203;
            v204 = v104[13];
            v205 = (_QWORD *)(v102 + v204);
            v206 = &v103[v204];
            *v205 = *(_QWORD *)v206;
            v207 = *((_QWORD *)v206 + 1);
            v205[1] = v207;
            swift_bridgeObjectRetain(v207);
            swift_bridgeObjectRelease();
            v208 = v104[14];
            v209 = *(_QWORD *)&v103[v208];
            *(_QWORD *)(v102 + v208) = v209;
            swift_bridgeObjectRetain(v209);
            swift_bridgeObjectRelease();
            v210 = v104[15];
            v211 = (_QWORD *)(v102 + v210);
            v212 = &v103[v210];
            *v211 = *(_QWORD *)v212;
            v213 = *((_QWORD *)v212 + 1);
            v211[1] = v213;
            swift_bridgeObjectRetain(v213);
            swift_bridgeObjectRelease();
            v214 = v104[16];
            v215 = *(_QWORD *)&v103[v214];
            *(_QWORD *)(v102 + v214) = v215;
            swift_bridgeObjectRetain(v215);
            swift_bridgeObjectRelease();
            v216 = v104[17];
            v217 = v102 + v216;
            v218 = &v103[v216];
            v219 = *(_OWORD *)v218;
            *(_BYTE *)(v217 + 16) = v218[16];
            *(_OWORD *)v217 = v219;
            v220 = v104[18];
            v221 = v102 + v220;
            v222 = &v103[v220];
            v223 = *(_OWORD *)v222;
            *(_BYTE *)(v221 + 16) = v222[16];
            *(_OWORD *)v221 = v223;
            goto LABEL_65;
          }
          (*(void (**)(char *, uint64_t))(v59 + 8))(v92, v58);
        }
        v96 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
        goto LABEL_28;
      }
      (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
    }
    v90 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
LABEL_7:
    v37 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_66;
  }
  v243 = a3;
  v239 = v7;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  a1[v6[5]] = a2[v6[5]];
  a1[v6[6]] = a2[v6[6]];
  a1[v6[7]] = a2[v6[7]];
  v12 = v6[8];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *v13 = *v14;
  v15 = v14[1];
  v13[1] = v15;
  v16 = v6[9];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *v17 = *v18;
  v19 = v18[1];
  v17[1] = v19;
  v20 = v6[10];
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v22[8];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v23;
  v24 = v6[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *v25 = *v26;
  v27 = v26[1];
  v25[1] = v27;
  v28 = v6[12];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for URL(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = v15;
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v32 + 48);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v19);
  v35 = swift_bridgeObjectRetain(v27);
  if (v34(v30, 1, v31, v35))
  {
    v36 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v63 = v6[13];
  v64 = &a1[v63];
  v65 = &a2[v63];
  v241 = v32;
  __src = (unsigned int (*)(char *, uint64_t, uint64_t))v34;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v34)(&a2[v63], 1, v31))
  {
    v66 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v64, v65, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v64, 0, 1, v31);
  }
  v67 = v6[14];
  v68 = &a1[v67];
  v69 = &a2[v67];
  *v68 = *v69;
  v70 = v69[1];
  v68[1] = v70;
  *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
  v71 = v6[16];
  v72 = &a1[v71];
  v73 = &a2[v71];
  v74 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v75 = *((_QWORD *)v74 - 1);
  v76 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v75 + 48);
  v77 = swift_bridgeObjectRetain(v70);
  if (v76(v73, 1, v74, v77))
  {
    v78 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    v80 = v239;
    v79 = v241;
    a3 = v243;
  }
  else
  {
    v232 = v75;
    *v72 = *v73;
    v81 = v73[1];
    v72[1] = v81;
    v72[2] = v73[2];
    v82 = v73[3];
    v72[3] = v82;
    v72[4] = v73[4];
    v83 = v73[5];
    v72[5] = v83;
    *((_WORD *)v72 + 24) = *((_WORD *)v73 + 24);
    v72[7] = v73[7];
    v84 = v73[8];
    *((_BYTE *)v72 + 72) = *((_BYTE *)v73 + 72);
    v72[8] = v84;
    v85 = v74[10];
    __dst = (char *)v72 + v85;
    v86 = (char *)v73 + v85;
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v82);
    v87 = swift_bridgeObjectRetain(v83);
    v88 = __src;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))__src)(v86, 1, v31, v87))
    {
      v89 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v241 + 16))(__dst, v86, v31);
      v88 = __src;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v241 + 56))(__dst, 0, 1, v31);
    }
    v117 = v74[11];
    v118 = (char *)v72 + v117;
    v119 = (char *)v73 + v117;
    if (v88((char *)v73 + v117, 1, v31))
    {
      v120 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v118, v119, v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v241 + 56))(v118, 0, 1, v31);
    }
    v121 = v74[12];
    v122 = (char *)v72 + v121;
    v123 = (char *)v73 + v121;
    v124 = *(_QWORD *)v123;
    v122[8] = v123[8];
    *(_QWORD *)v122 = v124;
    v125 = v74[13];
    v126 = (_QWORD *)((char *)v72 + v125);
    v127 = (_QWORD *)((char *)v73 + v125);
    *v126 = *v127;
    v128 = v127[1];
    v126[1] = v128;
    v129 = v74[14];
    v130 = *(_QWORD *)((char *)v73 + v129);
    *(_QWORD *)((char *)v72 + v129) = v130;
    v131 = v74[15];
    v132 = (_QWORD *)((char *)v72 + v131);
    v133 = (_QWORD *)((char *)v73 + v131);
    *v132 = *v133;
    v134 = v133[1];
    v132[1] = v134;
    v135 = v74[16];
    v136 = *(_QWORD *)((char *)v73 + v135);
    *(_QWORD *)((char *)v72 + v135) = v136;
    v137 = v74[17];
    v138 = (char *)v72 + v137;
    v139 = (char *)v73 + v137;
    v140 = *(_OWORD *)v139;
    v138[16] = v139[16];
    *(_OWORD *)v138 = v140;
    v141 = v74[18];
    v142 = (char *)v72 + v141;
    v143 = (char *)v73 + v141;
    v144 = *(_OWORD *)v143;
    v142[16] = v143[16];
    *(_OWORD *)v142 = v144;
    v145 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v232 + 56);
    swift_bridgeObjectRetain(v128);
    swift_bridgeObjectRetain(v130);
    swift_bridgeObjectRetain(v134);
    v146 = swift_bridgeObjectRetain(v136);
    v145(v72, 0, 1, v74, v146);
    v79 = v241;
    a3 = v243;
    v80 = v239;
  }
  *(_DWORD *)&a1[v6[17]] = *(_DWORD *)&a2[v6[17]];
  v147 = v6[18];
  v148 = *(_QWORD *)&a2[v147];
  *(_QWORD *)&a1[v147] = v148;
  v149 = v6[19];
  v150 = &a1[v149];
  v151 = &a2[v149];
  v152 = *(void (**)(char *, char *, uint64_t, __n128))(v79 + 16);
  v153 = swift_bridgeObjectRetain(v148);
  v152(v150, v151, v31, v153);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v152)(&a1[v6[20]], &a2[v6[20]], v31);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v152)(&a1[v6[21]], &a2[v6[21]], v31);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v152)(&a1[v6[22]], &a2[v6[22]], v31);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v152)(&a1[v6[23]], &a2[v6[23]], v31);
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v152)(&a1[v6[24]], &a2[v6[24]], v31);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v80 + 56))(a1, 0, 1, v6);
LABEL_66:
  v227 = *(int *)(a3 + 20);
  v228 = &a1[v227];
  v229 = &a2[v227];
  *v228 = *v229;
  v230 = v229[1];
  v228[1] = v230;
  swift_bridgeObjectRetain(v230);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1006DC7E4(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  void *__dsta;
  char *__dst;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v57 = v7;
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    a1[v6[5]] = a2[v6[5]];
    a1[v6[6]] = a2[v6[6]];
    a1[v6[7]] = a2[v6[7]];
    *(_OWORD *)&a1[v6[8]] = *(_OWORD *)&a2[v6[8]];
    *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
    v10 = v6[10];
    v11 = &a1[v10];
    v12 = &a2[v10];
    *(_QWORD *)v11 = *(_QWORD *)v12;
    v11[8] = v12[8];
    *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
    v13 = v6[12];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v16 = type metadata accessor for URL(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    if (v18(v15, 1, v16))
    {
      v19 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v20 = v6[13];
    v21 = &a1[v20];
    v22 = &a2[v20];
    v56 = v17;
    if (v18(&a2[v20], 1, v16))
    {
      v23 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v22, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v21, 0, 1, v16);
    }
    *(_OWORD *)&a1[v6[14]] = *(_OWORD *)&a2[v6[14]];
    *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
    v24 = v6[16];
    v25 = &a1[v24];
    v26 = &a2[v24];
    v27 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v28 = *((_QWORD *)v27 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
    {
      v29 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      v30 = v56;
    }
    else
    {
      v54 = v28;
      v55 = a3;
      v31 = *((_OWORD *)v26 + 1);
      *(_OWORD *)v25 = *(_OWORD *)v26;
      *((_OWORD *)v25 + 1) = v31;
      *((_OWORD *)v25 + 2) = *((_OWORD *)v26 + 2);
      *((_WORD *)v25 + 24) = *((_WORD *)v26 + 24);
      v32 = *((_QWORD *)v26 + 8);
      *((_QWORD *)v25 + 7) = *((_QWORD *)v26 + 7);
      *((_QWORD *)v25 + 8) = v32;
      v25[72] = v26[72];
      v33 = v27[10];
      v34 = &v25[v33];
      v35 = &v26[v33];
      if (v18(&v26[v33], 1, v16))
      {
        v36 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
        v30 = v56;
      }
      else
      {
        v37 = v34;
        __dsta = v34;
        v30 = v56;
        (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v37, v35, v16);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v56 + 56))(__dsta, 0, 1, v16);
      }
      v38 = v27[11];
      __dst = &v25[v38];
      v39 = &v26[v38];
      if (v18(&v26[v38], 1, v16))
      {
        v40 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v39, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(__dst, v39, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v16);
      }
      v41 = v27[12];
      v42 = &v25[v41];
      v43 = &v26[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      *(_OWORD *)&v25[v27[13]] = *(_OWORD *)&v26[v27[13]];
      *(_QWORD *)&v25[v27[14]] = *(_QWORD *)&v26[v27[14]];
      *(_OWORD *)&v25[v27[15]] = *(_OWORD *)&v26[v27[15]];
      *(_QWORD *)&v25[v27[16]] = *(_QWORD *)&v26[v27[16]];
      v44 = v27[17];
      v45 = &v25[v44];
      v46 = &v26[v44];
      v45[16] = v46[16];
      *(_OWORD *)v45 = *(_OWORD *)v46;
      v47 = v27[18];
      v48 = &v25[v47];
      v49 = &v26[v47];
      v48[16] = v49[16];
      *(_OWORD *)v48 = *(_OWORD *)v49;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v54 + 56))(v25, 0, 1, v27);
      a3 = v55;
    }
    *(_DWORD *)&a1[v6[17]] = *(_DWORD *)&a2[v6[17]];
    *(_QWORD *)&a1[v6[18]] = *(_QWORD *)&a2[v6[18]];
    v50 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    v50(&a1[v6[19]], &a2[v6[19]], v16);
    v50(&a1[v6[20]], &a2[v6[20]], v16);
    v50(&a1[v6[21]], &a2[v6[21]], v16);
    v50(&a1[v6[22]], &a2[v6[22]], v16);
    v50(&a1[v6[23]], &a2[v6[23]], v16);
    v50(&a1[v6[24]], &a2[v6[24]], v16);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v57 + 56))(a1, 0, 1, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

_BYTE *sub_1006DCCF4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t (*v8)(_BYTE *, uint64_t, int *);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  int v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  void (**v60)(void *, const void *, uint64_t);
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int *v82;
  uint64_t (*v83)(uint64_t, uint64_t, int *);
  int v84;
  int v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  void (*v106)(void *, const void *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  int v113;
  int v114;
  size_t v115;
  void *v116;
  uint64_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  void (*v130)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v131;
  _QWORD *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  char *v138;
  int v139;
  int v140;
  size_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  void (**__src)(void *, const void *, uint64_t);
  _QWORD *__srca;
  unsigned int (*v169)(char *, uint64_t, uint64_t);
  uint64_t v170;

  v6 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_1000126B0((uint64_t)a1, type metadata accessor for BeaconProductInfoRecord);
      goto LABEL_7;
    }
    v22 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(a1, a2, v22);
    a1[v6[5]] = a2[v6[5]];
    a1[v6[6]] = a2[v6[6]];
    a1[v6[7]] = a2[v6[7]];
    v23 = v6[8];
    v24 = &a1[v23];
    v25 = (uint64_t *)&a2[v23];
    v27 = *v25;
    v26 = v25[1];
    *v24 = v27;
    v24[1] = v26;
    swift_bridgeObjectRelease();
    v28 = v6[9];
    v29 = &a1[v28];
    v30 = (uint64_t *)&a2[v28];
    v32 = *v30;
    v31 = v30[1];
    *v29 = v32;
    v29[1] = v31;
    swift_bridgeObjectRelease();
    v33 = v6[10];
    v34 = &a1[v33];
    v35 = &a2[v33];
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[8] = v35[8];
    v36 = v6[11];
    v37 = &a1[v36];
    v38 = (uint64_t *)&a2[v36];
    v40 = *v38;
    v39 = v38[1];
    *v37 = v40;
    v37[1] = v39;
    swift_bridgeObjectRelease();
    v41 = v6[12];
    v42 = &a1[v41];
    v43 = &a2[v41];
    v44 = type metadata accessor for URL(0);
    v45 = *(_QWORD *)(v44 - 8);
    v46 = *(uint64_t (**)(void))(v45 + 48);
    v47 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v42, 1, v44);
    v48 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v43, 1, v44);
    if (v47)
    {
      if (!v48)
      {
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v42, v43, v44);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
        goto LABEL_22;
      }
    }
    else
    {
      if (!v48)
      {
        (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v42, v43, v44);
LABEL_22:
        v68 = v6[13];
        v69 = &a1[v68];
        v70 = &a2[v68];
        v71 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v46)(&a1[v68], 1, v44);
        v72 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v70, 1, v44);
        v170 = v45;
        v166 = a3;
        if (v71)
        {
          if (!v72)
          {
            (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v69, v70, v44);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v69, 0, 1, v44);
            goto LABEL_28;
          }
        }
        else
        {
          if (!v72)
          {
            (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v69, v70, v44);
LABEL_28:
            v74 = v6[14];
            v75 = &a1[v74];
            v76 = (uint64_t *)&a2[v74];
            v78 = *v76;
            v77 = v76[1];
            *v75 = v78;
            v75[1] = v77;
            swift_bridgeObjectRelease();
            *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
            v79 = v6[16];
            v80 = (uint64_t)&a1[v79];
            v81 = &a2[v79];
            v82 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            __srca = (_QWORD *)*((_QWORD *)v82 - 1);
            v83 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            v84 = v83(v80, 1, v82);
            v85 = v83((uint64_t)v81, 1, v82);
            if (v84)
            {
              if (!v85)
              {
                v86 = *((_OWORD *)v81 + 1);
                *(_OWORD *)v80 = *(_OWORD *)v81;
                *(_OWORD *)(v80 + 16) = v86;
                *(_OWORD *)(v80 + 32) = *((_OWORD *)v81 + 2);
                *(_WORD *)(v80 + 48) = *((_WORD *)v81 + 24);
                v87 = *((_QWORD *)v81 + 8);
                *(_QWORD *)(v80 + 56) = *((_QWORD *)v81 + 7);
                *(_QWORD *)(v80 + 64) = v87;
                *(_BYTE *)(v80 + 72) = v81[72];
                v88 = v82[10];
                v89 = (void *)(v80 + v88);
                v90 = &v81[v88];
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v46)(&v81[v88], 1, v44))
                {
                  v91 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v91 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v170 + 32))(v89, v90, v44);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v89, 0, 1, v44);
                }
                v117 = v82[11];
                v118 = (void *)(v80 + v117);
                v119 = &v81[v117];
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v46)(&v81[v117], 1, v44))
                {
                  v120 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v170 + 32))(v118, v119, v44);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v118, 0, 1, v44);
                }
                v121 = v82[12];
                v122 = v80 + v121;
                v123 = &v81[v121];
                *(_QWORD *)v122 = *(_QWORD *)v123;
                *(_BYTE *)(v122 + 8) = v123[8];
                *(_OWORD *)(v80 + v82[13]) = *(_OWORD *)&v81[v82[13]];
                *(_QWORD *)(v80 + v82[14]) = *(_QWORD *)&v81[v82[14]];
                *(_OWORD *)(v80 + v82[15]) = *(_OWORD *)&v81[v82[15]];
                *(_QWORD *)(v80 + v82[16]) = *(_QWORD *)&v81[v82[16]];
                v124 = v82[17];
                v125 = v80 + v124;
                v126 = &v81[v124];
                *(_BYTE *)(v125 + 16) = v126[16];
                *(_OWORD *)v125 = *(_OWORD *)v126;
                v127 = v82[18];
                v128 = v80 + v127;
                v129 = &v81[v127];
                *(_BYTE *)(v128 + 16) = v129[16];
                *(_OWORD *)v128 = *(_OWORD *)v129;
                ((void (*)(uint64_t, _QWORD, uint64_t, int *))__srca[7])(v80, 0, 1, v82);
                goto LABEL_51;
              }
LABEL_34:
              v92 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v80, v81, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
LABEL_51:
              a3 = v166;
LABEL_52:
              *(_DWORD *)&a1[v6[17]] = *(_DWORD *)&a2[v6[17]];
              *(_QWORD *)&a1[v6[18]] = *(_QWORD *)&a2[v6[18]];
              swift_bridgeObjectRelease();
              v130 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v170 + 40);
              v130(&a1[v6[19]], &a2[v6[19]], v44);
              v130(&a1[v6[20]], &a2[v6[20]], v44);
              v130(&a1[v6[21]], &a2[v6[21]], v44);
              v130(&a1[v6[22]], &a2[v6[22]], v44);
              v130(&a1[v6[23]], &a2[v6[23]], v44);
              v130(&a1[v6[24]], &a2[v6[24]], v44);
              goto LABEL_53;
            }
            if (v85)
            {
              sub_1000126B0(v80, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_34;
            }
            v107 = *((_QWORD *)v81 + 1);
            *(_QWORD *)v80 = *(_QWORD *)v81;
            *(_QWORD *)(v80 + 8) = v107;
            swift_bridgeObjectRelease();
            v108 = *((_QWORD *)v81 + 3);
            *(_QWORD *)(v80 + 16) = *((_QWORD *)v81 + 2);
            *(_QWORD *)(v80 + 24) = v108;
            swift_bridgeObjectRelease();
            v109 = *((_QWORD *)v81 + 5);
            *(_QWORD *)(v80 + 32) = *((_QWORD *)v81 + 4);
            *(_QWORD *)(v80 + 40) = v109;
            swift_bridgeObjectRelease();
            *(_WORD *)(v80 + 48) = *((_WORD *)v81 + 24);
            v110 = *((_QWORD *)v81 + 8);
            *(_QWORD *)(v80 + 56) = *((_QWORD *)v81 + 7);
            *(_QWORD *)(v80 + 64) = v110;
            *(_BYTE *)(v80 + 72) = v81[72];
            v111 = v82[10];
            v112 = &v81[v111];
            v163 = (void *)(v80 + v111);
            v113 = v46();
            v114 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v112, 1, v44);
            if (v113)
            {
              if (v114)
              {
                v115 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v116 = v163;
LABEL_56:
                memcpy(v116, v112, v115);
                goto LABEL_59;
              }
              (*(void (**)(void *, char *, uint64_t))(v170 + 32))(v163, v112, v44);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v163, 0, 1, v44);
            }
            else
            {
              if (v114)
              {
                (*(void (**)(void *, uint64_t))(v170 + 8))(v163, v44);
                v115 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v116 = v163;
                goto LABEL_56;
              }
              (*(void (**)(void *, char *, uint64_t))(v170 + 40))(v163, v112, v44);
            }
LABEL_59:
            v137 = v82[11];
            v138 = &v81[v137];
            v164 = (void *)(v80 + v137);
            v139 = v46();
            v140 = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v138, 1, v44);
            if (v139)
            {
              if (!v140)
              {
                (*(void (**)(void *, char *, uint64_t))(v170 + 32))(v164, v138, v44);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v170 + 56))(v164, 0, 1, v44);
                goto LABEL_67;
              }
              v141 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v142 = v164;
            }
            else
            {
              if (!v140)
              {
                (*(void (**)(void *, char *, uint64_t))(v170 + 40))(v164, v138, v44);
                goto LABEL_67;
              }
              (*(void (**)(void *, uint64_t))(v170 + 8))(v164, v44);
              v141 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v142 = v164;
            }
            memcpy(v142, v138, v141);
LABEL_67:
            a3 = v166;
            v143 = v82[12];
            v144 = v80 + v143;
            v145 = &v81[v143];
            *(_QWORD *)v144 = *(_QWORD *)v145;
            *(_BYTE *)(v144 + 8) = v145[8];
            v146 = v82[13];
            v147 = (_QWORD *)(v80 + v146);
            v148 = &v81[v146];
            v150 = *(_QWORD *)v148;
            v149 = *((_QWORD *)v148 + 1);
            *v147 = v150;
            v147[1] = v149;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v80 + v82[14]) = *(_QWORD *)&v81[v82[14]];
            swift_bridgeObjectRelease();
            v151 = v82[15];
            v152 = (_QWORD *)(v80 + v151);
            v153 = &v81[v151];
            v155 = *(_QWORD *)v153;
            v154 = *((_QWORD *)v153 + 1);
            *v152 = v155;
            v152[1] = v154;
            swift_bridgeObjectRelease();
            *(_QWORD *)(v80 + v82[16]) = *(_QWORD *)&v81[v82[16]];
            swift_bridgeObjectRelease();
            v156 = v82[17];
            v157 = v80 + v156;
            v158 = &v81[v156];
            *(_OWORD *)v157 = *(_OWORD *)v158;
            *(_BYTE *)(v157 + 16) = v158[16];
            v159 = v82[18];
            v160 = v80 + v159;
            v161 = &v81[v159];
            *(_BYTE *)(v160 + 16) = v161[16];
            *(_OWORD *)v160 = *(_OWORD *)v161;
            goto LABEL_52;
          }
          (*(void (**)(char *, uint64_t))(v45 + 8))(v69, v44);
        }
        v73 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
        goto LABEL_28;
      }
      (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
    }
    v67 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_22;
  }
  if (v10)
  {
LABEL_7:
    v21 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_53;
  }
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
  a1[v6[5]] = a2[v6[5]];
  a1[v6[6]] = a2[v6[6]];
  a1[v6[7]] = a2[v6[7]];
  *(_OWORD *)&a1[v6[8]] = *(_OWORD *)&a2[v6[8]];
  *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
  v12 = v6[10];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  *(_OWORD *)&a1[v6[11]] = *(_OWORD *)&a2[v6[11]];
  v15 = v6[12];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = type metadata accessor for URL(0);
  v19 = *(_QWORD *)(v18 - 8);
  v169 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v169(v17, 1, v18))
  {
    v20 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v49 = v6[13];
  v50 = &a1[v49];
  v51 = &a2[v49];
  __src = (void (**)(void *, const void *, uint64_t))v19;
  v52 = a3;
  if (v169(&a2[v49], 1, v18))
  {
    v53 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v50, v51, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v50, 0, 1, v18);
  }
  *(_OWORD *)&a1[v6[14]] = *(_OWORD *)&a2[v6[14]];
  *(_QWORD *)&a1[v6[15]] = *(_QWORD *)&a2[v6[15]];
  v54 = v6[16];
  v55 = &a1[v54];
  v56 = &a2[v54];
  v57 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v58 = *((_QWORD *)v57 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v58 + 48))(v56, 1, v57))
  {
    v59 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    v60 = __src;
    a3 = v52;
  }
  else
  {
    v162 = v58;
    v165 = v52;
    v61 = v56[1];
    *v55 = *v56;
    v55[1] = v61;
    v55[2] = v56[2];
    *((_WORD *)v55 + 24) = *((_WORD *)v56 + 24);
    v62 = *((_QWORD *)v56 + 8);
    *((_QWORD *)v55 + 7) = *((_QWORD *)v56 + 7);
    *((_QWORD *)v55 + 8) = v62;
    *((_BYTE *)v55 + 72) = *((_BYTE *)v56 + 72);
    v63 = v57[10];
    v64 = (char *)v55 + v63;
    v65 = (char *)v56 + v63;
    if (v169((char *)v56 + v63, 1, v18))
    {
      v66 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      __src[4](v64, v65, v18);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v64, 0, 1, v18);
    }
    v93 = v57[11];
    v94 = (char *)v55 + v93;
    v95 = (char *)v56 + v93;
    if (v169((char *)v56 + v93, 1, v18))
    {
      v96 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v96 - 8) + 64));
    }
    else
    {
      __src[4](v94, v95, v18);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))__src[7])(v94, 0, 1, v18);
    }
    v97 = v57[12];
    v98 = (char *)v55 + v97;
    v99 = (char *)v56 + v97;
    *(_QWORD *)v98 = *(_QWORD *)v99;
    v98[8] = v99[8];
    *(_OWORD *)((char *)v55 + v57[13]) = *(_OWORD *)((char *)v56 + v57[13]);
    *(_QWORD *)((char *)v55 + v57[14]) = *(_QWORD *)((char *)v56 + v57[14]);
    *(_OWORD *)((char *)v55 + v57[15]) = *(_OWORD *)((char *)v56 + v57[15]);
    *(_QWORD *)((char *)v55 + v57[16]) = *(_QWORD *)((char *)v56 + v57[16]);
    v100 = v57[17];
    v101 = (char *)v55 + v100;
    v102 = (char *)v56 + v100;
    v101[16] = v102[16];
    *(_OWORD *)v101 = *(_OWORD *)v102;
    v103 = v57[18];
    v104 = (char *)v55 + v103;
    v105 = (char *)v56 + v103;
    v104[16] = v105[16];
    *(_OWORD *)v104 = *(_OWORD *)v105;
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v162 + 56))(v55, 0, 1, v57);
    a3 = v165;
    v60 = __src;
  }
  *(_DWORD *)&a1[v6[17]] = *(_DWORD *)&a2[v6[17]];
  *(_QWORD *)&a1[v6[18]] = *(_QWORD *)&a2[v6[18]];
  v106 = v60[4];
  v106(&a1[v6[19]], &a2[v6[19]], v18);
  v106(&a1[v6[20]], &a2[v6[20]], v18);
  v106(&a1[v6[21]], &a2[v6[21]], v18);
  v106(&a1[v6[22]], &a2[v6[22]], v18);
  v106(&a1[v6[23]], &a2[v6[23]], v18);
  v106(&a1[v6[24]], &a2[v6[24]], v18);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
LABEL_53:
  v131 = *(int *)(a3 + 20);
  v132 = &a1[v131];
  v133 = (uint64_t *)&a2[v131];
  v135 = *v133;
  v134 = v133[1];
  *v132 = v135;
  v132[1] = v134;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1006DDA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006DDA60);
}

uint64_t sub_1006DDA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_10001A9A8(&qword_10110EEB0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1006DDAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006DDAFC);
}

uint64_t sub_1006DDAFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_10001A9A8(&qword_10110EEB0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

void sub_1006DDB7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100149C5C(319, (unint64_t *)&unk_101104828, type metadata accessor for BeaconProductInfoRecord);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_100E498F8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_1006DDBFC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = (char *)a2 + *(int *)(a3 + 20);
    v7 = type metadata accessor for StableIdentifier(0);
    swift_bridgeObjectRetain(v5);
    v8 = (char *)&loc_1006DDC88 + 4 * byte_100E4981C[swift_getEnumCaseMultiPayload(v6, v7)];
    __asm { BR              X10 }
  }
  v9 = *a2;
  *a1 = *a2;
  v10 = v9 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v10;
}

uint64_t sub_1006DE5A0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v4, v5))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v7 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + a2[24];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = a1 + a2[26];
  v12 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v12 - 1) + 48))(v11, 1, v12))
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v13 = v11 + v12[12];
    v14 = type metadata accessor for URL(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (!v16(v13, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    v17 = v11 + v12[13];
    if (!v16(v17, 1, v14))
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease();
    v18 = v11 + v12[16];
    v19 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v18 + *(int *)(v19 + 40);
      if (!v16(v20, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v14);
      v21 = v18 + *(int *)(v19 + 44);
      if (!v16(v21, 1, v14))
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v21, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v11 + v12[19], v14);
    v22(v11 + v12[20], v14);
    v22(v11 + v12[21], v14);
    v22(v11 + v12[22], v14);
    v22(v11 + v12[23], v14);
    v22(v11 + v12[24], v14);
  }
  type metadata accessor for ProductInfoState(0);
  return swift_bridgeObjectRelease();
}

void sub_1006DEA14(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (char *)a2 + *(int *)(a3 + 20);
  v5 = type metadata accessor for StableIdentifier(0);
  swift_bridgeObjectRetain(v3);
  v6 = (char *)sub_1006DEA94 + 4 * byte_100E49826[swift_getEnumCaseMultiPayload(v4, v5)];
  __asm { BR              X10 }
}

uint64_t sub_1006DEA94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__dst, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  int *v116;
  uint64_t v117;
  unsigned int (*v118)(char *, uint64_t, int *, __n128);
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  __n128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  void (*v155)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  void (*v162)(char *, char *, uint64_t, __n128);
  __n128 v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  void *v169;
  unsigned int (*v170)(const void *, uint64_t, uint64_t, __n128);
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  unsigned int (*v180)(char *, uint64_t, uint64_t);
  uint64_t v181;

  v35 = v33[1];
  *v30 = *v33;
  v30[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_storeEnumTagMultiPayload(v30, v31, v32);
  v36 = v28[6];
  v37 = v28[7];
  v38 = (_QWORD *)(v34 + v36);
  v39 = (_QWORD *)(v29 + v36);
  v176 = v39[1];
  *v38 = *v39;
  v38[1] = v176;
  v40 = (_QWORD *)(v34 + v37);
  v41 = (_QWORD *)(v29 + v37);
  v179 = v41[1];
  *v40 = *v41;
  v40[1] = v179;
  v42 = v28[8];
  v43 = v28[9];
  v44 = (_QWORD *)(v34 + v42);
  v45 = (_QWORD *)(v29 + v42);
  v172 = v45[1];
  *v44 = *v45;
  v44[1] = v172;
  v46 = (_QWORD *)(v34 + v43);
  v47 = (_QWORD *)(v29 + v43);
  v174 = v47[1];
  *v46 = *v47;
  v46[1] = v174;
  v48 = v28[11];
  *(_QWORD *)(v34 + v28[10]) = *(_QWORD *)(v29 + v28[10]);
  *(_QWORD *)(v34 + v48) = *(_QWORD *)(v29 + v48);
  v49 = v28[13];
  *(_QWORD *)(v34 + v28[12]) = *(_QWORD *)(v29 + v28[12]);
  v50 = (_QWORD *)(v34 + v49);
  v51 = (_QWORD *)(v29 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  v53 = v28[15];
  *(_BYTE *)(v34 + v28[14]) = *(_BYTE *)(v29 + v28[14]);
  *(_QWORD *)(v34 + v53) = *(_QWORD *)(v29 + v53);
  v54 = v28[16];
  v55 = v28[17];
  v56 = (_QWORD *)(v34 + v54);
  v57 = (_QWORD *)(v29 + v54);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  *(_QWORD *)(v34 + v55) = *(_QWORD *)(v29 + v55);
  v59 = v28[19];
  *(_QWORD *)(v34 + v28[18]) = *(_QWORD *)(v29 + v28[18]);
  v60 = (_QWORD *)(v34 + v59);
  v61 = (_QWORD *)(v29 + v59);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  v63 = v28[20];
  v64 = v28[21];
  v65 = *(_QWORD *)(v29 + v63);
  *(_QWORD *)(v34 + v63) = v65;
  v66 = *(_QWORD *)(v29 + v64);
  *(_QWORD *)(v34 + v64) = v66;
  v67 = v28[23];
  *(_BYTE *)(v34 + v28[22]) = *(_BYTE *)(v29 + v28[22]);
  *(_BYTE *)(v34 + v67) = *(_BYTE *)(v29 + v67);
  v68 = v28[24];
  v181 = v34;
  v169 = (void *)(v34 + v68);
  v69 = (const void *)(v29 + v68);
  v70 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v70 - 8);
  v170 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v71 + 48);
  swift_bridgeObjectRetain(v176);
  swift_bridgeObjectRetain(v179);
  swift_bridgeObjectRetain(v172);
  swift_bridgeObjectRetain(v174);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v65);
  v72 = swift_bridgeObjectRetain(v66);
  if (v170(v69, 1, v70, v72))
  {
    v73 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v169, v69, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v71 + 16))(v169, v69, v70);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v71 + 56))(v169, 0, 1, v70);
  }
  v74 = v181;
  v75 = v28[26];
  *(_WORD *)(v181 + v28[25]) = *(_WORD *)(v29 + v28[25]);
  v76 = (char *)(v181 + v75);
  v77 = (char *)(v29 + v75);
  v78 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v79 = *((_QWORD *)v78 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v79 + 48))(v77, 1, v78))
  {
    v80 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    v173 = v79;
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v76, v77, v70);
    v76[v78[5]] = v77[v78[5]];
    v76[v78[6]] = v77[v78[6]];
    v76[v78[7]] = v77[v78[7]];
    v81 = v78[8];
    v82 = &v76[v81];
    v83 = &v77[v81];
    v84 = *((_QWORD *)v83 + 1);
    *(_QWORD *)v82 = *(_QWORD *)v83;
    *((_QWORD *)v82 + 1) = v84;
    v85 = v78[9];
    v86 = &v76[v85];
    v87 = &v77[v85];
    v88 = *((_QWORD *)v87 + 1);
    *(_QWORD *)v86 = *(_QWORD *)v87;
    *((_QWORD *)v86 + 1) = v88;
    v89 = v78[10];
    v90 = &v76[v89];
    v91 = &v77[v89];
    *(_QWORD *)v90 = *(_QWORD *)v91;
    v90[8] = v91[8];
    v92 = v78[11];
    v93 = &v76[v92];
    v94 = &v77[v92];
    v95 = *((_QWORD *)v94 + 1);
    *(_QWORD *)v93 = *(_QWORD *)v94;
    *((_QWORD *)v93 + 1) = v95;
    v96 = v78[12];
    v177 = &v76[v96];
    v97 = &v77[v96];
    v98 = type metadata accessor for URL(0);
    v99 = *(_QWORD *)(v98 - 8);
    v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48);
    v101 = v84;
    v102 = v98;
    swift_bridgeObjectRetain(v101);
    swift_bridgeObjectRetain(v88);
    v103 = swift_bridgeObjectRetain(v95);
    v180 = v100;
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v100)(v97, 1, v102, v103))
    {
      v104 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v177, v97, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v177, v97, v102);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v177, 0, 1, v102);
    }
    v105 = v78[13];
    v106 = &v76[v105];
    v107 = &v77[v105];
    v175 = v99;
    v178 = v102;
    if (v180(&v77[v105], 1, v102))
    {
      v108 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v106, v107, v102);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v106, 0, 1, v102);
    }
    v109 = v78[14];
    v110 = &v76[v109];
    v111 = &v77[v109];
    v112 = *((_QWORD *)v111 + 1);
    *(_QWORD *)v110 = *(_QWORD *)v111;
    *((_QWORD *)v110 + 1) = v112;
    *(_QWORD *)&v76[v78[15]] = *(_QWORD *)&v77[v78[15]];
    v113 = v78[16];
    v114 = &v76[v113];
    v115 = &v77[v113];
    v116 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v117 = *((_QWORD *)v116 - 1);
    v118 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v117 + 48);
    v119 = swift_bridgeObjectRetain(v112);
    if (v118(v115, 1, v116, v119))
    {
      v120 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
    }
    else
    {
      v121 = *((_QWORD *)v115 + 1);
      *(_QWORD *)v114 = *(_QWORD *)v115;
      *((_QWORD *)v114 + 1) = v121;
      v122 = *((_QWORD *)v115 + 3);
      *((_QWORD *)v114 + 2) = *((_QWORD *)v115 + 2);
      *((_QWORD *)v114 + 3) = v122;
      v123 = *((_QWORD *)v115 + 5);
      *((_QWORD *)v114 + 4) = *((_QWORD *)v115 + 4);
      *((_QWORD *)v114 + 5) = v123;
      *((_WORD *)v114 + 24) = *((_WORD *)v115 + 24);
      v114[72] = v115[72];
      v124 = *((_QWORD *)v115 + 8);
      *((_QWORD *)v114 + 7) = *((_QWORD *)v115 + 7);
      *((_QWORD *)v114 + 8) = v124;
      v125 = v116[10];
      v171 = &v114[v125];
      v126 = &v115[v125];
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRetain(v122);
      v127 = swift_bridgeObjectRetain(v123);
      v128 = v178;
      if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v180)(v126, 1, v178, v127))
      {
        v129 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v171, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v171, v126, v178);
        v128 = v178;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v171, 0, 1, v178);
      }
      v130 = v116[11];
      v131 = &v114[v130];
      v132 = &v115[v130];
      if (v180(&v115[v130], 1, v128))
      {
        v133 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v131, v132, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v131, v132, v128);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v131, 0, 1, v128);
      }
      v134 = v116[12];
      v135 = &v114[v134];
      v136 = &v115[v134];
      *(_QWORD *)v135 = *(_QWORD *)v136;
      v135[8] = v136[8];
      v137 = v116[13];
      v138 = &v114[v137];
      v139 = &v115[v137];
      v140 = *((_QWORD *)v139 + 1);
      *(_QWORD *)v138 = *(_QWORD *)v139;
      *((_QWORD *)v138 + 1) = v140;
      v141 = v116[14];
      v142 = *(_QWORD *)&v115[v141];
      *(_QWORD *)&v114[v141] = v142;
      v143 = v116[15];
      v144 = &v114[v143];
      v145 = &v115[v143];
      v146 = *((_QWORD *)v145 + 1);
      *(_QWORD *)v144 = *(_QWORD *)v145;
      *((_QWORD *)v144 + 1) = v146;
      v147 = v116[16];
      v148 = *(_QWORD *)&v115[v147];
      *(_QWORD *)&v114[v147] = v148;
      v149 = v116[17];
      v150 = &v114[v149];
      v151 = &v115[v149];
      *(_OWORD *)v150 = *(_OWORD *)v151;
      v150[16] = v151[16];
      v152 = v116[18];
      v153 = &v114[v152];
      v154 = &v115[v152];
      *(_OWORD *)v153 = *(_OWORD *)v154;
      v153[16] = v154[16];
      v155 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v117 + 56);
      swift_bridgeObjectRetain(v140);
      swift_bridgeObjectRetain(v142);
      swift_bridgeObjectRetain(v146);
      v156 = swift_bridgeObjectRetain(v148);
      v155(v114, 0, 1, v116, v156);
      v74 = v181;
    }
    *(_DWORD *)&v76[v78[17]] = *(_DWORD *)&v77[v78[17]];
    v157 = v78[18];
    v158 = *(_QWORD *)&v77[v157];
    *(_QWORD *)&v76[v157] = v158;
    v159 = v78[19];
    v160 = &v76[v159];
    v161 = &v77[v159];
    v162 = *(void (**)(char *, char *, uint64_t, __n128))(v175 + 16);
    v163 = swift_bridgeObjectRetain(v158);
    v162(v160, v161, v178, v163);
    ((void (*)(char *, char *, uint64_t))v162)(&v76[v78[20]], &v77[v78[20]], v178);
    ((void (*)(char *, char *, uint64_t))v162)(&v76[v78[21]], &v77[v78[21]], v178);
    ((void (*)(char *, char *, uint64_t))v162)(&v76[v78[22]], &v77[v78[22]], v178);
    ((void (*)(char *, char *, uint64_t))v162)(&v76[v78[23]], &v77[v78[23]], v178);
    ((void (*)(char *, char *, uint64_t))v162)(&v76[v78[24]], &v77[v78[24]], v178);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v173 + 56))(v76, 0, 1, v78);
  }
  v164 = *(int *)(type metadata accessor for ProductInfoState(0) + 20);
  v165 = &v76[v164];
  v166 = &v77[v164];
  v167 = *((_QWORD *)v166 + 1);
  *(_QWORD *)v165 = *(_QWORD *)v166;
  *((_QWORD *)v165 + 1) = v167;
  swift_bridgeObjectRetain(v167);
  return v74;
}

_QWORD *sub_1006DF394(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, uint64_t);
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  int *v55;
  _QWORD *v56;
  uint64_t (*v57)(_BYTE *, uint64_t, int *);
  int v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *, uint64_t, uint64_t);
  int v106;
  int v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  int *v119;
  _QWORD *v120;
  unsigned int (*v121)(char *, uint64_t, int *, __n128);
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  int *v145;
  uint64_t (*v146)(uint64_t, uint64_t, int *);
  int v147;
  int v148;
  uint64_t v149;
  int *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  __n128 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  __int128 v181;
  uint64_t v182;
  char *v183;
  char *v184;
  __int128 v185;
  void (*v186)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  void (*v193)(char *, char *, void *, __n128);
  __n128 v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  int v201;
  size_t v202;
  void *v203;
  uint64_t v204;
  void *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  __int128 v230;
  void (*v231)(uint64_t, _QWORD, uint64_t, int *, __n128);
  __n128 v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v237;
  _QWORD *v238;
  _QWORD *v239;
  uint64_t v240;
  uint64_t v242;
  char *v243;
  int v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  __int128 v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  __int128 v271;
  char *v272;
  char *__dst;
  _QWORD *__dsta;
  char *v275;
  char *v276;
  int *v277;
  char *v278;
  int v279;
  void (**__src)(void *, _QWORD, uint64_t, int *);
  void *__srca;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  void *v285;
  void *v286;
  unsigned int (*v287)(char *, uint64_t, uint64_t, __n128);
  void *v288;
  unsigned int (*v289)(char *, uint64_t, uint64_t);
  uint64_t v290;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    v7 = a3[5];
    v8 = (char *)a2 + v7;
    sub_1000126B0((uint64_t)a1 + v7, type metadata accessor for StableIdentifier);
    v9 = type metadata accessor for StableIdentifier(0);
    v10 = (char *)&loc_1006DF43C + 4 * byte_100E4982B[swift_getEnumCaseMultiPayload(v8, v9)];
    __asm { BR              X10 }
  }
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v15 = a3[7];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = a3[8];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  v23 = a3[9];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *(_QWORD *)((char *)a1 + a3[11]) = *(_QWORD *)((char *)a2 + a3[11]);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  v27 = a3[13];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v31 = a3[16];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  *v32 = *v33;
  v34 = v33[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[17]) = *(_QWORD *)((char *)a2 + a3[17]);
  *(_QWORD *)((char *)a1 + a3[18]) = *(_QWORD *)((char *)a2 + a3[18]);
  v35 = a3[19];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  *v36 = *v37;
  v38 = v37[1];
  v36[1] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  v39 = a3[20];
  v40 = *(_QWORD *)((char *)a2 + v39);
  *(_QWORD *)((char *)a1 + v39) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  v41 = a3[21];
  v42 = *(_QWORD *)((char *)a2 + v41);
  *(_QWORD *)((char *)a1 + v41) = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[22]) = *((_BYTE *)a2 + a3[22]);
  *((_BYTE *)a1 + a3[23]) = *((_BYTE *)a2 + a3[23]);
  v43 = a3[24];
  v44 = (char *)a1 + v43;
  v45 = (char *)a2 + v43;
  v46 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 48);
  v49 = v48(v44, 1, v46);
  v50 = v48(v45, 1, v46);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v44, v46);
LABEL_8:
    v51 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v47 + 24))(v44, v45, v46);
LABEL_9:
  *(_WORD *)((char *)a1 + a3[25]) = *(_WORD *)((char *)a2 + a3[25]);
  v52 = a3[26];
  v53 = (char *)a1 + v52;
  v54 = (char *)a2 + v52;
  v55 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v56 = (_QWORD *)*((_QWORD *)v55 - 1);
  v57 = (uint64_t (*)(_BYTE *, uint64_t, int *))v56[6];
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (v59)
    {
      sub_1000126B0((uint64_t)v53, type metadata accessor for BeaconProductInfoRecord);
      goto LABEL_15;
    }
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 24))(v53, v54, v46);
    v53[v55[5]] = v54[v55[5]];
    v53[v55[6]] = v54[v55[6]];
    v53[v55[7]] = v54[v55[7]];
    v84 = v55[8];
    v85 = &v53[v84];
    v86 = &v54[v84];
    *v85 = *v86;
    v87 = v86[1];
    v85[1] = v87;
    swift_bridgeObjectRetain(v87);
    swift_bridgeObjectRelease();
    v88 = v55[9];
    v89 = &v53[v88];
    v90 = &v54[v88];
    *v89 = *v90;
    v91 = v90[1];
    v89[1] = v91;
    swift_bridgeObjectRetain(v91);
    swift_bridgeObjectRelease();
    v92 = v55[10];
    v93 = &v53[v92];
    v94 = &v54[v92];
    v95 = *(_QWORD *)v94;
    v93[8] = v94[8];
    *(_QWORD *)v93 = v95;
    v96 = v55[11];
    v97 = &v53[v96];
    v98 = &v54[v96];
    *v97 = *v98;
    v99 = v98[1];
    v97[1] = v99;
    swift_bridgeObjectRetain(v99);
    swift_bridgeObjectRelease();
    v100 = v55[12];
    v101 = &v53[v100];
    v102 = &v54[v100];
    v103 = type metadata accessor for URL(0);
    v104 = *(_QWORD *)(v103 - 8);
    v105 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v104 + 48);
    v106 = v105(v101, 1, v103);
    v107 = v105(v102, 1, v103);
    if (v106)
    {
      if (!v107)
      {
        (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v101, v102, v103);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
        goto LABEL_31;
      }
    }
    else
    {
      if (!v107)
      {
        (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v101, v102, v103);
LABEL_31:
        v132 = v55[13];
        v133 = &v53[v132];
        v134 = &v54[v132];
        v135 = v105(&v53[v132], 1, v103);
        v136 = v105(v134, 1, v103);
        v287 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v105;
        v290 = v104;
        if (v135)
        {
          if (!v136)
          {
            (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v133, v134, v103);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v133, 0, 1, v103);
            goto LABEL_37;
          }
        }
        else
        {
          if (!v136)
          {
            (*(void (**)(char *, char *, uint64_t))(v104 + 24))(v133, v134, v103);
LABEL_37:
            v138 = v55[14];
            v139 = &v53[v138];
            v140 = &v54[v138];
            *v139 = *v140;
            v141 = v140[1];
            v139[1] = v141;
            swift_bridgeObjectRetain(v141);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v53[v55[15]] = *(_QWORD *)&v54[v55[15]];
            v142 = v55[16];
            v143 = (uint64_t)&v53[v142];
            v144 = &v54[v142];
            v145 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            v283 = *((_QWORD *)v145 - 1);
            v146 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v283 + 48);
            v147 = v146(v143, 1, v145);
            v148 = v146((uint64_t)v144, 1, v145);
            if (v147)
            {
              if (!v148)
              {
                *(_QWORD *)v143 = *(_QWORD *)v144;
                v149 = *((_QWORD *)v144 + 1);
                *(_QWORD *)(v143 + 8) = v149;
                *(_QWORD *)(v143 + 16) = *((_QWORD *)v144 + 2);
                v150 = v145;
                v151 = *((_QWORD *)v144 + 3);
                *(_QWORD *)(v143 + 24) = v151;
                *(_QWORD *)(v143 + 32) = *((_QWORD *)v144 + 4);
                v152 = *((_QWORD *)v144 + 5);
                *(_QWORD *)(v143 + 40) = v152;
                *(_WORD *)(v143 + 48) = *((_WORD *)v144 + 24);
                *(_QWORD *)(v143 + 56) = *((_QWORD *)v144 + 7);
                v153 = *((_QWORD *)v144 + 8);
                *(_BYTE *)(v143 + 72) = v144[72];
                *(_QWORD *)(v143 + 64) = v153;
                v154 = v150[10];
                v277 = v150;
                __srca = (void *)(v143 + v154);
                v155 = &v144[v154];
                swift_bridgeObjectRetain(v149);
                swift_bridgeObjectRetain(v151);
                v156 = swift_bridgeObjectRetain(v152);
                if (v287(v155, 1, v103, v156))
                {
                  v157 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(__srca, v155, *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v290 + 16))(__srca, v155, v103);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v290 + 56))(__srca, 0, 1, v103);
                }
                v204 = v277[11];
                v205 = (void *)(v143 + v204);
                v206 = &v144[v204];
                if (((unsigned int (*)(char *, uint64_t, uint64_t))v287)(&v144[v204], 1, v103))
                {
                  v207 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v205, v206, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, char *, uint64_t))(v290 + 16))(v205, v206, v103);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v205, 0, 1, v103);
                }
                v208 = v277[12];
                v209 = v143 + v208;
                v210 = &v144[v208];
                v211 = *(_QWORD *)v210;
                *(_BYTE *)(v209 + 8) = v210[8];
                *(_QWORD *)v209 = v211;
                v212 = v277[13];
                v213 = (_QWORD *)(v143 + v212);
                v214 = &v144[v212];
                *v213 = *(_QWORD *)v214;
                v215 = *((_QWORD *)v214 + 1);
                v213[1] = v215;
                v216 = v277[14];
                v288 = *(void **)&v144[v216];
                *(_QWORD *)(v143 + v216) = v288;
                v217 = v277[15];
                v218 = (_QWORD *)(v143 + v217);
                v219 = &v144[v217];
                *v218 = *(_QWORD *)v219;
                v220 = *((_QWORD *)v219 + 1);
                v218[1] = v220;
                v221 = v277[16];
                v222 = *(_QWORD *)&v144[v221];
                *(_QWORD *)(v143 + v221) = v222;
                v223 = v277[17];
                v224 = v143 + v223;
                v225 = &v144[v223];
                v226 = *(_OWORD *)v225;
                *(_BYTE *)(v224 + 16) = v225[16];
                *(_OWORD *)v224 = v226;
                v227 = v277[18];
                v228 = v143 + v227;
                v229 = &v144[v227];
                v230 = *(_OWORD *)v229;
                *(_BYTE *)(v228 + 16) = v229[16];
                *(_OWORD *)v228 = v230;
                v231 = *(void (**)(uint64_t, _QWORD, uint64_t, int *, __n128))(v283 + 56);
                swift_bridgeObjectRetain(v215);
                swift_bridgeObjectRetain(v288);
                swift_bridgeObjectRetain(v220);
                v232 = swift_bridgeObjectRetain(v222);
                v231(v143, 0, 1, v277, v232);
                goto LABEL_60;
              }
LABEL_43:
              v158 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v143, v144, *(_QWORD *)(*(_QWORD *)(v158 - 8) + 64));
LABEL_60:
              v233 = v290;
LABEL_61:
              *(_DWORD *)&v53[v55[17]] = *(_DWORD *)&v54[v55[17]];
              v234 = v55[18];
              v235 = *(_QWORD *)&v54[v234];
              *(_QWORD *)&v53[v234] = v235;
              swift_bridgeObjectRetain(v235);
              swift_bridgeObjectRelease();
              v236 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v233 + 24);
              v236(&v53[v55[19]], &v54[v55[19]], v103);
              v236(&v53[v55[20]], &v54[v55[20]], v103);
              v236(&v53[v55[21]], &v54[v55[21]], v103);
              v236(&v53[v55[22]], &v54[v55[22]], v103);
              v236(&v53[v55[23]], &v54[v55[23]], v103);
              v236(&v53[v55[24]], &v54[v55[24]], v103);
              goto LABEL_62;
            }
            if (v148)
            {
              sub_1000126B0(v143, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_43;
            }
            *(_QWORD *)v143 = *(_QWORD *)v144;
            v195 = *((_QWORD *)v144 + 1);
            *(_QWORD *)(v143 + 8) = v195;
            swift_bridgeObjectRetain(v195);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v143 + 16) = *((_QWORD *)v144 + 2);
            v196 = *((_QWORD *)v144 + 3);
            *(_QWORD *)(v143 + 24) = v196;
            swift_bridgeObjectRetain(v196);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v143 + 32) = *((_QWORD *)v144 + 4);
            v197 = *((_QWORD *)v144 + 5);
            *(_QWORD *)(v143 + 40) = v197;
            swift_bridgeObjectRetain(v197);
            swift_bridgeObjectRelease();
            *(_WORD *)(v143 + 48) = *((_WORD *)v144 + 24);
            *(_QWORD *)(v143 + 56) = *((_QWORD *)v144 + 7);
            v198 = *((_QWORD *)v144 + 8);
            *(_BYTE *)(v143 + 72) = v144[72];
            *(_QWORD *)(v143 + 64) = v198;
            v199 = v145[10];
            v200 = &v144[v199];
            v284 = (void *)(v143 + v199);
            v279 = ((uint64_t (*)(void))v287)();
            v201 = ((uint64_t (*)(char *, uint64_t, uint64_t))v287)(v200, 1, v103);
            if (v279)
            {
              if (!v201)
              {
                (*(void (**)(void *, char *, uint64_t))(v290 + 16))(v284, v200, v103);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v284, 0, 1, v103);
                goto LABEL_68;
              }
              v202 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v203 = v284;
            }
            else
            {
              if (!v201)
              {
                (*(void (**)(void *, char *, uint64_t))(v290 + 24))(v284, v200, v103);
                goto LABEL_68;
              }
              (*(void (**)(void *, uint64_t))(v290 + 8))(v284, v103);
              v202 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v203 = v284;
            }
            memcpy(v203, v200, v202);
LABEL_68:
            v242 = v145[11];
            v243 = &v144[v242];
            v285 = (void *)(v143 + v242);
            v244 = ((uint64_t (*)(void))v287)();
            v245 = ((uint64_t (*)(char *, uint64_t, uint64_t))v287)(v243, 1, v103);
            if (v244)
            {
              if (v245)
              {
                v246 = sub_10001A9A8(&qword_1010FBA40);
                memcpy(v285, v243, *(_QWORD *)(*(_QWORD *)(v246 - 8) + 64));
                v233 = v290;
              }
              else
              {
                v233 = v290;
                (*(void (**)(void *, char *, uint64_t))(v290 + 16))(v285, v243, v103);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v285, 0, 1, v103);
              }
            }
            else
            {
              v233 = v290;
              if (v245)
              {
                (*(void (**)(void *, uint64_t))(v290 + 8))(v285, v103);
                v247 = sub_10001A9A8(&qword_1010FBA40);
                memcpy(v285, v243, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
              }
              else
              {
                (*(void (**)(void *, char *, uint64_t))(v290 + 24))(v285, v243, v103);
              }
            }
            v248 = v145[12];
            v249 = v143 + v248;
            v250 = &v144[v248];
            v251 = *(_QWORD *)v250;
            *(_BYTE *)(v249 + 8) = v250[8];
            *(_QWORD *)v249 = v251;
            v252 = v145[13];
            v253 = (_QWORD *)(v143 + v252);
            v254 = &v144[v252];
            *v253 = *(_QWORD *)v254;
            v255 = *((_QWORD *)v254 + 1);
            v253[1] = v255;
            swift_bridgeObjectRetain(v255);
            swift_bridgeObjectRelease();
            v256 = v145[14];
            v257 = *(_QWORD *)&v144[v256];
            *(_QWORD *)(v143 + v256) = v257;
            swift_bridgeObjectRetain(v257);
            swift_bridgeObjectRelease();
            v258 = v145[15];
            v259 = (_QWORD *)(v143 + v258);
            v260 = &v144[v258];
            *v259 = *(_QWORD *)v260;
            v261 = *((_QWORD *)v260 + 1);
            v259[1] = v261;
            swift_bridgeObjectRetain(v261);
            swift_bridgeObjectRelease();
            v262 = v145[16];
            v263 = *(_QWORD *)&v144[v262];
            *(_QWORD *)(v143 + v262) = v263;
            swift_bridgeObjectRetain(v263);
            swift_bridgeObjectRelease();
            v264 = v145[17];
            v265 = v143 + v264;
            v266 = &v144[v264];
            v267 = *(_OWORD *)v266;
            *(_BYTE *)(v265 + 16) = v266[16];
            *(_OWORD *)v265 = v267;
            v268 = v145[18];
            v269 = v143 + v268;
            v270 = &v144[v268];
            v271 = *(_OWORD *)v270;
            *(_BYTE *)(v269 + 16) = v270[16];
            *(_OWORD *)v269 = v271;
            goto LABEL_61;
          }
          (*(void (**)(char *, uint64_t))(v104 + 8))(v133, v103);
        }
        v137 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
        goto LABEL_37;
      }
      (*(void (**)(char *, uint64_t))(v104 + 8))(v101, v103);
    }
    v131 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    goto LABEL_31;
  }
  if (v59)
  {
LABEL_15:
    v83 = sub_10001A9A8(&qword_10110EEB0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    goto LABEL_62;
  }
  __src = (void (**)(void *, _QWORD, uint64_t, int *))v56;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v47 + 16))(v53, v54, v46);
  v53[v55[5]] = v54[v55[5]];
  v53[v55[6]] = v54[v55[6]];
  v53[v55[7]] = v54[v55[7]];
  v60 = v55[8];
  v61 = &v53[v60];
  v62 = &v54[v60];
  *v61 = *v62;
  v63 = v62[1];
  v61[1] = v63;
  v64 = v55[9];
  v65 = &v53[v64];
  v66 = &v54[v64];
  *v65 = *v66;
  v67 = v66[1];
  v65[1] = v67;
  v68 = v55[10];
  v69 = &v53[v68];
  v70 = &v54[v68];
  v71 = v70[8];
  *(_QWORD *)v69 = *(_QWORD *)v70;
  v69[8] = v71;
  v72 = v55[11];
  v73 = &v53[v72];
  v74 = &v54[v72];
  *v73 = *v74;
  v75 = v74[1];
  v73[1] = v75;
  v76 = v55[12];
  __dst = &v53[v76];
  v275 = v54;
  v77 = &v54[v76];
  v78 = type metadata accessor for URL(0);
  v79 = *(_QWORD *)(v78 - 8);
  v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
  swift_bridgeObjectRetain(v63);
  swift_bridgeObjectRetain(v67);
  v81 = swift_bridgeObjectRetain(v75);
  v289 = v80;
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v80)(v77, 1, v78, v81))
  {
    v82 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dst, v77, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(__dst, v77, v78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(__dst, 0, 1, v78);
  }
  v54 = v275;
  v108 = v55[13];
  v109 = &v53[v108];
  v110 = &v275[v108];
  v282 = v79;
  v286 = (void *)v78;
  if (v289(&v275[v108], 1, v78))
  {
    v111 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v109, v110, v78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v109, 0, 1, v78);
  }
  v112 = v55[14];
  v113 = &v53[v112];
  v114 = &v275[v112];
  *v113 = *(_QWORD *)v114;
  v115 = *((_QWORD *)v114 + 1);
  v113[1] = v115;
  *(_QWORD *)&v53[v55[15]] = *(_QWORD *)&v275[v55[15]];
  v116 = v55[16];
  v117 = &v53[v116];
  v118 = &v275[v116];
  v119 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v120 = (_QWORD *)*((_QWORD *)v119 - 1);
  v121 = (unsigned int (*)(char *, uint64_t, int *, __n128))v120[6];
  v122 = swift_bridgeObjectRetain(v115);
  if (v121(v118, 1, v119, v122))
  {
    v123 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v123 - 8) + 64));
  }
  else
  {
    *v117 = *(_QWORD *)v118;
    v124 = *((_QWORD *)v118 + 1);
    v117[1] = v124;
    v117[2] = *((_QWORD *)v118 + 2);
    v125 = *((_QWORD *)v118 + 3);
    v117[3] = v125;
    v117[4] = *((_QWORD *)v118 + 4);
    v126 = *((_QWORD *)v118 + 5);
    v117[5] = v126;
    *((_WORD *)v117 + 24) = *((_WORD *)v118 + 24);
    v117[7] = *((_QWORD *)v118 + 7);
    v127 = *((_QWORD *)v118 + 8);
    *((_BYTE *)v117 + 72) = v118[72];
    v117[8] = v127;
    v128 = v119[10];
    v276 = (char *)v117 + v128;
    v272 = &v118[v128];
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRetain(v125);
    v129 = swift_bridgeObjectRetain(v126);
    __dsta = v120;
    if (((unsigned int (*)(char *, uint64_t, void *, __n128))v289)(v272, 1, v286, v129))
    {
      v130 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v276, v272, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v282 + 16))(v276, v272, v286);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v282 + 56))(v276, 0, 1, v286);
    }
    v159 = v119[11];
    v278 = (char *)v117 + v159;
    v160 = &v118[v159];
    if (v289(&v118[v159], 1, (uint64_t)v286))
    {
      v161 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v278, v160, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, void *))(v282 + 16))(v278, v160, v286);
      (*(void (**)(char *, _QWORD, uint64_t, void *))(v282 + 56))(v278, 0, 1, v286);
    }
    v162 = v119[12];
    v163 = (char *)v117 + v162;
    v164 = &v118[v162];
    v165 = *(_QWORD *)v164;
    v163[8] = v164[8];
    *(_QWORD *)v163 = v165;
    v166 = v119[13];
    v167 = (_QWORD *)((char *)v117 + v166);
    v168 = &v118[v166];
    *v167 = *(_QWORD *)v168;
    v169 = *((_QWORD *)v168 + 1);
    v167[1] = v169;
    v170 = v119[14];
    v171 = *(_QWORD *)&v118[v170];
    *(_QWORD *)((char *)v117 + v170) = v171;
    v172 = v119[15];
    v173 = (_QWORD *)((char *)v117 + v172);
    v174 = &v118[v172];
    *v173 = *(_QWORD *)v174;
    v175 = *((_QWORD *)v174 + 1);
    v173[1] = v175;
    v176 = v119[16];
    v177 = *(_QWORD *)&v118[v176];
    *(_QWORD *)((char *)v117 + v176) = v177;
    v178 = v119[17];
    v179 = (char *)v117 + v178;
    v180 = &v118[v178];
    v181 = *(_OWORD *)v180;
    v179[16] = v180[16];
    *(_OWORD *)v179 = v181;
    v182 = v119[18];
    v183 = (char *)v117 + v182;
    v184 = &v118[v182];
    v185 = *(_OWORD *)v184;
    v183[16] = v184[16];
    *(_OWORD *)v183 = v185;
    v186 = (void (*)(_QWORD *, _QWORD, uint64_t, int *, __n128))__dsta[7];
    swift_bridgeObjectRetain(v169);
    swift_bridgeObjectRetain(v171);
    swift_bridgeObjectRetain(v175);
    v187 = swift_bridgeObjectRetain(v177);
    v186(v117, 0, 1, v119, v187);
  }
  *(_DWORD *)&v53[v55[17]] = *(_DWORD *)&v54[v55[17]];
  v188 = v55[18];
  v189 = *(_QWORD *)&v54[v188];
  *(_QWORD *)&v53[v188] = v189;
  v190 = v55[19];
  v191 = &v53[v190];
  v192 = &v54[v190];
  v193 = *(void (**)(char *, char *, void *, __n128))(v282 + 16);
  v194 = swift_bridgeObjectRetain(v189);
  v193(v191, v192, v286, v194);
  ((void (*)(_BYTE *, _BYTE *, void *))v193)(&v53[v55[20]], &v54[v55[20]], v286);
  ((void (*)(_BYTE *, _BYTE *, void *))v193)(&v53[v55[21]], &v54[v55[21]], v286);
  ((void (*)(_BYTE *, _BYTE *, void *))v193)(&v53[v55[22]], &v54[v55[22]], v286);
  ((void (*)(_BYTE *, _BYTE *, void *))v193)(&v53[v55[23]], &v54[v55[23]], v286);
  ((void (*)(_BYTE *, _BYTE *, void *))v193)(&v53[v55[24]], &v54[v55[24]], v286);
  __src[7](v53, 0, 1, v55);
LABEL_62:
  v237 = *(int *)(type metadata accessor for ProductInfoState(0) + 20);
  v238 = &v53[v237];
  v239 = &v54[v237];
  *v238 = *v239;
  v240 = v239[1];
  v238[1] = v240;
  swift_bridgeObjectRetain(v240);
  swift_bridgeObjectRelease();
  return a1;
}

