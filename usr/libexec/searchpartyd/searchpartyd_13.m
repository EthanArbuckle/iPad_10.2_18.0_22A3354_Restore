void sub_1007693FC(uint64_t a1, void (*a2)(void *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;

  type metadata accessor for SPSeparationMonitoringError(0);
  v5 = v4;
  v22 = 8;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v6, &v21);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoSafeLocationKey);
  *(_QWORD *)(inited + 40) = v8;
  v9 = a1 + *(int *)(type metadata accessor for SafeLocation(0) + 20);
  v10 = type metadata accessor for UUID(0);
  *(_QWORD *)(inited + 72) = v10;
  v11 = sub_100018F08((_QWORD *)(inited + 48));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v11, v9, v10);
  v12 = sub_1006B8B10(inited);
  v13 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  _BridgedStoredNSError.init(_:userInfo:)(&v23, &v22, v12, v5, v13);
  v14 = v23;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B75D0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Overlapping Safe Location detected, failing.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = v14;
  a2(v14, 1);

}

void sub_1007695E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;

  swift_retain();
  v9 = a5;
  sub_10086BD2C(a3, 0, a2, a4, v9);
  swift_release();

}

void sub_10076964C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v6 = sub_10001A9A8(&qword_101106E48);
  __chkstk_darwin(v6);
  v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = swift_projectBox(a2);
  sub_10000F9B8(a1, (uint64_t)v8, (uint64_t *)&unk_101106E30);
  v10 = sub_10001A9A8((uint64_t *)&unk_101106E30);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  swift_beginAccess(v9, v12, 1, 0);
  sub_100004084((uint64_t)v8, v9, &qword_101106E48);
  dispatch_group_leave(a3);
}

void sub_100769738(char a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85[2];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(void *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];

  v85[1] = a6;
  v89 = a4;
  v90 = a3;
  v88 = a2;
  v7 = a1 & 1;
  v87 = type metadata accessor for SafeLocation(0);
  v8 = __chkstk_darwin(v87);
  v10 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v85 - v12;
  v14 = __chkstk_darwin(v11);
  v85[0] = (uint64_t)v85 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v85 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)v85 - v19;
  v21 = sub_10001A9A8(&qword_101106E48);
  __chkstk_darwin(v21);
  v23 = (char *)v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_101106E30);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v28 = (uint64_t *)((char *)v85 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v26);
  v86 = (uint64_t)v85 - v29;
  v30 = swift_projectBox(a5);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v7, 1) & 1) != 0)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v31 = type metadata accessor for Logger(0);
    sub_10001A9E8(v31, (uint64_t)qword_1011B75D0);
    v32 = sub_10005972C(v88, (uint64_t)v10, type metadata accessor for SafeLocation);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v93[0] = v36;
      *(_DWORD *)v35 = 136315138;
      v37 = type metadata accessor for UUID(0);
      v38 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
      v92 = sub_100016940(v39, v40, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v10, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Adding safe location with identifier: %s failed due to timeout.", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v10, type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v52 = v51;
    v92 = 19;
    v53 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v54 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v93, &v92, v53, v52, v54);
    v55 = (void *)v93[0];
LABEL_20:
    v90(v55, 1);

    return;
  }
  swift_beginAccess(v30, v93, 0, 0);
  sub_10000F9B8(v30, (uint64_t)v23, &qword_101106E48);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_100004048((uint64_t)v23, &qword_101106E48);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v41 = type metadata accessor for Logger(0);
    sub_10001A9E8(v41, (uint64_t)qword_1011B75D0);
    v42 = sub_10005972C(v88, (uint64_t)v20, type metadata accessor for SafeLocation);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v92 = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = type metadata accessor for UUID(0);
      v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
      v91 = sub_100016940(v49, v50, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v20, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Adding safe location with identifier: %s failed due to unknown error.", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v20, type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v68 = v67;
    v91 = 0;
    v69 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v70 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v92, &v91, v69, v68, v70);
    v55 = (void *)v92;
    goto LABEL_20;
  }
  v56 = (uint64_t)v23;
  v57 = v86;
  sub_100005CF0(v56, v86, (uint64_t *)&unk_101106E30);
  sub_10000F9B8(v57, (uint64_t)v28, (uint64_t *)&unk_101106E30);
  if (swift_getEnumCaseMultiPayload(v28, v24) == 1)
  {
    swift_errorRelease(*v28);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v58 = type metadata accessor for Logger(0);
    sub_10001A9E8(v58, (uint64_t)qword_1011B75D0);
    v59 = sub_10005972C(v88, (uint64_t)v13, type metadata accessor for SafeLocation);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter(v60);
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      v92 = v63;
      *(_DWORD *)v62 = 136315138;
      v64 = v85[0];
      sub_10005972C((uint64_t)v13, v85[0], type metadata accessor for SafeLocation);
      v65 = String.init<A>(describing:)(v64, v87);
      v91 = sub_100016940(v65, v66, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to add safe location: %s", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, type metadata accessor for SafeLocation);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v81 = v80;
    v91 = 15;
    v82 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v83 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v92, &v91, v82, v81, v83);
    v84 = (void *)v92;
    v90((void *)v92, 1);

    sub_100004048(v86, (uint64_t *)&unk_101106E30);
  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v71 = type metadata accessor for Logger(0);
    sub_10001A9E8(v71, (uint64_t)qword_1011B75D0);
    v72 = sub_10005972C(v88, (uint64_t)v18, type metadata accessor for SafeLocation);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.default.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v76 = swift_slowAlloc(32, -1);
      v92 = v76;
      *(_DWORD *)v75 = 136315138;
      v77 = v85[0];
      sub_10005972C((uint64_t)v18, v85[0], type metadata accessor for SafeLocation);
      v78 = String.init<A>(describing:)(v77, v87);
      v91 = sub_100016940(v78, v79, &v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v75 + 4, v75 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v18, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Completed adding safe location: %s", v75, 0xCu);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v18, type metadata accessor for SafeLocation);
    }

    v90(0, 0);
    sub_1007EF200();
    sub_100004048(v86, (uint64_t *)&unk_101106E30);
    sub_100004048((uint64_t)v28, (uint64_t *)&unk_101106E30);
  }
}

uint64_t sub_10076A174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  void **v41;
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint8_t *v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  Class v75;
  char *v76;
  NSObject *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  Class v103;
  char *v104;
  NSObject *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)(char *, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  Class isa;
  NSObject *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  void **aBlock;
  uint64_t v151;
  uint64_t (*v152)(uint64_t);
  void *v153;
  void (*v154)();
  uint64_t v155;

  v140 = a3;
  v141 = a4;
  v147 = type metadata accessor for DispatchWorkItemFlags(0);
  v145 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v144 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for DispatchQoS(0);
  v143 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v142 = (char *)&v119 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  isa = v8[-1].isa;
  v139 = v8;
  __chkstk_darwin(v8);
  v137 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for DispatchTime(0);
  v126 = *(_QWORD *)(v127 - 8);
  v10 = __chkstk_darwin(v127);
  v123 = (char *)&v119 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v125 = (char *)&v119 - v12;
  v13 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v13);
  v132 = (uint64_t)&v119 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SafeLocation(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v131 = (uint64_t)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = v18;
  __chkstk_darwin(v17);
  v148 = (uint64_t)&v119 - v19;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v128 = (char *)&v119 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v122 = (char *)&v119 - v25;
  v124 = v26;
  __chkstk_darwin(v24);
  v28 = (char *)&v119 - v27;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B75D0);
  v133 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v31 = v133(v28, a1, v20);
  v121 = v30;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = os_log_type_enabled(v32, v33);
  v135 = a1;
  v136 = a2;
  v134 = v16;
  v129 = v21;
  if (v34)
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = (void **)swift_slowAlloc(32, -1);
    aBlock = v36;
    v120 = v15;
    *(_DWORD *)v35 = 136315138;
    v37 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v20, v37);
    v149 = (_QWORD *)sub_100016940(v38, v39, (uint64_t *)&aBlock);
    v16 = v134;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &aBlock, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease();
    v40 = *(void (**)(char *, uint64_t))(v21 + 8);
    v15 = v120;
    v40(v28, v20);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Removing safe location with identifier: %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    v41 = v36;
    a1 = v135;
    swift_slowDealloc(v41, -1, -1);
    v42 = v35;
    a2 = v136;
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    v40 = *(void (**)(char *, uint64_t))(v21 + 8);
    v40(v28, v20);
  }

  v43 = v132;
  sub_100889110(a1, v132);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v43, 1, v15) == 1)
  {
    sub_100004048(v43, &qword_101106E40);
    v44 = v122;
    v45 = v133(v122, a1, v20);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = v20;
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = (void **)swift_slowAlloc(32, -1);
      aBlock = v50;
      *(_DWORD *)v49 = 136315138;
      v51 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v48, v51);
      v149 = (_QWORD *)sub_100016940(v52, v53, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &aBlock, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease();
      v40(v44, v48);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Safe location with identifier: %s not found", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      v40(v44, v20);
    }

    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v104 = v137;
    v103 = isa;
    v105 = v139;
    (*((void (**)(char *, _QWORD, NSObject *))isa + 13))(v137, enum case for DispatchQoS.QoSClass.default(_:), v139);
    v106 = (void *)static OS_dispatch_queue.global(qos:)(v104);
    (*((void (**)(char *, NSObject *))v103 + 1))(v104, v105);
    v107 = swift_allocObject(&unk_101090060, 32, 7);
    v108 = v141;
    *(_QWORD *)(v107 + 16) = v140;
    *(_QWORD *)(v107 + 24) = v108;
    v154 = (void (*)())sub_10077F7FC;
    v155 = v107;
    aBlock = _NSConcreteStackBlock;
    v151 = 1107296256;
    v152 = sub_100016FB8;
    v153 = &unk_101090078;
    v109 = _Block_copy(&aBlock);
    v110 = swift_retain();
    v111 = v142;
    static DispatchQoS.unspecified.getter(v110);
    v149 = _swiftEmptyArrayStorage;
    v112 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v113 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v114 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v115 = v144;
    v116 = v113;
    v117 = v147;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v149, v116, v114, v147, v112);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v111, v115, v109);
    _Block_release(v109);

    (*(void (**)(char *, uint64_t))(v145 + 8))(v115, v117);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v111, v146);
  }
  else
  {
    v54 = v15;
    v122 = (char *)v20;
    v55 = a2;
    sub_1000126EC(v43, v148, type metadata accessor for SafeLocation);
    v56 = dispatch_group_create();
    dispatch_group_enter(v56);
    v57 = swift_allocObject(&unk_1010900B0, 25, 7);
    *(_QWORD *)(v57 + 16) = 0;
    *(_BYTE *)(v57 + 24) = -1;
    v58 = swift_allocObject(&unk_1010900D8, 32, 7);
    *(_QWORD *)(v58 + 16) = v57;
    *(_QWORD *)(v58 + 24) = v56;
    v132 = v57;
    swift_retain();
    v59 = v56;
    v60 = static os_log_type_t.default.getter(v59);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v61 = qword_1011B7D38;
    v62 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v63 = swift_allocObject(v62, 72, 7);
    *(_OWORD *)(v63 + 16) = xmmword_100E22B00;
    v64 = v148;
    v65 = v131;
    sub_10005972C(v148, v131, type metadata accessor for SafeLocation);
    v66 = v64;
    v67 = String.init<A>(describing:)(v65, v54);
    v69 = v68;
    *(_QWORD *)(v63 + 56) = &type metadata for String;
    *(_QWORD *)(v63 + 64) = sub_10001AA00();
    *(_QWORD *)(v63 + 32) = v67;
    *(_QWORD *)(v63 + 40) = v69;
    os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "Attempting to remove: %@", 24, 2, v63);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_10086C578(v66, v55, (uint64_t)sub_10077CC54, v58);
    v70 = swift_release_n(v58, 2);
    v71 = v123;
    static DispatchTime.now()(v70);
    v72 = v125;
    + infix(_:_:)(v71, 120.0);
    v73 = *(void (**)(char *, uint64_t))(v126 + 8);
    v74 = v127;
    v73(v71, v127);
    LOBYTE(v126) = OS_dispatch_group.wait(timeout:)(v72) & 1;
    LODWORD(v126) = v126;
    v73(v72, v74);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v76 = v137;
    v75 = isa;
    v77 = v139;
    (*((void (**)(char *, _QWORD, NSObject *))isa + 13))(v137, enum case for DispatchQoS.QoSClass.default(_:), v139);
    v127 = static OS_dispatch_queue.global(qos:)(v76);
    (*((void (**)(char *, NSObject *))v75 + 1))(v76, v77);
    v139 = v59;
    v78 = v128;
    v79 = v122;
    v133(v128, v135, (uint64_t)v122);
    v80 = v66;
    v81 = v65;
    sub_10005972C(v80, v65, type metadata accessor for SafeLocation);
    v82 = v129;
    v83 = *(unsigned __int8 *)(v129 + 80);
    v84 = (v83 + 17) & ~v83;
    v85 = (v124 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
    v86 = (v85 + 23) & 0xFFFFFFFFFFFFFFF8;
    v87 = *(unsigned __int8 *)(v134 + 80);
    v88 = (v87 + v86 + 8) & ~v87;
    v89 = (v130 + v88 + 7) & 0xFFFFFFFFFFFFFFF8;
    v90 = swift_allocObject(&unk_101090100, v89 + 8, v83 | v87 | 7);
    *(_BYTE *)(v90 + 16) = v126;
    (*(void (**)(uint64_t, char *, char *))(v82 + 32))(v90 + v84, v78, v79);
    v91 = (_QWORD *)(v90 + v85);
    v92 = v141;
    *v91 = v140;
    v91[1] = v92;
    *(_QWORD *)(v90 + v86) = v132;
    sub_1000126EC(v81, v90 + v88, type metadata accessor for SafeLocation);
    *(_QWORD *)(v90 + v89) = v136;
    v154 = sub_10077CD80;
    v155 = v90;
    aBlock = _NSConcreteStackBlock;
    v151 = 1107296256;
    v152 = sub_100016FB8;
    v153 = &unk_101090118;
    v93 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    v94 = swift_retain();
    v95 = v142;
    static DispatchQoS.unspecified.getter(v94);
    v149 = _swiftEmptyArrayStorage;
    v96 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v97 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v98 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v99 = v144;
    v100 = v97;
    v101 = v147;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v149, v100, v98, v147, v96);
    v102 = (void *)v127;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v95, v99, v93);
    _Block_release(v93);

    (*(void (**)(char *, uint64_t))(v145 + 8))(v99, v101);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v95, v146);
    sub_1000126B0(v148, type metadata accessor for SafeLocation);
    swift_release();
  }
  return swift_release();
}

void sub_10076AE14(char a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned __int8 v12;
  _QWORD v13[3];
  uint64_t v14;

  if ((a1 & 1) != 0)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v8 = v7;
    v14 = 16;
    v9 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v10 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v13, &v14, v9, v8, v10);
    v5 = v13[0];
    v6 = 1;
  }
  swift_beginAccess(a2 + 16, v13, 1, 0);
  v11 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v5;
  v12 = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a2 + 24) = v6;
  sub_10077CE30(v11, v12);
  dispatch_group_leave(a3);
}

void sub_10076AEF0(char a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  void *v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE v65[4];
  _BOOL4 v66;
  os_log_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[16];
  uint64_t v75;
  uint64_t v76[3];

  v72 = a7;
  v70 = a6;
  v11 = a1 & 1;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v14);
  v19 = &v65[-v18];
  __chkstk_darwin(v17);
  v21 = &v65[-v20];
  if ((static DispatchTimeoutResult.== infix(_:_:)(v11, 1) & 1) != 0)
  {
    v72 = a4;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B75D0);
    v23 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v16, a2, v12);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v76[0] = v27;
      *(_DWORD *)v26 = 136315138;
      v71 = a3;
      v28 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v12, v28);
      v73 = sub_100016940(v29, v30, v76);
      a3 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Removing safe location with identifier: %s failed due to timeout.", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v48 = v47;
    v73 = 19;
    v49 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v50 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v76, &v73, v49, v48, v50);
    v51 = (void *)v76[0];
LABEL_23:
    a3(v51, 1);

    return;
  }
  swift_beginAccess(a5 + 16, v76, 0, 0);
  v31 = *(unsigned __int8 *)(a5 + 24);
  if (v31 == 255)
  {
    v72 = a4;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v52 = type metadata accessor for Logger(0);
    sub_10001A9E8(v52, (uint64_t)qword_1011B75D0);
    v53 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v21, a2, v12);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v57 = swift_slowAlloc(32, -1);
      v73 = v57;
      *(_DWORD *)v56 = 136315138;
      v71 = a3;
      v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v12, v58);
      v75 = sub_100016940(v59, v60, &v73);
      a3 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v56 + 4, v56 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v21, v12);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Removing safe location with identifier: %s failed due to unknown error.", v56, 0xCu);
      swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v21, v12);
    }

    type metadata accessor for SPSeparationMonitoringError(0);
    v62 = v61;
    v75 = 0;
    v63 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v64 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v73, &v75, v63, v62, v64);
    v51 = (void *)v73;
    goto LABEL_23;
  }
  v71 = a3;
  v32 = *(void **)(a5 + 16);
  sub_100294B60(v32, v31 & 1);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v33 = type metadata accessor for Logger(0);
  sub_10001A9E8(v33, (uint64_t)qword_1011B75D0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v19, a2, v12);
  sub_10077CE18(v32, v31);
  v34 = sub_100294B60(v32, v31 & 1);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter(v35);
  v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    v66 = (v31 & 1) != 0;
    v38 = swift_slowAlloc(22, -1);
    v68 = v37;
    v39 = v38;
    v69 = swift_slowAlloc(64, -1);
    v75 = v69;
    *(_DWORD *)v39 = 136315394;
    v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v67 = v35;
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v12, v40);
    v73 = sub_100016940(v41, v42, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v19, v12);
    *(_WORD *)(v39 + 12) = 2080;
    v73 = (uint64_t)v32;
    v74[0] = v66;
    sub_100294B60(v32, v31 & 1);
    v43 = sub_10001A9A8(&qword_101106E98);
    v44 = String.init<A>(describing:)(&v73, v43);
    v73 = sub_100016940(v44, v45, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease();
    sub_10077CE30(v32, v31);
    sub_10077CE30(v32, v31);
    v35 = v67;
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v68, "Removing safe location with identifier: %s completed with result: %s", (uint8_t *)v39, 0x16u);
    v46 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v19, v12);
    sub_10077CE30(v32, v31);
    sub_10077CE30(v32, v31);
  }

  v71(v32, v31 & 1);
  if (*(_QWORD *)(*(_QWORD *)(v70 + *(int *)(type metadata accessor for SafeLocation(0) + 52)) + 16))
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
    sub_1007EEF64(16);
  }
  sub_1007EF200();
  sub_10077CE30(v32, v31);
}

void sub_10076B71C(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint8_t *v31;
  void **v32;
  void **v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void **v40;
  uint8_t *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  char *v46;
  uint64_t v47;
  id v48;
  Class isa;
  id v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  void *v96;
  unint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(_QWORD, _QWORD);
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void **aBlock;
  uint64_t v136;
  uint64_t (*v137)(uint64_t);
  void *v138;
  void *v139;
  uint64_t v140;

  v129 = type metadata accessor for DispatchWorkItemFlags(0);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129);
  v125 = (char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for DispatchQoS(0);
  v128 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121);
  v126 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for DispatchQoS.QoSClass(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120);
  v118 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_10001A9A8((uint64_t *)&unk_101106E30);
  v11 = __chkstk_darwin(v114);
  v113 = (uint64_t)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v110 - v13;
  v15 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v15);
  v115 = (uint64_t)&v110 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v131 = *(_QWORD *)(v17 - 8);
  v132 = v17;
  __chkstk_darwin(v17);
  v130 = (char *)&v110 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for SafeLocation(0);
  v116 = *((_QWORD *)v19 - 1);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v110 - v23;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v25 = type metadata accessor for Logger(0);
  sub_10001A9E8(v25, (uint64_t)qword_1011B75D0);
  v133 = a1;
  v26 = sub_10005972C(a1, (uint64_t)v24, type metadata accessor for SafeLocation);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v123 = v14;
  if (v29)
  {
    v30 = swift_slowAlloc(12, -1);
    v112 = a4;
    v31 = (uint8_t *)v30;
    v32 = (void **)swift_slowAlloc(32, -1);
    v124 = a3;
    v33 = v32;
    aBlock = v32;
    v122 = a2;
    *(_DWORD *)v31 = 136315138;
    v111 = v31 + 4;
    v34 = v22;
    v35 = type metadata accessor for UUID(0);
    v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v37 = v35;
    v22 = v34;
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v37, v36);
    v134 = sub_100016940(v38, v39, (uint64_t *)&aBlock);
    a2 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &aBlock, v111, v31 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v24, type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Updating safe location with identifier: %s", v31, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v40 = v33;
    a3 = v124;
    swift_slowDealloc(v40, -1, -1);
    v41 = v31;
    a4 = v112;
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v24, type metadata accessor for SafeLocation);
  }

  v42 = v133;
  v43 = *(double *)(v133 + v19[8]);
  v44 = *(double *)(v133 + v19[9]);
  v45 = *(double *)(v133 + v19[10]);
  v46 = v130;
  Date.init()(v47);
  v48 = objc_allocWithZone((Class)CLLocation);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v50 = objc_msgSend(v48, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", isa, v43, v44, 0.0, v45, v45, -1.0, -1.0, -1.0, 0xBFF0000000000000);

  (*(void (**)(char *, uint64_t))(v131 + 8))(v46, v132);
  objc_msgSend(v50, "setReferenceFrame:", *(unsigned __int8 *)(v42 + v19[11]));
  LOBYTE(v46) = sub_10000CC48();

  if ((v46 & 1) != 0)
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v52 = v51;
    v134 = 21;
    v53 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v54 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v134, v53, v52, v54);
    v55 = aBlock;
    a2(aBlock, 1);

  }
  else
  {
    v56 = v115;
    sub_100889110(v42 + v19[5], v115);
    v57 = v116;
    v58 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(v116 + 48))(v56, 1, v19);
    sub_100004048(v56, &qword_101106E40);
    if (v58 == 1)
    {
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v59 = v119;
      v60 = v118;
      v61 = v120;
      (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, enum case for DispatchQoS.QoSClass.default(_:), v120);
      v62 = (void *)static OS_dispatch_queue.global(qos:)(v60);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
      sub_10005972C(v42, (uint64_t)v22, type metadata accessor for SafeLocation);
      v63 = *(unsigned __int8 *)(v57 + 80);
      v64 = (v63 + 16) & ~v63;
      v65 = (v117 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
      v66 = swift_allocObject(&unk_101090740, v65 + 16, v63 | 7);
      sub_1000126EC((uint64_t)v22, v66 + v64, type metadata accessor for SafeLocation);
      v67 = (_QWORD *)(v66 + v65);
      *v67 = a2;
      v67[1] = a3;
      v139 = sub_10077D718;
      v140 = v66;
      aBlock = _NSConcreteStackBlock;
      v136 = 1107296256;
      v137 = sub_100016FB8;
      v138 = &unk_101090758;
      v68 = _Block_copy(&aBlock);
      v69 = swift_retain();
      v70 = v126;
      static DispatchQoS.unspecified.getter(v69);
      v134 = (uint64_t)_swiftEmptyArrayStorage;
      v71 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v72 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v73 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v74 = v125;
      v75 = v72;
      v76 = v129;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v134, v75, v73, v129, v71);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v70, v74, v68);
      _Block_release(v68);

      (*(void (**)(char *, uint64_t))(v127 + 8))(v74, v76);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v70, v121);
    }
    else
    {
      v122 = a2;
      v124 = a3;
      sub_10005972C(v42, (uint64_t)v22, type metadata accessor for SafeLocation);
      v77 = *(unsigned __int8 *)(v57 + 80);
      v78 = a4;
      v79 = (v77 + 24) & ~v77;
      v80 = v117;
      v81 = v42;
      v82 = v77 | 7;
      v83 = swift_allocObject(&unk_101090790, v79 + v117, v77 | 7);
      *(_QWORD *)(v83 + 16) = v78;
      sub_1000126EC((uint64_t)v22, v83 + v79, type metadata accessor for SafeLocation);
      sub_10005972C(v81, (uint64_t)v22, type metadata accessor for SafeLocation);
      v84 = (v77 + 16) & ~v77;
      v85 = v84 + v80;
      v86 = swift_allocObject(&unk_1010907B8, v84 + v80, v77 | 7);
      sub_1000126EC((uint64_t)v22, v86 + v84, type metadata accessor for SafeLocation);
      swift_retain();
      v87 = (uint64_t)v123;
      sub_100765BF0((uint64_t)sub_10077D844, v83, (uint64_t)sub_10077D940, v86, (uint64_t *)&unk_101106E30, (uint64_t)sub_10077499C, (uint64_t)v123);
      swift_release();
      swift_release();
      v88 = v113;
      sub_10000F9B8(v87, v113, (uint64_t *)&unk_101106E30);
      LODWORD(v86) = swift_getEnumCaseMultiPayload(v88, v114);
      sub_100004048(v88, (uint64_t *)&unk_101106E30);
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v89 = v119;
      v90 = v118;
      v91 = v120;
      (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, enum case for DispatchQoS.QoSClass.default(_:), v120);
      v132 = static OS_dispatch_queue.global(qos:)(v90);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v90, v91);
      sub_10005972C(v133, (uint64_t)v22, type metadata accessor for SafeLocation);
      v92 = (v85 + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((_DWORD)v86 == 1)
      {
        v93 = swift_allocObject(&unk_1010907E0, v92 + 16, v82);
        sub_1000126EC((uint64_t)v22, v93 + v84, type metadata accessor for SafeLocation);
        v94 = (_QWORD *)(v93 + v92);
        v95 = v124;
        *v94 = v122;
        v94[1] = v95;
        v139 = sub_10077DA48;
        v140 = v93;
        aBlock = _NSConcreteStackBlock;
        v136 = 1107296256;
        v137 = sub_100016FB8;
        v138 = &unk_1010907F8;
        v96 = _Block_copy(&aBlock);
      }
      else
      {
        v97 = (v92 + 23) & 0xFFFFFFFFFFFFFFF8;
        v98 = swift_allocObject(&unk_101090830, v97 + 8, v82);
        sub_1000126EC((uint64_t)v22, v98 + v84, type metadata accessor for SafeLocation);
        v99 = (_QWORD *)(v98 + v92);
        v100 = v124;
        *v99 = v122;
        v99[1] = v100;
        *(_QWORD *)(v98 + v97) = v78;
        v139 = sub_10077DB34;
        v140 = v98;
        aBlock = _NSConcreteStackBlock;
        v136 = 1107296256;
        v137 = sub_100016FB8;
        v138 = &unk_101090848;
        v96 = _Block_copy(&aBlock);
        swift_retain();
      }
      v101 = swift_retain();
      v102 = v126;
      static DispatchQoS.unspecified.getter(v101);
      v134 = (uint64_t)_swiftEmptyArrayStorage;
      v103 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v104 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v105 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v106 = v125;
      v107 = v104;
      v108 = v129;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v134, v107, v105, v129, v103);
      v109 = (void *)v132;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v102, v106, v96);
      _Block_release(v96);

      (*(void (**)(char *, uint64_t))(v127 + 8))(v106, v108);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v102, v121);
      sub_100004048((uint64_t)v123, (uint64_t *)&unk_101106E30);
    }
    swift_release();
  }
}

uint64_t sub_10076C308(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v4 = (int *)type metadata accessor for SafeLocation(0);
  v5 = v4[7];
  v7 = *(_QWORD *)(a2 + v5);
  v6 = *(_QWORD *)(a2 + v5 + 8);
  v8 = (_QWORD *)(a1 + v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *v8 = v7;
  v8[1] = v6;
  *(_QWORD *)(a1 + v4[8]) = *(_QWORD *)(a2 + v4[8]);
  *(_QWORD *)(a1 + v4[9]) = *(_QWORD *)(a2 + v4[9]);
  *(_QWORD *)(a1 + v4[10]) = *(_QWORD *)(a2 + v4[10]);
  *(_BYTE *)(a1 + v4[11]) = *(_BYTE *)(a2 + v4[11]);
  v9 = v4[12];
  v10 = *(unsigned __int8 *)(a2 + v9);
  *(_BYTE *)(a1 + v9) = v10;
  *(_BYTE *)(a1 + v4[6]) = *(_BYTE *)(a2 + v4[6]);
  v11 = v4[13];
  v12 = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRetain(v12);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + v11) = v12;
  if (v10 != 1)
  {
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + v11) = _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_10076C3F8(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;

  v10 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B75D0);
  v14 = sub_10005972C(a1, (uint64_t)v12, type metadata accessor for SafeLocation);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(12, -1);
    v32 = a5;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v35 = (void *)v19;
    v31 = a4;
    *(_DWORD *)v18 = 136315138;
    v33 = a3;
    v20 = type metadata accessor for UUID(0);
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
    v34 = sub_100016940(v22, v23, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v12, type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v31, v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v24 = v18;
    a5 = v32;
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for SafeLocation);
  }

  type metadata accessor for SPSeparationMonitoringError(0);
  v26 = v25;
  v34 = a5;
  v27 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v28 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  _BridgedStoredNSError.init(_:userInfo:)(&v35, &v34, v27, v26, v28);
  v29 = v35;
  a2(v35, 1);

}

uint64_t sub_10076C6AC(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  _QWORD v23[2];
  void (*v24)(_QWORD, _QWORD);
  uint64_t v25;
  uint64_t v26[2];

  v7 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B75D0);
  v11 = sub_10005972C(a1, (uint64_t)v9, type metadata accessor for SafeLocation);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(12, -1);
    v24 = a2;
    v15 = (uint8_t *)v14;
    v16 = swift_slowAlloc(32, -1);
    v26[0] = v16;
    *(_DWORD *)v15 = 136315138;
    v23[1] = a4;
    v17 = type metadata accessor for UUID(0);
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    v25 = sub_100016940(v19, v20, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v9, type metadata accessor for SafeLocation);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfuly updated safe location with identifier: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    v21 = v15;
    a2 = v24;
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v9, type metadata accessor for SafeLocation);
  }

  a2(0, 0);
  sub_1007EEF64(16);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  type metadata accessor for Transaction(0);
  static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
  return sub_1007EF200();
}

uint64_t sub_10076C95C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  unsigned int v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  void (*v63)(_QWORD, _QWORD);
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  char *v81;
  void (*v82)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int EnumCaseMultiPayload;
  char *v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  void (*v179)(char *, uint64_t);
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  void (*v183)(char *, uint64_t);
  uint64_t v184;
  uint64_t v185;
  void (*v186)(_QWORD, _QWORD);
  uint64_t v187;
  uint64_t v188;
  char *v189;
  void *v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void (*v218)(_QWORD, _QWORD);
  uint64_t v219;
  uint64_t v220;
  __int128 v221;
  unsigned int v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  void (*v232)(char *, uint64_t, uint64_t);
  uint64_t v233;
  uint64_t v234;
  void (*v235)(char *, uint64_t);
  __int128 v236;
  uint64_t v237;
  uint64_t v238;
  __int128 aBlock;
  __int128 v240;
  void *v241;
  uint64_t v242;

  v217 = a5;
  v218 = a4;
  v231 = a3;
  v210 = type metadata accessor for DispatchWorkItemFlags(0);
  v214 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210);
  v212 = (char *)&v199 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = type metadata accessor for DispatchQoS(0);
  v215 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v213 = (char *)&v199 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v208 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v207 = (char *)&v199 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v228 = *(_QWORD *)(v11 - 8);
  v229 = v11;
  v12 = __chkstk_darwin(v11);
  v227 = (char *)&v199 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v226 = (char *)&v199 - v14;
  v205 = sub_10001A9A8((uint64_t *)&unk_101106E30);
  v15 = __chkstk_darwin(v205);
  v204 = (uint64_t)&v199 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v199 - v17;
  v19 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v19);
  v230 = (char *)&v199 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v21);
  v225 = (uint64_t)&v199 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v224 = (char *)&v199 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v202 = (char *)&v199 - v28;
  v29 = __chkstk_darwin(v27);
  v201 = (char *)&v199 - v30;
  v31 = __chkstk_darwin(v29);
  v200 = (char *)&v199 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v199 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v199 - v37;
  v203 = v39;
  __chkstk_darwin(v36);
  v41 = (char *)&v199 - v40;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v42 = type metadata accessor for Logger(0);
  v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B75D0);
  v232 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v233 = a2;
  v232(v41, a2, v23);
  swift_bridgeObjectRetain_n(a1, 2);
  v211 = v43;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter(v45);
  v47 = v46;
  v48 = os_log_type_enabled(v45, v46);
  v234 = a1;
  v209 = v9;
  v206 = v18;
  if (v48)
  {
    v49 = swift_slowAlloc(22, -1);
    v223 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v223;
    *(_DWORD *)v49 = 136315394;
    v222 = v47;
    swift_bridgeObjectRetain(a1);
    v51 = Array.description.getter(v50, v23);
    v53 = v52;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v236 = sub_100016940(v51, v53, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease_n(v234, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    v54 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v23, v54);
    *(_QWORD *)&v236 = sub_100016940(v55, v56, (uint64_t *)&aBlock);
    a1 = v234;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease();
    v235 = *(void (**)(char *, uint64_t))(v24 + 8);
    v235(v41, v23);
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v222, "Assigning beacons: %s to safe location with identifier: %s", (uint8_t *)v49, 0x16u);
    v57 = v223;
    swift_arrayDestroy(v223, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    v235 = *(void (**)(char *, uint64_t))(v24 + 8);
    v235(v41, v23);
  }

  v58 = v24;
  v59 = v225;
  v60 = v233;
  sub_100889110(v233, v225);
  v61 = type metadata accessor for SafeLocation(0);
  v62 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v59, 1, v61);
  sub_100004048(v59, &qword_101106E40);
  v63 = v218;
  if (v62 == 1)
  {
    v64 = v224;
    v232(v224, v60, v23);
    swift_bridgeObjectRetain_n(a1, 2);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = swift_slowAlloc(22, -1);
      v69 = swift_slowAlloc(64, -1);
      *(_QWORD *)&aBlock = v69;
      *(_DWORD *)v68 = 136315394;
      swift_bridgeObjectRetain(a1);
      v71 = Array.description.getter(v70, v23);
      v73 = v72;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v236 = sub_100016940(v71, v73, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v68 + 12) = 2080;
      v74 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v23, v74);
      *(_QWORD *)&v236 = sub_100016940(v75, v76, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v68 + 14, v68 + 22);
      swift_bridgeObjectRelease();
      v235(v64, v23);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Unable to assign beacons %s to non-existant safe location with UUID: %s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      v77 = v68;
      v63 = v218;
      swift_slowDealloc(v77, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a1, 2);
      v235(v64, v23);
    }

    v105 = v216;
    v106 = v208;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v107 = v207;
    v108 = v209;
    (*(void (**)(char *, _QWORD, uint64_t))(v106 + 104))(v207, enum case for DispatchQoS.QoSClass.default(_:), v209);
    v109 = (void *)static OS_dispatch_queue.global(qos:)(v107);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v107, v108);
    v110 = swift_allocObject(&unk_101090A10, 32, 7);
    v111 = v217;
    *(_QWORD *)(v110 + 16) = v63;
    *(_QWORD *)(v110 + 24) = v111;
    v241 = sub_10077DD34;
    v242 = v110;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v240 = sub_100016FB8;
    *((_QWORD *)&v240 + 1) = &unk_101090A28;
    v112 = _Block_copy(&aBlock);
    v113 = swift_retain();
    v114 = v213;
    static DispatchQoS.unspecified.getter(v113);
    *(_QWORD *)&v236 = _swiftEmptyArrayStorage;
    v115 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v116 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v117 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v118 = v212;
    v119 = v116;
    v120 = v210;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v119, v117, v210, v115);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v114, v118, v112);
    _Block_release(v112);

    (*(void (**)(char *, uint64_t))(v214 + 8))(v118, v120);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v114, v105);
    return swift_release();
  }
  v223 = *(_QWORD *)(a1 + 16);
  if (v223)
  {
    v225 = a1 + ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80));
    v224 = *(char **)(v58 + 72);
    v222 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    swift_bridgeObjectRetain(a1);
    v78 = 0;
    v221 = xmmword_100E22B00;
    v79 = v232;
    v80 = v233;
    v81 = v230;
    v220 = v23;
    v219 = v58;
    while (1)
    {
      v79(v81, v225 + (_QWORD)v224 * v78, v23);
      v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
      v82(v81, 0, 1, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v81, 1, v23) == 1)
        break;
      v83 = (*(uint64_t (**)(char *, char *, uint64_t))(v58 + 32))(v35, v81, v23);
      v84 = static os_log_type_t.info.getter(v83);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v85 = qword_1011B7D38;
      v86 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v87 = swift_allocObject(v86, 72, 7);
      *(_OWORD *)(v87 + 16) = v221;
      v88 = UUID.uuidString.getter(v87);
      v90 = v89;
      *(_QWORD *)(v87 + 56) = &type metadata for String;
      *(_QWORD *)(v87 + 64) = sub_10001AA00();
      *(_QWORD *)(v87 + 32) = v88;
      *(_QWORD *)(v87 + 40) = v90;
      os_log(_:dso:log:_:_:)(v84, &_mh_execute_header, v85, "beaconRecord(for uuid: %@)", 26, 2, v87);
      v91 = swift_bridgeObjectRelease();
      v92 = v226;
      static SystemInfo.lockState.getter(v91);
      v94 = v227;
      v93 = v228;
      v95 = v229;
      (*(void (**)(char *, _QWORD, uint64_t))(v228 + 104))(v227, v222, v229);
      v96 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
      LOBYTE(v90) = dispatch thunk of static Equatable.== infix(_:_:)(v92, v94, v95, v96);
      v97 = *(void (**)(char *, uint64_t))(v93 + 8);
      v97(v94, v95);
      v98 = ((uint64_t (*)(char *, uint64_t))v97)(v92, v95);
      if ((v90 & 1) != 0)
      {
        v168 = static os_log_type_t.default.getter(v98);
        os_log(_:dso:log:_:_:)(v168, &_mh_execute_header, qword_1011B7D38, "beaconRecord call failed because in device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
        v241 = 0;
        aBlock = 0u;
        v240 = 0u;
        v79 = v232;
        v23 = v220;
LABEL_35:
        sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
        swift_bridgeObjectRelease();
        v169 = v200;
        v79(v200, (uint64_t)v35, v23);
        v170 = v201;
        v171 = ((uint64_t (*)(char *, uint64_t, uint64_t))v79)(v201, v233, v23);
        v172 = Logger.logObject.getter(v171);
        v173 = static os_log_type_t.error.getter(v172);
        v174 = v173;
        if (os_log_type_enabled(v172, v173))
        {
          v175 = swift_slowAlloc(22, -1);
          v234 = swift_slowAlloc(64, -1);
          *(_QWORD *)&aBlock = v234;
          *(_DWORD *)v175 = 136315394;
          v176 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v233) = v174;
          v177 = dispatch thunk of CustomStringConvertible.description.getter(v23, v176);
          *(_QWORD *)&v236 = sub_100016940(v177, v178, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v175 + 4, v175 + 12);
          swift_bridgeObjectRelease();
          v179 = v235;
          v235(v169, v23);
          *(_WORD *)(v175 + 12) = 2080;
          v180 = dispatch thunk of CustomStringConvertible.description.getter(v23, v176);
          *(_QWORD *)&v236 = sub_100016940(v180, v181, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v175 + 14, v175 + 22);
          swift_bridgeObjectRelease();
          v235 = v179;
          v179(v170, v23);
          _os_log_impl((void *)&_mh_execute_header, v172, (os_log_type_t)v233, "Unable to assign non-existant beacon %s to safe location with UUID: %s", (uint8_t *)v175, 0x16u);
          v182 = v234;
          swift_arrayDestroy(v234, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v182, -1, -1);
          swift_slowDealloc(v175, -1, -1);
        }
        else
        {
          v183 = v235;
          v235(v169, v23);
          v235 = v183;
          v183(v170, v23);
        }

        v184 = v217;
        v185 = v210;
        v186 = v218;
        v187 = v209;
        v188 = v208;
        v189 = v207;
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        (*(void (**)(char *, _QWORD, uint64_t))(v188 + 104))(v189, enum case for DispatchQoS.QoSClass.default(_:), v187);
        v190 = (void *)static OS_dispatch_queue.global(qos:)(v189);
        (*(void (**)(char *, uint64_t))(v188 + 8))(v189, v187);
        v191 = swift_allocObject(&unk_101090B00, 32, 7);
        *(_QWORD *)(v191 + 16) = v186;
        *(_QWORD *)(v191 + 24) = v184;
        v241 = sub_10077DEC0;
        v242 = v191;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v240 = sub_100016FB8;
        *((_QWORD *)&v240 + 1) = &unk_101090B18;
        v192 = _Block_copy(&aBlock);
        v193 = swift_retain();
        v194 = v213;
        static DispatchQoS.unspecified.getter(v193);
        *(_QWORD *)&v236 = _swiftEmptyArrayStorage;
        v195 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v196 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v197 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v198 = v212;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v196, v197, v185, v195);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v194, v198, v192);
        _Block_release(v192);

        (*(void (**)(char *, uint64_t))(v214 + 8))(v198, v185);
        (*(void (**)(char *, uint64_t))(v215 + 8))(v194, v216);
        v235(v35, v23);
        return swift_release();
      }
      v99 = sub_100017368();
      v100 = *(_QWORD *)(v99 + 16);
      v23 = v220;
      if (v100)
      {
        v101 = v99 + 32;
        while (1)
        {
          sub_100030784(v101, (uint64_t)&v236);
          v102 = v237;
          v103 = v238;
          sub_10001AA44(&v236, v237);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v103 + 8) + 8) + 32))(v102);
          LOBYTE(v102) = static UUID.== infix(_:_:)(v38, v35);
          v104 = v235;
          v235(v38, v23);
          if ((v102 & 1) != 0)
            break;
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v236);
          v101 += 40;
          if (!--v100)
            goto LABEL_19;
        }
        sub_10000F9FC(&v236, (uint64_t)&aBlock);
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_19:
        v241 = 0;
        aBlock = 0u;
        v240 = 0u;
        swift_bridgeObjectRelease();
        v104 = v235;
      }
      a1 = v234;
      v79 = v232;
      v58 = v219;
      v81 = v230;
      if (!*((_QWORD *)&v240 + 1))
        goto LABEL_35;
      ++v78;
      sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
      v104(v35, v23);
      v80 = v233;
      if (v78 == v223)
        goto LABEL_27;
    }
  }
  else
  {
    v82 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
    swift_bridgeObjectRetain(a1);
    v79 = v232;
    v80 = v233;
    v81 = v230;
LABEL_27:
    v82(v81, 1, 1, v23);
  }
  swift_bridgeObjectRelease();
  v79(v38, v80, v23);
  v121 = *(unsigned __int8 *)(v58 + 80);
  v122 = (v121 + 24) & ~v121;
  v229 = v122 + v203;
  v233 = v121 | 7;
  v123 = swift_allocObject(&unk_101090A60, v122 + v203, v121 | 7);
  v124 = v231;
  *(_QWORD *)(v123 + 16) = v231;
  v234 = v122;
  v230 = *(char **)(v58 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v230)(v123 + v122, v38, v23);
  v125 = swift_allocObject(&unk_101090A88, 24, 7);
  *(_QWORD *)(v125 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v126 = (uint64_t)v206;
  v127 = v80;
  sub_100765BF0((uint64_t)sub_100774980, v123, (uint64_t)sub_10077DD9C, v125, (uint64_t *)&unk_101106E30, (uint64_t)sub_10077499C, (uint64_t)v206);
  swift_release();
  swift_release();
  v128 = v204;
  sub_10000F9B8(v126, v204, (uint64_t *)&unk_101106E30);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v128, v205);
  sub_100004048(v128, (uint64_t *)&unk_101106E30);
  if (EnumCaseMultiPayload != 1)
  {
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v143 = v208;
    v144 = v207;
    v145 = v209;
    (*(void (**)(char *, _QWORD, uint64_t))(v208 + 104))(v207, enum case for DispatchQoS.QoSClass.default(_:), v209);
    v235 = (void (*)(char *, uint64_t))static OS_dispatch_queue.global(qos:)(v144);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
    v232(v38, v127, v23);
    v146 = (v229 + 7) & 0xFFFFFFFFFFFFFFF8;
    v147 = (v146 + 23) & 0xFFFFFFFFFFFFFFF8;
    v148 = swift_allocObject(&unk_101090AB0, v147 + 8, v233);
    *(_QWORD *)(v148 + 16) = a1;
    ((void (*)(uint64_t, char *, uint64_t))v230)(v148 + v234, v38, v23);
    v149 = (_QWORD *)(v148 + v146);
    v150 = v217;
    *v149 = v218;
    v149[1] = v150;
    *(_QWORD *)(v148 + v147) = v124;
    v241 = sub_10077DE4C;
    v242 = v148;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v240 = sub_100016FB8;
    *((_QWORD *)&v240 + 1) = &unk_101090AC8;
    v151 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a1);
    swift_retain();
    v152 = swift_retain();
    v153 = v213;
    static DispatchQoS.unspecified.getter(v152);
    *(_QWORD *)&v236 = _swiftEmptyArrayStorage;
    v154 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v155 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v156 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v157 = v212;
    v158 = v155;
    v159 = v210;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v236, v158, v156, v210, v154);
    v160 = v235;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v153, v157, v151);
    _Block_release(v151);

    (*(void (**)(char *, uint64_t))(v214 + 8))(v157, v159);
    (*(void (**)(char *, uint64_t))(v215 + 8))(v153, v216);
    sub_100004048((uint64_t)v206, (uint64_t *)&unk_101106E30);
    return swift_release();
  }
  v130 = v202;
  v232(v202, v127, v23);
  swift_bridgeObjectRetain_n(a1, 2);
  v132 = Logger.logObject.getter(v131);
  v133 = static os_log_type_t.error.getter(v132);
  if (os_log_type_enabled(v132, v133))
  {
    v134 = swift_slowAlloc(22, -1);
    v135 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v135;
    *(_DWORD *)v134 = 136315394;
    swift_bridgeObjectRetain(a1);
    v137 = Array.description.getter(v136, v23);
    v139 = v138;
    swift_bridgeObjectRelease();
    *(_QWORD *)&v236 = sub_100016940(v137, v139, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v134 + 4, v134 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v134 + 12) = 2080;
    v140 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v141 = dispatch thunk of CustomStringConvertible.description.getter(v23, v140);
    *(_QWORD *)&v236 = sub_100016940(v141, v142, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, (char *)&v236 + 8, v134 + 14, v134 + 22);
    swift_bridgeObjectRelease();
    v235(v130, v23);
    _os_log_impl((void *)&_mh_execute_header, v132, v133, "Failed to assign %s to safe location with UUID: %s", (uint8_t *)v134, 0x16u);
    swift_arrayDestroy(v135, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v135, -1, -1);
    swift_slowDealloc(v134, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    v235(v130, v23);
  }

  v161 = (uint64_t)v206;
  type metadata accessor for SPSeparationMonitoringError(0);
  v163 = v162;
  *(_QWORD *)&v236 = 17;
  v164 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v165 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v236, v164, v163, v165);
  v166 = (void *)aBlock;
  v218(aBlock, 1);

  return sub_100004048(v161, (uint64_t *)&unk_101106E30);
}

uint64_t sub_10076E0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = type metadata accessor for SafeLocation(0);
  swift_bridgeObjectRetain(a2);
  result = sub_1003028FC(v5);
  *(_BYTE *)(a1 + *(int *)(v4 + 48)) = 1;
  return result;
}

uint64_t sub_10076E11C(char a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE v18[12];
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  LOBYTE(v1) = a1;
  v2 = type metadata accessor for SafeLocation(0);
  v21 = *(_QWORD *)(v2 - 8);
  v3 = __chkstk_darwin(v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v18[-v6];
  result = (uint64_t)sub_10001E350();
  v9 = result;
  v10 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(result + 16);
  v23 = _swiftEmptyArrayStorage;
  if (v22)
  {
    v11 = 0;
    v1 = v1;
    v20 = v2;
    v19 = v1;
    while (v11 < *(_QWORD *)(v9 + 16))
    {
      v12 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
      v13 = *(_QWORD *)(v21 + 72);
      sub_10005972C(v9 + v12 + v13 * v11, (uint64_t)v7, type metadata accessor for SafeLocation);
      if (v7[*(int *)(v2 + 24)] == v1)
      {
        v14 = (uint64_t)v5;
        sub_1000126EC((uint64_t)v7, (uint64_t)v5, type metadata accessor for SafeLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          sub_10009AC18(0, v10[2] + 1, 1);
        v10 = v23;
        v16 = v23[2];
        v15 = v23[3];
        if (v16 >= v15 >> 1)
        {
          sub_10009AC18(v15 > 1, v16 + 1, 1);
          v10 = v23;
        }
        v10[2] = v16 + 1;
        v17 = (uint64_t)v10 + v12 + v16 * v13;
        v5 = (_BYTE *)v14;
        result = sub_1000126EC(v14, v17, type metadata accessor for SafeLocation);
        v2 = v20;
        v1 = v19;
      }
      else
      {
        result = sub_1000126B0((uint64_t)v7, type metadata accessor for SafeLocation);
      }
      if (v22 == ++v11)
      {
        v10 = v23;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  return result;
}

void sub_10076E304(uint64_t a1, void (*a2)(id, uint64_t))
{
  id v3;
  id v4;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v3 = *(id *)a1;
    v4 = *(id *)a1;
    a2(v3, 1);
    sub_10077DBB4(v3, 1);
  }
  else
  {
    a2(0, 0);
  }
}

uint64_t sub_10076E36C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  unsigned int v47;
  _BOOL4 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void (*v64)(_QWORD, _QWORD);
  char *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  void (*v84)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int EnumCaseMultiPayload;
  char *v133;
  uint64_t v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(char *, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  void *v170;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  void (*v184)(char *, uint64_t);
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  void (*v189)(char *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  void (*v192)(_QWORD, _QWORD);
  uint64_t v193;
  uint64_t v194;
  char *v195;
  void *v196;
  uint64_t v197;
  void *v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  char *v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  char *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void (*v224)(_QWORD, _QWORD);
  uint64_t v225;
  uint64_t v226;
  __int128 v227;
  unsigned int v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  void (*v238)(char *, uint64_t, uint64_t);
  uint64_t v239;
  uint64_t v240;
  void (*v241)(char *, uint64_t);
  __int128 v242;
  uint64_t v243;
  uint64_t v244;
  __int128 aBlock;
  __int128 v246;
  uint64_t (*v247)();
  uint64_t v248;

  v223 = a5;
  v224 = a4;
  v237 = a3;
  v216 = type metadata accessor for DispatchWorkItemFlags(0);
  v220 = *(_QWORD *)(v216 - 8);
  __chkstk_darwin(v216);
  v218 = (char *)&v205 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for DispatchQoS(0);
  v221 = *(_QWORD *)(v222 - 8);
  __chkstk_darwin(v222);
  v219 = (char *)&v205 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v214 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v213 = (char *)&v205 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v234 = *(_QWORD *)(v11 - 8);
  v235 = v11;
  v12 = __chkstk_darwin(v11);
  v233 = (char *)&v205 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v232 = (char *)&v205 - v14;
  v211 = sub_10001A9A8((uint64_t *)&unk_101106E30);
  v15 = __chkstk_darwin(v211);
  v210 = (uint64_t)&v205 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v205 - v17;
  v19 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v19);
  v236 = (char *)&v205 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v21);
  v231 = (uint64_t)&v205 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v230 = (char *)&v205 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v208 = (char *)&v205 - v28;
  v29 = __chkstk_darwin(v27);
  v207 = (char *)&v205 - v30;
  v31 = __chkstk_darwin(v29);
  v206 = (char *)&v205 - v32;
  v33 = __chkstk_darwin(v31);
  v35 = (char *)&v205 - v34;
  v36 = __chkstk_darwin(v33);
  v38 = (char *)&v205 - v37;
  v209 = v39;
  __chkstk_darwin(v36);
  v41 = (char *)&v205 - v40;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v42 = type metadata accessor for Logger(0);
  v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B75D0);
  v238 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v239 = a2;
  v238(v41, a2, v23);
  v44 = swift_bridgeObjectRetain_n(a1, 2);
  v217 = v43;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.default.getter(v45);
  v47 = v46;
  v48 = os_log_type_enabled(v45, v46);
  v240 = a1;
  v215 = v9;
  v212 = v18;
  if (v48)
  {
    v49 = swift_slowAlloc(22, -1);
    v229 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v229;
    *(_DWORD *)v49 = 136315394;
    v228 = v47;
    v50 = swift_bridgeObjectRetain(a1);
    v51 = Array.description.getter(v50, v23);
    v53 = v52;
    swift_bridgeObjectRelease(v240);
    *(_QWORD *)&v242 = sub_100016940(v51, v53, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease_n(v240, 2);
    swift_bridgeObjectRelease(v53);
    *(_WORD *)(v49 + 12) = 2080;
    v54 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v23, v54);
    v57 = v56;
    *(_QWORD *)&v242 = sub_100016940(v55, v56, (uint64_t *)&aBlock);
    a1 = v240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v57);
    v241 = *(void (**)(char *, uint64_t))(v24 + 8);
    v241(v41, v23);
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v228, "Unassigning beacons: %s from safe location with identifier: %s", (uint8_t *)v49, 0x16u);
    v58 = v229;
    swift_arrayDestroy(v229, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    v241 = *(void (**)(char *, uint64_t))(v24 + 8);
    v241(v41, v23);
  }

  v59 = v24;
  v60 = v231;
  v61 = v239;
  sub_100889110(v239, v231);
  v62 = type metadata accessor for SafeLocation(0);
  v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48))(v60, 1, v62);
  sub_100004048(v60, &qword_101106E40);
  v64 = v224;
  if (v63 == 1)
  {
    v65 = v230;
    v238(v230, v61, v23);
    v66 = swift_bridgeObjectRetain_n(a1, 2);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.error.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = swift_slowAlloc(22, -1);
      v70 = swift_slowAlloc(64, -1);
      *(_QWORD *)&aBlock = v70;
      *(_DWORD *)v69 = 136315394;
      v71 = swift_bridgeObjectRetain(a1);
      v72 = Array.description.getter(v71, v23);
      v74 = v73;
      swift_bridgeObjectRelease(a1);
      *(_QWORD *)&v242 = sub_100016940(v72, v74, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v74);
      *(_WORD *)(v69 + 12) = 2080;
      v75 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v76 = dispatch thunk of CustomStringConvertible.description.getter(v23, v75);
      v78 = v77;
      *(_QWORD *)&v242 = sub_100016940(v76, v77, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v69 + 14, v69 + 22);
      swift_bridgeObjectRelease(v78);
      v241(v65, v23);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Unable to unassign beacons %s from non-existant safe location with UUID: %s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      v79 = v69;
      v64 = v224;
      swift_slowDealloc(v79, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a1, 2);
      v241(v65, v23);
    }

    v108 = v222;
    v109 = v214;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v110 = v213;
    v111 = v215;
    (*(void (**)(char *, _QWORD, uint64_t))(v109 + 104))(v213, enum case for DispatchQoS.QoSClass.default(_:), v215);
    v112 = (void *)static OS_dispatch_queue.global(qos:)(v110);
    (*(void (**)(char *, uint64_t))(v109 + 8))(v110, v111);
    v113 = swift_allocObject(&unk_10108FC78, 32, 7);
    v114 = v223;
    *(_QWORD *)(v113 + 16) = v64;
    *(_QWORD *)(v113 + 24) = v114;
    v247 = sub_10077F7FC;
    v248 = v113;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v246 = sub_100016FB8;
    *((_QWORD *)&v246 + 1) = &unk_10108FC90;
    v115 = _Block_copy(&aBlock);
    v116 = swift_retain();
    v117 = v219;
    static DispatchQoS.unspecified.getter(v116);
    *(_QWORD *)&v242 = _swiftEmptyArrayStorage;
    v118 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v119 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v120 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v121 = v218;
    v122 = v119;
    v123 = v216;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v242, v122, v120, v216, v118);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v117, v121, v115);
    _Block_release(v115);

    (*(void (**)(char *, uint64_t))(v220 + 8))(v121, v123);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v117, v108);
    return swift_release(v248);
  }
  v229 = *(_QWORD *)(a1 + 16);
  if (v229)
  {
    v231 = a1 + ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80));
    v230 = *(char **)(v59 + 72);
    v228 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
    swift_bridgeObjectRetain(a1);
    v80 = 0;
    v227 = xmmword_100E22B00;
    v81 = v238;
    v82 = v239;
    v83 = v236;
    v226 = v23;
    v225 = v59;
    while (1)
    {
      v81(v83, v231 + (_QWORD)v230 * v80, v23);
      v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
      v84(v83, 0, 1, v23);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v83, 1, v23) == 1)
        break;
      v85 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(v35, v83, v23);
      v86 = static os_log_type_t.info.getter(v85);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v87 = qword_1011B7D38;
      v88 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v89 = swift_allocObject(v88, 72, 7);
      *(_OWORD *)(v89 + 16) = v227;
      v90 = UUID.uuidString.getter(v89);
      v92 = v91;
      *(_QWORD *)(v89 + 56) = &type metadata for String;
      *(_QWORD *)(v89 + 64) = sub_10001AA00();
      *(_QWORD *)(v89 + 32) = v90;
      *(_QWORD *)(v89 + 40) = v92;
      os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v87, "beaconRecord(for uuid: %@)", 26, 2, v89);
      v93 = swift_bridgeObjectRelease(v89);
      v94 = v232;
      static SystemInfo.lockState.getter(v93);
      v96 = v233;
      v95 = v234;
      v97 = v235;
      (*(void (**)(char *, _QWORD, uint64_t))(v234 + 104))(v233, v228, v235);
      v98 = sub_100006204((unint64_t *)&qword_1010F46E0, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
      LOBYTE(v92) = dispatch thunk of static Equatable.== infix(_:_:)(v94, v96, v97, v98);
      v99 = *(void (**)(char *, uint64_t))(v95 + 8);
      v99(v96, v97);
      v100 = ((uint64_t (*)(char *, uint64_t))v99)(v94, v97);
      if ((v92 & 1) != 0)
      {
        v172 = static os_log_type_t.default.getter(v100);
        os_log(_:dso:log:_:_:)(v172, &_mh_execute_header, qword_1011B7D38, "beaconRecord call failed because in device is in beforeFirstUnlock state", 72, 2, _swiftEmptyArrayStorage);
        v247 = 0;
        aBlock = 0u;
        v246 = 0u;
        a1 = v240;
        v81 = v238;
        v23 = v226;
LABEL_35:
        sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
        swift_bridgeObjectRelease(a1);
        v173 = v206;
        v81(v206, (uint64_t)v35, v23);
        v174 = v207;
        v175 = ((uint64_t (*)(char *, uint64_t, uint64_t))v81)(v207, v239, v23);
        v176 = Logger.logObject.getter(v175);
        v177 = static os_log_type_t.error.getter(v176);
        v178 = v177;
        if (os_log_type_enabled(v176, v177))
        {
          v179 = swift_slowAlloc(22, -1);
          v240 = swift_slowAlloc(64, -1);
          *(_QWORD *)&aBlock = v240;
          *(_DWORD *)v179 = 136315394;
          v180 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v239) = v178;
          v181 = dispatch thunk of CustomStringConvertible.description.getter(v23, v180);
          v183 = v182;
          *(_QWORD *)&v242 = sub_100016940(v181, v182, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v179 + 4, v179 + 12);
          swift_bridgeObjectRelease(v183);
          v184 = v241;
          v241(v173, v23);
          *(_WORD *)(v179 + 12) = 2080;
          v185 = dispatch thunk of CustomStringConvertible.description.getter(v23, v180);
          v187 = v186;
          *(_QWORD *)&v242 = sub_100016940(v185, v186, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v179 + 14, v179 + 22);
          swift_bridgeObjectRelease(v187);
          v241 = v184;
          v184(v174, v23);
          _os_log_impl((void *)&_mh_execute_header, v176, (os_log_type_t)v239, "Unable to unassign non-existant beacon %s to safe location with UUID: %s", (uint8_t *)v179, 0x16u);
          v188 = v240;
          swift_arrayDestroy(v240, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v188, -1, -1);
          swift_slowDealloc(v179, -1, -1);
        }
        else
        {
          v189 = v241;
          v241(v173, v23);
          v241 = v189;
          v189(v174, v23);
        }

        v190 = v223;
        v191 = v216;
        v192 = v224;
        v193 = v215;
        v194 = v214;
        v195 = v213;
        sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
        (*(void (**)(char *, _QWORD, uint64_t))(v194 + 104))(v195, enum case for DispatchQoS.QoSClass.default(_:), v193);
        v196 = (void *)static OS_dispatch_queue.global(qos:)(v195);
        (*(void (**)(char *, uint64_t))(v194 + 8))(v195, v193);
        v197 = swift_allocObject(&unk_10108FD68, 32, 7);
        *(_QWORD *)(v197 + 16) = v192;
        *(_QWORD *)(v197 + 24) = v190;
        v247 = sub_10077F7F8;
        v248 = v197;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v246 = sub_100016FB8;
        *((_QWORD *)&v246 + 1) = &unk_10108FD80;
        v198 = _Block_copy(&aBlock);
        v199 = swift_retain();
        v200 = v219;
        static DispatchQoS.unspecified.getter(v199);
        *(_QWORD *)&v242 = _swiftEmptyArrayStorage;
        v201 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v202 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v203 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v204 = v218;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v242, v202, v203, v191, v201);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v200, v204, v198);
        _Block_release(v198);

        (*(void (**)(char *, uint64_t))(v220 + 8))(v204, v191);
        (*(void (**)(char *, uint64_t))(v221 + 8))(v200, v222);
        v241(v35, v23);
        return swift_release(v248);
      }
      v101 = sub_100017368();
      v102 = v101;
      v103 = *(_QWORD *)(v101 + 16);
      v23 = v226;
      if (v103)
      {
        v104 = v101 + 32;
        while (1)
        {
          sub_100030784(v104, (uint64_t)&v242);
          v105 = v243;
          v106 = v244;
          sub_10001AA44(&v242, v243);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v106 + 8) + 8) + 32))(v105);
          LOBYTE(v105) = static UUID.== infix(_:_:)(v38, v35);
          v107 = v241;
          v241(v38, v23);
          if ((v105 & 1) != 0)
            break;
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v242);
          v104 += 40;
          if (!--v103)
            goto LABEL_19;
        }
        sub_10000F9FC(&v242, (uint64_t)&aBlock);
        swift_bridgeObjectRelease(v102);
      }
      else
      {
LABEL_19:
        v247 = 0;
        aBlock = 0u;
        v246 = 0u;
        swift_bridgeObjectRelease(v102);
        v107 = v241;
      }
      a1 = v240;
      v81 = v238;
      v59 = v225;
      v83 = v236;
      if (!*((_QWORD *)&v246 + 1))
        goto LABEL_35;
      ++v80;
      sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
      v107(v35, v23);
      v82 = v239;
      if (v80 == v229)
        goto LABEL_27;
    }
  }
  else
  {
    v84 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
    swift_bridgeObjectRetain(a1);
    v81 = v238;
    v82 = v239;
    v83 = v236;
LABEL_27:
    v84(v83, 1, 1, v23);
  }
  swift_bridgeObjectRelease(a1);
  v81(v38, v82, v23);
  v124 = *(unsigned __int8 *)(v59 + 80);
  v125 = (v124 + 24) & ~v124;
  v235 = v125 + v209;
  v239 = v124 | 7;
  v126 = swift_allocObject(&unk_10108FCC8, v125 + v209, v124 | 7);
  v127 = v237;
  *(_QWORD *)(v126 + 16) = v237;
  v240 = v125;
  v236 = *(char **)(v59 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v236)(v126 + v125, v38, v23);
  v128 = swift_allocObject(&unk_10108FCF0, 24, 7);
  *(_QWORD *)(v128 + 16) = a1;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v129 = (uint64_t)v212;
  v130 = v82;
  sub_100765BF0((uint64_t)sub_100774980, v126, (uint64_t)sub_100774984, v128, (uint64_t *)&unk_101106E30, (uint64_t)sub_10077499C, (uint64_t)v212);
  swift_release(v126);
  swift_release(v128);
  v131 = v210;
  sub_10000F9B8(v129, v210, (uint64_t *)&unk_101106E30);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v131, v211);
  sub_100004048(v131, (uint64_t *)&unk_101106E30);
  if (EnumCaseMultiPayload != 1)
  {
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v147 = v214;
    v148 = v213;
    v149 = v215;
    (*(void (**)(char *, _QWORD, uint64_t))(v214 + 104))(v213, enum case for DispatchQoS.QoSClass.default(_:), v215);
    v241 = (void (*)(char *, uint64_t))static OS_dispatch_queue.global(qos:)(v148);
    (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v149);
    v238(v38, v130, v23);
    v150 = (v235 + 7) & 0xFFFFFFFFFFFFFFF8;
    v151 = (v150 + 23) & 0xFFFFFFFFFFFFFFF8;
    v152 = swift_allocObject(&unk_10108FD18, v151 + 8, v239);
    *(_QWORD *)(v152 + 16) = a1;
    ((void (*)(uint64_t, char *, uint64_t))v236)(v152 + v240, v38, v23);
    v153 = (_QWORD *)(v152 + v150);
    v154 = v223;
    *v153 = v224;
    v153[1] = v154;
    *(_QWORD *)(v152 + v151) = v127;
    v247 = sub_100774990;
    v248 = v152;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v246 = sub_100016FB8;
    *((_QWORD *)&v246 + 1) = &unk_10108FD30;
    v155 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a1);
    swift_retain();
    v156 = swift_retain();
    v157 = v219;
    static DispatchQoS.unspecified.getter(v156);
    *(_QWORD *)&v242 = _swiftEmptyArrayStorage;
    v158 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v159 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v160 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v161 = v218;
    v162 = v159;
    v163 = v216;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v242, v162, v160, v216, v158);
    v164 = v241;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v157, v161, v155);
    _Block_release(v155);

    (*(void (**)(char *, uint64_t))(v220 + 8))(v161, v163);
    (*(void (**)(char *, uint64_t))(v221 + 8))(v157, v222);
    sub_100004048((uint64_t)v212, (uint64_t *)&unk_101106E30);
    return swift_release(v248);
  }
  v133 = v208;
  v238(v208, v130, v23);
  v134 = swift_bridgeObjectRetain_n(a1, 2);
  v135 = Logger.logObject.getter(v134);
  v136 = static os_log_type_t.error.getter(v135);
  if (os_log_type_enabled(v135, v136))
  {
    v137 = swift_slowAlloc(22, -1);
    v138 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v138;
    *(_DWORD *)v137 = 136315394;
    v139 = swift_bridgeObjectRetain(a1);
    v140 = Array.description.getter(v139, v23);
    v142 = v141;
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&v242 = sub_100016940(v140, v142, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v137 + 4, v137 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v142);
    *(_WORD *)(v137 + 12) = 2080;
    v143 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v144 = dispatch thunk of CustomStringConvertible.description.getter(v23, v143);
    v146 = v145;
    *(_QWORD *)&v242 = sub_100016940(v144, v145, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 8, v137 + 14, v137 + 22);
    swift_bridgeObjectRelease(v146);
    v241(v133, v23);
    _os_log_impl((void *)&_mh_execute_header, v135, v136, "Failed to unassign %s from safe location with UUID: %s", (uint8_t *)v137, 0x16u);
    swift_arrayDestroy(v138, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v138, -1, -1);
    swift_slowDealloc(v137, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    v241(v133, v23);
  }

  v165 = (uint64_t)v212;
  type metadata accessor for SPSeparationMonitoringError(0);
  v167 = v166;
  *(_QWORD *)&v242 = 17;
  v168 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v169 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v242, v168, v167, v169);
  v170 = (void *)aBlock;
  v224(aBlock, 1);

  return sub_100004048(v165, (uint64_t *)&unk_101106E30);
}

void sub_10076FAD8(void (*a1)(void *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  type metadata accessor for SPSeparationMonitoringError(0);
  v6 = v5;
  v10 = a3;
  v7 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  v9 = v11;
  a1(v11, 1);

}

uint64_t sub_10076FB84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  char v9;

  v4 = type metadata accessor for SafeLocation(0);
  v5 = (unint64_t *)(a1 + *(int *)(v4 + 52));
  swift_bridgeObjectRetain(a2);
  v6 = sub_10077C474(v5, a2);
  result = swift_bridgeObjectRelease(a2);
  v8 = *(_QWORD *)(*v5 + 16);
  if (v8 < v6)
  {
    __break(1u);
  }
  else
  {
    result = sub_1007793D0(v6, v8);
    if (*(_QWORD *)(*v5 + 16))
      v9 = 1;
    else
      v9 = 2;
    *(_BYTE *)(a1 + *(int *)(v4 + 48)) = v9;
  }
  return result;
}

uint64_t sub_10076FC2C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5, const char *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v32[2];
  void (*v33)(_QWORD, _QWORD);
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37[2];

  v35 = a6;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B75D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  v16 = swift_bridgeObjectRetain_n(a1, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v32[1] = a4;
    v20 = v19;
    v32[0] = swift_slowAlloc(64, -1);
    v37[0] = v32[0];
    *(_DWORD *)v20 = 136315394;
    v21 = swift_bridgeObjectRetain(a1);
    v22 = Array.description.getter(v21, v11);
    v33 = a3;
    v34 = a5;
    v23 = v22;
    v25 = v24;
    swift_bridgeObjectRelease(a1);
    v36 = sub_100016940(v23, v25, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v20 + 12) = 2080;
    v26 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v11, v26);
    v29 = v28;
    v36 = sub_100016940(v27, v28, v37);
    a3 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, v35, (uint8_t *)v20, 0x16u);
    v30 = v32[0];
    swift_arrayDestroy(v32[0], 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }

  a3(0, 0);
  sub_1007EEF64(16);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  type metadata accessor for Transaction(0);
  static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
  return sub_1007EF200();
}

_QWORD *sub_10076FF48(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  NSString v17;
  id v18;
  _QWORD *v19;
  id v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;

  v38 = sub_10001A9A8(&qword_101106F70);
  v2 = *(_QWORD *)(v38 - 8);
  v3 = __chkstk_darwin(v38);
  v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v34 - v5;
  v7 = type metadata accessor for SafeLocation(0);
  v36 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "coordinate");
  v11 = v10;
  v13 = v12;
  objc_msgSend(a1, "horizontalAccuracy");
  v15 = v14;
  v16 = objc_allocWithZone((Class)CLCircularRegion);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "initWithCenter:radius:identifier:", v17, v11, v13, v15);

  objc_msgSend(v18, "setGeoReferenceFrame:", objc_msgSend(a1, "referenceFrame"));
  v19 = sub_10001E350();
  v20 = v18;
  v21 = sub_100779028((uint64_t)v19, v20);
  swift_bridgeObjectRelease();

  v22 = sub_1007788A8((uint64_t)v21);
  swift_bridgeObjectRelease();
  v39 = v22;
  swift_bridgeObjectRetain(v22);
  sub_10075ABD4(&v39);
  swift_bridgeObjectRelease();
  v23 = v39;
  v24 = v39[2];
  if (v24)
  {
    v35 = v20;
    v39 = _swiftEmptyArrayStorage;
    sub_10009AC18(0, v24, 0);
    v25 = *(unsigned __int8 *)(v2 + 80);
    v34 = v23;
    v26 = (uint64_t)v23 + ((v25 + 32) & ~v25);
    v27 = *(_QWORD *)(v2 + 72);
    v28 = v39;
    do
    {
      sub_10000F9B8(v26, (uint64_t)v6, &qword_101106F70);
      v29 = *(int *)(v38 + 48);
      v30 = (uint64_t)&v37[v29];
      sub_10005972C((uint64_t)&v6[v29], (uint64_t)&v37[v29], type metadata accessor for SafeLocation);
      sub_1000126EC(v30, (uint64_t)v9, type metadata accessor for SafeLocation);
      sub_100004048((uint64_t)v6, &qword_101106F70);
      if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      {
        sub_10009AC18(0, v28[2] + 1, 1);
        v28 = v39;
      }
      v32 = v28[2];
      v31 = v28[3];
      if (v32 >= v31 >> 1)
      {
        sub_10009AC18(v31 > 1, v32 + 1, 1);
        v28 = v39;
      }
      v28[2] = v32 + 1;
      sub_1000126EC((uint64_t)v9, (uint64_t)v28+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(_QWORD *)(v36 + 72) * v32, type metadata accessor for SafeLocation);
      v26 += v27;
      --v24;
    }
    while (v24);
    swift_release();

  }
  else
  {
    swift_release();

    return _swiftEmptyArrayStorage;
  }
  return v28;
}

uint64_t sub_1007702A4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  void (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint8_t *v33;
  NSObject *v34;
  NSObject **v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject **v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char v84[24];
  NSObject *v85;
  uint64_t v86;
  char *v87;

  v75 = a3;
  v76 = a4;
  v9 = type metadata accessor for DispatchTime(0);
  v82 = *(_QWORD *)(v9 - 8);
  v83 = v9;
  v10 = __chkstk_darwin(v9);
  v80 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v81 = (char *)&v65 - v12;
  v13 = type metadata accessor for UUID(0);
  __chkstk_darwin(v13);
  v74 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SafeLocation(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v77 = v18;
  v78 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v87 = (char *)&v65 - v19;
  v73 = sub_10001A9A8(&qword_101106E40);
  v20 = __chkstk_darwin(v73);
  v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v65 - v23;
  v79 = a1;
  v25 = sub_10076FF48(a2);
  if (v25[2])
  {
    sub_10005972C((uint64_t)v25 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), (uint64_t)v24, type metadata accessor for SafeLocation);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v26((uint64_t)v24, 0, 1, v15);
  }
  else
  {
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
    v26((uint64_t)v24, 1, 1, v15);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v24, 1, v15) == 1)
  {
    v72 = v26;
    sub_100004048((uint64_t)v24, &qword_101106E40);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v70 = a5;
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B75D0);
    v29 = a2;
    v67 = v28;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v71 = v5;
    v69 = v15;
    v68 = v22;
    if (v32)
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v85 = v29;
      v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v33 + 4, v33 + 12);
      v35 = v66;
      *v66 = v29;

      v15 = v69;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "No suggested safe location for: %@ creating new one.", v33, 0xCu);
      v36 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v35, 1, v36);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {

      v30 = v29;
    }
    v38 = v87;

    if (v76)
      v39 = v75;
    else
      v39 = 0;
    if (v76)
      v40 = v76;
    else
      v40 = 0xE000000000000000;
    swift_bridgeObjectRetain(v76);
    v41 = (uint64_t)v74;
    UUID.init()(v42);
    sub_100B000E0(v41, v29, v39, v40, 1, 2, v38);
    v43 = dispatch_group_create();
    v44 = swift_allocBox(v73);
    v46 = v45;
    v72(v45, 1, 1, v15);
    dispatch_group_enter(v43);
    v47 = v78;
    sub_10005972C((uint64_t)v38, v78, type metadata accessor for SafeLocation);
    v48 = *(unsigned __int8 *)(v16 + 80);
    v49 = (v48 + 24) & ~v48;
    v50 = (v77 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    v51 = swift_allocObject(&unk_101090DA8, v50 + 8, v48 | 7);
    *(_QWORD *)(v51 + 16) = v44;
    sub_1000126EC(v47, v51 + v49, type metadata accessor for SafeLocation);
    *(_QWORD *)(v51 + v50) = v43;
    swift_retain();
    v52 = v43;
    sub_100768020((uint64_t)v38, 0, (void (*)(_QWORD, _QWORD))sub_10077F1E0, v51);
    v53 = swift_release();
    v54 = v80;
    static DispatchTime.now()(v53);
    v55 = v81;
    + infix(_:_:)(v54, 120.0);
    v56 = v83;
    v57 = *(void (**)(char *, uint64_t))(v82 + 8);
    v57(v54, v83);
    v58 = OS_dispatch_group.wait(timeout:)(v55) & 1;
    v57(v55, v56);
    v59 = static DispatchTimeoutResult.== infix(_:_:)(v58, 1);
    if ((v59 & 1) != 0)
    {
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed to create safe location suggestion due to timeout", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      sub_1000126B0((uint64_t)v38, type metadata accessor for SafeLocation);
      v63 = (uint64_t)v68;
      v72((uint64_t)v68, 1, 1, v69);
      swift_beginAccess(v46, v84, 1, 0);
      sub_100004084(v63, v46, &qword_101106E40);
    }
    else
    {
      sub_1000126B0((uint64_t)v38, type metadata accessor for SafeLocation);

    }
    v64 = v70;
    swift_beginAccess(v46, &v85, 0, 0);
    sub_10000F9B8(v46, v64, &qword_101106E40);
    return swift_release();
  }
  else
  {
    sub_1000126EC((uint64_t)v24, a5, type metadata accessor for SafeLocation);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v26)(a5, 0, 1, v15);
  }
}

void sub_100770924(void *a1, char a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32[3];

  v10 = sub_10001A9A8(&qword_101106E40);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_projectBox(a3);
  if ((a2 & 1) != 0)
  {
    v15 = qword_1010E9F10;
    v16 = a1;
    if (v15 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B75D0);
    v18 = v16;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v31 = (uint64_t)v18;
      v32[0] = v22;
      v30 = a5;
      *(_DWORD *)v21 = 136315138;
      v29 = v21 + 4;
      type metadata accessor for SPSeparationMonitoringError(0);
      v24 = v23;
      v25 = sub_100006204(&qword_101106EA0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B50);
      v26 = Error.localizedDescription.getter(v24, v25);
      v31 = sub_100016940(v26, v27, v32);
      a5 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v29, v21 + 12);
      swift_bridgeObjectRelease();
      sub_100294B28(a1, 1);
      sub_100294B28(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to create new safe location suggestion due to: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      sub_100294B28(a1, 1);
    }
    else
    {
      sub_100294B28(a1, 1);
      sub_100294B28(a1, 1);

    }
    v28 = type metadata accessor for SafeLocation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 1, 1, v28);
  }
  else
  {
    sub_10005972C(a4, (uint64_t)v12, type metadata accessor for SafeLocation);
    v14 = type metadata accessor for SafeLocation(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 0, 1, v14);
  }
  swift_beginAccess(v13, v32, 1, 0);
  sub_100004084((uint64_t)v12, v13, &qword_101106E40);
  dispatch_group_leave(a5);
}

void sub_100770C14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  _QWORD *v30;
  uint64_t v31;

  v2 = type metadata accessor for LeashRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (_OWORD *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100889888();
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B75D0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Attempting to merge leash records if needed.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = v6[2];
  if (v12 < 2)
  {
    v17 = swift_bridgeObjectRelease();
    v29 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v18, "No duplicated leash records found, no need to merge.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  else
  {
    swift_bridgeObjectRetain(v6);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v16 = 134217984;
      v30 = (_QWORD *)v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Found %ld leash records, cleaning up.", v16, 0xCu);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v20 = _swiftEmptyArrayStorage;
    v30 = _swiftEmptyArrayStorage;
    v21 = v6[2];
    if (v21)
    {
      v22 = (char *)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      v23 = *(_QWORD *)(v3 + 72);
      swift_bridgeObjectRetain(v6);
      do
      {
        swift_bridgeObjectRetain(*(_QWORD *)&v22[*(int *)(v2 + 24)]);
        sub_1003028FC(v24);
        v22 += v23;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      v20 = v30;
    }
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = Array<A>.uniqued()(v20, v25, v26);
    v28 = swift_bridgeObjectRelease();
    UUID.init()(v28);
    *v5 = xmmword_100E22FC0;
    *(_QWORD *)((char *)v5 + *(int *)(v2 + 24)) = v27;
    swift_bridgeObjectRetain(v6);
    swift_retain();
    sub_10086E338((uint64_t)v5, 0, a1, (uint64_t)v6, a1);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_release();
    sub_1000126B0((uint64_t)v5, type metadata accessor for LeashRecord);
  }
}

void sub_100770FA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[2];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  _BYTE v56[8];
  uint64_t v57;

  v53 = a3;
  v52 = type metadata accessor for LeashRecord(0);
  v5 = *(_QWORD *)(v52 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = __chkstk_darwin(v52);
  v51 = (uint64_t)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v7);
  v50 = (uint64_t)v44 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)v44 - v10;
  v12 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v14, (uint64_t *)&unk_101106E50);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    v15 = *v14;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B75D0);
    swift_errorRetain(v15);
    v17 = swift_errorRetain(v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v57 = v21;
      *(_DWORD *)v20 = 136315138;
      swift_getErrorValue(v15, v56, v55);
      v22 = Error.localizedDescription.getter(v55[1], v55[2]);
      v54 = sub_100016940(v22, v23, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create a new merged leash record, bailing out - %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v15);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      swift_errorRelease(v15);

    }
  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B75D0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully created a merged leash record, removing existing ones.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = *(_QWORD *)(a2 + 16);
    if (v29)
    {
      v44[0] = v14;
      v44[1] = a2;
      v30 = *(unsigned __int8 *)(v5 + 80);
      v31 = a2 + ((v30 + 32) & ~v30);
      v32 = *(_QWORD *)(v5 + 72);
      v48 = (v30 + 16) & ~v30;
      v49 = v32;
      v46 = v30 | 7;
      v47 = v48 + v6;
      swift_bridgeObjectRetain(a2);
      v45 = xmmword_100E22B00;
      do
      {
        sub_10005972C(v31, (uint64_t)v11, type metadata accessor for LeashRecord);
        v33 = v50;
        sub_10005972C((uint64_t)v11, v50, type metadata accessor for LeashRecord);
        v34 = swift_allocObject(&unk_1010901C8, v47, v46);
        v35 = sub_1000126EC(v33, v34 + v48, type metadata accessor for LeashRecord);
        v36 = static os_log_type_t.default.getter(v35);
        if (qword_1010EA258 != -1)
          swift_once(&qword_1010EA258, sub_100B5D9CC);
        v37 = qword_1011B7D38;
        v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v39 = swift_allocObject(v38, 72, 7);
        *(_OWORD *)(v39 + 16) = v45;
        v40 = v51;
        sub_10005972C((uint64_t)v11, v51, type metadata accessor for LeashRecord);
        v41 = String.init<A>(describing:)(v40, v52);
        v43 = v42;
        *(_QWORD *)(v39 + 56) = &type metadata for String;
        *(_QWORD *)(v39 + 64) = sub_10001AA00();
        *(_QWORD *)(v39 + 32) = v41;
        *(_QWORD *)(v39 + 40) = v43;
        os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Attempting to remove: %@", 24, 2, v39);
        swift_bridgeObjectRelease();
        swift_retain();
        sub_10086D458((uint64_t)v11, v53, (uint64_t)sub_10077CFCC, v34);
        swift_release_n(v34, 2);
        sub_1000126B0((uint64_t)v11, type metadata accessor for LeashRecord);
        v31 += v49;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)v44[0];
    }
    sub_100004048((uint64_t)v14, (uint64_t *)&unk_101106E50);
  }
}

void sub_1007714E8(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for LeashRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B75D0);
  v8 = sub_10005972C(a2, (uint64_t)v6, type metadata accessor for LeashRecord);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(18, -1);
    v12 = swift_slowAlloc(32, -1);
    v18 = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    v17 = sub_100016940(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v6, type metadata accessor for LeashRecord);
    *(_WORD *)(v11 + 12) = 1024;
    LODWORD(v17) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, (char *)&v17 + 4, v11 + 14, v11 + 18);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Removed duplicated leash record: %s: %{BOOL}d.", (uint8_t *)v11, 0x12u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v6, type metadata accessor for LeashRecord);
  }

}

uint64_t sub_100771728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *v27;
  double v28;
  double v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (**v48)(void *, char);
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t aBlock[8];

  v82 = a1;
  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(uint64_t (**)(uint64_t))(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = v12;
  __chkstk_darwin(v11);
  v80 = (char *)&v61 - v14;
  v71 = type metadata accessor for SafeLocation(0);
  v83 = *(_QWORD *)(v71 - 8);
  v15 = __chkstk_darwin(v71);
  v69 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v70 = (uint64_t)&v61 - v18;
  v65 = v19;
  __chkstk_darwin(v17);
  v68 = (char *)&v61 - v20;
  if (qword_1010E9F10 != -1)
    goto LABEL_24;
  while (1)
  {
    v72 = v13;
    v73 = v9;
    v74 = v6;
    v81 = v8;
    v75 = v5;
    v77 = v2;
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B75D0);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Attempting to clean unused separation alert safe locations", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = v82;
    v27 = sub_10001E350();
    v13 = v68;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v5 = 0;
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B8AC(aBlock[0]);
    v29 = v28;
    swift_bridgeObjectRelease();
    v2 = (uint64_t)_swiftEmptyArrayStorage;
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    v9 = v27[2];
    v78 = v1;
    v79 = v10;
    v76 = v4;
    if (!v9)
      break;
    v10 = 0;
    v6 = type metadata accessor for SafeLocation;
    while (v10 < v27[2])
    {
      v4 = (char *)((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80));
      v1 = *(_QWORD *)(v83 + 72);
      sub_10005972C((uint64_t)&v4[(_QWORD)v27 + v1 * v10], (uint64_t)v13, type metadata accessor for SafeLocation);
      sub_100771EB0((uint64_t)v13, v29);
      if ((v30 & 1) != 0)
      {
        v8 = (char *)v9;
        sub_1000126EC((uint64_t)v13, v69, type metadata accessor for SafeLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
          sub_10009AC18(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = aBlock[0];
        v32 = *(_QWORD *)(aBlock[0] + 16);
        v31 = *(_QWORD *)(aBlock[0] + 24);
        if (v32 >= v31 >> 1)
        {
          sub_10009AC18(v31 > 1, v32 + 1, 1);
          v2 = aBlock[0];
        }
        *(_QWORD *)(v2 + 16) = v32 + 1;
        sub_1000126EC(v69, (uint64_t)&v4[v2 + v32 * v1], type metadata accessor for SafeLocation);
        v9 = (uint64_t)v8;
        v13 = v68;
      }
      else
      {
        sub_1000126B0((uint64_t)v13, type metadata accessor for SafeLocation);
      }
      if (v9 == ++v10)
      {
        v2 = aBlock[0];
        v26 = v82;
        v10 = v79;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_24:
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  }
LABEL_18:
  swift_bridgeObjectRelease();
  v33 = *(_QWORD *)(v2 + 16);
  if (!v33)
    return swift_release();
  v34 = *(unsigned __int8 *)(v83 + 80);
  v35 = v2 + ((v34 + 32) & ~v34);
  v69 = *(_QWORD *)(v26 + 88);
  v68 = *(char **)(v83 + 72);
  v67 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v66 = (v34 + 16) & ~v34;
  v65 += v66;
  v64 = v34 | 7;
  v63 += 7;
  v62 = v2;
  swift_retain();
  v36 = v80;
  v37 = v79;
  do
  {
    v83 = v33;
    v38 = v73;
    v39 = v67;
    v67(v36, (char *)(v35 + *(int *)(v71 + 20)), v73);
    v40 = v70;
    sub_10005972C(v35, v70, type metadata accessor for SafeLocation);
    v41 = swift_allocObject(&unk_10108FFE8, v65, v64);
    sub_1000126EC(v40, v41 + v66, type metadata accessor for SafeLocation);
    v42 = v72;
    v39(v72, v36, v38);
    v43 = *(unsigned __int8 *)(v37 + 80);
    v44 = (v43 + 16) & ~v43;
    v45 = (v63 + v44) & 0xFFFFFFFFFFFFFFF8;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = swift_allocObject(&unk_101090010, v46 + 16, v43 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v47 + v44, v42, v38);
    *(_QWORD *)(v47 + v45) = v82;
    v36 = v80;
    v48 = (void (**)(void *, char))(v47 + v46);
    *v48 = sub_10077CBC8;
    v48[1] = (void (*)(void *, char))v41;
    aBlock[4] = (uint64_t)sub_10077CC18;
    aBlock[5] = v47;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_101090028;
    v49 = _Block_copy(aBlock);
    swift_retain();
    v50 = swift_retain();
    static DispatchQoS.unspecified.getter(v50);
    v84 = _swiftEmptyArrayStorage;
    v51 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v52 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v53 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v54 = v76;
    v55 = v78;
    v56 = v51;
    v57 = v81;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v52, v53, v78, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v54, v49);
    _Block_release(v49);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v54, v55);
    (*((void (**)(char *, uint64_t))v74 + 1))(v57, v75);
    swift_release();
    swift_release();
    v58 = v38;
    v59 = v83;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v58);
    v35 += (uint64_t)v68;
    v33 = v59 - 1;
  }
  while (v33);
  return swift_release_n(v62, 2);
}

void sub_100771EB0(uint64_t a1, double a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL4 v34;
  void *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v64 = type metadata accessor for SafeLocation(0);
  v5 = __chkstk_darwin(v64);
  v59 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v60 = (char *)&v57 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v57 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v57 - v12;
  v63 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v63 - 8);
  v15 = __chkstk_darwin(v63);
  v58 = (uint64_t)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v61 = (char *)&v57 - v18;
  v19 = __chkstk_darwin(v17);
  v57 = (char *)&v57 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v57 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v57 - v24;
  v26 = objc_autoreleasePoolPush();
  sub_10084EE10(a1);
  if (v2)
  {
    objc_autoreleasePoolPop(v26);
    __break(1u);
    objc_autoreleasePoolPop(v2);
    __break(1u);
  }
  else
  {
    objc_autoreleasePoolPop(v26);
    v27 = objc_autoreleasePoolPush();
    sub_100774718(a1);
    objc_autoreleasePoolPop(v27);
    v28 = static Date.== infix(_:_:)(v25, v23);
    v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v30 = v23;
    v31 = v63;
    v29(v30, v63);
    v29(v25, v31);
    sub_10005972C(a1, (uint64_t)v13, type metadata accessor for SafeLocation);
    v32 = a1;
    v62 = (v28 & 1) != 0 && v13[*(int *)(v64 + 48)] == 2;
    v33 = (uint64_t)v60;
    sub_1000126B0((uint64_t)v13, type metadata accessor for SafeLocation);
    sub_10005972C(a1, (uint64_t)v11, type metadata accessor for SafeLocation);
    v34 = (v28 & 1) != 0 && *(_QWORD *)(*(_QWORD *)&v11[*(int *)(v64 + 52)] + 16) == 0;
    sub_1000126B0((uint64_t)v11, type metadata accessor for SafeLocation);
    sub_10005972C(a1, v33, type metadata accessor for SafeLocation);
    if ((v28 & 1) != 0)
    {
      v35 = objc_autoreleasePoolPush();
      sub_10084EE10(v33);
      v60 = 0;
      objc_autoreleasePoolPop(v35);
      v36 = v57;
      v37 = v61;
      Date.addingTimeInterval(_:)(a2);
      v38 = v63;
      v29(v37, v63);
      v39 = v58;
      static Date.trustedNow.getter(v58);
      v40 = static Date.< infix(_:_:)(v36, v39);
      v29((char *)v39, v38);
      v29(v36, v38);
    }
    else
    {
      v60 = 0;
      v40 = 0;
    }
    sub_1000126B0(v33, type metadata accessor for SafeLocation);
    v41 = v62 && v34;
    v42 = (uint64_t)v59;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v43 = v41 & v40;
    v44 = type metadata accessor for Logger(0);
    sub_10001A9E8(v44, (uint64_t)qword_1011B75D0);
    v45 = sub_10005972C(v32, v42, type metadata accessor for SafeLocation);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(42, -1);
      v63 = swift_slowAlloc(32, -1);
      v66 = v63;
      *(_DWORD *)v48 = 136447490;
      LODWORD(v61) = v34;
      v49 = type metadata accessor for UUID(0);
      LODWORD(v64) = v40;
      v50 = v43;
      v51 = v42;
      v52 = v49;
      v53 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      v65 = sub_100016940(v54, v55, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v51, type metadata accessor for SafeLocation);
      *(_WORD *)(v48 + 12) = 1024;
      LODWORD(v65) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v48 + 14, v48 + 18);
      *(_WORD *)(v48 + 18) = 1024;
      LODWORD(v65) = v28 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v48 + 20, v48 + 24);
      *(_WORD *)(v48 + 24) = 1024;
      LODWORD(v65) = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v48 + 26, v48 + 30);
      *(_WORD *)(v48 + 30) = 1024;
      LODWORD(v65) = (_DWORD)v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v48 + 32, v48 + 36);
      *(_WORD *)(v48 + 36) = 1024;
      LODWORD(v65) = v64 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 4, v48 + 38, v48 + 42);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Should cleanup safe location %{public}s: %{BOOL}d\nreasons: (hasNeverBeenModified: %{BOOL}d, hasAlwaysBeenASuggestion: %{BOOL}d, hasNoAssociatedBeacons: %{BOOL}d), hasBeenCreatedLongAgo: %{BOOL}d)", (uint8_t *)v48, 0x2Au);
      v56 = v63;
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      sub_1000126B0(v42, type metadata accessor for SafeLocation);
    }

  }
}

void sub_1007724A0(void *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for SafeLocation(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v39 - v10;
  if ((a2 & 1) != 0)
  {
    v22 = qword_1010E9F10;
    v23 = a1;
    if (v22 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B75D0);
    sub_10005972C(a3, (uint64_t)v9, type metadata accessor for SafeLocation);
    sub_100294B60(a1, 1);
    v25 = v23;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(64, -1);
      v40 = v29;
      *(_DWORD *)v28 = 136315394;
      v30 = type metadata accessor for UUID(0);
      v31 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      v39 = sub_100016940(v32, v33, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v9, type metadata accessor for SafeLocation);
      *(_WORD *)(v28 + 12) = 2080;
      v39 = (uint64_t)v25;
      type metadata accessor for SPSeparationMonitoringError(0);
      v35 = v34;
      v36 = sub_100006204(&qword_101106EA0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B50);
      v37 = Error.localizedDescription.getter(v35, v36);
      v39 = sub_100016940(v37, v38, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      sub_100294B28(a1, 1);
      sub_100294B28(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to remove unused safe location: %s due to error: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      sub_100294B28(a1, 1);
    }
    else
    {
      sub_100294B28(a1, 1);
      sub_1000126B0((uint64_t)v9, type metadata accessor for SafeLocation);
      sub_100294B28(a1, 1);
      sub_100294B28(a1, 1);

    }
  }
  else
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B75D0);
    v13 = sub_10005972C(a3, (uint64_t)v11, type metadata accessor for SafeLocation);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v40 = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = type metadata accessor for UUID(0);
      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
      v39 = sub_100016940(v20, v21, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v11, type metadata accessor for SafeLocation);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfuly removed unused safe location: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v11, type metadata accessor for SafeLocation);
    }

  }
}

uint64_t sub_100772968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  void (*v19)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45[24];
  char v46[24];
  void (*v47)(uint64_t, uint64_t, uint64_t, uint64_t);

  v44 = a2;
  v3 = type metadata accessor for DispatchTime(0);
  v43 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v40 - v7;
  v9 = type metadata accessor for LeashRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (_OWORD *)((char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_10001A9A8(&qword_101111B80);
  v14 = __chkstk_darwin(v13);
  v41 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v40 - v16;
  v42 = a1;
  v18 = sub_100889888();
  if (v18[2])
  {
    sub_10005972C((uint64_t)v18 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)), (uint64_t)v17, type metadata accessor for LeashRecord);
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v20 = v17;
    v21 = 0;
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v20 = v17;
    v21 = 1;
  }
  v47 = v19;
  v19((uint64_t)v20, v21, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v17, 1, v9) == 1)
  {
    v22 = sub_100004048((uint64_t)v17, &qword_101111B80);
    UUID.init()(v22);
    *v12 = xmmword_100E22FC0;
    *(_QWORD *)((char *)v12 + *(int *)(v9 + 24)) = _swiftEmptyArrayStorage;
    v23 = dispatch_group_create();
    dispatch_group_enter(v23);
    v24 = swift_allocBox(v13);
    v26 = v25;
    v47(v25, 1, 1, v9);
    v27 = v23;
    v28 = v42;
    v42 = v24;
    sub_10086EA5C((uint64_t)v12, 0, v28, v24, v27);

    static DispatchTime.now()(v29);
    + infix(_:_:)(v6, 120.0);
    v30 = *(void (**)(char *, uint64_t))(v43 + 8);
    v30(v6, v3);
    v31 = OS_dispatch_group.wait(timeout:)(v8) & 1;
    v30(v8, v3);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v31, 1) & 1) != 0)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v32 = type metadata accessor for Logger(0);
      v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B75D0);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to create new leash record due to timeout", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }

      sub_1000126B0((uint64_t)v12, type metadata accessor for LeashRecord);
      v37 = (uint64_t)v41;
      v47((uint64_t)v41, 1, 1, v9);
      swift_beginAccess(v26, v45, 1, 0);
      sub_100004084(v37, v26, &qword_101111B80);
    }
    else
    {
      sub_1000126B0((uint64_t)v12, type metadata accessor for LeashRecord);

    }
    swift_beginAccess(v26, v46, 0, 0);
    sub_10000F9B8(v26, v44, &qword_101111B80);
    return swift_release();
  }
  else
  {
    v38 = v44;
    sub_1000126EC((uint64_t)v17, v44, type metadata accessor for LeashRecord);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v47)(v38, 0, 1, v9);
  }
}

void sub_100772D98(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];
  char v44[8];
  uint64_t v45[3];

  v6 = type metadata accessor for LeashRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = swift_projectBox(a2);
  sub_10000F9B8(a1, (uint64_t)v15, (uint64_t *)&unk_101106E50);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    v17 = *v15;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B75D0);
    swift_errorRetain(v17);
    v19 = swift_errorRetain(v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(12, -1);
      v40 = v7;
      v23 = (uint8_t *)v22;
      v24 = swift_slowAlloc(32, -1);
      v41 = v6;
      v25 = v24;
      v45[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v39 = v16;
      swift_getErrorValue(v17, v44, v43);
      v26 = Error.localizedDescription.getter(v43[1], v43[2]);
      v42 = sub_100016940(v26, v27, v45);
      v16 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to create new leash record due to: %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v28 = v25;
      v6 = v41;
      swift_slowDealloc(v28, -1, -1);
      v29 = v23;
      v7 = v40;
      swift_slowDealloc(v29, -1, -1);

      swift_errorRelease(v17);
    }
    else
    {
      swift_errorRelease(v17);
      swift_errorRelease(v17);
      swift_errorRelease(v17);

    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, 1, 1, v6);
  }
  else
  {
    sub_1000126EC((uint64_t)v15, (uint64_t)v9, type metadata accessor for LeashRecord);
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B75D0);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = v16;
      v35 = v7;
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Successfuly created new leash record.", v36, 2u);
      v37 = v36;
      v7 = v35;
      v16 = v34;
      swift_slowDealloc(v37, -1, -1);
    }

    sub_1000126EC((uint64_t)v9, (uint64_t)v12, type metadata accessor for LeashRecord);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  swift_beginAccess(v16, v45, 1, 0);
  sub_100004084((uint64_t)v12, v16, &qword_101111B80);
  dispatch_group_leave(a3);
}

uint64_t sub_1007731B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1007738F8(a1, a2, (uint64_t)&unk_1010901F0, (uint64_t)sub_10077D00C, a3);
}

uint64_t sub_1007731C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = swift_allocObject(&unk_101090218, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject(&unk_101090240, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10077D014;
  *(_QWORD *)(v8 + 24) = v7;
  swift_retain();
  sub_10075B3D0(a4, (uint64_t)sub_10077F9A4, v8, (uint64_t)&unk_101090268, (uint64_t)sub_10077D050, (uint64_t)&unk_101090280);
  return swift_release();
}

uint64_t sub_100773278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t result;
  uint64_t v19;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_101090948, v14 + 8, v12 | 7);
  *(_QWORD *)(v15 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v13, v11, v8);
  *(_QWORD *)(v15 + v14) = a3;
  v16 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  v17 = swift_bridgeObjectRetain(a3);
  result = Future.init(_:)(sub_10077DC1C, v15, v17);
  *a4 = result;
  return result;
}

uint64_t sub_1007733A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = swift_allocObject(&unk_101090970, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_101090998, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10077D014;
  *(_QWORD *)(v10 + 24) = v9;
  swift_retain();
  sub_10075BF08(a4, a5, (uint64_t)sub_10077F9A4, v10, (uint64_t)&unk_1010909C0, (uint64_t)sub_10077DD28, (uint64_t)&unk_1010909D8);
  return swift_release();
}

uint64_t sub_10077345C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t result;
  uint64_t v19;

  v8 = type metadata accessor for SafeLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v11, type metadata accessor for SafeLocation);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = v13 + v10;
  v15 = swift_allocObject(&unk_101090420, v14 + 1, v12 | 7);
  *(_QWORD *)(v15 + 16) = a1;
  sub_1000126EC((uint64_t)v11, v15 + v13, type metadata accessor for SafeLocation);
  *(_BYTE *)(v15 + v14) = a3;
  v16 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  result = Future.init(_:)(sub_10077D1F8, v15, v17);
  *a4 = result;
  return result;
}

uint64_t sub_100773568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = swift_allocObject(&unk_101090448, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = swift_allocObject(&unk_101090470, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10077D014;
  *(_QWORD *)(v10 + 24) = v9;
  swift_retain();
  sub_10075B66C(a4, a5, (uint64_t)sub_10077D254, v10);
  return swift_release();
}

uint64_t sub_10077360C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100773744(a1, a2, (uint64_t)&unk_101090600, (uint64_t)sub_10077D688, a3);
}

uint64_t sub_100773620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_101090628, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  v12 = type metadata accessor for SafeLocation(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4 + *(int *)(v12 + 20), v7);
  v13 = swift_allocObject(&unk_101090650, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_10077D014;
  *(_QWORD *)(v13 + 24) = v11;
  swift_retain();
  sub_10075B904((uint64_t)v10, (uint64_t)sub_10077F9A4, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100773730@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100773744(a1, a2, (uint64_t)&unk_101090678, (uint64_t)sub_10077D698, a3);
}

uint64_t sub_100773744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t result;
  uint64_t v19;

  v10 = type metadata accessor for SafeLocation(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  sub_10005972C(a2, (uint64_t)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SafeLocation);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(a3, v14 + v12, v13 | 7);
  *(_QWORD *)(v15 + 16) = a1;
  sub_1000126EC((uint64_t)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for SafeLocation);
  v16 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  swift_retain();
  result = Future.init(_:)(a4, v15, v17);
  *a5 = result;
  return result;
}

uint64_t sub_10077384C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = swift_allocObject(&unk_1010906A0, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject(&unk_1010906C8, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10077D014;
  *(_QWORD *)(v8 + 24) = v7;
  swift_retain();
  sub_10075BC64(a4, (uint64_t)sub_10077F9A4, v8);
  return swift_release();
}

uint64_t sub_1007738E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1007738F8(a1, a2, (uint64_t)&unk_101090880, (uint64_t)sub_10077DBA4, a3);
}

uint64_t sub_1007738F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t result;

  v9 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  swift_retain();
  v11 = swift_bridgeObjectRetain(a2);
  result = Future.init(_:)(a4, v9, v11);
  *a5 = result;
  return result;
}

uint64_t sub_100773988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = swift_allocObject(&unk_1010908A8, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = swift_allocObject(&unk_1010908D0, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_10077D014;
  *(_QWORD *)(v8 + 24) = v7;
  swift_retain();
  sub_10075B034(a4, (uint64_t)sub_10077F9A4, v8);
  return swift_release();
}

void sub_100773A20(void *a1, char a2, void (*a3)(void *, uint64_t))
{
  id v5;

  if ((a2 & 1) != 0)
  {
    v5 = a1;
    a3(a1, 1);
    sub_100294B28(a1, 1);
  }
  else
  {
    a3(0, 0);
  }
}

uint64_t sub_100773A84@<X0>(uint8_t *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(_QWORD), uint64_t *a11, void (*a12)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, NSObject *))
{
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint8_t *, uint64_t);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  dispatch_group_t v53;
  NSObject *v54;
  char *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  char *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t *v95;
  uint64_t v96;
  char *v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  uint8_t *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t *v129;
  char *v130;
  uint64_t v131;
  uint64_t *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t (*v140)(_QWORD);
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  void (*v146)(void);
  uint64_t (*v147)(char *, uint8_t *, uint64_t);
  uint64_t v148;
  uint8_t *v149;
  NSObject *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153[3];
  uint64_t v154;
  uint64_t v155;

  v151 = a9;
  v137 = a4;
  v138 = a6;
  v136 = a5;
  v145 = a3;
  v146 = a2;
  v15 = a10;
  v131 = sub_10001A9A8(a7);
  __chkstk_darwin(v131);
  v128 = (uint64_t)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for DispatchTime(0);
  v135 = *(_QWORD *)(v139 - 8);
  v17 = __chkstk_darwin(v139);
  v133 = (char *)&v124 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v134 = (char *)&v124 - v19;
  v132 = a8;
  v20 = sub_10001A9A8(a8);
  __chkstk_darwin(v20);
  v144 = ((char *)&v124 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = a10(0);
  v142 = *(_QWORD *)(v22 - 8);
  v143 = v22;
  __chkstk_darwin(v22);
  v150 = ((char *)&v124 - v23);
  v24 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = __chkstk_darwin(v24);
  v127 = (char *)&v124 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v126 = (char *)&v124 - v29;
  v30 = __chkstk_darwin(v28);
  v130 = (char *)&v124 - v31;
  __chkstk_darwin(v30);
  v33 = (char *)&v124 - v32;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v34 = a11;
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B75D0);
  v37 = *(uint64_t (**)(char *, uint8_t *, uint64_t))(v25 + 16);
  v149 = a1;
  v147 = v37;
  v38 = v37(v33, a1, v24);
  v148 = v36;
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter(v39);
  v41 = os_log_type_enabled(v39, v40);
  v129 = a7;
  v141 = a11;
  if (v41)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v140 = a10;
    v44 = v43;
    v153[0] = v43;
    *(_DWORD *)v42 = 136315138;
    v125 = v42 + 4;
    v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v24, v45);
    v48 = v47;
    v154 = sub_100016940(v46, v47, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v125, v42 + 12);
    swift_bridgeObjectRelease(v48);
    v49 = *(void (**)(void))(v25 + 8);
    ((void (*)(char *, uint64_t))v49)(v33, v24);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Executing synced modify operation with identifier: %s", v42, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    v50 = v44;
    v15 = v140;
    swift_slowDealloc(v50, -1, -1);
    v51 = v42;
    v34 = v141;
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    v49 = *(void (**)(void))(v25 + 8);
    ((void (*)(char *, uint64_t))v49)(v33, v24);
  }

  v52 = v24;
  v53 = dispatch_group_create();
  v54 = v144;
  v146();
  if ((*(unsigned int (**)(NSObject *, uint64_t, uint64_t))(v142 + 48))(v54, 1, v143) == 1)
  {
    sub_100004048((uint64_t)v54, v132);
    v55 = v130;
    v56 = v147(v130, v149, v52);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(12, -1);
      v146 = v49;
      v60 = (uint8_t *)v59;
      v61 = v52;
      v62 = swift_slowAlloc(32, -1);
      v153[0] = v62;
      v150 = v53;
      *(_DWORD *)v60 = 136315138;
      v149 = v60 + 4;
      v63 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v61, v63);
      v66 = v65;
      v154 = sub_100016940(v64, v65, v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v149, v60 + 12);
      swift_bridgeObjectRelease(v66);
      v53 = v150;
      ((void (*)(char *, uint64_t))v146)(v55, v61);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Synced modify operation with identifier: %s failed due to missing record.", v60, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v49)(v55, v52);
    }

    v92 = sub_10008806C();
    v93 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v92, 0, 0);
    *v94 = 11;

    v95 = v151;
    *v151 = v93;
    v96 = sub_10001A9A8(v34);
    return swift_storeEnumTagMultiPayload(v95, v96, 1);
  }
  else
  {
    v146 = v49;
    v67 = (uint64_t)v150;
    sub_1000126EC((uint64_t)v54, (uint64_t)v150, v15);
    v68 = swift_allocBox(v131);
    v70 = v69;
    v71 = sub_10001A9A8(v34);
    v142 = *(_QWORD *)(v71 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v70, 1, 1, v71);
    dispatch_group_enter(v53);
    swift_retain();
    v72 = v53;
    a12(v67, 0, v136, v138, v137, v68, v72);
    v145 = v68;
    swift_release(v68);

    v73 = v133;
    static DispatchTime.now()(v74);
    v75 = v134;
    + infix(_:_:)(v73, 120.0);
    v76 = *(void (**)(char *, uint64_t))(v135 + 8);
    v77 = v139;
    v76(v73, v139);
    v144 = v72;
    v78 = OS_dispatch_group.wait(timeout:)(v75) & 1;
    v76(v75, v77);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v78, 1) & 1) != 0)
    {
      v79 = v126;
      v80 = v147(v126, v149, v52);
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.error.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(12, -1);
        v84 = swift_slowAlloc(32, -1);
        v143 = v71;
        v85 = v52;
        v86 = v84;
        v153[0] = v84;
        v140 = v15;
        *(_DWORD *)v83 = 136315138;
        v87 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v88 = dispatch thunk of CustomStringConvertible.description.getter(v85, v87);
        v90 = v89;
        v154 = sub_100016940(v88, v89, v153);
        v15 = v140;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v83 + 4, v83 + 12);
        swift_bridgeObjectRelease(v90);
        v91 = v85;
        v71 = v143;
        ((void (*)(char *, uint64_t))v146)(v79, v91);
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Synced modify operation with identifier: %s failed due to timeout.", v83, 0xCu);
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v83, -1, -1);
      }
      else
      {
        ((void (*)(char *, uint64_t))v146)(v79, v52);
      }

      type metadata accessor for SPSeparationMonitoringError(0);
      v111 = v110;
      v154 = 19;
      v112 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v113 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
      _BridgedStoredNSError.init(_:userInfo:)(v153, &v154, v112, v111, v113);

      sub_1000126B0((uint64_t)v150, v15);
      v114 = v151;
      *v151 = v153[0];
      swift_storeEnumTagMultiPayload(v114, v71, 1);
    }
    else
    {
      v143 = v71;
      v98 = v127;
      v99 = v147(v127, v149, v52);
      v100 = Logger.logObject.getter(v99);
      v101 = static os_log_type_t.default.getter(v100);
      if (os_log_type_enabled(v100, v101))
      {
        v102 = (uint8_t *)swift_slowAlloc(12, -1);
        v103 = swift_slowAlloc(32, -1);
        v140 = v15;
        v104 = v103;
        v153[0] = v103;
        *(_DWORD *)v102 = 136315138;
        v149 = v102 + 4;
        v105 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v106 = dispatch thunk of CustomStringConvertible.description.getter(v52, v105);
        v108 = v107;
        v154 = sub_100016940(v106, v107, v153);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, &v155, v149, v102 + 12);
        swift_bridgeObjectRelease(v108);
        ((void (*)(char *, uint64_t))v146)(v98, v52);
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "Finished synced modify operation with identifier: %s.", v102, 0xCu);
        swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
        v109 = v104;
        v15 = v140;
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v102, -1, -1);
      }
      else
      {
        ((void (*)(char *, uint64_t))v146)(v98, v52);
      }

      swift_beginAccess(v70, v153, 0, 0);
      v115 = v70;
      v116 = v128;
      v117 = v129;
      sub_10000F9B8(v115, v128, v129);
      v118 = v143;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v116, 1, v143) == 1)
      {
        type metadata accessor for SPSeparationMonitoringError(0);
        v120 = v119;
        v152 = 0;
        v121 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v122 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
        _BridgedStoredNSError.init(_:userInfo:)(&v154, &v152, v121, v120, v122);

        sub_1000126B0((uint64_t)v150, v15);
        v123 = v151;
        *v151 = v154;
        swift_storeEnumTagMultiPayload(v123, v118, 1);
        sub_100004048(v116, v117);
      }
      else
      {
        sub_1000126B0((uint64_t)v150, v15);

        sub_100005CF0(v116, (uint64_t)v151, v141);
      }
    }
    return swift_release(v145);
  }
}

Swift::Int sub_100774610(uint64_t a1, uint64_t a2)
{
  return sub_100081640(a1, a2, 0xD000000000000043, 0x8000000100EC3AB0);
}

uint64_t sub_10077462C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000043, 0x8000000100EC3AB0);
}

Swift::Int sub_100774648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000816CC(a1, a2, a3, 0xD000000000000043, 0x8000000100EC3AB0);
}

uint64_t sub_100774664@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10104BFA0;
  return sub_100081720(v2, a1, a2);
}

void sub_100774670(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000043;
  a1[1] = 0x8000000100EC3AB0;
}

Swift::Int sub_100774690(uint64_t a1, uint64_t a2)
{
  return sub_100081640(a1, a2, 1819047278, 0xE400000000000000);
}

uint64_t sub_1007746A0(uint64_t a1)
{
  return String.hash(into:)(a1, 1819047278, 0xE400000000000000);
}

Swift::Int sub_1007746B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000816CC(a1, a2, a3, 1819047278, 0xE400000000000000);
}

uint64_t sub_1007746C0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10104BF68;
  return sub_100081720(v2, a1, a2);
}

void sub_1007746CC(_QWORD *a1@<X8>)
{
  *a1 = 1819047278;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1007746E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100774704(uint64_t a1)
{
  sub_100774718(a1);
}

void sub_100774718(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_100774984(uint64_t a1)
{
  uint64_t v1;

  return sub_10076FB84(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100774990()
{
  return sub_10077DE58("Successfuly to unassigned %s from safe location with UUID: %s");
}

uint64_t sub_10077499C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100773A84(*(uint8_t **)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), &qword_101106E48, &qword_101106E40, a1, type metadata accessor for SafeLocation, (uint64_t *)&unk_101106E30, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, NSObject *))sub_10086F8C8);
}

Swift::Int sub_1007749F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  uint64_t v24;
  double *v25;
  double v26;
  double v27;
  Swift::Int v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  Swift::Int v32;
  double *v33;
  double *v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  double *v42;
  uint64_t v43;
  double *v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  Swift::Int v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  double *v129;
  double *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_101106F70);
  v126 = *(_QWORD *)(v4 - 8);
  v127 = v4;
  v5 = __chkstk_darwin(v4);
  v123 = (uint64_t)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v117 - v8;
  v9 = __chkstk_darwin(v7);
  v130 = (double *)((char *)&v117 - v10);
  __chkstk_darwin(v9);
  v129 = (double *)((char *)&v117 - v11);
  v12 = a1[1];
  result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_138;
    if (v12)
      return sub_1007753D0(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_146;
  v119 = result;
  if (v12 < 2)
  {
    v18 = (char *)_swiftEmptyArrayStorage;
    v125 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    v118 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
LABEL_104:
      if (v20 >= 2)
      {
        v110 = *a1;
        do
        {
          v111 = v20 - 2;
          if (v20 < 2)
            goto LABEL_133;
          if (!v110)
            goto LABEL_145;
          v112 = v18;
          v113 = *(_QWORD *)&v18[16 * v111 + 32];
          v114 = *(_QWORD *)&v18[16 * v20 + 24];
          sub_100775604(v110 + *(_QWORD *)(v126 + 72) * v113, v110 + *(_QWORD *)(v126 + 72) * *(_QWORD *)&v18[16 * v20 + 16], v110 + *(_QWORD *)(v126 + 72) * v114, v125);
          if (v2)
            break;
          if (v114 < v113)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
            v112 = sub_10088F088((uint64_t)v18);
          if (v111 >= *((_QWORD *)v112 + 2))
            goto LABEL_135;
          v115 = &v112[16 * v111 + 32];
          *(_QWORD *)v115 = v113;
          *((_QWORD *)v115 + 1) = v114;
          v116 = *((_QWORD *)v112 + 2);
          if (v20 > v116)
            goto LABEL_136;
          memmove(&v112[16 * v20 + 16], &v112[16 * v20 + 32], 16 * (v116 - v20));
          *((_QWORD *)v112 + 2) = v116 - 1;
          v20 = v116 - 1;
          v18 = v112;
        }
        while (v116 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      v118[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v15 = v14 >> 1;
    v16 = static Array._allocateBufferUninitialized(minimumCapacity:)(v14 >> 1, v127);
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v126 + 80);
    v118 = (_QWORD *)v16;
    v125 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v18 = (char *)_swiftEmptyArrayStorage;
  v131 = a1;
  while (1)
  {
    v21 = v19 + 1;
    v124 = v19;
    if (v19 + 1 >= v12)
    {
      v28 = v19 + 1;
      goto LABEL_24;
    }
    v121 = *a1;
    v22 = v121;
    v133 = *(_QWORD *)(v126 + 72);
    v23 = v129;
    sub_10000F9B8(v121 + v133 * v21, (uint64_t)v129, &qword_101106F70);
    v24 = v22 + v133 * v19;
    v25 = v130;
    sub_10000F9B8(v24, (uint64_t)v130, &qword_101106F70);
    v26 = *v23;
    v27 = *v25;
    sub_100004048((uint64_t)v25, &qword_101106F70);
    sub_100004048((uint64_t)v23, &qword_101106F70);
    v28 = v19 + 2;
    if (v19 + 2 >= v12)
    {
LABEL_21:
      if (v27 >= v26)
        goto LABEL_24;
LABEL_42:
      if (v28 < v19)
        goto LABEL_139;
      if (v19 < v28)
      {
        v128 = v12;
        v120 = v18;
        v50 = 0;
        v51 = v133;
        v52 = v133 * (v28 - 1);
        v53 = v28 * v133;
        v54 = v19 * v133;
        do
        {
          if (v19 != v28 + v50 - 1)
          {
            v122 = v2;
            v55 = v121;
            if (!v121)
              goto LABEL_144;
            v56 = v121 + v54;
            sub_100005CF0(v121 + v54, v123, &qword_101106F70);
            if (v54 < v52 || v56 >= v55 + v53)
            {
              swift_arrayInitWithTakeFrontToBack(v55 + v54, v55 + v52, 1, v127);
            }
            else if (v54 != v52)
            {
              swift_arrayInitWithTakeBackToFront(v55 + v54, v55 + v52);
            }
            sub_100005CF0(v123, v55 + v52, &qword_101106F70);
            a1 = v131;
            v2 = v122;
            v51 = v133;
          }
          ++v19;
          --v50;
          v52 -= v51;
          v53 -= v51;
          v54 += v51;
        }
        while (v19 < v28 + v50);
        v18 = v120;
        v19 = v124;
        v12 = v128;
      }
      goto LABEL_24;
    }
    v122 = v2;
    v120 = v18;
    v128 = v133 * v21;
    v29 = v121;
    v30 = v19 + 2;
    v31 = v133 * (v19 + 2);
    while (1)
    {
      v32 = v12;
      v33 = v129;
      sub_10000F9B8(v29 + v31, (uint64_t)v129, &qword_101106F70);
      v34 = v130;
      sub_10000F9B8(v29 + v128, (uint64_t)v130, &qword_101106F70);
      v35 = *v34 >= *v33;
      sub_100004048((uint64_t)v34, &qword_101106F70);
      sub_100004048((uint64_t)v33, &qword_101106F70);
      if (v27 < v26 == v35)
        break;
      v29 += v133;
      ++v30;
      v12 = v32;
      if (v32 == v30)
      {
        v28 = v32;
        v18 = v120;
        v2 = v122;
        v19 = v124;
        goto LABEL_21;
      }
    }
    v18 = v120;
    v28 = v30;
    v2 = v122;
    v19 = v124;
    v12 = v32;
    if (v27 < v26)
      goto LABEL_42;
LABEL_24:
    if (v28 >= v12)
      goto LABEL_56;
    if (__OFSUB__(v28, v19))
      goto LABEL_137;
    if (v28 - v19 >= v119)
      goto LABEL_56;
    if (__OFADD__(v19, v119))
      goto LABEL_140;
    v36 = v19 + v119 >= v12 ? v12 : v19 + v119;
    if (v36 < v19)
      break;
    if (v28 != v36)
    {
      v120 = v18;
      v121 = v36;
      v122 = v2;
      v37 = *(_QWORD *)(v126 + 72);
      v133 = v37 * (v28 - 1);
      v128 = v37;
      v38 = v28 * v37;
      do
      {
        v39 = 0;
        while (1)
        {
          v40 = v28;
          v41 = *a1;
          v42 = v129;
          sub_10000F9B8(v38 + v39 + *a1, (uint64_t)v129, &qword_101106F70);
          v43 = v133 + v39 + v41;
          v44 = v130;
          sub_10000F9B8(v43, (uint64_t)v130, &qword_101106F70);
          v45 = *v42;
          v46 = *v44;
          sub_100004048((uint64_t)v44, &qword_101106F70);
          sub_100004048((uint64_t)v42, &qword_101106F70);
          if (v46 >= v45)
            break;
          v47 = *a1;
          if (!*a1)
            goto LABEL_142;
          v48 = v47 + v38 + v39;
          v49 = v47 + v133 + v39;
          sub_100005CF0(v48, v132, &qword_101106F70);
          swift_arrayInitWithTakeFrontToBack(v48, v49, 1, v127);
          sub_100005CF0(v132, v49, &qword_101106F70);
          v39 -= v128;
          ++v19;
          v28 = v40;
          a1 = v131;
          if (v40 == v19)
            goto LABEL_35;
        }
        v28 = v40;
LABEL_35:
        ++v28;
        v133 += v128;
        v38 += v128;
        v19 = v124;
      }
      while (v28 != v121);
      v28 = v121;
      v2 = v122;
      v18 = v120;
    }
LABEL_56:
    if (v28 < v19)
      goto LABEL_132;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
    v133 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v18 = sub_10088E710(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v59 = *((_QWORD *)v18 + 2);
    v58 = *((_QWORD *)v18 + 3);
    v20 = v59 + 1;
    if (v59 >= v58 >> 1)
      v18 = sub_10088E710((char *)(v58 > 1), v59 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v20;
    v60 = v18 + 32;
    v61 = &v18[16 * v59 + 32];
    v62 = v133;
    *(_QWORD *)v61 = v19;
    *((_QWORD *)v61 + 1) = v62;
    if (v59)
    {
      while (1)
      {
        v63 = v20 - 1;
        if (v20 >= 4)
        {
          v68 = &v60[16 * v20];
          v69 = *((_QWORD *)v68 - 8);
          v70 = *((_QWORD *)v68 - 7);
          v74 = __OFSUB__(v70, v69);
          v71 = v70 - v69;
          if (v74)
            goto LABEL_121;
          v73 = *((_QWORD *)v68 - 6);
          v72 = *((_QWORD *)v68 - 5);
          v74 = __OFSUB__(v72, v73);
          v66 = v72 - v73;
          v67 = v74;
          if (v74)
            goto LABEL_122;
          v75 = v20 - 2;
          v76 = &v60[16 * v20 - 32];
          v78 = *(_QWORD *)v76;
          v77 = *((_QWORD *)v76 + 1);
          v74 = __OFSUB__(v77, v78);
          v79 = v77 - v78;
          if (v74)
            goto LABEL_124;
          v74 = __OFADD__(v66, v79);
          v80 = v66 + v79;
          if (v74)
            goto LABEL_127;
          if (v80 >= v71)
          {
            v98 = &v60[16 * v63];
            v100 = *(_QWORD *)v98;
            v99 = *((_QWORD *)v98 + 1);
            v74 = __OFSUB__(v99, v100);
            v101 = v99 - v100;
            if (v74)
              goto LABEL_131;
            v91 = v66 < v101;
            goto LABEL_93;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v92 = *((_QWORD *)v18 + 4);
            v93 = *((_QWORD *)v18 + 5);
            v74 = __OFSUB__(v93, v92);
            v85 = v93 - v92;
            v86 = v74;
            goto LABEL_87;
          }
          v65 = *((_QWORD *)v18 + 4);
          v64 = *((_QWORD *)v18 + 5);
          v74 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          v67 = v74;
        }
        if ((v67 & 1) != 0)
          goto LABEL_123;
        v75 = v20 - 2;
        v81 = &v60[16 * v20 - 32];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v84 = __OFSUB__(v82, v83);
        v85 = v82 - v83;
        v86 = v84;
        if (v84)
          goto LABEL_126;
        v87 = &v60[16 * v63];
        v89 = *(_QWORD *)v87;
        v88 = *((_QWORD *)v87 + 1);
        v74 = __OFSUB__(v88, v89);
        v90 = v88 - v89;
        if (v74)
          goto LABEL_129;
        if (__OFADD__(v85, v90))
          goto LABEL_130;
        if (v85 + v90 >= v66)
        {
          v91 = v66 < v90;
LABEL_93:
          if (v91)
            v63 = v75;
          goto LABEL_95;
        }
LABEL_87:
        if ((v86 & 1) != 0)
          goto LABEL_125;
        v94 = &v60[16 * v63];
        v96 = *(_QWORD *)v94;
        v95 = *((_QWORD *)v94 + 1);
        v74 = __OFSUB__(v95, v96);
        v97 = v95 - v96;
        if (v74)
          goto LABEL_128;
        if (v97 < v85)
          goto LABEL_14;
LABEL_95:
        v102 = v63 - 1;
        if (v63 - 1 >= v20)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        v103 = *a1;
        if (!*a1)
          goto LABEL_143;
        v104 = v18;
        v105 = &v60[16 * v102];
        v106 = *(_QWORD *)v105;
        v107 = &v60[16 * v63];
        v108 = *((_QWORD *)v107 + 1);
        sub_100775604(v103 + *(_QWORD *)(v126 + 72) * *(_QWORD *)v105, v103 + *(_QWORD *)(v126 + 72) * *(_QWORD *)v107, v103 + *(_QWORD *)(v126 + 72) * v108, v125);
        if (v2)
          goto LABEL_115;
        if (v108 < v106)
          goto LABEL_118;
        if (v63 > *((_QWORD *)v104 + 2))
          goto LABEL_119;
        *(_QWORD *)v105 = v106;
        *(_QWORD *)&v60[16 * v102 + 8] = v108;
        v109 = *((_QWORD *)v104 + 2);
        if (v63 >= v109)
          goto LABEL_120;
        v18 = v104;
        v20 = v109 - 1;
        memmove(&v60[16 * v63], v107 + 16, 16 * (v109 - 1 - v63));
        *((_QWORD *)v104 + 2) = v109 - 1;
        a1 = v131;
        if (v109 <= 2)
          goto LABEL_14;
      }
    }
    v20 = 1;
LABEL_14:
    v12 = a1[1];
    v19 = v133;
    if (v133 >= v12)
      goto LABEL_104;
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1007753D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a1;
  v29 = sub_10001A9A8(&qword_101106F70);
  v7 = __chkstk_darwin(v29);
  v33 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v30 = (double *)((char *)&v26 - v10);
  result = __chkstk_darwin(v9);
  v14 = (double *)((char *)&v26 - v13);
  v32 = a3;
  v27 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v35 = v15 * (v32 - 1);
    v31 = v15;
    v34 = v15 * v32;
LABEL_5:
    v16 = 0;
    v17 = v28;
    while (1)
    {
      v18 = *a4;
      sub_10000F9B8(v34 + v16 + *a4, (uint64_t)v14, &qword_101106F70);
      v19 = v35 + v16 + v18;
      v20 = v30;
      sub_10000F9B8(v19, (uint64_t)v30, &qword_101106F70);
      v21 = *v14;
      v22 = *v20;
      sub_100004048((uint64_t)v20, &qword_101106F70);
      result = sub_100004048((uint64_t)v14, &qword_101106F70);
      if (v22 >= v21)
      {
LABEL_4:
        v35 += v31;
        v34 += v31;
        if (++v32 == v27)
          return result;
        goto LABEL_5;
      }
      v23 = *a4;
      if (!*a4)
        break;
      v24 = v23 + v34 + v16;
      v25 = v23 + v35 + v16;
      sub_100005CF0(v24, v33, &qword_101106F70);
      swift_arrayInitWithTakeFrontToBack(v24, v25, 1, v29);
      result = sub_100005CF0(v33, v25, &qword_101106F70);
      v16 -= v31;
      if (v32 == ++v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100775604(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v28;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  double v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v41 = sub_10001A9A8(&qword_101106F70);
  v8 = __chkstk_darwin(v41);
  v10 = (double *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (double *)((char *)&v39 - v11);
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_70;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_71;
  v16 = (uint64_t)(a2 - a1) / v14;
  v44 = a1;
  v43 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v41);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v28 = a4 + v19;
      v42 = a4 + v19;
      v44 = a2;
      v40 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        v30 = -v14;
        do
        {
          v31 = a3 + v30;
          sub_10000F9B8(v28 + v30, (uint64_t)v12, &qword_101106F70);
          v32 = a2 + v30;
          sub_10000F9B8(a2 + v30, (uint64_t)v10, &qword_101106F70);
          v33 = *v12;
          v34 = *v10;
          sub_100004048((uint64_t)v10, &qword_101106F70);
          sub_100004048((uint64_t)v12, &qword_101106F70);
          if (v34 >= v33)
          {
            v35 = v42;
            v36 = v42 + v30;
            v42 += v30;
            if (a3 < v35 || v31 >= v35)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v30, v36, 1, v41);
            }
            else if (a3 != v35)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v30, v36);
            }
            v32 = a2;
          }
          else
          {
            if (a3 < a2 || v31 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v30, a2 + v30, 1, v41);
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v30, a2 + v30);
            }
            v44 += v30;
          }
          v28 = v42;
          if (v42 <= a4)
            break;
          a2 = v32;
          a3 += v30;
        }
        while (v32 > v40);
      }
      goto LABEL_68;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v41);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v40 = a4 + v18;
    v42 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_10000F9B8(a2, (uint64_t)v12, &qword_101106F70);
        sub_10000F9B8(a4, (uint64_t)v10, &qword_101106F70);
        v21 = *v12;
        v22 = *v10;
        sub_100004048((uint64_t)v10, &qword_101106F70);
        sub_100004048((uint64_t)v12, &qword_101106F70);
        v23 = v44;
        if (v22 >= v21)
        {
          v26 = v43 + v14;
          if (v44 < v43 || v44 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v44, v43, 1, v41);
          }
          else if (v44 != v43)
          {
            swift_arrayInitWithTakeBackToFront(v44, v43);
          }
          v43 = v26;
          v24 = a2;
        }
        else
        {
          v24 = a2 + v14;
          if (v44 < a2 || v44 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v44, a2, 1, v41);
          }
          else if (v44 == a2)
          {
            v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v44, a2);
          }
        }
        v44 = v23 + v14;
        a4 = v43;
        if (v43 >= v40)
          break;
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_68:
    sub_10088ECE4(&v44, &v43, (uint64_t *)&v42);
    return 1;
  }
LABEL_72:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100775A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100775AAC(a1, a2, a3, (uint64_t (*)(void))sub_1007C8688, &qword_1010ECD00, &qword_101106E90);
}

uint64_t sub_100775A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100775AAC(a1, a2, a3, (uint64_t (*)(void))sub_1007C869C, &qword_1010ECCF8, (uint64_t *)&unk_101106E80);
}

uint64_t sub_100775AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t *a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  char v30;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  v8 = *v6;
  v9 = *(_QWORD *)(*v6 + 16);
  if (v9 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v11 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v12 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (__OFADD__(v9, v12))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  *v6 = v8;
  if (!isUniquelyReferenced_nonNull_native || v9 + v12 > *(_QWORD *)(v8 + 24) >> 1)
  {
    v8 = a4();
    *v6 = v8;
  }
  v16 = sub_10001A9A8(a5);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = v8 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v19 = *(_QWORD *)(v17 + 72);
  v20 = v18 + v19 * a1;
  swift_arrayDestroy(v20, v11, v16);
  if (!v12)
    goto LABEL_22;
  v21 = *(_QWORD *)(v8 + 16);
  v22 = v21 - a2;
  if (__OFSUB__(v21, a2))
    goto LABEL_30;
  if (v22 < 0)
  {
LABEL_32:
    v30 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v30, 1046, 0);
    __break(1u);
    return result;
  }
  v23 = v20 + v19;
  v24 = v18 + v19 * a2;
  if (v20 + v19 < v24 || v23 >= v24 + v22 * v19)
  {
    swift_arrayInitWithTakeFrontToBack(v23, v24, v22, v16);
  }
  else if (v23 != v24)
  {
    swift_arrayInitWithTakeBackToFront(v23, v24);
  }
  v26 = *(_QWORD *)(v8 + 16);
  v27 = __OFADD__(v26, v12);
  v28 = v26 + v12;
  if (v27)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  *(_QWORD *)(v8 + 16) = v28;
LABEL_22:
  if (v19 >= 1)
    sub_10000F9B8(a3, v20, a5);
  return sub_100004048(a3, a6);
}

uint64_t sub_100775C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100775AAC(a1, a2, a3, (uint64_t (*)(void))sub_1007C86B0, &qword_1010ECCF0, (uint64_t *)&unk_101106E70);
}

uint64_t sub_100775CA0(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1007C84F8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v28 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21, v22);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  return sub_100004048(a3, &qword_1010EE390);
}

uint64_t sub_100775E74(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1007CA15C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v28 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21, v22);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    sub_10005972C(a3, v18, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  return sub_100004048(a3, &qword_101102130);
}

uint64_t sub_100776048(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD v30[2];
  _QWORD v31[5];
  _QWORD v32[5];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v12);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[3] = a3;
  v32[4] = a4;
  v15 = sub_100018F08(v32);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(a3 - 8) + 16))(v15, a1, a3);
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v16 = *(_QWORD *)(qword_1011B8588 + 24);
  v17 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v31, v17);
  swift_release(v16);
  LODWORD(v16) = LOBYTE(v31[0]);
  sub_100030784((uint64_t)v32, (uint64_t)v31);
  if ((_DWORD)v16 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
LABEL_7:
    v30[0] = v8;
    v21 = sub_100889888();
    v22 = v21[2];
    v23 = type metadata accessor for LeashRecord(0);
    v24 = *(_QWORD *)(v23 - 8);
    if (v22)
    {
      sub_10005972C((uint64_t)v21 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)), (uint64_t)v14, type metadata accessor for LeashRecord);
      v25 = 0;
    }
    else
    {
      v25 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v14, v25, 1, v23);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v14, 1, v23) == 1)
    {
      sub_100004048((uint64_t)v14, &qword_101111B80);
    }
    else
    {
      v26 = *(_QWORD *)&v14[*(int *)(v23 + 24)];
      swift_bridgeObjectRetain(v26);
      sub_1000126B0((uint64_t)v14, type metadata accessor for LeashRecord);
      v27 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)(a4[1] + 8) + 32))(a3);
      __chkstk_darwin(v27);
      v30[-2] = v11;
      v28 = sub_1007EF65C((uint64_t (*)(char *))sub_1004D63F4, (_BOOL8)&v30[-4], v26);
      (*(void (**)(char *, _QWORD))(v9 + 8))(v11, v30[0]);
      swift_bridgeObjectRelease();
      if (v28)
      {
        v20 = 0;
        goto LABEL_15;
      }
    }
    v20 = 2;
    goto LABEL_15;
  }
  v18 = sub_10001AA44(v31, v31[3]);
  v19 = sub_100776320((uint64_t)v18, a2, a3, a4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  if ((v19 & 1) == 0)
    goto LABEL_7;
  v20 = 5;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
  return v20;
}

uint64_t sub_100776320(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  void (*v43)(unint64_t, _QWORD *);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  double v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141[3];
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[4];
  _QWORD v145[5];

  v130 = a2;
  v7 = type metadata accessor for Date(0);
  v126 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v125 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for BeaconObservation(0);
  v135 = *(uint8_t **)(v133 - 8);
  v9 = __chkstk_darwin(v133);
  v134 = (uint64_t)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v118 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v118 - v14;
  v16 = sub_10001A9A8(&qword_1010EF660);
  v17 = __chkstk_darwin(v16);
  v127 = (uint64_t)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v118 - v19;
  v21 = type metadata accessor for UUID(0);
  v131 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v128 = (char *)&v118 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v129 = (char *)&v118 - v24;
  v25 = sub_10001A9A8(&qword_1010ED860);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v132 = (char *)&v118 - v29;
  v145[3] = a3;
  v145[4] = a4;
  v30 = sub_100018F08(v145);
  (*(void (**)(_QWORD *, uint64_t, unint64_t))(*(_QWORD *)(a3 - 8) + 16))(v30, a1, a3);
  LOBYTE(a1) = ((uint64_t (*)(unint64_t, _QWORD *))a4[15])(a3, a4);
  sub_100030784((uint64_t)v145, (uint64_t)v144);
  if ((a1 & 1) != 0)
  {
    v121 = v7;
    v122 = v13;
    v124 = v21;
    v123 = v20;
    sub_10001AA44(v144, v144[3]);
    v31 = (void *)((uint64_t (*)(unint64_t, _QWORD *))a4[22])(a3, a4);
    v32 = SPBeaconTypeHele;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v35 = v34;
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    if (v33 == v37 && v35 == v36)
    {

      swift_bridgeObjectRelease_n(v35, 2);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    }
    else
    {
      v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v36, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
      v39 = 0;
      if ((v40 & 1) == 0)
        goto LABEL_55;
    }
    if (qword_1010E9D08 != -1)
      goto LABEL_59;
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v41 = sub_100C1B894(v141[0]);
      swift_bridgeObjectRelease();
      v42 = v133;
      if ((v41 & 1) == 0)
      {
        v39 = 0;
        goto LABEL_55;
      }
      v43 = (void (*)(unint64_t, _QWORD *))a4[24];
      v44 = (uint64_t)v132;
      v120 = a3;
      v119 = a4;
      v43(a3, a4);
      v45 = *(_QWORD *)(v130 + 280);
      sub_10000F9B8(v44, (uint64_t)v28, &qword_1010ED860);
      a3 = v131;
      v46 = v124;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v28, 1, v124) == 1)
      {
        v140 = 0;
        v139 = 0u;
        v138 = 0u;
        swift_retain();
      }
      else
      {
        v47 = (uint64_t)v129;
        (*(void (**)(char *, char *, uint64_t))(a3 + 32))(v129, v28, v46);
        swift_retain();
        sub_1008259D0(v47, (uint64_t)&v138);
        v48 = v47;
        v44 = (uint64_t)v132;
        (*(void (**)(uint64_t, uint64_t))(a3 + 8))(v48, v46);
      }
      sub_100004048(v44, &qword_1010ED860);
      swift_release(v45);
      if (!*((_QWORD *)&v139 + 1))
      {
        sub_100004048((uint64_t)&v138, (uint64_t *)&unk_101107010);
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v75 = type metadata accessor for Logger(0);
        sub_10001A9E8(v75, (uint64_t)qword_1011B75D0);
        v76 = sub_100030784((uint64_t)v145, (uint64_t)v141);
        v77 = Logger.logObject.getter(v76);
        v78 = static os_log_type_t.default.getter(v77);
        if (os_log_type_enabled(v77, v78))
        {
          v79 = (uint8_t *)swift_slowAlloc(12, -1);
          v80 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v138 = v80;
          *(_DWORD *)v79 = 136315138;
          v135 = v79 + 4;
          sub_10001AA44(v141, v142);
          v81 = v129;
          (*(void (**)(unint64_t))(*(_QWORD *)(v119[1] + 8) + 32))(v120);
          v82 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v83 = v124;
          v84 = dispatch thunk of CustomStringConvertible.description.getter(v124, v82);
          v86 = v85;
          (*(void (**)(char *, uint64_t))(a3 + 8))(v81, v83);
          v137 = sub_100016940(v84, v86, (uint64_t *)&v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v135, v79 + 12);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Can't monitor beacon: %s due to: airpods but missing beacon group.", v79, 0xCu);
          swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1, -1);
          swift_slowDealloc(v79, -1, -1);
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
        }

        goto LABEL_54;
      }
      sub_10000F9FC(&v138, (uint64_t)v141);
      if (qword_1010E9CF0 != -1)
        swift_once(&qword_1010E9CF0, sub_10058CADC);
      v49 = qword_1011B7160;
      v50 = v142;
      v51 = v143;
      sub_10001AA44(v141, v142);
      v52 = (uint64_t)v128;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v50, v51);
      v53 = objc_autoreleasePoolPush();
      sub_10058DC14(v49, v52, 0, 0, &v138);
      v130 = 0;
      objc_autoreleasePoolPop(v53);
      v28 = (char *)v138;
      v54 = v124;
      v131 = *(_QWORD *)(a3 + 8);
      ((void (*)(uint64_t, uint64_t))v131)(v52, v124);
      v55 = _swiftEmptyArrayStorage;
      *(_QWORD *)&v138 = _swiftEmptyArrayStorage;
      v132 = (char *)*((_QWORD *)v28 + 2);
      if (!v132)
        break;
      v56 = 0;
      a4 = _swiftEmptyArrayStorage;
      while (v56 < *((_QWORD *)v28 + 2))
      {
        a3 = (v135[80] + 32) & ~(unint64_t)v135[80];
        v57 = *((_QWORD *)v135 + 9);
        sub_10005972C((uint64_t)&v28[a3 + v57 * v56], (uint64_t)v15, type metadata accessor for BeaconObservation);
        sub_100374684();
        v137 = Set.init(minimumCapacity:)(2);
        sub_100A0D090(&v136, 37);
        sub_100A0D090(&v136, 38);
        v58 = sub_100A07E5C(v15[*(int *)(v42 + 24)], v137);
        swift_bridgeObjectRelease();
        if (v58)
        {
          sub_1000126EC((uint64_t)v15, v134, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(a4) & 1) == 0)
            sub_10009AAC8(0, a4[2] + 1, 1);
          a4 = (_QWORD *)v138;
          v60 = *(_QWORD *)(v138 + 16);
          v59 = *(_QWORD *)(v138 + 24);
          if (v60 >= v59 >> 1)
          {
            sub_10009AAC8(v59 > 1, v60 + 1, 1);
            a4 = (_QWORD *)v138;
          }
          a4[2] = v60 + 1;
          sub_1000126EC(v134, (uint64_t)a4 + a3 + v60 * v57, type metadata accessor for BeaconObservation);
          v42 = v133;
        }
        else
        {
          sub_1000126B0((uint64_t)v15, type metadata accessor for BeaconObservation);
        }
        if (v132 == (char *)++v56)
        {
          v55 = (_QWORD *)v138;
          v54 = v124;
          goto LABEL_29;
        }
      }
      __break(1u);
LABEL_59:
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    }
LABEL_29:
    swift_bridgeObjectRelease();
    v61 = (uint64_t)v123;
    sub_100A797E8((uint64_t)v55, (uint64_t)v123);
    swift_release(v55);
    v62 = v127;
    sub_10000F9B8(v61, v127, &qword_1010EF660);
    v63 = v133;
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v135 + 6))(v62, 1, v133) == 1)
    {
      sub_100004048(v62, &qword_1010EF660);
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v64 = type metadata accessor for Logger(0);
      sub_10001A9E8(v64, (uint64_t)qword_1011B75D0);
      v65 = sub_100030784((uint64_t)v145, (uint64_t)&v138);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.default.getter(v66);
      if (os_log_type_enabled(v66, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc(12, -1);
        v69 = swift_slowAlloc(32, -1);
        v137 = v69;
        *(_DWORD *)v68 = 136315138;
        sub_10001AA44(&v138, *((uint64_t *)&v139 + 1));
        v70 = v129;
        (*(void (**)(unint64_t))(*(_QWORD *)(v119[1] + 8) + 32))(v120);
        v71 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v72 = dispatch thunk of CustomStringConvertible.description.getter(v54, v71);
        v74 = v73;
        ((void (*)(char *, uint64_t))v131)(v70, v54);
        v136 = sub_100016940(v72, v74, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v68 + 4, v68 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Can't monitor beacon: %s due to: airpods but missing last BT observation.", v68, 0xCu);
        swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v68, -1, -1);

        goto LABEL_52;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
      v104 = v61;
LABEL_53:
      sub_100004048(v104, &qword_1010EF660);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
LABEL_54:
      v39 = 1;
      goto LABEL_55;
    }
    v87 = (uint64_t)v122;
    sub_1000126EC(v62, (uint64_t)v122, type metadata accessor for BeaconObservation);
    v88 = v125;
    static Date.trustedNow.getter(v125);
    v89 = Date.timeIntervalSince(_:)(v87 + *(int *)(v63 + 20));
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v88, v121);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    sub_100C1B888(v138);
    v91 = v90;
    swift_bridgeObjectRelease();
    if (v91 < v89)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v92 = type metadata accessor for Logger(0);
      sub_10001A9E8(v92, (uint64_t)qword_1011B75D0);
      v93 = sub_100030784((uint64_t)v145, (uint64_t)&v138);
      v94 = Logger.logObject.getter(v93);
      v95 = static os_log_type_t.default.getter(v94);
      if (os_log_type_enabled(v94, v95))
      {
        v96 = swift_slowAlloc(32, -1);
        v97 = swift_slowAlloc(32, -1);
        v137 = v97;
        *(_DWORD *)v96 = 136315650;
        sub_10001AA44(&v138, *((uint64_t *)&v139 + 1));
        v98 = v129;
        (*(void (**)(unint64_t))(*(_QWORD *)(v119[1] + 8) + 32))(v120);
        v99 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v100 = v124;
        v101 = dispatch thunk of CustomStringConvertible.description.getter(v124, v99);
        v103 = v102;
        ((void (*)(char *, uint64_t))v131)(v98, v100);
        v136 = sub_100016940(v101, v103, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v96 + 4, v96 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
        *(_WORD *)(v96 + 12) = 2048;
        v136 = *(_QWORD *)&v89;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v96 + 14, v96 + 22);
        *(_WORD *)(v96 + 22) = 2048;
        v136 = *(_QWORD *)&v91;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v96 + 24, v96 + 32);
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)", (uint8_t *)v96, 0x20u);
        swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v96, -1, -1);

      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
      }
      sub_1000126B0(v87, type metadata accessor for BeaconObservation);
LABEL_52:
      v104 = (uint64_t)v123;
      goto LABEL_53;
    }
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v105 = type metadata accessor for Logger(0);
    sub_10001A9E8(v105, (uint64_t)qword_1011B75D0);
    v106 = sub_100030784((uint64_t)v145, (uint64_t)&v138);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.default.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = swift_slowAlloc(32, -1);
      v110 = swift_slowAlloc(32, -1);
      v137 = v110;
      *(_DWORD *)v109 = 136315650;
      sub_10001AA44(&v138, *((uint64_t *)&v139 + 1));
      v111 = v129;
      (*(void (**)(unint64_t))(*(_QWORD *)(v119[1] + 8) + 32))(v120);
      v112 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v113 = v124;
      v114 = dispatch thunk of CustomStringConvertible.description.getter(v124, v112);
      v116 = v115;
      ((void (*)(char *, uint64_t))v131)(v111, v113);
      v136 = sub_100016940(v114, v116, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v109 + 4, v109 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
      *(_WORD *)(v109 + 12) = 2048;
      v136 = *(_QWORD *)&v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v109 + 14, v109 + 22);
      *(_WORD *)(v109 + 22) = 2048;
      v136 = *(_QWORD *)&v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v109 + 24, v109 + 32);
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)", (uint8_t *)v109, 0x20u);
      swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v109, -1, -1);

    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
    }
    sub_1000126B0(v87, type metadata accessor for BeaconObservation);
    sub_100004048((uint64_t)v123, &qword_1010EF660);
    v38 = v141;
  }
  else
  {
    v38 = v144;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  v39 = 0;
LABEL_55:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v145);
  return v39;
}

id sub_10077744C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  unsigned __int8 v47;
  NSString v48;
  unsigned int v49;
  id v50;
  unsigned __int8 v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  id result;
  void *v82;
  NSString v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD v139[3];
  uint64_t v140;
  _QWORD v141[6];

  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v8);
  v132 = (uint64_t)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for OwnedBeaconRecord(0);
  v131 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v130 = (uint64_t)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v11);
  v128 = (uint64_t)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconGroup(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v127 = (uint64_t)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v18 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v135 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v129 = (char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v122 - v22;
  v141[3] = a3;
  v141[4] = a4;
  v24 = sub_100018F08(v141);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v24, a1, a3);
  v134 = a2;
  v25 = sub_1007785B0((uint64_t)v24, a2, a3, a4);
  v136 = a3;
  if ((v25 & 1) == 0)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B75D0);
    v38 = sub_100030784((uint64_t)v141, (uint64_t)v139);
    v28 = Logger.logObject.getter(v38);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(32, -1);
      *(_DWORD *)v30 = 141558275;
      v137 = 1752392040;
      v138 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      sub_10001AA44(v139, v140);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 32))(v136);
      v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v19, v39);
      v42 = v41;
      (*(void (**)(char *, uint64_t))(v135 + 8))(v23, v19);
      v137 = sub_100016940(v40, v42, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
      v36 = "Can't monitor beacon: %{private,mask.hash}s due to: unsupported beacon.";
      goto LABEL_11;
    }
LABEL_44:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
    goto LABEL_45;
  }
  if ((sub_100DC5AF0(a3, a4) & 1) != 0)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1011B75D0);
    v27 = sub_100030784((uint64_t)v141, (uint64_t)v139);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(32, -1);
      *(_DWORD *)v30 = 141558275;
      v137 = 1752392040;
      v138 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      sub_10001AA44(v139, v140);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 32))(v136);
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v19, v32);
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v135 + 8))(v23, v19);
      v137 = sub_100016940(v33, v35, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
      v36 = "Can't monitor beacon: %{private,mask.hash}s due to: this device.";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v28, v29, v36, (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
LABEL_45:

LABEL_46:
      v85 = 0;
      goto LABEL_47;
    }
    goto LABEL_44;
  }
  v125 = v23;
  v126 = v19;
  v43 = *(_QWORD *)(*(_QWORD *)(v134
                              + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_bluetoothCommunicatorCoordinator)
                  + 64);
  swift_retain();
  CurrentValueSubject.value.getter(v139);
  swift_release(v43);
  v44 = v139[0];
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v124 = (id)qword_1011B7C08;
  v45 = (void *)objc_opt_self(FMSystemInfo);
  v46 = objc_msgSend(v45, "sharedInstance");
  v47 = objc_msgSend(v46, "isInternalBuild");

  if ((v47 & 1) != 0
    && (v48 = String._bridgeToObjectiveC()(),
        v49 = objc_msgSend(v124, "BOOLForKey:", v48),
        v48,
        v49))
  {
    v50 = objc_msgSend(v45, "sharedInstance");
    v51 = objc_msgSend(v50, "isInternalBuild");

  }
  else
  {
    v51 = 0;
  }
  v52 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(v136, a4);
  v53 = v126;
  if ((v52 & 1) != 0)
  {
    if (v44 > 1)
      v54 = 1;
    else
      v54 = v51;
    if ((v54 & 1) == 0)
    {
      v58 = a4;
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v59 = type metadata accessor for Logger(0);
      sub_10001A9E8(v59, (uint64_t)qword_1011B75D0);
      v60 = sub_100030784((uint64_t)v141, (uint64_t)v139);
      v28 = Logger.logObject.getter(v60);
      v29 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = swift_slowAlloc(22, -1);
        v31 = swift_slowAlloc(32, -1);
        *(_DWORD *)v30 = 141558275;
        v137 = 1752392040;
        v138 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 4, v30 + 12);
        *(_WORD *)(v30 + 12) = 2081;
        sub_10001AA44(v139, v140);
        v61 = v125;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v58 + 8) + 8) + 32))(v136);
        v62 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v63 = dispatch thunk of CustomStringConvertible.description.getter(v53, v62);
        v65 = v64;
        (*(void (**)(char *, uint64_t))(v135 + 8))(v61, v53);
        v137 = sub_100016940(v63, v65, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 14, v30 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
        v36 = "Can't monitor beacon: %{private,mask.hash}s due to: airpods beacon but less than 2 adv buffers.";
        goto LABEL_11;
      }
      goto LABEL_44;
    }
    (*(void (**)(uint64_t, uint64_t))(a4 + 192))(v136, a4);
    v55 = v135;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(v18, 1, v53) == 1)
    {
      v56 = &qword_1010ED860;
      v57 = (uint64_t)v18;
LABEL_31:
      sub_100004048(v57, v56);
      goto LABEL_32;
    }
    v66 = (uint64_t)v129;
    (*(void (**)(void))(v55 + 32))();
    v67 = v128;
    sub_10081EDA8(v66, v128);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v67, 1, v13) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v66, v53);
      v56 = (uint64_t *)&unk_1010FF7F0;
      v57 = v67;
      goto LABEL_31;
    }
    v106 = v127;
    sub_1000126EC(v67, v127, type metadata accessor for OwnedBeaconGroup);
    if ((sub_1003690A8() & 1) == 0)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v107 = type metadata accessor for Logger(0);
      sub_10001A9E8(v107, (uint64_t)qword_1011B75D0);
      v108 = sub_100030784((uint64_t)v141, (uint64_t)v139);
      v109 = Logger.logObject.getter(v108);
      v110 = static os_log_type_t.default.getter(v109);
      if (os_log_type_enabled(v109, v110))
      {
        v111 = swift_slowAlloc(22, -1);
        v112 = swift_slowAlloc(32, -1);
        v134 = v112;
        *(_DWORD *)v111 = 141558275;
        v137 = 1752392040;
        v138 = v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v111 + 4, v111 + 12);
        *(_WORD *)(v111 + 12) = 2081;
        v133 = v111 + 14;
        sub_10001AA44(v139, v140);
        v113 = v55;
        v114 = v125;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 8) + 32))(v136);
        v115 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v116 = dispatch thunk of CustomStringConvertible.description.getter(v53, v115);
        v118 = v117;
        v119 = v53;
        v120 = *(void (**)(char *, uint64_t))(v113 + 8);
        v120(v114, v119);
        v137 = sub_100016940(v116, v118, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v133, v111 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "Can't monitor beacon: %{private,mask.hash}s due to: group pairing incomplete.", (uint8_t *)v111, 0x16u);
        v121 = v134;
        swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v121, -1, -1);
        swift_slowDealloc(v111, -1, -1);

        sub_1000126B0(v127, type metadata accessor for OwnedBeaconGroup);
        v120(v129, v119);
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
        sub_1000126B0(v106, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v66, v53);
      }
      goto LABEL_46;
    }
    sub_1000126B0(v106, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v66, v53);
  }
LABEL_32:
  v68 = v132;
  sub_10076410C(v132);
  v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v68, 1, v133);
  v123 = a4;
  if (v69 == 1)
  {
    sub_100004048(v68, (uint64_t *)&unk_1010F47C0);
    v70 = v125;
    v71 = v136;
  }
  else
  {
    v72 = v130;
    sub_1000126EC(v68, v130, type metadata accessor for OwnedBeaconRecord);
    v71 = v136;
    v73 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(v136, a4);
    v75 = sub_1004A4E78(0x6863746157, 0xE500000000000000, v73, v74);
    swift_bridgeObjectRelease();
    v70 = v125;
    if ((v75 & 1) != 0)
    {
      v76 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8);
      v77 = *(void (**)(uint64_t, uint64_t))(v76 + 32);
      v77(v71, v76);
      v78 = v72 + *(int *)(v133 + 20);
      v79 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LOBYTE(v78) = dispatch thunk of static Equatable.== infix(_:_:)(v70, v78, v53, v79);
      v80 = *(void (**)(char *, uint64_t))(v135 + 8);
      v80(v70, v53);
      if ((v78 & 1) == 0)
      {
        if (qword_1010E9F10 != -1)
          swift_once(&qword_1010E9F10, sub_10075AEB4);
        v93 = type metadata accessor for Logger(0);
        sub_10001A9E8(v93, (uint64_t)qword_1011B75D0);
        v94 = sub_100030784((uint64_t)v141, (uint64_t)v139);
        v95 = Logger.logObject.getter(v94);
        v96 = static os_log_type_t.default.getter(v95);
        if (os_log_type_enabled(v95, v96))
        {
          v97 = swift_slowAlloc(22, -1);
          v98 = swift_slowAlloc(32, -1);
          v135 = v98;
          *(_DWORD *)v97 = 141558275;
          v137 = 1752392040;
          v138 = v98;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v97 + 4, v97 + 12);
          *(_WORD *)(v97 + 12) = 2081;
          v134 = v97 + 14;
          sub_10001AA44(v139, v140);
          v99 = v71;
          v100 = v125;
          v77(v99, v76);
          v101 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v102 = dispatch thunk of CustomStringConvertible.description.getter(v53, v101);
          v104 = v103;
          v80(v100, v53);
          v137 = sub_100016940(v102, v104, &v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v134, v97 + 22);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Can't monitor beacon: %{private,mask.hash}s due to: watch beacon, but not actively paired.", (uint8_t *)v97, 0x16u);
          v105 = v135;
          swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v105, -1, -1);
          swift_slowDealloc(v97, -1, -1);

          sub_1000126B0(v130, type metadata accessor for OwnedBeaconRecord);
        }
        else
        {

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
          sub_1000126B0(v72, type metadata accessor for OwnedBeaconRecord);
        }
        goto LABEL_46;
      }
    }
    sub_1000126B0(v72, type metadata accessor for OwnedBeaconRecord);
  }
  result = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (result)
  {
    v82 = result;
    v83 = String._bridgeToObjectiveC()();
    v84 = objc_msgSend(v82, "applicationIsInstalled:", v83);

    if ((v84 & 1) != 0)
    {
      v85 = 1;
LABEL_47:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
      return (id)v85;
    }
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v86 = type metadata accessor for Logger(0);
    sub_10001A9E8(v86, (uint64_t)qword_1011B75D0);
    v87 = sub_100030784((uint64_t)v141, (uint64_t)v139);
    v28 = Logger.logObject.getter(v87);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v88 = v71;
      v31 = swift_slowAlloc(32, -1);
      *(_DWORD *)v30 = 141558275;
      v137 = 1752392040;
      v138 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      sub_10001AA44(v139, v140);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v123 + 8) + 8) + 32))(v88);
      v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v53, v89);
      v92 = v91;
      (*(void (**)(char *, uint64_t))(v135 + 8))(v70, v53);
      v137 = sub_100016940(v90, v92, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
      v36 = "Can't monitor beacon: %{private,mask.hash}s due to: no Find My app installed.";
      goto LABEL_11;
    }
    goto LABEL_44;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007785B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  char v19;
  void *v20;
  uint64_t v22;

  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 176))(a3, a4);
  v11 = SPBeaconTypeVirtualMeDevice;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v14 = v13;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  if (v12 == v15 && v14 == v16)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = 0;
  if ((v18 & 1) == 0)
  {
    v20 = sub_100758F58((uint64_t)v9, *(_QWORD *)(a2 + 280), a3, a4);
    if ((sub_100A077E4(8u, (uint64_t)v20) & 1) != 0)
    {
      v19 = sub_100A077E4(9u, (uint64_t)v20);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
LABEL_9:
    v19 = 0;
    goto LABEL_10;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  return v19 & 1;
}

_QWORD *sub_100778718(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  result = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v6 = a1 + 32;
    do
    {
      sub_100030784(v6, (uint64_t)&v22);
      v7 = v23;
      v8 = v24;
      v9 = sub_10001AA44(&v22, v23);
      if ((sub_100776320((uint64_t)v9, a2, v7, v8) & 1) != 0)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v22);
      }
      else
      {
        sub_10000F9FC(&v22, (uint64_t)v19);
        v10 = v25;
        if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
        {
          sub_10009A628(0, v10[2] + 1, 1);
          v10 = v25;
        }
        v12 = v10[2];
        v11 = v10[3];
        if (v12 >= v11 >> 1)
          sub_10009A628(v11 > 1, v12 + 1, 1);
        v13 = v20;
        v14 = v21;
        v15 = sub_10009F5D0((uint64_t)v19, v20);
        __chkstk_darwin(v15);
        v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v18 + 16))(v17);
        sub_1004AA86C(v12, (uint64_t)v17, (uint64_t *)&v25, v13, v14);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
      }
      v6 += 40;
      --v4;
    }
    while (v4);
    return v25;
  }
  return result;
}

_QWORD *sub_1007788A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];
  unint64_t v18;
  _QWORD *v19;

  v3 = sub_10001A9A8(&qword_101106F70);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v9 = (double *)((char *)v17 - v8);
  result = _swiftEmptyArrayStorage;
  v19 = _swiftEmptyArrayStorage;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v17[1] = v1;
    v12 = *(_QWORD *)(v7 + 72);
    v18 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v13 = a1 + v18;
    v14 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000F9B8(v13, (uint64_t)v9, &qword_101106F70);
      if (*v9 <= 0.5)
      {
        sub_100004048((uint64_t)v9, &qword_101106F70);
      }
      else
      {
        sub_100005CF0((uint64_t)v9, (uint64_t)v6, &qword_101106F70);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          sub_10009B474(0, v14[2] + 1, 1);
        v14 = v19;
        v16 = v19[2];
        v15 = v19[3];
        if (v16 >= v15 >> 1)
        {
          sub_10009B474(v15 > 1, v16 + 1, 1);
          v14 = v19;
        }
        v14[2] = v16 + 1;
        sub_100005CF0((uint64_t)v6, (uint64_t)v14 + v18 + v16 * v12, &qword_101106F70);
      }
      v13 += v12;
      --v11;
    }
    while (v11);
    return v19;
  }
  return result;
}

_QWORD *sub_100778A58(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v6 = (_QWORD *)(a1 + 32);
    do
    {
      v7 = v6[3];
      v8 = v6[4];
      v9 = sub_10001AA44(v6, v7);
      v10 = sub_100854C8C((uint64_t)v9, a2, v7, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      v11 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v10);
      specialized ContiguousArray._endMutation()(v12);
      v6 += 5;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100778B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v7 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(v51 + 64);
  __chkstk_darwin(v7);
  v9 = sub_10001A9A8(&qword_101106EF8);
  __chkstk_darwin(v9);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v14)
  {
    v40 = v3;
    v54 = _swiftEmptyArrayStorage;
    v49 = v11;
    v50 = v10;
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    v16 = type metadata accessor for SafeLocation(0);
    v47 = v7;
    v48 = v16;
    v17 = *(_QWORD *)(v16 - 8);
    v18 = a1 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    v45 = *(_QWORD *)(v17 + 72);
    v46 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
    v43 = v8 + 7;
    v44 = v19;
    v41 = a2;
    v42 = a3;
    v20 = v46;
    v21 = v7;
    v22 = v51;
    do
    {
      v52 = v18;
      v44(v20, v18 + *(int *)(v48 + 20), v21);
      v23 = *(unsigned __int8 *)(v22 + 80);
      v24 = (v23 + 24) & ~v23;
      v25 = (v43 + v24) & 0xFFFFFFFFFFFFFFF8;
      v26 = swift_allocObject(&unk_101090920, v25 + 8, v23 | 7);
      v27 = v14;
      *(_QWORD *)(v26 + 16) = v41;
      (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v26 + v24, v20, v21);
      v28 = v42;
      *(_QWORD *)(v26 + v25) = v42;
      swift_retain();
      swift_bridgeObjectRetain(v28);
      v29 = sub_10001A9A8((uint64_t *)&unk_101106EA8);
      v30 = sub_1000193A4(&qword_101106F00, (uint64_t *)&unk_101106EA8, (const char *)&protocol conformance descriptor for Future<A, B>);
      Deferred.init(createPublisher:)(sub_10077DBC4, v26, v29, v30);
      v31 = sub_1000193A4((unint64_t *)&unk_101106F08, &qword_101106EF8, (const char *)&protocol conformance descriptor for Deferred<A>);
      v32 = v50;
      v33 = Publisher.eraseToAnyPublisher()(v50, v31);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v32);
      v53 = v33;
      v34 = sub_10001A9A8(&qword_101106EC8);
      v35 = sub_1000193A4(&qword_101106ED8, &qword_101106EC8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v36 = Publisher.eraseToAnyPublisher()(v34, v35);
      v37 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
      v38 = v54[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
      v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
      specialized ContiguousArray._endMutation()(v39);
      v18 = v52 + v45;
      --v14;
    }
    while (v27 != 1);
    return v54;
  }
  return result;
}

_QWORD *sub_100778E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31[2];
  _QWORD *v32;

  v9 = sub_10001A9A8(&qword_101106FC8);
  v28 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v12)
  {
    v27[1] = v4;
    v32 = _swiftEmptyArrayStorage;
    v30 = v12;
    specialized ContiguousArray.reserveCapacity(_:)(v12);
    v14 = a1 + 32;
    do
    {
      sub_100030784(v14, (uint64_t)v31);
      v15 = swift_allocObject(&unk_101090DF8, 128, 7);
      *(_QWORD *)(v15 + 16) = a2;
      v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)a3;
      *(_OWORD *)(v15 + 40) = v16;
      *(_OWORD *)(v15 + 56) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v15 + 72) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(v15 + 80) = a4;
      sub_10000F9FC(v31, v15 + 88);
      swift_retain();
      sub_10077F244((_QWORD *)a3);
      swift_retain();
      v17 = sub_10001A9A8(&qword_101106FD0);
      v18 = sub_1000193A4(&qword_101106FD8, &qword_101106FD0, (const char *)&protocol conformance descriptor for Future<A, B>);
      Deferred.init(createPublisher:)(sub_10077F330, v15, v17, v18);
      v19 = sub_1000193A4(&qword_101106FE0, &qword_101106FC8, (const char *)&protocol conformance descriptor for Deferred<A>);
      v29 = Publisher.eraseToAnyPublisher()(v9, v19);
      v20 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v11, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v21 = v9;
      v22 = a2;
      v23 = a4;
      v24 = v32[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      v25 = v24;
      a4 = v23;
      a2 = v22;
      v9 = v21;
      v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v29);
      specialized ContiguousArray._endMutation()(v26);
      v14 += 40;
      --v30;
    }
    while (v30);
    return v32;
  }
  return result;
}

_QWORD *sub_100779028(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  id v21;
  Class isa;
  id v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  id v30;
  NSString v31;
  id v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v5 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101106F70);
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  __chkstk_darwin(v8);
  v10 = (double *)((char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v49 = v2;
    v55 = _swiftEmptyArrayStorage;
    sub_10009B474(0, v11, 0);
    v13 = type metadata accessor for SafeLocation(0);
    v14 = (int *)v13;
    v15 = *(_QWORD *)(v13 - 8);
    v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v50 = *(_QWORD *)(v15 + 72);
    do
    {
      v17 = *(double *)(v16 + v14[8]);
      v18 = *(double *)(v16 + v14[9]);
      v19 = v14[10];
      v20 = *(double *)(v16 + v19);
      Date.init()(v13);
      v21 = objc_allocWithZone((Class)CLLocation);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v23 = objc_msgSend(v21, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", isa, v17, v18, 0.0, v20, v20, -1.0, -1.0, -1.0, 0xBFF0000000000000);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v54);
      objc_msgSend(v23, "setReferenceFrame:", *(unsigned __int8 *)(v16 + v14[11]));
      objc_msgSend(v23, "coordinate");
      v25 = v24;
      v27 = v26;

      v28 = *(double *)(v16 + v19);
      UUID.uuidString.getter(v29);
      v30 = objc_allocWithZone((Class)CLCircularRegion);
      v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v32 = objc_msgSend(v30, "initWithCenter:radius:identifier:", v31, v25, v27, v28);

      sub_100B02664(v32);
      v34 = v33;
      objc_msgSend(a2, "radius");
      v36 = v35;
      objc_msgSend(a2, "radius");
      v38 = v36 * v37 * 3.14159265;
      objc_msgSend(v32, "radius");
      v40 = v39;
      objc_msgSend(v32, "radius");
      v42 = v41;

      v43 = v40 * v42 * 3.14159265;
      if (v43 >= v38)
        v43 = v38;
      if (v43 <= 0.0)
        v44 = 0.0;
      else
        v44 = v34 / v43;
      v45 = (uint64_t)v10 + *(int *)(v52 + 48);
      *v10 = v44;
      sub_10005972C(v16, v45, type metadata accessor for SafeLocation);
      v12 = v55;
      if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
      {
        sub_10009B474(0, v12[2] + 1, 1);
        v12 = v55;
      }
      v47 = v12[2];
      v46 = v12[3];
      if (v47 >= v46 >> 1)
      {
        sub_10009B474(v46 > 1, v47 + 1, 1);
        v12 = v55;
      }
      v12[2] = v47 + 1;
      v13 = sub_100005CF0((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v47, &qword_101106F70);
      v16 += v50;
      --v11;
    }
    while (v11);
  }
  return v12;
}

uint64_t sub_1007793D0(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1007C84F8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17, v21);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

void *sub_100779578(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_1007C77D4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for Data);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1007796E0(uint64_t a1, uint64_t a2)
{
  return sub_10077DF18(a1, a2, (uint64_t (*)(void))sub_1007C8FAC, (uint64_t *)&unk_1011090F0);
}

uint64_t sub_1007796F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease();
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease();
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = type metadata accessor for ServerInteractionController(0);
  v14 = swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = swift_bridgeObjectRelease();
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = (uint64_t)memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = swift_bridgeObjectRelease();
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1007799C0(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t My;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v6 = swift_allocObject(&unk_1010910F0, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  My = type metadata accessor for Feature.FindMy(0);
  v19[3] = My;
  v19[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v8 = sub_100018F08(v19);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v8, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  if ((My & 1) != 0)
  {
    v9 = swift_allocObject(&unk_101091118, 24, 7);
    swift_unknownObjectWeakInit(v9 + 16, a2);
    v10 = (_QWORD *)swift_allocObject(&unk_101091140, 48, 7);
    v10[2] = v9;
    v10[3] = sub_1000DB5D4;
    v10[4] = v6;
    v10[5] = a1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(a1);
    sub_10075B3D0(v11, (uint64_t)sub_10077F574, (uint64_t)v10, (uint64_t)&unk_101090268, (uint64_t)sub_10077D050, (uint64_t)&unk_101090280);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v13 = v12;
    v18 = 1;
    v14 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v19, &v18, v14, v13, v15);
    v16 = (void *)v19[0];
    v17 = (void *)_convertErrorToNSError(_:)(v19[0]);
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v17);
    swift_release();

  }
}

void sub_100779BD4(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t My;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v5 = swift_allocObject(&unk_1010910A0, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  My = type metadata accessor for Feature.FindMy(0);
  v16[3] = My;
  v16[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v7 = sub_100018F08(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v7, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  if ((My & 1) != 0)
  {
    v8 = swift_allocObject(&unk_1010910C8, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_1000DB5D4;
    *(_QWORD *)(v8 + 24) = v5;
    swift_retain();
    sub_10075B3D0(a1, (uint64_t)sub_10077F9A8, v8, (uint64_t)&unk_10108FDB8, (uint64_t)sub_10077CA6C, (uint64_t)&unk_10108FDD0);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v10 = v9;
    v15 = 1;
    v11 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v16, &v15, v11, v10, v12);
    v13 = (void *)v16[0];
    v14 = (void *)_convertErrorToNSError(_:)(v16[0]);
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v14);
    swift_release();

  }
}

void sub_100779DAC(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t My;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v5 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocObject(&unk_101091050, 24, 7);
  *(_QWORD *)(v8 + 16) = a3;
  My = type metadata accessor for Feature.FindMy(0);
  v19[3] = My;
  v19[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v10 = sub_100018F08(v19);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v10, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  if ((My & 1) != 0)
  {
    sub_100AFFDBC(a1, v7);
    v11 = swift_allocObject(&unk_101091078, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_1000DB5D4;
    *(_QWORD *)(v11 + 24) = v8;
    swift_retain();
    sub_10075B66C((uint64_t)v7, 0, (uint64_t)sub_10077F9A8, v11);
    swift_release();
    sub_1000126B0((uint64_t)v7, type metadata accessor for SafeLocation);
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v13 = v12;
    v18 = 1;
    v14 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v19, &v18, v14, v13, v15);
    v16 = (void *)v19[0];
    v17 = (void *)_convertErrorToNSError(_:)(v19[0]);
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v17);
    swift_release();

  }
}

void sub_100779FC0(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t My;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v5 = swift_allocObject(&unk_101091000, 24, 7);
  *(_QWORD *)(v5 + 16) = a3;
  My = type metadata accessor for Feature.FindMy(0);
  v16[3] = My;
  v16[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v7 = sub_100018F08(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v7, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  if ((My & 1) != 0)
  {
    v8 = swift_allocObject(&unk_101091028, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_1000DB5D4;
    *(_QWORD *)(v8 + 24) = v5;
    swift_retain();
    sub_10075B904(a1, (uint64_t)sub_10077F9A8, v8);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v10 = v9;
    v15 = 1;
    v11 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v16, &v15, v11, v10, v12);
    v13 = (void *)v16[0];
    v14 = (void *)_convertErrorToNSError(_:)(v16[0]);
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v14);
    swift_release();

  }
}

void sub_10077A180(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t My;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v5 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocObject(&unk_101090FB0, 24, 7);
  *(_QWORD *)(v8 + 16) = a3;
  My = type metadata accessor for Feature.FindMy(0);
  v19[3] = My;
  v19[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v10 = sub_100018F08(v19);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v10, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a3);
  LOBYTE(My) = isFeatureEnabled(_:)(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  if ((My & 1) != 0)
  {
    sub_100AFFDBC(a1, v7);
    v11 = swift_allocObject(&unk_101090FD8, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_1000DB5D4;
    *(_QWORD *)(v11 + 24) = v8;
    swift_retain();
    sub_10075BC64((uint64_t)v7, (uint64_t)sub_10077F9A8, v11);
    swift_release();
    sub_1000126B0((uint64_t)v7, type metadata accessor for SafeLocation);
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v13 = v12;
    v18 = 1;
    v14 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v15 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v19, &v18, v14, v13, v15);
    v16 = (void *)v19[0];
    v17 = (void *)_convertErrorToNSError(_:)(v19[0]);
    ((void (**)(_QWORD, _QWORD, void *))a3)[2](a3, 0, v17);
    swift_release();

  }
}

void sub_10077A390(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t My;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v7 = swift_allocObject(&unk_101090F60, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  My = type metadata accessor for Feature.FindMy(0);
  v18[3] = My;
  v18[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v9 = sub_100018F08(v18);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v9, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a4);
  LOBYTE(My) = isFeatureEnabled(_:)(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  if ((My & 1) != 0)
  {
    v10 = swift_allocObject(&unk_101090F88, 32, 7);
    *(_QWORD *)(v10 + 16) = sub_1000DB5D4;
    *(_QWORD *)(v10 + 24) = v7;
    swift_retain();
    sub_10075BF08(a1, a2, (uint64_t)sub_10077F9A8, v10, (uint64_t)&unk_1010909C0, (uint64_t)sub_10077DD28, (uint64_t)&unk_1010909D8);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v12 = v11;
    v17 = 1;
    v13 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v14 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v18, &v17, v13, v12, v14);
    v15 = (void *)v18[0];
    v16 = (void *)_convertErrorToNSError(_:)(v18[0]);
    ((void (**)(_QWORD, _QWORD, void *))a4)[2](a4, 0, v16);
    swift_release();

  }
}

void sub_10077A578(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t My;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[5];

  v7 = swift_allocObject(&unk_101090F10, 24, 7);
  *(_QWORD *)(v7 + 16) = a4;
  My = type metadata accessor for Feature.FindMy(0);
  v18[3] = My;
  v18[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v9 = sub_100018F08(v18);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v9, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a4);
  LOBYTE(My) = isFeatureEnabled(_:)(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  if ((My & 1) != 0)
  {
    v10 = swift_allocObject(&unk_101090F38, 32, 7);
    *(_QWORD *)(v10 + 16) = sub_1000DB5D4;
    *(_QWORD *)(v10 + 24) = v7;
    swift_retain();
    sub_10075BF08(a1, a2, (uint64_t)sub_10077F9A8, v10, (uint64_t)&unk_10108FF70, (uint64_t)sub_10077CB3C, (uint64_t)&unk_10108FF88);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v12 = v11;
    v17 = 1;
    v13 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v14 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v18, &v17, v13, v12, v14);
    v15 = (void *)v18[0];
    v16 = (void *)_convertErrorToNSError(_:)(v18[0]);
    ((void (**)(_QWORD, _QWORD, void *))a4)[2](a4, 0, v16);
    swift_release();

  }
}

void sub_10077A760(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  Class v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  BOOL v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  Class v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  void *v92;
  uint64_t v93;
  Class isa;
  _QWORD *v95;
  char *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE v101[16];
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;

  v6 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v6);
  v8 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 216))
  {
    _Block_copy(a3);
    _Block_copy(a3);
    _Block_copy(a3);
LABEL_9:
    if (qword_1010E9F10 == -1)
      goto LABEL_10;
    goto LABEL_56;
  }
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  swift_retain();
  CurrentValueSubject.value.getter(&v104);
  swift_release();
  if (v104 != 7)
    goto LABEL_9;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v98 = a2;
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v9 = (void *)sub_100C1B0B8(v104);
  swift_bridgeObjectRelease();
  v10 = SPServiceStateEnabled;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v13 = v12;
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  if (v11 == v15 && v13 == v14)
  {

    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v15, v14, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      if (qword_1010E9F10 != -1)
        swift_once(&qword_1010E9F10, sub_10075AEB4);
      v87 = type metadata accessor for Logger(0);
      v88 = sub_10001A9E8(v87, (uint64_t)qword_1011B75D0);
      v89 = Logger.logObject.getter(v88);
      v90 = static os_log_type_t.error.getter(v89);
      if (os_log_type_enabled(v89, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v91 = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "BA service not enabled.", v91, 2u);
        swift_slowDealloc(v91, -1, -1);
      }

      _Block_copy(a3);
      v92 = v98;
      v93 = sub_10075C2B4((uint64_t)_swiftEmptyArrayStorage);
      sub_100CA864C(v93);
      swift_bridgeObjectRelease();
      sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
      sub_1000170AC((unint64_t *)&qword_1010F7AC0, &qword_1010F2158, SPBeacon_ptr);
      isa = Set._bridgeToObjectiveC()().super.isa;
      (*((void (**)(char *, Class))a3 + 2))(a3, isa);
      swift_bridgeObjectRelease();

      _Block_release(a3);
      goto LABEL_54;
    }
  }
  v24 = sub_100889888();
  v25 = v24[2];
  v26 = type metadata accessor for LeashRecord(0);
  v27 = *(_QWORD *)(v26 - 8);
  if (v25)
  {
    sub_10005972C((uint64_t)v24 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)), (uint64_t)v8, type metadata accessor for LeashRecord);
    v28 = 0;
  }
  else
  {
    v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v8, v28, 1, v26);
  swift_bridgeObjectRelease();
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v8, 1, v26);
  v96 = a3;
  if (v39 == 1)
  {
    sub_100004048((uint64_t)v8, &qword_101111B80);
    v40 = _swiftEmptyArrayStorage;
  }
  else
  {
    v40 = *(_QWORD **)&v8[*(int *)(v26 + 24)];
    swift_bridgeObjectRetain(v40);
    sub_1000126B0((uint64_t)v8, type metadata accessor for LeashRecord);
  }
  swift_retain();
  v97 = v40;
  a2 = sub_10000BCB4((uint64_t)v40);
  swift_release();
  v41 = _swiftEmptyArrayStorage;
  v107 = _swiftEmptyArrayStorage;
  a3 = (char *)a2[2];
  swift_retain();
  if (a3)
  {
    v99 = 0;
    v42 = 0;
    v43 = (uint64_t)(a2 + 4);
    v44 = a2;
    while ((unint64_t)v42 < a2[2])
    {
      sub_100030784(v43, (uint64_t)&v104);
      v45 = v105;
      v46 = v106;
      v47 = sub_10001AA44(&v104, v105);
      if ((sub_10077744C((uint64_t)v47, a1, v45, v46) & 1) != 0)
      {
        sub_10000F9FC(&v104, (uint64_t)&v100);
        v48 = v107;
        if ((swift_isUniquelyReferenced_nonNull_native(v107) & 1) == 0)
        {
          sub_10009A628(0, v48[2] + 1, 1);
          v48 = v107;
        }
        v50 = v48[2];
        v49 = v48[3];
        if (v50 >= v49 >> 1)
          sub_10009A628(v49 > 1, v50 + 1, 1);
        v51 = v102;
        v52 = v103;
        v53 = sub_10009F5D0((uint64_t)&v100, v102);
        __chkstk_darwin(v53);
        v55 = (char *)&v95 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v56 + 16))(v55);
        sub_1004AA86C(v50, (uint64_t)v55, (uint64_t *)&v107, v51, v52);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v100);
        a2 = v44;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v104);
      }
      ++v42;
      v43 += 40;
      if (a3 == v42)
      {
        v41 = v107;
        goto LABEL_40;
      }
    }
    __break(1u);
LABEL_56:
    swift_once(&qword_1010E9F10, sub_10075AEB4);
LABEL_10:
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B75D0);
    v17 = swift_retain_n(a1, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v104 = v21;
      *(_DWORD *)v20 = 136315138;
      if (*(_QWORD *)(a1 + 216))
      {
        swift_retain();
        CurrentValueSubject.value.getter(&v100);
        swift_release();
        v22 = v100;
      }
      else
      {
        v22 = 8;
      }
      LOBYTE(v100) = v22;
      v29 = sub_10001A9A8(&qword_101107008);
      v30 = String.init<A>(describing:)(&v100, v29);
      v100 = sub_100016940(v30, v31, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v20 + 4, v20 + 12);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not a finder device for separation monitoring, reason: %s.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      if (*(_QWORD *)(a1 + 216))
      {
LABEL_20:
        swift_retain();
        CurrentValueSubject.value.getter(&v104);
        swift_release();
        if (!*(_QWORD *)(a1 + 216)
          || (swift_retain(), CurrentValueSubject.value.getter(&v104), swift_release(), v104 != 6))
        {
          _Block_copy(a3);
          v37 = sub_10075C2B4((uint64_t)_swiftEmptyArrayStorage);
          sub_100CA864C(v37);
          swift_bridgeObjectRelease();
          sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
          sub_1000170AC((unint64_t *)&qword_1010F7AC0, &qword_1010F2158, SPBeacon_ptr);
          v38 = Set._bridgeToObjectiveC()().super.isa;
          (*((void (**)(char *, Class))a3 + 2))(a3, v38);
          swift_bridgeObjectRelease();

          _Block_release(a3);
          goto LABEL_54;
        }
      }
    }
    else
    {

      swift_release_n(a1, 2);
      if (*(_QWORD *)(a1 + 216))
        goto LABEL_20;
    }
    type metadata accessor for SPSeparationMonitoringError(0);
    v33 = v32;
    v100 = 20;
    v34 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v35 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(&v104, &v100, v34, v33, v35);
    v36 = (void *)v104;
    (*((void (**)(char *, _QWORD))a3 + 2))(a3, 0);

    goto LABEL_54;
  }
LABEL_40:
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  v57 = sub_100778718((uint64_t)v41, a1);
  swift_release();
  swift_release();
  v99 = sub_100307DCC((uint64_t)v57);
  v58 = v97;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v59 = type metadata accessor for Logger(0);
  sub_10001A9E8(v59, (uint64_t)qword_1011B75D0);
  swift_bridgeObjectRetain(v58);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.default.getter(v61);
  v63 = os_log_type_enabled(v61, v62);
  v95 = v57;
  if (v63)
  {
    v64 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v104 = v65;
    *(_DWORD *)v64 = 136315138;
    v66 = type metadata accessor for UUID(0);
    swift_bridgeObjectRetain(v58);
    v68 = Array.description.getter(v67, v66);
    v70 = v69;
    swift_bridgeObjectRelease();
    v100 = sub_100016940(v68, v70, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease_n(v58, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "All beacons that were configured for separation monitoring: %s", v64, 0xCu);
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v64, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v58, 2);
  }
  swift_bridgeObjectRetain(v99);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.default.getter(v72);
  if (os_log_type_enabled(v72, v73))
  {
    v74 = (uint8_t *)swift_slowAlloc(12, -1);
    v75 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v104 = v75;
    *(_DWORD *)v74 = 136315138;
    v76 = type metadata accessor for UUID(0);
    v77 = v99;
    swift_bridgeObjectRetain(v99);
    v79 = Array.description.getter(v78, v76);
    v81 = v80;
    swift_bridgeObjectRelease();
    v100 = sub_100016940(v79, v81, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease_n(v77, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Beacons that can be monitored for separation from this device: %s", v74, 0xCu);
    swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v74, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v99, 2);
  }
  v82 = (uint64_t)v95;
  a3 = v96;
  v83 = v98;
  _Block_copy(v96);
  v84 = sub_10075C2B4(v82);
  sub_100CA864C(v84);
  swift_bridgeObjectRelease();
  v85 = v83;
  sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
  sub_1000170AC((unint64_t *)&qword_1010F7AC0, &qword_1010F2158, SPBeacon_ptr);
  v86 = Set._bridgeToObjectiveC()().super.isa;
  (*((void (**)(char *, Class))a3 + 2))(a3, v86);
  swift_bridgeObjectRelease();

  _Block_release(a3);
  swift_bridgeObjectRelease();
LABEL_54:
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
}

void sub_10077B3E0(char *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t My;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[5];

  My = type metadata accessor for Feature.FindMy(0);
  v7[3] = My;
  v7[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v5 = sub_100018F08(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v5, enum case for Feature.FindMy.separationAlerts(_:), My);
  _Block_copy(a2);
  LOBYTE(My) = isFeatureEnabled(_:)(v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
  if ((My & 1) != 0)
  {
    v6 = *sub_10001AA44(&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
    _Block_copy(a2);
    sub_10077A760(v6, a1, (char *)a2);
    _Block_release(a2);
  }
  else
  {
    a2[2](a2, 0);
  }
  _Block_release(a2);
}

void sub_10077B4E0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void **v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void ***v11;
  void **v12;
  uint64_t v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  id v19;
  unsigned int v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  _QWORD *v26;
  void *v27;
  void **v28;
  void **aBlock;
  _QWORD v30[5];

  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B75D0);
  v7 = a1;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (void ***)swift_slowAlloc(8, -1);
    aBlock = v7;
    *(_DWORD *)v10 = 138412290;
    v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v10 + 4, v10 + 12);
    *v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Requesting reverse geocoded address for location: %@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v14 = (void *)objc_opt_self(GEOMapService);
  v15 = objc_msgSend(v14, "sharedService");
  objc_msgSend(v7, "coordinate");
  v17 = v16;
  objc_msgSend(v7, "coordinate");
  v19 = objc_msgSend(objc_allocWithZone((Class)GEOLocation), "initWithGEOCoordinate:", v17, v18);
  if (v19)
  {
    v20 = objc_msgSend(v7, "referenceFrame");
    if (v20 > 2)
      v21 = 0;
    else
      v21 = dword_100E4F060[v20];
    objc_msgSend(v19, "setReferenceFrame:", v21);
  }
  v22 = objc_msgSend(v14, "sharedService");
  if (v22)
  {
    v23 = v22;
    v24 = objc_msgSend(v15, "defaultTraits");
    v25 = objc_msgSend(v23, "ticketForReverseGeocodeLocation:traits:", v19, v24);

    if (v25)
    {
      v26 = (_QWORD *)swift_allocObject(&unk_101090C18, 40, 7);
      v26[2] = a2;
      v26[3] = a3;
      v26[4] = v7;
      v30[3] = sub_10077E1BC;
      v30[4] = v26;
      aBlock = _NSConcreteStackBlock;
      v30[0] = 1107296256;
      v30[1] = sub_10076408C;
      v30[2] = &unk_101090C30;
      v27 = _Block_copy(&aBlock);
      v28 = v7;
      swift_unknownObjectRetain(v25);
      swift_retain();
      swift_release();
      objc_msgSend(v25, "submitWithHandler:networkActivity:", v27, 0);
      swift_unknownObjectRelease_n(v25, 2);

      _Block_release(v27);
    }
    else
    {

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10077B86C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  _BYTE *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  id v77;
  double v78;
  double v79;
  _BYTE *v80;
  id v81;
  Class isa;
  id v83;
  void (*v84)(_BYTE *, uint64_t);
  id v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  void *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE v117[12];
  int v118;
  uint64_t v119;
  void *v120;
  _BYTE *v121;
  uint64_t v122;
  _BYTE *v123;
  uint64_t v124;
  id v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(_QWORD, _QWORD);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136[2];

  v12 = type metadata accessor for Date(0);
  v127 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v126 = &v117[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v117[-v15];
  v17 = sub_10001A9A8(&qword_101111B80);
  __chkstk_darwin(v17);
  v19 = &v117[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for LeashRecord(0);
  v133 = *(_QWORD *)(v20 - 8);
  v134 = v20;
  __chkstk_darwin(v20);
  v22 = &v117[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = swift_allocObject(&unk_101090BC8, 32, 7);
  v131 = a5;
  v132 = v23;
  *(_QWORD *)(v23 + 16) = a5;
  *(_QWORD *)(v23 + 24) = a6;
  v24 = qword_1010E9F10;
  v130 = a6;
  swift_retain();
  if (v24 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B75D0);
  swift_bridgeObjectRetain_n(a1, 2);
  v27 = a3;
  v129 = v26;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = v29;
  v31 = os_log_type_enabled(v28, v29);
  v124 = a2;
  v125 = v27;
  if (v31)
  {
    v32 = swift_slowAlloc(32, -1);
    v121 = v16;
    v33 = v32;
    v120 = (void *)swift_slowAlloc(96, -1);
    v136[0] = v120;
    *(_DWORD *)v33 = 136315650;
    v128 = a4;
    v34 = type metadata accessor for UUID(0);
    v122 = v12;
    v35 = v34;
    v36 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v123 = v22;
    v37 = v36;
    swift_bridgeObjectRetain(a1);
    v39 = Set.description.getter(v38, v35, v37);
    v41 = v40;
    swift_bridgeObjectRelease();
    v135 = sub_100016940(v39, v41, (uint64_t *)v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease();
    v119 = a1;
    v118 = v30;
    *(_WORD *)(v33 + 12) = 2080;
    v135 = a2;
    type metadata accessor for SPSeparationEventType(0);
    v43 = String.init<A>(describing:)(&v135, v42);
    v135 = sub_100016940(v43, v44, (uint64_t *)v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2080;
    v45 = v27;
    v46 = v19;
    v47 = objc_msgSend(v45, "description");
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
    v50 = v49;

    v19 = v46;
    v135 = sub_100016940(v48, v50, (uint64_t *)v136);
    v12 = v122;
    a4 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v33 + 24, v33 + 32);

    v22 = v123;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v118, "Received separation event request: %s, eventType: %s, region: %s", (uint8_t *)v33, 0x20u);
    v51 = v120;
    swift_arrayDestroy(v120, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    v52 = v33;
    v16 = v121;
    swift_slowDealloc(v52, -1, -1);

    a1 = v119;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v53 = sub_100889888();
  v54 = v133;
  if (v53[2])
  {
    sub_10005972C((uint64_t)v53 + ((*(unsigned __int8 *)(v133 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80)), (uint64_t)v19, type metadata accessor for LeashRecord);
    v55 = 0;
  }
  else
  {
    v55 = 1;
  }
  v56 = v134;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v54 + 56))(v19, v55, 1, v134);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v54 + 48))(v19, 1, v56) != 1)
  {
    v66 = sub_1000126EC((uint64_t)v19, (uint64_t)v22, type metadata accessor for LeashRecord);
    __chkstk_darwin(v66);
    v115 = a4;
    v116 = v22;
    v67 = a1;
    sub_100A763CC((void (*)(char *))sub_10077E10C, (uint64_t)&v117[-32], a1);
    v69 = v68;
    if (*(_QWORD *)(v68 + 16))
    {
      v128 = a4;
      static Date.trustedNow.getter((uint64_t)v16);
      v70 = v125;
      objc_msgSend(v125, "center");
      v72 = v71;
      v74 = v73;
      objc_msgSend(v70, "radius");
      v76 = v75;
      v77 = objc_msgSend(v70, "radius");
      v79 = v78;
      v80 = v126;
      Date.init()(v77);
      v81 = objc_allocWithZone((Class)CLLocation);
      isa = Date._bridgeToObjectiveC()().super.isa;
      v83 = objc_msgSend(v81, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:courseAccuracy:speed:speedAccuracy:timestamp:", isa, v72, v74, -1.0, v76, v79, -1.0, -1.0, -1.0, 0xBFF0000000000000);

      v84 = *(void (**)(_BYTE *, uint64_t))(v127 + 8);
      v84(v80, v12);
      objc_msgSend(v83, "setReferenceFrame:", objc_msgSend(v70, "geoReferenceFrame"));
      v85 = v83;
      LOBYTE(isa) = sub_10000CC48();

      if ((isa & 1) == 0)
      {
        v105 = (_QWORD *)swift_allocObject(&unk_101090BF0, 64, 7);
        v106 = v128;
        v105[2] = v85;
        v105[3] = v106;
        v107 = v132;
        v105[4] = sub_10077E100;
        v105[5] = v107;
        v108 = v124;
        v105[6] = v69;
        v105[7] = v108;
        v109 = v85;
        swift_retain();
        swift_retain();
        sub_10077B4E0(v109, (uint64_t)sub_10077E160, (uint64_t)v105);

        swift_release();
        v84(v16, v12);
        sub_1000126B0((uint64_t)v22, type metadata accessor for LeashRecord);
LABEL_22:
        swift_release();
        return;
      }
      swift_bridgeObjectRelease();
      type metadata accessor for SPSeparationMonitoringError(0);
      v87 = v86;
      v135 = 21;
      v88 = v16;
      v89 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v90 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
      _BridgedStoredNSError.init(_:userInfo:)(v136, &v135, v89, v87, v90);
      v91 = v136[0];
      sub_10075CC30(v136[0], 1, v131);

      v84(v88, v12);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n(a1, 2);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        v95 = (uint8_t *)swift_slowAlloc(12, -1);
        v96 = (void *)swift_slowAlloc(32, -1);
        v136[0] = v96;
        *(_DWORD *)v95 = 136315138;
        v97 = v22;
        v98 = type metadata accessor for UUID(0);
        v99 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v67);
        v101 = Set.description.getter(v100, v98, v99);
        v103 = v102;
        swift_bridgeObjectRelease();
        v104 = v101;
        v22 = v97;
        v135 = sub_100016940(v104, v103, (uint64_t *)v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136, v95 + 4, v95 + 12);
        swift_bridgeObjectRelease_n(v67, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Received separation alert for unknown beacons: %s", v95, 0xCu);
        swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1, -1);
        swift_slowDealloc(v95, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a1, 2);
      }
      type metadata accessor for SPSeparationMonitoringError(0);
      v111 = v110;
      v135 = 5;
      v112 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v113 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
      _BridgedStoredNSError.init(_:userInfo:)(v136, &v135, v112, v111, v113);
      v114 = v136[0];
      sub_10075CC30(v136[0], 1, v131);

    }
    sub_1000126B0((uint64_t)v22, type metadata accessor for LeashRecord);
    goto LABEL_22;
  }
  v57 = sub_100004048((uint64_t)v19, &qword_101111B80);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.error.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v60 = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Failed to publish separation event alert due to missing leash record", v60, 2u);
    swift_slowDealloc(v60, -1, -1);
  }

  type metadata accessor for SPSeparationMonitoringError(0);
  v62 = v61;
  v135 = 4;
  v63 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v64 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  _BridgedStoredNSError.init(_:userInfo:)(v136, &v135, v63, v62, v64);
  v65 = v136[0];
  sub_10075CC30(v136[0], 1, v131);
  swift_release();

}

uint64_t sub_10077C2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  id v16;
  uint64_t v18;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_10076410C((uint64_t)v13);
  v14 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
  sub_10000F9B8((uint64_t)v13, (uint64_t)v11, (uint64_t *)&unk_1010F47C0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4);
  v16 = 0;
  if (v15 != 1)
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    swift_retain_n(v14, 3);
    v16 = sub_1002835F0((uint64_t)v7, v14);
    sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    swift_release_n(v14, 3);
  }
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v16);

  return sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010F47C0);
}

uint64_t sub_10077C474(unint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  unint64_t v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t (*v54)(unint64_t, char *, uint64_t);
  BOOL v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  unsigned int (*v75)(char *, uint64_t, uint64_t);
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v64 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v63 = (char *)&v56 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v56 - v11;
  v13 = __chkstk_darwin(v10);
  v74 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  v70 = (char *)&v56 - v15;
  v16 = sub_10001A9A8(&qword_1010ED860);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v56 - v20;
  v69 = a1;
  v22 = *a1;
  v62 = *(_QWORD *)(*a1 + 16);
  if (!v62)
    return 0;
  v68 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v60 = v22 + v68;
  v23 = *(_QWORD *)(a2 + 16);
  v77 = *(_QWORD *)(v5 + 72);
  v65 = a2 + v68;
  v59 = v22;
  swift_bridgeObjectRetain(v22);
  v24 = 0;
  v66 = v23;
  v58 = v12;
  v57 = v19;
  v67 = a2;
  v72 = v5;
  v25 = v70;
  while (1)
  {
    swift_bridgeObjectRetain(a2);
    v73 = v24;
    if (v23)
      break;
    v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
LABEL_10:
    v76(v21, 1, 1, v4);
LABEL_11:
    a2 = v67;
    swift_bridgeObjectRelease(v67);
    v24 = v73 + 1;
    v23 = v66;
    if (v73 + 1 == v62)
    {
      v32 = v59;
      swift_bridgeObjectRelease(v59);
      return *(_QWORD *)(v32 + 16);
    }
  }
  v71 = v60 + v77 * v24;
  v78 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v26 = v65;
  while (1)
  {
    v78(v21, v26, v4);
    v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v76(v21, 0, 1, v4);
    v75 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    if (v75(v21, 1, v4) == 1)
      goto LABEL_11;
    v27 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v28 = v21;
    v27(v25, v21, v4);
    v29 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of static Equatable.== infix(_:_:)(v25, v71, v4, v29);
    v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v25, v4);
    if ((v30 & 1) != 0)
      break;
    v26 += v77;
    --v23;
    v5 = v72;
    v21 = v28;
    if (!v23)
      goto LABEL_10;
  }
  v34 = v59;
  swift_bridgeObjectRelease(v59);
  v35 = v67;
  swift_bridgeObjectRelease(v67);
  result = v73;
  v36 = v73 + 1;
  if (__OFADD__(v73, 1))
    goto LABEL_48;
  v37 = *(_QWORD *)(v34 + 16);
  if (v36 != v37)
  {
    v38 = v34;
    v39 = v68;
    v40 = v27;
    v41 = v29;
    v42 = v58;
    v43 = v57;
    v61 = v40;
LABEL_16:
    if (v36 >= v37)
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    v73 = result;
    v70 = (char *)(v36 * v77);
    v71 = v36;
    v44 = v38 + v39 + v36 * v77;
    v45 = v78;
    v78(v74, v44, v4);
    swift_bridgeObjectRetain(v35);
    v46 = v65;
    v47 = v66;
    while (1)
    {
      v45(v43, v46, v4);
      v76(v43, 0, 1, v4);
      if (v75(v43, 1, v4) == 1)
        goto LABEL_22;
      v40(v42, v43, v4);
      v48 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v74, v4, v41);
      v31(v42, v4);
      if ((v48 & 1) != 0)
        break;
      v46 += v77;
      --v47;
      v45 = v78;
      if (!v47)
      {
        v76(v43, 1, 1, v4);
LABEL_22:
        v35 = v67;
        swift_bridgeObjectRelease(v67);
        v31(v74, v4);
        result = v73;
        v49 = v71;
        v39 = v68;
        if (v73 != v71)
        {
          if ((v73 & 0x8000000000000000) != 0)
            goto LABEL_43;
          v50 = *v69;
          v51 = *(_QWORD *)(*v69 + 16);
          if (v73 >= v51)
            goto LABEL_44;
          v52 = v50 + v68;
          v62 = v73 * v77;
          v53 = (void (*)(char *, char *, uint64_t))v78;
          result = ((uint64_t (*)(char *, unint64_t, uint64_t))v78)(v63, v50 + v68 + v73 * v77, v4);
          if (v71 >= v51)
            goto LABEL_45;
          v49 = v71;
          v53(v64, &v70[v52], v4);
          result = swift_isUniquelyReferenced_nonNull_native(v50);
          *v69 = v50;
          if ((result & 1) == 0)
          {
            result = sub_1008C5E9C(v50);
            v50 = result;
            *v69 = result;
          }
          v39 = v68;
          if (v73 < *(_QWORD *)(v50 + 16))
          {
            v54 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v72 + 40);
            result = v54(v50 + v68 + v62, v64, v4);
            if (v49 >= *(_QWORD *)(*v69 + 16))
              goto LABEL_47;
            v54((unint64_t)&v70[*v69 + v39], v63, v4);
            v35 = v67;
            result = v73;
            v40 = v61;
            goto LABEL_31;
          }
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
LABEL_31:
        v55 = __OFADD__(result++, 1);
        if (v55)
          goto LABEL_42;
        v55 = __OFADD__(v49, 1);
        v36 = v49 + 1;
        if (v55)
          goto LABEL_41;
LABEL_36:
        v38 = *v69;
        v37 = *(_QWORD *)(*v69 + 16);
        if (v36 != v37)
          goto LABEL_16;
        return result;
      }
    }
    v35 = v67;
    swift_bridgeObjectRelease(v67);
    v31(v74, v4);
    result = v73;
    v39 = v68;
    v36 = v71 + 1;
    if (__OFADD__(v71, 1))
      goto LABEL_41;
    goto LABEL_36;
  }
  return result;
}

uint64_t sub_10077CA6C()
{
  uint64_t *v0;

  return sub_100766404(v0[2], v0[3], v0[4], v0[5]);
}

void sub_10077CA78()
{
  uint64_t v0;

  sub_10076FAD8(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), 4);
}

uint64_t sub_10077CA94@<X0>(uint64_t a1@<X8>)
{
  return sub_100767B14(a1);
}

uint64_t sub_10077CAAC(uint64_t a1)
{
  uint64_t v1;

  return sub_100767BA8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10077CAB8()
{
  return sub_10077D0B8((uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100767C28);
}

void sub_10077CAC4()
{
  uint64_t v0;

  sub_10076FAD8(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), 3);
}

uint64_t sub_10077CAE0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100773A84(*(uint8_t **)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), (uint64_t *)&unk_101106E60, &qword_101111B80, a1, type metadata accessor for LeashRecord, (uint64_t *)&unk_101106E50, (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, NSObject *))sub_10086F178);
}

uint64_t sub_10077CB3C()
{
  return sub_10067CB68((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_10076E36C);
}

uint64_t sub_10077CB48()
{
  uint64_t v0;

  return sub_10075D0A4(v0);
}

uint64_t sub_10077CB50(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC4AE4(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10077CB6C()
{
  return sub_10075D14C((uint64_t)sub_10077CBBC, (uint64_t)&unk_10108FFB0);
}

uint64_t sub_10077CB9C(uint64_t a1)
{
  uint64_t v1;

  return sub_100AD09F0(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10077CBBC()
{
  uint64_t v0;

  return sub_100771728(v0);
}

void sub_10077CBC8(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SafeLocation(0) - 8) + 80);
  sub_1007724A0(a1, v4, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_10077CC1C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  if (v1 != 255)
    sub_100294B28(*(id *)(v0 + 16), v1 & 1);
  return swift_deallocObject(v0, 25, 7);
}

void sub_10077CC54(char a1)
{
  uint64_t v1;

  sub_10076AE14(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_10077CC5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for SafeLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + v5 + 8) & ~v8;
  v13 = v3 | v8 | 7;
  v10 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v11(v0 + v9 + *(int *)(v6 + 20), v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v10, v13);
}

void sub_10077CD80()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10076AEF0(*(_BYTE *)(v0 + 16), v0 + v2, *(void (**)(_QWORD, _QWORD))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + v4), v0 + v6, *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

id sub_10077CE18(id result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_100294B60(result, a2 & 1);
  return result;
}

void sub_10077CE30(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_100294B28(a1, a2 & 1);
}

uint64_t sub_10077CE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10077CEDC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10076A174(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_10077CF2C()
{
  uint64_t v0;

  sub_100770C14(v0);
}

uint64_t sub_10077CF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

void sub_10077CFCC(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LeashRecord(0) - 8) + 80);
  sub_1007714E8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10077D00C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1007731C8(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10077D01C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10077D050()
{
  uint64_t v0;

  return sub_1007643D8(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10077D05C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100772968(v1, a1);
}

void sub_10077D074()
{
  uint64_t v0;

  sub_1007659FC(*(void (**)(void *, uint64_t))(v0 + 16));
}

uint64_t sub_10077D07C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10077D0A0(uint64_t a1)
{
  uint64_t v1;

  return sub_100765B54(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10077D0AC()
{
  return sub_10077D0B8((uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_100765F30);
}

uint64_t sub_10077D0B8(uint64_t (*a1)(unint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101106E50) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a1(v1 + v3, *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

void sub_10077D128()
{
  uint64_t v0;

  sub_10076FAD8(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), 6);
}

uint64_t sub_10077D144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + v4 + 1;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10077D1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_100773568(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(unsigned __int8 *)(v2 + v6 + *(_QWORD *)(v5 + 64)));
}

void sub_10077D254(void *a1, char a2)
{
  uint64_t v2;

  sub_100773A20(a1, a2 & 1, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_10077D270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((v4 + *(_QWORD *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_10077D33C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100768020(v0 + v2, *(unsigned __int8 *)(v0 + v2 + *(_QWORD *)(v1 + 64)), *(void (**)(_QWORD, _QWORD))(((v2 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 8), *(_QWORD *)(((v2 + *(_QWORD *)(v1 + 64)) & 0xFFFFFFFFFFFFFFF8) + v0 + 16));
}

uint64_t sub_10077D394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10077D470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1007695E0(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(void **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10077D4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = v3 | 7;
  v6 = (((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10077D5C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100769738(*(_BYTE *)(v0 + 16), v0 + v2, *(void (**)(void *, uint64_t))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

void sub_10077D624()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1007693FC(v0 + v2, *(void (**)(void *, uint64_t))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

void sub_10077D668()
{
  uint64_t v0;

  sub_10076FAD8(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), 8);
}

uint64_t sub_10077D688(uint64_t a1, uint64_t a2)
{
  return sub_10077D6A4(a1, a2, sub_100773620);
}

uint64_t sub_10077D698(uint64_t a1, uint64_t a2)
{
  return sub_10077D6A4(a1, a2, sub_10077384C);
}

uint64_t sub_10077D6A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, uint64_t))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SafeLocation(0) - 8) + 80);
  return a3(a1, a2, *(_QWORD *)(v3 + 16), v3 + ((v6 + 24) & ~v6));
}

uint64_t sub_10077D708()
{
  return sub_10077DB40((uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD))sub_10076B71C);
}

void sub_10077D718()
{
  sub_10077D728("Can't update non-existant safe location with identifier: %s.", 7);
}

void sub_10077D728(const char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10076C3F8(v2 + v6, *(void (**)(void *, uint64_t))v7, *(_QWORD *)(v7 + 8), a1, a2);
}

uint64_t sub_10077D794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10077D844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for SafeLocation(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_100889110(v1 + *(int *)(v3 + 20) + ((v4 + 24) & ~v4), a1);
}

uint64_t sub_10077D898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10077D940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SafeLocation(0) - 8) + 80);
  return sub_10076C308(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10077D980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_10077DA48()
{
  sub_10077D728("Updating safe location with identifier: %s failed due to timeout.", 17);
}

uint64_t sub_10077DA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10077DB34()
{
  return sub_10077DB40((uint64_t (*)(unint64_t, _QWORD, _QWORD, _QWORD))sub_10076C6AC);
}

uint64_t sub_10077DB40(uint64_t (*a1)(unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a1(v1 + v3, *(_QWORD *)(v1 + v4), *(_QWORD *)(v1 + v4 + 8), *(_QWORD *)(v1 + ((v4 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10077DBA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100773988(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_10077DBAC(uint64_t a1)
{
  uint64_t v1;

  sub_10076E304(a1, *(void (**)(id, uint64_t))(v1 + 16));
}

void sub_10077DBB4(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease(a1);
}

uint64_t sub_10077DBC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100773278(*(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_10077DC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1007733A0(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10077DC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_10077DD28()
{
  return sub_10067CB68((uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_10076C95C);
}

void sub_10077DD34()
{
  uint64_t v0;

  sub_10076FAD8(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), 7);
}

uint64_t sub_10077DD54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100889110(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_10077DD9C(uint64_t a1)
{
  uint64_t v1;

  return sub_10076E0C8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10077DDA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_10077DE4C()
{
  return sub_10077DE58("Successfuly to assigned %s to safe location with UUID: %s");
}

uint64_t sub_10077DE58(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10076FC2C(*(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(_QWORD, _QWORD))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)), a1);
}

void sub_10077DEC0()
{
  uint64_t v0;

  sub_10076FAD8(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), 5);
}

uint64_t sub_10077DEDC(uint64_t a1, uint64_t a2)
{
  return sub_10077DF18(a1, a2, (uint64_t (*)(void))sub_1007C8688, &qword_1010ECD00);
}

uint64_t sub_10077DEF0(uint64_t a1, uint64_t a2)
{
  return sub_10077DF18(a1, a2, (uint64_t (*)(void))sub_1007C86B0, &qword_1010ECCF0);
}

uint64_t sub_10077DF04(uint64_t a1, uint64_t a2)
{
  return sub_10077DF18(a1, a2, (uint64_t (*)(void))sub_1007C869C, &qword_1010ECCF8);
}

uint64_t sub_10077DF18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  char v27;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!swift_isUniquelyReferenced_nonNull_native(*v4) || v7 - v9 > *(_QWORD *)(v6 + 24) >> 1)
    v6 = a3();
  v13 = sub_10001A9A8(a4);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v6 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v16 * a1;
  v18 = v15 + v16 * a1;
  result = swift_arrayDestroy(v18, v9, v13);
  if (!v9)
    goto LABEL_22;
  v20 = *(_QWORD *)(v6 + 16);
  v21 = v20 - a2;
  if (__OFSUB__(v20, a2))
    goto LABEL_28;
  if ((v21 & 0x8000000000000000) == 0)
  {
    v22 = v15 + v16 * a2;
    if (v17 < v16 * a2 || v18 >= v22 + v21 * v16)
    {
      result = swift_arrayInitWithTakeFrontToBack(v18, v22, v21, v13);
    }
    else if (v17 != v16 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v18, v22);
    }
    v24 = *(_QWORD *)(v6 + 16);
    v25 = __OFADD__(v24, v10);
    v26 = v24 - v9;
    if (!v25)
    {
      *(_QWORD *)(v6 + 16) = v26;
LABEL_22:
      *v4 = v6;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  v27 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v27, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10077E0C8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10077E0EC(uint64_t a1, __int16 a2)
{
  uint64_t v2;

  return sub_10075CAC4(a1, a2 & 0x1FF, *(uint64_t (**)(BOOL))(v2 + 16));
}

void sub_10077E100(void *a1, char a2)
{
  uint64_t v2;

  sub_10075CC30(a1, a2 & 1, *(void (**)(_QWORD, _QWORD))(v2 + 16));
}

uint64_t sub_10077E10C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10075D4A4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10077E124()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10077E160(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_10075DE50(a1, a2, a3 & 1, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
}

uint64_t sub_10077E190()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10077E1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100763CC0(a1, a2, *(void (**)(void *, unint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

id sub_10077E1C8(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain(a2);
}

void sub_10077E1D8(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_bridgeObjectRelease(a2);
}

uint64_t sub_10077E1E8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10077E234(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v11 = v1[3];
  v12 = v1[2];
  v4 = v1[5];
  v10 = v1[4];
  v5 = v1[6];
  v6 = v1[7];
  v7 = v1[8];
  v8 = (_QWORD *)swift_task_alloc(dword_101106F24);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004C28;
  return sub_10075E2A4(a1, v12, v11, v10, v4, v5, v6, v7);
}

uint64_t *sub_10077E2EC(uint64_t *a1)
{
  sub_1003CFF68(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_10077E34C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();

  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10077E5F4@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_100762084(*(void **)(v1 + 24), v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t sub_10077E638()
{
  uint64_t v0;

  return sub_100762484(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10077E640(uint64_t a1)
{
  uint64_t v1;

  return sub_1007616BC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10077E648()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v27 = v5;
  v25 = *(_QWORD *)(v5 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  v7 = v0 + ((v3 + 40) & ~v3);
  sub_10001BC14(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  v8 = v7 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v12 = v7 + v1[6];
  v13 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
    v11(v14, v9);
  v15 = v7 + v1[8];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v17 = (uint64_t *)(v7 + v1[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (uint64_t *)(v7 + v1[11]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10001BC14(*v19, v20);
  v21 = v3 | v6 | 7;
  v22 = (((v3 + 40) & ~v3) + v26 + v6) & ~v6;
  sub_10001BC14(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[13]), *(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_10077E948(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8) + 80);
  v8 = (v6 + v7) & ~v7;
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = (_QWORD *)swift_task_alloc(dword_101106F64);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004C28;
  return sub_100761884(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_10077EA08()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v27 = v5;
  v25 = *(_QWORD *)(v5 + 64);
  swift_release();
  v7 = v0 + ((v3 + 24) & ~v3);
  sub_10001BC14(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
  v8 = v7 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  v12 = v7 + v1[6];
  v13 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      v24 = v4;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = v7 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v14, 1, v9))
    v11(v14, v9);
  v15 = v7 + v1[8];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v17 = (uint64_t *)(v7 + v1[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = (uint64_t *)(v7 + v1[11]);
  v20 = v19[1];
  if (v20 >> 60 != 15)
    sub_10001BC14(*v19, v20);
  v21 = v3 | v6 | 7;
  v22 = (((v3 + 24) & ~v3) + v26 + v6) & ~v6;
  sub_10001BC14(*(_QWORD *)(v7 + v1[12]), *(_QWORD *)(v7 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v7 + v1[13]), *(_QWORD *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_10077ED00()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8) + 80);
  return sub_100761ABC(*(_QWORD *)(v0 + 16), v0 + v2, v0 + ((v3 + v4) & ~v4));
}

uint64_t sub_10077ED70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010F8318);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10077EDD4(uint64_t a1)
{
  sub_10001A9A8(&qword_1010F8318);
  return sub_100762028(a1);
}

uint64_t sub_10077EE14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10077EE38()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v3 | 7);
}

uint64_t sub_10077F0F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1007702A4(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_10077F114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10077F1E0(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for SafeLocation(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_100770924(a1, v4, *(_QWORD *)(v2 + 16), v2 + v6, *(NSObject **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

_QWORD *sub_10077F244(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;

  v2 = a1[1];
  v3 = (void *)a1[3];
  v4 = (void *)a1[6];
  swift_bridgeObjectRetain(a1[5]);
  v5 = v4;
  swift_bridgeObjectRetain(v2);
  v6 = v3;
  return a1;
}

uint64_t sub_10077F290(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(void **)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_10077F2DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

void sub_10077F320(uint64_t a1)
{
  uint64_t v1;

  sub_1007638D8(a1, v1 + 16, *(void (**)(_QWORD, uint64_t))(v1 + 72));
}

uint64_t sub_10077F330@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1007628F0(*(_QWORD *)(v1 + 16), v1 + 24, *(_QWORD *)(v1 + 80), v1 + 88, a1);
}

uint64_t sub_10077F344()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10077F36C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10077F3C0(uint64_t (*a1)(__int128 *), uint64_t a2)
{
  uint64_t v2;

  return sub_1007629EC(a1, a2, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 80), v2 + 88);
}

uint64_t sub_10077F3D4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 144, 7);
}

uint64_t sub_10077F430(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  return sub_100762BE0(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(_QWORD, _QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), v2 + 40, *(_QWORD *)(v2 + 96), v2 + 104);
}

uint64_t sub_10077F448()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10077F47C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100763624(a1, a2 & 1, v2 + 16, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 56), *(_QWORD *)(v2 + 64), *(uint64_t (**)(uint64_t))(v2 + 72));
}

uint64_t sub_10077F490()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10077F4CC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1007632F4(a1, a2 & 1, v2 + 16, v2 + 56, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 96), *(_QWORD *)(v2 + 104), *(uint64_t (**)(uint64_t))(v2 + 112));
}

uint64_t sub_10077F4E4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_10077F4F0(result);
  return result;
}

uint64_t sub_10077F4F0(uint64_t result)
{
  if (result != 1)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_10077F500(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return sub_10077F50C(result);
  return result;
}

uint64_t sub_10077F50C(uint64_t result)
{
  if (result != 1)
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_10077F51C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10077F540()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10077F574(void *a1, char a2)
{
  uint64_t v2;

  sub_10075AF38(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD, void *))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

ValueMetadata *_s12AnalyticsKeyOMa()
{
  return &_s12AnalyticsKeyON;
}

uint64_t _s12AnalyticsKeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10077F5D8 + 4 * byte_100E4ECAC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10077F5F8 + 4 * byte_100E4ECB1[v4]))();
}

_BYTE *sub_10077F5D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10077F5F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10077F600(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10077F608(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10077F610(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10077F618(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s14AnalyticsEventOMa()
{
  return &_s14AnalyticsEventON;
}

unint64_t sub_10077F638()
{
  unint64_t result;

  result = qword_101107028;
  if (!qword_101107028)
  {
    result = swift_getWitnessTable(byte_100E4ED54, &_s14AnalyticsEventON);
    atomic_store(result, (unint64_t *)&qword_101107028);
  }
  return result;
}

unint64_t sub_10077F680()
{
  unint64_t result;

  result = qword_101107030;
  if (!qword_101107030)
  {
    result = swift_getWitnessTable(byte_100E4ED1C, &_s14AnalyticsEventON);
    atomic_store(result, (unint64_t *)&qword_101107030);
  }
  return result;
}

unint64_t sub_10077F6C8()
{
  unint64_t result;

  result = qword_101107038;
  if (!qword_101107038)
  {
    result = swift_getWitnessTable("}%$", &_s14AnalyticsEventON);
    atomic_store(result, (unint64_t *)&qword_101107038);
  }
  return result;
}

unint64_t sub_10077F710()
{
  unint64_t result;

  result = qword_101107040;
  if (!qword_101107040)
  {
    result = swift_getWitnessTable(byte_100E4EE24, &_s12AnalyticsKeyON);
    atomic_store(result, (unint64_t *)&qword_101107040);
  }
  return result;
}

unint64_t sub_10077F758()
{
  unint64_t result;

  result = qword_101107048;
  if (!qword_101107048)
  {
    result = swift_getWitnessTable(byte_100E4EDEC, &_s12AnalyticsKeyON);
    atomic_store(result, (unint64_t *)&qword_101107048);
  }
  return result;
}

unint64_t sub_10077F7A0()
{
  unint64_t result;

  result = qword_101107050;
  if (!qword_101107050)
  {
    result = swift_getWitnessTable(byte_100E4EE64, &_s12AnalyticsKeyON);
    atomic_store(result, (unint64_t *)&qword_101107050);
  }
  return result;
}

uint64_t sub_10077F7E4(uint64_t a1)
{
  return sub_10077CB9C(a1);
}

uint64_t sub_10077F9AC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v20;
  char v21;
  _OWORD v22[3];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101107078);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10078079C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MetricsRequest.Body.CodingKeys, &type metadata for MetricsRequest.Body.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v22[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    LOBYTE(v22[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v22, v5);
    v15 = v3[3];
    v16 = v3[4];
    LOBYTE(v22[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v22, v5);
    v17 = *(_OWORD *)(v3 + 7);
    v22[0] = *(_OWORD *)(v3 + 5);
    v22[1] = v17;
    v22[2] = *(_OWORD *)(v3 + 9);
    v21 = 3;
    v18 = sub_1007807E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v5, &type metadata for ItemCounts, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10077FB34(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011070B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100780F40();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ItemCounts.CodingKeys, &type metadata for ItemCounts.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v25, v5);
  if (!v2)
  {
    v13 = v3[1];
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v24, v5);
    v14 = v3[2];
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v23, v5);
    v15 = v3[3];
    v22 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v22, v5);
    v16 = v3[4];
    v21 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v21, v5);
    v17 = v3[5];
    v20 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10077FCF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008241C();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_10077FD18()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10077FD44 + 4 * byte_100E4F06C[*v0]))(0x656372756F73, 0xE600000000000000);
}

uint64_t sub_10077FD44()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10077FD60()
{
  return 1684628597;
}

uint64_t sub_10077FD70()
{
  return 0x6E756F436D657469;
}

uint64_t sub_10077FD8C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007808B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10077FDB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10078079C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10077FDD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10078079C();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10077FE00@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  uint64_t v8;

  sub_100780A68(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_QWORD *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10077FE58(_QWORD *a1)
{
  return sub_10077F9AC(a1);
}

uint64_t sub_10077FEA0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10077FED0 + 4 * byte_100E4F070[*v0]))(0x3156676174726961, 0xE800000000000000);
}

uint64_t sub_10077FED0()
{
  return 0x3256676174726961;
}

uint64_t sub_10077FEE4()
{
  return 0x3156616E6D66;
}

uint64_t sub_10077FEF8()
{
  return 0x3256616E6D66;
}

uint64_t sub_10077FF0C()
{
  return 0x6E6D66656C707061;
}

uint64_t sub_10077FF2C()
{
  return 0x6E6D66656C707061;
}

uint64_t sub_10077FF50@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100780F84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10077FF74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100780F40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10077FF9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100780F40();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10077FFC4@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_100781200(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100780004(_QWORD *a1)
{
  return sub_10077FB34(a1);
}

uint64_t sub_100780018(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _QWORD v35[5];
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v7
    && (v8 = v7,
        v9 = objc_msgSend(v7, "uniqueDeviceIdentifier"),
        v8,
        v9))
  {
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    v12 = *a1;
    v32 = a1[1];
    v33 = v12;
    v40 = v1;
    v14 = *((_QWORD *)a1 + 4);
    v13 = *((_QWORD *)a1 + 5);
    v15 = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
    v16 = objc_msgSend(v15, "processName");

    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20 = static Date.trustedNow.getter((uint64_t)v6);
    v21 = Date.epoch.getter(v20);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v22 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    JSONEncoder.init()(v23);
    v35[0] = v17;
    v35[1] = v19;
    v35[2] = v21;
    v35[3] = v34;
    v35[4] = v11;
    v36 = v33;
    v37 = v32;
    v38 = v14;
    v39 = v13;
    v24 = sub_1007802F4();
    v25 = v40;
    v26 = dispatch thunk of JSONEncoder.encode<A>(_:)(v35, &type metadata for MetricsRequest.Body, v24);
    if (v25)
    {
      swift_errorRelease(v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    else
    {
      v3 = v26;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    v27 = type metadata accessor for GenericError(0);
    v28 = sub_1007802AC();
    swift_allocError(v27, v28, 0, 0);
    strcpy(v29, "Missing UDID!");
    *((_WORD *)v29 + 7) = -4864;
    v30 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, enum case for GenericError.error(_:), v27);
    swift_willThrow(v30);
  }
  return v3;
}

unint64_t sub_1007802AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ECC40;
  if (!qword_1010ECC40)
  {
    v1 = type metadata accessor for GenericError(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for GenericError, v1);
    atomic_store(result, (unint64_t *)&qword_1010ECC40);
  }
  return result;
}

unint64_t sub_1007802F4()
{
  unint64_t result;

  result = qword_101107060;
  if (!qword_101107060)
  {
    result = swift_getWitnessTable("\t%$", &type metadata for MetricsRequest.Body);
    atomic_store(result, (unint64_t *)&qword_101107060);
  }
  return result;
}

uint64_t destroy for MetricsRequest.Body(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for MetricsRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for MetricsRequest.Body(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

uint64_t assignWithTake for MetricsRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for MetricsRequest.Body()
{
  return &type metadata for MetricsRequest.Body;
}

uint64_t *destroy for TagUserStatistics(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if (v1 >> 60 != 15)
    return (uint64_t *)sub_10001BC14(*result, v1);
  return result;
}

uint64_t _s12searchpartyd14MetricsRequestVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for MetricsRequest(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10001BC14(v7, v8);
      return a1;
    }
    sub_1000DC964((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v5 = *(_QWORD *)a2;
  sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithTake for MetricsRequest(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10001BC14(v6, v4);
      return a1;
    }
    sub_1000DC964((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for MetricsRequest(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MetricsRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)result = a2 - 12;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsRequest()
{
  return &type metadata for MetricsRequest;
}

unint64_t sub_100780710()
{
  unint64_t result;

  result = qword_101107068;
  if (!qword_101107068)
  {
    result = swift_getWitnessTable("Q%$", &type metadata for MetricsRequest);
    atomic_store(result, (unint64_t *)&qword_101107068);
  }
  return result;
}

unint64_t sub_100780758()
{
  unint64_t result;

  result = qword_101107070;
  if (!qword_101107070)
  {
    result = swift_getWitnessTable("9%$", &type metadata for MetricsRequest);
    atomic_store(result, (unint64_t *)&qword_101107070);
  }
  return result;
}

unint64_t sub_10078079C()
{
  unint64_t result;

  result = qword_101107080;
  if (!qword_101107080)
  {
    result = swift_getWitnessTable(byte_100E4F2A0, &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101107080);
  }
  return result;
}

unint64_t sub_1007807E0()
{
  unint64_t result;

  result = qword_101107088;
  if (!qword_101107088)
  {
    result = swift_getWitnessTable(byte_100E4F278, &type metadata for ItemCounts);
    atomic_store(result, (unint64_t *)&qword_101107088);
  }
  return result;
}

unint64_t sub_100780824()
{
  unint64_t v0;
  id v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v5;

  v0 = sub_1006B8DC4((uint64_t)&off_10104DBC0);
  v1 = sub_100B5EAF4();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  v5 = v0;
  sub_1001664D0((uint64_t)v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v5);
  v3 = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1007808B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v7 = 0xE900000000000070;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1684628597 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628597, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E756F436D657469 && a2 == 0xEA00000000007374)
  {
    swift_bridgeObjectRelease(0xEA00000000007374);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F436D657469, 0xEA00000000007374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100780A68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  char v31;

  v5 = sub_10001A9A8(&qword_101107090);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10078079C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MetricsRequest.Body.CodingKeys, &type metadata for MetricsRequest.Body.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  LOBYTE(v28[0]) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  v14 = v13;
  LOBYTE(v28[0]) = 1;
  swift_bridgeObjectRetain(v13);
  v27 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  LOBYTE(v28[0]) = 2;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(v28, v5);
  v31 = 3;
  v16 = v15;
  v17 = sub_100780CF0();
  v26 = v16;
  swift_bridgeObjectRetain(v16);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, &type metadata for ItemCounts, &v31, v5, &type metadata for ItemCounts, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = v28[1];
  v24 = v28[0];
  v18 = v29;
  v19 = v30;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v20 = v26;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  v22 = v25;
  *(_QWORD *)(a2 + 16) = v27;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v20;
  *(_OWORD *)(a2 + 40) = v24;
  *(_OWORD *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 72) = v18;
  *(_QWORD *)(a2 + 80) = v19;
  return result;
}

unint64_t sub_100780CF0()
{
  unint64_t result;

  result = qword_101107098;
  if (!qword_101107098)
  {
    result = swift_getWitnessTable(byte_100E4F250, &type metadata for ItemCounts);
    atomic_store(result, (unint64_t *)&qword_101107098);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for MetricsRequest.Body.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100780D80 + 4 * byte_100E4F07B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100780DB4 + 4 * byte_100E4F076[v4]))();
}

uint64_t sub_100780DB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100780DBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100780DC4);
  return result;
}

uint64_t sub_100780DD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100780DD8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100780DDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100780DE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetricsRequest.Body.CodingKeys()
{
  return &type metadata for MetricsRequest.Body.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ItemCounts(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ItemCounts(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts()
{
  return &type metadata for ItemCounts;
}

unint64_t sub_100780E6C()
{
  unint64_t result;

  result = qword_1011070A0;
  if (!qword_1011070A0)
  {
    result = swift_getWitnessTable("i$$", &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011070A0);
  }
  return result;
}

unint64_t sub_100780EB4()
{
  unint64_t result;

  result = qword_1011070A8;
  if (!qword_1011070A8)
  {
    result = swift_getWitnessTable(byte_100E4F198, &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011070A8);
  }
  return result;
}

unint64_t sub_100780EFC()
{
  unint64_t result;

  result = qword_1011070B0;
  if (!qword_1011070B0)
  {
    result = swift_getWitnessTable("1$$", &type metadata for MetricsRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011070B0);
  }
  return result;
}

unint64_t sub_100780F40()
{
  unint64_t result;

  result = qword_1011070C0;
  if (!qword_1011070C0)
  {
    result = swift_getWitnessTable(byte_100E4F3A8, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011070C0);
  }
  return result;
}

uint64_t sub_100780F84(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x3156676174726961 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3156676174726961, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x3256676174726961 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3256676174726961, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x3156616E6D66 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3156616E6D66, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x3256616E6D66 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x3256616E6D66, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6E6D66656C707061 && a2 == 0xEB00000000315661)
  {
    v10 = 0xEB00000000315661;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6D66656C707061, 0xEB00000000315661, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6E6D66656C707061 && a2 == 0xEB00000000325661)
  {
    swift_bridgeObjectRelease(0xEB00000000325661);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6D66656C707061, 0xEB00000000325661, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100781200@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v5 = sub_10001A9A8(&qword_1011070C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100780F40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ItemCounts.CodingKeys, &type metadata for ItemCounts.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v26 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v25 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v24 = 2;
  v20 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  v23 = 3;
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
  v22 = 4;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
  v21 = 5;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v12;
  a2[1] = v13;
  v16 = v19;
  a2[2] = v20;
  a2[3] = v16;
  a2[4] = v18;
  a2[5] = v14;
  return result;
}

uint64_t storeEnumTagSinglePayload for ItemCounts.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100781454 + 4 * byte_100E4F085[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100781488 + 4 * byte_100E4F080[v4]))();
}

uint64_t sub_100781488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100781490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100781498);
  return result;
}

uint64_t sub_1007814A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007814ACLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1007814B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007814B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ItemCounts.CodingKeys()
{
  return &type metadata for ItemCounts.CodingKeys;
}

unint64_t sub_1007814D8()
{
  unint64_t result;

  result = qword_1011070D0;
  if (!qword_1011070D0)
  {
    result = swift_getWitnessTable(byte_100E4F380, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011070D0);
  }
  return result;
}

unint64_t sub_100781520()
{
  unint64_t result;

  result = qword_1011070D8;
  if (!qword_1011070D8)
  {
    result = swift_getWitnessTable("i#$", &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011070D8);
  }
  return result;
}

unint64_t sub_100781568()
{
  unint64_t result;

  result = qword_1011070E0;
  if (!qword_1011070E0)
  {
    result = swift_getWitnessTable(byte_100E4F318, &type metadata for ItemCounts.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011070E0);
  }
  return result;
}

void sub_1007815AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSURL *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v4 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027D68(a1, (uint64_t)v6);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v10);

}

id sub_1007818A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UnknownDiscoveryTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for UnknownDiscoveryTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd26UnknownDiscoveryTrampoline);
}

uint64_t sub_100781908()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

ValueMetadata *type metadata accessor for AirpodsPairingSpec1_0()
{
  return &type metadata for AirpodsPairingSpec1_0;
}

unint64_t sub_10078194C()
{
  unint64_t result;

  result = qword_101107180;
  if (!qword_101107180)
  {
    result = swift_getWitnessTable("}$$", &type metadata for AirPodsPairingCommand1_0);
    atomic_store(result, (unint64_t *)&qword_101107180);
  }
  return result;
}

uint64_t sub_100781990@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13)
{
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[13];

  sub_1001F4898(a1, a2);
  v29[0] = v23;
  v29[1] = v24;
  v29[2] = v25;
  v29[3] = v26;
  v29[4] = v27;
  v29[5] = v28;
  sub_10078509C(v29);
  sub_100784E78((uint64_t)v29, a9);
  sub_10001BBBC(a1, a2);
  sub_10001BBBC(a3, a4);
  sub_10001BBBC(a5, a6);
  sub_10001BBBC(a7, a8);
  sub_10001BD08(a10, a11);
  return sub_10001BD08(a12, a13);
}

_QWORD *sub_100781A78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  _BYTE v8[200];

  v3 = static Data.random(bytes:)(qword_1011B7F10);
  v5 = v4;
  sub_1000F9298();
  result = BinaryDecodable.init(data:)(v6, v3, v5);
  if (!v1)
  {
    sub_100784FE0((uint64_t)v8);
    return (_QWORD *)sub_100784E78((uint64_t)v8, a1);
  }
  return result;
}

uint64_t sub_100781B00(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1007DE864(a3, a4);
  if (!v4)
  {
    v10 = result;
    v11 = v8;
    v12 = v9;
    sub_10001BBBC(result, v8);
    sub_1002F7278(v10, v11);
    a1[3] = &type metadata for CollaborativeKeyGen.v1.C2;
    a1[4] = sub_100059ED0();
    *a1 = v13;
    a1[1] = v14;
    a2[3] = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
    a2[4] = &off_101093D30;
    result = sub_10001BC14(v10, v11);
    *a2 = v12;
  }
  return result;
}

unint64_t sub_100781BE0()
{
  unint64_t result;

  result = qword_1011071D8;
  if (!qword_1011071D8)
  {
    result = swift_getWitnessTable(byte_100E2DCD0, &type metadata for AirPodsFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1011071D8);
  }
  return result;
}

unint64_t sub_100781C2C()
{
  unint64_t result;

  result = qword_1011071E0;
  if (!qword_1011071E0)
  {
    result = swift_getWitnessTable(byte_100E42810, &type metadata for AirPodsInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1011071E0);
  }
  return result;
}

unint64_t sub_100781C78()
{
  unint64_t result;

  result = qword_1011071E8;
  if (!qword_1011071E8)
  {
    result = swift_getWitnessTable(byte_100E698A0, &type metadata for AirPodsPairingEligibilityDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1011071E8);
  }
  return result;
}

unint64_t sub_100781CC0()
{
  unint64_t result;

  result = qword_1011071F0;
  if (!qword_1011071F0)
  {
    result = swift_getWitnessTable(a5_15, &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1011071F0);
  }
  return result;
}

unint64_t sub_100781D0C()
{
  unint64_t result;

  result = qword_1011071F8;
  if (!qword_1011071F8)
  {
    result = swift_getWitnessTable(byte_100E52818, &type metadata for AirPodsSendPairingDataCommandPayloadv1);
    atomic_store(result, (unint64_t *)&qword_1011071F8);
  }
  return result;
}

unint64_t sub_100781D54()
{
  unint64_t result;

  result = qword_101107200;
  if (!qword_101107200)
  {
    result = swift_getWitnessTable(byte_100E477B8, &type metadata for AirPodsSendPairingDataCommandPayloadv2);
    atomic_store(result, (unint64_t *)&qword_101107200);
  }
  return result;
}

unint64_t sub_100781D9C()
{
  unint64_t result;

  result = qword_101107208;
  if (!qword_101107208)
  {
    result = swift_getWitnessTable(aQ_32, &type metadata for AirPodsSendPairingDataCommandPayloadv3);
    atomic_store(result, (unint64_t *)&qword_101107208);
  }
  return result;
}

unint64_t sub_100781DE4()
{
  unint64_t result;

  result = qword_101107210;
  if (!qword_101107210)
  {
    result = swift_getWitnessTable(byte_100E3C4C0, &type metadata for AirPodsSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101107210);
  }
  return result;
}

void sub_100781E2C()
{
  uint64_t v0;
  char *v1;
  _BYTE v2[200];

  sub_100784E78(v0, (uint64_t)v2);
  v1 = (char *)sub_100781E70 + 4 * byte_100E4F440[sub_1007859C8((uint64_t)v2)];
  __asm { BR              X10 }
}

uint64_t sub_100781E70()
{
  uint64_t v1;

  sub_100785E04((uint64_t)&v1);
  return 1;
}

void sub_100781F18()
{
  uint64_t v0;
  char *v1;
  _BYTE v2[200];
  _BYTE v3[200];
  _BYTE v4[208];

  sub_100784E78(v0, (uint64_t)v2);
  sub_100784E78((uint64_t)v2, (uint64_t)v4);
  sub_100784E78(v0, (uint64_t)v3);
  v1 = (char *)sub_100781F84 + 4 * word_100E4F44C[sub_1007859C8((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_100781F84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  _BYTE v10[400];
  uint64_t v11;
  uint64_t v12;

  v1 = sub_100785E04((uint64_t)&v11);
  v9 = *(_OWORD *)v1;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v0[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
  v0[4] = sub_10005A2C0();
  v4 = swift_allocObject(&unk_1010918C0, 48, 7);
  *v0 = v4;
  *(_OWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  sub_100784E78((uint64_t)&v12, (uint64_t)v10);
  v5 = (uint64_t *)sub_100785E04((uint64_t)v10);
  v6 = v5[2];
  v7 = v5[3];
  sub_10001BBBC(*v5, v5[1]);
  return sub_10001BBBC(v6, v7);
}

void sub_1007824D8()
{
  uint64_t v0;
  _BYTE v1[200];

  sub_100784E78(v0, (uint64_t)v1);
  sub_100781F18();
}

void sub_100782514()
{
  uint64_t v0;
  _BYTE v1[200];

  sub_100784E78(v0, (uint64_t)v1);
  sub_100781E2C();
}

unint64_t sub_100782548(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100782574();
  result = sub_1007825B8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100782574()
{
  unint64_t result;

  result = qword_101107360;
  if (!qword_101107360)
  {
    result = swift_getWitnessTable("Q$$", &type metadata for AirPodsPairingCommand1_0);
    atomic_store(result, (unint64_t *)&qword_101107360);
  }
  return result;
}

unint64_t sub_1007825B8()
{
  unint64_t result;

  result = qword_101107368;
  if (!qword_101107368)
  {
    result = swift_getWitnessTable("i$$", &type metadata for AirPodsPairingCommand1_0);
    atomic_store(result, (unint64_t *)&qword_101107368);
  }
  return result;
}

uint64_t sub_1007825FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100782654(a1, (uint64_t (*)(void))sub_100783FF8, (void (*)(_QWORD *__return_ptr, uint64_t, _BYTE *))sub_100784798, (void (*)(_QWORD *, uint64_t))sub_100784E78, a2);
}

uint64_t sub_100782628@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100782654(a1, (uint64_t (*)(void))sub_100783F00, (void (*)(_QWORD *__return_ptr, uint64_t, _BYTE *))sub_1007840F0, (void (*)(_QWORD *, uint64_t))sub_100785EA0, a2);
}

uint64_t sub_100782654@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(void)@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _BYTE *)@<X2>, void (*a4)(_QWORD *, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t (*v18)(void);
  void (*v19)(_QWORD *__return_ptr, uint64_t, _BYTE *);
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *, uint64_t);
  void (*v41)(_QWORD *, uint64_t);
  uint64_t v42;
  uint64_t (*v43)(void);
  void (*v44)(_QWORD *__return_ptr, uint64_t, _BYTE *);
  _QWORD v45[25];
  _BYTE v46[40];
  _QWORD v47[25];
  _QWORD v48[5];
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v41 = a4;
  v42 = a5;
  v43 = a2;
  v44 = a3;
  v7 = type metadata accessor for Endianness(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  v52 = a1;
  sub_10001AA44(a1, v12);
  dispatch thunk of BinaryDecoding.container()(v49, v12, v11);
  v13 = v50;
  v14 = v51;
  sub_10009F5D0((uint64_t)v49, v50);
  v15 = sub_100112060();
  v16 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v45, &type metadata for UInt16, &type metadata for UInt16, v15, v13, v14);
  if (v5)
  {
    v17 = v52;
  }
  else
  {
    v18 = v43;
    v19 = v44;
    LOWORD(v48[0]) = v45[0];
    static Endianness.current.getter(v16);
    FixedWidthInteger.convert(to:)(v47, v10, &type metadata for UInt16, v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v20 = v47[0];
    v21 = sub_100C4DED4(v47[0]);
    if (v21 == 12)
    {
      v22 = static os_log_type_t.error.getter(v21);
      v17 = v52;
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v23 = qword_1011B7DF0;
      v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v25 = swift_allocObject(v24, 72, 7);
      *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
      LOWORD(v47[0]) = v20;
      v26 = FixedWidthInteger.data.getter(&type metadata for UInt16, v15);
      v28 = v27;
      v29 = Data.hexString.getter(v26, v27);
      v31 = v30;
      sub_10001BC14(v26, v28);
      *(_QWORD *)(v25 + 56) = &type metadata for String;
      *(_QWORD *)(v25 + 64) = sub_10001AA00();
      *(_QWORD *)(v25 + 32) = v29;
      *(_QWORD *)(v25 + 40) = v31;
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "Invalid opcode: %@", 18, 2, v25);
      swift_bridgeObjectRelease();
      v32 = sub_100784E34();
      v33 = swift_allocError(&type metadata for AccessoryPairingCommandError, v32, 0, 0);
      *v34 = 1;
      swift_willThrow(v33);
    }
    else
    {
      v35 = v21;
      v36 = v18();
      v38 = v37;
      v17 = v52;
      sub_100030784((uint64_t)v52, (uint64_t)v47);
      v48[3] = v36;
      v48[4] = v38;
      sub_100018F08(v48);
      dispatch thunk of BinaryDecodable.init(from:)(v47, v36, *(_QWORD *)(v38 + 8));
      sub_100030784((uint64_t)v48, (uint64_t)v46);
      v19(v47, v35, v46);
      v39 = v41;
      v41(v47, (uint64_t)v45);
      v39(v45, v42);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    }
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
}

uint64_t sub_10078297C(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v4[200];

  sub_100784E78(v1, (uint64_t)v4);
  return sub_1007829C8(a1);
}

uint64_t sub_1007829C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD v16[120];
  _QWORD v17[25];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for Endianness(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 448;
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryEncoding.container()(v18, v6, v7);
  sub_100781E2C();
  v9 = v8;
  v16[0] = word_100E4F57C[v8];
  static Endianness.current.getter(v8);
  v10 = sub_100112060();
  FixedWidthInteger.convert(to:)(v17, v5, &type metadata for UInt16, v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v16[0] = v17[0];
  v11 = v19;
  v12 = v20;
  sub_10009F5D0((uint64_t)v18, v19);
  v13 = v21;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v16, &type metadata for UInt16, v10, v11, v12);
  if (!v13)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

uint64_t sub_100783438(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD v16[120];
  _QWORD v17[25];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for Endianness(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0) + 464;
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryEncoding.container()(v18, v6, v7);
  sub_100BF244C();
  v9 = v8;
  v16[0] = word_100E4F57C[(char)v8];
  static Endianness.current.getter(v8);
  v10 = sub_100112060();
  FixedWidthInteger.convert(to:)(v17, v5, &type metadata for UInt16, v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v16[0] = v17[0];
  v11 = v19;
  v12 = v20;
  sub_10009F5D0((uint64_t)v18, v19);
  v13 = v21;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v16, &type metadata for UInt16, v10, v11, v12);
  if (!v13)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

void sub_100783F00(char a1)
{
  __asm { BR              X10 }
}

ValueMetadata *sub_100783F28()
{
  sub_10005A334();
  return &type metadata for AccessoryGenericPayload;
}

void sub_100783FF8(char a1)
{
  __asm { BR              X10 }
}

ValueMetadata *sub_100784020()
{
  sub_10005A334();
  return &type metadata for AccessoryGenericPayload;
}

void sub_1007840F0(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  _QWORD v8[3];
  uint64_t v9;

  sub_100030784(a2, (uint64_t)v8);
  sub_100783F00(a1);
  v4 = v3;
  v5 = v9;
  v6 = sub_10001AA44(v8, v9);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100784768);
}

void sub_100784798(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  _QWORD v8[3];
  uint64_t v9;

  sub_100030784(a2, (uint64_t)v8);
  sub_100783FF8(a1);
  v4 = v3;
  v5 = v9;
  v6 = sub_10001AA44(v8, v9);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100784E04);
}

unint64_t sub_100784E34()
{
  unint64_t result;

  result = qword_101107370;
  if (!qword_101107370)
  {
    result = swift_getWitnessTable(aY_54, &type metadata for AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_101107370);
  }
  return result;
}

uint64_t sub_100784E78(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  v5 = *(_OWORD *)(a1 + 80);
  v6 = *(_OWORD *)(a1 + 96);
  v7 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v7;
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 96) = v6;
  v8 = *(_OWORD *)(a1 + 144);
  v9 = *(_OWORD *)(a1 + 160);
  v10 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 192) = *(_QWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 160) = v9;
  *(_OWORD *)(a2 + 176) = v10;
  *(_OWORD *)(a2 + 144) = v8;
  return a2;
}

double sub_100784EC0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  result = 1.28822975e-231;
  *(_OWORD *)(a1 + 176) = xmmword_100E4F5A0;
  *(_QWORD *)(a1 + 192) = 0x2000000000000000;
  return result;
}

_QWORD *sub_100784F10(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

_QWORD *sub_100784F78(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[22] | 0x3000000000000000;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

double sub_100784FE0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  result = 1.28822975e-231;
  *(_OWORD *)(a1 + 176) = xmmword_100E4F5A0;
  *(_QWORD *)(a1 + 192) = 0x2000000000000000;
  return result;
}

_QWORD *sub_100785030(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

_QWORD *sub_10078509C(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

_QWORD *sub_100785108(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

_QWORD *sub_100785170(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] | 0x3000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v7;
  result[24] = v6;
  return result;
}

_QWORD *sub_1007851D4(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v7;
  result[24] = v6;
  return result;
}

_QWORD *sub_10078523C(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v7;
  result[24] = v6;
  return result;
}

_QWORD *sub_1007852A4(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[13] = v2;
  result[15] = v3;
  result[17] = v4;
  result[19] = v5;
  result[22] = v6;
  result[24] = v7;
  return result;
}

double sub_100785308(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_100E4F5A0;
  *(_QWORD *)(a1 + 192) = 0x2000000000000000;
  return result;
}

uint64_t sub_100785338(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a6, a7);
    sub_10001BC14(a8, a9);
    return sub_10001BC14(a10, a11);
  }
  return result;
}

unint64_t sub_1007853C4()
{
  unint64_t result;

  result = qword_101107390;
  if (!qword_101107390)
  {
    result = swift_getWitnessTable(byte_100E698BC, &type metadata for AirPodsPairingEligibilityDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101107390);
  }
  return result;
}

unint64_t sub_100785408()
{
  unint64_t result;

  result = qword_101107398;
  if (!qword_101107398)
  {
    result = swift_getWitnessTable(byte_100E68850, &type metadata for AirPodsPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101107398);
  }
  return result;
}

uint64_t sub_10078544C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    return sub_10001BC14(a5, a6);
  }
  return result;
}

uint64_t sub_1007854A4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a7, a8);
    sub_10001EF3C(a9, a10);
    return sub_10001EF3C(a11, a12);
  }
  return result;
}

unint64_t sub_100785548()
{
  unint64_t result;

  result = qword_1011073A0;
  if (!qword_1011073A0)
  {
    result = swift_getWitnessTable(byte_100E6A5F8, &type metadata for AirPodsSendPairingDataCommandPayloadv3);
    atomic_store(result, (unint64_t *)&qword_1011073A0);
  }
  return result;
}

uint64_t sub_10078558C(uint64_t a1)
{
  sub_1007855F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192));
  return a1;
}

uint64_t sub_1007855F4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,unint64_t a25)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a7, a8);
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    sub_10001BC14(a19, a20);
    sub_10001BC14(a21, a22);
    return sub_10001BC14(a24, a25);
  }
  return result;
}

unint64_t sub_100785730()
{
  unint64_t result;

  result = qword_1011073A8;
  if (!qword_1011073A8)
  {
    result = swift_getWitnessTable(byte_100E527C8, &type metadata for AirPodsSendPairingDataCommandPayloadv1);
    atomic_store(result, (unint64_t *)&qword_1011073A8);
  }
  return result;
}

uint64_t sub_100785774(uint64_t a1)
{
  sub_1007857DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176));
  return a1;
}

uint64_t sub_1007857DC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a7, a8);
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    sub_10001BC14(a19, a20);
    return sub_10001BC14(a22, a23);
  }
  return result;
}

uint64_t sub_100785900(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a7, a8);
    return sub_10001EF3C(a9, a10);
  }
  return result;
}

uint64_t sub_10078598C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    return sub_10001BC14(a3, a4);
  }
  return result;
}

uint64_t sub_1007859C8(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 192) >> 58) & 0xC | (*(_QWORD *)(a1 + 176) >> 60) & 3;
  if (v1 <= 8)
    return v1;
  else
    return (*(_DWORD *)a1 + 9);
}

uint64_t sub_1007859F4()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_10001BC14(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  sub_10001BC14(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100785A38()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100785A6C()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  sub_10001BC14(v0[6], v0[7]);
  sub_10001BC14(v0[8], v0[9]);
  v1 = v0[11];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[10], v1);
  v2 = v0[13];
  if (v2 >> 60 != 15)
    sub_10001BC14(v0[12], v2);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100785AD8()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  return swift_deallocObject(v0, 216, 7);
}

uint64_t *sub_100785B54(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[13];
  v14 = a1[12];
  v15 = a1[15];
  v16 = a1[14];
  v17 = a1[17];
  v18 = a1[16];
  v19 = a1[19];
  v22 = a1[20];
  v20 = a1[18];
  v21 = a1[21];
  v24 = a1[23];
  v23 = a1[24];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v22, v21);
  sub_10001BBBC(v24, v23);
  return a1;
}

uint64_t sub_100785C84()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192));
  return swift_deallocObject(v0, 200, 7);
}

uint64_t *sub_100785CF8(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[13];
  v14 = a1[12];
  v15 = a1[15];
  v16 = a1[14];
  v17 = a1[17];
  v18 = a1[16];
  v19 = a1[19];
  v22 = a1[21];
  v20 = a1[18];
  v21 = a1[22];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v14, v13);
  sub_10001BBBC(v16, v15);
  sub_10001BBBC(v18, v17);
  sub_10001BBBC(v20, v19);
  sub_10001BBBC(v22, v21);
  return a1;
}

uint64_t sub_100785E04(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 192) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 176) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 192) = v1;
  return result;
}

uint64_t sub_100785E20()
{
  _QWORD *v0;
  unint64_t v1;

  sub_10001BC14(v0[2], v0[3]);
  sub_10001BC14(v0[4], v0[5]);
  sub_10001BC14(v0[6], v0[7]);
  sub_10001BC14(v0[8], v0[9]);
  v1 = v0[11];
  if (v1 >> 60 != 15)
    sub_10001BC14(v0[10], v1);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100785E74()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100785EA0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AirPodsSendPairingDataCommandPayloadv3(a2, a1);
  return a2;
}

double sub_100785EDC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  result = 1.49166815e-154;
  *(_OWORD *)(a1 + 176) = xmmword_100E2D3C0;
  *(_QWORD *)(a1 + 192) = 0x2000000000000000;
  return result;
}

_QWORD *sub_100785F2C(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

_QWORD *sub_100785FA4(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

_QWORD *sub_100786018(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] | 0x3000000000000000;
  v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

_QWORD *sub_10078608C(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

_QWORD *sub_100786104(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

_QWORD *sub_10078617C(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

_QWORD *sub_1007861F0(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[22] | 0x3000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v8;
  result[24] = v7;
  return result;
}

_QWORD *sub_100786260(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v8;
  result[24] = v7;
  return result;
}

_QWORD *sub_1007862D4(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[22] & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v8;
  result[24] = v7;
  return result;
}

_QWORD *sub_100786348(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
  v2 = result[11] & 0xCFFFFFFFFFFFFFFFLL;
  v3 = result[13] & 0xCFFFFFFFFFFFFFFFLL;
  v4 = result[15] & 0xCFFFFFFFFFFFFFFFLL;
  v5 = result[17] & 0xCFFFFFFFFFFFFFFFLL;
  v6 = result[19] & 0xCFFFFFFFFFFFFFFFLL;
  v7 = result[22] & 0xCFFFFFFFFFFFFFFFLL;
  v8 = result[24] & 0xCFFFFFFFFFFFFFFFLL;
  result[1] &= 0xCFFFFFFFFFFFFFFFLL;
  result[3] = v1;
  result[11] = v2;
  result[13] = v3;
  result[15] = v4;
  result[17] = v5;
  result[19] = v6;
  result[22] = v7;
  result[24] = v8;
  return result;
}

double sub_1007863B8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_100E2D3C0;
  *(_QWORD *)(a1 + 192) = 0x2000000000000000;
  return result;
}

uint64_t sub_1007863E8(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    return sub_10001BC14(a7, a8);
  }
  return result;
}

uint64_t sub_10078645C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    sub_10001BC14(a7, a8);
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    return sub_10001BC14(a13, a14);
  }
  return result;
}

uint64_t destroy for AirPodsPairingCommand1_0(uint64_t a1)
{
  return sub_10078658C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           (void (*)(void))sub_10001BC14,
           (uint64_t (*)(void))sub_10001EF3C);
}

uint64_t sub_10078658C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,unint64_t a25,void (*a26)(void),uint64_t (*a27)(void))
{
  uint64_t (*v33)(void);
  uint64_t result;
  void (*v35)(void);

  v33 = (uint64_t (*)(void))a26;
  switch((a25 >> 58) & 0xC | (a23 >> 60) & 3)
  {
    case 0uLL:
      v35 = a26;
      a26();
      goto LABEL_10;
    case 1uLL:
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      goto LABEL_7;
    case 2uLL:
    case 3uLL:
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      v33 = (uint64_t (*)(void))a26;
      goto LABEL_11;
    case 4uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a26)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a26)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a26)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a26)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a26)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a26)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a26)(a21, a22);
      goto LABEL_10;
    case 5uLL:
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a26)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a27)(a9, a10);
LABEL_7:
      v33 = a27;
      goto LABEL_11;
    case 6uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      goto LABEL_10;
    case 7uLL:
      goto LABEL_11;
    case 8uLL:
      v35 = a26;
      a26();
      ((void (*)(uint64_t, uint64_t))a26)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a26)(a6, a7);
      ((void (*)(uint64_t, uint64_t))a26)(a8, a9);
LABEL_10:
      v33 = (uint64_t (*)(void))v35;
LABEL_11:
      result = v33();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for AirPodsPairingCommand1_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v3 = a2[7];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  v23 = a2[19];
  v24 = a2[20];
  v25 = a2[21];
  v26 = a2[22];
  v27 = a2[23];
  v28 = a2[24];
  v4 = a2[8];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  sub_10078658C(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    (void (*)(void))sub_10001BBBC,
    (uint64_t (*)(void))sub_10001BD08);
  *a1 = v5;
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v9;
  a1[5] = v10;
  a1[6] = v11;
  a1[7] = v3;
  a1[8] = v4;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  return a1;
}

uint64_t assignWithCopy for AirPodsPairingCommand1_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v3 = a2[7];
  v30 = a2[9];
  v31 = a2[10];
  v32 = a2[11];
  v33 = a2[12];
  v34 = a2[13];
  v35 = a2[14];
  v36 = a2[15];
  v37 = a2[16];
  v38 = a2[17];
  v39 = a2[18];
  v40 = a2[19];
  v41 = a2[20];
  v42 = a2[21];
  v43 = a2[22];
  v44 = a2[23];
  v45 = a2[24];
  v4 = a2[8];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  v11 = a2[6];
  sub_10078658C(*a2, v6, v7, v8, v9, v10, v11, v3, v4, v30, v31, v32, v33, v34, v35, v36, v37, v38, v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    (void (*)(void))sub_10001BBBC,
    (uint64_t (*)(void))sub_10001BD08);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v3;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v30;
  *(_QWORD *)(a1 + 80) = v31;
  *(_QWORD *)(a1 + 88) = v32;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v33;
  *(_QWORD *)(a1 + 104) = v34;
  *(_QWORD *)(a1 + 112) = v35;
  *(_QWORD *)(a1 + 120) = v36;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v37;
  *(_QWORD *)(a1 + 136) = v38;
  *(_QWORD *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v41;
  *(_QWORD *)(a1 + 168) = v42;
  *(_QWORD *)(a1 + 176) = v43;
  *(_QWORD *)(a1 + 184) = v44;
  v28 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v45;
  sub_10078658C(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    (void (*)(void))sub_10001BC14,
    (uint64_t (*)(void))sub_10001EF3C);
  return a1;
}

__n128 initializeWithTake for AirPodsSendPairingDataCommandPayloadv3(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AirPodsPairingCommand1_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = *(_QWORD *)(a2 + 192);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 176);
  v20 = *(_QWORD *)(a1 + 192);
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v21;
  v22 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v22;
  v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v23;
  v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v24;
  v25 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v25;
  v26 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 192) = v3;
  sub_10078658C(v4, v6, v5, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    (void (*)(void))sub_10001BC14,
    (uint64_t (*)(void))sub_10001EF3C);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsPairingCommand1_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFFF7 && *(_BYTE *)(a1 + 200))
    return (*(_DWORD *)a1 + 65527);
  v3 = ((((*(_QWORD *)(a1 + 192) >> 46) & 0xC000 | *(_WORD *)(a1 + 182) & 0x3FFF) >> 12) | (16
                                                                                          * ((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 111) & 0x30 | (*(_QWORD *)(a1 + 120) >> 54) & 0xC0 | (*(_QWORD *)(a1 + 136) >> 52) & 0x300 | (*(_QWORD *)(a1 + 152) >> 50) & 0xC00))) ^ 0xFFFF;
  if (v3 >= 0xFFF6)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingCommand1_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0xFFF6)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 65527;
    if (a3 >= 0xFFF7)
      *(_BYTE *)(result + 200) = 1;
  }
  else
  {
    if (a3 >= 0xFFF7)
      *(_BYTE *)(result + 200) = 0;
    if (a2)
    {
      v3 = ((unsigned __int16)-(__int16)a2 >> 4) & 0xFFF | ((unsigned __int16)-(__int16)a2 << 12);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((unsigned __int16)-(__int16)a2 >> 4) & 3) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)(result + 64) = 0u;
      *(_OWORD *)(result + 80) = 0u;
      *(_QWORD *)(result + 96) = 0;
      *(_QWORD *)(result + 104) = (v3 << 56) & 0x3000000000000000;
      *(_QWORD *)(result + 112) = 0;
      *(_QWORD *)(result + 120) = (v3 << 54) & 0x3000000000000000;
      *(_QWORD *)(result + 128) = 0;
      *(_QWORD *)(result + 136) = (v3 << 52) & 0x3000000000000000;
      *(_QWORD *)(result + 144) = 0;
      *(_QWORD *)(result + 152) = (v3 << 50) & 0x3000000000000000;
      *(_QWORD *)(result + 160) = 0;
      *(_QWORD *)(result + 168) = 0;
      *(_QWORD *)(result + 176) = (v3 << 48) & 0x3000000000000000;
      *(_QWORD *)(result + 184) = 0;
      *(_QWORD *)(result + 192) = (v3 << 46) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_100786EE4(uint64_t result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    v2 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
    v3 = *(_QWORD *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
    v4 = *(_QWORD *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
    v5 = *(_QWORD *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
    v6 = *(_QWORD *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
    v7 = *(_QWORD *)(result + 176) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    v8 = *(_QWORD *)(result + 192) & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 2) & 3) << 60);
    *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(_QWORD *)(result + 24) = v2;
    *(_QWORD *)(result + 104) = v3;
    *(_QWORD *)(result + 120) = v4;
    *(_QWORD *)(result + 136) = v5;
    *(_QWORD *)(result + 152) = v6;
    *(_QWORD *)(result + 176) = v7;
    *(_QWORD *)(result + 192) = v8;
  }
  else
  {
    *(_QWORD *)result = a2 - 9;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 176) = xmmword_100E4F5A0;
    *(_QWORD *)(result + 192) = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingCommand1_0()
{
  return &type metadata for AirPodsPairingCommand1_0;
}

uint64_t sub_100786FB4@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  _QWORD v43[2];
  char v44[24];
  __int128 v45;
  __int128 v46;

  v42 = a1;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v40 = (char *)&v38 - v6;
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - v7;
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v39 = (char *)&v38 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v38 - v16;
  MACAddress.init(data:type:)(0, 0x6000000000000, 1);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  result = v18(v8, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    return result;
  }
  v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v20(v17, v8, v9);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
  v23 = v22;
  v24 = (_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData, v44, 0, 0);
  v25 = *v24;
  if (*(_QWORD *)(*v24 + 16))
  {
    swift_bridgeObjectRetain(*v24);
    v26 = sub_100518DA0(v21, v23);
    if ((v27 & 1) != 0)
    {
      sub_100016A30(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&v45);
    }
    else
    {
      v45 = 0u;
      v46 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = 0u;
    v46 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v46 + 1))
  {
    if ((swift_dynamicCast(v43, &v45, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v28 = v43[0];
      v38 = v43[1];
      v29 = *v24;
      if (*(_QWORD *)(*v24 + 16))
      {
        swift_bridgeObjectRetain(*v24);
        v30 = sub_100518DA0(0xD000000000000018, 0x8000000100EE33F0);
        if ((v31 & 1) != 0)
        {
          sub_100016A30(*(_QWORD *)(v29 + 56) + 32 * v30, (uint64_t)&v45);
        }
        else
        {
          v45 = 0u;
          v46 = 0u;
        }
        swift_bridgeObjectRelease();
        if (*((_QWORD *)&v46 + 1))
        {
          if ((swift_dynamicCast(v43, &v45, (char *)&type metadata for Any + 8, &type metadata for MACAddress.AddressType, 6) & 1) != 0)
          {
            v34 = (uint64_t)v40;
            MACAddress.init(data:type:)(v28, v38, LOBYTE(v43[0]));
            v35 = v39;
            v20(v39, v17, v9);
            if (v18((char *)v34, 1, v9) == 1)
            {
              v36 = v42;
              v37 = v35;
LABEL_26:
              v20(v36, v37, v9);
              return sub_100004048(v34, (uint64_t *)&unk_1010F9890);
            }
            (*(void (**)(char *, uint64_t))(v10 + 8))(v35, v9);
LABEL_28:
            v32 = v42;
            v33 = (char *)v34;
            return ((uint64_t (*)(char *, char *, uint64_t))v20)(v32, v33, v9);
          }
LABEL_24:
          v34 = (uint64_t)v41;
          MACAddress.init(data:type:)(v28, v38, 1);
          v20(v13, v17, v9);
          if (v18((char *)v34, 1, v9) == 1)
          {
            v36 = v42;
            v37 = v13;
            goto LABEL_26;
          }
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          goto LABEL_28;
        }
      }
      else
      {
        v45 = 0u;
        v46 = 0u;
      }
      sub_100004048((uint64_t)&v45, (uint64_t *)&unk_1010F6390);
      goto LABEL_24;
    }
  }
  else
  {
    sub_100004048((uint64_t)&v45, (uint64_t *)&unk_1010F6390);
  }
  v32 = v42;
  v33 = v17;
  return ((uint64_t (*)(char *, char *, uint64_t))v20)(v32, v33, v9);
}

id sub_100787394@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "maximumWriteValueLengthForType:", 1);
  *a2 = result;
  return result;
}

id sub_1007873D8()
{
  void *v0;
  uint64_t v1;
  objc_super v3;

  if (qword_1010EA648 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v1 = type metadata accessor for Logger(0);
  sub_10001A9E8(v1, (uint64_t)qword_1011B8590);
  sub_1007885B0(0x74696E696564, 0xE600000000000000);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for Peripheral(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1007875F4()
{
  return type metadata accessor for Peripheral(0);
}

uint64_t type metadata accessor for Peripheral(uint64_t a1)
{
  uint64_t result;

  result = qword_1011073F0;
  if (!qword_1011073F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Peripheral);
  return result;
}

void sub_100787638()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)&v0[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  v6 = (char *)objc_msgSend(v5, "delegate");
  if (!v6 || (v7 = v6, swift_unknownObjectRelease(v6), v7 != v0))
  {
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B8590);
    v19 = v0;
    v9 = Logger.logObject.getter(v19);
    v10 = static os_log_type_t.fault.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v21 = v12;
      *(_DWORD *)v11 = 136446210;
      v18 = v11 + 4;
      v13 = objc_msgSend(v5, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v13);

      v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v1, v14);
      v17 = v16;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v20 = sub_100016940(v15, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v18, v11 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "verifyIntegrity: Peripheral has mismatched delegate! %{public}s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1007878D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v11[24];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v8 = a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen, v11, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess(v11);
}

uint64_t sub_1007879A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  ObjectType = swift_getObjectType(v1);
  sub_100787638();
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  v7 = v1;
  v8 = a1;
  v9 = ObjectType;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DCCC, &v6, v4, &type metadata for () + 1, &type metadata for () + 1);
}

uint64_t sub_100787A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE v10[24];
  _QWORD v11[3];
  _QWORD *v12;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataDeviceAddress);
  v4 = v3;
  v12 = &type metadata for Data;
  v11[0] = MACAddress.data.getter(v2);
  v11[1] = v5;
  v6 = a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData;
  swift_beginAccess(v6, v10, 33, 0);
  sub_1000FECD8((uint64_t)v11, v2, v4);
  v7 = swift_endAccess(v10);
  v8 = MACAddress.type.getter(v7);
  v12 = &type metadata for MACAddress.AddressType;
  LOBYTE(v11[0]) = v8 & 1;
  swift_beginAccess(v6, v10, 33, 0);
  sub_1000FECD8((uint64_t)v11, 0xD000000000000018, 0x8000000100EE33F0);
  return swift_endAccess(v10);
}

uint64_t sub_100787B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
  *v3 = a2;
  v3[1] = a3;
  swift_bridgeObjectRetain(a3);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_100787B60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int64_t v35;
  _BYTE v37[24];
  __int128 v38;
  _OWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *v43;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  v35 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v6 << 6);
LABEL_8:
      v10 = *(_QWORD *)(a1 + 56);
      v11 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v9);
      v12 = v11[1];
      *(_QWORD *)&v38 = *v11;
      *((_QWORD *)&v38 + 1) = v12;
      sub_100016A30(v10 + 32 * v9, (uint64_t)v39);
      swift_bridgeObjectRetain(v12);
      goto LABEL_27;
    }
    v13 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_42;
    if (v13 < v35)
    {
      v14 = *(_QWORD *)(v34 + 8 * v13);
      if (v14)
        goto LABEL_12;
      v15 = v6 + 2;
      ++v6;
      if (v13 + 1 < v35)
      {
        v14 = *(_QWORD *)(v34 + 8 * v15);
        if (v14)
          goto LABEL_15;
        v6 = v13 + 1;
        if (v13 + 2 < v35)
        {
          v14 = *(_QWORD *)(v34 + 8 * (v13 + 2));
          if (v14)
          {
            v13 += 2;
            goto LABEL_12;
          }
          v15 = v13 + 3;
          v6 = v13 + 2;
          if (v13 + 3 < v35)
            break;
        }
      }
    }
LABEL_26:
    v4 = 0;
    memset(v39, 0, sizeof(v39));
    v38 = 0u;
LABEL_27:
    sub_10078B93C((uint64_t)&v38, (uint64_t)&v40);
    v16 = v41;
    if (!v41)
      return swift_release();
    v17 = v40;
    swift_beginAccess(v5, v37, 33, 0);
    sub_10010F90C(&v42, &v38);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v43 = (_QWORD *)*v5;
    v19 = v43;
    *v5 = 0x8000000000000000;
    v21 = sub_100518DA0(v17, v16);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v25 = v20;
    if (v19[3] >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v28 = v43;
        if ((v20 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100A9ACD0();
        v28 = v43;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100A86FA4(v24, isUniquelyReferenced_nonNull_native);
      v26 = sub_100518DA0(v17, v16);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_44;
      v21 = v26;
      v28 = v43;
      if ((v25 & 1) != 0)
      {
LABEL_4:
        v7 = (_QWORD *)(v28[7] + 32 * v21);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
        sub_10010F90C(&v38, v7);
        goto LABEL_5;
      }
    }
    v28[(v21 >> 6) + 8] |= 1 << v21;
    v29 = (uint64_t *)(v28[6] + 16 * v21);
    *v29 = v17;
    v29[1] = v16;
    sub_10010F90C(&v38, (_OWORD *)(v28[7] + 32 * v21));
    v30 = v28[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_41;
    v28[2] = v32;
    swift_bridgeObjectRetain(v16);
LABEL_5:
    *v5 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess(v37);
  }
  v14 = *(_QWORD *)(v34 + 8 * v15);
  if (v14)
  {
LABEL_15:
    v13 = v15;
LABEL_12:
    v4 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v13 << 6);
    v6 = v13;
    goto LABEL_8;
  }
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v35)
    {
      v6 = v35 - 1;
      goto LABEL_26;
    }
    v14 = *(_QWORD *)(v34 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_12;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100787F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  unint64_t v13;
  Swift::String v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[10];
  id v20[2];
  uint64_t v21;
  unint64_t v22;

  v1 = v0;
  v2 = sub_100006204(&qword_1011074C8, type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for NSObject);
  ObjectType = swift_getObjectType(v0);
  v21 = v0;
  v4 = CustomStringConvertible.typeDescription.getter(ObjectType, v2);
  v6 = v5;
  v7 = type metadata accessor for Peripheral(0);
  v8 = CustomStringConvertible<>.addressDescription.getter(v7, v2);
  v10 = v9;
  v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "delegate"));
  if (v11)
  {
    v12 = v11;
    v21 = 30768;
    v22 = 0xE200000000000000;
    v20[0] = v11;
    v13 = sub_1000331DC();
    v14._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v20, 16, 0, &type metadata for Int, v13);
    String.append(_:)(v14);
    swift_unknownObjectRelease(v12);
    v11 = (id)swift_bridgeObjectRelease();
    v15 = v22;
  }
  else
  {
    v15 = 0xE300000000000000;
  }
  __chkstk_darwin(v11);
  v19[2] = v4;
  v19[3] = v6;
  v19[4] = v8;
  v19[5] = v10;
  v19[6] = v1;
  v19[7] = v16;
  v19[8] = v15;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DCE8, v19, v17, &type metadata for () + 1, &type metadata for String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21;
}

void sub_1007880CC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  id v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String v27;
  id v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  Swift::String v60;
  unint64_t v61;
  _QWORD *v62;
  Swift::String v63;
  uint64_t v64;
  Swift::String v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;

  v63._countAndFlagsBits = a3;
  v65._countAndFlagsBits = a6;
  v65._object = a7;
  v63._object = a4;
  v62 = a8;
  v67 = type metadata accessor for MACAddress(0);
  v72 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v66 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v64 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = 0;
  v69 = 0xE000000000000000;
  _StringGuts.grow(_:)(80);
  v70 = v68;
  v71 = v69;
  v19._countAndFlagsBits = 60;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = a1;
  v20._object = a2;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 8250;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  String.append(_:)(v63);
  v22._countAndFlagsBits = 32;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = *(void **)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
  v24 = objc_msgSend(v23, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v27._countAndFlagsBits = 0x796C7265646E7520;
  v27._object = (void *)0xED0000203A676E69;
  String.append(_:)(v27);
  v28 = v23;
  v29 = objc_msgSend(v28, "description");
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  v33._countAndFlagsBits = v30;
  v33._object = v32;
  String.append(_:)(v33);

  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0x6167656C65645B20;
  v34._object = (void *)0xEC000000203A6574;
  String.append(_:)(v34);
  String.append(_:)(v65);
  v35._object = (void *)0xEC000000203A6E65;
  v35._countAndFlagsBits = 0x65537473616C205DLL;
  String.append(_:)(v35);
  v36 = a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen;
  v37 = swift_beginAccess(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen, &v68, 0, 0);
  v38 = v64;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v64 + 16))(v14, v36, v12, v37);
  v39 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v39);
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v12);
  v41._countAndFlagsBits = 0x203A43414D20;
  v41._object = (void *)0xE600000000000000;
  String.append(_:)(v41);
  v42 = v66;
  sub_100786FB4(v66);
  v43 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v44 = v67;
  v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v67, v43);
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v42, v44);
  v46._countAndFlagsBits = 0x203A656D616E20;
  v46._object = (void *)0xE700000000000000;
  String.append(_:)(v46);
  v47 = *(_QWORD *)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
  if (v47)
  {
    v48 = *(_QWORD *)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
    v49 = *(void **)(a5 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
LABEL_5:
    swift_bridgeObjectRetain(v47);
    goto LABEL_6;
  }
  v50 = objc_msgSend(v28, "name");
  if (v50)
  {
    v51 = v50;
    v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v49 = v52;

    v47 = 0;
    goto LABEL_5;
  }
  v48 = 0;
  v49 = (void *)0xE000000000000000;
LABEL_6:
  v53._countAndFlagsBits = v48;
  v53._object = v49;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 0x203A6570797420;
  v54._object = (void *)0xE700000000000000;
  String.append(_:)(v54);
  v55 = objc_msgSend(v28, "connectedTransport");
  if (v55 == 2)
  {
    v56 = 0xEA00000000007967;
    v57 = 0x72656E45776F6C2ELL;
  }
  else
  {
    v56 = 0xE800000000000000;
    if (v55 == 1)
      v57 = 0x63697373616C632ELL;
    else
      v57 = 0x6E776F6E6B6E752ELL;
  }
  v58 = v62;
  v59 = v56;
  String.append(_:)(*(Swift::String *)&v57);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 62;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  v61 = v71;
  *v58 = v70;
  v58[1] = v61;
}

void sub_1007885B0(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t ObjectType;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  Swift::String v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  id v56;
  void *v57;
  unint64_t v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  os_log_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t v85[2];

  v73 = a1;
  v4 = type metadata accessor for MACAddress(0);
  v80 = *(_QWORD *)(v4 - 8);
  v81 = v4;
  __chkstk_darwin(v4);
  v79 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v77 = *(_QWORD *)(v6 - 8);
  v78 = v6;
  __chkstk_darwin(v6);
  v76 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (_QWORD *)type metadata accessor for UUID(0);
  v74 = *(v8 - 1);
  v75 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100006204(&qword_1011074C8, type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for NSObject);
  ObjectType = swift_getObjectType(v2);
  v83 = (uint64_t)v2;
  v71 = CustomStringConvertible.typeDescription.getter(ObjectType, v11);
  v14 = v13;
  v15 = type metadata accessor for Peripheral(0);
  v72 = CustomStringConvertible<>.addressDescription.getter(v15, v11);
  v17 = v16;
  v18 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  v19 = objc_msgSend(v18, "delegate");
  if (v19)
  {
    v20 = v19;
    v83 = 30768;
    v84[0] = 0xE200000000000000;
    v85[0] = (uint64_t)v19;
    v21 = sub_1000331DC();
    v22._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(v85, 16, 0, &type metadata for Int, v21);
    String.append(_:)(v22);
    swift_unknownObjectRelease(v20);
    swift_bridgeObjectRelease();
    v24 = v83;
    v23 = v84[0];
  }
  else
  {
    v23 = 0xE300000000000000;
    v24 = 7104878;
  }
  v25 = v2;
  swift_bridgeObjectRetain_n(a2, 2);
  v26 = v25;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v23);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (!os_log_type_enabled(v28, (os_log_type_t)v29))
  {
    swift_bridgeObjectRelease_n(v23, 2);

    swift_bridgeObjectRelease_n(v17, 2);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease_n(a2, 2);

    return;
  }
  v68 = v29;
  v69 = v28;
  v30 = swift_slowAlloc(122, -1);
  v70 = (_QWORD *)swift_slowAlloc(8, -1);
  v67 = swift_slowAlloc(288, -1);
  v85[0] = v67;
  *(_DWORD *)v30 = 136317955;
  swift_bridgeObjectRetain(a2);
  v83 = sub_100016940(v73, a2, v85);
  v73 = v24;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 4, v30 + 12);
  swift_bridgeObjectRelease_n(a2, 3);
  *(_WORD *)(v30 + 12) = 2080;
  swift_bridgeObjectRetain(v14);
  v83 = sub_100016940(v71, v14, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 14, v30 + 22);
  swift_bridgeObjectRelease_n(v14, 3);
  *(_WORD *)(v30 + 22) = 2082;
  swift_bridgeObjectRetain(v17);
  v83 = sub_100016940(v72, v17, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 24, v30 + 32);
  swift_bridgeObjectRelease_n(v17, 3);
  *(_WORD *)(v30 + 32) = 2082;
  v31 = objc_msgSend(v18, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v31);

  v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v33 = v75;
  v34 = dispatch thunk of CustomStringConvertible.description.getter(v75, v32);
  v36 = v35;
  (*(void (**)(char *, id))(v74 + 8))(v10, v33);
  v83 = sub_100016940(v34, v36, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 34, v30 + 42);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 42) = 2112;
  v83 = (uint64_t)v18;
  v75 = v18;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 44, v30 + 52);
  *v70 = v18;

  *(_WORD *)(v30 + 52) = 2082;
  swift_bridgeObjectRetain(v23);
  v83 = sub_100016940(v73, v23, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v30 + 54, v30 + 62);
  swift_bridgeObjectRelease_n(v23, 3);
  *(_WORD *)(v30 + 62) = 2082;
  v37 = &v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen];
  v38 = swift_beginAccess(&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen], &v83, 0, 0);
  v40 = v76;
  v39 = v77;
  v41 = v78;
  (*(void (**)(char *, char *, uint64_t, __n128))(v77 + 16))(v76, v37, v78, v38);
  v42 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
  v45 = v44;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
  v82 = sub_100016940(v43, v45, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 64, v30 + 72);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 72) = 2160;
  v82 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 74, v30 + 82);
  *(_WORD *)(v30 + 82) = 2081;
  v46 = v79;
  sub_100786FB4(v79);
  v47 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v48 = v81;
  v49 = dispatch thunk of CustomStringConvertible.description.getter(v81, v47);
  v51 = v50;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v46, v48);
  v82 = sub_100016940(v49, v51, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 84, v30 + 92);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 92) = 2160;
  v82 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 94, v30 + 102);
  *(_WORD *)(v30 + 102) = 2081;
  v52 = *(_QWORD *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
  if (v52)
  {
    v53 = *(_QWORD *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
    v54 = *(_QWORD *)&v26[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8];
    v55 = v75;
  }
  else
  {
    v55 = v75;
    v56 = objc_msgSend(v75, "name");
    if (!v56)
    {
      v53 = 0;
      v54 = 0xE000000000000000;
      goto LABEL_11;
    }
    v57 = v56;
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v54 = v58;

    v52 = 0;
  }
  swift_bridgeObjectRetain(v52);
LABEL_11:
  v82 = sub_100016940(v53, v54, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 104, v30 + 112);

  swift_bridgeObjectRelease();
  *(_WORD *)(v30 + 112) = 2082;
  v59 = objc_msgSend(v55, "connectedTransport");
  if (v59 == 2)
  {
    v60 = 0xEA00000000007967;
    v61 = 0x72656E45776F6C2ELL;
  }
  else
  {
    v60 = 0xE800000000000000;
    if (v59 == 1)
      v61 = 0x63697373616C632ELL;
    else
      v61 = 0x6E776F6E6B6E752ELL;
  }
  v62 = v67;
  v63 = v70;
  v82 = sub_100016940(v61, v60, v85);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v30 + 114, v30 + 122);

  swift_bridgeObjectRelease();
  v64 = v69;
  _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v68, "%s <%s: %{public}s %{public}s underlying: %@ [delegate: %{public}s] lastSeen: %{public}s MAC: %{private,mask.hash}s name: %{private,mask.hash}s type: %{public}s>", (uint8_t *)v30, 0x7Au);
  v65 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
  swift_arrayDestroy(v63, 1, v65);
  swift_slowDealloc(v63, -1, -1);
  swift_arrayDestroy(v62, 9, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v62, -1, -1);
  swift_slowDealloc(v30, -1, -1);

}

uint64_t sub_100788E88@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  _BYTE v12[24];
  __int128 v13;
  __int128 v14;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBAdvertisementDataIsConnectable);
  v6 = v5;
  v7 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData);
  swift_beginAccess(v7, v12, 0, 0);
  v8 = *v7;
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain(v8);
    v9 = sub_100518DA0(v4, v6);
    if ((v10 & 1) != 0)
    {
      sub_100016A30(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v13);
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = 0u;
    v14 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v14 + 1))
  {
    result = sub_100004048((uint64_t)&v13, (uint64_t *)&unk_1010F6390);
    goto LABEL_11;
  }
  result = swift_dynamicCast(a2, &v13, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
  if ((result & 1) == 0)
LABEL_11:
    *a2 = 2;
  return result;
}

uint64_t sub_100788FAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return swift_bridgeObjectRetain(v4);
}

void sub_10078900C(uint64_t a1, uint64_t a2, uint64_t a3, Class isa)
{
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  v6 = *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DCB0, v8, v6, &type metadata for () + 1, &type metadata for () + 1);
  v7 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
  if (isa)
  {
    sub_10000F4A0(0, (unint64_t *)&qword_1011074C0, CBUUID_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
  }
  objc_msgSend(v7, "discoverServices:", isa);

}

uint64_t sub_1007890C4(char *a1, void (*a2)(_QWORD *), uint64_t a3)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  char *v11;
  uint64_t v13;
  _QWORD v14[5];
  __int16 v15;

  v4 = &a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  if (*(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise])
  {
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B8590);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Discovery already in flight!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v14[0] = a1;
    v15 = 259;
    v11 = a1;
    a2(v14);
    return sub_100004048((uint64_t)v14, &qword_1011074A0);
  }
  else
  {
    v13 = *((_QWORD *)v4 + 1);
    *(_QWORD *)v4 = a2;
    *((_QWORD *)v4 + 1) = a3;
    swift_retain();
    return sub_10001D8A8(0, v13);
  }
}

uint64_t sub_10078921C(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  Class isa;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  void (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  __n128 v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v41[5];
  _QWORD *v42;

  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v37 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = v1;
  sub_100787638();
  v15 = *(_QWORD *)(a1 + 16);
  v16 = _swiftEmptyArrayStorage;
  if (!v15)
  {
LABEL_13:
    v30 = v37;
    sub_100787638();
    v31 = swift_allocObject(&unk_1010919D0, 32, 7);
    *(_QWORD *)(v31 + 16) = v30;
    *(_QWORD *)(v31 + 24) = v16;
    v32 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v33 = v30;
    v34 = swift_bridgeObjectRetain(v16);
    v41[0] = Future.init(_:)(sub_10078DC5C, v31, v34);
    v35 = sub_10078DC64();
    v36 = Publisher.eraseToAnyPublisher()(v32, v35);
    swift_bridgeObjectRelease();
    swift_release();
    return v36;
  }
  v42 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v15);
  v17 = a1 + 32;
  v39 = 0x8000000100EE33C0;
  v40 = 0x8000000100EC6610;
  v38 = 0x8000000100EE3390;
  while (1)
  {
    sub_100030784(v17, (uint64_t)v41);
    v23 = sub_10001AA44(v41, v41[3]);
    if (*(_BYTE *)v23)
      break;
    UUID.init(uuidString:)(0xD000000000000024, v40);
    v24 = type metadata accessor for UUID(0);
    v28 = *(_QWORD *)(v24 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v11, 1, v24);
    if ((_DWORD)result == 1)
      goto LABEL_15;
    v27 = *(void (**)(void))(v28 + 32);
LABEL_3:
    v27();
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v19 = objc_msgSend((id)objc_opt_self(CBUUID), "UUIDWithNSUUID:", isa);

    type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v14, v24);
    v20 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    v21 = v42[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
    v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v19);
    specialized ContiguousArray._endMutation()(v22);
    v17 += 40;
    if (!--v15)
    {
      v16 = v42;
      goto LABEL_13;
    }
  }
  if (*(_BYTE *)v23 != 1)
  {
    UUID.init(uuidString:)(0xD000000000000024, v38);
    v24 = type metadata accessor for UUID(0);
    v29 = *(_QWORD *)(v24 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v6, 1, v24);
    if ((_DWORD)result == 1)
      goto LABEL_16;
    v27 = *(void (**)(void))(v29 + 32);
    goto LABEL_3;
  }
  UUID.init(uuidString:)(0xD000000000000024, v39);
  v24 = type metadata accessor for UUID(0);
  v25 = *(_QWORD *)(v24 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v9, 1, v24);
  if ((_DWORD)result != 1)
  {
    v27 = *(void (**)(void))(v25 + 32);
    goto LABEL_3;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1007895C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v9;

  v4 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*(id *)(*(_QWORD *)a1 + 32), "UUID");
  sub_1008C5174();

  LOBYTE(v7) = static UUID.== infix(_:_:)(v6, a2);
  sub_1000126B0((uint64_t)v6, type metadata accessor for ServiceUUID);
  return v7 & 1;
}

uint64_t sub_100789688(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v29 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v29 - v11;
  v13 = type metadata accessor for ServiceUUID(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v29 - v17;
  v19 = objc_msgSend(*(id *)(*(_QWORD *)a1 + 32), "UUID");
  sub_1008C5174();

  v20 = sub_10001AA44(a2, a2[3]);
  if (!*(_BYTE *)v20)
  {
    UUID.init(uuidString:)(0xD000000000000024, 0x8000000100EC6610);
    v24 = type metadata accessor for UUID(0);
    v25 = *(_QWORD *)(v24 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v12, 1, v24);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v16, v12, v24);
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (*(_BYTE *)v20 == 1)
  {
    UUID.init(uuidString:)(0xD000000000000024, 0x8000000100EE33C0);
    v21 = type metadata accessor for UUID(0);
    v22 = *(_QWORD *)(v21 - 8);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v10, 1, v21);
    if ((_DWORD)result != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v16, v10, v21);
LABEL_9:
      v28 = static UUID.== infix(_:_:)(v18, v16);
      sub_1000126B0((uint64_t)v16, type metadata accessor for ServiceUUID);
      sub_1000126B0((uint64_t)v18, type metadata accessor for ServiceUUID);
      return v28 & 1;
    }
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  UUID.init(uuidString:)(0xD000000000000024, 0x8000000100EE3390);
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v26);
  if ((_DWORD)result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v16, v7, v26);
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
  return result;
}

void sub_100789958(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[6] = &unk_100E4F5D0;
    v6[7] = &unk_100E4F5D0;
    v6[8] = &unk_100E4F5D0;
    v6[9] = &unk_100E4F5D0;
    sub_100252558(319);
    if (v5 <= 0x3F)
    {
      v6[10] = *(_QWORD *)(v4 - 8) + 64;
      v6[11] = &unk_100E4F5D0;
      swift_updateClassMetadata2(a1, 256, 12, v6, a1 + 80);
    }
  }
}

uint64_t sub_100789A28(void *a1, uint64_t a2)
{
  void *v2;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[6];
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v4 = a1;
  v5 = objc_msgSend(a1, "services");
  if (v5)
  {
    v6 = v5;
    v7 = sub_10000F4A0(0, &qword_1011074B8, CBService_ptr);
    v8 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
  }
  sub_100787638();
  if (qword_1010EA650 != -1)
    swift_once(&qword_1010EA650, sub_100E00F68);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B85A8);
  v10 = v2;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v23 = a2;
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 138412290;
    v24 = v10;
    v22 = v8;
    v15 = v4;
    v16 = v10;
    a2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v13 + 4, v13 + 12);
    *v14 = v10;

    v4 = v15;
    v8 = v22;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CBPeripheralDelegate: peripheral(didDiscoverServices:) called for %@", v13, 0xCu);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v17);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

  }
  __chkstk_darwin(v18);
  v21[2] = v10;
  v21[3] = v4;
  v21[4] = a2;
  v21[5] = v8;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DC14, v21, v19, &type metadata for () + 1, &type metadata for () + 1);
  return swift_bridgeObjectRelease();
}

void sub_100789C88(char *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(_QWORD);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _BYTE v51[32];
  __int16 v52;

  v4 = (uint64_t *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  v5 = *(void (**)(_QWORD))&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  if (v5)
  {
    v7 = v4[1];
    if (a3)
    {
      sub_10001D898(*(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise], v4[1]);
      swift_errorRetain(a3);
      if (qword_1010EA648 != -1)
        swift_once(&qword_1010EA648, sub_100E00F3C);
      v8 = type metadata accessor for Logger(0);
      sub_10001A9E8(v8, (uint64_t)qword_1011B8590);
      v9 = swift_errorRetain(a3);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v12 = 138412290;
        v13 = v5;
        v14 = _convertErrorToNSError(_:)(a3);
        v50 = (char *)v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v12 + 4, v12 + 12);
        *v46 = v14;
        v5 = v13;
        swift_errorRelease(a3);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "didDiscoverServices error!: %@", v12, 0xCu);
        v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v46, 1, v15);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        swift_errorRelease(a3);
      }

      v50 = (char *)a3;
      v52 = 256;
      swift_errorRetain(a3);
      v5(&v50);
      sub_100004048((uint64_t)&v50, &qword_1011074A0);
      v40 = *v4;
      v41 = v4[1];
      *v4 = 0;
      v4[1] = 0;
      sub_10001D8A8(v40, v41);
      swift_errorRelease(a3);
    }
    else
    {
      sub_10001D898(*(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise], v4[1]);
      v27 = a1;
      v28 = sub_10078B120(a4, (uint64_t)v27);

      if (qword_1010EA648 != -1)
        swift_once(&qword_1010EA648, sub_100E00F3C);
      v29 = type metadata accessor for Logger(0);
      sub_10001A9E8(v29, (uint64_t)qword_1011B8590);
      swift_bridgeObjectRetain_n(v28, 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v47 = v5;
        v33 = (uint8_t *)swift_slowAlloc(12, -1);
        v45 = swift_slowAlloc(32, -1);
        v50 = (char *)v45;
        *(_DWORD *)v33 = 136446210;
        v34 = type metadata accessor for Service();
        swift_bridgeObjectRetain(v28);
        v36 = Array.description.getter(v35, v34);
        v48 = v7;
        v38 = v37;
        swift_bridgeObjectRelease();
        v39 = v36;
        v5 = v47;
        v49 = sub_100016940(v39, v38, (uint64_t *)&v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v33 + 4, v33 + 12);
        swift_bridgeObjectRelease_n(v28, 2);
        v7 = v48;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "discovered services: %{public}s", v33, 0xCu);
        swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v33, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v28, 2);
      }
      swift_beginAccess(&v27[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], &v50, 33, 0);
      sub_100BD2250((uint64_t)v28);
      swift_endAccess(&v50);
      swift_bridgeObjectRelease();
      v50 = v27;
      HIBYTE(v52) = 0;
      v42 = v27;
      v5(&v50);
      sub_100004048((uint64_t)&v50, &qword_1011074A0);
      v43 = *v4;
      v44 = v4[1];
      *v4 = 0;
      v4[1] = 0;
      sub_10001D8A8(v43, v44);
    }
    sub_10001D8A8((uint64_t)v5, v7);
  }
  else
  {
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B8590);
    v18 = a2;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      v50 = v18;
      v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v21 + 4, v21 + 12);
      *v22 = v18;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "peripheral(didDiscoverServices:) called with no servicesPromise available!: %@", v21, 0xCu);
      v24 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v22, 1, v24);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10078A2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[3];
  _BYTE v11[24];

  v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v11, 0, 0);
  v6 = *v5;
  v10[2] = a2;
  swift_bridgeObjectRetain(v6);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_10078DD24, (uint64_t)v10, v6);
  v8 = v7;
  result = swift_bridgeObjectRelease();
  *a3 = v8;
  return result;
}

void sub_10078A344(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  void (*v51)(_QWORD);
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t Strong;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v4 = a1;
  v5 = (_QWORD *)(a1 + 48);
  v6 = *(void (**)(_QWORD))(a1 + 48);
  if (v6)
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (a2)
    {
      sub_10001D898(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
      swift_errorRetain(a2);
      if (qword_1010EA648 != -1)
        swift_once(&qword_1010EA648, sub_100E00F3C);
      v9 = type metadata accessor for Logger(0);
      sub_10001A9E8(v9, (uint64_t)qword_1011B8590);
      v10 = swift_errorRetain(a2);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.error.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v51 = v6;
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v13 = 138412290;
        v14 = _convertErrorToNSError(_:)(a2);
        Strong = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v55, v13 + 4, v13 + 12);
        *v49 = v14;
        v6 = v51;
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "didDiscoverCharacteristicsFor error: %@", v13, 0xCu);
        v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v49, 1, v15);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v13, -1, -1);
      }
      else
      {
        swift_errorRelease(a2);
      }

      Strong = a2;
      v56 = 256;
      swift_errorRetain(a2);
      v6(&Strong);
      sub_10001D8A8((uint64_t)v6, v8);
      swift_errorRelease(a2);
    }
    else
    {
      swift_retain();
      v27 = objc_msgSend(a3, "characteristics");
      if (v27)
      {
        v28 = v27;
        v29 = sub_10000F4A0(0, &qword_1011074A8, CBCharacteristic_ptr);
        v30 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v28, v29);

        swift_retain();
        v31 = a4;
        v32 = sub_10078B2B4(v30, (uint64_t)v31, v4);
        swift_bridgeObjectRelease();

        swift_release();
        v33 = sub_100CA8E54((uint64_t)v32);
        swift_bridgeObjectRelease();
        if (qword_1010EA650 != -1)
          swift_once(&qword_1010EA650, sub_100E00F68);
        v34 = type metadata accessor for Logger(0);
        sub_10001A9E8(v34, (uint64_t)qword_1011B85A8);
        swift_bridgeObjectRetain_n(v33, 2);
        v36 = Logger.logObject.getter(v35);
        v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          v52 = v6;
          v38 = (uint8_t *)swift_slowAlloc(12, -1);
          v53 = v4;
          v50 = swift_slowAlloc(32, -1);
          Strong = v50;
          *(_DWORD *)v38 = 136315138;
          v39 = v8;
          v40 = type metadata accessor for Characteristic();
          v41 = sub_100006204(&qword_1011074B0, (uint64_t (*)(uint64_t))type metadata accessor for Characteristic, (uint64_t)&unk_100E50578);
          swift_bridgeObjectRetain(v33);
          v43 = Set.description.getter(v42, v40, v41);
          v45 = v44;
          swift_bridgeObjectRelease();
          v46 = v43;
          v8 = v39;
          v57 = sub_100016940(v46, v45, &Strong);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v38 + 4, v38 + 12);
          swift_bridgeObjectRelease_n(v33, 2);
          v6 = v52;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "localCharacteristics: %s", v38, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          v4 = v53;
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(v38, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v33, 2);
        }
        swift_beginAccess(v4 + 40, &Strong, 33, 0);
        sub_100BBDC38(v33);
        swift_endAccess(&Strong);
      }
      Strong = swift_unknownObjectUnownedLoadStrong(v4 + 16);
      HIBYTE(v56) = 0;
      v6(&Strong);
      sub_10001D8A8((uint64_t)v6, v8);
    }
    sub_100004048((uint64_t)&Strong, &qword_1011074A0);
    v47 = *(_QWORD *)(v4 + 48);
    v48 = *(_QWORD *)(v4 + 56);
    *v5 = 0;
    v5[1] = 0;
    sub_10001D8A8(v47, v48);
  }
  else
  {
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B8590);
    v17 = swift_retain_n(v4, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      Strong = v21;
      *(_DWORD *)v20 = 136315138;
      swift_retain();
      v22 = sub_100C8F17C();
      v24 = v23;
      swift_release();
      v57 = sub_100016940(v22, v24, &Strong);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v20 + 4, v20 + 12);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "peripheral(didDiscoverCharacteristicsFor:) called with no characteristicsPromise available!: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_release_n(v4, 2);
    }
  }
}

void sub_10078A9EC(_QWORD *a1, uint64_t a2, void *a3)
{
  void (*v6)(_QWORD **);
  _QWORD *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  if (a1[13])
  {
    if (a2)
    {
      v30 = (_QWORD *)a2;
      LOBYTE(v32) = 0;
      swift_retain();
      swift_errorRetain(a2);
      PassthroughSubject.send(completion:)(&v30);
      swift_release();
      sub_100004048((uint64_t)&v30, (uint64_t *)&unk_1010FBAF0);
    }
    else
    {
      swift_retain();
      v9 = objc_msgSend(a3, "value");
      if (v9)
      {
        v10 = v9;
        v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v13 = v12;

      }
      else
      {
        v11 = 0;
        v13 = 0xC000000000000000;
      }
      v30 = (_QWORD *)v11;
      v31 = v13;
      PassthroughSubject.send(_:)(&v30);
      swift_release();
      sub_10001BC14(v11, v13);
    }
  }
  else
  {
    v7 = a1 + 9;
    v6 = (void (*)(_QWORD **))a1[9];
    if (v6)
    {
      v8 = a1[10];
      if (a2)
      {
        v30 = a1;
        v31 = a2;
        v32 = 264;
        swift_errorRetain(a2);
        swift_retain();
        sub_10001D898((uint64_t)v6, v8);
      }
      else
      {
        swift_retain();
        v23 = objc_msgSend(a3, "value");
        if (v23)
        {
          v24 = v23;
          v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v27 = v26;

        }
        else
        {
          v25 = 0;
          v27 = 0xC000000000000000;
        }
        v30 = (_QWORD *)v25;
        v31 = v27;
        HIBYTE(v32) = 0;
      }
      v6(&v30);
      sub_10001D8A8((uint64_t)v6, v8);
      sub_100004048((uint64_t)&v30, (uint64_t *)&unk_101107490);
      v28 = a1[9];
      v29 = a1[10];
      *v7 = 0;
      v7[1] = 0;
      sub_10001D8A8(v28, v29);
    }
    else
    {
      if (qword_1010EA648 != -1)
        swift_once(&qword_1010EA648, sub_100E00F3C);
      v14 = type metadata accessor for Logger(0);
      sub_10001A9E8(v14, (uint64_t)qword_1011B8590);
      v15 = swift_retain_n(a1, 2);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(12, -1);
        v19 = swift_slowAlloc(32, -1);
        *(_DWORD *)v18 = 136315138;
        v30 = (_QWORD *)v19;
        swift_retain();
        v20 = sub_1007C6C74();
        v22 = v21;
        swift_release();
        v33 = sub_100016940(v20, v22, (uint64_t *)&v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "didUpdateValueFor characteristic: %s called with no outstanding promise or subject!", v18, 0xCu);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_release_n(a1, 2);
      }
    }
  }
}

uint64_t sub_10078AD38@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[16];
  _BYTE *v18;
  _BYTE v19[24];

  v8 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v8);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = objc_msgSend(a2, "UUID");
  sub_1008C5174();

  v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v19, 0, 0);
  v13 = *v12;
  v18 = v10;
  swift_bridgeObjectRetain(v13);
  sub_100A7771C(a3, (uint64_t)v17, v13);
  v15 = v14;
  swift_bridgeObjectRelease();
  result = sub_1000126B0((uint64_t)v10, type metadata accessor for ServiceUUID);
  *a4 = v15;
  return result;
}

uint64_t sub_10078AE50@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t *)@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v16[16];
  _BYTE *v17;
  _BYTE v18[24];

  v8 = type metadata accessor for CharacteristicUUID(0);
  __chkstk_darwin(v8);
  v10 = &v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = objc_msgSend(a2, "UUID");
  sub_1008C5174();

  swift_beginAccess(a1 + 40, v18, 0, 0);
  v12 = *(_QWORD *)(a1 + 40);
  v17 = v10;
  swift_bridgeObjectRetain(v12);
  sub_100A77748(a3, (uint64_t)v16, v12);
  v14 = v13;
  swift_bridgeObjectRelease();
  result = sub_1000126B0((uint64_t)v10, type metadata accessor for CharacteristicUUID);
  *a4 = v14;
  return result;
}

uint64_t sub_10078AF5C@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t);

  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_10001D898(v3, v4);
  sub_10001D8A8(v3, v4);
  if (v3)
  {
    result = swift_allocObject(&unk_1010919A8, 32, 7);
    *(_QWORD *)(result + 16) = v3;
    *(_QWORD *)(result + 24) = v4;
    v6 = sub_10015A05C;
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void sub_10078AFE8(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, void *))
{
  id v10;
  id v11;
  id v12;
  id v13;

  v10 = a3;
  v11 = a4;
  v12 = a1;
  v13 = a5;
  a6(v11, a5);

}

_QWORD *sub_10078B120(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v4)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v4);
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = type metadata accessor for Service();
      v10 = (_QWORD *)swift_allocObject(v9, 64, 7);
      v11 = sub_10001A9A8(&qword_1010FAAF0);
      v12 = swift_allocObject(v11, 20, 7);
      *(_DWORD *)(v12 + 16) = 0;
      v10[3] = v12;
      v10[7] = 0;
      v10[5] = &_swiftEmptySetSingleton;
      v10[6] = 0;
      v13 = swift_unknownObjectUnownedInit(v10 + 2, a2);
      v10[4] = v8;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v14 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v14);
      v15 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v10);
      specialized ContiguousArray._endMutation()(v15);
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_10078B2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v6)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v6);
    if (v6 < 0)
    {
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 != v8)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1);
      else
        v9 = *(id *)(a1 + 8 * v8 + 32);
      v10 = v9;
      ++v8;
      v11 = type metadata accessor for Characteristic();
      v12 = swift_allocObject(v11, 112, 7);
      v13 = sub_10001A9A8(&qword_1010FAAF0);
      v14 = swift_allocObject(v13, 20, 7);
      *(_DWORD *)(v14 + 16) = 0;
      *(_QWORD *)(v12 + 16) = v14;
      *(_QWORD *)(v12 + 48) = &_swiftEmptySetSingleton;
      *(_OWORD *)(v12 + 56) = 0u;
      *(_OWORD *)(v12 + 72) = 0u;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_QWORD *)(v12 + 104) = 0;
      swift_unknownObjectUnownedInit(v12 + 24, a2);
      *(_QWORD *)(v12 + 32) = a3;
      *(_QWORD *)(v12 + 40) = v10;
      v15 = swift_unownedRetain(a3);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      v16 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v12);
      specialized ContiguousArray._endMutation()(v17);
      if (v6 == v8)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  return result;
}

id sub_10078B460(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  objc_class *v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t *v46;
  uint64_t v47;
  objc_super v48;
  uint64_t v49;
  uint64_t v50;

  v11 = OBJC_IVAR____TtC12searchpartyd10Peripheral_lock;
  v12 = sub_10001A9A8(&qword_1010FAAF0);
  v13 = swift_allocObject(v12, 20, 7);
  *(_QWORD *)&v5[v11] = v13;
  *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_services] = &_swiftEmptySetSingleton;
  *(_DWORD *)(v13 + 16) = 0;
  v14 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_connectionPromise];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  v15 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_disconnectionPromise];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v16 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_servicesPromise];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v17 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_sendDataPromise];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v18 = (uint64_t)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_findMyIdentifier];
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName];
  *(_QWORD *)v20 = 0;
  *((_QWORD *)v20 + 1) = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] = a1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_advertisementData] = a2;
  *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_RSSI] = a3;
  v21 = &v5[OBJC_IVAR____TtC12searchpartyd10Peripheral_lastSeen];
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, a4, v22);
  swift_beginAccess(v18, &v49, 33, 0);
  v24 = v5;
  v25 = a1;
  sub_10078B8F4(a5, v18);
  swift_endAccess(&v49);

  v26 = (objc_class *)type metadata accessor for Peripheral(0);
  v48.receiver = v24;
  v48.super_class = v26;
  v27 = objc_msgSendSuper2(&v48, "init");
  v28 = objc_msgSend(v25, "delegate");
  if (!v28)
    goto LABEL_17;
  v29 = v28;
  if (v28 == v27)
  {
    v39 = v27;
    goto LABEL_16;
  }
  v30 = swift_dynamicCastClass(v28, v26);
  v31 = qword_1010EA648;
  if (!v30)
  {
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    v40 = type metadata accessor for Logger(0);
    v41 = sub_10001A9E8(v40, (uint64_t)qword_1011B8590);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.fault.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "CBPeripheral already has a delegate.", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
      swift_unknownObjectRelease(v29);

      goto LABEL_17;
    }

    v39 = v29;
LABEL_16:
    swift_unknownObjectRelease(v39);
    goto LABEL_17;
  }
  v32 = v30;
  v47 = a5;
  swift_unknownObjectRetain(v29);
  if (v31 != -1)
    swift_once(&qword_1010EA648, sub_100E00F3C);
  v33 = type metadata accessor for Logger(0);
  sub_10001A9E8(v33, (uint64_t)qword_1011B8590);
  v34 = swift_unknownObjectRetain_n(v29, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.fault.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v37 = 138543362;
    v49 = v32;
    swift_unknownObjectRetain(v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v37 + 4, v37 + 12);
    *v46 = v32;
    swift_unknownObjectRelease_n(v29, 2);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "CBPeripheral already has a delegate: %{public}@", v37, 0xCu);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v46, 1, v38);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v37, -1, -1);
    swift_unknownObjectRelease_n(v29, 2);

  }
  else
  {

    swift_unknownObjectRelease_n(v29, 4);
  }
  a5 = v47;
LABEL_17:
  objc_msgSend(v25, "setDelegate:", v27, v46);

  sub_100004048(a5, &qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a4, v22);
  return v27;
}

uint64_t sub_10078B8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10078B93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101107468);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10078B984(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  NSObject *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  Class isa;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject **v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;

  v3 = v2;
  v36 = a2;
  v5 = type metadata accessor for ServiceUUID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "UUID");
  sub_1008C5174();

  sub_100787638();
  if (qword_1010EA650 != -1)
    swift_once(&qword_1010EA650, sub_100E00F68);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B85A8);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(8, -1);
    v34 = v9;
    v15 = (_QWORD *)v14;
    v35 = v3;
    *(_DWORD *)v13 = 138412290;
    v39 = v10;
    v16 = v10;
    v3 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v13 + 4, v13 + 12);
    *v15 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CBPeripheralDelegate: peripheral(didDiscoverCharacteristicsFor:) %@", v13, 0xCu);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v15, 1, v17);
    v18 = v15;
    v9 = v34;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {

    v11 = v10;
  }

  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  __chkstk_darwin(v20);
  *(&v34 - 2) = v3;
  *(&v34 - 1) = (uint64_t)v7;
  v21 = sub_10001A9A8(&qword_101107470);
  v22 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DBE0, &v34 - 4, v19, &type metadata for () + 1, v21);
  v23 = v39;
  if (v39)
  {
    isa = v39[3].isa;
    __chkstk_darwin(v22);
    v25 = v36;
    *(&v34 - 4) = (uint64_t)v23;
    *(&v34 - 3) = v25;
    *(&v34 - 2) = (uint64_t)v10;
    *(&v34 - 1) = v3;
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DBF8, &v34 - 6, isa, &type metadata for () + 1, &type metadata for () + 1);
    swift_release_n(v23, 2);
  }
  else
  {
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    sub_10001A9E8(v9, (uint64_t)qword_1011B8590);
    v26 = v10;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 138412290;
      v37 = v26;
      v31 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v29 + 4, v29 + 12);
      *v30 = v26;

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Could not find Service for: %@", v29, 0xCu);
      v32 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v30, 1, v32);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {

      v27 = v26;
    }

  }
  return sub_1000126B0((uint64_t)v7, type metadata accessor for ServiceUUID);
}

void sub_10078BDD4(void *a1, uint8_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint8_t *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint8_t *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100787638();
  if (qword_1010EA650 != -1)
    swift_once(&qword_1010EA650, sub_100E00F68);
  v63 = (uint8_t *)type metadata accessor for Logger(0);
  sub_10001A9E8((uint64_t)v63, (uint64_t)qword_1011B85A8);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v61 = v7;
  v62 = v6;
  v60 = v9;
  if (v13)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(8, -1);
    v59 = a2;
    v16 = (_QWORD *)v15;
    *(_DWORD *)v14 = 138412290;
    v66 = v10;
    v17 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v14 + 4, v14 + 12);
    *v16 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "CBPeripheralDelegate: didUpdateValueFor: %@", v14, 0xCu);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v16, 1, v18);
    v19 = v16;
    a2 = v59;
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  v20 = objc_msgSend(v10, "service");
  if (v20)
  {
    v21 = v20;
    v22 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
    v23 = __chkstk_darwin(v20);
    *(&v57 - 2) = v3;
    *(&v57 - 1) = v23;
    v24 = sub_10001A9A8(&qword_101107470);
    v25 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DB48, &v57 - 4, v22, &type metadata for () + 1, v24);
    v26 = (uint64_t)v66;
    if (!v66)
    {
      if (qword_1010EA648 != -1)
        swift_once(&qword_1010EA648, sub_100E00F3C);
      sub_10001A9E8((uint64_t)v63, (uint64_t)qword_1011B8590);
      v32 = v21;
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        v66 = (_QWORD *)v36;
        *(_DWORD *)v35 = 136315138;
        v63 = v35 + 4;
        v37 = -[NSObject UUID](v32, "UUID");
        v38 = v60;
        sub_1008C5174();

        v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v40 = v62;
        v41 = dispatch thunk of CustomStringConvertible.description.getter(v62, v39);
        v43 = v42;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v38, v40);
        v64 = sub_100016940(v41, v43, (uint64_t *)&v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v63, v35 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Could not find Service for: %s", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

        return;
      }

      goto LABEL_19;
    }
    v27 = v66[3];
    __chkstk_darwin(v25);
    *(&v57 - 2) = v26;
    *(&v57 - 1) = (uint64_t)v10;
    swift_retain();
    swift_retain();
    v28 = sub_10001A9A8(&qword_101107478);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DB68, &v57 - 4, v27, &type metadata for () + 1, v28);
    v29 = swift_release();
    v30 = (uint64_t)v66;
    if (v66)
    {
      v31 = v66[2];
      __chkstk_darwin(v29);
      *(&v57 - 4) = v30;
      *(&v57 - 3) = (uint64_t)a2;
      *(&v57 - 2) = (uint64_t)v10;
      swift_retain();
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DBC4, &v57 - 6, v31, &type metadata for () + 1, &type metadata for () + 1);
      swift_release();
      swift_release_n(v30, 2);
      swift_release_n(v26, 2);

      return;
    }
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    sub_10001A9E8((uint64_t)v63, (uint64_t)qword_1011B8590);
    v44 = v10;
    v32 = Logger.logObject.getter(v44);
    v45 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = (uint8_t *)swift_slowAlloc(32, -1);
      v66 = v63;
      *(_DWORD *)v46 = 136315138;
      v47 = v46 + 12;
      v58 = v46 + 4;
      v59 = v46;
      v48 = objc_msgSend(v44, "UUID");
      v49 = v60;
      sub_1008C5174();

      v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = v62;
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v62, v50);
      v54 = v53;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v51);
      v64 = sub_100016940(v52, v54, (uint64_t *)&v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v58, v47);

      swift_bridgeObjectRelease();
      v55 = v59;
      _os_log_impl((void *)&_mh_execute_header, v32, v45, "Could not find Characteristic for: %s", v59, 0xCu);
      v56 = (uint64_t)v63;
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);

      swift_release_n(v26, 2);
LABEL_19:

      return;
    }

    swift_release_n(v26, 2);
  }
}

void sub_10078C518(void *a1, uint64_t a2)
{
  uint8_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint8_t *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  id v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  id v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(_QWORD **);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint8_t *v74;
  _QWORD *v75;
  uint64_t v76[4];
  __int16 v77;
  uint64_t v78;
  uint64_t v79;

  v69 = a2;
  v4 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v4 - 8);
  v72 = v4;
  __chkstk_darwin(v4);
  v70 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = v2;
  sub_100787638();
  if (qword_1010EA650 != -1)
    swift_once(&qword_1010EA650, sub_100E00F68);
  v73 = (_QWORD *)type metadata accessor for Logger(0);
  sub_10001A9E8((uint64_t)v73, (uint64_t)qword_1011B85A8);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v75 = v6;
    v11 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v9 + 4, v9 + 12);
    *v10 = v6;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CBPeripheralDelegate: didWriteValueFor: %@", v9, 0xCu);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  v13 = (uint8_t *)objc_msgSend(v6, "service", v69);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)&v74[OBJC_IVAR____TtC12searchpartyd10Peripheral_lock];
    v16 = __chkstk_darwin(v13);
    *(&v69 - 2) = v17;
    *(&v69 - 1) = v16;
    v18 = sub_10001A9A8(&qword_101107470);
    v19 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DB48, &v69 - 4, v15, &type metadata for () + 1, v18);
    v20 = (uint64_t)v75;
    if (v75)
    {
      v21 = v75[3];
      __chkstk_darwin(v19);
      *(&v69 - 2) = v20;
      *(&v69 - 1) = (uint64_t)v6;
      swift_retain();
      swift_retain();
      v22 = sub_10001A9A8(&qword_101107478);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DB68, &v69 - 4, v21, &type metadata for () + 1, v22);
      swift_release();
      v23 = (uint64_t)v75;
      if (v75)
      {
        v24 = swift_retain_n(v75, 3);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.info.getter(v25);
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(12, -1);
          v28 = swift_slowAlloc(32, -1);
          v74 = v14;
          v75 = (_QWORD *)v28;
          *(_DWORD *)v27 = 136315138;
          v72 = 0;
          swift_retain();
          v29 = sub_1007C6C74();
          v31 = v30;
          swift_release();
          v78 = sub_100016940(v29, v31, (uint64_t *)&v75);
          v14 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v27 + 4, v27 + 12);
          swift_release_n(v23, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "CBPeripheralDelegate: didWriteValueFor wrappedCharacteristic: %s", v27, 0xCu);
          swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v28, -1, -1);
          swift_slowDealloc(v27, -1, -1);

        }
        else
        {

          swift_release_n(v23, 2);
        }
        v56 = *(_QWORD *)(v23 + 16);
        swift_retain();
        v57 = sub_10001A9A8((uint64_t *)&unk_101107480);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DB88, v23, v56, &type metadata for () + 1, v57);
        swift_release();
        v58 = (void (*)(_QWORD **))v75;
        if (v75)
        {
          v59 = v76[0];
          v60 = v69;
          if (v69)
          {
            v75 = (_QWORD *)v69;
            v77 = 256;
            sub_10001D898((uint64_t)v58, v76[0]);
            swift_errorRetain(v60);
          }
          else
          {
            HIBYTE(v77) = 0;
            swift_retain();
          }
          v58(&v75);
          sub_10001D8A8((uint64_t)v58, v59);
          swift_release();
          sub_10001D8A8((uint64_t)v58, v59);
          swift_release();

          swift_release_n(v23, 2);
          sub_100004048((uint64_t)&v75, &qword_1010EEBF8);
          return;
        }
        if (qword_1010EA648 != -1)
          swift_once(&qword_1010EA648, sub_100E00F3C);
        sub_10001A9E8((uint64_t)v73, (uint64_t)qword_1011B8590);
        v61 = swift_retain_n(v23, 2);
        v45 = Logger.logObject.getter(v61);
        v62 = static os_log_type_t.error.getter(v45);
        if (os_log_type_enabled(v45, v62))
        {
          v63 = (uint8_t *)swift_slowAlloc(12, -1);
          v64 = swift_slowAlloc(32, -1);
          *(_DWORD *)v63 = 136315138;
          v74 = (uint8_t *)v20;
          v75 = (_QWORD *)v64;
          swift_retain();
          v65 = sub_1007C6C74();
          v66 = v14;
          v68 = v67;
          swift_release();
          v78 = sub_100016940(v65, v68, (uint64_t *)&v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v63 + 4, v63 + 12);
          swift_release_n(v23, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v45, v62, "didWriteValueFor characteristic: %s called with no outstanding promise!", v63, 0xCu);
          swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v63, -1, -1);

          swift_release_n(v23, 2);
          goto LABEL_28;
        }

        swift_release_n(v23, 4);
      }
      else
      {
        if (qword_1010EA648 != -1)
          swift_once(&qword_1010EA648, sub_100E00F3C);
        sub_10001A9E8((uint64_t)v73, (uint64_t)qword_1011B8590);
        v44 = v6;
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.error.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = (uint8_t *)swift_slowAlloc(12, -1);
          v73 = (_QWORD *)swift_slowAlloc(32, -1);
          v74 = (uint8_t *)v20;
          v75 = v73;
          *(_DWORD *)v47 = 136315138;
          v69 = (uint64_t)(v47 + 4);
          v48 = objc_msgSend(v44, "UUID");
          v49 = v70;
          sub_1008C5174();

          v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v51 = v72;
          v52 = dispatch thunk of CustomStringConvertible.description.getter(v72, v50);
          v54 = v53;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v49, v51);
          v78 = sub_100016940(v52, v54, (uint64_t *)&v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v69, v47 + 12);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Could not find Characteristic for: %s", v47, 0xCu);
          v55 = (uint64_t)v73;
          swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v55, -1, -1);
          swift_slowDealloc(v47, -1, -1);

LABEL_28:
          swift_release_n(v74, 2);

          return;
        }

      }
      swift_release_n(v20, 2);
      return;
    }
    if (qword_1010EA648 != -1)
      swift_once(&qword_1010EA648, sub_100E00F3C);
    sub_10001A9E8((uint64_t)v73, (uint64_t)qword_1011B8590);
    v32 = v14;
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      *(_DWORD *)v35 = 136315138;
      v74 = v35 + 4;
      v75 = (_QWORD *)v36;
      v37 = -[uint8_t UUID](v32, "UUID");
      v38 = v70;
      sub_1008C5174();

      v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = v72;
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v72, v39);
      v43 = v42;
      (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v40);
      v78 = sub_100016940(v41, v43, (uint64_t *)&v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v74, v35 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Could not find Service for: %s", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10078CF90(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint8_t *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint8_t *v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint8_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100787638();
  if (qword_1010EA650 != -1)
    swift_once(&qword_1010EA650, sub_100E00F68);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B85A8);
  v9 = a1;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v74 = v5;
  v75 = (uint8_t *)v4;
  v73 = v7;
  if (v12)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(8, -1);
    v72 = v8;
    v15 = (_QWORD *)v14;
    *(_DWORD *)v13 = 138412290;
    v78 = v9;
    v16 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v13 + 4, v13 + 12);
    *v15 = v9;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "CBPeripheralDelegate: didUpdateNotificationStateFor: %@", v13, 0xCu);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v15, 1, v17);
    v18 = v15;
    v8 = v72;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

  }
  v19 = objc_msgSend(v9, "service");
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
    v22 = __chkstk_darwin(v19);
    *(&v69 - 2) = v2;
    *(&v69 - 1) = v22;
    v23 = sub_10001A9A8(&qword_101107470);
    v24 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DAD0, &v69 - 4, v21, &type metadata for () + 1, v23);
    v25 = (uint64_t)v78;
    if (v78)
    {
      v26 = v78[3];
      __chkstk_darwin(v24);
      *(&v69 - 2) = v25;
      *(&v69 - 1) = (uint64_t)v9;
      swift_retain();
      swift_retain();
      v27 = sub_10001A9A8(&qword_101107478);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10078DAF0, &v69 - 4, v26, &type metadata for () + 1, v27);
      swift_release();
      v28 = (uint64_t)v78;
      if (v78)
      {
        v29 = (void *)v78[5];
        swift_retain();
        if (objc_msgSend(v29, "isNotifying"))
        {
          if (qword_1010EA648 != -1)
            swift_once(&qword_1010EA648, sub_100E00F3C);
          sub_10001A9E8(v8, (uint64_t)qword_1011B8590);
          v30 = swift_retain_n(v28, 2);
          v31 = Logger.logObject.getter(v30);
          v32 = static os_log_type_t.info.getter(v31);
          if (os_log_type_enabled(v31, v32))
          {
            v33 = (uint8_t *)swift_slowAlloc(12, -1);
            v34 = swift_slowAlloc(32, -1);
            v78 = (_QWORD *)v34;
            *(_DWORD *)v33 = 136315138;
            v75 = v33 + 4;
            swift_retain();
            v35 = sub_1007C6C74();
            v37 = v36;
            swift_release();
            v76 = sub_100016940(v35, v37, (uint64_t *)&v78);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v75, v33 + 12);
            swift_release_n(v28, 2);
            swift_bridgeObjectRelease();
            v38 = "Start notifying: %s.";
LABEL_26:
            _os_log_impl((void *)&_mh_execute_header, v31, v32, v38, v33, 0xCu);
            swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v34, -1, -1);
            swift_slowDealloc(v33, -1, -1);

            swift_release_n(v28, 2);
            swift_release_n(v25, 2);

            return;
          }
        }
        else
        {
          if (qword_1010EA648 != -1)
            swift_once(&qword_1010EA648, sub_100E00F3C);
          sub_10001A9E8(v8, (uint64_t)qword_1011B8590);
          v65 = swift_retain_n(v28, 2);
          v31 = Logger.logObject.getter(v65);
          v32 = static os_log_type_t.info.getter(v31);
          if (os_log_type_enabled(v31, v32))
          {
            v33 = (uint8_t *)swift_slowAlloc(12, -1);
            v34 = swift_slowAlloc(32, -1);
            v78 = (_QWORD *)v34;
            *(_DWORD *)v33 = 136315138;
            v75 = v33 + 4;
            swift_retain();
            v66 = sub_1007C6C74();
            v68 = v67;
            swift_release();
            v76 = sub_100016940(v66, v68, (uint64_t *)&v78);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v75, v33 + 12);
            swift_release_n(v28, 2);
            swift_bridgeObjectRelease();
            v38 = "Stop notifying: %s.";
            goto LABEL_26;
          }
        }

        swift_release_n(v28, 4);
      }
      else
      {
        if (qword_1010EA648 != -1)
          swift_once(&qword_1010EA648, sub_100E00F3C);
        sub_10001A9E8(v8, (uint64_t)qword_1011B8590);
        v51 = v9;
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.error.getter(v52);
        if (os_log_type_enabled(v52, v53))
        {
          v54 = (uint8_t *)swift_slowAlloc(12, -1);
          v72 = swift_slowAlloc(32, -1);
          v78 = (_QWORD *)v72;
          *(_DWORD *)v54 = 136315138;
          v55 = v54 + 12;
          v70 = v54 + 4;
          v71 = v54;
          v56 = objc_msgSend(v51, "UUID");
          v57 = v73;
          sub_1008C5174();

          v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v59 = v75;
          v60 = dispatch thunk of CustomStringConvertible.description.getter(v75, v58);
          v62 = v61;
          (*(void (**)(char *, uint8_t *))(v74 + 8))(v57, v59);
          v76 = sub_100016940(v60, v62, (uint64_t *)&v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v70, v55);

          swift_bridgeObjectRelease();
          v63 = v71;
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Could not find Characteristic for: %s", v71, 0xCu);
          v64 = v72;
          swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v63, -1, -1);

          swift_release_n(v25, 2);
          return;
        }

      }
      swift_release_n(v25, 2);
    }
    else
    {
      if (qword_1010EA648 != -1)
        swift_once(&qword_1010EA648, sub_100E00F3C);
      sub_10001A9E8(v8, (uint64_t)qword_1011B8590);
      v39 = v20;
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v78 = (_QWORD *)v43;
        *(_DWORD *)v42 = 136315138;
        v72 = (uint64_t)(v42 + 4);
        v44 = objc_msgSend(v39, "UUID");
        v45 = v73;
        sub_1008C5174();

        v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v47 = v75;
        v48 = dispatch thunk of CustomStringConvertible.description.getter(v75, v46);
        v50 = v49;
        (*(void (**)(char *, uint8_t *))(v74 + 8))(v45, v47);
        v76 = sub_100016940(v48, v50, (uint64_t *)&v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v72, v42 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Could not find Service for: %s", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

      }
      else
      {

      }
    }
  }
}

void sub_10078D920(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;

  if (qword_1010EA650 != -1)
    swift_once(&qword_1010EA650, sub_100E00F68);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B85A8);
  v9 = a1;
  v3 = Logger.logObject.getter(v9);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    v10 = v9;
    v7 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *v6 = v9;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "peripheralIsReady: %@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10078DAD0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10078AD38(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_10078DB2C, a1);
}

uint64_t sub_10078DAF0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10078AE50(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_10078DB10, a1);
}

uint64_t sub_10078DB10(uint64_t a1)
{
  uint64_t v1;

  return sub_100C8EB5C(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10078DB2C(uint64_t a1)
{
  uint64_t v1;

  return sub_1007895C4(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10078DB48@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10078AD38(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_10078DD24, a1);
}

uint64_t sub_10078DB68@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10078AE50(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), (uint64_t (*)(uint64_t *))sub_10078DD0C, a1);
}

uint64_t sub_10078DB88@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v1;

  return sub_10078AF5C(v1, a1);
}

uint64_t sub_10078DBA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10078DBC4()
{
  uint64_t v0;

  sub_10078A9EC(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10078DBE0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10078A2B0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_10078DBF8()
{
  uint64_t v0;

  sub_10078A344(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

void sub_10078DC14()
{
  uint64_t v0;

  sub_100789C88(*(char **)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10078DC30()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10078DC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10078900C(a1, a2, *(_QWORD *)(v2 + 16), *(Class *)(v2 + 24));
}

unint64_t sub_10078DC64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101121800;
  if (!qword_101121800)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010FBA90);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Future<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_101121800);
  }
  return result;
}

uint64_t sub_10078DCB0()
{
  uint64_t v0;

  return sub_1007890C4(*(char **)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10078DCCC()
{
  uint64_t v0;

  return sub_100787A14(*(_QWORD *)(v0 + 16));
}

void sub_10078DCE8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1007880CC(*(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void **)(v1 + 64), a1);
}

uint64_t sub_10078DD0C(uint64_t a1)
{
  return sub_10078DB10(a1) & 1;
}

uint64_t sub_10078DD24(uint64_t a1)
{
  return sub_10078DB2C(a1) & 1;
}

void sub_10078DD3C(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  double v22;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  char v27;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  int *v39;
  double v40;
  double v41;
  uint64_t v42;
  int v43;
  int v44;

  v43 = a5;
  v44 = a4;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = Date.timeIntervalSinceReferenceDate.getter(v18);
  if (v22 < 0.0 || v22 > 4294967300.0)
  {
    v24 = static os_log_type_t.error.getter(v21);
    v25 = sub_100253E58();
    v26 = (void *)static OS_os_log.default.getter(v25);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v26, "BeaconPayloadv1: Invalid timestamp", 34, 2, _swiftEmptyArrayStorage);
    v27 = 1;
LABEL_19:

    v33 = sub_100790844();
    v34 = swift_allocError(&type metadata for BeaconPayloadv1.PayloadCreationError, v33, 0, 0);
    *v35 = v27;
    swift_willThrow(v34);
    sub_10001BC14(a1, a2);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
    return;
  }
  if (a7 < -90.0 || a7 > 90.0 || a8 < -180.0 || a8 > 180.0)
  {
    v31 = static os_log_type_t.error.getter(v21);
    v32 = sub_100253E58();
    v26 = (void *)static OS_os_log.default.getter(v32);
    v27 = 2;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v26, "BeaconPayloadv1: Invalid coordinates", 36, 2, _swiftEmptyArrayStorage);
    goto LABEL_19;
  }
  *a6 = a1;
  a6[1] = a2;
  v36 = sub_10001BBBC(a1, a2);
  v38 = Date.timeIntervalSinceReferenceDate.getter(v36);
  if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v38 <= -1.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v38 >= 4294967300.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  Date.init(timeIntervalSinceReferenceDate:)(v37);
  sub_10001BC14(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, v16);
  v39 = (int *)type metadata accessor for BeaconPayloadv1(0);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)a6 + v39[5], v20, v16);
  *((_BYTE *)a6 + v39[6]) = v44;
  v40 = a7 * 10000000.0;
  if ((~COERCE__INT64(a7 * 10000000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v40 <= -2147483650.0)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v40 >= 2147483650.0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  *(double *)((char *)a6 + v39[7]) = (double)(int)v40 / 10000000.0;
  v41 = a8 * 10000000.0;
  if ((~COERCE__INT64(a8 * 10000000.0) & 0x7FF0000000000000) == 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v41 <= -2147483650.0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v41 < 2147483650.0)
  {
    *(double *)((char *)a6 + v39[8]) = (double)(int)v41 / 10000000.0;
    *(double *)((char *)a6 + v39[9]) = a9;
    *((_BYTE *)a6 + v39[10]) = v43;
    return;
  }
LABEL_38:
  __break(1u);
}

void BeaconPayloadv1.init(using:data:advertisement:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for BeaconPayloadv1(0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  __asm { BR              X10 }
}

uint64_t sub_10078E170()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  if (BYTE6(v4) < 0x78uLL)
  {
    result = sub_10078F75C(v7, v6, v4, v3, v2, v5);
    if (v1)
      return result;
    return sub_10078F718(v5, v0);
  }
  result = sub_10078F104(v7, v6, v4, v3, v2, v8);
  v5 = v8;
  if (!v1)
    return sub_10078F718(v5, v0);
  return result;
}

uint64_t type metadata accessor for BeaconPayloadv1(uint64_t a1)
{
  uint64_t result;

  result = qword_101107530;
  if (!qword_101107530)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconPayloadv1);
  return result;
}

void sub_10078E27C(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_10078E2E0 + dword_10078E484[sub_10001AA44(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_10078E2F0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;

  v5 = v2;
  v6 = v3;
  v7 = BYTE2(v3);
  v8 = BYTE3(v3);
  v9 = BYTE4(v3);
  v10 = BYTE5(v3);
  sub_10001BBBC(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v11);
}

uint64_t BeaconPayloadv1.encode()()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t *v42;
  double v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  unsigned int *v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  void (*v57)(char *, _QWORD, uint64_t);
  unint64_t v58;
  unsigned int v59;
  unsigned int *v60;
  uint64_t *v61;
  void *v62;
  void *v63;
  __int128 v64;

  v2 = type metadata accessor for HashAlgorithm(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = (void (*)(char *, _QWORD, uint64_t))sub_10078EBD8();
  v58 = v6;
  v8 = *v0;
  v7 = v0[1];
  v56 = (void (*)(char *, uint64_t))objc_autoreleasePoolPush();
  sub_10001BBBC(v8, v7);
  sub_1007E7118(v8, v7);
  if (!v1)
  {
    v11 = v9;
    v53 = v0;
    v54 = v3;
    v55 = v5;
    sub_10001BC14(v8, v7);
    v12 = sub_1007E3D28(v11, 0);
    v14 = v13;
    CCECCryptorRelease(v11);
    v29 = sub_1002FB6C8(v12, v14);
    v31 = v30;
    sub_10001BBBC(v29, v30);
    v52 = (unsigned int *)objc_autoreleasePoolPush();
    v33 = (uint64_t)v57;
    v32 = v58;
    sub_1007E5D00((uint64_t *)&v60);
    objc_autoreleasePoolPop(v52);
    sub_10001BC14(v29, v31);
    sub_10001BC14(v29, v31);
    v51 = v61;
    v52 = v60;
    objc_autoreleasePoolPop(v56);
    sub_10001BC14(v33, v32);
    v64 = xmmword_100E22FC0;
    v34 = v54;
    v35 = v55;
    v36 = *(void (**)(char *))(v54 + 104);
    LODWORD(v58) = enum case for HashAlgorithm.sha256(_:);
    v36(v55);
    v37 = Data.hash(algorithm:)(v35, v8, v7);
    v39 = v38;
    v40 = *(void (**)(char *, uint64_t))(v34 + 8);
    v40(v35, v2);
    sub_10078E27C(v37, v39);
    sub_10001BC14(v37, v39);
    v41 = type metadata accessor for BeaconPayloadv1(0);
    v42 = v53;
    v43 = Date.timeIntervalSinceReferenceDate.getter(v41);
    if ((~*(_QWORD *)&v43 & 0x7FF0000000000000) != 0)
    {
      if (v43 > -1.0)
      {
        v56 = v40;
        v57 = (void (*)(char *, _QWORD, uint64_t))v36;
        if (v43 < 4294967300.0)
        {
          v59 = bswap32(v43);
          v62 = &type metadata for UnsafeRawBufferPointer;
          v63 = &protocol witness table for UnsafeRawBufferPointer;
          v60 = &v59;
          v61 = (uint64_t *)&v60;
          v44 = sub_10001AA44(&v60, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          Data._Representation.append(contentsOf:)(*v44, v44[1]);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
          LOBYTE(v59) = *((_BYTE *)v42 + *(int *)(v41 + 24));
          v62 = &type metadata for UnsafeRawBufferPointer;
          v63 = &protocol witness table for UnsafeRawBufferPointer;
          v60 = &v59;
          v61 = (uint64_t *)((char *)&v59 + 1);
          v45 = sub_10001AA44(&v60, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          Data._Representation.append(contentsOf:)(*v45, v45[1]);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v60);
          v47 = (unint64_t)v51;
          v46 = (uint64_t)v52;
          sub_10078E27C((uint64_t)v52, (uint64_t)v51);
          v48 = *v42;
          v49 = v42[1];
          v50 = v55;
          v57(v55, v58, v2);
          v15 = Data.hash(algorithm:)(v50, v48, v49);
          v56(v50, v2);
          sub_10001BC14(v46, v47);
          return v15;
        }
LABEL_13:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_13;
  }
  v10 = sub_10001BC14(v8, v7);
  v15 = static os_log_type_t.error.getter(v10);
  if (qword_1010E9F78 != -1)
    swift_once(&qword_1010E9F78, sub_1007E28B4);
  v16 = qword_1011B77E0;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  v60 = (unsigned int *)v1;
  swift_errorRetain(v1);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v20 = String.init<A>(describing:)(&v60, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Error deriving advertisementKey: %@", 35, 2, v18);
  swift_bridgeObjectRelease();
  v23 = sub_1000D95A8();
  v24 = swift_allocError(&type metadata for CryptoTokenError, v23, 0, 0);
  *v25 = 1;
  swift_willThrow(v24);
  swift_errorRelease(v1);
  v27 = (uint64_t)v57;
  v26 = v58;
  objc_autoreleasePoolPop(v56);
  sub_10001BC14(v27, v26);
  return v15;
}

uint64_t sub_10078E978(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10078E9B8 + 4 * byte_100E4F600[a1]))(0x7369747265766461, 0xED0000746E656D65);
}

uint64_t sub_10078E9B8()
{
  return 0x6D617473656D6974;
}

uint64_t sub_10078E9D8()
{
  return 0x617461446174656DLL;
}

unint64_t sub_10078E9F0()
{
  return 0xD000000000000010;
}

uint64_t sub_10078EA0C()
{
  return 0x656475746974616CLL;
}

uint64_t sub_10078EA24()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_10078EA40()
{
  return 0xD000000000000012;
}

uint64_t sub_10078EA60()
{
  return 0x737574617473;
}

void sub_10078EA74(char *a1)
{
  sub_10051474C(*a1);
}

void sub_10078EA80()
{
  char *v0;

  sub_100516E2C(0, *v0);
}

void sub_10078EA8C(uint64_t a1)
{
  char *v1;

  sub_100515E58(a1, *v1);
}

void sub_10078EA94(uint64_t a1)
{
  char *v1;

  sub_100516E2C(a1, *v1);
}

unint64_t sub_10078EA9C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100790B30(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10078EAC8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10078E978(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t BeaconPayloadv1.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for BeaconPayloadv1(0) + 20);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t BeaconPayloadv1.metaData.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0) + 24));
}

double BeaconPayloadv1.latitude.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0) + 28));
}

double BeaconPayloadv1.longitude.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0) + 32));
}

double BeaconPayloadv1.horizontalAccuracy.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0) + 36));
}

uint64_t BeaconPayloadv1.status.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for BeaconPayloadv1(0) + 40));
}

uint64_t sub_10078EBD8()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  int *v3;
  _QWORD *v4;
  double v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  void *v15;
  __int128 v16;

  v16 = xmmword_100E22FC0;
  v1 = type metadata accessor for BeaconPayloadv1(0);
  v2 = *(double *)(v0 + *(int *)(v1 + 28)) * 10000000.0;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = (int *)v1;
  LODWORD(v12) = bswap32((int)v2);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v12;
  *((_QWORD *)&v13 + 1) = (char *)&v12 + 4;
  v4 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v4, v4[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  v5 = *(double *)(v0 + v3[8]) * 10000000.0;
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v5 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v5 >= 2147483650.0)
    goto LABEL_13;
  LODWORD(v12) = bswap32((int)v5);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v12;
  *((_QWORD *)&v13 + 1) = (char *)&v12 + 4;
  v6 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v6, v6[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  v12 = *(_QWORD *)(v0 + v3[9]);
  v13 = xmmword_100E4F5F0;
  v7 = sub_100059570();
  scale<A, B>(_:_:)(&v11, &v12, &v13, &type metadata for UInt8, &type metadata for Double, v7, &protocol witness table for Double, &protocol witness table for Double);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v11;
  *((_QWORD *)&v13 + 1) = &v12;
  v8 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v8, v8[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  LOBYTE(v12) = *(_BYTE *)(v0 + v3[10]);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v12;
  *((_QWORD *)&v13 + 1) = (char *)&v12 + 1;
  v9 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v9, v9[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  return v16;
}

uint64_t sub_10078EE58()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  int *v3;
  _QWORD *v4;
  double v5;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;
  uint64_t v12;
  __int128 v13;
  void *v14;
  void *v15;
  __int128 v16;

  v16 = xmmword_100E22FC0;
  v1 = type metadata accessor for BeaconPayloadV2(0);
  v2 = *(double *)(v0 + *(int *)(v1 + 24)) * 10000000.0;
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 >= 2147483650.0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = (int *)v1;
  LODWORD(v12) = bswap32((int)v2);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v12;
  *((_QWORD *)&v13 + 1) = (char *)&v12 + 4;
  v4 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v4, v4[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  v5 = *(double *)(v0 + v3[7]) * 10000000.0;
  if ((~*(_QWORD *)&v5 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v5 <= -2147483650.0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
  }
  if (v5 >= 2147483650.0)
    goto LABEL_13;
  LODWORD(v12) = bswap32((int)v5);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v12;
  *((_QWORD *)&v13 + 1) = (char *)&v12 + 4;
  v6 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v6, v6[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  v12 = *(_QWORD *)(v0 + v3[8]);
  v13 = xmmword_100E4F5F0;
  v7 = sub_100059570();
  scale<A, B>(_:_:)(&v11, &v12, &v13, &type metadata for UInt8, &type metadata for Double, v7, &protocol witness table for Double, &protocol witness table for Double);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v11;
  *((_QWORD *)&v13 + 1) = &v12;
  v8 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v8, v8[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  LOBYTE(v12) = *(_BYTE *)(v0 + v3[9]);
  v14 = &type metadata for UnsafeRawBufferPointer;
  v15 = &protocol witness table for UnsafeRawBufferPointer;
  *(_QWORD *)&v13 = &v12;
  *((_QWORD *)&v13 + 1) = (char *)&v12 + 1;
  v9 = sub_10001AA44(&v13, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v9, v9[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  return v16;
}

uint64_t sub_10078F0DC()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = BeaconPayloadv1.encode()();
  if (v0)
    return v2;
  return result;
}

uint64_t sub_10078F104@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD v17[12];
  __int128 v18;

  v17[11] = a6;
  v12 = type metadata accessor for Date(0);
  __chkstk_darwin(v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001BBBC(a2, a3);
  v15 = Data.subObject<A>(range:)(&v18, 32, 36, 0, a2, a3, &type metadata for UInt32, &protocol witness table for UInt32);
  if (!v6)
  {
    v17[9] = a4;
    v17[10] = v12;
    Date.init(timeIntervalSinceReferenceDate:)(v15);
    Data.subObject<A>(range:)(&v18, 36, 37, 0, a2, a3, &type metadata for UInt8, &protocol witness table for UInt8);
    v17[7] = a1;
    v17[8] = a2;
    v17[5] = v14;
    v17[6] = a5;
    __asm { BR              X10 }
  }
  sub_10001BC14(a4, a5);
  sub_10001BC14(a2, a3);

  return sub_10001BC14(a2, a3);
}

uint64_t sub_10078F718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconPayloadv1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10078F75C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD v17[12];
  __int128 v18;

  v17[11] = a6;
  v12 = type metadata accessor for Date(0);
  __chkstk_darwin(v12);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001BBBC(a2, a3);
  v15 = Data.subObject<A>(range:)(&v18, 0, 4, 0, a2, a3, &type metadata for UInt32, &protocol witness table for UInt32);
  if (!v6)
  {
    v17[9] = a4;
    v17[10] = v12;
    Date.init(timeIntervalSinceReferenceDate:)(v15);
    Data.subObject<A>(range:)(&v18, 4, 5, 0, a2, a3, &type metadata for UInt8, &protocol witness table for UInt8);
    v17[7] = a1;
    v17[8] = a2;
    v17[5] = v14;
    v17[6] = a5;
    __asm { BR              X10 }
  }
  sub_10001BC14(a4, a5);
  sub_10001BC14(a2, a3);

  return sub_10001BC14(a2, a3);
}

void sub_10078FD70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BeaconPayloadv1.init(using:data:advertisement:)(a1, a2, a3);
}

BOOL _s12searchpartyd15BeaconPayloadv1V2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v66 = (int *)type metadata accessor for BeaconPayloadv1(0);
  v4 = __chkstk_darwin(v66);
  v75 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v73 = (char *)&v66 - v7;
  v8 = __chkstk_darwin(v6);
  v72 = (char *)&v66 - v9;
  v10 = __chkstk_darwin(v8);
  v68 = (char *)&v66 - v11;
  v12 = __chkstk_darwin(v10);
  v67 = (uint64_t)&v66 - v13;
  v14 = __chkstk_darwin(v12);
  v71 = (char *)&v66 - v15;
  v16 = __chkstk_darwin(v14);
  v70 = (uint64_t)&v66 - v17;
  v18 = __chkstk_darwin(v16);
  v69 = (uint64_t)&v66 - v19;
  v20 = __chkstk_darwin(v18);
  *(_QWORD *)&v74 = (char *)&v66 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v66 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v66 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v66 - v28;
  v30 = *a1;
  v31 = a1[1];
  v33 = *a2;
  v32 = a2[1];
  sub_10001BBBC(*a1, v31);
  sub_10001BBBC(v33, v32);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v31);
  v35 = v34;
  sub_10001BC14(v33, v32);
  v36 = v30;
  v37 = (uint64_t)a2;
  v38 = v31;
  v39 = (uint64_t)a1;
  sub_10001BC14(v36, v38);
  sub_100790888((uint64_t)a1, (uint64_t)v29);
  sub_100790888((uint64_t)a2, (uint64_t)v27);
  if ((v35 & 1) == 0)
  {
    sub_1007908CC((uint64_t)v27);
    sub_1007908CC((uint64_t)v29);
    sub_100790888((uint64_t)a1, (uint64_t)v24);
    v65 = (uint64_t)a2;
    v43 = v74;
    sub_100790888(v65, v74);
    goto LABEL_9;
  }
  v40 = v66;
  v41 = static Date.== infix(_:_:)(&v29[v66[5]], &v27[v66[5]]);
  sub_1007908CC((uint64_t)v27);
  sub_1007908CC((uint64_t)v29);
  sub_100790888((uint64_t)a1, (uint64_t)v24);
  v42 = (uint64_t)a2;
  v43 = v74;
  sub_100790888(v42, v74);
  if ((v41 & 1) == 0)
  {
LABEL_9:
    sub_1007908CC(v43);
    sub_1007908CC((uint64_t)v24);
    v46 = v69;
    sub_100790888((uint64_t)a1, v69);
    v47 = v70;
    sub_100790888(v37, v70);
    v49 = (uint64_t)v72;
    v48 = (uint64_t)v73;
    v50 = (uint64_t)v71;
    goto LABEL_10;
  }
  v44 = v24[v40[6]];
  sub_1007908CC((uint64_t)v24);
  v45 = *(unsigned __int8 *)(v43 + v40[6]);
  sub_1007908CC(v43);
  v46 = v69;
  sub_100790888((uint64_t)a1, v69);
  v47 = v70;
  sub_100790888(v37, v70);
  v49 = (uint64_t)v72;
  v48 = (uint64_t)v73;
  v50 = (uint64_t)v71;
  if (v44 != v45)
  {
LABEL_10:
    sub_1007908CC(v47);
    sub_1007908CC(v46);
    sub_100790888(v39, v50);
    v54 = v67;
    sub_100790888(v37, v67);
    v55 = (uint64_t)v68;
    goto LABEL_11;
  }
  v51 = v66;
  v52 = *(double *)(v46 + v66[7]);
  sub_1007908CC(v46);
  v53 = *(double *)(v47 + v51[7]);
  sub_1007908CC(v47);
  sub_100790888(v39, v50);
  v54 = v67;
  sub_100790888(v37, v67);
  v55 = (uint64_t)v68;
  if (v52 != v53)
  {
LABEL_11:
    sub_1007908CC(v54);
    sub_1007908CC(v50);
    sub_100790888(v39, v55);
    sub_100790888(v37, v49);
    goto LABEL_12;
  }
  v56 = *(double *)(v50 + v51[8]);
  sub_1007908CC(v50);
  v57 = *(double *)(v54 + v51[8]);
  sub_1007908CC(v54);
  sub_100790888(v39, v55);
  sub_100790888(v37, v49);
  if (v56 != v57)
  {
LABEL_12:
    sub_1007908CC(v49);
    sub_1007908CC(v55);
    sub_100790888(v39, v48);
    v61 = v75;
    sub_100790888(v37, v75);
    goto LABEL_13;
  }
  v77 = *(_QWORD *)(v55 + v51[9]);
  v74 = xmmword_100E4F5F0;
  v76 = xmmword_100E4F5F0;
  v58 = v55;
  v59 = sub_100059570();
  scale<A, B>(_:_:)(&v78, &v77, &v76, &type metadata for UInt8, &type metadata for Double, v59, &protocol witness table for Double, &protocol witness table for Double);
  v60 = v78;
  v77 = *(_QWORD *)(v49 + v51[9]);
  v76 = v74;
  scale<A, B>(_:_:)(&v78, &v77, &v76, &type metadata for UInt8, &type metadata for Double, v59, &protocol witness table for Double, &protocol witness table for Double);
  LODWORD(v59) = v78;
  sub_1007908CC(v49);
  sub_1007908CC(v58);
  sub_100790888(v39, v48);
  v61 = v75;
  sub_100790888(v37, v75);
  if (v60 == (_DWORD)v59)
  {
    v62 = v66;
    v63 = *(unsigned __int8 *)(v48 + v66[10]);
    sub_1007908CC(v48);
    LODWORD(v62) = *(unsigned __int8 *)(v61 + v62[10]);
    sub_1007908CC(v61);
    return v63 == (_DWORD)v62;
  }
LABEL_13:
  sub_1007908CC(v61);
  sub_1007908CC(v48);
  return 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return a1;
}

uint64_t *initializeWithCopy for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t *assignWithCopy for BeaconPayloadv1(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *initializeWithTake for BeaconPayloadv1(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t *assignWithTake for BeaconPayloadv1(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t getEnumTagSinglePayload for BeaconPayloadv1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007906A0);
}

uint64_t sub_1007906A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadv1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100790734);
}

char *sub_100790734(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1007907B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_100E4F6B8;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100790844()
{
  unint64_t result;

  result = qword_101107580;
  if (!qword_101107580)
  {
    result = swift_getWitnessTable(byte_100E4F82C, &type metadata for BeaconPayloadv1.PayloadCreationError);
    atomic_store(result, (unint64_t *)&qword_101107580);
  }
  return result;
}

uint64_t sub_100790888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconPayloadv1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007908CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeaconPayloadv1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadv1.PayloadCreationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100790954 + 4 * byte_100E4F60D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100790988 + 4 * byte_100E4F608[v4]))();
}

uint64_t sub_100790988(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100790990(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100790998);
  return result;
}

uint64_t sub_1007909A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007909ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1007909B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007909B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadv1.PayloadCreationError()
{
  return &type metadata for BeaconPayloadv1.PayloadCreationError;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadv1.EncodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100790A20 + 4 * byte_100E4F617[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100790A54 + 4 * byte_100E4F612[v4]))();
}

uint64_t sub_100790A54(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100790A5C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100790A64);
  return result;
}

uint64_t sub_100790A70(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100790A78);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100790A7C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100790A84(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadv1.EncodingKeys()
{
  return &type metadata for BeaconPayloadv1.EncodingKeys;
}

unint64_t sub_100790AA4()
{
  unint64_t result;

  result = qword_101107588;
  if (!qword_101107588)
  {
    result = swift_getWitnessTable("-$$", &type metadata for BeaconPayloadv1.EncodingKeys);
    atomic_store(result, (unint64_t *)&qword_101107588);
  }
  return result;
}

unint64_t sub_100790AEC()
{
  unint64_t result;

  result = qword_101107590;
  if (!qword_101107590)
  {
    result = swift_getWitnessTable(byte_100E4F804, &type metadata for BeaconPayloadv1.PayloadCreationError);
    atomic_store(result, (unint64_t *)&qword_101107590);
  }
  return result;
}

unint64_t sub_100790B30(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104B3E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_100790B78@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE20(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100790BA4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_100E4FCD0);
  sub_100C1C4BC(KeyPath, v3, a2);
  return swift_release();
}

uint64_t sub_100790BEC(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t ObjectType;
  id v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  void *v83;

  v74 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v74);
  v75 = (uint64_t)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = __chkstk_darwin(v6);
  v73 = (uint64_t)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v72 = (uint64_t)&v71 - v10;
  __chkstk_darwin(v9);
  v76 = (uint64_t)&v71 - v11;
  v12 = type metadata accessor for Date(0);
  v80 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for ShareRecord(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v21, v22);
  v78 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v78);
  v23 = v19[6];
  v79 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v2 + v23, v15);
  v24 = &v21[v19[6]];
  v25 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v24, v15, v25);
  v27 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if ((v26 & 1) == 0)
  {
    v28 = UUID.uuidString.getter(v27);
    *((_QWORD *)&v82 + 1) = &type metadata for String;
    v83 = &protocol witness table for String;
    *(_QWORD *)&v81 = v28;
    *((_QWORD *)&v81 + 1) = v29;
    CKRecordKeyValueSetting.subscript.setter(&v81, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  }
  v31 = v79;
  v30 = v80;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v80 + 16);
  v32(v14, v79 + v19[7], v12);
  v33 = &v21[v19[7]];
  v71 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v34 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v33, v12, v71);
  v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v14, v12);
  if ((v34 & 1) == 0)
  {
    *((_QWORD *)&v82 + 1) = v12;
    v83 = &protocol witness table for Date;
    v36 = (char *)sub_100018F08(&v81);
    v32(v36, (uint64_t)v33, v12);
    CKRecordKeyValueSetting.subscript.setter(&v81, 0x7461446572616873, 0xE900000000000065, ObjectType);
  }
  v37 = v76;
  sub_10000F9B8(v31 + v19[8], v76, (uint64_t *)&unk_1010EA690);
  v38 = (uint64_t)&v21[v19[8]];
  v39 = v75;
  v40 = v75 + *(int *)(v74 + 48);
  sub_10000F9B8(v37, v75, (uint64_t *)&unk_1010EA690);
  v41 = v39;
  sub_10000F9B8(v38, v40, (uint64_t *)&unk_1010EA690);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  if (v42(v41, 1, v12) == 1)
  {
    sub_100004048(v37, (uint64_t *)&unk_1010EA690);
    if (v42(v40, 1, v12) == 1)
    {
      sub_100004048(v41, (uint64_t *)&unk_1010EA690);
      v44 = ObjectType;
      v43 = v78;
      goto LABEL_16;
    }
  }
  else
  {
    v45 = v41;
    v46 = v41;
    v47 = v72;
    sub_10000F9B8(v45, v72, (uint64_t *)&unk_1010EA690);
    if (v42(v40, 1, v12) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v80 + 32))(v14, v40, v12);
      LODWORD(v74) = dispatch thunk of static Equatable.== infix(_:_:)(v47, v14, v12, v71);
      v35(v14, v12);
      sub_100004048(v76, (uint64_t *)&unk_1010EA690);
      v35((char *)v47, v12);
      sub_100004048(v46, (uint64_t *)&unk_1010EA690);
      v44 = ObjectType;
      v43 = v78;
      if ((v74 & 1) != 0)
        goto LABEL_16;
      goto LABEL_12;
    }
    sub_100004048(v76, (uint64_t *)&unk_1010EA690);
    v35((char *)v47, v12);
    v41 = v46;
  }
  sub_100004048(v41, &qword_1010ED570);
  v44 = ObjectType;
  v43 = v78;
LABEL_12:
  v48 = v73;
  sub_10000F9B8(v38, v73, (uint64_t *)&unk_1010EA690);
  if (v42(v48, 1, v12) == 1)
  {
    sub_100004048(v48, (uint64_t *)&unk_1010EA690);
    v81 = 0u;
    v82 = 0u;
    v83 = 0;
  }
  else
  {
    *((_QWORD *)&v82 + 1) = v12;
    v83 = &protocol witness table for Date;
    v49 = sub_100018F08(&v81);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v80 + 32))(v49, v48, v12);
  }
  CKRecordKeyValueSetting.subscript.setter(&v81, 0x6974617269707865, 0xEA00000000006E6FLL, v44);
LABEL_16:
  v50 = v19[9];
  v51 = v79;
  v52 = *(unsigned __int8 *)(v79 + v50);
  v54 = *(_QWORD *)(v79 + v50 + 8);
  v53 = *(_QWORD *)(v79 + v50 + 16);
  v55 = &v21[v50];
  if (v52 != *v55
    || ((v56 = *((_QWORD *)v55 + 1), v57 = *((_QWORD *)v55 + 2), v54 != v56) || v53 != v57)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v53, v56, v57, 0) & 1) == 0)
  {
    *((_QWORD *)&v82 + 1) = &type metadata for String;
    v83 = &protocol witness table for String;
    *(_QWORD *)&v81 = v54;
    *((_QWORD *)&v81 + 1) = v53;
    swift_bridgeObjectRetain(v53);
    CKRecordKeyValueSetting.subscript.setter(&v81, 0x6148656572616873, 0xEC000000656C646ELL, v44);
  }
  v58 = v19[10];
  v59 = *(_QWORD *)(v51 + v58);
  v60 = *(_QWORD *)(v51 + v58 + 8);
  v61 = &v21[v58];
  v63 = *(_QWORD *)v61;
  v62 = *((_QWORD *)v61 + 1);
  if ((v59 != *(_QWORD *)v61 || v60 != v62)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v59, v60, *(_QWORD *)v61, *((_QWORD *)v61 + 1), 0) & 1) == 0)
  {
    *((_QWORD *)&v82 + 1) = &type metadata for String;
    v83 = &protocol witness table for String;
    *(_QWORD *)&v81 = v63;
    *((_QWORD *)&v81 + 1) = v62;
    swift_bridgeObjectRetain(v62);
    CKRecordKeyValueSetting.subscript.setter(&v81, 0xD000000000000015, 0x8000000100EC2AE0, v44);
  }
  v64 = v19[11];
  v65 = *(_QWORD *)(v51 + v64);
  v66 = *(_QWORD *)&v21[v64];
  if (v65 != v66)
  {
    *((_QWORD *)&v82 + 1) = &type metadata for UInt64;
    v83 = &protocol witness table for UInt64;
    *(_QWORD *)&v81 = v66;
    CKRecordKeyValueSetting.subscript.setter(&v81, 0xD000000000000011, 0x8000000100EC7600, v44);
  }
  v67 = v19[12];
  v68 = *(unsigned __int8 *)(v51 + v67);
  v69 = v21[v67];
  if (v68 == (_DWORD)v69)
  {
    sub_1000126B0((uint64_t)v21, type metadata accessor for ShareRecord);
    return swift_unknownObjectRelease(v43);
  }
  else
  {
    *((_QWORD *)&v82 + 1) = &type metadata for Int;
    v83 = &protocol witness table for Int;
    *(_QWORD *)&v81 = v69;
    CKRecordKeyValueSetting.subscript.setter(&v81, 0x7079546572616873, 0xE900000000000065, v44);
    swift_unknownObjectRelease(v43);
    return sub_1000126B0((uint64_t)v21, type metadata accessor for ShareRecord);
  }
}

uint64_t sub_100791358(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_101108230);
  return a2(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_1007913A0(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(_QWORD);
  id v13;
  uint64_t ObjectType;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  id v79;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  void *v91;

  v3 = v2;
  v6 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v11, v12);
  v13 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v13);
  v15 = *(unsigned __int8 *)(v3 + 24);
  v84 = v9;
  v85 = ObjectType;
  v86 = v13;
  v87 = v11;
  if (v15 != 1)
  {
    v23 = *(_QWORD *)(v3 + 16);
    if (v23 != 1)
    {
      if (qword_1010E9AE0 != -1)
        swift_once(&qword_1010E9AE0, sub_100265974);
      v36 = type metadata accessor for Logger(0);
      v37 = sub_10001A9E8(v36, (uint64_t)qword_1011B6C50);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.fault.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v40 = 134217984;
        v88 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v40 + 4, v40 + 12);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unexpected OwnedBeaconGroup version: %ld!", v40, 0xCu);
        swift_slowDealloc(v40, -1, -1);
      }

      goto LABEL_17;
    }
    v24 = v3 + *(int *)(v9 + 28);
    v25 = &v8[*(int *)(v6 + 20)];
    v26 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v25, v24, v26);
    *(_QWORD *)v8 = 1;
    v8[8] = 0;
    v27 = sub_10036E978();
    v29 = v28;
    sub_1000126B0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    CKRecordKeyValueSetting.subscript.getter(&v88, 0x657264644163616DLL, 0xEA00000000007373, ObjectType, &type metadata for Data);
    v30 = v88;
    v31 = v89;
    sub_10001BBBC(v27, v29);
    if (v31 >> 60 == 15)
    {
      sub_10001EF3C(v30, v31);
      sub_10001EF3C(v27, v29);
    }
    else
    {
      sub_10001BD08(v30, v31);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v31);
      v42 = v41;
      sub_10001BC14(v27, v29);
      sub_10001EF3C(v30, v31);
      sub_10001EF3C(v30, v31);
      if ((v42 & 1) != 0)
      {
LABEL_16:
        sub_10001BC14(v27, v29);
        goto LABEL_17;
      }
    }
    v90 = &type metadata for Data;
    v91 = &protocol witness table for Data;
    v88 = v27;
    v89 = v29;
    sub_10001BBBC(v27, v29);
    CKRecordKeyValueSetting.subscript.setter(&v88, 0x657264644163616DLL, 0xEA00000000007373, v85);
    goto LABEL_16;
  }
  v16 = CKRecordKeyValueSetting.subscript.getter(&v88, 0x657264644163616DLL, 0xEA00000000007373, ObjectType, &type metadata for Data);
  v17 = v88;
  v18 = v89;
  v19 = MACAddress.dataRepresentation.getter(v16);
  v21 = v20;
  if (v18 >> 60 == 15)
  {
    sub_10001EF3C(v17, v18);
    v22 = sub_10001EF3C(v19, v21);
    v9 = v84;
  }
  else
  {
    sub_10001BD08(v17, v18);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
    v33 = v32;
    sub_10001BC14(v19, v21);
    sub_10001EF3C(v17, v18);
    v22 = sub_10001EF3C(v17, v18);
    v9 = v84;
    if ((v33 & 1) != 0)
      goto LABEL_17;
  }
  v34 = MACAddress.dataRepresentation.getter(v22);
  v90 = &type metadata for Data;
  v91 = &protocol witness table for Data;
  v88 = v34;
  v89 = v35;
  CKRecordKeyValueSetting.subscript.setter(&v88, 0x657264644163616DLL, 0xEA00000000007373, v85);
LABEL_17:
  v43 = *(int *)(v9 + 40);
  v83 = v3;
  v44 = *(_QWORD *)(v3 + v43);
  v45 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v46 = sub_1003730E4();
  v47 = sub_100373128();
  v48 = sub_100059BCC();
  v49 = v9;
  v50 = sub_100006204((unint64_t *)&unk_1010F97F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B208);
  v51 = sub_100006204(&qword_1011082F0, type metadata accessor for OwnedBeaconGroup.PairingState, (uint64_t)&unk_100E3B1E0);
  v52 = Dictionary<>.dataRepresentation.getter(v44, &type metadata for OwnedBeaconGroup.SerialNumber, v45, v46, v47, v48, v50, v51);
  v54 = v53;
  v55 = *(_QWORD *)&v87[*(int *)(v49 + 40)];
  swift_bridgeObjectRetain(v55);
  v81 = v46;
  v82 = v45;
  v56 = v46;
  v57 = v47;
  v59 = Dictionary<>.dataRepresentation.getter(v58, &type metadata for OwnedBeaconGroup.SerialNumber, v45, v56, v47, v48, v50, v51);
  v61 = v60;
  swift_bridgeObjectRelease();
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v52, v54);
  LOBYTE(v45) = v62;
  sub_10001BC14(v59, v61);
  sub_10001BC14(v52, v54);
  if ((v45 & 1) == 0)
  {
    swift_bridgeObjectRetain(v55);
    v64 = Dictionary<>.dataRepresentation.getter(v63, &type metadata for OwnedBeaconGroup.SerialNumber, v82, v81, v57, v48, v50, v51);
    v66 = v65;
    swift_bridgeObjectRelease();
    v90 = &type metadata for Data;
    v91 = &protocol witness table for Data;
    v88 = v64;
    v89 = v66;
    CKRecordKeyValueSetting.subscript.setter(&v88, 0x614D6E6F63616562, 0xE900000000000070, v85);
  }
  v67 = v83;
  v68 = v84;
  v69 = *(int *)(v84 + 36);
  v70 = *(_QWORD *)(v83 + v69);
  v71 = *(_QWORD *)(v83 + v69 + 8);
  v72 = (uint64_t)v87;
  v73 = &v87[v69];
  v75 = *(_QWORD *)v73;
  v74 = *((_QWORD *)v73 + 1);
  if ((v70 != *(_QWORD *)v73 || v71 != v74)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v70, v71, *(_QWORD *)v73, *((_QWORD *)v73 + 1), 0) & 1) == 0)
  {
    v90 = &type metadata for String;
    v91 = &protocol witness table for String;
    v88 = v75;
    v89 = v74;
    swift_bridgeObjectRetain(v74);
    CKRecordKeyValueSetting.subscript.setter(&v88, 1701667182, 0xE400000000000000, v85);
  }
  v76 = *(int *)(v68 + 32);
  v77 = *(unsigned __int8 *)(v67 + v76);
  v78 = *(unsigned __int8 *)(v72 + v76);
  if (v77 == v78)
  {
    sub_1000126B0(v72, type metadata accessor for OwnedBeaconGroup);
    return swift_unknownObjectRelease(v86);
  }
  else
  {
    v90 = &type metadata for Bool;
    v91 = &protocol witness table for Bool;
    LOBYTE(v88) = v78;
    v79 = v86;
    CKRecordKeyValueSetting.subscript.setter(&v88, 0x616E454E4D467369, 0xEC00000064656C62, v85);
    swift_unknownObjectRelease(v79);
    return sub_1000126B0(v72, type metadata accessor for OwnedBeaconGroup);
  }
}

uint64_t sub_100791A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 v20;
  _QWORD v22[4];

  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v8, &qword_1010F46C0);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100004048((uint64_t)v8, &qword_1010F46C0);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (!v13)
    {
LABEL_6:
      v19 = 0;
      return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v20 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v12 = v20 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (!v13)
      goto LABEL_6;
  }
  v14 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16))
    goto LABEL_6;
  v22[0] = 0;
  v22[1] = 0;
  v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
  return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_100791C18(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7630, 0x63536E6F63616562, 0xEE00676E696E6E61);
}

uint64_t sub_100791C44(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7648, 0xD000000000000014, 0x8000000100EE4240);
}

void sub_100791C68(char *a1)
{
  sub_100512B38(*a1);
}

void sub_100791C74()
{
  char *v0;

  sub_100516860(0, *v0);
}

void sub_100791C80(uint64_t a1)
{
  char *v1;

  sub_1005157D8(a1, *v1);
}

void sub_100791C88(uint64_t a1)
{
  char *v1;

  sub_100516860(a1, *v1);
}

unint64_t sub_100791C90@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1007B8314(*a1);
  *a2 = result;
  return result;
}

id sub_100791CBC()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  objc_class *v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;
  _QWORD v11[14];

  v1 = *(void **)(v0 + 272);
  if (v1)
  {
    v2 = *(id *)(v0 + 272);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 280);
    v11[4] = &off_1010789E8;
    v11[5] = &off_101091D20;
    v11[6] = &off_101091C90;
    v11[7] = &off_10105DA78;
    v11[8] = &off_101091CC0;
    v11[9] = &off_1010B71E8;
    v11[10] = &off_10106BB10;
    v11[11] = &off_101063648;
    v11[12] = &off_10108FC30;
    v11[13] = &off_1010BD648;
    v11[3] = type metadata accessor for BeaconManagerService(0);
    v11[0] = v0;
    v4 = (objc_class *)type metadata accessor for BeaconManagerTrampoline();
    v5 = (char *)objc_allocWithZone(v4);
    sub_100599F18((uint64_t)v11, (uint64_t)&v5[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation]);
    *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore] = v3;
    v10.receiver = v5;
    v10.super_class = v4;
    swift_retain();
    swift_retain();
    v6 = objc_msgSendSuper2(&v10, "init");
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
    v7 = *(void **)(v0 + 272);
    *(_QWORD *)(v0 + 272) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

_QWORD *sub_100791DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers);
  if (v2)
  {
    v3 = *(_QWORD **)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers);
  }
  else
  {
    v3 = sub_100791E60(v0);
    *(_QWORD *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  swift_bridgeObjectRetain(v2);
  return v3;
}

_QWORD *sub_100791E60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  uint64_t v44;
  _QWORD *v45;

  v2 = type metadata accessor for DarwinNotifications(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPEvaluateLocalBeaconingNotification);
  v8 = v7;
  v9 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v9 + 16, a1);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v45 = _swiftEmptyDictionarySingleton;
  sub_10010A630((uint64_t)sub_1007BD638, v9, v6, v8, isUniquelyReferenced_nonNull_native);
  v11 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(FAFamilyUpdateNotification);
  v14 = v13;
  v15 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v15 + 16, a1);
  swift_retain();
  v16 = swift_isUniquelyReferenced_nonNull_native(v11);
  v45 = v11;
  sub_10010A630((uint64_t)sub_1007BD658, v15, v12, v14, v16);
  v17 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DarwinNotifications.followersChanged(_:), v2);
  v19 = DarwinNotifications.rawValue.getter(v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v22 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v22 + 16, a1);
  swift_retain();
  v23 = swift_isUniquelyReferenced_nonNull_native(v17);
  v45 = v17;
  sub_10010A630((uint64_t)sub_1007BD660, v22, v19, v21, v23);
  v24 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKIdentityUpdateNotification);
  v27 = v26;
  v28 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v28 + 16, a1);
  swift_retain();
  v29 = swift_isUniquelyReferenced_nonNull_native(v24);
  v45 = v24;
  sub_10010A630((uint64_t)sub_1007BD638, v28, v25, v27, v29);
  v30 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v31 + 16, a1);
  swift_retain();
  v32 = swift_isUniquelyReferenced_nonNull_native(v30);
  v45 = v30;
  sub_10010A630((uint64_t)sub_1007BD638, v31, 0xD000000000000021, 0x8000000100EC2C60, v32);
  v33 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  v34 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v34 + 16, a1);
  swift_retain();
  v35 = swift_isUniquelyReferenced_nonNull_native(v33);
  v45 = v33;
  sub_10010A630((uint64_t)sub_1007BD638, v34, 0xD000000000000019, 0x8000000100EC2C90, v35);
  v36 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(RTLocationsOfInterestDidChangeNotification);
  v39 = v38;
  v40 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v40 + 16, a1);
  swift_retain();
  v41 = swift_isUniquelyReferenced_nonNull_native(v36);
  v45 = v36;
  sub_10010A630((uint64_t)sub_1007BD668, v40, v37, v39, v41);
  v42 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_1007922B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[6];
  _BYTE v23[32];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9968 != -1)
    swift_once(&qword_1010E9968, sub_1000FC8C8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10027EBFC, 0, qword_1010EEF78, &type metadata for () + 1, &type metadata for () + 1);
  swift_beginAccess(a2 + 16, v23, 0, 0);
  result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    v12 = *(id *)(result + 64);
    swift_release();
    aBlock[4] = sub_1007BD670;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010928D8;
    v13 = _Block_copy(aBlock);
    v14 = swift_retain();
    static DispatchQoS.unspecified.getter(v14);
    v21 = _swiftEmptyArrayStorage;
    v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = v7;
    v16 = v4;
    v17 = v15;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v18, v19, v3, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
    return swift_release();
  }
  return result;
}

uint64_t sub_100792514(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[6];
  _BYTE v24[24];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, v24, 0, 0);
  result = swift_weakLoadStrong(a2 + 16);
  if (result)
  {
    v12 = *(id *)(result + 64);
    swift_release();
    aBlock[4] = sub_1007BD670;
    aBlock[5] = a2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010928B0;
    v13 = _Block_copy(aBlock);
    v14 = swift_retain();
    static DispatchQoS.unspecified.getter(v14);
    v22 = _swiftEmptyArrayStorage;
    v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v21 = v7;
    v16 = v4;
    v17 = v15;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v3, v17);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
    _Block_release(v13);

    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
    return swift_release();
  }
  return result;
}

uint64_t sub_100792724(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_100799230();
    return swift_release();
  }
  return result;
}

uint64_t sub_100792778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = static os_log_type_t.default.getter(result);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D28, "Self-Beacon State changed", 25, 2, _swiftEmptyArrayStorage);
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, a3, v6, &type metadata for () + 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10079286C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_1007995EC();
    return swift_release();
  }
  return result;
}

_QWORD *sub_1007928C0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking))
  {
    v2 = *(_QWORD **)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking);
  }
  else
  {
    v3 = v0;
    v4 = *(_QWORD *)(v0 + 280);
    v5 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_accessoryMetadataManager);
    v6 = type metadata accessor for UnauthorizedTracking();
    swift_allocObject(v6, 48, 7);
    swift_retain();
    swift_retain();
    v2 = sub_1005639C4(v4, v5);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_10079296C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService);
  }
  else
  {
    v3 = v0;
    v4 = type metadata accessor for MaskedIdentifierService();
    swift_allocObject(v4, 56, 7);
    v5 = swift_retain();
    v2 = sub_100C33160(v5);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1007929F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator);
  }
  else
  {
    v3 = type metadata accessor for AccessoryPairingValidator();
    v2 = swift_allocObject(v3, 32, 7);
    v4 = type metadata accessor for DeviceIdentityUtility(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    swift_defaultActor_initialize(v5);
    v6 = v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
    *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
    *(_BYTE *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 5;
    *(_QWORD *)(v2 + 16) = v5;
    *(_QWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t (*sub_100792AF0())@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v0)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t (**v1)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);

  v1 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>))((char *)v0
                                                                              + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  v2 = *(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  v3 = *(_QWORD *)((char *)v0
                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock
                 + 8);
  if (v2)
  {
    v4 = *(uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>))((char *)v0
                                                                                 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  }
  else
  {
    v4 = sub_1007BD630;
    *v1 = sub_1007BD630;
    v1[1] = v0;
    swift_retain_n(v0, 2);
    sub_10001D8A8(0, v3);
  }
  sub_10001D898(v2, v3);
  return v4;
}

uint64_t sub_100792B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  dispatch_group_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  _QWORD v24[4];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  v8 = type metadata accessor for UUID(0);
  v24[0] = *(_QWORD *)(v8 - 8);
  v24[1] = v8;
  __chkstk_darwin(v8);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DateInterval(0);
  v24[2] = *(_QWORD *)(v13 - 8);
  v24[3] = v13;
  __chkstk_darwin(v13);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = dispatch_group_create();
  v17 = *(_QWORD *)(a3 + 280);
  sub_10080B648(a1, (uint64_t)&v25);
  if (v26)
  {
    sub_10000F9FC(&v25, (uint64_t)v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
    DateInterval.init(start:duration:)(v12, 1.0);
    v18 = v28;
    v19 = v29;
    v20 = sub_10001AA44(v27, v28);
    sub_1008595F4((uint64_t)v20, (uint64_t)v15, 0, 1, 0, v17, v18, v19);
    __asm { BR              X10 }
  }

  sub_100004048((uint64_t)&v25, (uint64_t *)&unk_1010EE310);
  v22 = type metadata accessor for TimeBasedKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a4, 1, 1, v22);
}

_QWORD *sub_100792FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, void *a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(char *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  id v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t Service;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t found;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  id v111;
  NSString v112;
  id v113;
  uint64_t v114;
  _QWORD *v115;
  id v116;
  id v117;
  id v118;
  uint64_t v119;
  id v120;
  id v121;
  _QWORD *v122;
  uint64_t v123;
  id v124;
  id v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t updated;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  id v146;
  id v147;
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  void *v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  char *v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  id v176;
  unsigned int v177;
  uint64_t (*v178)(char *);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  void **aBlock;
  uint64_t v186;
  Class (*v187)(uint64_t);
  void *v188;
  uint64_t (*v189)();
  uint64_t v190;
  _QWORD v191[6];

  v9 = (_QWORD *)v8;
  v175 = a8;
  v174 = a7;
  v176 = a6;
  v173 = a5;
  v169 = a4;
  v172 = a3;
  v171 = a2;
  v170 = a1;
  v10 = (void *)type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v17 = *(_QWORD *)(v16 - 8);
  v183 = v16;
  __chkstk_darwin(v16);
  v19 = (char *)&v165 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = 0x8000000100E4FAE0;
  *(_QWORD *)(v8 + 16) = 0xD000000000000014;
  *(_QWORD *)(v8 + 24) = 0x8000000100E4FAE0;
  v181 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  v177 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v178 = *(uint64_t (**)(char *))(v17 + 104);
  v20 = v178(v19);
  static DispatchQoS.unspecified.getter(v20);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v182 = v21;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v180 = v23;
  v184 = v10;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v22, v23, v10, v21);
  v24 = v15;
  v25 = v12;
  *(_QWORD *)(v8 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003ALL, 0x8000000100EE4C40, v15, v12, v19, 0);
  v26 = v177;
  v27 = ((uint64_t (*)(char *, _QWORD, uint64_t))v178)(v19, v177, v183);
  static DispatchQoS.unspecified.getter(v27);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v179 = v22;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v22, v23, v184, v182);
  v28 = v24;
  *(_QWORD *)(v8 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000051, 0x8000000100EE4C80, v24, v25, v19, 0);
  v29 = v26;
  v30 = v26;
  v31 = v183;
  v32 = (uint64_t (*)(char *, uint64_t, uint64_t))v178;
  v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v178)(v19, v30, v183);
  static DispatchQoS.unspecified.getter(v33);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v34 = v22;
  v35 = v180;
  v36 = v182;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v34, v180, v184, v182);
  *(_QWORD *)(v8 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000006ALL, 0x8000000100EE4CE0, v28, v25, v19, 0);
  v37 = v32(v19, v29, v31);
  static DispatchQoS.unspecified.getter(v37);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v179, v35, v184, v36);
  *(_QWORD *)(v8 + 80) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000057, 0x8000000100EE4D50, v28, v25, v19, 0);
  *(_QWORD *)(v8 + 88) = 0;
  v38 = v183;
  v39 = v32(v19, v29, v183);
  static DispatchQoS.unspecified.getter(v39);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v41 = v179;
  v40 = v180;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v179, v180, v184, v182);
  *(_QWORD *)(v8 + 96) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000054, 0x8000000100EE4DB0, v28, v25, v19, 0);
  v42 = v38;
  v43 = v38;
  v44 = (uint64_t (*)(char *, uint64_t, uint64_t))v178;
  v45 = ((uint64_t (*)(char *, uint64_t, uint64_t))v178)(v19, v29, v43);
  static DispatchQoS.unspecified.getter(v45);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v41, v40, v184, v182);
  *(_QWORD *)(v8 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000045, 0x8000000100EE4E10, v28, v25, v19, 0);
  v46 = v44(v19, v29, v42);
  static DispatchQoS.unspecified.getter(v46);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v47 = v182;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v41, v40, v184, v182);
  v167 = 0xD00000000000004ALL;
  *(_QWORD *)(v8 + 112) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000004ALL, 0x8000000100EE4E60, v28, v25, v19, 0);
  v48 = v29;
  v49 = v183;
  v50 = v178;
  v51 = ((uint64_t (*)(char *, uint64_t, uint64_t))v178)(v19, v48, v183);
  static DispatchQoS.unspecified.getter(v51);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v52 = v179;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v179, v180, v184, v47);
  v166 = 0xD00000000000004CLL;
  *(_QWORD *)(v8 + 120) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000004CLL, 0x8000000100EE4EB0, v28, v25, v19, 0);
  v53 = v177;
  v54 = v50;
  v55 = ((uint64_t (*)(char *, _QWORD, uint64_t))v50)(v19, v177, v49);
  static DispatchQoS.unspecified.getter(v55);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v56 = v180;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v52, v180, v184, v182);
  *(_QWORD *)(v8 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v166, 0x8000000100EE4F00, v28, v25, v19, 0);
  v57 = v53;
  v58 = v183;
  v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))v50)(v19, v57, v183);
  static DispatchQoS.unspecified.getter(v59);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v60 = v182;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v52, v56, v184, v182);
  *(_QWORD *)(v8 + 136) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v167, 0x8000000100EE4F50, v28, v25, v19, 0);
  v61 = v177;
  v62 = ((uint64_t (*)(char *, _QWORD, uint64_t))v54)(v19, v177, v58);
  static DispatchQoS.unspecified.getter(v62);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v63 = v60;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v179, v180, v184, v60);
  *(_QWORD *)(v8 + 144) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000046, 0x8000000100EE4FA0, v28, v25, v19, 0);
  v165 = v19;
  v64 = v183;
  v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v54)(v19, v61, v183);
  static DispatchQoS.unspecified.getter(v65);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v67 = v179;
  v66 = v180;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v179, v180, v184, v63);
  *(_QWORD *)(v8 + 152) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000042, 0x8000000100EE4FF0, v28, v25, v19, 0);
  v68 = v177;
  v69 = v64;
  v70 = (uint64_t (*)(char *, uint64_t, uint64_t))v178;
  v71 = ((uint64_t (*)(char *, _QWORD, uint64_t))v178)(v19, v177, v69);
  static DispatchQoS.unspecified.getter(v71);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v72 = v66;
  v73 = v66;
  v74 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v67, v72, v184, v63);
  v75 = v28;
  v76 = v28;
  v77 = v165;
  *(_QWORD *)(v8 + 160) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000043, 0x8000000100EE5040, v75, v25, v165, 0);
  v78 = v70(v77, v68, v183);
  static DispatchQoS.unspecified.getter(v78);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v79 = v25;
  v80 = v184;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v179, v73, v184, v74);
  v81 = v79;
  *(_QWORD *)(v8 + 168) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100EE5090, v76, v79, v77, 0);
  *(_QWORD *)(v8 + 176) = 0;
  v82 = type metadata accessor for MaintenanceConnectionObserveriOS();
  swift_allocObject(v82, 168, 15);
  *(_QWORD *)(v8 + 184) = sub_10067CFA0();
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_BYTE *)(v8 + 248) = 6;
  type metadata accessor for Sequencer(0);
  *(_QWORD *)(v8 + 256) = Sequencer.__allocating_init(name:softTimeout:hardTimeout:)(0xD000000000000022, 0x8000000100EE37F0, 5.0, 10.0);
  v83 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
  *(_QWORD *)(v8 + 264) = XPCSessionManager.init(name:)(0xD000000000000014, v168);
  *(_QWORD *)(v8 + 272) = 0;
  *(_QWORD *)(v8 + 288) = 0;
  v84 = v8 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription;
  v85 = sub_10001A9A8(&qword_1010FAA80);
  v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v84, 1, 1, v85);
  PressuredExitTransactionManager.init()(v86);
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_darwinHelper) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_afterFirstUnlockActivity) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_legacyStateCapture) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_stateCapture) = 0;
  v87 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService;
  Service = type metadata accessor for LocationFetchService();
  swift_allocObject(Service, 201, 15);
  *(_QWORD *)((char *)v9 + v87) = sub_1005AE8B0();
  v89 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locatableStateMonitor;
  v90 = type metadata accessor for LocatableStateMonitor();
  swift_allocObject(v90, 136, 15);
  *(_QWORD *)((char *)v9 + v89) = sub_100AC291C();
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating) = &_swiftEmptySetSingleton;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription) = 1;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_checkInPostInstallXPCActivity) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___handlers) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___unauthorizedTracking) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___maskedIdentifierService) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier) = _swiftEmptyDictionarySingleton;
  v91 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  v92 = v77;
  v93 = ((uint64_t (*)(char *, _QWORD, uint64_t))v178)(v77, v177, v183);
  static DispatchQoS.unspecified.getter(v93);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v94 = v169;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v179, v180, v80, v182);
  v95 = v174;
  v96 = v81;
  v97 = v170;
  v98 = v172;
  *(_QWORD *)((char *)v9 + v91) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000049, 0x8000000100EE50D0, v76, v96, v92, 0);
  v99 = v171;
  v100 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingValidator;
  v101 = type metadata accessor for PairingValidator();
  v102 = swift_allocObject(v101, 24, 7);
  *(_QWORD *)(v102 + 16) = 0;
  *(_QWORD *)((char *)v9 + v100) = v102;
  *(_QWORD *)((char *)v9
            + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___accessoryPairingValidator) = 0;
  v103 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject;
  aBlock = 0;
  v104 = sub_10001A9A8(&qword_1011059A0);
  swift_allocObject(v104, *(unsigned int *)(v104 + 48), *(unsigned __int16 *)(v104 + 52));
  *(_QWORD *)((char *)v9 + v103) = CurrentValueSubject.init(_:)(&aBlock);
  v105 = (_QWORD *)((char *)v9
                  + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock);
  *v105 = 0;
  v105[1] = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_notifiedDaemonConfigurationChangedOnce) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_messagingDevicesChangedSubscription) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_recordDeletedSubscription) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_meDeviceChangedSubscription) = 0;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_triggerFamilyUpdateSubscription) = 0;
  *((_BYTE *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  v9[35] = v97;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_fmipStateManager) = v99;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_appActivity) = v98;
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor) = v94;
  if (v95)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v106 = v95;
  }
  else
  {
    found = type metadata accessor for NotifyWhenFoundManager();
    swift_allocObject(found, 89, 7);
    swift_retain_n(v97, 2);
    swift_retain();
    swift_retain();
    swift_retain();
    v106 = sub_1002014D0(v97);
  }
  v9[6] = v106;
  v108 = qword_1010EA640;
  swift_retain();
  swift_retain();
  v109 = v173;
  if (v108 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v110 = *(_QWORD *)(qword_1011B8588 + 24);
  v111 = objc_allocWithZone((Class)RTRoutineManager);
  swift_retain();
  v112 = String._bridgeToObjectiveC()();
  v113 = objc_msgSend(v111, "initWithRestorationIdentifier:", v112);

  v114 = type metadata accessor for LocationOfInterestProvider();
  v115 = (_QWORD *)swift_allocObject(v114, 88, 7);
  v9[30] = sub_1007B6958(v97, v110, (uint64_t)v113, v115);
  v116 = v176;
  if (v176)
  {
    v117 = v176;
  }
  else
  {
    v118 = objc_allocWithZone((Class)type metadata accessor for TagCommandManager());
    v119 = swift_retain();
    v117 = sub_100677EAC(v119, (uint64_t)sub_1003E6B5C, 0);
    swift_release();
  }
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager) = v117;
  v184 = v117;
  if (v109)
  {
    v120 = v116;
    v121 = v117;
    v122 = v109;
  }
  else
  {
    v123 = type metadata accessor for BluetoothCommunicationCoordinator();
    swift_allocObject(v123, 72, 7);
    v124 = v116;
    v125 = v117;
    v122 = sub_100D07BFC();
  }
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_bluetoothCommunicatorCoordinator) = v122;
  v126 = type metadata accessor for WildModeAssociationManager();
  swift_allocObject(v126, 56, 7);
  swift_retain();
  swift_retain();
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_wildModeAssociationManager) = sub_10064FC4C(v97);
  if (v175)
  {
    v127 = v175;
  }
  else
  {
    v128 = type metadata accessor for AccessoryMetadataManager();
    swift_allocObject(v128, 56, 7);
    swift_retain();
    swift_retain();
    v127 = sub_10021811C(v97, (uint64_t)v122);
  }
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_accessoryMetadataManager) = v127;
  v129 = type metadata accessor for ProductInfoManager();
  swift_allocObject(v129, 72, 7);
  swift_retain();
  swift_retain();
  swift_retain();
  v130 = sub_100C44DC0(v97, (uint64_t)v127);
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_productInfoManager) = v130;
  v131 = type metadata accessor for ClassicPairingSupport();
  swift_allocObject(v131, 192, 7);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v132 = sub_1002DBC14(v97, v94, (uint64_t)v122, (uint64_t)v127);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_classicPairingSupport) = v132;
  v133 = objc_allocWithZone((Class)type metadata accessor for SoundPlaybackManager());
  swift_retain();
  swift_retain();
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager) = sub_1005D4700(v97, (uint64_t)v122);
  v134 = type metadata accessor for TheftDeterrenceStateManager();
  swift_allocObject(v134, 153, 7);
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_theftDeterrenceStateManager) = sub_100B11EDC();
  v135 = swift_retain();
  v136 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v135);
  swift_release();
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedPublisher) = v136;
  v137 = swift_retain();
  v138 = sub_100B4AE20(v137);
  v191[3] = &type metadata for SingleUserAdapter;
  v191[4] = &off_1010AEBC0;
  v191[0] = v138;
  v191[1] = v139;
  v191[2] = v140;
  sub_100030784((uint64_t)v191, (uint64_t)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_cbPeripheralManager);
  updated = type metadata accessor for FirmwareUpdateService();
  swift_allocObject(updated, 184, 15);
  v142 = swift_retain();
  v143 = sub_10014AFAC(v142);
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService) = v143;
  v144 = type metadata accessor for FirmwareUpdateScheduler(0);
  swift_allocObject(v144, *(unsigned int *)(v144 + 48), *(unsigned __int16 *)(v144 + 52));
  swift_retain_n(v143, 2);
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateScheduler) = sub_1001382FC(v145);
  v146 = objc_allocWithZone((Class)FMStateCapture);
  swift_retain();
  v147 = objc_msgSend(v146, "init");
  v148 = swift_allocObject(&unk_101092A50, 32, 7);
  *(_QWORD *)(v148 + 16) = sub_1007BDDC4;
  *(_QWORD *)(v148 + 24) = v9;
  v189 = sub_1007BDDCC;
  v190 = v148;
  aBlock = _NSConcreteStackBlock;
  v186 = 1107296256;
  v187 = sub_10009A0A8;
  v188 = &unk_101092A68;
  v149 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v147, "setStateCaptureBlock:", v149);
  _Block_release(v149);
  swift_release();
  v150 = *(void **)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_legacyStateCapture);
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_legacyStateCapture) = v147;

  v151 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v151 + 16, v9);
  v152 = objc_msgSend(objc_allocWithZone((Class)FMStateCapture), "init");
  v153 = swift_allocObject(&unk_101092AA0, 32, 7);
  *(_QWORD *)(v153 + 16) = sub_1007BDDD4;
  *(_QWORD *)(v153 + 24) = v151;
  v189 = sub_1007BDDDC;
  v190 = v153;
  aBlock = _NSConcreteStackBlock;
  v186 = 1107296256;
  v187 = sub_10009A0A8;
  v188 = &unk_101092AB8;
  v154 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v152, "setStateCaptureBlock:", v154);
  _Block_release(v154);
  swift_release();
  v155 = *(void **)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_stateCapture);
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_stateCapture) = v152;

  v156 = swift_retain();
  v157 = AnyCurrentValuePublisher.publisher.getter(v156);
  swift_release();
  aBlock = (void **)v157;
  v158 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v158 + 16, v9);
  v159 = sub_10001A9A8(&qword_1011194D0);
  v160 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v161 = Publisher<>.sink(receiveValue:)(sub_1007BDDE4, v158, v159, v160);
  swift_release();
  swift_release();
  *(_QWORD *)((char *)v9 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_meDeviceChangedSubscription) = v161;
  swift_release();
  v162 = type metadata accessor for AccessoryFirmwareUpdateManager();
  swift_allocObject(v162, 56, 7);
  v163 = sub_100BF65B8(v170);
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  v9[22] = v163;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v191);
  return v9;
}

uint64_t sub_10079441C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_1007EEF64(20);
    return swift_release();
  }
  return result;
}

uint64_t sub_100794478(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = static os_log_type_t.debug.getter(v5);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7D28, "BeaconManagerService subscription to triggerFamilyUpdatePublisher triggered.", 76, 2, _swiftEmptyArrayStorage);
  v9 = *(void **)(a2 + 64);
  *v7 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v3);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v9 & 1) != 0)
  {
    type metadata accessor for Transaction(0);
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.triggerFamilyUpdated", 50, 2, sub_1007BDD94, a2, &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007945CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD aBlock[6];
  _QWORD *v49;

  v2 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v2);
  v41 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_101107E90);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = a1[7];
  aBlock[4] = sub_1007B7E1C;
  aBlock[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101091D70;
  v12 = _Block_copy(aBlock);
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v49 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v15, v16, v6, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v46);
  result = swift_release();
  v18 = a1[5];
  if (v18)
  {
    aBlock[0] = *(_QWORD *)(v18 + 400);
    swift_retain();
    swift_retain();
    v19 = sub_10001A9A8((uint64_t *)&unk_101107EA0);
    v20 = sub_1000193A4(&qword_1010ECF20, (uint64_t *)&unk_101107EA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v21 = Publisher<>.sink(receiveValue:)(sub_1007B7E24, a1, v19, v20);
    swift_release();
    swift_release();
    *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_messagingDevicesChangedSubscription) = v21;
    swift_release();
    aBlock[0] = *(_QWORD *)(a1[35] + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
    v22 = swift_allocObject(&unk_101091DA8, 24, 7);
    swift_weakInit(v22 + 16, a1);
    swift_retain();
    v23 = sub_10001A9A8((uint64_t *)&unk_101105980);
    v24 = sub_1000193A4(&qword_1010F5FB8, (uint64_t *)&unk_101105980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v25 = Publisher<>.sink(receiveValue:)(sub_1007B7E50, v22, v23, v24);
    swift_release();
    swift_release();
    *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_recordDeletedSubscription) = v25;
    swift_release();
    type metadata accessor for Transaction(0);
    swift_retain();
    static Transaction.asyncTask(name:block:)("Firmware.subscribeToConnectableDevices", 38, 2, &unk_101107EB8, a1);
    swift_release();
    v26 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_classicPairingSupport);
    aBlock[0] = *(_QWORD *)((char *)a1
                          + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject);
    v27 = sub_10001A9A8(&qword_1011059A0);
    v28 = sub_1000193A4(&qword_1011059A8, &qword_1011059A0, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    aBlock[0] = Publisher.eraseToAnyPublisher()(v27, v28);
    v49 = *(_QWORD **)(v26 + 48);
    v29 = v49;
    v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v31 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v41, 1, 1, v30);
    v32 = v29;
    v33 = sub_10001A9A8((uint64_t *)&unk_1010FAAC0);
    v34 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v35 = sub_1000193A4((unint64_t *)&unk_101107EC0, (uint64_t *)&unk_1010FAAC0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v36 = sub_1001C7EF4();
    v37 = v42;
    Publisher.receive<A>(on:options:)(&v49, v31, v33, v34, v35, v36);
    sub_100004048(v31, &qword_1010EECC8);

    v38 = sub_1000193A4(&qword_101107ED0, (uint64_t *)&unk_101107E90, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain();
    v39 = v44;
    v40 = Publisher<>.sink(receiveValue:)(sub_1007B7EA0, v26, v44, v38);
    swift_release();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v39);
    *(_QWORD *)(v26 + 160) = v40;
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100794B48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  id v69;
  char *v70;
  uint64_t v71;
  char *v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  id v82;
  void *v83;
  id v84;
  char *v85;
  id v86;
  char *v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  void (*v96)(char *, uint64_t);
  void (*v97)(char *, uint64_t);
  char *v98;
  id v99;
  id v100;
  id v101;
  void (*v102)(char *, uint64_t);
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  id v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t);
  uint64_t v162;
  uint64_t (**v163)();
  uint64_t v164;
  uint64_t v165;
  uint64_t (**v166)(uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void (**v189)(_QWORD, _QWORD);
  char *v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  void (*v196)(char *, char *, uint64_t);
  void (*v197)(char *, uint64_t);
  char *v198;
  uint64_t v199;
  _QWORD v200[4];
  id aBlock[3];
  ValueMetadata *v202;
  uint64_t (*v203)();
  uint64_t v204;

  v2 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v2);
  v173 = (char *)&v169 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = sub_10001A9A8(&qword_101107ED8);
  v172 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v171 = (char *)&v169 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_10001A9A8((uint64_t *)&unk_101107EE0);
  v176 = *(_QWORD *)(v177 - 8);
  __chkstk_darwin(v177);
  v175 = (char *)&v169 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = type metadata accessor for XPCServiceDescription(0);
  v192 = *(_QWORD *)(v199 - 8);
  v6 = __chkstk_darwin(v199);
  v191 = (char *)&v169 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v195 = (char *)&v169 - v8;
  v194 = type metadata accessor for MachServiceName(0);
  v197 = *(void (**)(char *, uint64_t))(v194 - 8);
  v9 = __chkstk_darwin(v194);
  v190 = (char *)&v169 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v193 = (char *)&v169 - v12;
  __chkstk_darwin(v11);
  v198 = (char *)&v169 - v13;
  v196 = (void (*)(char *, char *, uint64_t))sub_10001A9A8(&qword_1010ED508);
  v189 = (void (**)(_QWORD, _QWORD))*((_QWORD *)v196 - 1);
  __chkstk_darwin(v196);
  v188 = (uint64_t)&v169 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_101107EF0);
  v16 = __chkstk_darwin(v15);
  v187 = (uint64_t)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v186 = (uint64_t)&v169 - v18;
  v19 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v19);
  v185 = (char *)&v169 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for URL(0);
  v183 = *(_QWORD *)(v184 - 8);
  v21 = __chkstk_darwin(v184);
  v181 = (uint64_t)&v169 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v182 = (char *)&v169 - v23;
  v24 = type metadata accessor for BeaconPayloadFileManager(0);
  __chkstk_darwin(v24);
  v26 = (uint64_t *)((char *)&v169 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for DispatchWorkItemFlags(0);
  v180 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v29 = (char *)&v169 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for DispatchQoS(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v31 = (char *)&v169 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for DispatchQoS.QoSClass(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v35 = (char *)&v169 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v35, enum case for DispatchQoS.QoSClass.default(_:), v32);
  v170 = v36;
  v37 = (void *)static OS_dispatch_queue.global(qos:)(v35);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v35, v32);
  v203 = sub_1007961E8;
  v204 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100016FB8;
  v202 = (ValueMetadata *)&unk_101091DC0;
  v38 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v38);
  v200[0] = _swiftEmptyArrayStorage;
  v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v41 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v200, v40, v41, v27, v39);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v29, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v180 + 8))(v29, v27);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v31, v179);
  v42 = *(char **)(a1 + 280);
  sub_1008014D4();
  sub_10026E3A4();
  sub_10028EA9C();
  v43 = v181;
  sub_100B5D484(v181);
  v44 = (uint64_t)v182;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100EC9A60, 1);
  (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v43, v184);
  sub_100D1E134(v44, v26);
  sub_100D1E488((uint64_t)sub_1007977B4, 0);
  sub_1000126B0((uint64_t)v26, type metadata accessor for BeaconPayloadFileManager);
  v45 = sub_100201AAC();
  v46 = static os_log_type_t.default.getter(v45);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v47 = os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_1011B7D28, "Checking-in for com.apple.icloud.searchpartyuseragent.post-install.", 67, 2, _swiftEmptyArrayStorage);
  static DispatchQoS.background.getter(v47);
  v48 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v48 + 16, a1);
  v49 = type metadata accessor for XPCActivity();
  swift_allocObject(v49, 112, 7);
  v50 = sub_100734F68(0xD000000000000032, (void *)0x8000000100EE3E00, (uint64_t)v31, (uint64_t)sub_1007962BC, 0, (uint64_t)sub_1007B7EB0, v48);
  swift_release();
  *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_checkInPostInstallXPCActivity) = v50;
  swift_release();
  v51 = sub_100791DFC();
  v52 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
  *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_darwinHelper) = DarwinNotificationHelper.init(notificationHandlers:)(v51);
  v53 = swift_release();
  v54 = static os_log_type_t.default.getter(v53);
  os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B7D28, "BeaconManagerService darwin handlers set", 40, 2, _swiftEmptyArrayStorage);
  sub_10079296C();
  swift_release();
  sub_100AC15FC();
  sub_1007FF864();
  v55 = *(_QWORD **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
  aBlock[0] = *(id *)&v42[OBJC_IVAR____TtC12searchpartyd11BeaconStore_estimatedLocationSubject];
  v56 = sub_10001A9A8((uint64_t *)&unk_101107F00);
  v57 = sub_1000193A4(&qword_1010F33F8, (uint64_t *)&unk_101107F00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  aBlock[0] = (id)Publisher.eraseToAnyPublisher()(v56, v57);
  v58 = swift_allocObject(&unk_101091DF8, 24, 7);
  swift_weakInit(v58 + 16, v55);
  v59 = swift_allocObject(&unk_101091E20, 32, 7);
  *(_QWORD *)(v59 + 16) = sub_1007B7EB8;
  *(_QWORD *)(v59 + 24) = v58;
  v60 = sub_10001A9A8((uint64_t *)&unk_101107F10);
  v61 = sub_1000193A4(&qword_1010F3400, (uint64_t *)&unk_101107F10, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v62 = Publisher<>.sink(receiveValue:)(sub_1007B7EE4, v59, v60, v61);
  swift_release();
  v55[21] = v62;
  swift_release();
  swift_release();
  v63 = type metadata accessor for TaskPriority(0);
  v64 = (uint64_t)v185;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v185, 1, 1, v63);
  v65 = (_QWORD *)swift_allocObject(&unk_101091E48, 40, 7);
  v65[2] = 0;
  v65[3] = 0;
  v65[4] = v55;
  swift_retain();
  sub_100791A98(v64, (uint64_t)&unk_101107F20, (uint64_t)v65);
  swift_release();
  sub_100004048(v64, &qword_1010F46C0);
  v66 = v55[14];
  v67 = v55[15];
  v55[14] = &unk_101107F30;
  v55[15] = a1;
  swift_retain();
  sub_10001D8A8(v66, v67);
  v68 = *(void **)(a1 + 288);
  if (v68)
  {
    v69 = v68;
    dispatch thunk of UserDefaultsObserver.start()();

  }
  v70 = v193;
  v71 = v194;
  v73 = v197;
  v72 = v198;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v185 = v42;
  v74 = type metadata accessor for BeaconManagerService(0);
  v202 = (ValueMetadata *)v74;
  v203 = (uint64_t (*)())&off_101091C80;
  aBlock[0] = (id)a1;
  swift_retain();
  v75 = v186;
  sub_1000995F8((uint64_t)aBlock, v186);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v76 = sub_10001A9A8(&qword_1010FAA80);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 0, 1, v76);
  v77 = v75;
  v78 = v187;
  sub_100005CF0(v77, v187, (uint64_t *)&unk_101107EF0);
  v79 = a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription, aBlock, 33, 0);
  sub_10013934C(v78, v79);
  swift_endAccess(aBlock);
  v202 = (ValueMetadata *)v74;
  v203 = (uint64_t (*)())&off_101091C68;
  aBlock[0] = (id)a1;
  swift_retain();
  v80 = v188;
  sub_100343F60((uint64_t)aBlock, v188);
  ((void (**)(uint64_t, void (*)(char *, char *, uint64_t)))v189)[1](v80, v196);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v187 = type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_1007B8000, a1, &type metadata for () + 1);
  sub_100798BF8();
  MachServiceName.init(_:)(0xD00000000000002BLL, 0x8000000100EC5140);
  v81 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v73 + 2);
  v81(v70, v72, v71);
  v82 = sub_100791CBC();
  if (qword_1010E9F28 != -1)
    swift_once(&qword_1010E9F28, sub_100797D40);
  v83 = (void *)qword_1011075A0;
  swift_retain();
  v84 = v83;
  v85 = v195;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v70, 0, v82, v84, sub_10001E910, a1, 0, 0, 0, 0);
  v188 = *(_QWORD *)(a1 + 264);
  XPCSessionManager.register(service:)(v85);
  MachServiceName.init(_:)(0xD000000000000038, 0x8000000100EE3E70);
  v189 = (void (**)(_QWORD, _QWORD))objc_opt_self(NSXPCInterface);
  v86 = objc_msgSend(v189, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPSimpleBeaconUpdateClientXPCProtocol);
  v87 = v190;
  v196 = v81;
  v81(v190, v70, v71);
  v88 = sub_100791CBC();
  v89 = (void *)qword_1011075A0;
  swift_retain();
  v90 = v89;
  v91 = v86;
  v92 = v191;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v87, 0, v88, v90, v91, sub_10001E910, a1, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v92);

  v93 = *(void (**)(char *, uint64_t))(v192 + 8);
  v94 = v199;
  v93(v92, v199);
  v95 = (void (*)(char *, uint64_t))*((_QWORD *)v197 + 1);
  v95(v70, v71);
  v96 = v95;
  v197 = v95;
  v93(v85, v94);
  v97 = v93;
  v98 = v198;
  v96(v198, v71);
  MachServiceName.init(_:)(0xD00000000000002CLL, 0x8000000100EC5170);
  v196(v70, v98, v71);
  v99 = sub_100791CBC();
  v100 = v189;
  v101 = objc_msgSend(v189, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPPairingManagerXPCProtocol);
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v70, 0, v99, v101, sub_1007B8030, a1, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v85);
  v97(v85, v94);
  v102 = v197;
  v197(v98, v71);
  sub_100798050();
  MachServiceName.init(_:)(0xD000000000000027, 0x8000000100EC5460);
  v103 = objc_msgSend(v100, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPCBPeripheralManagementXPCProtocol);
  v196(v70, v98, v71);
  v104 = sub_100791CBC();
  v105 = v103;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v70, 0, v104, v105, 0, 0, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v85);

  v97(v85, v199);
  v102(v98, v71);
  sub_1002B59A8();
  if (!*(_QWORD *)(a1 + 40))
  {
    __break(1u);
LABEL_25:
    __break(1u);
    return;
  }
  v106 = swift_retain();
  v107 = AnyCurrentValuePublisher.publisher.getter(v106);
  swift_release();
  v108 = (uint64_t)v185;
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v109 = swift_retain();
  v110 = AnyCurrentValuePublisher.publisher.getter(v109);
  swift_release();
  v111 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  v112 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(1, 0, 1);
  v202 = &type metadata for SystemInfo;
  v203 = (uint64_t (*)())&off_1010ACF68;
  sub_100030784((uint64_t)aBlock, (uint64_t)v200);
  v113 = sub_10009F5D0((uint64_t)v200, v200[3]);
  __chkstk_darwin(v113);
  (*(void (**)(void))(v114 + 16))();
  swift_retain();
  swift_retain();
  v115 = sub_1007B8480(v107, v110, 6, (uint64_t)v112);
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  swift_release();
  swift_release();

  *(_QWORD *)(a1 + 216) = v115;
  swift_retain();
  swift_release();
  v116 = *(_QWORD *)(a1 + 216);
  if (v116)
  {
    aBlock[0] = *(id *)(v116 + 88);
    v117 = sub_10001A9A8(&qword_1010ECF50);
    v118 = sub_1000193A4(&qword_101108000, &qword_1010ECF50, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v119 = sub_1007B85D8();
    v120 = v171;
    Publisher<>.removeDuplicates()(v117, v118, v119);
    aBlock[0] = *(id *)(a1 + 56);
    v121 = aBlock[0];
    v122 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v123 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v173, 1, 1, v122);
    v124 = sub_1000193A4(&qword_101108010, &qword_101107ED8, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v125 = sub_1001C7EF4();
    v126 = v121;
    v127 = v175;
    v128 = v174;
    Publisher.receive<A>(on:options:)(aBlock, v123, v174, v170, v124, v125);
    sub_100004048(v123, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v172 + 8))(v120, v128);
    v129 = swift_allocObject(&unk_101091DA8, 24, 7);
    swift_weakInit(v129 + 16, a1);
    v130 = sub_1000193A4(&qword_101108018, (uint64_t *)&unk_101107EE0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v131 = v177;
    v132 = Publisher<>.sink(receiveValue:)(sub_1007B861C, v129, v177, v130);
    swift_release();
    (*(void (**)(char *, uint64_t))(v176 + 8))(v127, v131);
  }
  else
  {
    v132 = 0;
  }
  *(_QWORD *)(a1 + 232) = v132;
  swift_release();
  v133 = qword_1010E9CF0;
  swift_retain();
  if (v133 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v134 = qword_1011B7160;
  v135 = type metadata accessor for SeparationStateSyncManager(0);
  v136 = swift_allocObject(v135, *(unsigned int *)(v135 + 48), *(unsigned __int16 *)(v135 + 52));
  *(_OWORD *)(v136 + 40) = 0u;
  *(_OWORD *)(v136 + 56) = 0u;
  *(_QWORD *)(v136 + 72) = 0;
  v137 = v136 + OBJC_IVAR____TtC12searchpartyd26SeparationStateSyncManager_observationStoreSubscription;
  v138 = sub_10001A9A8(&qword_101108020);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 - 8) + 56))(v137, 1, 1, v138);
  *(_QWORD *)(v136 + 16) = v108;
  *(_QWORD *)(v136 + 24) = v134;
  *(_QWORD *)(v136 + 32) = v115;
  *(_QWORD *)(a1 + 224) = v136;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_25;
  swift_retain();
  sub_1003BEBBC();
  swift_release();
  v139 = sub_10064FD8C();
  sub_1001385F8(v139);
  v140 = *(_QWORD *)(a1 + 184);
  v141 = swift_retain();
  v142 = (void *)AnyCurrentValuePublisher.publisher.getter(v141);
  swift_release();
  aBlock[0] = v142;
  v143 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v143 + 16, a1);
  v144 = sub_10001A9A8(&qword_101108028);
  v145 = sub_1000193A4(&qword_101108030, &qword_101108028, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v146 = Publisher<>.sink(receiveValue:)(sub_1007B8624, v143, v144, v145);
  swift_release();
  swift_release();
  *(_QWORD *)(a1 + 192) = v146;
  swift_release();
  v147 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedPublisher);
  v148 = swift_allocObject(&unk_101091E70, 32, 7);
  *(_QWORD *)(v148 + 16) = v140;
  *(_QWORD *)(v148 + 24) = v147;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("MaintenanceConnectionObserver.Start", 35, 2, &unk_101108038, v148);
  swift_release();
  v149 = swift_retain();
  v150 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v149);
  v151 = *(_QWORD *)(qword_1011B8588 + 24);
  v152 = type metadata accessor for PersistentConnectionObserveriOS();
  swift_allocObject(v152, 56, 7);
  swift_retain();
  v153 = sub_10070B69C(v150, v151);
  swift_release();
  swift_release();
  *(_QWORD *)(a1 + 200) = v153;
  swift_release();
  if (*(_QWORD *)(a1 + 200))
  {
    v154 = swift_retain();
    v155 = (void *)AnyCurrentValuePublisher.publisher.getter(v154);
    swift_release();
    aBlock[0] = v155;
    v156 = swift_allocObject(&unk_101091DA8, 24, 7);
    swift_weakInit(v156 + 16, a1);
    v157 = sub_10001A9A8(&qword_101108040);
    v158 = sub_1000193A4(&qword_101108048, &qword_101108040, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v159 = Publisher<>.sink(receiveValue:)(sub_1007B8680, v156, v157, v158);
    swift_release();
    swift_release();
  }
  else
  {
    v159 = 0;
  }
  *(_QWORD *)(a1 + 208) = v159;
  swift_release();
  v160 = *(_QWORD *)(a1 + 200);
  if (v160)
  {
    v161 = *(void (**)(uint64_t))(*(_QWORD *)v160 + 152);
    v162 = swift_retain();
    v161(v162);
    swift_release();
  }
  sub_10075CE88();
  v163 = (uint64_t (**)())(v108 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  v164 = *(_QWORD *)(v108 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  v165 = *(_QWORD *)(v108 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler + 8);
  *v163 = sub_1007B8688;
  v163[1] = (uint64_t (*)())a1;
  swift_retain();
  sub_10001D8A8(v164, v165);
  v166 = (uint64_t (**)(uint64_t))(v108 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  v167 = *(_QWORD *)(v108 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  v168 = *(_QWORD *)(v108 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
  *v166 = sub_1007B8690;
  v166[1] = (uint64_t (*)(uint64_t))a1;
  swift_retain();
  sub_10001D8A8(v167, v168);
  swift_retain();
  sub_100870C1C(v108, a1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_1007961E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v3);
  v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v5 = static os_log_type_t.default.getter(v4);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  return os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7D28, "TimeLatchRecord: first read is done", 35, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_1007962BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100005CF0(a1, a2, &qword_101106350);
}

uint64_t sub_1007962DC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v7 = sub_100271FBC();
      v8 = static os_log_type_t.default.getter(v7);
      if (qword_1010EA248 != -1)
      {
        v9 = v8;
        swift_once(&qword_1010EA248, sub_100B5D8FC);
        v8 = v9;
      }
      os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7D28, "Running com.apple.icloud.searchpartyuseragent.post-install - task completed.", 76, 2, _swiftEmptyArrayStorage);
      sub_100732A0C();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1007963D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1007963F0, 0, 0);
}

uint64_t sub_1007963F0()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;

  v1 = (__int128 *)v0[2];
  v2 = v0[3];
  v3 = swift_allocObject(&unk_1010922A8, 113, 7);
  v0[4] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  *(_OWORD *)(v3 + 97) = *(__int128 *)((char *)v1 + 73);
  *(_OWORD *)(v3 + 88) = v6;
  *(_OWORD *)(v3 + 72) = v5;
  *(_OWORD *)(v3 + 56) = v4;
  v7 = *v1;
  *(_OWORD *)(v3 + 40) = v1[1];
  *(_OWORD *)(v3 + 24) = v7;
  swift_retain();
  sub_100012368(v1);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[5] = v8;
  *v8 = v0;
  v8[1] = sub_1007964B4;
  return unsafeBlocking<A>(_:)(v8, sub_1007BB030, v3, &type metadata for () + 1);
}

uint64_t sub_1007964B4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release();
  return swift_task_switch(sub_1002A7C1C, 0, 0);
}

uint64_t sub_100796510(unsigned __int8 *a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17[2];
  _BYTE v18[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v18, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(unsigned __int8 *)(result + 248);
    if (v2 == 7)
    {
      if (v6 == 7)
        return swift_release();
    }
    else if (v2 == 6)
    {
      if (v6 == 6)
        return swift_release();
    }
    else if ((v6 & 0xFE) != 6)
    {
      sub_1005112EC(v2);
      if ((v7 & 1) != 0)
        return swift_release();
    }
    *(_BYTE *)(v5 + 248) = v2;
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B75D0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v17[0] = v13;
      *(_DWORD *)v12 = 136315138;
      LOBYTE(v16) = v2;
      v14 = String.init<A>(describing:)(&v16, &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy);
      v16 = sub_100016940(v14, v15, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, v17, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Notifying clients of separation monitoring policy change to: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    swift_retain();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A9B0, 0);
    swift_release();
    swift_retain();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1007967C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __CFNotificationCenter *v3;
  __CFNotificationCenter *v4;
  const __CFString *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  if (swift_weakLoadStrong(v2))
  {
    v3 = CFNotificationCenterGetDarwinNotifyCenter();
    if (v3)
    {
      v4 = v3;
      v5 = (const __CFString *)SPMaintenancePolicyChangedNotification;
      v6 = static os_log_type_t.default.getter(v3);
      if (qword_1010EA248 != -1)
        swift_once(&qword_1010EA248, sub_100B5D8FC);
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1011B7D28, "Posting SPMaintenancePolicyChangedNotification Darwin notification from service", 79, 2, _swiftEmptyArrayStorage);
      CFNotificationCenterPostNotification(v4, v5, 0, 0, 1u);
      swift_release();

    }
    else
    {
      v7 = static os_log_type_t.error.getter(0);
      if (qword_1010EA248 != -1)
        swift_once(&qword_1010EA248, sub_100B5D8FC);
      os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7D28, "CFNotificationCenterGetDarwinNotifyCenter return nil!", 53, 2, _swiftEmptyArrayStorage);
      swift_release();
    }
  }
}

uint64_t sub_100796924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    swift_retain();
    swift_release();
    sub_1007F9F70();
    return swift_release();
  }
  return result;
}

uint64_t sub_10079698C(uint64_t a1)
{
  uint64_t v2;

  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7D28, "resetHandler called on BeaconManagerService", 43, 2, _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_1007B8000, a1, &type metadata for () + 1);
}

uint64_t sub_100796A54(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v18 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7D28, "beaconStoreChanged called on BeaconManagerService", 49, 2, _swiftEmptyArrayStorage, v18);
  aBlock[4] = sub_1007BA3C8;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010920E0;
  v12 = _Block_copy(aBlock);
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

uint64_t sub_100796C84(uint64_t a1)
{
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.scheduleXPCTimers", 47, 2, sub_1007BA3D0, a1, &type metadata for () + 1);
}

uint64_t sub_100796CEC(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.cloudCoordinatorAvailableTransaction", 66, 2, sub_1007BA3B0, a2, &type metadata for () + 1);
}

uint64_t sub_100796D54(Swift::Void (__swiftcall *a1)(), uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Void (__swiftcall *v17)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  Swift::Void (__swiftcall *v26)();
  uint64_t v27;

  v26 = a1;
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7D28, "BeaconManagerService: CloudKit is available", 43, 2, _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0);
  v15 = v27;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_1007B8000, a2, &type metadata for () + 1);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.checkForMissingKeys", 49, 2, sub_10027ED04, a2, &type metadata for () + 1);
  v27 = v15;
  sub_10027081C((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v16 = sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010F47C0);
  }
  else
  {
    sub_1000126EC((uint64_t)v8, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    v17 = v26;
    swift_retain();
    sub_1007B870C((uint64_t)v13, a2, v17);
    swift_release();
    v16 = sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  }
  static DispatchQoS.background.getter(v16);
  v18 = swift_allocObject(&unk_101091E98, 32, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E50020;
  v19 = swift_allocObject(&unk_101091DA8, 24, 7);
  swift_weakInit(v19 + 16, a2);
  v20 = type metadata accessor for XPCActivity();
  swift_allocObject(v20, 112, 7);
  v21 = sub_100734F68(0xD000000000000038, (void *)0x8000000100EE3F10, (uint64_t)v5, (uint64_t)sub_1007B86A8, v18, (uint64_t)sub_1007B86B0, v19);
  swift_release();
  swift_release();
  *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = v21;
  v22 = swift_release();
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) == 1)
  {
    v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, qword_1011B7D28, "Forcing a CloudKit fetch since this is the first launch since reboot", 68, 2, _swiftEmptyArrayStorage);
    sub_1007FDEC4();
    sub_100BBE4D4();
    swift_release();
  }
  return static Transaction.named<A>(_:with:)("productInfoMigration", 20, 2, sub_1007B86B8, a2, &type metadata for () + 1);
}

uint64_t sub_1007970EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  result = sub_1007EEF64(21);
  if (*(_QWORD *)(a2 + 40))
  {
    swift_retain();
    v5 = sub_1003AC954(v3);
    swift_release();
    v6 = v5;
    return CurrentValueSubject.send(_:)(&v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100797168(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47[24];

  v45 = type metadata accessor for ShareRecord(0);
  v4 = *(_QWORD *)(v45 - 8);
  v5 = __chkstk_darwin(v45);
  v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v38 - v8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v47, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v40 = v11;
    v38[0] = v4;
    v46 = result;
    LODWORD(v42) = static os_log_type_t.debug.getter(result);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v41 = qword_1011B7D88;
    v44 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v15 = swift_allocObject(v44, 72, 7);
    v43 = xmmword_100E22B00;
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    v16 = a1[4];
    v39 = a1[3];
    v17 = v39;
    v38[1] = sub_10001AA44(a1, v39);
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 32);
    v20 = v19(v17, v18);
    v21 = UUID.uuidString.getter(v20);
    v23 = v22;
    v24 = *(void (**)(char *, uint64_t))(v40 + 8);
    v24(v13, v10);
    *(_QWORD *)(v15 + 56) = &type metadata for String;
    v25 = sub_10001AA00();
    v40 = v10;
    v26 = v25;
    *(_QWORD *)(v15 + 64) = v25;
    *(_QWORD *)(v15 + 32) = v21;
    *(_QWORD *)(v15 + 40) = v23;
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v41, "Unsharing cloudBackedRecord %@", 30, 2, v15);
    swift_bridgeObjectRelease();
    v19(v39, v18);
    v27 = sub_10088A6EC();
    v24(v13, v40);
    v28 = v27[2];
    if (v28)
    {
      v29 = *(unsigned __int8 *)(v38[0] + 80);
      v42 = v27;
      v30 = (uint64_t)v27 + ((v29 + 32) & ~v29);
      v31 = *(_QWORD *)(v38[0] + 72);
      while (1)
      {
        v32 = sub_10005972C(v30, (uint64_t)v9, type metadata accessor for ShareRecord);
        v33 = static os_log_type_t.debug.getter(v32);
        v34 = qword_1011B7D88;
        v35 = swift_allocObject(v44, 72, 7);
        *(_OWORD *)(v35 + 16) = v43;
        sub_10005972C((uint64_t)v9, (uint64_t)v7, type metadata accessor for ShareRecord);
        v36 = String.init<A>(describing:)(v7, v45);
        *(_QWORD *)(v35 + 56) = &type metadata for String;
        *(_QWORD *)(v35 + 64) = v26;
        *(_QWORD *)(v35 + 32) = v36;
        *(_QWORD *)(v35 + 40) = v37;
        os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Unsharing SharedRecord %@", 25, 2, v35);
        result = swift_bridgeObjectRelease();
        if (!*(_QWORD *)(v46 + 40))
          break;
        swift_retain();
        sub_10037BF50((uint64_t)v9, (uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
        swift_release();
        sub_1000126B0((uint64_t)v9, type metadata accessor for ShareRecord);
        v30 += v31;
        if (!--v28)
          goto LABEL_8;
      }
      __break(1u);
    }
    else
    {
LABEL_8:
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1007974E4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[5] = a1;
  v2 = sub_10001A9A8(&qword_1010EECC8);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8((uint64_t *)&unk_101107E90);
  v1[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[8] = v4;
  v1[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10079756C, 0, 0);
}

uint64_t sub_10079756C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[10] = v2;
  v0[2] = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_connectableDevicesChangedSubject);
  v3 = sub_10001A9A8(&qword_1011059A0);
  v4 = sub_1000193A4(&qword_1011059A8, &qword_1011059A0, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v0[11] = Publisher.eraseToAnyPublisher()(v3, v4);
  return swift_task_switch(sub_10079760C, v2, 0);
}

uint64_t sub_10079760C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 88);
  v5 = *(void **)(v1 + 128);
  *(_QWORD *)(v0 + 32) = v5;
  v6 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
  v7 = v5;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FAAC0);
  v9 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v10 = sub_1000193A4((unint64_t *)&unk_101107EC0, (uint64_t *)&unk_1010FAAC0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v11 = sub_1001C7EF4();
  Publisher.receive<A>(on:options:)(v0 + 32, v3, v8, v9, v10, v11);
  sub_100004048(v3, &qword_1010EECC8);

  v12 = sub_1000193A4(&qword_101107ED0, (uint64_t *)&unk_101107E90, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain();
  v13 = Publisher<>.sink(receiveValue:)(sub_1007B7EA8, v1, v4, v12);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v2, v4);
  *(_QWORD *)(v1 + 160) = v13;
  swift_release();
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1007977B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7648);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138412290;
    if (a1)
    {
      swift_errorRetain(a1);
      v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    }
    else
    {
      v10 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
      v7 = 0;
    }
    *v6 = v7;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Did delete all beacon payload cache files with result: %@.", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_1007979CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v22 = a1;
  v28 = type metadata accessor for SharedBeaconRecord(0);
  v4 = *(_QWORD *)(v28 - 8);
  v5 = __chkstk_darwin(v28);
  v27 = (uint64_t)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - v7;
  v23 = *(_QWORD *)(a2 + 280);
  v24 = a2;
  result = (uint64_t)sub_1000181C8();
  v10 = result;
  v11 = _swiftEmptyArrayStorage;
  v29 = _swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(result + 16);
  if (v12)
  {
    v21 = v2;
    v13 = 0;
    v14 = _swiftEmptyArrayStorage;
    v25 = v4;
    v26 = v12;
    while (v13 < *(_QWORD *)(v10 + 16))
    {
      v15 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      v16 = *(_QWORD *)(v4 + 72);
      sub_10005972C(v10 + v15 + v16 * v13, (uint64_t)v8, type metadata accessor for SharedBeaconRecord);
      if (v8[*(int *)(v28 + 64)] == 1)
      {
        sub_1000126EC((uint64_t)v8, v27, type metadata accessor for SharedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          sub_10009A654(0, v14[2] + 1, 1);
        v14 = v29;
        v18 = v29[2];
        v17 = v29[3];
        if (v18 >= v17 >> 1)
        {
          sub_10009A654(v17 > 1, v18 + 1, 1);
          v14 = v29;
        }
        v14[2] = v18 + 1;
        result = sub_1000126EC(v27, (uint64_t)v14 + v15 + v18 * v16, type metadata accessor for SharedBeaconRecord);
        v4 = v25;
        v12 = v26;
      }
      else
      {
        result = sub_1000126B0((uint64_t)v8, type metadata accessor for SharedBeaconRecord);
      }
      if (v12 == ++v13)
      {
        v11 = v29;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v19 = sub_100800B74((uint64_t)v11);
    result = swift_release();
    if (*(_QWORD *)(v24 + 40))
    {
      swift_retain();
      v20 = v22;
      swift_retain();
      sub_1003A9A40((uint64_t)v19, (uint64_t)sub_1007BA3A8, v20);
      swift_bridgeObjectRelease();
      swift_release();
      return swift_release();
    }
  }
  __break(1u);
  return result;
}

void sub_100797C1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Transaction.capture()();
  if (a1)
  {
    v2 = swift_errorRetain(a1);
    v3 = static os_log_type_t.error.getter(v2);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v4 = qword_1011B7D38;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    v11 = a1;
    swift_errorRetain(a1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(&v11, v7);
    v10 = v9;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = sub_10001AA00();
    *(_QWORD *)(v6 + 32) = v8;
    *(_QWORD *)(v6 + 40) = v10;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "requestKeys error: %@", 21, 2, v6);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
  }
}

id sub_100797D40()
{
  id result;

  result = sub_100797D5C();
  qword_1011075A0 = (uint64_t)result;
  return result;
}

id sub_100797D5C()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPBeaconManagerXPCProtocol);
  v1 = sub_1007B6904();
  v2 = swift_allocObject(v1, ((*(unsigned int *)(v1 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v1 + 52) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E22B10;
  v3 = sub_10000F4A0(0, (unint64_t *)&qword_1010EE388, NSUUID_ptr);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = sub_10000F4A0(0, &qword_1010EE380, NSArray_ptr);
  *(_QWORD *)(v2 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "commandKeysForUUIDs:dateInterval:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v5 = sub_1007B6904();
  v6 = swift_allocObject(v5, ((*(unsigned int *)(v5 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v5 + 52) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v6 + 32) = v3;
  *(_QWORD *)(v6 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, "commandKeysForUUIDs:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v7 = sub_1007B6904();
  v8 = swift_allocObject(v7, ((*(unsigned int *)(v7 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v7 + 52) | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v8 + 32) = v3;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v8, "commandKeysForUUID:withCriteria:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v9 = sub_1007B6904();
  v10 = swift_allocObject(v9, ((*(unsigned int *)(v9 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v9 + 52) | 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v10 + 32) = sub_10000F4A0(0, &qword_1011081F8, SPCommandKeysCriteria_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v10, "commandKeysForUUID:withCriteria:completion:", 1, 0);
  swift_bridgeObjectRelease();
  v11 = sub_1007B6904();
  v12 = swift_allocObject(v11, ((*(unsigned int *)(v11 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v11 + 52) | 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E26E00;
  *(_QWORD *)(v12 + 32) = v3;
  *(_QWORD *)(v12 + 40) = v4;
  *(_QWORD *)(v12 + 48) = sub_10000F4A0(0, (unint64_t *)&qword_101108200, NSDictionary_ptr);
  *(_QWORD *)(v12 + 56) = sub_10000F4A0(0, &qword_101101FD0, NSFileHandle_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v12, "fetchAllKeyMapFileDescriptorsWithCompletion:", 0, 1);
  swift_bridgeObjectRelease();
  v13 = sub_1007B6904();
  v14 = swift_allocObject(v13, ((*(unsigned int *)(v13 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v13 + 52) | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v14 + 32) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v14, "fetchAllKeyMapFileDescriptorsWithCompletion:", 1, 1);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100798050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  id v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  char *v30;
  char *v31;
  id v32;
  id v33;
  id v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, uint64_t);
  _QWORD v40[2];
  id v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v1 = v0;
  v2 = type metadata accessor for XPCServiceDescription(0);
  v49 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  v3 = __chkstk_darwin(v2);
  v48 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v43 = (char *)v40 - v6;
  __chkstk_darwin(v5);
  v8 = (char *)v40 - v7;
  v9 = type metadata accessor for MachServiceName(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v45 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v40 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)v40 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)v40 - v19;
  MachServiceName.init(_:)(0xD00000000000002ALL, 0x8000000100EC3450);
  v46 = v20;
  v47 = v10;
  v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v21(v18, v20, v9);
  v22 = sub_100791CBC();
  if (qword_1010E9F30 != -1)
    swift_once(&qword_1010E9F30, sub_100798484);
  v23 = (id)qword_1011075A8;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v18, 0, v22, v23, sub_10001E900, v1, 0, 0, 0, 0);
  v40[1] = *(_QWORD *)(v1 + 264);
  XPCSessionManager.register(service:)(v8);
  MachServiceName.init(_:)(0xD000000000000030, 0x8000000100EE4B30);
  v24 = (void *)objc_opt_self(NSXPCInterface);
  v44 = v8;
  v25 = v24;
  v26 = objc_msgSend(v24, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPLocationFetchClientXPCProtocol);
  v21(v15, v18, v9);
  v27 = sub_100791CBC();
  v28 = (void *)qword_1011075A8;
  swift_retain();
  v29 = v28;
  v41 = v26;
  v42 = v18;
  v30 = v43;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v15, 0, v27, v29, v41, sub_10001E900, v1, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v30);
  MachServiceName.init(_:)(0xD00000000000002BLL, 0x8000000100EE4B70);
  v31 = v45;
  v21(v45, v15, v9);
  v32 = sub_100791CBC();
  v33 = objc_msgSend(v25, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPBeaconScanningXPCProtocol);
  v34 = objc_msgSend(v25, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPBeaconScanningXPCClientProtocol);
  swift_retain();
  v35 = v48;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v31, 0, v32, v33, v34, sub_10001E900, v1, 0, 0, 0, 0);
  XPCSessionManager.register(service:)(v35);

  v36 = v50;
  v37 = *(void (**)(char *, uint64_t))(v49 + 8);
  v37(v35, v50);
  v38 = *(void (**)(char *, uint64_t))(v47 + 8);
  v38(v15, v9);
  v37(v30, v36);
  v38(v42, v9);
  v37(v44, v36);
  return ((uint64_t (*)(char *, uint64_t))v38)(v46, v9);
}

id sub_100798484()
{
  id result;

  result = sub_1007984A0();
  qword_1011075A8 = (uint64_t)result;
  return result;
}

id sub_1007984A0()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v0 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPOwnerSessionXPCProtocol);
  v1 = sub_1007B6904();
  v2 = swift_allocObject(v1, ((*(unsigned int *)(v1 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v1 + 52) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_100E22B10;
  v3 = sub_10000F4A0(0, &qword_1010EE380, NSArray_ptr);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = sub_10000F4A0(0, (unint64_t *)&qword_1010EE388, NSUUID_ptr);
  *(_QWORD *)(v2 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v2, "latestLocationsForIdentifiers:fetchLimit:sources:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v5 = sub_1007B6904();
  v6 = swift_allocObject(v5, ((*(unsigned int *)(v5 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v5 + 52) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
  v7 = sub_10000F4A0(0, (unint64_t *)&unk_1010EE370, NSSet_ptr);
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = sub_10000F4A0(0, &qword_101106C10, NSString_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v6, "latestLocationsForIdentifiers:fetchLimit:sources:completion:", 2, 0);
  swift_bridgeObjectRelease();
  v8 = sub_1007B6904();
  v9 = swift_allocObject(v8, ((*(unsigned int *)(v8 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v8 + 52) | 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v9 + 32) = v3;
  *(_QWORD *)(v9 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v9, "beaconGroupsForUUIDs:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v10 = sub_1007B6904();
  v11 = swift_allocObject(v10, ((*(unsigned int *)(v10 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v10 + 52) | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v11 + 32) = v3;
  *(_QWORD *)(v11 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v11, "standaloneBeaconsForUUIDs:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v12 = sub_1007B6904();
  v13 = swift_allocObject(v12, ((*(unsigned int *)(v12 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v12 + 52) | 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E26E00;
  *(_QWORD *)(v13 + 32) = v7;
  v14 = sub_10000F4A0(0, &qword_1010F4B10, SPUnauthorizedTrackingObservation_ptr);
  *(_QWORD *)(v13 + 40) = v14;
  v15 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
  *(_QWORD *)(v13 + 48) = v15;
  v16 = sub_10000F4A0(0, &qword_1011083D0, SPUnauthorizedTrackingAdvertisement_ptr);
  *(_QWORD *)(v13 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v13, "didObserveUnauthorizedTrackingWithCompletion:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v17 = sub_1007B6904();
  v18 = swift_allocObject(v17, ((*(unsigned int *)(v17 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v17 + 52) | 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E26E00;
  *(_QWORD *)(v18 + 32) = v3;
  *(_QWORD *)(v18 + 40) = v14;
  *(_QWORD *)(v18 + 48) = v15;
  *(_QWORD *)(v18 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v18, "didWithdrawUnauthorizedTrackingWithCompletion:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v19 = sub_1007B6904();
  v20 = swift_allocObject(v19, ((*(unsigned int *)(v19 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v19 + 52) | 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E26E00;
  *(_QWORD *)(v20 + 32) = v3;
  *(_QWORD *)(v20 + 40) = v14;
  *(_QWORD *)(v20 + 48) = v15;
  *(_QWORD *)(v20 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v20, "didDetectUnauthorizedTrackingWithCompletion:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v21 = sub_1007B6904();
  v22 = swift_allocObject(v21, ((*(unsigned int *)(v21 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v21 + 52) | 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E26E00;
  *(_QWORD *)(v22 + 32) = v3;
  *(_QWORD *)(v22 + 40) = v14;
  *(_QWORD *)(v22 + 48) = v15;
  *(_QWORD *)(v22 + 56) = v16;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v22, "didUpdateUnauthorizedTrackingWithCompletion:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v23 = sub_1007B6904();
  v24 = swift_allocObject(v23, ((*(unsigned int *)(v23 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v23 + 52) | 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v24 + 32) = v3;
  *(_QWORD *)(v24 + 40) = sub_10000F4A0(0, &qword_1011083D8, SPBeaconObservation_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v24, "updateBeaconObservations:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v25 = sub_1007B6904();
  v26 = swift_allocObject(v25, ((*(unsigned int *)(v25 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v25 + 52) | 7);
  *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v26 + 32) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v26, "tagSeparationStateChanged:beaconUUID:location:completion:", 1, 0);
  swift_bridgeObjectRelease();
  v27 = sub_1007B6904();
  v28 = swift_allocObject(v27, ((*(unsigned int *)(v27 + 48) + 7) & 0x1FFFFFFF8) + 8, *(unsigned __int16 *)(v27 + 52) | 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v28 + 32) = sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v28, "tagSeparationStateChanged:beaconUUID:location:completion:", 2, 0);
  swift_bridgeObjectRelease();
  v29 = sub_1007B6904();
  v30 = swift_allocObject(v29, ((*(unsigned int *)(v29 + 48) + 7) & 0x1FFFFFFF8) + 24, *(unsigned __int16 *)(v29 + 52) | 7);
  *(_OWORD *)(v30 + 16) = xmmword_100E221E0;
  *(_QWORD *)(v30 + 32) = v3;
  *(_QWORD *)(v30 + 40) = v4;
  *(_QWORD *)(v30 + 48) = sub_10000F4A0(0, (unint64_t *)&unk_1010FF7E0, SPUnknownBeacon_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v30, "unknownBeaconsForUUIDs:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v31 = sub_1007B6904();
  v32 = swift_allocObject(v31, ((*(unsigned int *)(v31 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v31 + 52) | 7);
  *(_OWORD *)(v32 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v32 + 32) = v3;
  *(_QWORD *)(v32 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v32, "enableSeparationMonitoringForBeacons:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v33 = sub_1007B6904();
  v34 = swift_allocObject(v33, ((*(unsigned int *)(v33 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v33 + 52) | 7);
  *(_OWORD *)(v34 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v34 + 32) = v3;
  *(_QWORD *)(v34 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v34, "disableSeparationMonitoringForBeacons:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v35 = sub_1007B6904();
  v36 = swift_allocObject(v35, ((*(unsigned int *)(v35 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v35 + 52) | 7);
  *(_OWORD *)(v36 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v36 + 32) = v3;
  *(_QWORD *)(v36 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v36, "assignSafeLocation:to:completion:", 1, 0);
  swift_bridgeObjectRelease();
  v37 = sub_1007B6904();
  v38 = swift_allocObject(v37, ((*(unsigned int *)(v37 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v37 + 52) | 7);
  *(_OWORD *)(v38 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v38 + 32) = v3;
  *(_QWORD *)(v38 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v38, "unassignSafeLocation:from:completion:", 1, 0);
  swift_bridgeObjectRelease();
  v39 = sub_1007B6904();
  v40 = swift_allocObject(v39, ((*(unsigned int *)(v39 + 48) + 7) & 0x1FFFFFFF8) + 16, *(unsigned __int16 *)(v39 + 52) | 7);
  *(_OWORD *)(v40 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v40 + 32) = v7;
  *(_QWORD *)(v40 + 40) = v4;
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)(v40, "publishSeparationEventForBeacons:eventType:region:completion:", 0, 0);
  swift_bridgeObjectRelease();
  v41 = sub_10000F4A0(0, (unint64_t *)&unk_1011083E0, CLCircularRegion_ptr);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", swift_getObjCClassFromMetadata(v41), "publishSeparationEventForBeacons:eventType:region:completion:", 1, 0);
  v42 = sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  objc_msgSend(v0, "setClass:forSelector:argumentIndex:ofReply:", swift_getObjCClassFromMetadata(v42), "updateSafeLocation:completion:", 0, 0);
  return v0;
}

uint64_t sub_100798BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v1 + 56);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    static DispatchQoS.background.getter(result);
    v12 = swift_allocObject(&unk_101091DA8, 24, 7);
    swift_weakInit(v12 + 16, v1);
    v13 = type metadata accessor for XPCActivity();
    swift_allocObject(v13, 112, 7);
    v14 = sub_100734F68(0xD00000000000002ELL, (void *)0x8000000100EE4AD0, (uint64_t)v4, (uint64_t)sub_100798D80, 0, (uint64_t)sub_1007BD628, v12);
    swift_release();
    *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_afterFirstUnlockActivity) = v14;
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100798D80@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t);
  uint64_t result;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v17 - v8;
  static SystemInfo.lockState.getter(v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  v10 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v18, v2, v10);
  dispatch thunk of RawRepresentable.rawValue.getter(&v17, v2, v10);
  v12 = v17;
  v11 = v18;
  v13 = *(void (**)(char *, uint64_t))(v3 + 8);
  v13(v6, v2);
  result = ((uint64_t (*)(char *, uint64_t))v13)(v9, v2);
  v15 = v11 == v12;
  *a1 = 2 * (v11 != v12);
  a1[1] = v15;
  if (v11 == v12)
    v16 = 576;
  else
    v16 = 0;
  a1[2] = v15;
  a1[3] = v15;
  a1[4] = v16;
  return result;
}

uint64_t sub_100798EC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v9 = static os_log_type_t.default.getter(v8);
      if (qword_1010EA248 != -1)
      {
        v10 = v9;
        swift_once(&qword_1010EA248, sub_100B5D8FC);
        v9 = v10;
      }
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7D28, "Running afterFirstUnlockActivity.", 33, 2, _swiftEmptyArrayStorage);
      sub_10026E3A4();
      type metadata accessor for Transaction(0);
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_1007B8000, v7, &type metadata for () + 1);
      sub_100732A0C();
      if (qword_1010EA640 != -1)
        swift_once(&qword_1010EA640, sub_100DFC940);
      sub_100DFCFE0();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100799030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  char v21[40];

  sub_100005CF0(a1, (uint64_t)v20, &qword_101106350);
  v8 = v20[0];
  v9 = v20[1];
  v10 = v20[2];
  v11 = v20[3];
  v12 = v20[4];
  result = sub_100005CF0(a1, (uint64_t)v21, &qword_101106350);
  v14 = v21[0] == 2;
  if (v21[0] == 2)
    v15 = 257;
  else
    v15 = v8;
  if (v21[0] == 2)
    v16 = a2;
  else
    v16 = v9;
  if (v21[0] == 2)
    v17 = a2;
  else
    v17 = v10;
  if (v21[0] == 2)
    v18 = a3;
  else
    v18 = v11;
  *a4 = v15;
  a4[1] = v16;
  if (v14)
    v19 = 576;
  else
    v19 = v12;
  a4[2] = v17;
  a4[3] = v18;
  a4[4] = v19;
  return result;
}

uint64_t sub_1007990E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v5 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1007329F0();
    }
    else if (a3 == 2)
    {
      v8 = static os_log_type_t.default.getter(v7);
      if (qword_1010EA2B0 != -1)
      {
        v9 = v8;
        swift_once(&qword_1010EA2B0, sub_100B5DE10);
        v8 = v9;
      }
      os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7D90, "pruning BeaconManagerService", 28, 2, _swiftEmptyArrayStorage);
      swift_retain();
      sub_1007FA1D0();
      swift_release();
      swift_retain();
      sub_1007FA4A4();
      swift_release();
      sub_100732A0C();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100799204(uint64_t a1, uint64_t a2)
{
  return sub_10079CAC8(a1, a2, (uint64_t)&unk_101092960, (uint64_t)sub_1007BD868, (uint64_t)&unk_101092978);
}

uint64_t sub_100799230()
{
  _QWORD *v0;
  uint64_t v1;
  char *EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;

  v42 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v42);
  EnumCaseMultiPayload = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for OwnedBeaconRecord(0);
  v3 = *(_QWORD *)(v41 - 8);
  v4 = __chkstk_darwin(v41);
  v40 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - v6;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = v0;
  v12 = (void *)v0[8];
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  v14 = _dispatchPreconditionTest(_:)(v11);
  v15 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v14 & 1) == 0)
    goto LABEL_22;
  v0 = (_QWORD *)static os_log_type_t.default.getter(v15);
  if (qword_1010EA278 != -1)
    goto LABEL_23;
  while (1)
  {
    v16 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v0, &_mh_execute_header, qword_1011B7D58, "Family updated", 14, 2, _swiftEmptyArrayStorage);
    v17 = sub_1000188D0();
    v18 = v17;
    v43 = _swiftEmptyArrayStorage;
    v39 = *((_QWORD *)v17 + 2);
    if (!v39)
      break;
    v19 = (uint64_t)EnumCaseMultiPayload;
    v20 = 0;
    v0 = _swiftEmptyArrayStorage;
    v21 = type metadata accessor for OwnedBeaconRecord;
    v36 = v3;
    v37 = EnumCaseMultiPayload;
    v38 = v17;
    while (v20 < *((_QWORD *)v18 + 2))
    {
      v22 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      v23 = *(_QWORD *)(v3 + 72);
      sub_10005972C((uint64_t)&v18[v22 + v23 * v20], (uint64_t)v7, v21);
      sub_10005972C((uint64_t)&v7[*(int *)(v41 + 24)], v19, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = (char *)swift_getEnumCaseMultiPayload(v19, v42);
      sub_1000126B0(v19, type metadata accessor for StableIdentifier);
      if ((_DWORD)EnumCaseMultiPayload == 4)
      {
        sub_1000126B0((uint64_t)v7, v21);
        v18 = v38;
      }
      else
      {
        v24 = v21;
        sub_1000126EC((uint64_t)v7, v40, v21);
        if ((swift_isUniquelyReferenced_nonNull_native(v0) & 1) == 0)
          sub_10009A680(0, v0[2] + 1, 1);
        v0 = v43;
        v26 = v43[2];
        v25 = v43[3];
        v18 = v38;
        if (v26 >= v25 >> 1)
        {
          sub_10009A680(v25 > 1, v26 + 1, 1);
          v0 = v43;
        }
        v0[2] = v26 + 1;
        v27 = (uint64_t)v0 + v22 + v26 * v23;
        v21 = v24;
        sub_1000126EC(v40, v27, v24);
        v3 = v36;
        v19 = (uint64_t)v37;
      }
      if (v39 == ++v20)
      {
        v16 = v43;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once(&qword_1010EA278, sub_100B5DB4C);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v28 = v16[2];
  if (!v28)
    return swift_release();
  v29 = (char *)v16 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  result = swift_retain();
  v31 = 0;
  v32 = v35;
  while (v32[5])
  {
    v33 = (uint64_t)&v29[*(_QWORD *)(v3 + 72) * v31++];
    swift_retain();
    sub_10037BD14(v33);
    result = swift_release();
    if (v28 == v31)
      return swift_release_n(v16, 2);
  }
  __break(1u);
  return result;
}

uint64_t sub_1007995EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B75D0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received RTLocationsOfInterestDidChange notification, scheduling safe lcoation update.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v1 + 240);
  v8 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v8);
  v10[2] = v7;
  v11 = 1;
  v12 = 0;
  v13 = 0;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.LocationOfInterestProvider.updateAllSafeLocationsWithLOI", 86, 2, sub_10077CB9C, v10, &type metadata for () + 1);
}

uint64_t sub_10079972C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v4 + 16) = a4;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100799788, 0, 0);
}

uint64_t sub_100799788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_101108284);
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = sub_1007997FC;
  return sub_1007B986C(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1007997FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  sub_100004048(v3, (uint64_t *)&unk_1010F47C0);
  if (v0)
    v4 = sub_1007998AC;
  else
    v4 = sub_100799870;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100799870()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007998AC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1007998E8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int EnumCaseMultiPayload;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t);
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[4];

  v42 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v42);
  v41 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = __chkstk_darwin(v44);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v38 - v12;
  v14 = objc_autoreleasePoolPush();
  sub_1007B5A08(a1);
  v16 = v15;
  v18 = v17;
  v19 = a2 + 16;
  objc_autoreleasePoolPop(v14);
  if (!v18)
  {
    v16 = 0x6E616843206F4E3CLL;
    v18 = 0xEE003E6761546567;
  }
  if (qword_1010E9F20 != -1)
    swift_once(&qword_1010E9F20, sub_100791C44);
  v20 = type metadata accessor for Logger(0);
  sub_10001A9E8(v20, (uint64_t)qword_1011B7648);
  v43 = a1;
  sub_10005972C(a1, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  swift_bridgeObjectRetain(v18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v40 = a4;
    v26 = v25;
    v46[0] = v25;
    *(_DWORD *)v24 = 136315394;
    v39 = a3;
    swift_bridgeObjectRetain(v18);
    v45 = sub_100016940(v16, v18, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(v18, 3);
    *(_WORD *)(v24 + 12) = 2080;
    sub_10005972C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    v27 = String.init<A>(describing:)(v11, v44);
    v45 = sub_100016940(v27, v28, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    a3 = v39;
    sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully updated local beacon [tag: %s]: %s ", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    v29 = v26;
    a4 = v40;
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v18, 2);
    sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  }

  swift_beginAccess(v19, v46, 0, 0);
  Strong = swift_weakLoadStrong(v19);
  v31 = v43;
  if (Strong)
  {
    v32 = Strong;
    v33 = v44;
    v34 = sub_10088A6EC();
    if (v34[2]
      && (v35 = v41,
          sub_10005972C(v31 + *(int *)(v33 + 24), v41, type metadata accessor for StableIdentifier),
          EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v35, v42),
          sub_1000126B0(v35, type metadata accessor for StableIdentifier),
          !EnumCaseMultiPayload))
    {
      v37 = *(_QWORD *)(v32 + 40);
      if (v37)
      {
        swift_retain();
        swift_retain();
        sub_1003CDF78((uint64_t)v34, v31, v37, a3, a4);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
      else
      {
        __break(1u);
        objc_autoreleasePoolPop(0);
        __break(1u);
      }
    }
    else
    {
      ((void (*)(void))a3)();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100799D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(char *), uint64_t a7, void (*a8)(void))
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *);
  uint64_t v51;
  void (*v52)(void);
  uint64_t v53;
  uint64_t v54;

  v51 = a7;
  v52 = a8;
  v49 = a2;
  v50 = a6;
  v47 = a4;
  v48 = a5;
  v45 = a3;
  v9 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v9);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeaconNamingRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v46 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v44 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v44 + 64);
  v17 = __chkstk_darwin(v15);
  v18 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v43 - v19;
  v21 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v21);
  v23 = (uint64_t *)((char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v23, (uint64_t *)&unk_101108050);
  if (swift_getEnumCaseMultiPayload(v23, v21) == 1)
  {
    v24 = *v23;
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7648);
    swift_errorRetain(v24);
    v26 = swift_errorRetain(v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v53 = v24;
      v54 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_errorRetain(v24);
      v31 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v32 = String.init<A>(describing:)(&v53, v31);
      v53 = sub_100016940(v32, v33, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to update local beacon: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(v24);
      swift_errorRelease(v24);
    }

    v52();
    return swift_errorRelease(v24);
  }
  else
  {
    sub_1000126EC((uint64_t)v23, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    sub_10000F9B8(v49, (uint64_t)v11, (uint64_t *)&unk_101105880);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_100004048((uint64_t)v11, (uint64_t *)&unk_101105880);
      v50(v20);
    }
    else
    {
      v35 = (uint64_t)v11;
      v36 = v46;
      sub_1000126EC(v35, v46, type metadata accessor for BeaconNamingRecord);
      v37 = *(_QWORD *)(v45 + 280);
      sub_10005972C((uint64_t)v20, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
      v38 = *(unsigned __int8 *)(v44 + 80);
      v39 = (v38 + 32) & ~v38;
      v40 = swift_allocObject(&unk_101092050, v39 + v16, v38 | 7);
      v41 = v51;
      *(_QWORD *)(v40 + 16) = v50;
      *(_QWORD *)(v40 + 24) = v41;
      sub_1000126EC((uint64_t)v18, v40 + v39, type metadata accessor for OwnedBeaconRecord);
      v42 = v48;
      swift_bridgeObjectRetain_n(v48, 2);
      swift_retain();
      sub_10087105C(v36, 0, (void (*)(uint64_t))sub_1007B982C, (void (*)(uint64_t))v40, v37, v47, v42);
      swift_release();
      swift_bridgeObjectRelease_n(v42, 2);
      sub_1000126B0(v36, type metadata accessor for BeaconNamingRecord);
    }
    return sub_1000126B0((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_10079A18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0) + 32));
  swift_bridgeObjectRetain(a3);
  result = swift_bridgeObjectRelease();
  *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_10079A1E0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  if (a1)
  {
    v3 = a1;
    v4 = swift_errorRetain(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v6 = qword_1011B7D28;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
    v14 = v3;
    swift_errorRetain(v3);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v10 = String.init<A>(describing:)(&v14, v9);
    v12 = v11;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_10001AA00();
    *(_QWORD *)(v8 + 32) = v10;
    *(_QWORD *)(v8 + 40) = v12;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Error from updateSharedBeaconRecord: %@", 39, 2, v8);
    swift_bridgeObjectRelease();
    a1 = swift_errorRelease(v3);
  }
  return a2(a1);
}

uint64_t sub_10079A30C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  uint64_t result;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v41 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6);
  v37 = (uint64_t)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v36 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = (void *)v2[8];
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    v38 = v9;
    v22 = dispatch_group_create();
    sub_10000F9B8(a1, (uint64_t)v14, (uint64_t *)&unk_1010F47C0);
    v23 = v2[35];
    v24 = *(_QWORD *)(v23 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v25 = type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v23, v24, &type metadata for () + 1, v25);
    v26 = v42;
    v27 = type metadata accessor for LocalBeaconingManager(0);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    v2[4] = sub_100B89294((uint64_t)v14, v26);
    swift_retain();
    swift_release();
    v28 = a1;
    sub_10000F9B8(a1, (uint64_t)v12, (uint64_t *)&unk_1010F47C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v12, 1, v40) == 1)
    {
      sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v29 = v37;
      sub_1000126EC((uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v37, type metadata accessor for OwnedBeaconRecord);
      sub_10079A7A4(v29);
      sub_1000126B0(v29, type metadata accessor for OwnedBeaconRecord);
    }
    dispatch_group_enter(v22);
    v30 = type metadata accessor for TaskPriority(0);
    v31 = (uint64_t)v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v41, 1, 1, v30);
    sub_10000F9B8(v28, (uint64_t)v14, (uint64_t *)&unk_1010F47C0);
    v32 = *(unsigned __int8 *)(v38 + 80);
    v33 = (v32 + 48) & ~v32;
    v34 = (_QWORD *)swift_allocObject(&unk_101092898, v33 + v10, v32 | 7);
    v34[2] = 0;
    v34[3] = 0;
    v34[4] = v22;
    v34[5] = v2;
    sub_100005CF0((uint64_t)v14, (uint64_t)v34 + v33, (uint64_t *)&unk_1010F47C0);
    v35 = v22;
    swift_retain();
    sub_100626BC4(v31, (uint64_t)&unk_101108360, (uint64_t)v34);
    swift_release();
    OS_dispatch_group.wait()();

    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10079A688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v8;

  *(_QWORD *)(v6 + 16) = a4;
  v8 = (_QWORD *)swift_task_alloc(dword_101108284);
  *(_QWORD *)(v6 + 24) = v8;
  *v8 = v6;
  v8[1] = sub_10079A6D8;
  return sub_1007B986C(a6);
}

uint64_t sub_10079A6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10079A770;
  else
    v3 = sub_10079A73C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10079A73C()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10079A770()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10079A7A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t result;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  void *v51;
  Class isa;
  id v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _QWORD v77[3];
  _BYTE v78[8];
  uint64_t v79;
  uint64_t v80;
  id v81[2];

  v2 = v1;
  v75 = a1;
  v3 = sub_10001A9A8(&qword_1010F4AD8);
  __chkstk_darwin(v3);
  v5 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OfflineFindingInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v74 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101108350);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v76 = (char *)&v72 - v13;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_BYTE **)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v81[0] = (id)0x7365547265646E75;
  v81[1] = (id)0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v79, v81, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease();
  if ((v79 & 1) == 0)
  {
    v19 = *(void **)(v1 + 64);
    *v17 = v19;
    (*((void (**)(_QWORD *, _QWORD, uint64_t))v15 + 13))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
    v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)(v17);
    result = (*((uint64_t (**)(_QWORD *, uint64_t))v15 + 1))(v17, v14);
    if ((v19 & 1) != 0)
    {
      v21 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked;
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) & 1) != 0)
        return result;
      *(_BYTE *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 1;
      v15 = v76;
      sub_100BDCE40(v76);
      sub_10000F9B8((uint64_t)v15, (uint64_t)v12, &qword_101108350);
      if (swift_getEnumCaseMultiPayload(v12, v9) != 1)
      {
        sub_100004048((uint64_t)v15, &qword_101108350);
        v27 = (uint64_t)v12;
        return sub_100004048(v27, &qword_101108350);
      }
      sub_100BDD528();
      *(_BYTE *)(v2 + v21) = 0;
      sub_1002732A0(v75, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
      {
        sub_1000126EC((uint64_t)v5, v74, type metadata accessor for OfflineFindingInfo);
        v28 = sub_1008ED464();
        if (qword_1010E9C30 != -1)
          swift_once(&qword_1010E9C30, sub_10047F0AC);
        v29 = type metadata accessor for Logger(0);
        v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6F60);
        swift_bridgeObjectRetain_n(v28, 2);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.debug.getter(v32);
        v34 = os_log_type_enabled(v32, v33);
        v75 = v30;
        if (v34)
        {
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v36 = (void *)swift_slowAlloc(32, -1);
          v81[0] = v36;
          *(_DWORD *)v35 = 136315138;
          v73 = v35 + 4;
          swift_bridgeObjectRetain(v28);
          v38 = Dictionary.description.getter(v37, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
          v40 = v39;
          swift_bridgeObjectRelease();
          v79 = sub_100016940(v38, v40, (uint64_t *)v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v73, v35 + 12);
          swift_bridgeObjectRelease_n(v28, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "offineFindingInfo: %s", v35, 0xCu);
          swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v36, -1, -1);
          swift_slowDealloc(v35, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v28, 2);
        }
        swift_bridgeObjectRetain_n(v28, 2);
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.debug.getter(v42);
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc(12, -1);
          v45 = (void *)swift_slowAlloc(32, -1);
          v81[0] = v45;
          *(_DWORD *)v44 = 136315138;
          v73 = v44 + 4;
          swift_bridgeObjectRetain(v28);
          v47 = Dictionary.description.getter(v46, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
          v49 = v48;
          swift_bridgeObjectRelease();
          v79 = sub_100016940(v47, v49, (uint64_t *)v81);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v73, v44 + 12);
          swift_bridgeObjectRelease_n(v28, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "dict: %s", v44, 0xCu);
          swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1, -1);
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v28, 2);
        }
        v50 = v76;
        v51 = (void *)objc_opt_self(NSPropertyListSerialization);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v81[0] = 0;
        v53 = objc_msgSend(v51, "dataWithPropertyList:format:options:error:", isa, 200, 0, v81);

        v54 = v81[0];
        if (v53)
        {
          swift_bridgeObjectRelease();
          v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v53);
          v57 = v56;

          sub_100BDD89C(v55, v57);
          sub_10001BC14(v55, v57);
        }
        else
        {
          v58 = v54;
          v59 = _convertNSErrorToError(_:)(v54);

          swift_willThrow(v60);
          swift_errorRetain(v59);
          swift_bridgeObjectRetain(v28);
          v61 = swift_errorRetain(v59);
          v62 = Logger.logObject.getter(v61);
          v63 = static os_log_type_t.error.getter(v62);
          if (os_log_type_enabled(v62, v63))
          {
            v64 = swift_slowAlloc(22, -1);
            v65 = (void *)swift_slowAlloc(64, -1);
            v81[0] = v65;
            *(_DWORD *)v64 = 136315394;
            swift_bridgeObjectRetain(v28);
            v76 = (char *)&type metadata for Any + 8;
            v67 = Dictionary.description.getter(v66, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
            v69 = v68;
            swift_bridgeObjectRelease();
            v79 = sub_100016940(v67, v69, (uint64_t *)v81);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v64 + 4, v64 + 12);
            swift_bridgeObjectRelease_n(v28, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v64 + 12) = 2080;
            swift_getErrorValue(v59, v78, v77);
            v70 = Error.localizedDescription.getter(v77[1], v77[2]);
            v79 = sub_100016940(v70, v71, (uint64_t *)v81);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v64 + 14, v64 + 22);
            swift_bridgeObjectRelease();
            swift_errorRelease(v59);
            swift_errorRelease(v59);
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Error converting offlineFindingInfo to data: %s error: %s", (uint8_t *)v64, 0x16u);
            swift_arrayDestroy(v65, 2, v76);
            swift_slowDealloc(v65, -1, -1);
            swift_slowDealloc(v64, -1, -1);

          }
          else
          {

            swift_errorRelease(v59);
            swift_errorRelease(v59);
            swift_bridgeObjectRelease_n(v28, 2);
          }
          swift_errorRelease(v59);
        }
        sub_1000126B0(v74, type metadata accessor for OfflineFindingInfo);
        v27 = (uint64_t)v50;
        return sub_100004048(v27, &qword_101108350);
      }
      sub_100004048((uint64_t)v5, &qword_1010F4AD8);
      if (qword_1010E9C30 == -1)
      {
LABEL_9:
        v22 = type metadata accessor for Logger(0);
        v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B6F60);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.error.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "offineFindingInfo retured nil", v26, 2u);
          swift_slowDealloc(v26, -1, -1);
        }

        v27 = (uint64_t)v15;
        return sub_100004048(v27, &qword_101108350);
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1010E9C30, sub_10047F0AC);
    goto LABEL_9;
  }
  return result;
}

void sub_10079B124(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  Class isa;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD aBlock[6];
  void *v18;

  v7 = sub_10001A9A8(&qword_1010F8318);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  XPCSession.proxy.getter(&v18);
  v10 = v18;
  if (v18)
  {
    if (a4 >> 60 == 15)
      isa = 0;
    else
      isa = Data._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
    v12 = *(unsigned __int8 *)(v8 + 80);
    v13 = (v12 + 24) & ~v12;
    v14 = swift_allocObject(&unk_1010923C0, v13 + v9, v12 | 7);
    *(_QWORD *)(v14 + 16) = a2;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v14 + v13, (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
    aBlock[4] = sub_1007BC2AC;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100555E2C;
    aBlock[3] = &unk_1010923D8;
    v15 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v10, "pushLocalBeaconInfo:completion:", isa, v15);
    swift_unknownObjectRelease(v10);
    _Block_release(v15);

  }
}

uint64_t sub_10079B2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_1011B7648);
    v3 = swift_errorRetain(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138543362;
      v8 = _convertErrorToNSError(_:)(a1);
      v13 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
      *v7 = v8;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error from pushLocalBeaconInfo: %{public}@", v6, 0xCu);
      v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v7, 1, v9);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
    }

    v13 = a1;
    v12 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(throwing:)(&v13, v12);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(returning:)(v10, v10);
  }
}

void sub_10079B488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;

  v1 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v2 = qword_1011B7D28;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  v6 = UUID.uuidString.getter(v5);
  v8 = v7;
  *(_QWORD *)(v4 + 56) = &type metadata for String;
  *(_QWORD *)(v4 + 64) = sub_10001AA00();
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v8;
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v2, "Removing poisoned local beacon: %@", 34, 2, v4);
  swift_bridgeObjectRelease();
  sub_10079B5F0();
  sub_100BDD528();
  v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v9, "removeObjectForKey:", v10);

}

uint64_t sub_10079B5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  dispatch_group_t v27;
  _QWORD *v28;
  _QWORD v30[2];
  uint64_t v31;
  _QWORD *v32;
  dispatch_group_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v36 = type metadata accessor for OwnedBeaconRecord(0);
  v1 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v3 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = dispatch_group_create();
  v31 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  v32 = sub_10080D208();
  v34 = v0;
  sub_10026D6F8((uint64_t)v32);
  v8 = sub_10080D208();
  v9 = v8[2];
  if (v9)
  {
    v37 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v9, 0);
    v10 = *(unsigned __int8 *)(v1 + 80);
    v30[1] = v8;
    v11 = (uint64_t)v8 + ((v10 + 32) & ~v10);
    v12 = *(_QWORD *)(v1 + 72);
    v35 = v12;
    do
    {
      sub_10005972C(v11, (uint64_t)v3, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v3[*(int *)(v36 + 20)], v4);
      sub_1000126B0((uint64_t)v3, type metadata accessor for OwnedBeaconRecord);
      v13 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
      {
        sub_10009A578(0, v13[2] + 1, 1);
        v12 = v35;
        v13 = v37;
      }
      v15 = v13[2];
      v14 = v13[3];
      if (v15 >= v14 >> 1)
      {
        sub_10009A578(v14 > 1, v15 + 1, 1);
        v12 = v35;
        v13 = v37;
      }
      v13[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, v7, v4);
      v37 = v13;
      v11 += v12;
      --v9;
    }
    while (v9);
    v16 = swift_bridgeObjectRelease();
  }
  else
  {
    v16 = swift_bridgeObjectRelease();
    v13 = _swiftEmptyArrayStorage;
  }
  v17 = static os_log_type_t.default.getter(v16);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v18 = qword_1011B7D28;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 72, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  swift_bridgeObjectRetain(v13);
  v22 = Array.description.getter(v21, v4);
  v24 = v23;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  *(_QWORD *)(v20 + 64) = sub_10001AA00();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "removeLocalBeaconRecord: %@", 27, 2, v20);
  swift_bridgeObjectRelease();
  v25 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v25);
  v27 = v33;
  v26 = v34;
  v30[-6] = v13;
  v30[-5] = v27;
  v28 = v32;
  v30[-4] = v26;
  v30[-3] = v28;
  v30[-2] = v31;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconManagerService.removeLocalBeaconRecord", 74, 2, sub_1007BC060, &v30[-8], &type metadata for () + 1);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_10079B978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[3];
  char v83[16];
  char v84[24];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v4 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v77 = *(_QWORD *)(v5 - 8);
  v78 = v5;
  __chkstk_darwin(v5);
  v74 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v79 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v7 = __chkstk_darwin(v79);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v73 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v73 - v13;
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v81 = *(_QWORD *)(v15 - 8);
  v16 = __chkstk_darwin(v15);
  v76 = (uint64_t)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v75 = (uint64_t)&v73 - v19;
  __chkstk_darwin(v18);
  v80 = (uint64_t)&v73 - v20;
  v21 = type metadata accessor for DispatchPredicate(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = *(void **)(v1 + 64);
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  v27 = (*(uint64_t (**)(_QWORD *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) != 0)
  {
    v21 = static os_log_type_t.default.getter(v27);
    if (qword_1010EA248 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA248, sub_100B5D8FC);
LABEL_3:
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D28, "turnLocalBeaconingOn()", 22, 2, _swiftEmptyArrayStorage);
  sub_10027081C((uint64_t)v14);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48);
  if (v28(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010F47C0);
    goto LABEL_5;
  }
  v38 = v80;
  sub_1000126EC((uint64_t)v14, v80, type metadata accessor for OwnedBeaconRecord);
  sub_1007FDEC4();
  v39 = 0;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  swift_release();
  if (v84[0] != 1)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
    sub_10005972C(v38, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v12, 0, 1, v15);
    sub_10079A30C((uint64_t)v12);
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
    v50 = v38;
LABEL_24:
    sub_1000126B0(v50, type metadata accessor for OwnedBeaconRecord);
    return;
  }
  v40 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v40, "stringForKey:", v41);

  if (!v42)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v4, 1, 1, v78);
    goto LABEL_15;
  }
  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  UUID.init(uuidString:)(v43, v45);
  swift_bridgeObjectRelease();
  v47 = v77;
  v46 = v78;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v4, 1, v78) == 1)
  {
LABEL_15:
    v51 = sub_100004048((uint64_t)v4, &qword_1010ED860);
    goto LABEL_16;
  }
  v73 = 0;
  v48 = v74;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v74, v4, v46);
  v49 = v80;
  if ((static UUID.== infix(_:_:)(v48, v80 + *(int *)(v15 + 20)) & 1) == 0)
  {
    v51 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v48, v46);
    v39 = v73;
LABEL_16:
    v52 = static os_log_type_t.default.getter(v51);
    v53 = os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, qword_1011B7D28, "Local beacon record already exists", 34, 2, _swiftEmptyArrayStorage);
    v54 = v80;
    if (*(_QWORD *)(v80 + *(int *)(v15 + 44) + 8) >> 60 == 15)
    {
      v73 = v39;
      v55 = static os_log_type_t.default.getter(v53);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v56 = qword_1011B7D38;
      v57 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v58 = swift_allocObject(v57, 72, 7);
      v79 = xmmword_100E22B00;
      *(_OWORD *)(v58 + 16) = xmmword_100E22B00;
      v59 = v75;
      sub_10005972C(v54, v75, type metadata accessor for OwnedBeaconRecord);
      v60 = String.init<A>(describing:)(v59, v15);
      v62 = v61;
      *(_QWORD *)(v58 + 56) = &type metadata for String;
      v63 = sub_10001AA00();
      *(_QWORD *)(v58 + 64) = v63;
      *(_QWORD *)(v58 + 32) = v60;
      *(_QWORD *)(v58 + 40) = v62;
      v64 = v80;
      os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Upgrade local beacon: %@", 24, 2, v58);
      swift_bridgeObjectRelease();
      v65 = v76;
      v66 = v73;
      v67 = sub_10079E118(v64, v76);
      if (v66)
      {
        v68 = static os_log_type_t.error.getter(v67);
        v69 = qword_1011B7D38;
        v70 = swift_allocObject(v57, 72, 7);
        *(_OWORD *)(v70 + 16) = v79;
        swift_getErrorValue(v66, v83, v82);
        v71 = Error.localizedDescription.getter(v82[1], v82[2]);
        *(_QWORD *)(v70 + 56) = &type metadata for String;
        *(_QWORD *)(v70 + 64) = v63;
        *(_QWORD *)(v70 + 32) = v71;
        *(_QWORD *)(v70 + 40) = v72;
        os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Local record upgrade failed: %@", 31, 2, v70);
        swift_bridgeObjectRelease();
        sub_10005972C(v64, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v12, 0, 1, v15);
        sub_10079A30C((uint64_t)v12);
        swift_errorRelease(v66);
        sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
      }
      else
      {
        sub_10005972C(v65, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v12, 0, 1, v15);
        sub_10079A30C((uint64_t)v12);
        sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
        sub_1000126B0(v65, type metadata accessor for OwnedBeaconRecord);
      }
      v50 = v64;
    }
    else
    {
      sub_10005972C(v80, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v81 + 56))(v12, 0, 1, v15);
      sub_10079A30C((uint64_t)v12);
      sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
      v50 = v54;
    }
    goto LABEL_24;
  }
  sub_10079B488(v49);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
  sub_1000126B0(v49, type metadata accessor for OwnedBeaconRecord);
LABEL_5:
  v29 = v79;
  v30 = dispatch_group_create();
  dispatch_group_enter(v30);
  v31 = swift_allocBox(v29);
  v33 = v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v32, 1, 1, v15);
  v34 = (_QWORD *)swift_allocObject(&unk_101092848, 40, 7);
  v34[2] = v30;
  v34[3] = v1;
  v34[4] = v31;
  v35 = v30;
  swift_retain();
  swift_retain();
  sub_10026F528((uint64_t)sub_1007BD268, (uint64_t)v34);
  swift_release();
  OS_dispatch_group.wait()();
  *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  swift_beginAccess(v33, v84, 0, 0);
  sub_10000F9B8(v33, (uint64_t)v12, (uint64_t *)&unk_1010F47C0);
  sub_10079A30C((uint64_t)v12);
  sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
  sub_10000F9B8(v33, (uint64_t)v9, (uint64_t *)&unk_1010F47C0);
  if (v28(v9, 1, v15) == 1)
  {
    v36 = sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F47C0);
    v37 = static os_log_type_t.error.getter(v36);
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7D28, "Error creating local beacon.", 28, 2, _swiftEmptyArrayStorage);
    swift_release();

  }
  else
  {

    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010F47C0);
    swift_release();
  }
}

void sub_10079C2E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_projectBox(a4);
  v17 = type metadata accessor for OwnedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(a1, 1, v17) != 1)
  {
    v33 = *(_QWORD *)(a3 + 64);
    aBlock[4] = sub_1007BD2BC;
    aBlock[5] = a3;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101092860;
    v18 = _Block_copy(aBlock);
    v32 = v13;
    v19 = v18;
    v20 = swift_retain();
    static DispatchQoS.unspecified.getter(v20);
    v34 = _swiftEmptyArrayStorage;
    v21 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = v9;
    v22 = a1;
    v23 = a2;
    v24 = v21;
    v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v31 = v12;
    v26 = v25;
    v27 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v28 = v24;
    a2 = v23;
    a1 = v22;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v26, v27, v8, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v19);
    _Block_release(v19);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v31);
    swift_release();
  }
  swift_beginAccess(v16, aBlock, 1, 0);
  sub_1007BD274(a1, v16);
  dispatch_group_leave(a2);
}

void sub_10079C53C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;

  v1 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v0 + 64);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v4 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA248 != -1)
LABEL_5:
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7D28, "turnLocalBeaconingOff()", 23, 2, _swiftEmptyArrayStorage);
  *(_QWORD *)(v0 + 32) = 0;
  v11 = swift_release();
  sub_10026D6F8(v11);
  v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v3, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject(&unk_101092820, 48, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v12;
  v14[5] = v0;
  v15 = v12;
  swift_retain();
  sub_100626BC4((uint64_t)v3, (uint64_t)&unk_101108340, (uint64_t)v14);
  swift_release();
  OS_dispatch_group.wait()();

}

uint64_t sub_10079C718(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v5 = type metadata accessor for OwnedBeaconRecord(0);
  result = __chkstk_darwin(v5);
  v9 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v8 + 80);
    v12 = a2 + ((v11 + 32) & ~v11);
    v18 = *(_QWORD *)(v8 + 72);
    v13 = (v11 + 24) & ~v11;
    v16[2] = v2;
    v17 = v13 + v7;
    v14 = v11 | 7;
    v16[1] = a2;
    swift_bridgeObjectRetain(a2);
    do
    {
      sub_10005972C(v12, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      v15 = swift_allocObject(&unk_1010927F8, v17, v14);
      *(_QWORD *)(v15 + 16) = a1;
      sub_1000126EC((uint64_t)v9, v15 + v13, type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      sub_100273E98(v12, 0, (uint64_t)sub_1007BD1A0, v15);
      swift_release();
      v12 += v18;
      --v10;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10079C868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (a1)
  {
    v9 = swift_errorRetain(a1);
    v10 = static os_log_type_t.default.getter(v9);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v11 = qword_1011B7D28;
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    v27 = a1;
    swift_errorRetain(a1);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v15 = String.init<A>(describing:)(&v27, v14);
    v17 = v16;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_10001AA00();
    *(_QWORD *)(v13 + 32) = v15;
    *(_QWORD *)(v13 + 40) = v17;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Processed and delete failed with error - %@", 43, 2, v13);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }
  else
  {
    v19 = static os_log_type_t.default.getter(v8);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v20 = qword_1011B7D28;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    sub_10005972C(a3, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    v23 = String.init<A>(describing:)(v7, v5);
    v25 = v24;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    *(_QWORD *)(v22 + 64) = sub_10001AA00();
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Processed and deleted %@", 24, 2, v22);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10079CA9C(uint64_t a1, uint64_t a2)
{
  return sub_10079CAC8(a1, a2, (uint64_t)&unk_101092258, (uint64_t)sub_1007BAFD0, (uint64_t)&unk_101092270);
}

uint64_t sub_10079CAC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];
  _QWORD *v27;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(a2 + 64);
  v16 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  aBlock[4] = a4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a5;
  v17 = _Block_copy(aBlock);
  swift_retain();
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release();
}

uint64_t sub_10079CCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE v14[16];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = *(void **)(v1 + 64);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v2 = *(_QWORD *)(v1 + 280);
  if (qword_1010EA0D8 != -1)
LABEL_5:
    swift_once(&qword_1010EA0D8, sub_1009A3098);
  v8 = type metadata accessor for URL(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7AA8);
  v10 = sub_100893C7C(v9);
  swift_retain();
  v11 = sub_1007B6BC0((uint64_t)v10, v2);
  swift_bridgeObjectRelease();
  swift_release();
  v12 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v12);
  *(_QWORD *)&v14[-16] = v11;
  *(_QWORD *)&v14[-8] = v1;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.RecordsPendingDeletion", 52, 2, sub_1007BCED0, &v14[-32], &type metadata for () + 1);
  swift_bridgeObjectRelease();
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.reevaluateLocalBeaconing", 54, 2, sub_1007BCEE8, v1, &type metadata for () + 1);
}

void sub_10079CE7C(int a1, uint64_t a2)
{
  int v2;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v9;
  id v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFNotificationCenter *v18;
  __CFNotificationCenter *v19;
  const __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD v27[4];
  char *v28;
  uint64_t v29;

  v4 = sub_100B1198C();
  v24 = a2;
  v5 = sub_1003433AC();
  v28 = v5;
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001C786C, v27, v6);

  v7 = v29;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v8 = sub_100C1AE20(v29);
  swift_bridgeObjectRelease();
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v9 = sub_1007B7A30();
  swift_bridgeObjectRelease();
  v10 = sub_1003435F8();
  v11 = (char)v10;
  v12 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v13 = v7 - 3;
  v14 = (v7 - 3) < 2;
  v15 = qword_1011B7D28;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 232, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E27910;
  *(_QWORD *)(v17 + 56) = &type metadata for Bool;
  *(_QWORD *)(v17 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 32) = v11 & 1;
  *(_QWORD *)(v17 + 96) = &type metadata for Bool;
  *(_QWORD *)(v17 + 104) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 72) = v8 & 1;
  *(_QWORD *)(v17 + 136) = &type metadata for Bool;
  *(_QWORD *)(v17 + 144) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 112) = v9;
  *(_QWORD *)(v17 + 176) = &type metadata for Bool;
  *(_QWORD *)(v17 + 184) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 152) = v4 & 1;
  *(_QWORD *)(v17 + 216) = &type metadata for Bool;
  *(_QWORD *)(v17 + 224) = &protocol witness table for Bool;
  *(_BYTE *)(v17 + 192) = v14;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v15, "EnableLocalBeaconing preference changed -- \n fmipEnabled: %d \n localBeaconingAllowed: %ld \n serviceEnabled: %d \n locationServicesEnabled: %d \n fmipLocationServicesEnabled: %d", v23, v24, v2, a1, v27[0]);
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    if ((v8 & v9 & v4 & 1) != 0 && v13 <= 1)
      sub_10079B978();
    else
      sub_10079C53C();
  }
  else
  {
    sub_10079C53C();
    *(_BYTE *)(v25 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_nvramAlreadyChecked) = 0;
  }
  v18 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v18)
  {
    v19 = v18;
    v20 = (const __CFString *)SPBeaconingStateChangedNotification;
    v21 = static os_log_type_t.default.getter(v18);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, qword_1011B7D38, "Posting SPBeaconingStateChangedNotification Darwin notification", 63, 2, _swiftEmptyArrayStorage);
    CFNotificationCenterPostNotification(v19, v20, 0, 0, 1u);

  }
  else
  {
    v22 = static os_log_type_t.error.getter(0);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7D38, "CFNotificationCenterGetDarwinNotifyCenter return nil!", 53, 2, _swiftEmptyArrayStorage);
  }
  Transaction.capture()();
}

uint64_t sub_10079D218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  void **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  uint64_t (*v20)();
  uint64_t v21;

  v2 = v1;
  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  result = os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D28, "Clearing any registered XPC activities", 38, 2, _swiftEmptyArrayStorage);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity);
  if (!v5)
    goto LABEL_5;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pruneActivity) = 0;
  v6 = *(NSObject **)(v5 + 16);
  v7 = swift_allocObject(&unk_1010927A8, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1003D8448;
  *(_QWORD *)(v7 + 24) = v5;
  v20 = sub_10005CBA4;
  v21 = v7;
  v16 = _NSConcreteStackBlock;
  v17 = 1107296256;
  v18 = sub_10001D8B8;
  v19 = &unk_1010927C0;
  v8 = _Block_copy(&v16);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v8);
  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v7, "", 90, 53, 20, 1);
  swift_release_n(v5, 2);
  result = swift_release();
  if ((v6 & 1) == 0)
  {
LABEL_5:
    v9 = static os_log_type_t.default.getter(result);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7DD8, "Clearing any registered XPC activities", 38, 2, _swiftEmptyArrayStorage);
    sub_10064FB18();
    sub_1004E4BA4();
    v10 = swift_release();
    v11 = static os_log_type_t.default.getter(v10);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7DE0, "Clearing any registered XPC activities", 38, 2, _swiftEmptyArrayStorage);
    sub_100138128();
    sub_1004E4BA4();
    result = swift_release();
    v12 = *(_QWORD *)(v2 + 40);
    if (!v12)
      goto LABEL_13;
    v13 = *(NSObject **)(v12 + 56);
    v14 = swift_allocObject(&unk_101092758, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_1007BCEA8;
    *(_QWORD *)(v14 + 24) = v12;
    v20 = sub_10005CBA4;
    v21 = v14;
    v16 = _NSConcreteStackBlock;
    v17 = 1107296256;
    v18 = sub_10001D8B8;
    v19 = &unk_101092770;
    v15 = _Block_copy(&v16);
    swift_retain_n(v12, 2);
    swift_retain();
    swift_release();
    dispatch_sync(v13, v15);
    _Block_release(v15);
    LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v14, "", 113, 568, 30, 1);
    swift_release_n(v12, 2);
    result = swift_release();
    if ((v13 & 1) == 0)
      return result;
    __break(1u);
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

void **sub_10079D584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char isEscapingClosureAtFileLocation;
  void **result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t inited;
  uint64_t v54;
  Swift::String v55;
  Swift::String v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  void **aBlock;
  unint64_t v80;
  uint64_t (*v81)(uint64_t);
  void *v82;
  uint64_t (*v83)();
  uint64_t v84;
  char v85[64];
  uint64_t v86;
  char v87[80];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignpostID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static os_signpost_type_t.begin.getter(v8);
  v12 = v11;
  if (qword_1010EA2A8 != -1)
    v11 = swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v13 = qword_1011B7D88;
  static OSSignpostID.exclusive.getter(v11);
  os_signpost(_:dso:log:name:signpostID:)(v12, &_mh_execute_header, v13, "sessionSetup", 12, 2, v10);
  v14 = *(void (**)(char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v15 = sub_100C1A870((uint64_t)aBlock);
  swift_bridgeObjectRelease();
  v16 = sub_10080FABC();
  if (v16 >= v15)
  {
    v47 = v16;
    v48 = static os_log_type_t.error.getter(v16);
    v49 = qword_1011B7D88;
    v50 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v51 = swift_allocObject(v50, 112, 7);
    *(_OWORD *)(v51 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v51 + 56) = &type metadata for Int;
    *(_QWORD *)(v51 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v51 + 32) = v15;
    *(_QWORD *)(v51 + 96) = &type metadata for Int;
    *(_QWORD *)(v51 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v51 + 72) = v47;
    os_log(_:dso:log:_:_:)(v48, &_mh_execute_header, v49, "Limit reached %i. Current count: %i", v74, (_DWORD)v75);
    swift_bridgeObjectRelease();
    v52 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v52, v87);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v54;
    aBlock = 0;
    v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    aBlock = (void **)0xD000000000000015;
    v80 = 0x8000000100EE4750;
    v86 = v15;
    v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._object = (void *)0x8000000100EE4770;
    v56._countAndFlagsBits = 0xD000000000000014;
    String.append(_:)(v56);
    v57 = v80;
    *(_QWORD *)(inited + 48) = aBlock;
    *(_QWORD *)(inited + 56) = v57;
    v58 = sub_1006B8DC4(inited);
    type metadata accessor for SPPairingSessionError(0);
    v60 = v59;
    v86 = 17;
    sub_10047B41C(v58);
    v62 = v61;
    swift_bridgeObjectRelease();
    v63 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v86, v62, v60, v63);
    return aBlock;
  }
  v76 = (uint64_t (*)(char *, uint64_t))v14;
  v77 = v3;
  v78 = v2;
  v17 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  v18 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingValidator);
  v20 = *(void **)(v1 + 152);
  v21 = type metadata accessor for ItemPairingCoordinator(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = v18;
  swift_retain();
  v23 = v20;
  sub_100BB3DB4(v22, v19, v23);
  if (!v24)
  {
    v64 = static os_log_type_t.error.getter(0);
    os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, qword_1011B7D88, "There are Follow Ups that are pending.", 38, 2, _swiftEmptyArrayStorage);
    v65 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    v66 = swift_initStackObject(v65, v85);
    *(_OWORD *)(v66 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v66 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v66 + 40) = v67;
    *(_QWORD *)(v66 + 48) = 0xD00000000000003FLL;
    *(_QWORD *)(v66 + 56) = 0x8000000100EE47C0;
    v68 = sub_1006B8DC4(v66);
    type metadata accessor for SPPairingSessionError(0);
    v70 = v69;
    v86 = 3;
    sub_10047B41C(v68);
    v72 = v71;
    swift_bridgeObjectRelease();
    v73 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v86, v72, v70, v73);

    return aBlock;
  }
  v25 = v24;
  v75 = v22;
  v26 = swift_allocObject(&unk_1010926E0, 32, 7);
  *(_QWORD *)(v26 + 16) = v1;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = swift_allocObject(&unk_101092708, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_1007BCE90;
  *(_QWORD *)(v27 + 24) = v26;
  v83 = sub_10005CBA4;
  v84 = v27;
  aBlock = _NSConcreteStackBlock;
  v80 = 1107296256;
  v81 = sub_10001D8B8;
  v82 = &unk_101092720;
  v28 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v23, v28);
  _Block_release(v28);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v27, "", 129, 1789, 32, 1);
  result = (void **)swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v31 = static os_log_type_t.default.getter(result);
    v32 = qword_1011B7D88;
    v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
    v35 = objc_msgSend(*(id *)(v25 + 16), "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

    v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v74 = v26;
    v37 = v78;
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v78, v36);
    v40 = v39;
    (*(void (**)(char *, uint64_t))(v77 + 8))(v5, v37);
    *(_QWORD *)(v34 + 56) = &type metadata for String;
    *(_QWORD *)(v34 + 64) = sub_10001AA00();
    *(_QWORD *)(v34 + 32) = v38;
    *(_QWORD *)(v34 + 40) = v40;
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "#Durian: Initiated session with id - %@", 39, 2, v34);
    v41 = swift_bridgeObjectRelease();
    v42 = static os_signpost_type_t.end.getter(v41);
    v43 = qword_1011B7D88;
    static OSSignpostID.exclusive.getter(v42);
    os_signpost(_:dso:log:name:signpostID:)(v42, &_mh_execute_header, v43, "sessionSetup", 12, 2, v10);
    v44 = v76(v10, v6);
    v45 = static os_signpost_type_t.begin.getter(v44);
    os_signpost(_:dso:log:name:signpostID:)(v45, &_mh_execute_header, qword_1011B7D88, "signFetchPhase", 14, 2, v25 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID);

    v46 = *(id *)(v25 + 16);
    swift_release();
    swift_release();
    return (void **)v46;
  }
  __break(1u);
  return result;
}

uint64_t sub_10079DD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  id v8;
  _QWORD *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  _BYTE v13[24];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = objc_msgSend(*(id *)(a2 + 16), "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  v9 = (_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_pairingSessionCoordinators, v13, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  v12 = *v9;
  *v9 = 0x8000000000000000;
  sub_10010DAFC(a2, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *v9 = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return swift_endAccess(v13);
}

uint64_t sub_10079DE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[6];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(v2 + 56);
  v13 = (_QWORD *)swift_allocObject(&unk_101092690, 40, 7);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1007BCE64;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010926A8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_10079E098(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[6];

  v3 = *(_QWORD *)(a1 + 280);
  type metadata accessor for Transaction(0);
  v6[3] = 0;
  v6[4] = 0;
  v6[2] = v3;
  v4 = static Transaction.named<A>(_:with:)("com.apple.searchpartyd.beaconstore.repairdatastore", 50, 2, sub_1007BCE70, v6);
  return a2(v4);
}

uint64_t sub_10079E118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  sub_1003F0FD8();
  v5 = v17;
  v4 = v18;
  v6 = type metadata accessor for OwnedBeaconRecord(0);
  if (*(_QWORD *)(a1 + *(int *)(v6 + 44) + 8) >> 60 == 15)
  {
    v7 = v6;
    v8 = dispatch_group_create();
    v9 = swift_allocBox(v7);
    v11 = v10;
    sub_10005972C(a1, v10, type metadata accessor for OwnedBeaconRecord);
    dispatch_group_enter(v8);
    v12 = swift_allocObject(&unk_101092640, 32, 7);
    *(_QWORD *)(v12 + 16) = v17;
    *(_QWORD *)(v12 + 24) = v4;
    v16 = a2;
    v13 = swift_allocObject(&unk_101092668, 32, 7);
    *(_QWORD *)(v13 + 16) = v9;
    *(_QWORD *)(v13 + 24) = v8;
    sub_10001BBBC(v5, v4);
    swift_retain();
    v14 = v8;
    sub_1007A09E0(a1, 0, (void (*)(uint64_t))sub_1007BCE1C, v12, sub_1007BCE50, (void (*)(uint64_t))v13);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();

    swift_beginAccess(v11, &v17, 0, 0);
    sub_10005972C(v11, v16, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    return sub_10001BC14(v5, v4);
  }
  else
  {
    sub_10005972C(a1, a2, type metadata accessor for OwnedBeaconRecord);
    return sub_10001BC14(v17, v18);
  }
}

void sub_10079E2CC(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  id v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[12];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v14);
  v16 = &v31[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v17)
  {
    v18 = v17;
    v32 = a1;
    v33 = a2;
    v19 = sub_10001A9A8(&qword_101108318);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    v20 = v18;
    v21 = XPCSession.init(connection:)();
    if (v21)
    {
      v22 = v21;
      v23 = type metadata accessor for TaskPriority(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v16, 1, 1, v23);
      v24 = swift_allocObject(&unk_101092618, 72, 7);
      *(_QWORD *)(v24 + 16) = 0;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = v4;
      *(_QWORD *)(v24 + 40) = v22;
      *(_BYTE *)(v24 + 48) = v32 & 1;
      *(_QWORD *)(v24 + 56) = v33;
      *(_QWORD *)(v24 + 64) = a3;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_100691AC0((uint64_t)v16, (uint64_t)&unk_101108328, v24);
      swift_release();
      swift_release();

      return;
    }

    a2 = v33;
  }
  v25 = swift_allocObject(&unk_1010925C8, 32, 7);
  *(_QWORD *)(v25 + 16) = a2;
  *(_QWORD *)(v25 + 24) = a3;
  aBlock[4] = sub_1007BCD40;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010925E0;
  v26 = _Block_copy(aBlock);
  v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  v36 = _swiftEmptyArrayStorage;
  v28 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v30, v8, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v26);
  _Block_release(v26);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v10, v8);
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v34);
  swift_release();
}

uint64_t sub_10079E600(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  v3 = sub_100006204((unint64_t *)&unk_101108330, type metadata accessor for BluetoothCommunicationCoordinator.Error, (uint64_t)&unk_100E6DF38);
  v4 = swift_allocError(v2, v3, 0, 0);
  swift_storeEnumTagMultiPayload(v5, v2, 12);
  a1(v4);
  return swift_errorRelease(v4);
}

uint64_t sub_10079E684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 48) = a7;
  *(_QWORD *)(v8 + 56) = a8;
  *(_BYTE *)(v8 + 120) = a6;
  *(_QWORD *)(v8 + 32) = a4;
  *(_QWORD *)(v8 + 40) = a5;
  return swift_task_switch(sub_10079E6A4, 0, 0);
}

uint64_t sub_10079E6A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 64) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_10079E71C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_1007BCDF0, *(_QWORD *)(v0 + 32), v3);
}

uint64_t sub_10079E71C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release();
  return swift_task_switch(sub_10079E77C, 0, 0);
}

uint64_t sub_10079E77C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[2];
  v0[9] = v1;
  v2 = type metadata accessor for BeaconScanner();
  swift_allocObject(v2, 160, 15);
  v3 = dword_10111605C;
  swift_retain();
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[10] = v4;
  *v4 = v0;
  v4[1] = sub_10079E810;
  return sub_100B4B938(v0[5], v1);
}

uint64_t sub_10079E810(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 80);
  v5 = *v2;
  *(_QWORD *)(v5 + 88) = a1;
  *(_QWORD *)(v5 + 96) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_10079E918, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(dword_101115D5C);
  *(_QWORD *)(v5 + 104) = v7;
  *v7 = v5;
  v7[1] = sub_10079E8B4;
  return sub_100B4BE9C(*(_BYTE *)(v5 + 120));
}

uint64_t sub_10079E8B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10079EB28;
  else
    v3 = sub_10079EAD4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10079E918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  swift_release();
  if (qword_1010E9F18 != -1)
    swift_once(&qword_1010E9F18, sub_100791C18);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7630);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beacon scan error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v10 = *(void (**)(uint64_t))(v0 + 48);

  swift_errorRetain(v1);
  v10(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10079EAD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  (*(void (**)(_QWORD))(v0 + 48))(0);
  swift_release(v1);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10079EB28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);

  swift_release();
  v1 = *(_QWORD *)(v0 + 112);
  swift_release();
  if (qword_1010E9F18 != -1)
    swift_once(&qword_1010E9F18, sub_100791C18);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7630);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 24) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beacon scan error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v10 = *(void (**)(uint64_t))(v0 + 48);

  swift_errorRetain(v1);
  v10(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10079ECEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 280);
  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v5 = type metadata accessor for BeaconKeyManager(0);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v3, v4, &type metadata for () + 1, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10079ED64(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v3 + 160) = a2;
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v2;
  return swift_task_switch(sub_10079ED80, 0, 0);
}

uint64_t sub_10079ED80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD70 + dword_1010EBD70);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBD74);
    *(_QWORD *)(v0 + 136) = v3;
    *v3 = v0;
    v3[1] = sub_10079EE80;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10079EE80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10079EEDC, 0, 0);
}

uint64_t sub_10079EEDC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 144))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1010EF32C);
    *(_QWORD *)(v0 + 152) = v2;
    *v2 = v0;
    v2[1] = sub_10079F00C;
    return sub_1001129D8(*(_QWORD *)(v0 + 120), *(_DWORD *)(v0 + 160));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9F20 != -1)
      swift_once(&qword_1010E9F20, sub_100791C44);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7648);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to get LeechScanningService!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10079F00C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_10079F060, 0, 0);
}

uint64_t sub_10079F060()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id *sub_10079F090()
{
  id *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  sub_100004048((uint64_t)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_configSubscription, (uint64_t *)&unk_101107EF0);
  v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_transactionManager;
  v2 = type metadata accessor for PressuredExitTransactionManager(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1007BD688(*(uint64_t *)((char *)v0
                           + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconKeyManagerURLChangedSubscription));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  swift_release();
  swift_release();
  sub_10001D8A8(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock), *(uint64_t *)((char *)v0+ OBJC_IVAR____TtC12searchpartyd20BeaconManagerService____lazy_storage___payloadDecodingBlock+ 8));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_1007BD698((id *)((char *)v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_cbPeripheralManager));
  return v0;
}

uint64_t sub_10079F478()
{
  uint64_t v0;

  sub_10079F090();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10079F49C()
{
  return type metadata accessor for BeaconManagerService(0);
}

void sub_10079F4A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[79];

  v6[0] = &unk_100E4FB18;
  v6[1] = &unk_100E4FB30;
  v6[2] = &unk_100E4FB30;
  v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[8] = &unk_100E4FB30;
  v6[9] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[10] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[11] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[17] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[19] = &unk_100E4FB30;
  v6[20] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[21] = &unk_100E4FB30;
  v6[22] = &unk_100E4FB30;
  v6[23] = &unk_100E4FB30;
  v6[24] = &unk_100E4FB30;
  v6[25] = &unk_100E4FB30;
  v6[26] = &unk_100E4FB30;
  v6[27] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[28] = &unk_100E4FB48;
  v6[29] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[30] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[31] = &unk_100E4FB30;
  v6[32] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[33] = &unk_100E4FB30;
  sub_100138FE0(319);
  if (v3 <= 0x3F)
  {
    v6[34] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for PressuredExitTransactionManager(319);
    if (v5 <= 0x3F)
    {
      v6[35] = *(_QWORD *)(v4 - 8) + 64;
      v6[36] = &unk_100E4FB30;
      v6[37] = &unk_100E4FB30;
      v6[38] = &unk_100E4FB30;
      v6[39] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[40] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[41] = &unk_100E4FB30;
      v6[42] = &unk_100E4FB30;
      v6[43] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[44] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[45] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[46] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[47] = &unk_100E4FB60;
      v6[48] = &unk_100E4FB30;
      v6[49] = &unk_100E4FB30;
      v6[50] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[51] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[52] = &unk_100E4FB30;
      v6[53] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[54] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[55] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[56] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[57] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[58] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[59] = &unk_100E4FB30;
      v6[60] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[61] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[62] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[63] = &unk_100E4FB30;
      v6[64] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[65] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[66] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[67] = &unk_100E4FB78;
      v6[68] = &unk_100E4FB90;
      v6[69] = &unk_100E4FB90;
      v6[70] = &unk_100E4FB30;
      v6[71] = &unk_100E4FB30;
      v6[72] = &unk_100E4FB30;
      v6[73] = &unk_100E4FB30;
      v6[74] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[75] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[76] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[77] = &unk_100E4FBA8;
      v6[78] = &unk_100E4FB90;
      swift_updateClassMetadata2(a1, 256, 79, v6, a1 + 80);
    }
  }
}

uint64_t sub_10079F654()
{
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.beaconmanagerservice.startup", 58, 2, sub_1007B7E04);
  return sub_100AC1A50();
}

uint64_t sub_10079F6D4()
{
  _QWORD *v0;

  *(_BYTE *)(*v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_shouldForceFetch) = 1;
  return sub_100B12918();
}

uint64_t sub_10079F710(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1011064CC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000AA8AC;
  return sub_100737CDC(a1);
}

uint64_t sub_10079F76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;

  v17 = (_QWORD *)swift_task_alloc(dword_1011064B4);
  *(_QWORD *)(v8 + 16) = v17;
  *v17 = v8;
  v17[1] = sub_100004C28;
  return sub_10073D44C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_10079F820(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v2;
  v7 = swift_task_alloc(dword_101107644);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_100004A74;
  *(_DWORD *)(v7 + 160) = a2;
  *(_QWORD *)(v7 + 120) = a1;
  *(_QWORD *)(v7 + 128) = v6;
  return swift_task_switch(sub_10079ED80, 0, 0);
}

uint64_t sub_10079F894(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_101108250 + dword_101108250);
  v3 = (_QWORD *)swift_task_alloc(unk_101108254);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return v5(a1);
}

uint64_t sub_10079F8F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v5 = (uint64_t (*)(uint64_t))((char *)&dword_101108240 + dword_101108240);
  v3 = (_QWORD *)swift_task_alloc(unk_101108244);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  return v5(a1);
}

void sub_10079F954(uint64_t a1, _QWORD *a2)
{
  sub_1007B77A8(a2);
}

uint64_t sub_10079F978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  int v12;
  _QWORD aBlock[7];

  v2 = v1;
  v3 = a1;
  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v5 = qword_1011B7D28;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v7 + 56) = &type metadata for Bool;
  *(_QWORD *)(v7 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v7 + 32) = v3 & 1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "FMIP State changed to %i", v12);
  swift_bridgeObjectRelease();
  if ((v3 & 1) == 0)
    sub_10079B5F0();
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_1007B8000, v2, &type metadata for () + 1);
  v8 = *(NSObject **)(v2 + 56);
  v9 = swift_allocObject(&unk_101092320, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_1007BC040;
  *(_QWORD *)(v9 + 24) = v2;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_101092338;
  v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v10);
  _Block_release(v10);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v9, "", 129, 2037, 27, 1);
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10079FB7C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v2 = a1;
  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v4 = qword_1011B7D28;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v6 + 56) = &type metadata for Bool;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v6 + 32) = v2 & 1;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "FMIP location services changed to %i", v8);
  swift_bridgeObjectRelease();
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_1007B8000, v1, &type metadata for () + 1);
}

uint64_t sub_10079FC9C(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  dispatch_group_t v30;
  char *v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t, __n128);
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  dispatch_group_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v66 = a5;
  v67 = a6;
  v64 = a1;
  v65 = a4;
  v68 = a3;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v63 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v62 = (char *)&v47 - v11;
  v51 = type metadata accessor for DispatchTime(0);
  v50 = *(_QWORD *)(v51 - 8);
  v12 = __chkstk_darwin(v51);
  v48 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v49 = (char *)&v47 - v14;
  v15 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v15);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a2 + 16);
  v52 = a2;
  if (v18)
  {
    v19 = *(unsigned __int8 *)(v8 + 80);
    v20 = (v19 + 32) & ~v19;
    v21 = a2;
    v22 = a2 + v20;
    v23 = *(_QWORD *)(v8 + 72);
    v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v58 = v19 | 7;
    v59 = v23;
    v60 = v20;
    v57 = (v9 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8;
    v55 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
    v54 = v55 + 8;
    v25 = swift_bridgeObjectRetain(v21);
    v71 = v8;
    v61 = v17;
    v26 = v66;
    while (1)
    {
      v24(v17, v22, v7, v25);
      v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v27)(v17, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v17, 1, v7) == 1)
        break;
      v53 = v27;
      v28 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
      v70 = v18;
      v29 = (uint64_t)v62;
      v28(v62, v17, v7);
      v69 = v22;
      v30 = v68;
      dispatch_group_enter(v68);
      v31 = v63;
      ((void (*)(char *, uint64_t, uint64_t))v24)(v63, v29, v7);
      v32 = swift_allocObject(&unk_101092370, v54, v58);
      *(_QWORD *)(v32 + 16) = v64;
      *(_QWORD *)(v32 + 24) = v30;
      v28((char *)(v32 + v60), v31, v7);
      *(_QWORD *)(v32 + v57) = v65;
      *(_QWORD *)(v32 + v56) = v26;
      *(_QWORD *)(v32 + v55) = v67;
      swift_retain();
      v33 = v30;
      v34 = v69;
      swift_retain();
      swift_bridgeObjectRetain(v26);
      v17 = v61;
      swift_retain();
      sub_100272898(v29, 0, (void (*)(void))sub_1007BC140, v32);
      v8 = v71;
      swift_release();
      v35 = v29;
      v36 = v70;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v35, v7);
      v22 = v34 + v59;
      v18 = v36 - 1;
      if (!v18)
      {
        v53(v17, 1, 1, v7, v25);
        break;
      }
    }
  }
  else
  {
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
    v38 = swift_bridgeObjectRetain(a2);
    v37(v17, 1, 1, v7, v38);
  }
  v39 = swift_bridgeObjectRelease();
  v40 = v48;
  static DispatchTime.now()(v39);
  v41 = v49;
  + infix(_:_:)(v40, 30.0);
  v42 = *(void (**)(char *, uint64_t))(v50 + 8);
  v43 = v51;
  v42(v40, v51);
  v44 = OS_dispatch_group.wait(timeout:)(v41) & 1;
  v42(v41, v43);
  result = static DispatchTimeoutResult.== infix(_:_:)(v44, 1);
  if ((result & 1) != 0)
  {
    v46 = static os_log_type_t.error.getter(result);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    return os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_1011B7D28, "Timed out waiting for removeBeacon to finish", 44, 2, _swiftEmptyArrayStorage);
  }
  return result;
}

void sub_1007A00CC(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  dispatch_group_t v33;

  v10 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (a1)
  {
    v14 = static os_log_type_t.error.getter(v13);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    dispatch_group_leave(a3);
  }
  else
  {
    v33 = a3;
    v15 = static os_log_type_t.default.getter(v13);
    if (qword_1010EA248 != -1)
      swift_once(&qword_1010EA248, sub_100B5D8FC);
    v16 = qword_1011B7D28;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    v19 = type metadata accessor for UUID(0);
    v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
    v23 = v22;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10001AA00();
    *(_QWORD *)(v18 + 32) = v21;
    *(_QWORD *)(v18 + 40) = v23;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Local beaconing record %@ destroyed", 35, 2, v18);
    swift_bridgeObjectRelease();
    v24 = dispatch_group_create();
    dispatch_group_enter(v24);
    v25 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 1, 1, v25);
    v26 = (_QWORD *)swift_allocObject(&unk_101092398, 48, 7);
    v26[2] = 0;
    v26[3] = 0;
    v26[4] = v24;
    v26[5] = a5;
    v27 = v24;
    swift_retain();
    sub_100626BC4((uint64_t)v12, (uint64_t)&unk_101108278, (uint64_t)v26);
    swift_release();
    OS_dispatch_group.wait()();

    v28 = *(_QWORD *)(a6 + 16);
    if (v28)
    {
      v29 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
      v30 = a6 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      v31 = *(_QWORD *)(v29 + 72);
      swift_bridgeObjectRetain(a6);
      do
      {
        sub_1007BEC3C(v30);
        v30 += v31;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
    }
    dispatch_group_leave(v33);
  }
}

uint64_t sub_1007A03B4(uint64_t a1)
{
  return sub_10079F978(a1);
}

uint64_t sub_1007A03D4(uint64_t a1)
{
  return sub_10079FB7C(a1);
}

uint64_t sub_1007A03F4(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7660, 0xD000000000000016, 0x8000000100EE3D90);
}

void sub_1007A0418(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void (**v47)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(uint64_t);
  void (*v57)(uint64_t);
  void (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id v62[2];

  v60 = a1;
  v56 = a5;
  v57 = a6;
  v58 = a3;
  v59 = a4;
  v53 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v53);
  v54 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v51 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v52 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v52, 72, 7);
  v18 = v17;
  v51 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v19 = a2 & 1;
  if (v19)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v19)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v51);
  swift_bridgeObjectRelease();
  v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    v23 = v60;
    sub_100CA5C04(v60);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v62[0] = v25;
    v26 = (uint64_t)v55;
    sub_10005972C(v23, (uint64_t)v55, type metadata accessor for OwnedBeaconGroup);
    v58(v26);
    v27 = sub_1007913A0(v62, v26);
    v28 = v61;
    __chkstk_darwin(v27);
    *((_QWORD *)&v51 - 2) = v29;
    *((_QWORD *)&v51 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088ECC, &v51 - 2, (char *)&type metadata for () + 8);
    sub_1007EEF64(8);
    v49 = v54;
    sub_10005972C(v26, v54, type metadata accessor for OwnedBeaconGroup);
    swift_storeEnumTagMultiPayload(v49, v53, 0);
    v56(v49);
    sub_100004048(v49, &qword_1010EEC50);
    v50 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v50);
    *((_QWORD *)&v51 - 4) = v28;
    *((_QWORD *)&v51 - 3) = v62;
    *((_QWORD *)&v51 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1007BCC00, &v51 - 3);
    sub_1000126B0(v26, type metadata accessor for OwnedBeaconGroup);

  }
  else
  {
    v30 = v60;
    sub_100CA5C04(v60);
    v32 = v31;
    v55 = v31;
    objc_autoreleasePoolPop(v22);
    v33 = sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    v34 = *(unsigned __int8 *)(v9 + 80);
    v35 = (v34 + 32) & ~v34;
    v54 = v34 | 7;
    v36 = swift_allocObject(&unk_101092528, v35 + v10, v34 | 7);
    v37 = v59;
    *(_QWORD *)(v36 + 16) = v58;
    *(_QWORD *)(v36 + 24) = v37;
    sub_1000126EC((uint64_t)v14, v36 + v35, type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    v38 = sub_100BC910C(v32, (void (*)(id *))sub_1007BCA08, v36);
    swift_release(v36);
    swift_release(v33);
    v39 = swift_allocObject(&unk_101092550, 32, 7);
    v40 = v56;
    v41 = v57;
    *(_QWORD *)(v39 + 16) = v56;
    *(_QWORD *)(v39 + 24) = v41;
    swift_retain();
    v42 = Future.addFailure(block:)(sub_1007BCA24, v39);
    swift_release(v42);
    swift_release(v39);
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    v43 = (v34 + 16) & ~v34;
    v44 = (v10 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
    v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
    v46 = swift_allocObject(&unk_101092578, v45 + 16, v54);
    sub_1000126EC((uint64_t)v14, v46 + v43, type metadata accessor for OwnedBeaconGroup);
    *(_QWORD *)(v46 + v44) = v61;
    v47 = (void (**)(uint64_t))(v46 + v45);
    *v47 = v40;
    v47[1] = v41;
    swift_retain();
    swift_retain();
    v48 = Future.addSuccess(block:)(sub_1007BCB40, v46);

    swift_release(v38);
    swift_release(v48);
    swift_release(v46);
  }
}

void sub_1007A09E0(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t);
  void (*v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58[2];

  v56 = a1;
  v52 = a5;
  v53 = a6;
  v54 = a3;
  v55 = a4;
  v49 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v49);
  v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v47 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v48 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v48, 72, 7);
  v18 = v17;
  v47 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v19 = a2 & 1;
  if (v19)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v19)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v47);
  swift_bridgeObjectRelease();
  v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    v23 = v56;
    sub_100CA5F20(v56);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    v26 = (uint64_t)v51;
    sub_10005972C(v23, (uint64_t)v51, type metadata accessor for OwnedBeaconRecord);
    v54(v26);
    sub_1007B4BFC(v58, v26);
    v27 = v57;
    v28 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    __chkstk_darwin(v28);
    *((_QWORD *)&v47 - 2) = v29;
    *((_QWORD *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088E9C, &v47 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(8);
    v45 = v50;
    sub_10005972C(v26, v50, type metadata accessor for OwnedBeaconRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0);
    v52(v45);
    sub_100004048(v45, (uint64_t *)&unk_101108050);
    v46 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v46);
    *((_QWORD *)&v47 - 4) = v27;
    *((_QWORD *)&v47 - 3) = v58;
    *((_QWORD *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1007B9268, &v47 - 3);
    sub_1000126B0(v26, type metadata accessor for OwnedBeaconRecord);

  }
  else
  {
    v30 = v56;
    sub_100CA5F20(v56);
    v32 = v31;
    v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    v33 = *(unsigned __int8 *)(v9 + 80);
    v34 = (v33 + 32) & ~v33;
    v50 = v33 | 7;
    v35 = swift_allocObject(&unk_101091F60, v34 + v10, v33 | 7);
    v36 = v55;
    *(_QWORD *)(v35 + 16) = v54;
    *(_QWORD *)(v35 + 24) = v36;
    sub_1000126EC((uint64_t)v14, v35 + v34, type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    sub_100BC910C(v32, (void (*)(id *))sub_1007B8F58, v35);
    swift_release();
    swift_release();
    v37 = swift_allocObject(&unk_101091F88, 32, 7);
    v38 = v52;
    v39 = v53;
    *(_QWORD *)(v37 + 16) = v52;
    *(_QWORD *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1007B8F74, v37);
    swift_release();
    swift_release();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    v40 = (v33 + 16) & ~v33;
    v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_101091FB0, v42 + 16, v50);
    sub_1000126EC((uint64_t)v14, v43 + v40, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v43 + v41) = v57;
    v44 = (void (**)(uint64_t))(v43 + v42);
    *v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1007B9254, v43);

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1007A0FE4(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t);
  void (*v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58[2];

  v56 = a1;
  v52 = a5;
  v53 = a6;
  v54 = a3;
  v55 = a4;
  v49 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v49);
  v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SharedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v47 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v48 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v48, 72, 7);
  v18 = v17;
  v47 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v19 = a2 & 1;
  if (v19)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v19)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v47);
  swift_bridgeObjectRelease();
  v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    v23 = v56;
    sub_100CA65F0(v56);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    v26 = (uint64_t)v51;
    sub_10005972C(v23, (uint64_t)v51, type metadata accessor for SharedBeaconRecord);
    v54(v26);
    sub_1007B5B44(v58, v26);
    v27 = v57;
    v28 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    __chkstk_darwin(v28);
    *((_QWORD *)&v47 - 2) = v29;
    *((_QWORD *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088EB4, &v47 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(8);
    v45 = v50;
    sub_10005972C(v26, v50, type metadata accessor for SharedBeaconRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0);
    v52(v45);
    sub_100004048(v45, &qword_1010F21B0);
    v46 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v46);
    *((_QWORD *)&v47 - 4) = v27;
    *((_QWORD *)&v47 - 3) = v58;
    *((_QWORD *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1007BA83C, &v47 - 3);
    sub_1000126B0(v26, type metadata accessor for SharedBeaconRecord);

  }
  else
  {
    v30 = v56;
    sub_100CA65F0(v56);
    v32 = v31;
    v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    v33 = *(unsigned __int8 *)(v9 + 80);
    v34 = (v33 + 32) & ~v33;
    v50 = v33 | 7;
    v35 = swift_allocObject(&unk_101092118, v34 + v10, v33 | 7);
    v36 = v55;
    *(_QWORD *)(v35 + 16) = v54;
    *(_QWORD *)(v35 + 24) = v36;
    sub_1000126EC((uint64_t)v14, v35 + v34, type metadata accessor for SharedBeaconRecord);
    swift_retain();
    sub_100BC910C(v32, (void (*)(id *))sub_1007BA5BC, v35);
    swift_release();
    swift_release();
    v37 = swift_allocObject(&unk_101092140, 32, 7);
    v38 = v52;
    v39 = v53;
    *(_QWORD *)(v37 + 16) = v52;
    *(_QWORD *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1007BA5D8, v37);
    swift_release();
    swift_release();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    v40 = (v33 + 16) & ~v33;
    v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_101092168, v42 + 16, v50);
    sub_1000126EC((uint64_t)v14, v43 + v40, type metadata accessor for SharedBeaconRecord);
    *(_QWORD *)(v43 + v41) = v57;
    v44 = (void (**)(uint64_t))(v43 + v42);
    *v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1007BA7B8, v43);

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1007A15E8(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t);
  void (*v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58[2];

  v56 = a1;
  v52 = a5;
  v53 = a6;
  v54 = a3;
  v55 = a4;
  v49 = sub_10001A9A8(&qword_1011036B8);
  __chkstk_darwin(v49);
  v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LostModeRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v47 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v48 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v48, 72, 7);
  v18 = v17;
  v47 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v19 = a2 & 1;
  if (v19)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v19)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v47);
  swift_bridgeObjectRelease();
  v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    v23 = v56;
    sub_100CA5B38(v56);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    v26 = (uint64_t)v51;
    sub_10005972C(v23, (uint64_t)v51, type metadata accessor for LostModeRecord);
    v54(v26);
    v27 = sub_10084DF68(v58, v26);
    v28 = v57;
    __chkstk_darwin(v27);
    *((_QWORD *)&v47 - 2) = v29;
    *((_QWORD *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1007BE1BC, &v47 - 2, &type metadata for () + 1);
    sub_1007EEF64(8);
    v45 = v50;
    sub_10005972C(v26, v50, type metadata accessor for LostModeRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0);
    v52(v45);
    sub_100004048(v45, &qword_1011036B8);
    v46 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v46);
    *((_QWORD *)&v47 - 4) = v28;
    *((_QWORD *)&v47 - 3) = v58;
    *((_QWORD *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1007BDD60, &v47 - 3);
    sub_1000126B0(v26, type metadata accessor for LostModeRecord);

  }
  else
  {
    v30 = v56;
    sub_100CA5B38(v56);
    v32 = v31;
    v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for LostModeRecord);
    v33 = *(unsigned __int8 *)(v9 + 80);
    v34 = (v33 + 32) & ~v33;
    v50 = v33 | 7;
    v35 = swift_allocObject(&unk_1010929D8, v34 + v10, v33 | 7);
    v36 = v55;
    *(_QWORD *)(v35 + 16) = v54;
    *(_QWORD *)(v35 + 24) = v36;
    sub_1000126EC((uint64_t)v14, v35 + v34, type metadata accessor for LostModeRecord);
    swift_retain();
    sub_100BC910C(v32, (void (*)(id *))sub_1007BDB2C, v35);
    swift_release();
    swift_release();
    v37 = swift_allocObject(&unk_101092A00, 32, 7);
    v38 = v52;
    v39 = v53;
    *(_QWORD *)(v37 + 16) = v52;
    *(_QWORD *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1007BDBB4, v37);
    swift_release();
    swift_release();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for LostModeRecord);
    v40 = (v33 + 16) & ~v33;
    v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_101092A28, v42 + 16, v50);
    sub_1000126EC((uint64_t)v14, v43 + v40, type metadata accessor for LostModeRecord);
    *(_QWORD *)(v43 + v41) = v57;
    v44 = (void (**)(uint64_t))(v43 + v42);
    *v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1007BDCDC, v43);

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1007A1BB0(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t);
  void (*v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58[2];

  v56 = a1;
  v52 = a5;
  v53 = a6;
  v54 = a3;
  v55 = a4;
  v49 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v49);
  v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconNamingRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v47 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v48 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v48, 72, 7);
  v18 = v17;
  v47 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v19 = a2 & 1;
  if (v19)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v19)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v47);
  swift_bridgeObjectRelease();
  v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    v23 = v56;
    sub_100CA6264(v56);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    v26 = (uint64_t)v51;
    sub_10005972C(v23, (uint64_t)v51, type metadata accessor for BeaconNamingRecord);
    v54(v26);
    sub_10084DC3C(v58, v26);
    v27 = v57;
    v28 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    __chkstk_darwin(v28);
    *((_QWORD *)&v47 - 2) = v29;
    *((_QWORD *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1007BE130, &v47 - 2, &type metadata for () + 1);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(8);
    v45 = v50;
    sub_10005972C(v26, v50, type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0);
    v52(v45);
    sub_100004048(v45, &qword_101108090);
    v46 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v46);
    *((_QWORD *)&v47 - 4) = v27;
    *((_QWORD *)&v47 - 3) = v58;
    *((_QWORD *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1007BC900, &v47 - 3);
    sub_1000126B0(v26, type metadata accessor for BeaconNamingRecord);

  }
  else
  {
    v30 = v56;
    sub_100CA6264(v56);
    v32 = v31;
    v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for BeaconNamingRecord);
    v33 = *(unsigned __int8 *)(v9 + 80);
    v34 = (v33 + 32) & ~v33;
    v50 = v33 | 7;
    v35 = swift_allocObject(&unk_1010924B0, v34 + v10, v33 | 7);
    v36 = v55;
    *(_QWORD *)(v35 + 16) = v54;
    *(_QWORD *)(v35 + 24) = v36;
    sub_1000126EC((uint64_t)v14, v35 + v34, type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_100BC910C(v32, (void (*)(id *))sub_1007BC7B8, v35);
    swift_release();
    swift_release();
    v37 = swift_allocObject(&unk_1010924D8, 32, 7);
    v38 = v52;
    v39 = v53;
    *(_QWORD *)(v37 + 16) = v52;
    *(_QWORD *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1007BC7D4, v37);
    swift_release();
    swift_release();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for BeaconNamingRecord);
    v40 = (v33 + 16) & ~v33;
    v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_101092500, v42 + 16, v50);
    sub_1000126EC((uint64_t)v14, v43 + v40, type metadata accessor for BeaconNamingRecord);
    *(_QWORD *)(v43 + v41) = v57;
    v44 = (void (**)(uint64_t))(v43 + v42);
    *v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1007BC8EC, v43);

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1007A21B4(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  void (*v39)(uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (**v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  void (*v52)(uint64_t);
  void (*v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58[2];

  v56 = a1;
  v52 = a5;
  v53 = a6;
  v54 = a3;
  v55 = a4;
  v49 = sub_10001A9A8((uint64_t *)&unk_101108180);
  __chkstk_darwin(v49);
  v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ShareRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v47 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v48 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v48, 72, 7);
  v18 = v17;
  v47 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v19 = a2 & 1;
  if (v19)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v19)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v47);
  swift_bridgeObjectRelease();
  v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    v23 = v56;
    sub_100CA5AB8(v56);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    v26 = (uint64_t)v51;
    sub_10005972C(v23, (uint64_t)v51, type metadata accessor for ShareRecord);
    v54(v26);
    v27 = sub_100790BEC(v58, v26);
    v28 = v57;
    __chkstk_darwin(v27);
    *((_QWORD *)&v47 - 2) = v29;
    *((_QWORD *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_100088EE4, &v47 - 2, &type metadata for () + 1);
    sub_1007EEF64(8);
    v45 = v50;
    sub_10005972C(v26, v50, type metadata accessor for ShareRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0);
    v52(v45);
    sub_100004048(v45, (uint64_t *)&unk_101108180);
    v46 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v46);
    *((_QWORD *)&v47 - 4) = v28;
    *((_QWORD *)&v47 - 3) = v58;
    *((_QWORD *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1007BAE3C, &v47 - 3);
    sub_1000126B0(v26, type metadata accessor for ShareRecord);

  }
  else
  {
    v30 = v56;
    sub_100CA5AB8(v56);
    v32 = v31;
    v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1007FDEC4();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for ShareRecord);
    v33 = *(unsigned __int8 *)(v9 + 80);
    v34 = (v33 + 32) & ~v33;
    v50 = v33 | 7;
    v35 = swift_allocObject(&unk_1010921B8, v34 + v10, v33 | 7);
    v36 = v55;
    *(_QWORD *)(v35 + 16) = v54;
    *(_QWORD *)(v35 + 24) = v36;
    sub_1000126EC((uint64_t)v14, v35 + v34, type metadata accessor for ShareRecord);
    swift_retain();
    sub_100BC910C(v32, (void (*)(id *))sub_1007BAC90, v35);
    swift_release();
    swift_release();
    v37 = swift_allocObject(&unk_1010921E0, 32, 7);
    v38 = v52;
    v39 = v53;
    *(_QWORD *)(v37 + 16) = v52;
    *(_QWORD *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1007BACAC, v37);
    swift_release();
    swift_release();
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for ShareRecord);
    v40 = (v33 + 16) & ~v33;
    v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    v43 = swift_allocObject(&unk_101092208, v42 + 16, v50);
    sub_1000126EC((uint64_t)v14, v43 + v40, type metadata accessor for ShareRecord);
    *(_QWORD *)(v43 + v41) = v57;
    v44 = (void (**)(uint64_t))(v43 + v42);
    *v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1007BAE18, v43);

    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1007A277C(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (**v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(uint64_t);
  void (*v58)(uint64_t);
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63[2];

  v61 = a1;
  v57 = a5;
  v58 = a6;
  v59 = a3;
  v60 = a4;
  v54 = sub_10001A9A8(&qword_1011082B0);
  __chkstk_darwin(v54);
  v55 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyAlignmentRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v56 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v52 - v13;
  v15 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v16 = qword_1011B7D38;
  v53 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v53, 72, 7);
  v18 = v17;
  v52 = xmmword_100E22B00;
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v19 = a2 & 1;
  if (v19)
    v20 = 1702195828;
  else
    v20 = 0x65736C6166;
  if (v19)
    v21 = 0xE400000000000000;
  else
    v21 = 0xE500000000000000;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31, 2, v18, v52);
  swift_bridgeObjectRelease(v18);
  v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    v23 = v61;
    sub_100CA62A0(v61);
    v25 = v24;
    objc_autoreleasePoolPop(v22);
    v63[0] = v25;
    v26 = (uint64_t)v56;
    sub_10005972C(v23, (uint64_t)v56, type metadata accessor for KeyAlignmentRecord);
    v59(v26);
    v27 = sub_1000A318C(v26, v63);
    v28 = v62;
    __chkstk_darwin(v27);
    *((_QWORD *)&v52 - 2) = v29;
    *((_QWORD *)&v52 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1007BC544, &v52 - 2, (char *)&type metadata for () + 8);
    sub_1007EEF64(8);
    v50 = v55;
    sub_10005972C(v26, v55, type metadata accessor for KeyAlignmentRecord);
    swift_storeEnumTagMultiPayload(v50, v54, 0);
    v57(v50);
    sub_100004048(v50, &qword_1011082B0);
    v51 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v51);
    *((_QWORD *)&v52 - 4) = v28;
    *((_QWORD *)&v52 - 3) = v63;
    *((_QWORD *)&v52 - 2) = v23;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-updateToCloud", 42, 2, sub_1007BC5A8, &v52 - 3, (char *)&type metadata for () + 8);
    sub_1000126B0(v26, type metadata accessor for KeyAlignmentRecord);

  }
  else
  {
    v30 = v61;
    sub_100CA62A0(v61);
    v32 = v31;
    v56 = v31;
    objc_autoreleasePoolPop(v22);
    v34 = sub_1007FDEC4(v33);
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for KeyAlignmentRecord);
    v35 = *(unsigned __int8 *)(v9 + 80);
    v36 = (v35 + 32) & ~v35;
    v55 = v35 | 7;
    v37 = swift_allocObject(&unk_101092410, v36 + v10, v35 | 7);
    v38 = v60;
    *(_QWORD *)(v37 + 16) = v59;
    *(_QWORD *)(v37 + 24) = v38;
    sub_1000126EC((uint64_t)v14, v37 + v36, type metadata accessor for KeyAlignmentRecord);
    swift_retain();
    v39 = sub_100BC910C(v32, (void (*)(id *))sub_1007BC3C4, v37);
    swift_release(v37);
    swift_release(v34);
    v40 = swift_allocObject(&unk_101092438, 32, 7);
    v41 = v57;
    v42 = v58;
    *(_QWORD *)(v40 + 16) = v57;
    *(_QWORD *)(v40 + 24) = v42;
    swift_retain();
    v43 = Future.addFailure(block:)(sub_1007BC404, v40);
    swift_release(v43);
    swift_release(v40);
    sub_10005972C(v30, (uint64_t)v14, type metadata accessor for KeyAlignmentRecord);
    v44 = (v35 + 16) & ~v35;
    v45 = (v10 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
    v47 = swift_allocObject(&unk_101092460, v46 + 16, v55);
    sub_1000126EC((uint64_t)v14, v47 + v44, type metadata accessor for KeyAlignmentRecord);
    *(_QWORD *)(v47 + v45) = v62;
    v48 = (void (**)(uint64_t))(v47 + v46);
    *v48 = v41;
    v48[1] = v42;
    swift_retain();
    swift_retain();
    v49 = Future.addSuccess(block:)(sub_1007BC520, v47);

    swift_release(v39);
    swift_release(v49);
    swift_release(v47);
  }
}

uint64_t sub_1007A2D40(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_1007A2D6C(a1, a2, a3, a4, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_101092190, (uint64_t)sub_1007BAA24);
}

uint64_t sub_1007A2D6C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v28 = a6;
  v29 = a7;
  v27 = a4;
  v11 = a5(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v26 - v15;
  v17 = sub_1007FDEC4(v14);
  v18 = *a3;
  v19 = sub_100BC8A7C(v18, v17);
  swift_release(v17);

  sub_10005972C(v27, (uint64_t)v16, a5);
  v20 = *(unsigned __int8 *)(v12 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v13 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(v28, v22 + 8, v20 | 7);
  *(_QWORD *)(v23 + 16) = a1;
  sub_1000126EC((uint64_t)v16, v23 + v21, a5);
  *(_QWORD *)(v23 + v22) = a2;
  swift_retain();
  swift_retain();
  v24 = Future.addCompletion(block:)(v29, v23);
  swift_release(v19);
  swift_release(v24);
  return swift_release(v23);
}

uint64_t sub_1007A2EBC(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_1007A2D6C(a1, a2, a3, a4, type metadata accessor for LostModeRecord, (uint64_t)&unk_1010929B0, (uint64_t)sub_1007BD9A8);
}

uint64_t sub_1007A2EE8(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_1007A2D6C(a1, a2, a3, a4, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_101092078, (uint64_t)sub_1007BA1C4);
}

uint64_t sub_1007A2F14(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_1007A2D6C(a1, a2, a3, a4, type metadata accessor for ShareRecord, (uint64_t)&unk_101092230, (uint64_t)sub_1007BAFB0);
}

uint64_t sub_1007A2F40(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_1007A2D6C(a1, a2, a3, a4, type metadata accessor for LeashRecord, (uint64_t)&unk_1010920C8, (uint64_t)sub_1007BA38C);
}

uint64_t sub_1007A2F6C(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  return sub_1007A2D6C(a1, a2, a3, a4, type metadata accessor for SafeLocation, (uint64_t)&unk_1010920A0, (uint64_t)sub_1007BA2B4);
}

void sub_1007A2F98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), void (*a7)(void), uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  v14 = a6(0);
  __chkstk_darwin(v14);
  v16 = (char *)v31 - v15;
  Transaction.capture()();
  if (a2)
  {
    v17 = swift_errorRetain(a2);
    v18 = static os_log_type_t.error.getter(v17);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v19 = qword_1011B7D38;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    v31[0] = a2;
    swift_errorRetain(a2);
    v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v23 = String.init<A>(describing:)(v31, v22);
    v25 = v24;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v23;
    *(_QWORD *)(v21 + 40) = v25;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Modifying to cloud failed. Updating disk record with status. Error: %@", 70, 2, v21);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v26 = a1;
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "Modified to cloud. Updating local record with sync status.", 58, 2, _swiftEmptyArrayStorage);
    v28 = v26;
    a7();
    v29 = QueueSynchronizer.conditionalSync<A>(_:)(a8);
    __chkstk_darwin(v29);
    v31[-2] = v30;
    v31[-1] = v16;
    OS_dispatch_queue.sync<A>(execute:)(a9, &v31[-4], (char *)&type metadata for () + 8);
    sub_1000126B0((uint64_t)v16, a6);

  }
}

void sub_1007A32C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t (*a7)(void), uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v13 = a6(0);
  __chkstk_darwin(v13);
  v15 = (char *)v30 - v14;
  Transaction.capture()();
  if (a2)
  {
    v16 = swift_errorRetain(a2);
    v17 = static os_log_type_t.error.getter(v16);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v18 = qword_1011B7D38;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    v30[0] = a2;
    swift_errorRetain(a2);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v22 = String.init<A>(describing:)(v30, v21);
    v24 = v23;
    *(_QWORD *)(v20 + 56) = &type metadata for String;
    *(_QWORD *)(v20 + 64) = sub_10001AA00();
    *(_QWORD *)(v20 + 32) = v22;
    *(_QWORD *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Modifying to cloud failed. Updating disk record with status. Error: %@", 70, 2, v20);
    swift_bridgeObjectRelease(v20);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v25 = a1;
    v26 = static os_log_type_t.default.getter(v25);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7D38, "Modified to cloud. Updating local record with sync status.", 58, 2, _swiftEmptyArrayStorage);
    v27 = v25;
    v28 = a7();
    __chkstk_darwin(v28);
    v30[-2] = v29;
    v30[-1] = v15;
    OS_dispatch_queue.sync<A>(execute:)(a8, &v30[-4], (char *)&type metadata for () + 8);
    sub_1000126B0((uint64_t)v15, a6);

  }
}

uint64_t sub_1007A35D4(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_1007A35F0(a1, a2, a3, a4, type metadata accessor for SharedBeaconRecord, (void (*)(id))sub_100D39160, (void (*)(id *, char *))sub_1007B5B44);
}

uint64_t sub_1007A35F0(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(id), void (*a7)(id *, char *))
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v12 = a5(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v16 - v13;
  a6(*a1);
  a2(v14);
  a7(a1, v14);
  return sub_1000126B0((uint64_t)v14, a5);
}

uint64_t sub_1007A3798(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_1007A35F0(a1, a2, a3, a4, type metadata accessor for LostModeRecord, (void (*)(id))sub_100AA925C, (void (*)(id *, char *))sub_10084DF68);
}

uint64_t sub_1007A37B4(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_1007A35F0(a1, a2, a3, a4, type metadata accessor for BeaconNamingRecord, (void (*)(id))sub_100A00590, (void (*)(id *, char *))sub_10084DC3C);
}

uint64_t sub_1007A37D0(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_1007A35F0(a1, a2, a3, a4, type metadata accessor for ShareRecord, (void (*)(id))sub_1000A4F18, (void (*)(id *, char *))sub_100790BEC);
}

uint64_t sub_1007A37EC(id *a1, void (*a2)(uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;

  v4 = type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000A1988(*a1, v6);
  a2(v6);
  sub_1000A318C((uint64_t)v6, a1);
  return sub_1000126B0((uint64_t)v6, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_1007A3978(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_1007A35F0(a1, a2, a3, a4, type metadata accessor for LeashRecord, (void (*)(id))sub_100D77E64, (void (*)(id *, char *))sub_10084F08C);
}

uint64_t sub_1007A3994(id *a1, void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  return sub_1007A35F0(a1, a2, a3, a4, type metadata accessor for SafeLocation, (void (*)(id))sub_100AFF19C, (void (*)(id *, char *))sub_10084E318);
}

uint64_t sub_1007A39B0(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v20 = a3;
  v7 = sub_10001A9A8(a4);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = static os_log_type_t.error.getter(v8);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v12 = qword_1011B7D38;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v21 = a1;
  swift_errorRetain(a1);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v16 = String.init<A>(describing:)(&v21, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Update failed: %@", 17, 2, v14, v20);
  swift_bridgeObjectRelease(v14);
  *v10 = a1;
  swift_storeEnumTagMultiPayload(v10, v7, 1);
  swift_errorRetain(a1);
  a2(v10);
  return sub_100004048((uint64_t)v10, a4);
}

uint64_t sub_1007A3B40(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return sub_1007A39B0(a1, a2, a3, &qword_1011036B8);
}

uint64_t sub_1007A3B4C(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return sub_1007A39B0(a1, a2, a3, &qword_101108090);
}

uint64_t sub_1007A3B58(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return sub_1007A39B0(a1, a2, a3, (uint64_t *)&unk_101108180);
}

uint64_t sub_1007A3B64(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return sub_1007A39B0(a1, a2, a3, (uint64_t *)&unk_101106E50);
}

uint64_t sub_1007A3B70(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  return sub_1007A39B0(a1, a2, a3, (uint64_t *)&unk_101106E30);
}

uint64_t sub_1007A3B7C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = sub_10001A9A8(&qword_1010F21B0);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v9);
  v11 = (_QWORD *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100D39160(a1, v11);
  v12 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)(sub_1007BE16C, &v15[-4], (char *)&type metadata for () + 8);
  sub_1007EEF64(8);
  sub_10005972C((uint64_t)v11, (uint64_t)v8, type metadata accessor for SharedBeaconRecord);
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  a4(v8);
  sub_100004048((uint64_t)v8, &qword_1010F21B0);
  sub_1007EF48C();
  return sub_1000126B0((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_1007A3E4C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v9);
  v11 = (_QWORD *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1009A0A80(a1, v11);
  v12 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)(sub_1007BE11C, &v15[-4], (char *)&type metadata for () + 8);
  sub_1007EEF64(8);
  sub_10005972C((uint64_t)v11, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  a4(v8);
  sub_100004048((uint64_t)v8, (uint64_t *)&unk_101108050);
  sub_1007EF48C();
  return sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_1007A411C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_1007A415C(a1, a2, a3, a4, a5, &qword_1011036B8, type metadata accessor for LostModeRecord, (void (*)(void *))sub_100AA925C, (uint64_t)sub_1007BE1BC);
}

uint64_t sub_1007A415C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD), void (*a8)(void *), uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void (*v23)(char *);

  v23 = a4;
  v13 = sub_10001A9A8(a6);
  __chkstk_darwin(v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a7(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v22 - v17;
  a8(a1);
  v19 = __chkstk_darwin(a9);
  *(&v22 - 2) = v20;
  *(&v22 - 1) = (uint64_t)v18;
  OS_dispatch_queue.sync<A>(execute:)(v19, &v22 - 4, (char *)&type metadata for () + 8);
  sub_1007EEF64(8);
  sub_10005972C((uint64_t)v18, (uint64_t)v15, a7);
  swift_storeEnumTagMultiPayload(v15, v13, 0);
  v23(v15);
  sub_100004048((uint64_t)v15, a6);
  sub_1007EF48C();
  return sub_1000126B0((uint64_t)v18, a7);
}

uint64_t sub_1007A43FC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v6 = sub_10001A9A8(&qword_101108090);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v9);
  v11 = (_QWORD *)((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100A00590(a1, v11);
  v12 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
  __chkstk_darwin(v12);
  v15[-2] = v13;
  v15[-1] = v11;
  OS_dispatch_queue.sync<A>(execute:)(sub_1007BE130, &v15[-4], &type metadata for () + 1);
  sub_1007EEF64(8);
  sub_10005972C((uint64_t)v11, (uint64_t)v8, type metadata accessor for BeaconNamingRecord);
  swift_storeEnumTagMultiPayload(v8, v6, 0);
  a4(v8);
  sub_100004048((uint64_t)v8, &qword_101108090);
  sub_1007EF48C();
  return sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_1007A46CC(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_1007A415C(a1, a2, a3, a4, a5, (uint64_t *)&unk_101106E50, type metadata accessor for LeashRecord, (void (*)(void *))sub_100D77E64, (uint64_t)sub_1007BE158);
}

uint64_t sub_1007A470C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_1007A415C(a1, a2, a3, a4, a5, (uint64_t *)&unk_101106E30, type metadata accessor for SafeLocation, (void (*)(void *))sub_100AFF19C, (uint64_t)sub_1007BE144);
}

void sub_1007A474C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  NSURL *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t inited;
  NSString *v82;
  NSString *v83;
  unint64_t v84;
  id v85;
  Class v86;
  uint64_t v87;
  NSString v88;
  id v89;
  id v90;
  char *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v119 = a1;
  v3 = type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for URL(0);
  v110 = *(_QWORD *)(v120 - 8);
  v8 = __chkstk_darwin(v120);
  v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v105 - v12;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_101108138, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57E4C);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v42 = sub_100C54388(v39, v40, 0);
      v44 = v43;
      v107 = v39;
      v108 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v42, v44);
      v106 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA0F0 != -1)
        swift_once(&qword_1010EA0F0, sub_1009AC81C);
      v45 = v120;
      v46 = sub_10001A9E8(v120, (uint64_t)qword_1011B7AC8);
      v47 = UUID.uuidString.getter(v46);
      URL.appendingPathComponent(_:isDirectory:)(v47, v48, 1);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0);
      v49 = *(void (**)(char *, uint64_t))(v110 + 8);
      v49(v13, v45);
      v106 = v3;
      v50 = *(int *)(v3 + 20);
      v110 = v41;
      v51 = v112;
      v52 = (*(uint64_t (**)(char *, uint64_t, _QWORD))(v116 + 16))(v112, v41 + v50, v117);
      v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1);
      swift_bridgeObjectRelease();
      v55 = objc_autoreleasePoolPush();
      v56 = UUID.uuidString.getter(v55);
      v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v60 = v57;
      v61 = v120;
      v49(v60, v120);
      objc_autoreleasePoolPop(v55);
      v62 = v13;
      v63 = v61;
      v111 = (char *)v49;
      v49(v62, v61);
      v64 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1);

      objc_autoreleasePoolPop(v65);
      v70 = static os_log_type_t.default.getter(v69);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v71 = qword_1011B7D38;
      v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v73 = swift_allocObject(v72, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
      v74 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      v76 = v59;
      v78 = v77;
      *(_QWORD *)(v73 + 56) = &type metadata for String;
      v79 = sub_10001AA00();
      *(_QWORD *)(v73 + 64) = v79;
      *(_QWORD *)(v73 + 32) = v75;
      *(_QWORD *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19, 2, v73);
      swift_bridgeObjectRelease();
      v80 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v82 = NSFileProtectionKey;
      v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v84 = sub_1006B9234(inited);
      v85 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0;
      LODWORD(v78) = objc_msgSend(v85, "setAttributes:ofItemAtPath:error:", v86, v88, v123);

      v89 = v123[0];
      if ((_DWORD)v78)
      {
        v90 = v123[0];
        v91 = v118;
        v92 = URL.setResourceValues(_:)(v118);
        v95 = static os_log_type_t.default.getter(v92);
        v96 = qword_1011B7D38;
        v97 = swift_allocObject(v72, 72, 7);
        *(_OWORD *)(v97 + 16) = v117;
        v98 = v110;
        v99 = v109;
        sub_10005972C(v110, v109, type metadata accessor for SharingCircleSecret);
        v100 = v99;
        v101 = (void *)v106;
        v102 = String.init<A>(describing:)(v100, v106);
        *(_QWORD *)(v97 + 56) = &type metadata for String;
        *(_QWORD *)(v97 + 64) = v79;
        *(_QWORD *)(v97 + 32) = v102;
        *(_QWORD *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29, 2, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100006204(&qword_101108140, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57E9C);
        v104 = sub_100018F08(v123);
        sub_10005972C(v98, (uint64_t)v104, type metadata accessor for SharingCircleSecret);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }
      else
      {
        v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }
      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }
}

void sub_1007A5178(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204((unint64_t *)&unk_1010F3030, type metadata accessor for MemberSharingCircle, (uint64_t)&unk_100E2DFC0);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9A98 != -1)
        swift_once(&qword_1010E9A98, sub_1001FFA50);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B6C00);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v101 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v102 = a2;
      v47 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + v46, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for MemberSharingCircle);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204(&qword_101108130, type metadata accessor for MemberSharingCircle, (uint64_t)&unk_100E2E010);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for MemberSharingCircle);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007A5B48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_101110300, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_100E59538);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA118 != -1)
        swift_once(&qword_1010EA118, sub_100A2ECA4);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B7B10);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v101 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v102 = a2;
      v47 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + v46, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for OwnerSharingCircle);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204((unint64_t *)&unk_101108120, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_100E59588);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for OwnerSharingCircle);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007A6518(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for MemberPeerTrust(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_101108108, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B0A0);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA170 != -1)
        swift_once(&qword_1010EA170, sub_100AB843C);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B7BC0);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v101 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v102 = a2;
      v47 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + v46, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for MemberPeerTrust);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204((unint64_t *)&unk_101108110, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B0F0);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for MemberPeerTrust);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007A6EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for OwnerPeerTrust(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_1010F29A8, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D414);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9A10 != -1)
        swift_once(&qword_1010E9A10, sub_1001EB610);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B6A90);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v101 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v102 = a2;
      v47 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + v46, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for OwnerPeerTrust);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204(&qword_1010F29B0, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D464);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for OwnerPeerTrust);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007A78B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  NSURL *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t inited;
  NSString *v82;
  NSString *v83;
  unint64_t v84;
  id v85;
  Class v86;
  uint64_t v87;
  NSString v88;
  id v89;
  id v90;
  char *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v119 = a1;
  v3 = type metadata accessor for OwnedDeviceKeyRecord(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for URL(0);
  v110 = *(_QWORD *)(v120 - 8);
  v8 = __chkstk_darwin(v120);
  v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v105 - v12;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_1011080F8, type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)&unk_100E6C7BC);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v42 = sub_100C54388(v39, v40, 0);
      v44 = v43;
      v107 = v39;
      v108 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v42, v44);
      v106 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA490 != -1)
        swift_once(&qword_1010EA490, sub_100C8FD48);
      v45 = v120;
      v46 = sub_10001A9E8(v120, (uint64_t)qword_1011B8038);
      v47 = UUID.uuidString.getter(v46);
      URL.appendingPathComponent(_:isDirectory:)(v47, v48, 1);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0);
      v49 = *(void (**)(char *, uint64_t))(v110 + 8);
      v49(v13, v45);
      v106 = v3;
      v50 = *(int *)(v3 + 20);
      v110 = v41;
      v51 = v112;
      v52 = (*(uint64_t (**)(char *, uint64_t, _QWORD))(v116 + 16))(v112, v41 + v50, v117);
      v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1);
      swift_bridgeObjectRelease();
      v55 = objc_autoreleasePoolPush();
      v56 = UUID.uuidString.getter(v55);
      v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v60 = v57;
      v61 = v120;
      v49(v60, v120);
      objc_autoreleasePoolPop(v55);
      v62 = v13;
      v63 = v61;
      v111 = (char *)v49;
      v49(v62, v61);
      v64 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1);

      objc_autoreleasePoolPop(v65);
      v70 = static os_log_type_t.default.getter(v69);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v71 = qword_1011B7D38;
      v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v73 = swift_allocObject(v72, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
      v74 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      v76 = v59;
      v78 = v77;
      *(_QWORD *)(v73 + 56) = &type metadata for String;
      v79 = sub_10001AA00();
      *(_QWORD *)(v73 + 64) = v79;
      *(_QWORD *)(v73 + 32) = v75;
      *(_QWORD *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19, 2, v73);
      swift_bridgeObjectRelease();
      v80 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v82 = NSFileProtectionKey;
      v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v84 = sub_1006B9234(inited);
      v85 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0;
      LODWORD(v78) = objc_msgSend(v85, "setAttributes:ofItemAtPath:error:", v86, v88, v123);

      v89 = v123[0];
      if ((_DWORD)v78)
      {
        v90 = v123[0];
        v91 = v118;
        v92 = URL.setResourceValues(_:)(v118);
        v95 = static os_log_type_t.default.getter(v92);
        v96 = qword_1011B7D38;
        v97 = swift_allocObject(v72, 72, 7);
        *(_OWORD *)(v97 + 16) = v117;
        v98 = v110;
        v99 = v109;
        sub_10005972C(v110, v109, type metadata accessor for OwnedDeviceKeyRecord);
        v100 = v99;
        v101 = (void *)v106;
        v102 = String.init<A>(describing:)(v100, v106);
        *(_QWORD *)(v97 + 56) = &type metadata for String;
        *(_QWORD *)(v97 + 64) = v79;
        *(_QWORD *)(v97 + 32) = v102;
        *(_QWORD *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29, 2, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100006204(&qword_101108100, type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)&unk_100E6C80C);
        v104 = sub_100018F08(v123);
        sub_10005972C(v98, (uint64_t)v104, type metadata accessor for OwnedDeviceKeyRecord);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }
      else
      {
        v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }
      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }
}

void sub_1007A82E4(uint64_t a1, _QWORD *a2)
{
  sub_1007B2D24(a1, a2, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1010ED698, (uint64_t)&unk_100E252BC, &qword_1010E9920, (uint64_t)qword_1011B6700, (unint64_t *)&unk_1010ED6A0, (uint64_t)&unk_100E2530C, (uint64_t)sub_1000A21BC);
}

void sub_1007A8370(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  NSURL *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t inited;
  NSString *v82;
  NSString *v83;
  unint64_t v84;
  id v85;
  Class v86;
  uint64_t v87;
  NSString v88;
  id v89;
  id v90;
  char *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v119 = a1;
  v3 = type metadata accessor for LostModeRecord(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for URL(0);
  v110 = *(_QWORD *)(v120 - 8);
  v8 = __chkstk_darwin(v120);
  v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v105 - v12;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_1011080E8, type metadata accessor for LostModeRecord, (uint64_t)&unk_100E5A8EC);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v42 = sub_100C54388(v39, v40, 0);
      v44 = v43;
      v107 = v39;
      v108 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v42, v44);
      v106 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA158 != -1)
        swift_once(&qword_1010EA158, sub_100AA9AFC);
      v45 = v120;
      v105 = sub_10001A9E8(v120, (uint64_t)qword_1011B7B78);
      v46 = UUID.uuidString.getter(v105);
      URL.appendingPathComponent(_:isDirectory:)(v46, v47, 1);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0);
      v48 = *(void (**)(char *, uint64_t))(v110 + 8);
      v48(v13, v45);
      v106 = v3;
      v49 = *(int *)(v3 + 20);
      v110 = v41;
      v50 = v41 + v49;
      v51 = v112;
      v52 = (*(uint64_t (**)(char *, uint64_t, _QWORD))(v116 + 16))(v112, v50, v117);
      v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1);
      swift_bridgeObjectRelease();
      v55 = objc_autoreleasePoolPush();
      v56 = UUID.uuidString.getter(v55);
      v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v60 = v57;
      v61 = v120;
      v48(v60, v120);
      objc_autoreleasePoolPop(v55);
      v62 = v13;
      v63 = v61;
      v111 = (char *)v48;
      v48(v62, v61);
      v64 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1);

      objc_autoreleasePoolPop(v65);
      v70 = static os_log_type_t.default.getter(v69);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v71 = qword_1011B7D38;
      v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v73 = swift_allocObject(v72, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
      v74 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      v76 = v59;
      v78 = v77;
      *(_QWORD *)(v73 + 56) = &type metadata for String;
      v79 = sub_10001AA00();
      *(_QWORD *)(v73 + 64) = v79;
      *(_QWORD *)(v73 + 32) = v75;
      *(_QWORD *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19, 2, v73);
      swift_bridgeObjectRelease();
      v80 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v82 = NSFileProtectionKey;
      v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v84 = sub_1006B9234(inited);
      v85 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0;
      LODWORD(v78) = objc_msgSend(v85, "setAttributes:ofItemAtPath:error:", v86, v88, v123);

      v89 = v123[0];
      if ((_DWORD)v78)
      {
        v90 = v123[0];
        v91 = v118;
        v92 = URL.setResourceValues(_:)(v118);
        v95 = static os_log_type_t.default.getter(v92);
        v96 = qword_1011B7D38;
        v97 = swift_allocObject(v72, 72, 7);
        *(_OWORD *)(v97 + 16) = v117;
        v98 = v110;
        v99 = v109;
        sub_10005972C(v110, v109, type metadata accessor for LostModeRecord);
        v100 = v99;
        v101 = (void *)v106;
        v102 = String.init<A>(describing:)(v100, v106);
        *(_QWORD *)(v97 + 56) = &type metadata for String;
        *(_QWORD *)(v97 + 64) = v79;
        *(_QWORD *)(v97 + 32) = v102;
        *(_QWORD *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29, 2, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100006204(&qword_1011080F0, type metadata accessor for LostModeRecord, (uint64_t)&unk_100E5A93C);
        v104 = sub_100018F08(v123);
        sub_10005972C(v98, (uint64_t)v104, type metadata accessor for LostModeRecord);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }
      else
      {
        v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }
      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }
}

void sub_1007A8DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (**v55)(char *, uint64_t, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSURL *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t inited;
  NSString *v77;
  NSString *v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  Class v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  char *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  void (**v111)(char *, uint64_t, uint64_t);
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v120 = a1;
  v3 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for URL(0);
  v111 = *(void (***)(char *, uint64_t, uint64_t))(v119 - 8);
  v8 = __chkstk_darwin(v119);
  v10 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v110 = (char *)&v105 - v12;
  __chkstk_darwin(v11);
  v113 = (char *)&v105 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_101108098, type metadata accessor for SafeLocation, (uint64_t)&unk_100E5E32C);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v107 = v39;
      v108 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA1C0 != -1)
        swift_once(&qword_1010EA1C0, sub_100B00710);
      v44 = v119;
      v45 = sub_10001A9E8(v119, (uint64_t)qword_1011B7C58);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v105 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v106 = a2;
      v47 = v112;
      (*(void (**)(char *, uint64_t, _QWORD))(v116 + 16))(v112, a2 + v46, v117);
      v48 = v111;
      v49 = v110;
      v111[2](v110, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      v53 = v52;
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease(v53);
      v54 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v55 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v56 = v10;
      v57 = v54;
      ((void (*)(char *, uint64_t))v55)(v56, v44);
      objc_autoreleasePoolPop(v50);
      v58 = v49;
      v59 = v44;
      v111 = v55;
      ((void (*)(char *, uint64_t))v55)(v58, v44);
      v60 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v47, v117);
      URLResourceValues.init()(v60);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v61 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v62);
      v64 = v63;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v63, 1);

      objc_autoreleasePoolPop(v61);
      v66 = static os_log_type_t.default.getter(v65);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v67 = qword_1011B7D38;
      v68 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v69 = swift_allocObject(v68, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v69 + 16) = xmmword_100E22B00;
      v70 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v59, v70);
      v73 = v72;
      *(_QWORD *)(v69 + 56) = &type metadata for String;
      v74 = sub_10001AA00();
      *(_QWORD *)(v69 + 64) = v74;
      *(_QWORD *)(v69 + 32) = v71;
      *(_QWORD *)(v69 + 40) = v73;
      os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, v67, "Writing to file: %@", 19, 2, v69);
      swift_bridgeObjectRelease(v69);
      v75 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v75, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = NSFileProtectionKey;
      v78 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v79 = sub_1006B9234(inited);
      v80 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v81 = sub_10047B07C(v79);
      swift_bridgeObjectRelease(v79);
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v82 = Dictionary._bridgeToObjectiveC()().super.isa;
      v83 = swift_bridgeObjectRelease(v81);
      URL.path.getter(v83);
      v85 = v84;
      v86 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v85);
      v123[0] = 0;
      LODWORD(v73) = objc_msgSend(v80, "setAttributes:ofItemAtPath:error:", v82, v86, v123);

      v87 = v123[0];
      if ((_DWORD)v73)
      {
        v88 = v123[0];
        v89 = v118;
        v91 = v57;
        v90 = URL.setResourceValues(_:)(v118);
        v94 = static os_log_type_t.default.getter(v90);
        v95 = qword_1011B7D38;
        v96 = swift_allocObject(v68, 72, 7);
        *(_OWORD *)(v96 + 16) = v117;
        v97 = v106;
        v98 = v109;
        sub_10005972C(v106, v109, type metadata accessor for SafeLocation);
        v99 = v98;
        v100 = v105;
        v101 = String.init<A>(describing:)(v99, v105);
        *(_QWORD *)(v96 + 56) = &type metadata for String;
        *(_QWORD *)(v96 + 64) = v74;
        *(_QWORD *)(v96 + 32) = v101;
        *(_QWORD *)(v96 + 40) = v102;
        os_log(_:dso:log:_:_:)(v94, &_mh_execute_header, v95, "Publishing record changed: %@", 29, 2, v96);
        swift_bridgeObjectRelease(v96);
        v123[3] = v100;
        v123[4] = (id)sub_100006204((unint64_t *)&unk_1011080A0, type metadata accessor for SafeLocation, (uint64_t)&unk_100E5E37C);
        v103 = sub_100018F08(v123);
        sub_10005972C(v97, (uint64_t)v103, type metadata accessor for SafeLocation);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v89, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
        v104 = v91;
      }
      else
      {
        v92 = v123[0];
        _convertNSErrorToError(_:)(v87);

        swift_willThrow(v93);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
        v104 = v57;
      }
      ((void (*)(char *, uint64_t))v111)(v104, v119);
    }
  }
}

void sub_1007A9778(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (**v55)(char *, uint64_t, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSURL *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t inited;
  NSString *v77;
  NSString *v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  Class v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  char *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  void (**v111)(char *, uint64_t, uint64_t);
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v120 = a1;
  v3 = type metadata accessor for LeashRecord(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for URL(0);
  v111 = *(void (***)(char *, uint64_t, uint64_t))(v119 - 8);
  v8 = __chkstk_darwin(v119);
  v10 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v110 = (char *)&v105 - v12;
  __chkstk_darwin(v11);
  v113 = (char *)&v105 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204((unint64_t *)&unk_1011080B0, type metadata accessor for LeashRecord, (uint64_t)&unk_100E700CC);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v107 = v39;
      v108 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA5E8 != -1)
        swift_once(&qword_1010EA5E8, sub_100D784F0);
      v44 = v119;
      v45 = sub_10001A9E8(v119, (uint64_t)qword_1011B8498);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v105 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v106 = a2;
      v47 = v112;
      (*(void (**)(char *, uint64_t, _QWORD))(v116 + 16))(v112, a2 + v46, v117);
      v48 = v111;
      v49 = v110;
      v111[2](v110, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      v53 = v52;
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease(v53);
      v54 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v55 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v56 = v10;
      v57 = v54;
      ((void (*)(char *, uint64_t))v55)(v56, v44);
      objc_autoreleasePoolPop(v50);
      v58 = v49;
      v59 = v44;
      v111 = v55;
      ((void (*)(char *, uint64_t))v55)(v58, v44);
      v60 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v47, v117);
      URLResourceValues.init()(v60);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v61 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v62);
      v64 = v63;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v63, 1);

      objc_autoreleasePoolPop(v61);
      v66 = static os_log_type_t.default.getter(v65);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v67 = qword_1011B7D38;
      v68 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v69 = swift_allocObject(v68, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v69 + 16) = xmmword_100E22B00;
      v70 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v59, v70);
      v73 = v72;
      *(_QWORD *)(v69 + 56) = &type metadata for String;
      v74 = sub_10001AA00();
      *(_QWORD *)(v69 + 64) = v74;
      *(_QWORD *)(v69 + 32) = v71;
      *(_QWORD *)(v69 + 40) = v73;
      os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, v67, "Writing to file: %@", 19, 2, v69);
      swift_bridgeObjectRelease(v69);
      v75 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v75, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = NSFileProtectionKey;
      v78 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v79 = sub_1006B9234(inited);
      v80 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v81 = sub_10047B07C(v79);
      swift_bridgeObjectRelease(v79);
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v82 = Dictionary._bridgeToObjectiveC()().super.isa;
      v83 = swift_bridgeObjectRelease(v81);
      URL.path.getter(v83);
      v85 = v84;
      v86 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v85);
      v123[0] = 0;
      LODWORD(v73) = objc_msgSend(v80, "setAttributes:ofItemAtPath:error:", v82, v86, v123);

      v87 = v123[0];
      if ((_DWORD)v73)
      {
        v88 = v123[0];
        v89 = v118;
        v91 = v57;
        v90 = URL.setResourceValues(_:)(v118);
        v94 = static os_log_type_t.default.getter(v90);
        v95 = qword_1011B7D38;
        v96 = swift_allocObject(v68, 72, 7);
        *(_OWORD *)(v96 + 16) = v117;
        v97 = v106;
        v98 = v109;
        sub_10005972C(v106, v109, type metadata accessor for LeashRecord);
        v99 = v98;
        v100 = v105;
        v101 = String.init<A>(describing:)(v99, v105);
        *(_QWORD *)(v96 + 56) = &type metadata for String;
        *(_QWORD *)(v96 + 64) = v74;
        *(_QWORD *)(v96 + 32) = v101;
        *(_QWORD *)(v96 + 40) = v102;
        os_log(_:dso:log:_:_:)(v94, &_mh_execute_header, v95, "Publishing record changed: %@", 29, 2, v96);
        swift_bridgeObjectRelease(v96);
        v123[3] = v100;
        v123[4] = (id)sub_100006204((unint64_t *)&unk_10111F660, type metadata accessor for LeashRecord, (uint64_t)&unk_100E7011C);
        v103 = sub_100018F08(v123);
        sub_10005972C(v97, (uint64_t)v103, type metadata accessor for LeashRecord);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v89, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
        v104 = v91;
      }
      else
      {
        v92 = v123[0];
        _convertNSErrorToError(_:)(v87);

        swift_willThrow(v93);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
        v104 = v57;
      }
      ((void (*)(char *, uint64_t))v111)(v104, v119);
    }
  }
}

void sub_1007AA148(uint64_t a1, uint64_t a2)
{
  uint64_t found;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  NSURL *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t inited;
  NSString *v82;
  NSString *v83;
  unint64_t v84;
  id v85;
  Class v86;
  uint64_t v87;
  NSString v88;
  id v89;
  id v90;
  char *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v119 = a1;
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  __chkstk_darwin(found);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for URL(0);
  v110 = *(_QWORD *)(v120 - 8);
  v8 = __chkstk_darwin(v120);
  v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v105 - v12;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_1010F7E68, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_100E37264);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, found, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v42 = sub_100C54388(v39, v40, 0);
      v44 = v43;
      v107 = v39;
      v108 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v42, v44);
      v106 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9B78 != -1)
        swift_once(&qword_1010E9B78, sub_10033DA58);
      v45 = v120;
      v105 = sub_10001A9E8(v120, (uint64_t)qword_1011B6DB0);
      v46 = UUID.uuidString.getter(v105);
      URL.appendingPathComponent(_:isDirectory:)(v46, v47, 1);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0);
      v48 = *(void (**)(char *, uint64_t))(v110 + 8);
      v48(v13, v45);
      v106 = found;
      v49 = *(int *)(found + 20);
      v110 = v41;
      v50 = v41 + v49;
      v51 = v112;
      v52 = (*(uint64_t (**)(char *, uint64_t, _QWORD))(v116 + 16))(v112, v50, v117);
      v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1);
      swift_bridgeObjectRelease();
      v55 = objc_autoreleasePoolPush();
      v56 = UUID.uuidString.getter(v55);
      v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v60 = v57;
      v61 = v120;
      v48(v60, v120);
      objc_autoreleasePoolPop(v55);
      v62 = v13;
      v63 = v61;
      v111 = (char *)v48;
      v48(v62, v61);
      v64 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1);

      objc_autoreleasePoolPop(v65);
      v70 = static os_log_type_t.default.getter(v69);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v71 = qword_1011B7D38;
      v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v73 = swift_allocObject(v72, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
      v74 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      v76 = v59;
      v78 = v77;
      *(_QWORD *)(v73 + 56) = &type metadata for String;
      v79 = sub_10001AA00();
      *(_QWORD *)(v73 + 64) = v79;
      *(_QWORD *)(v73 + 32) = v75;
      *(_QWORD *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19, 2, v73);
      swift_bridgeObjectRelease();
      v80 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v82 = NSFileProtectionKey;
      v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v84 = sub_1006B9234(inited);
      v85 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0;
      LODWORD(v78) = objc_msgSend(v85, "setAttributes:ofItemAtPath:error:", v86, v88, v123);

      v89 = v123[0];
      if ((_DWORD)v78)
      {
        v90 = v123[0];
        v91 = v118;
        v92 = URL.setResourceValues(_:)(v118);
        v95 = static os_log_type_t.default.getter(v92);
        v96 = qword_1011B7D38;
        v97 = swift_allocObject(v72, 72, 7);
        *(_OWORD *)(v97 + 16) = v117;
        v98 = v110;
        v99 = v109;
        sub_10005972C(v110, v109, type metadata accessor for NotifyWhenFoundRecord);
        v100 = v99;
        v101 = (void *)v106;
        v102 = String.init<A>(describing:)(v100, v106);
        *(_QWORD *)(v97 + 56) = &type metadata for String;
        *(_QWORD *)(v97 + 64) = v79;
        *(_QWORD *)(v97 + 32) = v102;
        *(_QWORD *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29, 2, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100006204(&qword_1010F7E70, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_100E372B4);
        v104 = sub_100018F08(v123);
        sub_10005972C(v98, (uint64_t)v104, type metadata accessor for NotifyWhenFoundRecord);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }
      else
      {
        v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }
      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }
}

void sub_1007AAB80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  id v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Class v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  void *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  NSURL *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t inited;
  NSString *v75;
  NSString *v76;
  unint64_t v77;
  id v78;
  Class v79;
  uint64_t v80;
  NSString v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v115 = a1;
  v3 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v3);
  v104 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for URL(0);
  v105 = *(_QWORD *)(v116 - 8);
  v8 = __chkstk_darwin(v116);
  v106 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v107 = (char *)&v99 - v11;
  v12 = __chkstk_darwin(v10);
  v109 = (char *)&v99 - v13;
  __chkstk_darwin(v12);
  v15 = (char *)&v99 - v14;
  v16 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v99 - v22;
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v16);
  v24 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v16, v24);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v16, v24);
  v26 = v118;
  v25 = v119[0];
  v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  v28 = ((uint64_t (*)(char *, uint64_t))v27)(v23, v16);
  if (v25 == v26)
  {
    v29 = static os_log_type_t.default.getter(v28);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v30 = sub_10008806C();
    v31 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v30, 0, 0);
    *v32 = 0;
    swift_willThrow(v31);
  }
  else
  {
    v33 = objc_autoreleasePoolPush();
    v34 = type metadata accessor for PropertyListEncoder(0);
    v35 = swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v36 = PropertyListEncoder.init()(v35);
    v37 = sub_100006204(&qword_101108080, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E58618);
    v38 = isa;
    v39 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v37);
    if (v38)
    {
      swift_release(v36);
      objc_autoreleasePoolPop(v33);
    }
    else
    {
      v41 = v39;
      v42 = v40;
      swift_release(v36);
      objc_autoreleasePoolPop(v33);
      v43 = sub_100C54388(v41, v42, 0);
      v45 = v44;
      v102 = v41;
      v103 = v42;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v43, v45);
      v46 = objc_autoreleasePoolPush();
      sub_100A00C6C();
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      objc_autoreleasePoolPop(v46);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v15, 0);
      v47 = *(void (**)(char *, uint64_t))(v105 + 8);
      v47(v15, v116);
      v48 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + *(int *)(v3 + 20), v113);
      v49 = objc_autoreleasePoolPush();
      v50 = v107;
      sub_100A00C6C();
      v105 = 0;
      v100 = (void *)v3;
      v101 = a2;
      objc_autoreleasePoolPop(v49);
      v51 = objc_autoreleasePoolPush();
      v52 = UUID.uuidString.getter(v51);
      v53 = v106;
      URL.appendingPathComponent(_:)(v52, v54);
      swift_bridgeObjectRelease();
      v55 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v56 = v116;
      v47(v53, v116);
      objc_autoreleasePoolPop(v51);
      v107 = (char *)v47;
      v47(v50, v56);
      v57 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v48, v113);
      URLResourceValues.init()(v57);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v58 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v59);
      v61 = v60;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v60, 1);

      objc_autoreleasePoolPop(v58);
      v63 = static os_log_type_t.default.getter(v62);
      v64 = v56;
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v65 = qword_1011B7D38;
      v66 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v67 = swift_allocObject(v66, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
      v68 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v64, v68);
      v71 = v70;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      v72 = sub_10001AA00();
      *(_QWORD *)(v67 + 64) = v72;
      *(_QWORD *)(v67 + 32) = v69;
      *(_QWORD *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v63, &_mh_execute_header, v65, "Writing to file: %@", 19, 2, v67);
      swift_bridgeObjectRelease();
      v73 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v73, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v75 = NSFileProtectionKey;
      v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = sub_1006B9234(inited);
      v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LOBYTE(v71) = objc_msgSend(v78, "setAttributes:ofItemAtPath:error:", v79, v81, v119);

      v82 = v119[0];
      if ((v71 & 1) != 0)
      {
        v83 = v119[0];
        v84 = v114;
        v85 = v105;
        v86 = URL.setResourceValues(_:)(v114);
        v87 = (void (*)(char *, uint64_t))v107;
        if (v85)
        {
          (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v111);

          sub_10001BC14(v102, v103);
        }
        else
        {
          v90 = static os_log_type_t.default.getter(v86);
          v112 = qword_1011B7D38;
          v91 = swift_allocObject(v66, 72, 7);
          *(_OWORD *)(v91 + 16) = v113;
          v92 = v101;
          v93 = v104;
          sub_10005972C(v101, v104, type metadata accessor for BeaconNamingRecord);
          v94 = v93;
          v95 = v100;
          v96 = String.init<A>(describing:)(v94, v100);
          *(_QWORD *)(v91 + 56) = &type metadata for String;
          *(_QWORD *)(v91 + 64) = v72;
          *(_QWORD *)(v91 + 32) = v96;
          *(_QWORD *)(v91 + 40) = v97;
          os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v112, "Publishing record changed: %@", 29, 2, v91);
          swift_bridgeObjectRelease();
          v119[3] = v95;
          v119[4] = (id)sub_100006204(&qword_101108088, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E58668);
          v98 = sub_100018F08(v119);
          sub_10005972C(v92, (uint64_t)v98, type metadata accessor for BeaconNamingRecord);
          PassthroughSubject.send(_:)(v119);
          sub_10001BC14(v102, v103);

          (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v111);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        }
        v87(v55, v116);
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v89);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        ((void (*)(char *, uint64_t))v107)(v55, v116);
      }
    }
  }
}

void sub_1007AB5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void **v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  NSURL *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t inited;
  NSString *v82;
  NSString *v83;
  unint64_t v84;
  id v85;
  Class v86;
  uint64_t v87;
  NSString v88;
  id v89;
  id v90;
  char *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v119 = a1;
  v3 = type metadata accessor for ShareRecord(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for URL(0);
  v110 = *(_QWORD *)(v120 - 8);
  v8 = __chkstk_darwin(v120);
  v111 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v113 = (char *)&v105 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v105 - v12;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204((unint64_t *)&unk_1010ED9D0, type metadata accessor for ShareRecord, (uint64_t)&unk_100E25BCC);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      v41 = a2;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v42 = sub_100C54388(v39, v40, 0);
      v44 = v43;
      v107 = v39;
      v108 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v42, v44);
      v106 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9928 != -1)
        swift_once(&qword_1010E9928, sub_1000A5B90);
      v45 = v120;
      v105 = sub_10001A9E8(v120, (uint64_t)qword_1011B6718);
      v46 = UUID.uuidString.getter(v105);
      URL.appendingPathComponent(_:isDirectory:)(v46, v47, 1);
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0);
      v48 = *(void (**)(char *, uint64_t))(v110 + 8);
      v48(v13, v45);
      v106 = v3;
      v49 = *(int *)(v3 + 20);
      v110 = v41;
      v50 = v41 + v49;
      v51 = v112;
      v52 = (*(uint64_t (**)(char *, uint64_t, _QWORD))(v116 + 16))(v112, v50, v117);
      v53 = UUID.uuidString.getter(v52);
      URL.appendingPathComponent(_:isDirectory:)(v53, v54, 1);
      swift_bridgeObjectRelease();
      v55 = objc_autoreleasePoolPush();
      v56 = UUID.uuidString.getter(v55);
      v57 = v111;
      URL.appendingPathComponent(_:)(v56, v58);
      swift_bridgeObjectRelease();
      v59 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v60 = v57;
      v61 = v120;
      v48(v60, v120);
      objc_autoreleasePoolPop(v55);
      v62 = v13;
      v63 = v61;
      v111 = (char *)v48;
      v48(v62, v61);
      v64 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v51, v117);
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v65 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v66);
      v68 = v67;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v67, 1);

      objc_autoreleasePoolPop(v65);
      v70 = static os_log_type_t.default.getter(v69);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v71 = qword_1011B7D38;
      v72 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v73 = swift_allocObject(v72, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
      v74 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v63, v74);
      v76 = v59;
      v78 = v77;
      *(_QWORD *)(v73 + 56) = &type metadata for String;
      v79 = sub_10001AA00();
      *(_QWORD *)(v73 + 64) = v79;
      *(_QWORD *)(v73 + 32) = v75;
      *(_QWORD *)(v73 + 40) = v78;
      os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "Writing to file: %@", 19, 2, v73);
      swift_bridgeObjectRelease();
      v80 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v80, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v82 = NSFileProtectionKey;
      v83 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v84 = sub_1006B9234(inited);
      v85 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v84);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v86 = Dictionary._bridgeToObjectiveC()().super.isa;
      v87 = swift_bridgeObjectRelease();
      URL.path.getter(v87);
      v88 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0;
      LODWORD(v78) = objc_msgSend(v85, "setAttributes:ofItemAtPath:error:", v86, v88, v123);

      v89 = v123[0];
      if ((_DWORD)v78)
      {
        v90 = v123[0];
        v91 = v118;
        v92 = URL.setResourceValues(_:)(v118);
        v95 = static os_log_type_t.default.getter(v92);
        v96 = qword_1011B7D38;
        v97 = swift_allocObject(v72, 72, 7);
        *(_OWORD *)(v97 + 16) = v117;
        v98 = v110;
        v99 = v109;
        sub_10005972C(v110, v109, type metadata accessor for ShareRecord);
        v100 = v99;
        v101 = (void *)v106;
        v102 = String.init<A>(describing:)(v100, v106);
        *(_QWORD *)(v97 + 56) = &type metadata for String;
        *(_QWORD *)(v97 + 64) = v79;
        *(_QWORD *)(v97 + 32) = v102;
        *(_QWORD *)(v97 + 40) = v103;
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, v96, "Publishing record changed: %@", 29, 2, v97);
        swift_bridgeObjectRelease();
        v123[3] = v101;
        v123[4] = (id)sub_100006204(&qword_1011080E0, type metadata accessor for ShareRecord, (uint64_t)&unk_100E25BB0);
        v104 = sub_100018F08(v123);
        sub_10005972C(v98, (uint64_t)v104, type metadata accessor for ShareRecord);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v91, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }
      else
      {
        v93 = v123[0];
        _convertNSErrorToError(_:)(v89);

        swift_willThrow(v94);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }
      ((void (*)(char *, uint64_t))v111)(v76, v120);
    }
  }
}

void sub_1007ABFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204((unint64_t *)&unk_1010F97D0, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3ABA0);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9B90 != -1)
        swift_once(&qword_1010E9B90, sub_10036E07C);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B6DE0);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v101 = (void *)v3;
      v46 = *(int *)(v3 + 24);
      v102 = a2;
      v47 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + v46, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for OwnedBeaconGroup);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204((unint64_t *)&unk_1011080D0, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_100E3ABF0);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for OwnedBeaconGroup);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007AC9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204((unint64_t *)&unk_10111E870, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F4DC);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA5B8 != -1)
        swift_once(&qword_1010EA5B8, sub_100D3AD18);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B8448);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v101 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v102 = a2;
      v47 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + v46, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for SharedBeaconRecord);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204((unint64_t *)&unk_1011080C0, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F52C);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for SharedBeaconRecord);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007AD39C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204((unint64_t *)&unk_101108060, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57A28);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA0D8 != -1)
        swift_once(&qword_1010EA0D8, sub_1009A3098);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B7AA8);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v101 = (void *)v3;
      v46 = *(int *)(v3 + 20);
      v102 = a2;
      v47 = v108;
      (*(void (**)(char *, uint64_t, _QWORD))(v112 + 16))(v108, a2 + v46, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for OwnedBeaconRecord);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204(&qword_10110EE60, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57A78);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for OwnedBeaconRecord);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007ADD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, _QWORD);
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void (**v54)(char *, uint64_t, uint64_t);
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  NSURL *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t inited;
  NSString *v76;
  NSString *v77;
  unint64_t v78;
  id v79;
  Class v80;
  uint64_t v81;
  NSString v82;
  id v83;
  id v84;
  char *v85;
  uint64_t v86;
  char *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  void (**v107)(char *, uint64_t, uint64_t);
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  Class isa;
  void *v118;
  id v119[5];
  char v120[48];

  v116 = a1;
  v3 = type metadata accessor for BeaconProductInfoRecord(0);
  __chkstk_darwin(v3);
  v105 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v114 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v112 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v113 = v6;
  __chkstk_darwin(v6);
  v108 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v107 = *(void (***)(char *, uint64_t, uint64_t))(v115 - 8);
  v8 = __chkstk_darwin(v115);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v106 = (char *)&v101 - v12;
  __chkstk_darwin(v11);
  v109 = (char *)&v101 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v101 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v119, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v118, v14, v22);
  v24 = v118;
  v23 = v119[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_101100CF8, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_100E457A4);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v103 = v39;
      v104 = v40;
      v101 = (void *)v3;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9D40 != -1)
        swift_once(&qword_1010E9D40, sub_100601994);
      v44 = v115;
      v45 = sub_10001A9E8(v115, (uint64_t)qword_1011B7200);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v46 = *(void (**)(char *, uint64_t, _QWORD))(v112 + 16);
      v47 = v108;
      v102 = a2;
      v46(v108, a2, v113);
      v48 = v107;
      v49 = v106;
      v107[2](v106, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease();
      v53 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v54 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v55 = v10;
      v56 = v53;
      ((void (*)(char *, uint64_t))v54)(v55, v44);
      objc_autoreleasePoolPop(v50);
      v57 = v49;
      v58 = v44;
      v107 = v54;
      ((void (*)(char *, uint64_t))v54)(v57, v44);
      v59 = (*(uint64_t (**)(char *, _QWORD))(v112 + 8))(v47, v113);
      URLResourceValues.init()(v59);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v60 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v61);
      v63 = v62;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v62, 1);

      objc_autoreleasePoolPop(v60);
      v65 = static os_log_type_t.default.getter(v64);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v66 = qword_1011B7D38;
      v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v68 = swift_allocObject(v67, 72, 7);
      v113 = xmmword_100E22B00;
      *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
      v69 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v58, v69);
      v72 = v71;
      *(_QWORD *)(v68 + 56) = &type metadata for String;
      v73 = sub_10001AA00();
      *(_QWORD *)(v68 + 64) = v73;
      *(_QWORD *)(v68 + 32) = v70;
      *(_QWORD *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)(v65, &_mh_execute_header, v66, "Writing to file: %@", 19, 2, v68);
      swift_bridgeObjectRelease();
      v74 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v74, v120);
      *(_OWORD *)(inited + 16) = v113;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v76 = NSFileProtectionKey;
      v77 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = sub_1006B9234(inited);
      v79 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v78);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v80 = Dictionary._bridgeToObjectiveC()().super.isa;
      v81 = swift_bridgeObjectRelease();
      URL.path.getter(v81);
      v82 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119[0] = 0;
      LODWORD(v72) = objc_msgSend(v79, "setAttributes:ofItemAtPath:error:", v80, v82, v119);

      v83 = v119[0];
      if ((_DWORD)v72)
      {
        v84 = v119[0];
        v85 = v114;
        v87 = v56;
        v86 = URL.setResourceValues(_:)(v114);
        v90 = static os_log_type_t.default.getter(v86);
        v91 = qword_1011B7D38;
        v92 = swift_allocObject(v67, 72, 7);
        *(_OWORD *)(v92 + 16) = v113;
        v93 = v102;
        v94 = v105;
        sub_10005972C(v102, v105, type metadata accessor for BeaconProductInfoRecord);
        v95 = v94;
        v96 = v101;
        v97 = String.init<A>(describing:)(v95, v101);
        *(_QWORD *)(v92 + 56) = &type metadata for String;
        *(_QWORD *)(v92 + 64) = v73;
        *(_QWORD *)(v92 + 32) = v97;
        *(_QWORD *)(v92 + 40) = v98;
        os_log(_:dso:log:_:_:)(v90, &_mh_execute_header, v91, "Publishing record changed: %@", 29, 2, v92);
        swift_bridgeObjectRelease();
        v119[3] = v96;
        v119[4] = (id)sub_100006204((unint64_t *)&unk_101108260, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_100E45788);
        v99 = sub_100018F08(v119);
        sub_10005972C(v93, (uint64_t)v99, type metadata accessor for BeaconProductInfoRecord);
        PassthroughSubject.send(_:)(v119);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v85, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
        v100 = v87;
      }
      else
      {
        v88 = v119[0];
        _convertNSErrorToError(_:)(v83);

        swift_willThrow(v89);
        sub_10001BC14(v103, v104);

        (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
        v100 = v56;
      }
      ((void (*)(char *, uint64_t))v107)(v100, v115);
    }
  }
}

void sub_1007AE73C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, _QWORD);
  char *v46;
  void (**v47)(char *, uint64_t, uint64_t);
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (**v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSURL *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t inited;
  NSString *v75;
  NSString *v76;
  unint64_t v77;
  id v78;
  Class v79;
  uint64_t v80;
  NSString v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  void (**v106)(char *, uint64_t, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  Class isa;
  void *v117;
  id v118[5];
  char v119[48];

  v115 = a1;
  v3 = type metadata accessor for PairingErrorRecord(0);
  __chkstk_darwin(v3);
  v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for URLResourceValues(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v111 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v112 = v6;
  __chkstk_darwin(v6);
  v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for URL(0);
  v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  v8 = __chkstk_darwin(v114);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  v108 = (char *)&v100 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  v24 = v117;
  v23 = v118[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    v34 = sub_100006204(&qword_101108440, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_100E57124);
    v35 = isa;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v38 = v36;
      v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      v40 = sub_100C54388(v38, v39, 0);
      v42 = v41;
      v102 = v38;
      v103 = v39;
      v100 = (void *)v3;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v40, v42);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA0C8 != -1)
        swift_once(&qword_1010EA0C8, sub_1009997C8);
      v43 = v114;
      v44 = sub_10001A9E8(v114, (uint64_t)qword_1011B7A80);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0);
      v45 = *(void (**)(char *, uint64_t, _QWORD))(v111 + 16);
      v46 = v107;
      v101 = a2;
      v45(v107, a2, v112);
      v47 = v106;
      v48 = v105;
      v106[2](v105, v44, v43);
      v49 = objc_autoreleasePoolPush();
      v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      v54 = v10;
      v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      v56 = v48;
      v57 = v43;
      v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      v58 = (*(uint64_t (**)(char *, _QWORD))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1);

      objc_autoreleasePoolPop(v59);
      v64 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v65 = qword_1011B7D38;
      v66 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v67 = swift_allocObject(v66, 72, 7);
      v112 = xmmword_100E22B00;
      *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
      v68 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      v71 = v70;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      v72 = sub_10001AA00();
      *(_QWORD *)(v67 + 64) = v72;
      *(_QWORD *)(v67 + 32) = v69;
      *(_QWORD *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19, 2, v67);
      swift_bridgeObjectRelease();
      v73 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + 16) = v112;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v75 = NSFileProtectionKey;
      v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = sub_1006B9234(inited);
      v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0;
      LODWORD(v71) = objc_msgSend(v78, "setAttributes:ofItemAtPath:error:", v79, v81, v118);

      v82 = v118[0];
      if ((_DWORD)v71)
      {
        v83 = v118[0];
        v84 = v113;
        v86 = v55;
        v85 = URL.setResourceValues(_:)(v113);
        v89 = static os_log_type_t.default.getter(v85);
        v90 = qword_1011B7D38;
        v91 = swift_allocObject(v66, 72, 7);
        *(_OWORD *)(v91 + 16) = v112;
        v92 = v101;
        v93 = v104;
        sub_10005972C(v101, v104, type metadata accessor for PairingErrorRecord);
        v94 = v93;
        v95 = v100;
        v96 = String.init<A>(describing:)(v94, v100);
        *(_QWORD *)(v91 + 56) = &type metadata for String;
        *(_QWORD *)(v91 + 64) = v72;
        *(_QWORD *)(v91 + 32) = v96;
        *(_QWORD *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29, 2, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100006204(&qword_101108448, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_100E57108);
        v98 = sub_100018F08(v118);
        sub_10005972C(v92, (uint64_t)v98, type metadata accessor for PairingErrorRecord);
        PassthroughSubject.send(_:)(v118);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        v99 = v86;
      }
      else
      {
        v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        v99 = v55;
      }
      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }
}

void sub_1007AF10C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, _QWORD);
  char *v46;
  void (**v47)(char *, uint64_t, uint64_t);
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (**v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSURL *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t inited;
  NSString *v75;
  NSString *v76;
  unint64_t v77;
  id v78;
  Class v79;
  uint64_t v80;
  NSString v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  void (**v106)(char *, uint64_t, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  Class isa;
  void *v117;
  id v118[5];
  char v119[48];

  v115 = a1;
  v3 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v3);
  v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for URLResourceValues(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v111 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v112 = v6;
  __chkstk_darwin(v6);
  v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for URL(0);
  v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  v8 = __chkstk_darwin(v114);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  v108 = (char *)&v100 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  v24 = v117;
  v23 = v118[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    v34 = sub_100006204(&qword_1011082A0, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_100E2C34C);
    v35 = isa;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v38 = v36;
      v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      v40 = sub_100C54388(v38, v39, 0);
      v42 = v41;
      v102 = v38;
      v103 = v39;
      v100 = (void *)v3;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v40, v42);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E99F8 != -1)
        swift_once(&qword_1010E99F8, sub_1001D7F04);
      v43 = v114;
      v44 = sub_10001A9E8(v114, (uint64_t)qword_1011B6A48);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0);
      v45 = *(void (**)(char *, uint64_t, _QWORD))(v111 + 16);
      v46 = v107;
      v101 = a2;
      v45(v107, a2, v112);
      v47 = v106;
      v48 = v105;
      v106[2](v105, v44, v43);
      v49 = objc_autoreleasePoolPush();
      v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      v54 = v10;
      v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      v56 = v48;
      v57 = v43;
      v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      v58 = (*(uint64_t (**)(char *, _QWORD))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1);

      objc_autoreleasePoolPop(v59);
      v64 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v65 = qword_1011B7D38;
      v66 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v67 = swift_allocObject(v66, 72, 7);
      v112 = xmmword_100E22B00;
      *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
      v68 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      v71 = v70;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      v72 = sub_10001AA00();
      *(_QWORD *)(v67 + 64) = v72;
      *(_QWORD *)(v67 + 32) = v69;
      *(_QWORD *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19, 2, v67);
      swift_bridgeObjectRelease();
      v73 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + 16) = v112;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v75 = NSFileProtectionKey;
      v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = sub_1006B9234(inited);
      v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0;
      LODWORD(v71) = objc_msgSend(v78, "setAttributes:ofItemAtPath:error:", v79, v81, v118);

      v82 = v118[0];
      if ((_DWORD)v71)
      {
        v83 = v118[0];
        v84 = v113;
        v86 = v55;
        v85 = URL.setResourceValues(_:)(v113);
        v89 = static os_log_type_t.default.getter(v85);
        v90 = qword_1011B7D38;
        v91 = swift_allocObject(v66, 72, 7);
        *(_OWORD *)(v91 + 16) = v112;
        v92 = v101;
        v93 = v104;
        sub_10005972C(v101, v104, type metadata accessor for WildModeAssociationRecord);
        v94 = v93;
        v95 = v100;
        v96 = String.init<A>(describing:)(v94, v100);
        *(_QWORD *)(v91 + 56) = &type metadata for String;
        *(_QWORD *)(v91 + 64) = v72;
        *(_QWORD *)(v91 + 32) = v96;
        *(_QWORD *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29, 2, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100006204(&qword_1011082A8, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_100E2C39C);
        v98 = sub_100018F08(v118);
        sub_10005972C(v92, (uint64_t)v98, type metadata accessor for WildModeAssociationRecord);
        PassthroughSubject.send(_:)(v118);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        v99 = v86;
      }
      else
      {
        v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        v99 = v55;
      }
      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }
}

void sub_1007AFADC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Class v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, _QWORD);
  char *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  char *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (**v55)(char *, uint64_t, uint64_t);
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSURL *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t inited;
  NSString *v77;
  NSString *v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  Class v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSString v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  char *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  void (**v111)(char *, uint64_t, uint64_t);
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v120 = a1;
  v3 = type metadata accessor for KeySyncRecord(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = type metadata accessor for URL(0);
  v111 = *(void (***)(char *, uint64_t, uint64_t))(v119 - 8);
  v8 = __chkstk_darwin(v119);
  v10 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v110 = (char *)&v105 - v12;
  __chkstk_darwin(v11);
  v113 = (char *)&v105 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v105 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    v34 = PropertyListEncoder.init()(v33);
    v35 = sub_100006204(&qword_101108220, type metadata accessor for KeySyncRecord, (uint64_t)&unk_100E5DDA4);
    v36 = isa;
    v37 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v35);
    if (v36)
    {
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v39 = v37;
      v40 = v38;
      swift_release(v34);
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v39, v40, 0);
      v43 = v42;
      v107 = v39;
      v108 = v40;
      v105 = (void *)v3;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA1B8 != -1)
        swift_once(&qword_1010EA1B8, sub_100AFC4C0);
      v44 = v119;
      v45 = sub_10001A9E8(v119, (uint64_t)qword_1011B7C40);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v45, 0);
      v46 = *(void (**)(char *, uint64_t, _QWORD))(v116 + 16);
      v47 = v112;
      v106 = a2;
      v46(v112, a2, v117);
      v48 = v111;
      v49 = v110;
      v111[2](v110, v45, v44);
      v50 = objc_autoreleasePoolPush();
      v51 = UUID.uuidString.getter(v50);
      v53 = v52;
      URL.appendingPathComponent(_:)(v51, v52);
      swift_bridgeObjectRelease(v53);
      v54 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v55 = (void (**)(char *, uint64_t, uint64_t))v48[1];
      v56 = v10;
      v57 = v54;
      ((void (*)(char *, uint64_t))v55)(v56, v44);
      objc_autoreleasePoolPop(v50);
      v58 = v49;
      v59 = v44;
      v111 = v55;
      ((void (*)(char *, uint64_t))v55)(v58, v44);
      v60 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v47, v117);
      URLResourceValues.init()(v60);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v61 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v62);
      v64 = v63;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v63, 1);

      objc_autoreleasePoolPop(v61);
      v66 = static os_log_type_t.default.getter(v65);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v67 = qword_1011B7D38;
      v68 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v69 = swift_allocObject(v68, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v69 + 16) = xmmword_100E22B00;
      v70 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v71 = dispatch thunk of CustomStringConvertible.description.getter(v59, v70);
      v73 = v72;
      *(_QWORD *)(v69 + 56) = &type metadata for String;
      v74 = sub_10001AA00();
      *(_QWORD *)(v69 + 64) = v74;
      *(_QWORD *)(v69 + 32) = v71;
      *(_QWORD *)(v69 + 40) = v73;
      os_log(_:dso:log:_:_:)(v66, &_mh_execute_header, v67, "Writing to file: %@", 19, 2, v69);
      swift_bridgeObjectRelease(v69);
      v75 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v75, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = NSFileProtectionKey;
      v78 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v79 = sub_1006B9234(inited);
      v80 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v81 = sub_10047B07C(v79);
      swift_bridgeObjectRelease(v79);
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v82 = Dictionary._bridgeToObjectiveC()().super.isa;
      v83 = swift_bridgeObjectRelease(v81);
      URL.path.getter(v83);
      v85 = v84;
      v86 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v85);
      v123[0] = 0;
      LODWORD(v73) = objc_msgSend(v80, "setAttributes:ofItemAtPath:error:", v82, v86, v123);

      v87 = v123[0];
      if ((_DWORD)v73)
      {
        v88 = v123[0];
        v89 = v118;
        v91 = v57;
        v90 = URL.setResourceValues(_:)(v118);
        v94 = static os_log_type_t.default.getter(v90);
        v95 = qword_1011B7D38;
        v96 = swift_allocObject(v68, 72, 7);
        *(_OWORD *)(v96 + 16) = v117;
        v97 = v106;
        v98 = v109;
        sub_10005972C(v106, v109, type metadata accessor for KeySyncRecord);
        v99 = v98;
        v100 = v105;
        v101 = String.init<A>(describing:)(v99, v105);
        *(_QWORD *)(v96 + 56) = &type metadata for String;
        *(_QWORD *)(v96 + 64) = v74;
        *(_QWORD *)(v96 + 32) = v101;
        *(_QWORD *)(v96 + 40) = v102;
        os_log(_:dso:log:_:_:)(v94, &_mh_execute_header, v95, "Publishing record changed: %@", 29, 2, v96);
        swift_bridgeObjectRelease(v96);
        v123[3] = v100;
        v123[4] = (id)sub_100006204(&qword_101108228, type metadata accessor for KeySyncRecord, (uint64_t)&unk_100E5DD88);
        v103 = sub_100018F08(v123);
        sub_10005972C(v97, (uint64_t)v103, type metadata accessor for KeySyncRecord);
        PassthroughSubject.send(_:)(v123);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v89, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
        v104 = v91;
      }
      else
      {
        v92 = v123[0];
        _convertNSErrorToError(_:)(v87);

        swift_willThrow(v93);
        sub_10001BC14(v107, v108);

        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
        v104 = v57;
      }
      ((void (*)(char *, uint64_t))v111)(v104, v119);
    }
  }
}

void sub_1007B04AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, _QWORD);
  char *v46;
  void (**v47)(char *, uint64_t, uint64_t);
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (**v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSURL *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t inited;
  NSString *v75;
  NSString *v76;
  unint64_t v77;
  id v78;
  Class v79;
  uint64_t v80;
  NSString v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  void (**v106)(char *, uint64_t, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  Class isa;
  void *v117;
  id v118[5];
  char v119[48];

  v115 = a1;
  v3 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  __chkstk_darwin(v3);
  v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for URLResourceValues(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v111 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v112 = v6;
  __chkstk_darwin(v6);
  v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for URL(0);
  v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  v8 = __chkstk_darwin(v114);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  v108 = (char *)&v100 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  v24 = v117;
  v23 = v118[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    v34 = sub_100006204(&qword_101108148, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_100E52E2C);
    v35 = isa;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v38 = v36;
      v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      v40 = sub_100C54388(v38, v39, 0);
      v42 = v41;
      v102 = v38;
      v103 = v39;
      v100 = (void *)v3;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v40, v42);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9FD8 != -1)
        swift_once(&qword_1010E9FD8, sub_1008AB7A8);
      v43 = v114;
      v44 = sub_10001A9E8(v114, (uint64_t)qword_1011B7878);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0);
      v45 = *(void (**)(char *, uint64_t, _QWORD))(v111 + 16);
      v46 = v107;
      v101 = a2;
      v45(v107, a2, v112);
      v47 = v106;
      v48 = v105;
      v106[2](v105, v44, v43);
      v49 = objc_autoreleasePoolPush();
      v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      v54 = v10;
      v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      v56 = v48;
      v57 = v43;
      v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      v58 = (*(uint64_t (**)(char *, _QWORD))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1);

      objc_autoreleasePoolPop(v59);
      v64 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v65 = qword_1011B7D38;
      v66 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v67 = swift_allocObject(v66, 72, 7);
      v112 = xmmword_100E22B00;
      *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
      v68 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      v71 = v70;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      v72 = sub_10001AA00();
      *(_QWORD *)(v67 + 64) = v72;
      *(_QWORD *)(v67 + 32) = v69;
      *(_QWORD *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19, 2, v67);
      swift_bridgeObjectRelease();
      v73 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + 16) = v112;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v75 = NSFileProtectionKey;
      v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = sub_1006B9234(inited);
      v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0;
      LODWORD(v71) = objc_msgSend(v78, "setAttributes:ofItemAtPath:error:", v79, v81, v118);

      v82 = v118[0];
      if ((_DWORD)v71)
      {
        v83 = v118[0];
        v84 = v113;
        v86 = v55;
        v85 = URL.setResourceValues(_:)(v113);
        v89 = static os_log_type_t.default.getter(v85);
        v90 = qword_1011B7D38;
        v91 = swift_allocObject(v66, 72, 7);
        *(_OWORD *)(v91 + 16) = v112;
        v92 = v101;
        v93 = v104;
        sub_10005972C(v101, v104, type metadata accessor for SecureLocationsCachedSharedKey);
        v94 = v93;
        v95 = v100;
        v96 = String.init<A>(describing:)(v94, v100);
        *(_QWORD *)(v91 + 56) = &type metadata for String;
        *(_QWORD *)(v91 + 64) = v72;
        *(_QWORD *)(v91 + 32) = v96;
        *(_QWORD *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29, 2, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100006204((unint64_t *)&unk_101108150, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_100E52E10);
        v98 = sub_100018F08(v118);
        sub_10005972C(v92, (uint64_t)v98, type metadata accessor for SecureLocationsCachedSharedKey);
        PassthroughSubject.send(_:)(v118);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        v99 = v86;
      }
      else
      {
        v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        v99 = v55;
      }
      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }
}

void sub_1007B0E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, _QWORD);
  char *v46;
  void (**v47)(char *, uint64_t, uint64_t);
  char *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (**v53)(char *, uint64_t, uint64_t);
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  NSURL *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t inited;
  NSString *v75;
  NSString *v76;
  unint64_t v77;
  id v78;
  Class v79;
  uint64_t v80;
  NSString v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  char *v105;
  void (**v106)(char *, uint64_t, uint64_t);
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  Class isa;
  void *v117;
  id v118[5];
  char v119[48];

  v115 = a1;
  v3 = type metadata accessor for SecureLocationsCachedPayload(0);
  __chkstk_darwin(v3);
  v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for URLResourceValues(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v113 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v111 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v112 = v6;
  __chkstk_darwin(v6);
  v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for URL(0);
  v106 = *(void (***)(char *, uint64_t, uint64_t))(v114 - 8);
  v8 = __chkstk_darwin(v114);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v105 = (char *)&v100 - v12;
  __chkstk_darwin(v11);
  v108 = (char *)&v100 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  v24 = v117;
  v23 = v118[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    v34 = sub_100006204(&qword_101108420, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_100E3E550);
    v35 = isa;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v38 = v36;
      v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      v40 = sub_100C54388(v38, v39, 0);
      v42 = v41;
      v102 = v38;
      v103 = v39;
      v100 = (void *)v3;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v40, v42);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9C00 != -1)
        swift_once(&qword_1010E9C00, sub_10043C1BC);
      v43 = v114;
      v44 = sub_10001A9E8(v114, (uint64_t)qword_1011B6F00);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v44, 0);
      v45 = *(void (**)(char *, uint64_t, _QWORD))(v111 + 16);
      v46 = v107;
      v101 = a2;
      v45(v107, a2, v112);
      v47 = v106;
      v48 = v105;
      v106[2](v105, v44, v43);
      v49 = objc_autoreleasePoolPush();
      v50 = UUID.uuidString.getter(v49);
      URL.appendingPathComponent(_:)(v50, v51);
      swift_bridgeObjectRelease();
      v52 = v108;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v53 = (void (**)(char *, uint64_t, uint64_t))v47[1];
      v54 = v10;
      v55 = v52;
      ((void (*)(char *, uint64_t))v53)(v54, v43);
      objc_autoreleasePoolPop(v49);
      v56 = v48;
      v57 = v43;
      v106 = v53;
      ((void (*)(char *, uint64_t))v53)(v56, v43);
      v58 = (*(uint64_t (**)(char *, _QWORD))(v111 + 8))(v46, v112);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1);

      objc_autoreleasePoolPop(v59);
      v64 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v65 = qword_1011B7D38;
      v66 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v67 = swift_allocObject(v66, 72, 7);
      v112 = xmmword_100E22B00;
      *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
      v68 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v57, v68);
      v71 = v70;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      v72 = sub_10001AA00();
      *(_QWORD *)(v67 + 64) = v72;
      *(_QWORD *)(v67 + 32) = v69;
      *(_QWORD *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19, 2, v67);
      swift_bridgeObjectRelease();
      v73 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + 16) = v112;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v75 = NSFileProtectionKey;
      v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = sub_1006B9234(inited);
      v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0;
      LODWORD(v71) = objc_msgSend(v78, "setAttributes:ofItemAtPath:error:", v79, v81, v118);

      v82 = v118[0];
      if ((_DWORD)v71)
      {
        v83 = v118[0];
        v84 = v113;
        v86 = v55;
        v85 = URL.setResourceValues(_:)(v113);
        v89 = static os_log_type_t.default.getter(v85);
        v90 = qword_1011B7D38;
        v91 = swift_allocObject(v66, 72, 7);
        *(_OWORD *)(v91 + 16) = v112;
        v92 = v101;
        v93 = v104;
        sub_10005972C(v101, v104, type metadata accessor for SecureLocationsCachedPayload);
        v94 = v93;
        v95 = v100;
        v96 = String.init<A>(describing:)(v94, v100);
        *(_QWORD *)(v91 + 56) = &type metadata for String;
        *(_QWORD *)(v91 + 64) = v72;
        *(_QWORD *)(v91 + 32) = v96;
        *(_QWORD *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29, 2, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100006204(&qword_101108428, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_100E3E534);
        v98 = sub_100018F08(v118);
        sub_10005972C(v92, (uint64_t)v98, type metadata accessor for SecureLocationsCachedPayload);
        PassthroughSubject.send(_:)(v118);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v110);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        v99 = v86;
      }
      else
      {
        v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_10001BC14(v102, v103);

        (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
        v99 = v55;
      }
      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }
}

void sub_1007B184C(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  void *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  NSURL *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t inited;
  NSString *v78;
  NSString *v79;
  unint64_t v80;
  id v81;
  Class v82;
  uint64_t v83;
  NSString v84;
  unsigned int v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  Class v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  __int128 v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  Class isa;
  uint64_t v119;
  char v120[48];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;

  v117 = a1;
  v114 = type metadata accessor for URLResourceValues(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v116 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v111 = type metadata accessor for UUID(0);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v115 - 8);
  v6 = __chkstk_darwin(v115);
  v108 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v112 = (char *)&v103 - v9;
  __chkstk_darwin(v8);
  v11 = (char *)&v103 - v10;
  v12 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v103 - v18;
  static SystemInfo.lockState.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  v20 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v121, v12, v20);
  dispatch thunk of RawRepresentable.rawValue.getter(&v119, v12, v20);
  v21 = v121;
  v22 = v119;
  v23 = *(void (**)(char *, uint64_t))(v13 + 8);
  v23(v16, v12);
  v24 = ((uint64_t (*)(char *, uint64_t))v23)(v19, v12);
  if (v21 == v22)
  {
    v25 = static os_log_type_t.default.getter(v24);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v26 = sub_10008806C();
    v27 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v26, 0, 0);
    *v28 = 0;
    swift_willThrow(v27);
  }
  else
  {
    v29 = objc_autoreleasePoolPush();
    v30 = a2[3];
    v123 = a2[2];
    v124 = v30;
    v125 = a2[4];
    v126 = *((_QWORD *)a2 + 10);
    v31 = a2[1];
    v121 = *a2;
    v122 = v31;
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    v34 = sub_1007BD74C();
    v35 = isa;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v121, &type metadata for SecureLocationLabel, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v29);
    }
    else
    {
      v38 = v36;
      v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v29);
      v40 = sub_100C54388(v38, v39, 0);
      v42 = v41;
      v106 = v38;
      v107 = v39;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v40, v42);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010EA3B8 != -1)
        swift_once(&qword_1010EA3B8, sub_100BE94A8);
      v43 = v115;
      v44 = sub_10001A9E8(v115, (uint64_t)qword_1011B7EB0);
      v105 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v105(v11, v44, v43);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v11, 0);
      v45 = *(void (**)(char *, uint64_t))(v5 + 8);
      v45(v11, v43);
      v46 = *(_QWORD *)a2;
      v47 = *((_QWORD *)a2 + 1);
      v104 = a2;
      v48 = String.utf8Data.getter(v46, v47);
      v50 = v49;
      *(_QWORD *)&v121 = v48;
      *((_QWORD *)&v121 + 1) = v49;
      v51 = sub_100035530();
      v52 = v109;
      DataProtocol.stableUUID.getter(&type metadata for Data, v51);
      sub_10001BC14(v48, v50);
      v105(v11, v44, v43);
      v53 = objc_autoreleasePoolPush();
      v54 = UUID.uuidString.getter(v53);
      v55 = v108;
      URL.appendingPathComponent(_:)(v54, v56);
      swift_bridgeObjectRelease();
      v57 = v112;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v45(v55, v43);
      objc_autoreleasePoolPop(v53);
      v58 = v11;
      v59 = v43;
      v60 = v57;
      v108 = (char *)v45;
      v45(v58, v59);
      v61 = (*(uint64_t (**)(char *, _QWORD))(v110 + 8))(v52, v111);
      URLResourceValues.init()(v61);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v62 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v63);
      v65 = v64;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v64, 1);

      objc_autoreleasePoolPop(v62);
      v67 = static os_log_type_t.default.getter(v66);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v68 = qword_1011B7D38;
      v69 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v70 = swift_allocObject(v69, 72, 7);
      v111 = xmmword_100E22B00;
      *(_OWORD *)(v70 + 16) = xmmword_100E22B00;
      v71 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v72 = dispatch thunk of CustomStringConvertible.description.getter(v59, v71);
      v74 = v73;
      *(_QWORD *)(v70 + 56) = &type metadata for String;
      v75 = sub_10001AA00();
      *(_QWORD *)(v70 + 64) = v75;
      *(_QWORD *)(v70 + 32) = v72;
      *(_QWORD *)(v70 + 40) = v74;
      os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v68, "Writing to file: %@", 19, 2, v70);
      swift_bridgeObjectRelease();
      v76 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v76, v120);
      *(_OWORD *)(inited + 16) = v111;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v78 = NSFileProtectionKey;
      v79 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v80 = sub_1006B9234(inited);
      v81 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v80);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v82 = Dictionary._bridgeToObjectiveC()().super.isa;
      v83 = swift_bridgeObjectRelease();
      URL.path.getter(v83);
      v84 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v121 = 0;
      v85 = objc_msgSend(v81, "setAttributes:ofItemAtPath:error:", v82, v84, &v121);

      v86 = v121;
      if (v85)
      {
        v87 = (id)v121;
        v88 = URL.setResourceValues(_:)(v116);
        v89 = isa;
        v92 = static os_log_type_t.default.getter(v88);
        v93 = qword_1011B7D38;
        v94 = swift_allocObject(v69, 72, 7);
        *(_OWORD *)(v94 + 16) = v111;
        v95 = v104;
        v96 = *((_OWORD *)v104 + 3);
        v123 = *((_OWORD *)v104 + 2);
        v124 = v96;
        v125 = *((_OWORD *)v104 + 4);
        v126 = v104[10];
        v97 = *((_OWORD *)v104 + 1);
        v121 = *(_OWORD *)v104;
        v122 = v97;
        sub_1007BD790(v104);
        v98 = String.init<A>(describing:)(&v121, &type metadata for SecureLocationLabel);
        *(_QWORD *)(v94 + 56) = &type metadata for String;
        *(_QWORD *)(v94 + 64) = v75;
        *(_QWORD *)(v94 + 32) = v98;
        *(_QWORD *)(v94 + 40) = v99;
        os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, v93, "Publishing record changed: %@", 29, 2, v94);
        swift_bridgeObjectRelease();
        *((_QWORD *)&v122 + 1) = &type metadata for SecureLocationLabel;
        *(_QWORD *)&v123 = sub_1007BD7E4();
        v100 = swift_allocObject(&unk_101092938, 104, 7);
        *(_QWORD *)&v121 = v100;
        v101 = *((_OWORD *)v95 + 3);
        *(_OWORD *)(v100 + 48) = *((_OWORD *)v95 + 2);
        *(_OWORD *)(v100 + 64) = v101;
        *(_OWORD *)(v100 + 80) = *((_OWORD *)v95 + 4);
        *(_QWORD *)(v100 + 96) = v95[10];
        v102 = *((_OWORD *)v95 + 1);
        *(_OWORD *)(v100 + 16) = *(_OWORD *)v95;
        *(_OWORD *)(v100 + 32) = v102;
        sub_1007BD790(v95);
        PassthroughSubject.send(_:)(&v121);
        sub_10001BC14(v106, v107);

        (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v114);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v121);
      }
      else
      {
        v90 = (id)v121;
        _convertNSErrorToError(_:)(v86);

        swift_willThrow(v91);
        sub_10001BC14(v106, v107);

        (*(void (**)(char *, uint64_t))(v113 + 8))(v116, v114);
      }
      ((void (*)(char *, uint64_t))v108)(v60, v115);
    }
  }
}

void sub_1007B2298(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  Class v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  NSURL *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t inited;
  NSString *v84;
  NSString *v85;
  unint64_t v86;
  id v87;
  Class v88;
  uint64_t v89;
  NSString v90;
  uint64_t v91;
  id v92;
  char *v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  unint64_t v122;
  void (*v123)(char *, uint64_t);
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  __int128 v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  Class isa;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;

  v133 = a1;
  v3 = type metadata accessor for URLResourceValues(0);
  v128 = *(_QWORD *)(v3 - 8);
  v129 = v3;
  __chkstk_darwin(v3);
  v132 = (char *)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v130 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)&v131 = v5;
  __chkstk_darwin(v5);
  v126 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v134 - 8);
  v8 = __chkstk_darwin(v134);
  v125 = (char *)&v119 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v127 = (char *)&v119 - v11;
  __chkstk_darwin(v10);
  v124 = (char *)&v119 - v12;
  v13 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v119 - v19;
  static SystemInfo.lockState.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  v21 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v138, v13, v21);
  dispatch thunk of RawRepresentable.rawValue.getter(&v136, v13, v21);
  v22 = v138;
  v23 = v136;
  v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v17, v13);
  v25 = ((uint64_t (*)(char *, uint64_t))v24)(v20, v13);
  if (v22 == v23)
  {
    v26 = static os_log_type_t.default.getter(v25);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v27 = sub_10008806C();
    v28 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v27, 0, 0);
    *v29 = 0;
    swift_willThrow(v28);
  }
  else
  {
    v30 = objc_autoreleasePoolPush();
    v31 = a2[10];
    v32 = a2[11];
    v33 = a2[8];
    v147 = a2[9];
    v148 = v31;
    v34 = a2[12];
    v149 = v32;
    v150 = v34;
    v35 = a2[6];
    v36 = a2[7];
    v37 = a2[4];
    v143 = a2[5];
    v144 = v35;
    v145 = v36;
    v146 = v33;
    v38 = a2[3];
    v140 = a2[2];
    v141 = v38;
    v142 = v37;
    v39 = a2[1];
    v138 = *a2;
    v139 = v39;
    v40 = type metadata accessor for PropertyListEncoder(0);
    v41 = swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    PropertyListEncoder.init()(v41);
    v42 = sub_1004F10EC();
    v43 = isa;
    v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v138, &type metadata for SecureLocationsConfig, v42);
    if (v43)
    {
      swift_release();
      objc_autoreleasePoolPop(v30);
    }
    else
    {
      v46 = v44;
      v47 = v45;
      swift_release();
      objc_autoreleasePoolPop(v30);
      v48 = sub_100C54388(v46, v47, 0);
      v50 = v49;
      v121 = v46;
      v122 = v47;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v48, v50);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9C40 != -1)
        swift_once(&qword_1010E9C40, sub_1004EF95C);
      v51 = v134;
      v52 = sub_10001A9E8(v134, (uint64_t)qword_1011B6F90);
      v53 = v124;
      v120 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v120(v124, v52, v51);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v53, 0);
      v54 = v51;
      v55 = *(void (**)(char *, uint64_t))(v7 + 8);
      v55(v53, v51);
      if (qword_1010E9C48 != -1)
        swift_once(&qword_1010E9C48, sub_1004EFA2C);
      v56 = v131;
      v57 = sub_10001A9E8(v131, (uint64_t)qword_1011B6FA8);
      v58 = v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v126, v57, v56);
      v120(v53, v52, v54);
      v120 = (void (*)(char *, uint64_t, uint64_t))objc_autoreleasePoolPush();
      v59 = UUID.uuidString.getter(v120);
      v60 = v53;
      v61 = v125;
      URL.appendingPathComponent(_:)(v59, v62);
      swift_bridgeObjectRelease();
      v63 = v127;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v64 = v134;
      v55(v61, v134);
      objc_autoreleasePoolPop(v120);
      v65 = v64;
      v123 = v55;
      v55(v60, v64);
      v66 = (*(uint64_t (**)(char *, _QWORD))(v130 + 8))(v58, v131);
      URLResourceValues.init()(v66);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v67 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v68);
      v70 = v69;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v69, 1);

      objc_autoreleasePoolPop(v67);
      v72 = static os_log_type_t.default.getter(v71);
      v73 = v65;
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v74 = qword_1011B7D38;
      v126 = (char *)sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v75 = swift_allocObject(v126, 72, 7);
      v131 = xmmword_100E22B00;
      *(_OWORD *)(v75 + 16) = xmmword_100E22B00;
      v76 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v77 = dispatch thunk of CustomStringConvertible.description.getter(v73, v76);
      v79 = v78;
      *(_QWORD *)(v75 + 56) = &type metadata for String;
      v130 = sub_10001AA00();
      *(_QWORD *)(v75 + 64) = v130;
      *(_QWORD *)(v75 + 32) = v77;
      *(_QWORD *)(v75 + 40) = v79;
      v80 = v72;
      v81 = v63;
      os_log(_:dso:log:_:_:)(v80, &_mh_execute_header, v74, "Writing to file: %@", 19, 2, v75);
      swift_bridgeObjectRelease();
      v82 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v82, &v137);
      *(_OWORD *)(inited + 16) = v131;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v84 = NSFileProtectionKey;
      v85 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v86 = sub_1006B9234(inited);
      v87 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v86);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v88 = Dictionary._bridgeToObjectiveC()().super.isa;
      v89 = swift_bridgeObjectRelease();
      URL.path.getter(v89);
      v90 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v138 = 0;
      LODWORD(v75) = objc_msgSend(v87, "setAttributes:ofItemAtPath:error:", v88, v90, &v138);

      v91 = v138;
      if ((_DWORD)v75)
      {
        v92 = (id)v138;
        v93 = v132;
        v94 = URL.setResourceValues(_:)(v132);
        v97 = static os_log_type_t.default.getter(v94);
        v98 = qword_1011B7D38;
        v99 = swift_allocObject(v126, 72, 7);
        *(_OWORD *)(v99 + 16) = v131;
        v100 = a2[10];
        v101 = a2[11];
        v102 = a2[8];
        v147 = a2[9];
        v148 = v100;
        v103 = a2[12];
        v149 = v101;
        v150 = v103;
        v104 = a2[6];
        v105 = a2[7];
        v106 = a2[4];
        v143 = a2[5];
        v144 = v104;
        v145 = v105;
        v146 = v102;
        v107 = a2[3];
        v140 = a2[2];
        v141 = v107;
        v142 = v106;
        v108 = a2[1];
        v138 = *a2;
        v139 = v108;
        sub_1004F1D0C(a2);
        v109 = String.init<A>(describing:)(&v138, &type metadata for SecureLocationsConfig);
        v110 = v130;
        *(_QWORD *)(v99 + 56) = &type metadata for String;
        *(_QWORD *)(v99 + 64) = v110;
        *(_QWORD *)(v99 + 32) = v109;
        *(_QWORD *)(v99 + 40) = v111;
        os_log(_:dso:log:_:_:)(v97, &_mh_execute_header, v98, "Publishing record changed: %@", 29, 2, v99);
        swift_bridgeObjectRelease();
        *((_QWORD *)&v139 + 1) = &type metadata for SecureLocationsConfig;
        *(_QWORD *)&v140 = sub_1007BD6CC();
        v112 = (_OWORD *)swift_allocObject(&unk_101092910, 224, 7);
        *(_QWORD *)&v138 = v112;
        v113 = a2[11];
        v112[11] = a2[10];
        v112[12] = v113;
        v112[13] = a2[12];
        v114 = a2[7];
        v112[7] = a2[6];
        v112[8] = v114;
        v115 = a2[9];
        v112[9] = a2[8];
        v112[10] = v115;
        v116 = a2[3];
        v112[3] = a2[2];
        v112[4] = v116;
        v117 = a2[5];
        v112[5] = a2[4];
        v112[6] = v117;
        v118 = a2[1];
        v112[1] = *a2;
        v112[2] = v118;
        sub_1004F1D0C(a2);
        PassthroughSubject.send(_:)(&v138);
        sub_10001BC14(v121, v122);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v93, v129);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v138);
      }
      else
      {
        v95 = (id)v138;
        _convertNSErrorToError(_:)(v91);

        swift_willThrow(v96);
        sub_10001BC14(v121, v122);

        (*(void (**)(char *, uint64_t))(v128 + 8))(v132, v129);
      }
      v123(v81, v134);
    }
  }
}

void sub_1007B2C98(uint64_t a1, _QWORD *a2)
{
  sub_1007B2D24(a1, a2, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_10110D990, (uint64_t)&unk_100E55E20, &qword_1010EA060, (uint64_t)qword_1011B7970, &qword_101108310, (uint64_t)&unk_100E55E70, (uint64_t)sub_100967AE8);
}

void sub_1007B2D24(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, unint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  id v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Class v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void **v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  NSURL *v74;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t inited;
  NSString *v88;
  NSString *v89;
  unint64_t v90;
  id v91;
  uint64_t v92;
  Class v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSString v97;
  id v98;
  id v99;
  char *v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t (*v108)(uint64_t);
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t (*v115)(uint64_t);
  void *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t *v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  Class isa;
  void *v137;
  id v138[5];
  char v139[24];

  v119 = a8;
  v122 = a7;
  v121 = a6;
  v135 = a5;
  *(_QWORD *)&v134 = a4;
  v132 = a1;
  v12 = a3(0);
  __chkstk_darwin(v12);
  v118 = (uint64_t)&v114 - v13;
  v128 = type metadata accessor for URLResourceValues(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v131 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for UUID(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v125 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for URL(0);
  v120 = *(_QWORD **)(v133 - 8);
  v16 = __chkstk_darwin(v133);
  v124 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v126 = (char *)&v114 - v19;
  __chkstk_darwin(v18);
  v123 = (char *)&v114 - v20;
  v21 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v114 - v27;
  static SystemInfo.lockState.getter(v26);
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v25, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v21);
  v29 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v138, v21, v29);
  dispatch thunk of RawRepresentable.rawValue.getter(&v137, v21, v29);
  v31 = v137;
  v30 = v138[0];
  v32 = *(void (**)(char *, uint64_t))(v22 + 8);
  v32(v25, v21);
  v33 = ((uint64_t (*)(char *, uint64_t))v32)(v28, v21);
  if (v30 == v31)
  {
    v34 = static os_log_type_t.default.getter(v33);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v35 = sub_10008806C();
    v36 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v35, 0, 0);
    *v37 = 0;
    swift_willThrow(v36);
  }
  else
  {
    v38 = objc_autoreleasePoolPush();
    v39 = type metadata accessor for PropertyListEncoder(0);
    v40 = swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
    v41 = PropertyListEncoder.init()(v40);
    v42 = sub_100006204((unint64_t *)v134, a3, v135);
    v43 = isa;
    v44 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v12, v42);
    if (v43)
    {
      swift_release(v41);
      objc_autoreleasePoolPop(v38);
    }
    else
    {
      v46 = v44;
      v47 = v45;
      swift_release(v41);
      objc_autoreleasePoolPop(v38);
      v48 = sub_100C54388(v46, v47, 0);
      v50 = v49;
      v135 = v46;
      v117 = v47;
      v115 = a3;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v48, v50);
      *(_QWORD *)&v134 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      v116 = objc_autoreleasePoolPush();
      v51 = a2;
      if (*v121 != -1)
        swift_once(v121, a10);
      v52 = v133;
      v122 = sub_10001A9E8(v133, v122);
      v53 = UUID.uuidString.getter(v122);
      v55 = v54;
      v56 = v123;
      URL.appendingPathComponent(_:)(v53, v54);
      swift_bridgeObjectRelease(v55);
      objc_autoreleasePoolPop(v116);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v56, 0);
      v57 = (void (*)(char *, uint64_t))v120[1];
      v57(v56, v52);
      v120 = (_QWORD *)v12;
      v58 = *(int *)(v12 + 20);
      v121 = v51;
      v59 = (char *)v51 + v58;
      v60 = v125;
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v125, v59, v130);
      v61 = objc_autoreleasePoolPush();
      v62 = UUID.uuidString.getter(v61);
      v64 = v63;
      URL.appendingPathComponent(_:)(v62, v63);
      swift_bridgeObjectRelease(v64);
      objc_autoreleasePoolPop(v61);
      v65 = objc_autoreleasePoolPush();
      v66 = UUID.uuidString.getter(v65);
      v68 = v67;
      v69 = v124;
      URL.appendingPathComponent(_:)(v66, v67);
      swift_bridgeObjectRelease(v68);
      v70 = v126;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v71 = v133;
      v57(v69, v133);
      objc_autoreleasePoolPop(v65);
      v124 = (char *)v57;
      v57(v56, v71);
      v72 = (*(uint64_t (**)(char *, uint64_t))(v129 + 8))(v60, v130);
      URLResourceValues.init()(v72);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v73 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v74);
      v76 = v75;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v75, 1);

      objc_autoreleasePoolPop(v73);
      v78 = static os_log_type_t.default.getter(v77);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v79 = qword_1011B7D38;
      v130 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v80 = swift_allocObject(v130, 72, 7);
      v134 = xmmword_100E22B00;
      *(_OWORD *)(v80 + 16) = xmmword_100E22B00;
      v81 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v71, v81);
      v84 = v83;
      *(_QWORD *)(v80 + 56) = &type metadata for String;
      v85 = sub_10001AA00();
      *(_QWORD *)(v80 + 64) = v85;
      *(_QWORD *)(v80 + 32) = v82;
      *(_QWORD *)(v80 + 40) = v84;
      os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v79, "Writing to file: %@", 19, 2, v80);
      swift_bridgeObjectRelease(v80);
      v86 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v86, v139);
      *(_OWORD *)(inited + 16) = v134;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v88 = NSFileProtectionKey;
      v89 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v90 = sub_1006B9234(inited);
      v91 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      v92 = sub_10047B07C(v90);
      swift_bridgeObjectRelease(v90);
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v93 = Dictionary._bridgeToObjectiveC()().super.isa;
      v94 = swift_bridgeObjectRelease(v92);
      URL.path.getter(v94);
      v96 = v95;
      v97 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v96);
      v138[0] = 0;
      LODWORD(v84) = objc_msgSend(v91, "setAttributes:ofItemAtPath:error:", v93, v97, v138);

      v98 = v138[0];
      if ((_DWORD)v84)
      {
        v99 = v138[0];
        v100 = v131;
        v101 = URL.setResourceValues(_:)(v131);
        v129 = a9;
        v104 = static os_log_type_t.default.getter(v101);
        v125 = (char *)qword_1011B7D38;
        v105 = swift_allocObject(v130, 72, 7);
        *(_OWORD *)(v105 + 16) = v134;
        v106 = v121;
        v107 = v118;
        v108 = v115;
        sub_10005972C((uint64_t)v121, v118, v115);
        v109 = v107;
        v110 = v120;
        v111 = String.init<A>(describing:)(v109, v120);
        *(_QWORD *)(v105 + 56) = &type metadata for String;
        *(_QWORD *)(v105 + 64) = v85;
        *(_QWORD *)(v105 + 32) = v111;
        *(_QWORD *)(v105 + 40) = v112;
        os_log(_:dso:log:_:_:)(v104, &_mh_execute_header, v125, "Publishing record changed: %@", 29, 2, v105);
        swift_bridgeObjectRelease(v105);
        v138[3] = v110;
        v138[4] = (id)sub_100006204(v119, v108, v129);
        v113 = sub_100018F08(v138);
        sub_10005972C((uint64_t)v106, (uint64_t)v113, v108);
        PassthroughSubject.send(_:)(v138);
        sub_10001BC14(v135, v117);

        (*(void (**)(char *, uint64_t))(v127 + 8))(v100, v128);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
      }
      else
      {
        v102 = v138[0];
        _convertNSErrorToError(_:)(v98);

        swift_willThrow(v103);
        sub_10001BC14(v135, v117);

        (*(void (**)(char *, uint64_t))(v127 + 8))(v131, v128);
      }
      ((void (*)(char *, uint64_t))v124)(v70, v133);
    }
  }
}

void sub_1007B37B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void (*v46)(char *, uint64_t, uint64_t);
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  NSURL *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t inited;
  NSString *v75;
  NSString *v76;
  unint64_t v77;
  id v78;
  Class v79;
  uint64_t v80;
  NSString v81;
  id v82;
  id v83;
  char *v84;
  uint64_t v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  Class isa;
  void *v117;
  id v118[5];
  char v119[48];

  v115 = a1;
  v3 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  __chkstk_darwin(v3);
  v104 = (uint64_t)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URLResourceValues(0);
  v110 = *(_QWORD *)(v5 - 8);
  v111 = v5;
  __chkstk_darwin(v5);
  v113 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for UUID(0);
  *(_QWORD *)&v112 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108);
  v107 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for URL(0);
  v105 = *(_QWORD **)(v114 - 8);
  v8 = __chkstk_darwin(v114);
  v106 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v109 = (char *)&v100 - v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v100 - v12;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v100 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v118, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v117, v14, v22);
  v24 = v117;
  v23 = v118[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    v34 = sub_100006204(&qword_1011082F8, type metadata accessor for SecureLocationsCachedSharingKey, (uint64_t)&unk_100E52B98);
    v35 = isa;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v38 = v36;
      v39 = v37;
      swift_release();
      objc_autoreleasePoolPop(v31);
      v40 = sub_100C54388(v38, v39, 0);
      v42 = v41;
      v102 = v38;
      v103 = v39;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v40, v42);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      if (qword_1010E9FE0 != -1)
        swift_once(&qword_1010E9FE0, sub_1008AC5B8);
      v43 = v114;
      v44 = sub_10001A9E8(v114, (uint64_t)qword_1011B7890);
      v45 = v105;
      v46 = (void (*)(char *, uint64_t, uint64_t))v105[2];
      v46(v13, v44, v43);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0);
      v47 = (void (*)(char *, uint64_t))v45[1];
      v47(v13, v43);
      v100 = (void *)v3;
      v48 = *(int *)(v3 + 20);
      v101 = a2;
      v49 = a2 + v48;
      v50 = v107;
      v51 = v108;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v107, v49, v108);
      v46(v13, v44, v43);
      v105 = objc_autoreleasePoolPush();
      v52 = UUID.uuidString.getter(v105);
      v53 = v106;
      URL.appendingPathComponent(_:)(v52, v54);
      swift_bridgeObjectRelease();
      v55 = v109;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v47(v53, v43);
      objc_autoreleasePoolPop(v105);
      v56 = v13;
      v57 = v55;
      v106 = (char *)v47;
      v47(v56, v43);
      v58 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v50, v51);
      URLResourceValues.init()(v58);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v59 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v60);
      v62 = v61;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v61, 1);

      objc_autoreleasePoolPop(v59);
      v64 = static os_log_type_t.default.getter(v63);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v65 = qword_1011B7D38;
      v66 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v67 = swift_allocObject(v66, 72, 7);
      v112 = xmmword_100E22B00;
      *(_OWORD *)(v67 + 16) = xmmword_100E22B00;
      v68 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v43, v68);
      v71 = v70;
      *(_QWORD *)(v67 + 56) = &type metadata for String;
      v72 = sub_10001AA00();
      *(_QWORD *)(v67 + 64) = v72;
      *(_QWORD *)(v67 + 32) = v69;
      *(_QWORD *)(v67 + 40) = v71;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v65, "Writing to file: %@", 19, 2, v67);
      swift_bridgeObjectRelease();
      v73 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v73, v119);
      *(_OWORD *)(inited + 16) = v112;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v75 = NSFileProtectionKey;
      v76 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v77 = sub_1006B9234(inited);
      v78 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v77);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v79 = Dictionary._bridgeToObjectiveC()().super.isa;
      v80 = swift_bridgeObjectRelease();
      URL.path.getter(v80);
      v81 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v118[0] = 0;
      LOBYTE(v71) = objc_msgSend(v78, "setAttributes:ofItemAtPath:error:", v79, v81, v118);

      v82 = v118[0];
      if ((v71 & 1) != 0)
      {
        v83 = v118[0];
        v84 = v113;
        v86 = v57;
        v85 = URL.setResourceValues(_:)(v113);
        v89 = static os_log_type_t.default.getter(v85);
        v90 = qword_1011B7D38;
        v91 = swift_allocObject(v66, 72, 7);
        *(_OWORD *)(v91 + 16) = v112;
        v92 = v101;
        v93 = v104;
        sub_10005972C(v101, v104, type metadata accessor for SecureLocationsCachedSharingKey);
        v94 = v93;
        v95 = v100;
        v96 = String.init<A>(describing:)(v94, v100);
        *(_QWORD *)(v91 + 56) = &type metadata for String;
        *(_QWORD *)(v91 + 64) = v72;
        *(_QWORD *)(v91 + 32) = v96;
        *(_QWORD *)(v91 + 40) = v97;
        os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "Publishing record changed: %@", 29, 2, v91);
        swift_bridgeObjectRelease();
        v118[3] = v95;
        v118[4] = (id)sub_100006204((unint64_t *)&unk_101108300, type metadata accessor for SecureLocationsCachedSharingKey, (uint64_t)&unk_100E52BE8);
        v98 = sub_100018F08(v118);
        sub_10005972C(v92, (uint64_t)v98, type metadata accessor for SecureLocationsCachedSharingKey);
        PassthroughSubject.send(_:)(v118);

        sub_10001BC14(v102, v103);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v111);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        v99 = v86;
      }
      else
      {
        v87 = v118[0];
        _convertNSErrorToError(_:)(v82);

        swift_willThrow(v88);
        sub_10001BC14(v102, v103);
        (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v111);
        v99 = v57;
      }
      ((void (*)(char *, uint64_t))v106)(v99, v114);
    }
  }
}

void sub_1007B41A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Class v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void **v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void (*v49)(char *, uint64_t, _QWORD);
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  NSURL *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t inited;
  NSString *v80;
  NSString *v81;
  unint64_t v82;
  id v83;
  Class v84;
  uint64_t v85;
  NSString v86;
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  Class isa;
  void *v122;
  id v123[5];
  char v124[48];

  v119 = a1;
  v3 = type metadata accessor for LocationProvider(0);
  __chkstk_darwin(v3);
  v109 = (uint64_t)&v103 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for URLResourceValues(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v118 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v117 = v6;
  __chkstk_darwin(v6);
  v112 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v120 - 8);
  v9 = __chkstk_darwin(v120);
  v111 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v113 = (char *)&v103 - v12;
  __chkstk_darwin(v11);
  v110 = (char *)&v103 - v13;
  v14 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v103 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v103 - v20;
  static SystemInfo.lockState.getter(v19);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  v22 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v123, v14, v22);
  dispatch thunk of RawRepresentable.rawValue.getter(&v122, v14, v22);
  v24 = v122;
  v23 = v123[0];
  v25 = *(void (**)(char *, uint64_t))(v15 + 8);
  v25(v18, v14);
  v26 = ((uint64_t (*)(char *, uint64_t))v25)(v21, v14);
  if (v23 == v24)
  {
    v27 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7D38, "store call failed because in device is in beforeFirstUnlock state", 65, 2, _swiftEmptyArrayStorage);
    v28 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v28, 0, 0);
    *v30 = 0;
    swift_willThrow(v29);
  }
  else
  {
    v31 = objc_autoreleasePoolPush();
    v32 = type metadata accessor for PropertyListEncoder(0);
    v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
    PropertyListEncoder.init()(v33);
    v34 = sub_100006204(&qword_1011082B8, type metadata accessor for LocationProvider, (uint64_t)&protocol conformance descriptor for LocationProvider);
    v35 = isa;
    v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a2, v3, v34);
    if (v35)
    {
      swift_release();
      objc_autoreleasePoolPop(v31);
    }
    else
    {
      v38 = v36;
      v39 = v37;
      v40 = a2;
      swift_release();
      objc_autoreleasePoolPop(v31);
      v41 = sub_100C54388(v38, v39, 0);
      v43 = v42;
      v107 = v38;
      v108 = v39;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14((uint64_t)v41, v43);
      v106 = sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
      v103 = (void *)v3;
      v104 = objc_autoreleasePoolPush();
      if (qword_1010EA600 != -1)
        swift_once(&qword_1010EA600, sub_100D83308);
      v44 = v120;
      v105 = sub_10001A9E8(v120, (uint64_t)qword_1011B84D0);
      v45 = UUID.uuidString.getter(v105);
      v46 = v110;
      URL.appendingPathComponent(_:)(v45, v47);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v104);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v46, 0);
      v48 = *(void (**)(char *, uint64_t))(v8 + 8);
      v48(v46, v44);
      v49 = *(void (**)(char *, uint64_t, _QWORD))(v116 + 16);
      v50 = v112;
      v106 = v40;
      v49(v112, v40, v117);
      v51 = objc_autoreleasePoolPush();
      v52 = UUID.uuidString.getter(v51);
      URL.appendingPathComponent(_:)(v52, v53);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v51);
      v54 = objc_autoreleasePoolPush();
      v55 = UUID.uuidString.getter(v54);
      v56 = v111;
      URL.appendingPathComponent(_:)(v55, v57);
      swift_bridgeObjectRelease();
      v58 = v113;
      URL.appendingPathExtension(_:)(0x64726F636572, 0xE600000000000000);
      v59 = v120;
      v48(v56, v120);
      objc_autoreleasePoolPop(v54);
      v60 = v46;
      v61 = v59;
      v111 = (char *)v48;
      v48(v60, v59);
      v62 = (*(uint64_t (**)(char *, _QWORD))(v116 + 8))(v50, v117);
      URLResourceValues.init()(v62);
      URLResourceValues.isExcludedFromBackup.setter(1);
      v63 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v64);
      v66 = v65;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v65, 1);

      objc_autoreleasePoolPop(v63);
      v68 = static os_log_type_t.default.getter(v67);
      if (qword_1010EA258 != -1)
        swift_once(&qword_1010EA258, sub_100B5D9CC);
      v69 = qword_1011B7D38;
      v70 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v71 = swift_allocObject(v70, 72, 7);
      v117 = xmmword_100E22B00;
      *(_OWORD *)(v71 + 16) = xmmword_100E22B00;
      v72 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v73 = dispatch thunk of CustomStringConvertible.description.getter(v61, v72);
      v74 = v58;
      v76 = v75;
      *(_QWORD *)(v71 + 56) = &type metadata for String;
      v77 = sub_10001AA00();
      *(_QWORD *)(v71 + 64) = v77;
      *(_QWORD *)(v71 + 32) = v73;
      *(_QWORD *)(v71 + 40) = v76;
      os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v69, "Writing to file: %@", 19, 2, v71);
      swift_bridgeObjectRelease();
      v78 = sub_10001A9A8(&qword_101102060);
      inited = swift_initStackObject(v78, v124);
      *(_OWORD *)(inited + 16) = v117;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v80 = NSFileProtectionKey;
      v81 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v82 = sub_1006B9234(inited);
      v83 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10047B07C(v82);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
      v84 = Dictionary._bridgeToObjectiveC()().super.isa;
      v85 = swift_bridgeObjectRelease();
      URL.path.getter(v85);
      v86 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v123[0] = 0;
      LOBYTE(v76) = objc_msgSend(v83, "setAttributes:ofItemAtPath:error:", v84, v86, v123);

      v87 = v123[0];
      if ((v76 & 1) != 0)
      {
        v88 = v123[0];
        v89 = v118;
        v90 = URL.setResourceValues(_:)(v118);
        v93 = static os_log_type_t.default.getter(v90);
        v94 = qword_1011B7D38;
        v95 = swift_allocObject(v70, 72, 7);
        *(_OWORD *)(v95 + 16) = v117;
        v96 = v106;
        v97 = v109;
        sub_10005972C(v106, v109, type metadata accessor for LocationProvider);
        v98 = v97;
        v99 = v103;
        v100 = String.init<A>(describing:)(v98, v103);
        *(_QWORD *)(v95 + 56) = &type metadata for String;
        *(_QWORD *)(v95 + 64) = v77;
        *(_QWORD *)(v95 + 32) = v100;
        *(_QWORD *)(v95 + 40) = v101;
        os_log(_:dso:log:_:_:)(v93, &_mh_execute_header, v94, "Publishing record changed: %@", 29, 2, v95);
        swift_bridgeObjectRelease();
        v123[3] = v99;
        v123[4] = (id)sub_100006204((unint64_t *)&unk_1011082C0, type metadata accessor for LocationProvider, (uint64_t)&unk_100E70EC0);
        v102 = sub_100018F08(v123);
        sub_10005972C(v96, (uint64_t)v102, type metadata accessor for LocationProvider);
        PassthroughSubject.send(_:)(v123);

        sub_10001BC14(v107, v108);
        (*(void (**)(char *, uint64_t))(v114 + 8))(v89, v115);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      }
      else
      {
        v91 = v123[0];
        _convertNSErrorToError(_:)(v87);

        swift_willThrow(v92);
        sub_10001BC14(v107, v108);
        (*(void (**)(char *, uint64_t))(v114 + 8))(v118, v115);
      }
      ((void (*)(char *, uint64_t))v111)(v74, v120);
    }
  }
}

uint64_t sub_1007B4BFC(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t (*v24)(_QWORD);
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(_BYTE *, uint64_t, uint64_t);
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  char v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  NSString v108;
  _BYTE *v109;
  uint64_t v110;
  _BYTE *v111;
  void (*v112)(_BYTE *, uint64_t);
  char v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  NSString v121;
  char v122;
  char v123;
  uint64_t v124;
  int v125;
  int v126;
  _BYTE v128[4];
  int v129;
  _BYTE *v130;
  _BYTE *v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  id v139;
  uint64_t v140;
  id *v141;
  uint64_t ObjectType;
  __int128 v143;
  __int128 v144;
  void *v145;

  v5 = type metadata accessor for Date(0);
  v134 = *(_QWORD *)(v5 - 8);
  v135 = v5;
  __chkstk_darwin(v5);
  v138 = &v128[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v136 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136);
  v130 = &v128[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v137 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v137);
  v10 = &v128[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v133 = &v128[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = __chkstk_darwin(v12);
  v131 = &v128[-v15];
  __chkstk_darwin(v14);
  v17 = &v128[-v16];
  v18 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v18);
  v20 = &v128[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v21);
  v23 = &v128[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10005972C(a2, (uint64_t)v23, v24);
  v141 = a1;
  v139 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v139);
  sub_10005972C(v2 + v21[6], (uint64_t)v20, type metadata accessor for StableIdentifier);
  sub_100C72B64((uint64_t)v20, (uint64_t)&v23[v21[6]]);
  LOBYTE(a1) = v25;
  sub_1000126B0((uint64_t)v20, type metadata accessor for StableIdentifier);
  if ((a1 & 1) == 0)
  {
    sub_100C6ED38();
    *((_QWORD *)&v144 + 1) = &type metadata for String;
    v145 = &protocol witness table for String;
    *(_QWORD *)&v143 = v26;
    *((_QWORD *)&v143 + 1) = v27;
    v28 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0xD000000000000010, 0x8000000100EC38B0, v28);
  }
  v29 = v21[7];
  v140 = v2;
  sub_10000F9B8(v2 + v29, (uint64_t)v17, &qword_1010ED860);
  v30 = (uint64_t)&v23[v21[7]];
  v31 = (uint64_t)&v10[*(int *)(v137 + 48)];
  sub_10000F9B8((uint64_t)v17, (uint64_t)v10, &qword_1010ED860);
  sub_10000F9B8(v30, v31, &qword_1010ED860);
  v32 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  v33 = v136;
  v34 = v32(v10, 1, v136);
  v132 = v30;
  if (v34 == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    if (v32((_BYTE *)v31, 1, v33) == 1)
    {
      sub_100004048((uint64_t)v10, &qword_1010ED860);
      v36 = v134;
      v35 = v135;
      goto LABEL_13;
    }
  }
  else
  {
    v37 = v131;
    sub_10000F9B8((uint64_t)v10, (uint64_t)v131, &qword_1010ED860);
    if (v32((_BYTE *)v31, 1, v33) != 1)
    {
      v109 = v130;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 32))(v130, v31, v33);
      v110 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v129 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v109, v33, v110);
      v137 = v7;
      v111 = v37;
      v112 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
      v112(v109, v33);
      sub_100004048((uint64_t)v17, &qword_1010ED860);
      v38 = v33;
      v112(v111, v33);
      sub_100004048((uint64_t)v10, &qword_1010ED860);
      v36 = v134;
      v35 = v135;
      if ((v129 & 1) != 0)
        goto LABEL_13;
      goto LABEL_9;
    }
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v37, v33);
  }
  v38 = v33;
  v137 = v7;
  sub_100004048((uint64_t)v10, (uint64_t *)&unk_10110EE90);
  v36 = v134;
  v35 = v135;
LABEL_9:
  v39 = v133;
  sub_10000F9B8(v132, (uint64_t)v133, &qword_1010ED860);
  v40 = v32(v39, 1, v38);
  if ((_DWORD)v40 == 1)
  {
    sub_100004048((uint64_t)v39, &qword_1010ED860);
    v143 = 0u;
    v144 = 0u;
    v145 = 0;
  }
  else
  {
    v41 = UUID.uuidString.getter(v40);
    *((_QWORD *)&v144 + 1) = &type metadata for String;
    v145 = &protocol witness table for String;
    *(_QWORD *)&v143 = v41;
    *((_QWORD *)&v143 + 1) = v42;
    (*(void (**)(_BYTE *, uint64_t))(v137 + 8))(v39, v38);
  }
  v43 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.setter(&v143, 0x65644970756F7267, 0xEF7265696669746ELL, v43);
LABEL_13:
  v44 = v140;
  v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v36 + 16);
  v46 = v138;
  v45(v138, v140 + v21[8], v35);
  v47 = &v23[v21[8]];
  v48 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v47, v35, v48);
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v46, v35);
  v50 = v139;
  v51 = ObjectType;
  if ((v49 & 1) == 0)
  {
    *((_QWORD *)&v144 + 1) = v35;
    v145 = &protocol witness table for Date;
    v52 = sub_100018F08(&v143);
    v45(v52, (uint64_t)v47, v35);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x44676E6972696170, 0xEB00000000657461, v51);
  }
  v53 = v21[9];
  v54 = *(_QWORD *)(v44 + v53);
  v55 = *(_QWORD *)(v44 + v53 + 8);
  v56 = (uint64_t *)&v23[v53];
  v57 = *v56;
  v58 = v56[1];
  sub_10001BBBC(v54, v55);
  sub_10001BBBC(v57, v58);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v54, v55);
  v60 = v59;
  sub_10001BC14(v57, v58);
  sub_10001BC14(v54, v55);
  if ((v60 & 1) == 0)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for Data;
    v145 = &protocol witness table for Data;
    *(_QWORD *)&v143 = v57;
    *((_QWORD *)&v143 + 1) = v58;
    sub_10001BBBC(v57, v58);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6553646572616873, 0xEC00000074657263, v51);
  }
  v61 = v21[12];
  v62 = *(_QWORD *)(v44 + v61);
  v63 = *(_QWORD *)(v44 + v61 + 8);
  v64 = (uint64_t *)&v23[v61];
  v65 = *v64;
  v66 = v64[1];
  sub_10001BBBC(v62, v63);
  sub_10001BBBC(v65, v66);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v62, v63);
  v68 = v67;
  sub_10001BC14(v65, v66);
  sub_10001BC14(v62, v63);
  if ((v68 & 1) == 0)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for Data;
    v145 = &protocol witness table for Data;
    *(_QWORD *)&v143 = v65;
    *((_QWORD *)&v143 + 1) = v66;
    sub_10001BBBC(v65, v66);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x4B65746176697270, 0xEA00000000007965, v51);
  }
  v69 = v21[13];
  v70 = *(_QWORD *)(v44 + v69);
  v71 = *(_QWORD *)(v44 + v69 + 8);
  v72 = (uint64_t *)&v23[v69];
  v73 = *v72;
  v74 = v72[1];
  sub_10001BBBC(v70, v71);
  sub_10001BBBC(v73, v74);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v70, v71);
  v76 = v75;
  sub_10001BC14(v73, v74);
  sub_10001BC14(v70, v71);
  if ((v76 & 1) == 0)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for Data;
    v145 = &protocol witness table for Data;
    *(_QWORD *)&v143 = v73;
    *((_QWORD *)&v143 + 1) = v74;
    sub_10001BBBC(v73, v74);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x654B63696C627570, 0xE900000000000079, ObjectType);
  }
  v77 = v21[14];
  v78 = *(_QWORD *)(v44 + v77);
  v79 = *(_QWORD *)(v44 + v77 + 8);
  v80 = &v23[v77];
  v82 = *v80;
  v81 = v80[1];
  v83 = ObjectType;
  if ((v78 != *v80 || v79 != v81)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, *v80, v80[1], 0) & 1) == 0)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for String;
    v145 = &protocol witness table for String;
    *(_QWORD *)&v143 = v82;
    *((_QWORD *)&v143 + 1) = v81;
    swift_bridgeObjectRetain(v81);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6C65646F6DLL, 0xE500000000000000, v83);
  }
  v84 = v21[15];
  v85 = *(_QWORD *)(v44 + v84);
  v86 = *(_QWORD *)(v44 + v84 + 8);
  v87 = &v23[v84];
  v89 = *v87;
  v88 = v87[1];
  if ((v85 != *v87 || v86 != v88)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, *v87, v87[1], 0) & 1) == 0)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for String;
    v145 = &protocol witness table for String;
    *(_QWORD *)&v143 = v89;
    *((_QWORD *)&v143 + 1) = v88;
    swift_bridgeObjectRetain(v88);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x65566D6574737973, 0xED00006E6F697372, v83);
  }
  v90 = v21[16];
  v91 = *(_QWORD *)(v44 + v90);
  v92 = *(_QWORD *)&v23[v90];
  if (v91 != v92)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for Int;
    v145 = &protocol witness table for Int;
    *(_QWORD *)&v143 = v92;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6449726F646E6576, 0xE800000000000000, v83);
  }
  v93 = v21[17];
  v94 = *(_QWORD *)(v44 + v93);
  v95 = *(_QWORD *)&v23[v93];
  if (v94 != v95)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for Int;
    v145 = &protocol witness table for Int;
    *(_QWORD *)&v143 = v95;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x49746375646F7270, 0xE900000000000064, v83);
  }
  v96 = v21[18];
  v97 = *(unsigned __int8 *)(v44 + v96);
  v98 = v23[v96];
  if (v97 == 3)
  {
    if ((_DWORD)v98 == 3)
      goto LABEL_42;
    goto LABEL_40;
  }
  if ((_DWORD)v98 == 3 || v97 != (_DWORD)v98)
  {
    if ((_DWORD)v98 == 3)
    {
      v145 = 0;
      v143 = 0u;
      v144 = 0u;
LABEL_41:
      CKRecordKeyValueSetting.subscript.setter(&v143, 0x65646F4D74736F6CLL, 0xEE00737574617453, v83);
      goto LABEL_42;
    }
LABEL_40:
    *((_QWORD *)&v144 + 1) = &type metadata for Int;
    v145 = &protocol witness table for Int;
    *(_QWORD *)&v143 = v98;
    goto LABEL_41;
  }
LABEL_42:
  v99 = v21[19];
  v100 = *(unsigned __int8 *)(v44 + v99);
  v101 = v23[v99];
  if (v100 != (_DWORD)v101)
  {
    *((_QWORD *)&v144 + 1) = &type metadata for Int;
    v145 = &protocol witness table for Int;
    *(_QWORD *)&v143 = v101;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x4C79726574746162, 0xEC0000006C657665, v83);
  }
  v102 = v21[10];
  v104 = *(_QWORD *)(v44 + v102);
  v103 = *(_QWORD *)(v44 + v102 + 8);
  v105 = (uint64_t *)&v23[v102];
  v107 = *v105;
  v106 = v105[1];
  if (v103 >> 60 == 15)
  {
    if (v106 >> 60 == 15)
      goto LABEL_53;
    sub_10001BD08(v104, v103);
    sub_10001BD08(v107, v106);
    sub_10001EF3C(v104, v103);
    sub_10001EF3C(v107, v106);
LABEL_52:
    *((_QWORD *)&v144 + 1) = &type metadata for Data;
    v145 = &protocol witness table for Data;
    *(_QWORD *)&v143 = v107;
    *((_QWORD *)&v143 + 1) = v106;
    sub_10001BBBC(v107, v106);
    sub_10001BBBC(v107, v106);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6553646572616873, 0xED00003274657263, v83);
    sub_10001EF3C(v107, v106);
    goto LABEL_53;
  }
  sub_10001BD08(v104, v103);
  sub_10001BD08(v107, v106);
  if (v106 >> 60 == 15)
  {
    sub_10001EF3C(v104, v103);
    sub_10001EF3C(v107, v106);
    v108 = String._bridgeToObjectiveC()();
    objc_msgSend(v50, "setObject:forKeyedSubscript:", 0, v108);

    goto LABEL_53;
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v104, v103);
  v114 = v113;
  sub_10001EF3C(v107, v106);
  sub_10001EF3C(v104, v103);
  if ((v114 & 1) == 0)
    goto LABEL_52;
LABEL_53:
  v115 = v21[11];
  v117 = *(_QWORD *)(v44 + v115);
  v116 = *(_QWORD *)(v44 + v115 + 8);
  v118 = (uint64_t *)&v23[v115];
  v120 = *v118;
  v119 = v118[1];
  if (v116 >> 60 == 15)
  {
    if (v119 >> 60 == 15)
      goto LABEL_60;
    sub_10001BD08(v117, v116);
    sub_10001BD08(v120, v119);
    sub_10001EF3C(v117, v116);
    sub_10001EF3C(v120, v119);
LABEL_59:
    *((_QWORD *)&v144 + 1) = &type metadata for Data;
    v145 = &protocol witness table for Data;
    *(_QWORD *)&v143 = v120;
    *((_QWORD *)&v143 + 1) = v119;
    sub_10001BBBC(v120, v119);
    sub_10001BBBC(v120, v119);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0xD00000000000001BLL, 0x8000000100EC3910, v83);
    sub_10001EF3C(v120, v119);
    goto LABEL_60;
  }
  sub_10001BD08(v117, v116);
  sub_10001BD08(v120, v119);
  if (v119 >> 60 == 15)
  {
    sub_10001EF3C(v117, v116);
    sub_10001EF3C(v120, v119);
    v121 = String._bridgeToObjectiveC()();
    objc_msgSend(v50, "setObject:forKeyedSubscript:", 0, v121);

    goto LABEL_60;
  }
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v117, v116);
  v123 = v122;
  sub_10001EF3C(v120, v119);
  sub_10001EF3C(v117, v116);
  if ((v123 & 1) == 0)
    goto LABEL_59;
LABEL_60:
  v124 = v21[20];
  v125 = *(unsigned __int8 *)(v44 + v124);
  v126 = v23[v124];
  if (v125 == v126)
  {
    sub_1000126B0((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
    return swift_unknownObjectRelease(v50);
  }
  else
  {
    *((_QWORD *)&v144 + 1) = &type metadata for Bool;
    v145 = &protocol witness table for Bool;
    LOBYTE(v143) = v126;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x7375655A7369, 0xE600000000000000, v83);
    swift_unknownObjectRelease(v50);
    return sub_1000126B0((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
  }
}

void sub_1007B5A08(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1007B5B44(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(_QWORD);
  char *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, uint64_t, uint64_t);
  char *v82;
  uint64_t v83;
  char v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int (*v90)(uint64_t, uint64_t, uint64_t);
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  _DWORD *v99;
  _DWORD *v100;
  BOOL v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  id v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(uint64_t, uint64_t);
  uint64_t v123;
  _DWORD *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t ObjectType;
  id v145;
  __int128 v146;
  __int128 v147;
  void *v148;

  v3 = v2;
  v139 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v139);
  v132 = (char *)&v123 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v8 = __chkstk_darwin(v7);
  v130 = (uint64_t)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v128 = (uint64_t)&v123 - v11;
  __chkstk_darwin(v10);
  v142 = (uint64_t)&v123 - v12;
  v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  v136 = *(_QWORD *)(v13 - 8);
  v137 = v13;
  __chkstk_darwin(v13);
  v124 = (_DWORD *)((char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v135 = sub_10001A9A8((uint64_t *)&unk_101108160);
  __chkstk_darwin(v135);
  v138 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_10001A9A8((uint64_t *)&unk_1010F47B0);
  v16 = __chkstk_darwin(v129);
  v127 = (uint64_t)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v141 = (uint64_t)&v123 - v18;
  v19 = type metadata accessor for Date(0);
  v134 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v133 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v25);
  v27 = (char *)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a2, (uint64_t)v27, v28);
  v145 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v145);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v3 + v25[6], v21);
  v29 = &v27[v25[6]];
  v125 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(v24, v29, v21, v125);
  v140 = v22;
  v30 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v126 = v24;
  v143 = v21;
  v131 = v30;
  v31 = ((uint64_t (*)(char *, uint64_t))v30)(v24, v21);
  if ((a1 & 1) == 0)
  {
    v32 = UUID.uuidString.getter(v31);
    *((_QWORD *)&v147 + 1) = &type metadata for String;
    v148 = &protocol witness table for String;
    *(_QWORD *)&v146 = v32;
    *((_QWORD *)&v146 + 1) = v33;
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x6564496572616873, 0xEF7265696669746ELL, ObjectType);
  }
  v34 = v25[7];
  v35 = v3 + v34;
  v36 = *(unsigned __int8 *)(v3 + v34);
  v37 = &v27[v34];
  v39 = *((_QWORD *)v37 + 1);
  v38 = *((_QWORD *)v37 + 2);
  if (v36 != *v37
    || ((v40 = *(_QWORD *)(v35 + 8), v41 = *(_QWORD *)(v35 + 16), v40 != v39) || v41 != v38)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *((_QWORD *)v37 + 1), *((_QWORD *)v37 + 2), 0) & 1) == 0)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for String;
    v148 = &protocol witness table for String;
    *(_QWORD *)&v146 = v39;
    *((_QWORD *)&v146 + 1) = v38;
    swift_bridgeObjectRetain(v38);
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x6E614872656E776FLL, 0xEB00000000656C64, ObjectType);
  }
  v42 = v25[8];
  v43 = *(_QWORD *)(v3 + v42);
  v44 = *(_QWORD *)(v3 + v42 + 8);
  v45 = &v27[v42];
  v47 = *(_QWORD *)v45;
  v46 = *((_QWORD *)v45 + 1);
  v48 = (uint64_t)v138;
  if ((v43 != *(_QWORD *)v45 || v44 != v46)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, *(_QWORD *)v45, *((_QWORD *)v45 + 1), 0) & 1) == 0)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for String;
    v148 = &protocol witness table for String;
    *(_QWORD *)&v146 = v47;
    *((_QWORD *)&v146 + 1) = v46;
    swift_bridgeObjectRetain(v46);
    CKRecordKeyValueSetting.subscript.setter(&v146, 0xD000000000000015, 0x8000000100EC2AE0, ObjectType);
  }
  v49 = v25[9];
  v50 = *(_QWORD *)(v3 + v49);
  v51 = *(_QWORD *)(v3 + v49 + 8);
  v52 = &v27[v49];
  v54 = *(_QWORD *)v52;
  v53 = *((_QWORD *)v52 + 1);
  if ((v50 != *(_QWORD *)v52 || v51 != v53)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *(_QWORD *)v52, *((_QWORD *)v52 + 1), 0) & 1) == 0)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for String;
    v148 = &protocol witness table for String;
    *(_QWORD *)&v146 = v54;
    *((_QWORD *)&v146 + 1) = v53;
    swift_bridgeObjectRetain(v53);
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x6C65646F6DLL, 0xE500000000000000, ObjectType);
  }
  v55 = v25[10];
  v56 = *(_QWORD *)(v3 + v55);
  v57 = *(_QWORD *)(v3 + v55 + 8);
  v58 = &v27[v55];
  v60 = *(_QWORD *)v58;
  v59 = *((_QWORD *)v58 + 1);
  if ((v56 != *(_QWORD *)v58 || v57 != v59)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, *(_QWORD *)v58, *((_QWORD *)v58 + 1), 0) & 1) == 0)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for String;
    v148 = &protocol witness table for String;
    *(_QWORD *)&v146 = v60;
    *((_QWORD *)&v146 + 1) = v59;
    swift_bridgeObjectRetain(v59);
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x65566D6574737973, 0xED00006E6F697372, ObjectType);
  }
  v61 = v25[11];
  v62 = *(_QWORD *)(v3 + v61);
  v63 = *(_QWORD *)&v27[v61];
  if (v62 != v63)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for Int;
    v148 = &protocol witness table for Int;
    *(_QWORD *)&v146 = v63;
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x6449726F646E6576, 0xE800000000000000, ObjectType);
  }
  v64 = v25[12];
  v65 = *(_QWORD *)(v3 + v64);
  v66 = *(_QWORD *)&v27[v64];
  if (v65 != v66)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for Int;
    v148 = &protocol witness table for Int;
    *(_QWORD *)&v146 = v66;
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x49746375646F7270, 0xE900000000000064, ObjectType);
  }
  v67 = v25[15];
  v68 = *(_QWORD *)(v3 + v67);
  v69 = *(_QWORD *)&v27[v67];
  if (v68 != v69)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for Int;
    v148 = &protocol witness table for Int;
    *(_QWORD *)&v146 = v69;
    CKRecordKeyValueSetting.subscript.setter(&v146, 1701605234, 0xE400000000000000, ObjectType);
  }
  v70 = v25[13];
  v71 = *(unsigned __int8 *)(v3 + v70);
  v72 = v27[v70];
  if (v71 != v72)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for Bool;
    v148 = &protocol witness table for Bool;
    LOBYTE(v146) = v72;
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x6465747065636361, 0xE800000000000000, ObjectType);
  }
  v73 = v25[16];
  v74 = *(unsigned __int8 *)(v3 + v73);
  v75 = v27[v73];
  if (v74 != (_DWORD)v75)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for Int;
    v148 = &protocol witness table for Int;
    *(_QWORD *)&v146 = v75;
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x7079546572616873, 0xE900000000000065, ObjectType);
  }
  v76 = v25[17];
  v77 = *(_QWORD *)(v3 + v76);
  v78 = *(_QWORD *)&v27[v76];
  if (v77 != v78)
  {
    *((_QWORD *)&v147 + 1) = &type metadata for UInt64;
    v148 = &protocol witness table for UInt64;
    *(_QWORD *)&v146 = v78;
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x7369747265766461, 0xEF7865646E496465, ObjectType);
  }
  v80 = v133;
  v79 = v134;
  v81 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 16);
  v81(v133, v3 + v25[18], v19);
  v82 = &v27[v25[18]];
  v83 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v84 = dispatch thunk of static Equatable.== infix(_:_:)(v80, v82, v19, v83);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v19);
  if ((v84 & 1) == 0)
  {
    *((_QWORD *)&v147 + 1) = v19;
    v148 = &protocol witness table for Date;
    v85 = (char *)sub_100018F08(&v146);
    v81(v85, (uint64_t)v82, v19);
    CKRecordKeyValueSetting.subscript.setter(&v146, 0x7461446572616873, 0xE900000000000065, ObjectType);
  }
  v86 = v141;
  sub_10000F9B8(v3 + v25[20], v141, (uint64_t *)&unk_1010F47B0);
  v87 = (uint64_t)&v27[v25[20]];
  v88 = v48 + *(int *)(v135 + 48);
  sub_10000F9B8(v86, v48, (uint64_t *)&unk_1010F47B0);
  sub_10000F9B8(v87, v88, (uint64_t *)&unk_1010F47B0);
  v89 = v137;
  v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
  v91 = v90(v48, 1, v137) == 1;
  v92 = v86;
  v93 = v142;
  if (v91)
  {
    sub_100004048(v92, (uint64_t *)&unk_1010F47B0);
    if (v90(v88, 1, v89) == 1)
    {
      sub_100004048(v48, (uint64_t *)&unk_1010F47B0);
      v94 = (uint64_t)v132;
      goto LABEL_43;
    }
    goto LABEL_40;
  }
  v95 = v127;
  sub_10000F9B8(v48, v127, (uint64_t *)&unk_1010F47B0);
  if (v90(v88, 1, v89) == 1)
  {
    sub_100004048(v141, (uint64_t *)&unk_1010F47B0);
    sub_1000126B0(v95, type metadata accessor for SharedBeaconRecord.PropertyListContent);
LABEL_40:
    sub_100004048(v48, (uint64_t *)&unk_101108160);
    v94 = (uint64_t)v132;
LABEL_41:
    v96 = type metadata accessor for PropertyListEncoder(0);
    v97 = swift_allocObject(v96, *(unsigned int *)(v96 + 48), *(unsigned __int16 *)(v96 + 52));
    PropertyListEncoder.init()(v97);
    v98 = sub_1007BAAE8();
    v102 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v87, v129, v98);
    v104 = v103;
    swift_release();
    *((_QWORD *)&v147 + 1) = &type metadata for Data;
    v148 = &protocol witness table for Data;
    *(_QWORD *)&v146 = v102;
    *((_QWORD *)&v146 + 1) = v104;
    sub_10001BBBC(v102, v104);
    CKRecordKeyValueSetting.subscript.setter(&v146, 1701667182, 0xE400000000000000, ObjectType);
    sub_10001BC14(v102, v104);
    v93 = v142;
    goto LABEL_43;
  }
  v99 = (_DWORD *)v95;
  v100 = v124;
  sub_1000126EC(v88, (uint64_t)v124, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  v101 = sub_100D3F0EC(v99, v100);
  sub_1000126B0((uint64_t)v100, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  sub_100004048(v141, (uint64_t *)&unk_1010F47B0);
  sub_1000126B0((uint64_t)v99, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  v93 = v142;
  sub_100004048(v48, (uint64_t *)&unk_1010F47B0);
  v94 = (uint64_t)v132;
  if (!v101)
    goto LABEL_41;
LABEL_43:
  sub_10000F9B8(v3 + v25[19], v93, &qword_1010ED860);
  v105 = (uint64_t)&v27[v25[19]];
  v106 = v94 + *(int *)(v139 + 48);
  sub_10000F9B8(v93, v94, &qword_1010ED860);
  sub_10000F9B8(v105, v106, &qword_1010ED860);
  v107 = v93;
  v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
  if (v108(v94, 1, v143) == 1)
  {
    sub_100004048(v107, &qword_1010ED860);
    if (v108(v106, 1, v143) == 1)
    {
      sub_100004048(v94, &qword_1010ED860);
      goto LABEL_53;
    }
  }
  else
  {
    v109 = v128;
    sub_10000F9B8(v94, v128, &qword_1010ED860);
    if (v108(v106, 1, v143) != 1)
    {
      v119 = v126;
      v120 = v106;
      v121 = v143;
      (*(void (**)(char *, uint64_t, uint64_t))(v140 + 32))(v126, v120, v143);
      LODWORD(v141) = dispatch thunk of static Equatable.== infix(_:_:)(v109, v119, v121, v125);
      v122 = v131;
      v131((uint64_t)v119, v121);
      sub_100004048(v142, &qword_1010ED860);
      v122(v109, v121);
      sub_100004048(v94, &qword_1010ED860);
      if ((v141 & 1) != 0)
        goto LABEL_53;
      goto LABEL_49;
    }
    sub_100004048(v142, &qword_1010ED860);
    v131(v109, v143);
  }
  sub_100004048(v94, (uint64_t *)&unk_10110EE90);
LABEL_49:
  v110 = v130;
  sub_10000F9B8(v105, v130, &qword_1010ED860);
  v111 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v108)(v110, 1, v143);
  if ((_DWORD)v111 == 1)
  {
    sub_100004048(v110, &qword_1010ED860);
    v146 = 0u;
    v147 = 0u;
    v148 = 0;
  }
  else
  {
    v112 = UUID.uuidString.getter(v111);
    *((_QWORD *)&v147 + 1) = &type metadata for String;
    v148 = &protocol witness table for String;
    *(_QWORD *)&v146 = v112;
    *((_QWORD *)&v146 + 1) = v113;
    v131(v110, v143);
  }
  CKRecordKeyValueSetting.subscript.setter(&v146, 0x65644970756F7267, 0xEF7265696669746ELL, ObjectType);
LABEL_53:
  v114 = v25[14];
  v115 = *(unsigned __int8 *)(v3 + v114);
  v116 = v27[v114];
  if (v115 == 3)
  {
    if ((_DWORD)v116 != 3)
      goto LABEL_61;
LABEL_58:
    sub_1000126B0((uint64_t)v27, type metadata accessor for SharedBeaconRecord);
    return swift_unknownObjectRelease(v145);
  }
  if ((_DWORD)v116 != 3 && v115 == (_DWORD)v116)
    goto LABEL_58;
  if ((_DWORD)v116 != 3)
  {
LABEL_61:
    *((_QWORD *)&v147 + 1) = &type metadata for Int;
    v148 = &protocol witness table for Int;
    *(_QWORD *)&v146 = v116;
    goto LABEL_62;
  }
  v148 = 0;
  v146 = 0u;
  v147 = 0u;
LABEL_62:
  v118 = v145;
  CKRecordKeyValueSetting.subscript.setter(&v146, 0x65646F4D74736F6CLL, 0xEE00737574617453, ObjectType);
  swift_unknownObjectRelease(v118);
  return sub_1000126B0((uint64_t)v27, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_1007B6904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_10001A9A8(&qword_101108208);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_10111BE20;
  else
    v2 = (uint64_t *)&unk_101108210;
  return sub_10001A9A8(v2);
}

uint64_t sub_1007B6950(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_1007A3B7C(*a1, a2, a3, a4);
}

_QWORD *sub_1007B6958(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;

  v21 = a1;
  v22 = a2;
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10000F4A0(0, &qword_101108438, RTRoutineManager_ptr);
  v26 = &off_1010AA360;
  *(_QWORD *)&v24 = a3;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v6, v17);
  a4[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000038, 0x8000000100EE5150, v11, v8, v15, 0);
  a4[8] = v21;
  a4[9] = v22;
  a4[10] = _swiftEmptyArrayStorage;
  sub_10000F9FC(&v24, (uint64_t)(a4 + 3));
  return a4;
}

uint64_t sub_1007B6B7C(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_1007A415C(*a1, a2, a3, a4, a5, (uint64_t *)&unk_101108180, type metadata accessor for ShareRecord, (void (*)(void *))sub_1000A4F18, (uint64_t)sub_1007BE180);
}

_QWORD *sub_1007B6BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[24];
  uint64_t v62;
  uint64_t v63;

  v54 = a2;
  v4 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v4);
  v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v53 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)v46 - v11;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v13);
  v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v52 = (uint64_t)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v47 = (uint64_t)v46 - v20;
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v50 = v12;
    v22 = v2;
    v63 = v21;
    v60 = type metadata accessor for BeaconStoreFileRecord(0);
    v23 = *(_QWORD *)(v60 - 8);
    v24 = a1;
    v25 = a1 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v59 = *(_QWORD *)(v23 + 72);
    v46[1] = v24;
    swift_bridgeObjectRetain(v24);
    v56 = v8;
    v57 = _swiftEmptyArrayStorage;
    v51 = v6;
    v48 = v16;
    v49 = v15;
    v55 = v17;
    while (1)
    {
      sub_10000F9B8(v25 + *(int *)(v60 + 20), (uint64_t)v6, &qword_1010FBA40);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_100004048((uint64_t)v6, &qword_1010FBA40);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
      }
      else
      {
        v58 = v22;
        v26 = v50;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v50, v6, v7);
        v27 = *(_QWORD *)(v54 + 160);
        if (qword_1010EA0D8 != -1)
          swift_once(&qword_1010EA0D8, sub_1009A3098);
        v28 = sub_10001A9E8(v7, (uint64_t)qword_1011B7AA8);
        v29 = v7;
        v30 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v53, v28, v29);
        v31 = objc_autoreleasePoolPush();
        __chkstk_darwin(v31);
        v46[-4] = v26;
        v46[-3] = v27;
        v46[-2] = v30;
        v32 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
        v33 = v58;
        OS_dispatch_queue.sync<A>(execute:)(sub_1007BD1E0, &v46[-6], v32);
        v34 = v31;
        v8 = v56;
        objc_autoreleasePoolPop(v34);
        v35 = *(void (**)(char *, uint64_t))(v8 + 8);
        v36 = v30;
        v7 = v29;
        v35(v36, v29);
        v35(v26, v29);
        if (v62)
        {
          v37 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
          v16 = v48;
          v15 = v49;
          v38 = swift_dynamicCast(v49, v61, v37, v48, 6);
          v17 = v55;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v15, v38 ^ 1u, 1, v16);
        }
        else
        {
          sub_100004048((uint64_t)v61, (uint64_t *)&unk_1010EE310);
          v17 = v55;
          v16 = v48;
          v15 = v49;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v49, 1, 1, v48);
        }
        v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
        v6 = v51;
        if (v39 != 1)
        {
          v40 = v47;
          sub_1000126EC((uint64_t)v15, v47, type metadata accessor for OwnedBeaconRecord);
          sub_1000126EC(v40, v52, type metadata accessor for OwnedBeaconRecord);
          if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) != 0)
            v41 = (unint64_t)v57;
          else
            v41 = sub_1007C8520(0, v57[2] + 1, 1, (unint64_t)v57);
          v43 = *(_QWORD *)(v41 + 16);
          v42 = *(_QWORD *)(v41 + 24);
          v22 = v33;
          if (v43 >= v42 >> 1)
            v41 = sub_1007C8520(v42 > 1, v43 + 1, 1, v41);
          *(_QWORD *)(v41 + 16) = v43 + 1;
          v17 = v55;
          v44 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          v57 = (_QWORD *)v41;
          sub_1000126EC(v52, v41 + v44 + *(_QWORD *)(v55 + 72) * v43, type metadata accessor for OwnedBeaconRecord);
          v8 = v56;
          goto LABEL_5;
        }
        v22 = v33;
      }
      sub_100004048((uint64_t)v15, (uint64_t *)&unk_1010F47C0);
LABEL_5:
      v25 += v59;
      if (!--v63)
      {
        swift_bridgeObjectRelease();
        return v57;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

void sub_1007B70B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __CFNotificationCenter *v12;
  __CFNotificationCenter *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  __CFNotificationCenter *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (**v30)(_QWORD, _QWORD);
  _QWORD *v31;
  _QWORD aBlock[6];

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(void (***)(_QWORD, _QWORD))(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v12)
  {
    v13 = v12;
    v30 = v5;
    v14 = (void *)SPSelfBeaconingChangedNotification;
    v15 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v29 = v1;
    v16 = (void *)static OS_os_log.default.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    os_log(_:dso:log:type:_:)("Posting SPSelfBeaconingChangedNotification Darwin notification", 62, 2, &_mh_execute_header, v16, v17, _swiftEmptyArrayStorage);

    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    v18 = static OS_dispatch_queue.global(qos:)(v11);
    v28 = v4;
    v19 = (void *)v18;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v20 = swift_allocObject(&unk_1010922D0, 32, 7);
    *(_QWORD *)(v20 + 16) = v13;
    *(_QWORD *)(v20 + 24) = v14;
    aBlock[4] = sub_1007BE1D4;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010922E8;
    v21 = _Block_copy(aBlock);
    v22 = v13;
    static DispatchQoS.unspecified.getter(v14);
    v31 = _swiftEmptyArrayStorage;
    v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v24, v25, v0, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v21);
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v0);
    ((void (**)(char *, uint64_t))v30)[1](v7, v28);
    swift_release();
  }
  else
  {
    v26 = static os_log_type_t.error.getter(0);
    v27 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v30 = (void (**)(_QWORD, _QWORD))static OS_os_log.default.getter(v27);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v30, "CFNotificationCenterGetDarwinNotifyCenter return nil!", 53, 2, _swiftEmptyArrayStorage);

  }
}

void sub_1007B742C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void (**v5)(_QWORD, _QWORD);
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __CFNotificationCenter *v12;
  __CFNotificationCenter *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __CFNotificationCenter *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)(_QWORD, _QWORD);
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(void (***)(_QWORD, _QWORD))(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v12)
  {
    v13 = v12;
    v28 = v5;
    v14 = (void *)SPServiceSettingsChangedNotification;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v27 = v1;
    v15 = (void *)static OS_os_log.default.getter();
    v16 = static os_log_type_t.default.getter(v15);
    os_log(_:dso:log:type:_:)("Posting SPServiceSettingsChangedNotification Darwin notification", 64, 2, &_mh_execute_header, v15, v16, _swiftEmptyArrayStorage);

    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    v17 = static OS_dispatch_queue.global(qos:)(v11);
    v26 = v4;
    v18 = (void *)v17;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v19 = swift_allocObject(&unk_101092000, 32, 7);
    *(_QWORD *)(v19 + 16) = v13;
    *(_QWORD *)(v19 + 24) = v14;
    aBlock[4] = sub_1007B9574;
    v31 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101092018;
    v20 = _Block_copy(aBlock);
    v21 = v13;
    static DispatchQoS.unspecified.getter(v14);
    v29 = _swiftEmptyArrayStorage;
    v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v24 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v0, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v3, v0);
    ((void (**)(char *, uint64_t))v28)[1](v7, v26);
    swift_release(v31);
  }
  else
  {
    v25 = static os_log_type_t.error.getter(0);
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v28 = (void (**)(_QWORD, _QWORD))static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v28, "CFNotificationCenterGetDarwinNotifyCenter return nil!", 53, 2, _swiftEmptyArrayStorage);

  }
}

void sub_1007B77A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v2 = v1;
  v4 = *a1;
  type metadata accessor for AnyKeyPath(0);
  KeyPath = swift_getKeyPath(&unk_100E4FC30);
  v6 = static AnyKeyPath.== infix(_:_:)(a1, KeyPath);
  swift_release();
  if ((v6 & 1) != 0
    || (v7 = swift_getKeyPath(&unk_100E4FC58),
        v8 = static AnyKeyPath.== infix(_:_:)(a1, v7),
        swift_release(),
        (v8 & 1) != 0)
    || (v9 = swift_getKeyPath(&unk_100E4FC80),
        v10 = static AnyKeyPath.== infix(_:_:)(a1, v9),
        swift_release(),
        (v10 & 1) != 0))
  {
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.safelyReevaluateLocalBeaconing", 60, 2, sub_1007B8000, v2, &type metadata for () + 1);
    sub_1007F9F70();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
  }
  v11 = swift_getKeyPath(&unk_100E4FCA8);
  v12 = static AnyKeyPath.== infix(_:_:)(a1, v11);
  v13 = swift_release();
  if ((v12 & 1) != 0)
    sub_1007B70B0();
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v15 = qword_1011B7D38;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v22 = a1;
  v18 = type metadata accessor for KeyPath(0, &type metadata for Configuration, *(_QWORD *)(class metadata base offset for KeyPath + v4 + 8));
  swift_retain();
  v19 = String.init<A>(describing:)(&v22, v18);
  v21 = v20;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Posting ServiceSettingsChanged Notification for change in %@", 60, 2, v17);
  swift_bridgeObjectRelease();
  sub_1007B742C();
}

BOOL sub_1007B7A30()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  _BOOL8 result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;

  if (qword_1010E9D08 != -1)
    goto LABEL_34;
  while (1)
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v0 = (void *)sub_100C1B0B8(v30);
    v1 = SPServiceStateEnabled;
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    if (v2 == v5 && v4 == v6)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = sub_100C1B1AC(v30);
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v9 + 16);
    if (!v10)
      goto LABEL_18;
    v11 = SPDisabledReasonNone;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v9 + 32));
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    if (v12 != v15 || v14 != v16)
      break;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRelease_n(v14, 2);
    if (v10 == 1)
    {
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      swift_bridgeObjectRelease();
      return (v8 & 1) != 0;
    }
LABEL_21:
    v21 = 5;
    while (1)
    {
      v22 = v21 - 3;
      if (__OFADD__(v21 - 4, 1))
        break;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v9 + 8 * v21));
      v25 = v24;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      if (v23 == v26 && v25 == v27)
      {
        swift_bridgeObjectRelease_n(v25, 2);
      }
      else
      {
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v26, v27, 0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
          goto LABEL_30;
      }
      ++v21;
      if (v22 == v10)
        goto LABEL_17;
    }
    __break(1u);
LABEL_34:
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    if (v10 == 1)
      goto LABEL_17;
    goto LABEL_21;
  }
LABEL_30:
  swift_bridgeObjectRelease_n(v9, 2);
  v19 = 0;
  result = 0;
  if ((v8 & 1) == 0)
    return result;
  return v19;
}

void sub_1007B7CB0(uint64_t a1)
{
  uint64_t v1;
  id v2;
  NSString v3;

  if (qword_1010E9D08 != -1)
    a1 = swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, qword_1011B7DB0, "ConfigurationCoordinator resetting by overriding saved config on disk.", 70, 2, _swiftEmptyArrayStorage);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1007B7DEC);
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "removeObjectForKey:", v3);

}

uint64_t sub_1007B7DEC()
{
  uint64_t v0;

  return sub_10008D7B8(v0);
}

uint64_t sub_1007B7E04()
{
  _QWORD *v0;

  return sub_1007945CC(v0);
}

void sub_1007B7E1C()
{
  uint64_t v0;

  sub_100794B48(v0);
}

uint64_t sub_1007B7E24(uint64_t *a1)
{
  uint64_t v1;

  return sub_1007970EC(a1, v1);
}

uint64_t sub_1007B7E2C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007B7E50(_QWORD *a1)
{
  uint64_t v1;

  return sub_100797168(a1, v1);
}

uint64_t sub_1007B7E58()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101107EB4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1007974E4(v0);
}

void sub_1007B7EA0(uint64_t *a1)
{
  uint64_t v1;

  sub_1002B60B0(a1, v1);
}

uint64_t sub_1007B7EA8(uint64_t *a1)
{
  uint64_t v1;

  return sub_10014B498(a1, v1);
}

uint64_t sub_1007B7EB0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1007962DC(a1, a2, a3, v3);
}

uint64_t sub_1007B7EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1005B1AF0(a1, a2, v2);
}

uint64_t sub_1007B7EC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007B7EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;

  v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);
  v4 = sub_10001A9A8((uint64_t *)&unk_101108230);
  return v3(a1, a1 + *(int *)(v4 + 48));
}

uint64_t sub_1007B7F28()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_unknownObjectRelease);
}

uint64_t sub_1007B7F34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110031C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1005B7920(a1, v4, v5, v6);
}

uint64_t sub_1007B7FA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_101107F2C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_1007963F0, 0, 0);
}

uint64_t sub_1007B8000(uint64_t a1)
{
  uint64_t v1;

  return sub_10079CAC8(a1, v1, (uint64_t)&unk_101092258, (uint64_t)sub_1007BAFD0, (uint64_t)&unk_101092270);
}

uint64_t sub_1007B8030()
{
  unint64_t v0;
  char v2;

  v2 = 1;
  v0 = sub_10001CAC4();
  return NSXPCConnection.hasEntitlement<A>(_:)(&v2, &type metadata for BeaconManagerEntitlement, v0) & 1;
}

void sub_1007B8078(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Class isa;
  uint64_t v19;
  Class v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Class v25;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v4 = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v26 - v9;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v11 = qword_1011B7160;
  v12 = objc_autoreleasePoolPush();
  sub_10058DC14(v11, a1, 0, 0, &v29);
  objc_autoreleasePoolPop(v12);
  v13 = v29;
  v14 = v29[2];
  if (v14)
  {
    v27 = a2;
    v29 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v14);
    v15 = *(unsigned __int8 *)(v5 + 80);
    v26[1] = v13;
    v16 = (uint64_t)v13 + ((v15 + 32) & ~v15);
    v28 = *(_QWORD *)(v5 + 72);
    do
    {
      sub_10005972C(v16, (uint64_t)v10, type metadata accessor for BeaconObservation);
      sub_10005972C((uint64_t)v10, (uint64_t)v8, type metadata accessor for BeaconObservation);
      v17 = objc_allocWithZone((Class)SPBeaconObservation);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v19 = qword_100E4FEC0[v8[*(int *)(v4 + 24)]];
      v20 = Date._bridgeToObjectiveC()().super.isa;
      v21 = objc_msgSend(v17, "initWithBeaconIdentifier:type:date:location:", isa, v19, v20, 0);

      sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconObservation);
      v22 = sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
      v23 = v29[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
      v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized ContiguousArray._endMutation()(v24);
      v16 += v28;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    a2 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_10000F4A0(0, &qword_1011083D8, SPBeaconObservation_ptr);
  v25 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, v25);
  swift_bridgeObjectRelease();

}

unint64_t sub_1007B8314(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D130, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

_QWORD *sub_1007B835C(uint64_t a1, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD v11[5];

  v11[3] = &type metadata for SystemInfo;
  v11[4] = &off_1010ACF68;
  a4[12] = _swiftEmptyArrayStorage;
  a4[2] = a1;
  LOBYTE(v10[0]) = a2;
  v6 = sub_10001A9A8(&qword_1010ECF50);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_retain();
  a4[11] = CurrentValueSubject.init(_:)(v10);
  sub_100030784((uint64_t)v11, (uint64_t)(a4 + 3));
  a4[8] = a3;
  a4[9] = &protocol witness table for CurrentLocationMonitor;
  v10[0] = 0;
  v7 = sub_10001A9A8(&qword_1010ECF30);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  swift_unknownObjectRetain(a3);
  a4[10] = CurrentValueSubject.init(_:)(v10);
  v8 = a3 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(a3 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v10, 1, 0);
  *(_QWORD *)(v8 + 8) = &off_101053660;
  swift_unknownObjectWeakAssign(v8, a4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
  return a4;
}

_QWORD *sub_1007B8480(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];

  v18[3] = &type metadata for SystemInfo;
  v18[4] = &off_1010ACF68;
  v8 = type metadata accessor for SeparationMonitoringStateDecider.iOS();
  v9 = (_QWORD *)swift_allocObject(v8, 112, 7);
  v10 = sub_10009F5D0((uint64_t)v18, (uint64_t)&type metadata for SystemInfo);
  __chkstk_darwin(v10);
  (*(void (**)(void))(v11 + 16))();
  v17[3] = &type metadata for SystemInfo;
  v17[4] = &off_1010ACF68;
  v9[13] = a1;
  sub_100030784((uint64_t)v17, (uint64_t)v16);
  v12 = sub_10009F5D0((uint64_t)v16, v16[3]);
  __chkstk_darwin(v12);
  (*(void (**)(void))(v13 + 16))();
  swift_retain();
  v14 = sub_1007B835C(a2, a3, a4, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  return v14;
}

unint64_t sub_1007B85D8()
{
  unint64_t result;

  result = qword_101108008;
  if (!qword_101108008)
  {
    result = swift_getWitnessTable(byte_100E233C0, &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy);
    atomic_store(result, (unint64_t *)&qword_101108008);
  }
  return result;
}

uint64_t sub_1007B861C(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_100796510(a1, v1);
}

void sub_1007B8624(uint64_t a1)
{
  uint64_t v1;

  sub_1007967C4(a1, v1);
}

uint64_t sub_1007B8630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10110314C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_10067D25C(v2, v3);
}

uint64_t sub_1007B8680(uint64_t a1)
{
  uint64_t v1;

  return sub_100796924(a1, v1);
}

uint64_t sub_1007B8688()
{
  uint64_t v0;

  return sub_10079698C(v0);
}

uint64_t sub_1007B8690(uint64_t a1)
{
  uint64_t v1;

  return sub_100796A54(a1, v1);
}

uint64_t sub_1007B8698()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007B86A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100799030(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1007B86B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1007990E0(a1, a2, a3, v3);
}

uint64_t sub_1007B86B8(uint64_t a1)
{
  swift_retain();
  sub_100C40218((uint64_t)j___s10FindMyBase11TransactionC7captureyyF, a1);
  return swift_release();
}

uint64_t sub_1007B870C(uint64_t a1, uint64_t a2, Swift::Void (__swiftcall *a3)())
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  Swift::Void (__swiftcall *v64)();
  void (**v65)(uint64_t);
  Swift::Void (__swiftcall **v66)();
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Void (__swiftcall *v78)();
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v80 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v80);
  v73 = (uint64_t)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BeaconNamingRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v74 = (uint64_t)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101105880);
  v70 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v72 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v69 - v14;
  v71 = v16;
  __chkstk_darwin(v13);
  v81 = (uint64_t)&v69 - v17;
  v18 = swift_retain();
  v19 = (id)MobileGestalt_get_current_device(v18);
  if (v19)
  {
    v20 = v19;
    v21 = (id)MobileGestalt_copy_userAssignedDeviceName_obj();

    if (v21)
    {
      v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v79 = v23;

    }
    else
    {
      v75 = 0;
      v79 = 0xE000000000000000;
    }
    v24 = (id)MobileGestalt_get_current_device(v22);
    if (v24)
    {
      v25 = v24;
      v78 = a3;
      v26 = (id)MobileGestalt_copy_buildVersion_obj();

      if (v26)
      {
        v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

      }
      else
      {
        v76 = 0;
        v29 = 0xE000000000000000;
      }
      v77 = a2;
      v30 = a1;
      __chkstk_darwin(v27);
      v69 = v31;
      *(&v69 - 2) = v31;
      *(&v69 - 1) = v32;
      v33 = v81;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_10029183C);
      sub_10000F9B8(v33, (uint64_t)v15, (uint64_t *)&unk_101105880);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1, v7) == 1)
      {
        sub_100004048((uint64_t)v15, (uint64_t *)&unk_101105880);
        v34 = v30;
        v35 = v76;
        v36 = v77;
        v37 = v79;
        goto LABEL_22;
      }
      v38 = (uint64_t)v15;
      v39 = v74;
      sub_1000126EC(v38, v74, type metadata accessor for BeaconNamingRecord);
      v40 = (_QWORD *)(v39 + *(int *)(v7 + 32));
      v41 = v40[1];
      v37 = v79;
      if (*v40 == v75 && v41 == v79)
      {
        v34 = v30;
        v42 = v73;
        sub_10005972C(v30, v73, type metadata accessor for OwnedBeaconRecord);
        v35 = v76;
      }
      else
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(*v40, v41, v75, v79, 0);
        v34 = v30;
        v42 = v73;
        sub_10005972C(v30, v73, type metadata accessor for OwnedBeaconRecord);
        v35 = v76;
        if ((v43 & 1) == 0)
        {
          sub_1000126B0(v42, type metadata accessor for OwnedBeaconRecord);
          v36 = v77;
          goto LABEL_21;
        }
      }
      v44 = (_QWORD *)(v42 + *(int *)(v80 + 60));
      v45 = v44[1];
      v36 = v77;
      if (*v44 == v35 && v45 == v29)
      {
        sub_1000126B0(v42, type metadata accessor for OwnedBeaconRecord);
LABEL_19:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Transaction.capture()();
        sub_1000126B0(v39, type metadata accessor for BeaconNamingRecord);
LABEL_27:
        sub_100004048(v81, (uint64_t *)&unk_101105880);
        return swift_release();
      }
      v46 = _stringCompareWithSmolCheck(_:_:expecting:)(*v44, v45, v35, v29, 0);
      sub_1000126B0(v42, type metadata accessor for OwnedBeaconRecord);
      if ((v46 & 1) != 0)
        goto LABEL_19;
LABEL_21:
      sub_1000126B0(v39, type metadata accessor for BeaconNamingRecord);
LABEL_22:
      v47 = (_QWORD *)(v34 + *(int *)(v80 + 60));
      v48 = v47[1];
      if (*v47 == v35 && v48 == v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v47, v48, v35, v29, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Transaction.capture()();
      }
      else
      {
        v49 = swift_allocObject(&unk_101091DA8, 24, 7);
        swift_weakInit(v49 + 16, v36);
        v50 = (void (*)(uint64_t))swift_allocObject(&unk_101091EC0, 40, 7);
        v79 = v37;
        v51 = v50;
        *((_QWORD *)v50 + 2) = v49;
        *((_QWORD *)v50 + 3) = j_j___s10FindMyBase11TransactionC7captureyyF;
        *((_QWORD *)v50 + 4) = v78;
        v52 = swift_allocObject(&unk_101091EE8, 32, 7);
        *(_QWORD *)(v52 + 16) = v35;
        *(_QWORD *)(v52 + 24) = v29;
        v53 = v72;
        sub_10000F9B8(v81, v72, (uint64_t *)&unk_101105880);
        v54 = *(unsigned __int8 *)(v70 + 80);
        v80 = v34;
        v55 = (v54 + 16) & ~v54;
        v56 = (v71 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
        v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
        v58 = v36;
        v59 = (v57 + 23) & 0xFFFFFFFFFFFFFFF8;
        v60 = (v59 + 23) & 0xFFFFFFFFFFFFFFF8;
        v61 = swift_allocObject(&unk_101091F10, v60 + 16, v54 | 7);
        sub_100005CF0(v53, v61 + v55, (uint64_t *)&unk_101105880);
        *(_QWORD *)(v61 + v56) = v58;
        v62 = (uint64_t *)(v61 + v57);
        v64 = v78;
        v63 = v79;
        *v62 = v75;
        v62[1] = v63;
        v65 = (void (**)(uint64_t))(v61 + v59);
        *v65 = sub_1007B8D48;
        v65[1] = v51;
        v66 = (Swift::Void (__swiftcall **)())(v61 + v60);
        *v66 = j_j___s10FindMyBase11TransactionC7captureyyF;
        v66[1] = v64;
        v67 = swift_allocObject(&unk_101091F38, 32, 7);
        *(_QWORD *)(v67 + 16) = sub_1007B8EC0;
        *(_QWORD *)(v67 + 24) = v61;
        swift_retain_n(v64, 2);
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1007A09E0(v80, 0, (void (*)(uint64_t))sub_1001D31E0, v52, (void (*)(uint64_t))sub_10001D858, (void (*)(uint64_t))v67);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      goto LABEL_27;
    }
  }
  else
  {
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1007B8D3C()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

void sub_1007B8D48(uint64_t a1)
{
  uint64_t v1;

  sub_1007998E8(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void ***)(v1 + 32));
}

uint64_t sub_1007B8D54()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007B8D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101105880) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = type metadata accessor for BeaconNamingRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v0 + v3, 1, v6))
  {
    sub_10001BC14(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    v7 = v5 + *(int *)(v6 + 20);
    v8 = type metadata accessor for UUID(0);
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(v5 + *(int *)(v6 + 24), v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 16, v2 | 7);
}

uint64_t sub_1007B8EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101105880) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100799D18(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + v6 + 8), *(void (**)(char *))(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void (**)(void))(v1 + ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1007B8F58(id *a1)
{
  return sub_1007BDB48(a1, type metadata accessor for OwnedBeaconRecord, (void (*)(id))sub_1009A0A80, (void (*)(id *, char *))sub_1007B4BFC);
}

uint64_t sub_1007B8F74(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A39B0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)&unk_101108050);
}

uint64_t sub_1007B8F94()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1007B9254(_QWORD *a1)
{
  return sub_1007BA7CC(a1, type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007A3E4C);
}

uint64_t sub_1007B9268(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_101091FD8, (uint64_t)sub_1007B9550);
}

uint64_t sub_1007B929C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1007B9550(void **a1, uint64_t a2)
{
  sub_1007BAA48(a1, a2, type metadata accessor for OwnedBeaconRecord, (void (*)(void))sub_1009A0A80, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE11C);
}

void sub_1007B9574()
{
  uint64_t v0;

  CFNotificationCenterPostNotification(*(CFNotificationCenterRef *)(v0 + 16), *(CFNotificationName *)(v0 + 24), 0, 0, 1u);
}

uint64_t sub_1007B958C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1007B982C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1007B986C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1[7] = a1;
  v2 = type metadata accessor for XPCServiceDescription(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v5 = type metadata accessor for MachServiceName(0);
  v1[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[13] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[14] = swift_task_alloc(v7);
  v1[15] = swift_task_alloc(v7);
  v8 = type metadata accessor for Date(0);
  v1[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[17] = v9;
  v1[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v1[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[20] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[21] = swift_task_alloc(v12);
  v1[22] = swift_task_alloc(v12);
  v13 = type metadata accessor for LocalBeaconKeyInfo(0);
  v1[23] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[24] = v14;
  v1[25] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v1[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconRecord(0);
  v1[27] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[28] = v17;
  v1[29] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007B99E8, 0, 0);
}

uint64_t sub_1007B99E8()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uid_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.tribeca(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if ((My & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 216);
    v4 = *(_QWORD *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 208);
    sub_10000F9B8(*(_QWORD *)(v0 + 56), v5, (uint64_t *)&unk_1010F47C0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 208), (uint64_t *)&unk_1010F47C0);
      v6 = 0;
      v7 = 0xF000000000000000;
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 232);
      v18 = *(int **)(v0 + 216);
      v19 = *(_QWORD *)(v0 + 176);
      v56 = *(_QWORD *)(v0 + 200);
      v58 = *(_QWORD *)(v0 + 184);
      v20 = *(_QWORD *)(v0 + 160);
      v21 = *(_QWORD *)(v0 + 168);
      v22 = *(_QWORD *)(v0 + 144);
      v23 = *(_QWORD *)(v0 + 152);
      v25 = *(_QWORD *)(v0 + 128);
      v24 = *(_QWORD *)(v0 + 136);
      sub_1000126EC(*(_QWORD *)(v0 + 208), v17, type metadata accessor for OwnedBeaconRecord);
      v26 = getuid();
      sub_100A06500(v26);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v17 + v18[5], v23);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v22, v17 + v18[8], v25);
      v27 = (uint64_t *)(v17 + v18[13]);
      v28 = *v27;
      v29 = v27[1];
      v30 = (uint64_t *)(v17 + v18[9]);
      v31 = *v30;
      v32 = v30[1];
      sub_10001BBBC(v28, v29);
      sub_10001BBBC(v31, v32);
      LocalBeaconKeyInfo.init(userIdentifier:beaconIdentifier:pairDate:publicKey:sharedSecretKey:)(v19, v21, v22, v28, v29, v31, v32);
      v33 = type metadata accessor for PropertyListEncoder(0);
      v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
      PropertyListEncoder.init()(v34);
      v35 = sub_100006204((unint64_t *)&unk_101108290, (uint64_t (*)(uint64_t))&type metadata accessor for LocalBeaconKeyInfo, (uint64_t)&protocol conformance descriptor for LocalBeaconKeyInfo);
      v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v56, v58, v35);
      v7 = v36;
      v37 = *(_QWORD *)(v0 + 232);
      v38 = *(_QWORD *)(v0 + 192);
      v39 = *(_QWORD *)(v0 + 200);
      v40 = *(_QWORD *)(v0 + 184);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
      sub_1000126B0(v37, type metadata accessor for OwnedBeaconRecord);
    }
    v57 = v6;
    v59 = v7;
    *(_QWORD *)(v0 + 240) = v6;
    *(_QWORD *)(v0 + 248) = v7;
    v43 = *(_QWORD *)(v0 + 112);
    v42 = *(_QWORD *)(v0 + 120);
    v45 = *(_QWORD *)(v0 + 96);
    v44 = *(_QWORD *)(v0 + 104);
    v46 = *(_QWORD *)(v0 + 80);
    v47 = *(_QWORD *)(v0 + 88);
    v49 = *(_QWORD *)(v0 + 64);
    v48 = *(_QWORD *)(v0 + 72);
    MachServiceName.init(_:)(0xD000000000000026, 0x8000000100EE46B0);
    v50 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL____TtP7SPOwner33FindMyBeaconDaemonPushXPCProtocol_);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v42, v45);
    v51 = v50;
    XPCServiceDescription.init(name:options:remoteObjectInterface:interruptionHandler:invalidationHandler:)(v43, 0, v51, 0, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v46, v47, v49);
    v52 = sub_10001A9A8(&qword_101108288);
    swift_allocObject(v52, *(unsigned int *)(v52 + 48), *(unsigned __int16 *)(v52 + 52));
    v53 = XPCSession.init(service:)(v46);
    *(_QWORD *)(v0 + 256) = v53;
    XPCSession.resume()();

    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
    v54 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 264) = v54;
    v54[2] = v53;
    v54[3] = v57;
    v54[4] = v59;
    v55 = (_QWORD *)swift_task_alloc(async function pointer to withCancellableCheckedThrowingContinuation<A>(_:)[1]);
    *(_QWORD *)(v0 + 272) = v55;
    *v55 = v0;
    v55[1] = sub_1007B9ED8;
    return withCancellableCheckedThrowingContinuation<A>(_:)();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 208);
    v11 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 176);
    v12 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 232));
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1007B9ED8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(*(_QWORD *)(v2 + 264));
  if (v0)
    v4 = sub_1007BA008;
  else
    v4 = sub_1007B9F44;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1007B9F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_10001EF3C(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  swift_release();
  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BA008()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  swift_release();
  sub_10001EF3C(v2, v1);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BA0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1007BA1C4(void **a1, uint64_t a2)
{
  sub_1007BAA48(a1, a2, type metadata accessor for BeaconNamingRecord, (void (*)(void))sub_100A00590, (uint64_t)sub_100087A38, (uint64_t)sub_100088EFC);
}

uint64_t sub_1007BA1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SafeLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1007BA2B4(void **a1, uint64_t a2)
{
  sub_1007BD9C4(a1, a2, type metadata accessor for SafeLocation, (uint64_t (*)(void))sub_100AFF19C, (uint64_t)sub_100088F44);
}

uint64_t sub_1007BA2D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for LeashRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1007BA38C(void **a1, uint64_t a2)
{
  sub_1007BD9C4(a1, a2, type metadata accessor for LeashRecord, (uint64_t (*)(void))sub_100D77E64, (uint64_t)sub_100088F2C);
}

void sub_1007BA3A8(uint64_t a1)
{
  sub_100797C1C(a1);
}

uint64_t sub_1007BA3B0(Swift::Void (__swiftcall *a1)())
{
  uint64_t v1;

  return sub_100796D54(a1, v1);
}

uint64_t sub_1007BA3C8()
{
  uint64_t v0;

  return sub_100796C84(v0);
}

uint64_t sub_1007BA3D0()
{
  sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100215C88);
}

uint64_t sub_1007BA424()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1007BA5BC(id *a1)
{
  return sub_1007BDB48(a1, type metadata accessor for SharedBeaconRecord, (void (*)(id))sub_100D39160, (void (*)(id *, char *))sub_1007B5B44);
}

uint64_t sub_1007BA5D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A39B0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010F21B0);
}

uint64_t sub_1007BA5F8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1007BA7B8(_QWORD *a1)
{
  return sub_1007BA7CC(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_1007A3B7C);
}

uint64_t sub_1007BA7CC(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a3(*a1, v3 + v6, *(_QWORD *)(v3 + v7), *(_QWORD *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1007BA83C(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_101092190, (uint64_t)sub_1007BAA24);
}

uint64_t sub_1007BA870()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1007BAA24(void **a1, uint64_t a2)
{
  sub_1007BAA48(a1, a2, type metadata accessor for SharedBeaconRecord, (void (*)(void))sub_100D39160, (uint64_t)sub_100087A38, (uint64_t)sub_1007BE16C);
}

void sub_1007BAA48(void **a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  unint64_t v14;

  v13 = *(_QWORD *)(a3(0) - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  sub_1007A2F98(*a1, a2, *(_QWORD *)(v6 + 16), v6 + v14, *(_QWORD *)(v6 + ((*(_QWORD *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFF8)), a3, a4, a5, a6);
}

unint64_t sub_1007BAAE8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101108170;
  if (!qword_101108170)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F47B0);
    v2 = sub_100006204(&qword_101108178, type metadata accessor for SharedBeaconRecord.PropertyListContent, (uint64_t)&unk_100E6F48C);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101108170);
  }
  return result;
}

uint64_t sub_1007BAB64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1007BAC90(id *a1)
{
  return sub_1007BDB48(a1, type metadata accessor for ShareRecord, (void (*)(id))sub_1000A4F18, (void (*)(id *, char *))sub_100790BEC);
}

uint64_t sub_1007BACAC(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A39B0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t *)&unk_101108180);
}

uint64_t sub_1007BACCC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1007BAE18(void **a1)
{
  return sub_1007BCB64(a1, type metadata accessor for ShareRecord, (uint64_t *)&unk_101108180, (void (*)(void *))sub_1000A4F18, (uint64_t)sub_1007BE180);
}

uint64_t sub_1007BAE3C(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for ShareRecord, (uint64_t)&unk_101092230, (uint64_t)sub_1007BAFB0);
}

uint64_t sub_1007BAE70()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;

  v1 = (int *)type metadata accessor for ShareRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  v9 = v0 + v4 + v1[7];
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  v13 = v0 + v4 + v1[8];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v10))
    v12(v13, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1007BAFB0(void **a1, uint64_t a2)
{
  sub_1007BD9C4(a1, a2, type metadata accessor for ShareRecord, (uint64_t (*)(void))sub_1000A4F18, (uint64_t)sub_1007BE180);
}

uint64_t sub_1007BAFD0()
{
  return sub_1007BD874(sub_10079CCC4);
}

uint64_t sub_1007BAFDC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  return swift_deallocObject(v0, 113, 7);
}

uint64_t sub_1007BB030()
{
  uint64_t v0;

  return sub_100310FF8((unsigned __int8 *)(v0 + 24), *(char **)(v0 + 16));
}

uint64_t sub_1007BB03C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[17] = a1;
  v2 = sub_10001A9A8(&qword_1010EF7C0);
  v1[18] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[19] = v3;
  v1[20] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007BB0A0, 0, 0);
}

uint64_t sub_1007BB0A0()
{
  _QWORD *v0;
  __int128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (__cdecl *v23)();
  uint64_t v24;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = (__int128 *)(v0 + 7);
  v2 = v0 + 12;
  v3 = v0[17];
  v4 = v0[19];
  v5 = v0[20];
  v6 = v0[18];
  v7 = type metadata accessor for Logger(0);
  v0[21] = v7;
  sub_10001A9E8(v7, (uint64_t)qword_1011B7DF8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v5, v3, v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[20];
  v13 = v0[18];
  if (v11)
  {
    v21 = v0[19];
    v14 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v24 = v22;
    *(_DWORD *)v14 = 136446466;
    v0[15] = sub_100016940(0xD000000000000023, 0x8000000100EE44B0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    v15 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    v0[16] = sub_100016940(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v14 + 14, v14 + 22);
    v2 = v0 + 12;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s identifier %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    v18 = v14;
    v1 = (__int128 *)(v0 + 7);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[19] + 8))(v0[20], v0[18]);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v2, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 2));
    sub_10001AA44(v0 + 2, v0[5]);
    v23 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v20 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    v0[22] = v20;
    *v20 = v0;
    v20[1] = sub_1007BB3AC;
    return v23();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007BB3AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007BB408, 0, 0);
}

uint64_t sub_1007BB408()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 184))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10110F744);
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_1007BB568;
    return sub_1009B40F4(*(_QWORD *)(v0 + 136));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v4 = sub_10001A9E8(*(_QWORD *)(v0 + 168), (uint64_t)qword_1011B7AE0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to get PencilPairingService", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = sub_10028FA08();
    v9 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v8, 0, 0);
    *v10 = 11;
    swift_willThrow(v9);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1007BB568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1007BB60C;
  else
    v3 = sub_1007BB5CC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1007BB5CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BB60C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BB648(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[22] = a1;
  v2 = sub_10001A9A8(&qword_1010EF7C0);
  v1[23] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[24] = v3;
  v1[25] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007BB6AC, 0, 0);
}

uint64_t sub_1007BB6AC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t My;
  _QWORD *v19;
  uint64_t result;
  _QWORD *v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(void);
  uint64_t v33[2];

  v1 = (_QWORD *)(v0 + 16);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 184);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 208) = v6;
  sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v2, v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 184);
  if (v10)
  {
    v30 = *(_QWORD *)(v0 + 192);
    v13 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(64, -1);
    v33[0] = v31;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 160) = sub_100016940(0xD000000000000025, 0x8000000100EE4480, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    *(_QWORD *)(v0 + 168) = sub_100016940(v15, v16, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s identifier %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v17 = v13;
    v1 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
  }

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v19 = sub_100018F08(v1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v19, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if ((My & 1) == 0)
  {
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v23 = sub_10001A9E8(v6, (uint64_t)qword_1011B7AE0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Feature.FindMy.lineUp is disabled!", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = sub_10028FA08();
    v28 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v27, 0, 0);
    *v29 = 13;
    swift_willThrow(v28);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v32 = (uint64_t (*)(void))((char *)&dword_1010EBC18 + dword_1010EBC18);
    v21 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 216) = v21;
    *v21 = v0;
    v21[1] = sub_1007BBB14;
    v22 = v32;
    return v22();
  }
  __break(1u);
  return result;
}

uint64_t sub_1007BBB14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007BBB70, 0, 0);
}

uint64_t sub_1007BBB70()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  id v3;
  unsigned int v4;
  NSString v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;

  v1 = v0 + 7;
  if (!v0[28])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v18 = sub_10001A9E8(v0[26], (uint64_t)qword_1011B7AE0);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to get PencilPairingService", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = sub_10028FA08();
    v23 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v22, 0, 0);
    *v24 = 11;
    swift_willThrow(v23);
    swift_task_dealloc(v0[25]);
    v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v2 = (void *)qword_1011B7C08;
  v3 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v4 = objc_msgSend(v3, "isInternalBuild");

  if (v4)
  {
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v2, "BOOLForKey:", v5);

    if ((v6 & 1) != 0)
    {
      if (qword_1010EA0F8 != -1)
        swift_once(&qword_1010EA0F8, sub_1009B4438);
      v7 = sub_10001A9E8(v0[26], (uint64_t)qword_1011B7AE0);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter(v8);
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ignoring unpairing notification user defaults is set.", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
      }
      swift_release();

      swift_task_dealloc(v0[25]);
      v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }
  }
  if (qword_1010EA0F8 != -1)
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v12 = sub_10001A9E8(v0[26], (uint64_t)qword_1011B7AE0);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unpairing pencil...", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = (_QWORD *)swift_task_alloc(dword_10110F6BC);
  v0[29] = v16;
  *v16 = v0;
  v16[1] = sub_1007BBEFC;
  return sub_1009B3CC0(v0[22], 0);
}

uint64_t sub_1007BBEFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1007BBF9C;
  else
    v3 = sub_1007BBF60;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1007BBF60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BBF9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007BBFD8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE20(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1007BC010()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1007BC040()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_notifiedDaemonConfigurationChangedOnce) = 0;
}

uint64_t sub_1007BC050()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007BC060(uint64_t a1)
{
  uint64_t v1;

  return sub_10079FC9C(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1007BC080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_1007BC140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1007A00CC(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1007BC1B0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101108274);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_10079972C(a1, v4, v5, v6);
}

void sub_1007BC228(uint64_t a1)
{
  uint64_t v1;

  sub_10079B124(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1007BC234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010F8318);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1007BC2AC(uint64_t a1)
{
  sub_10001A9A8(&qword_1010F8318);
  return sub_10079B2B8(a1);
}

uint64_t sub_1007BC2F0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v11 = v7 + v1[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1007BC3C4(id *a1)
{
  uint64_t v1;

  type metadata accessor for KeyAlignmentRecord(0);
  return sub_1007A37EC(a1, *(void (**)(uint64_t *))(v1 + 16));
}

uint64_t sub_1007BC404(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A39B0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1011082B0);
}

uint64_t sub_1007BC424()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v11 = v7 + v1[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1007BC520(void **a1)
{
  return sub_1007BCB64(a1, type metadata accessor for KeyAlignmentRecord, &qword_1011082B0, (void (*)(void *))sub_1000A1988, (uint64_t)sub_1007BE194);
}

void sub_1007BC544()
{
  uint64_t v0;

  sub_1007B2D24(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24), type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1010ED698, (uint64_t)&unk_100E252BC, &qword_1010E9920, (uint64_t)qword_1011B6700, (unint64_t *)&unk_1010ED6A0, (uint64_t)&unk_100E2530C, (uint64_t)sub_1000A21BC);
}

uint64_t sub_1007BC5A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_101092488, (uint64_t)sub_1007BC6CC);
}

uint64_t sub_1007BC5DC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for KeyAlignmentRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v11 = v7 + v1[8];
  v12 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1007BC6CC(void **a1, uint64_t a2)
{
  sub_1007BD9C4(a1, a2, type metadata accessor for KeyAlignmentRecord, (uint64_t (*)(void))sub_1000A1988, (uint64_t)sub_1007BE194);
}

uint64_t sub_1007BC6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1007BC7B8(id *a1)
{
  return sub_1007BDB48(a1, type metadata accessor for BeaconNamingRecord, (void (*)(id))sub_100A00590, (void (*)(id *, char *))sub_10084DC3C);
}

uint64_t sub_1007BC7D4(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A39B0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_101108090);
}

uint64_t sub_1007BC7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconNamingRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1007BC8EC(uint64_t a1)
{
  return sub_1007BDCF0(a1, type metadata accessor for BeaconNamingRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_10085975C);
}

uint64_t sub_1007BC900(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_101092078, (uint64_t)sub_1007BA1C4);
}

uint64_t sub_1007BC934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1007BCA08(id *a1)
{
  return sub_1007BDB48(a1, type metadata accessor for OwnedBeaconGroup, (void (*)(id))sub_100369964, (void (*)(id *, char *))sub_1007913A0);
}

uint64_t sub_1007BCA24(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A39B0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010EEC50);
}

uint64_t sub_1007BCA44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1007BCB40(void **a1)
{
  return sub_1007BCB64(a1, type metadata accessor for OwnedBeaconGroup, &qword_1010EEC50, (void (*)(void *))sub_100369964, (uint64_t)sub_1007BE1A8);
}

uint64_t sub_1007BCB64(void **a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v11 = *(_QWORD *)(a2(0) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1007A415C(*a1, v5 + v12, *(_QWORD *)(v5 + v13), *(void (**)(char *))(v5 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v5 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), a3, a2, a4, a5);
}

uint64_t sub_1007BCC00(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1010925A0, (uint64_t)sub_1007BCD24);
}

uint64_t sub_1007BCC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1007BCD24(void **a1, uint64_t a2)
{
  sub_1007BD9C4(a1, a2, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(void))sub_100369964, (uint64_t)sub_1007BE1A8);
}

uint64_t sub_1007BCD40()
{
  uint64_t v0;

  return sub_10079E600(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1007BCD48()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1007BCD84()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_BYTE *)(v0 + 48);
  v3 = swift_task_alloc(dword_101108324);
  v4 = *(_OWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004C28;
  *(_BYTE *)(v3 + 120) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = v5;
  return swift_task_switch(sub_10079E6A4, 0, 0);
}

uint64_t sub_1007BCDF0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10079ECEC(v1, a1);
}

uint64_t sub_1007BCDF8()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007BCE1C(uint64_t *a1)
{
  uint64_t v1;

  return sub_100833924(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1007BCE24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1007BCE50(uint64_t a1)
{
  uint64_t v1;

  sub_100833DA8(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1007BCE58()
{
  return sub_10000762C((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1007BCE64()
{
  uint64_t v0;

  return sub_10079E098(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1007BCE70(uint64_t a1)
{
  uint64_t *v1;

  return sub_10083BAE4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1007BCE90()
{
  uint64_t v0;

  return sub_10079DD84(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1007BCE98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007BCEA8()
{
  uint64_t v0;

  return sub_10038AE18(v0);
}

uint64_t sub_1007BCEB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007BCEC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007BCED0(uint64_t a1)
{
  uint64_t v1;

  return sub_10079C718(a1, *(_QWORD *)(v1 + 16));
}

void sub_1007BCEE8(int a1)
{
  uint64_t v1;

  sub_10079CE7C(a1, v1);
}

uint64_t sub_1007BCF00()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1007BD1A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_10079C868(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1007BD1E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10088787C(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1007BD200()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1007BD234()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1007BD268(uint64_t a1)
{
  uint64_t v1;

  sub_10079C2E4(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1007BD274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007BD2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  void (*v21)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F47C0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 48) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release();
  v5 = v0 + v3;
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    sub_10001BC14(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
    v7 = v5 + v6[5];
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v10(v7, v8);
    v11 = v5 + v6[6];
    v12 = type metadata accessor for StableIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v11, v12))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v10(v11, v8);
        v21 = v10;
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 3u:
        v10(v11, v8);
        v21 = v10;
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_6:
        v10 = v21;
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    v13 = v5 + v6[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
      v10(v13, v8);
    v14 = v5 + v6[8];
    v15 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    sub_10001BC14(*(_QWORD *)(v5 + v6[9]), *(_QWORD *)(v5 + v6[9] + 8));
    v16 = (uint64_t *)(v5 + v6[10]);
    v17 = v16[1];
    if (v17 >> 60 != 15)
      sub_10001BC14(*v16, v17);
    v18 = (uint64_t *)(v5 + v6[11]);
    v19 = v18[1];
    if (v19 >> 60 != 15)
      sub_10001BC14(*v18, v19);
    sub_10001BC14(*(_QWORD *)(v5 + v6[12]), *(_QWORD *)(v5 + v6[12] + 8));
    sub_10001BC14(*(_QWORD *)(v5 + v6[13]), *(_QWORD *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1007BD590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010F47C0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 48) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10110835C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004C28;
  v5[2] = v3;
  v6 = (_QWORD *)swift_task_alloc(dword_101108284);
  v5[3] = v6;
  *v6 = v5;
  v6[1] = sub_10079A6D8;
  return sub_1007B986C(v4);
}

uint64_t sub_1007BD628(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100798EC4(a1, a2, a3, v3);
}

uint64_t sub_1007BD630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_100792B68(a1, a2, v3, a3);
}

uint64_t sub_1007BD638(uint64_t a1)
{
  uint64_t v1;

  return sub_100792778(a1, v1, (uint64_t)sub_1007B8000);
}

uint64_t sub_1007BD658(uint64_t a1)
{
  uint64_t v1;

  return sub_1007922B0(a1, v1);
}

uint64_t sub_1007BD660(uint64_t a1)
{
  uint64_t v1;

  return sub_100792514(a1, v1);
}

uint64_t sub_1007BD668(uint64_t a1)
{
  uint64_t v1;

  return sub_10079286C(a1, v1);
}

uint64_t sub_1007BD670()
{
  uint64_t v0;

  return sub_100792724(v0);
}

uint64_t sub_1007BD688(uint64_t result)
{
  if (result != 1)
    return swift_release(result);
  return result;
}

_QWORD *sub_1007BD698(_QWORD *a1)
{
  destroy for ManagedCBPeripheralManager(a1);
  return a1;
}

unint64_t sub_1007BD6CC()
{
  unint64_t result;

  result = qword_1011083F8;
  if (!qword_1011083F8)
  {
    result = swift_getWitnessTable(byte_100E40E38, &type metadata for SecureLocationsConfig);
    atomic_store(result, (unint64_t *)&qword_1011083F8);
  }
  return result;
}

uint64_t sub_1007BD710()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[23]);
  swift_bridgeObjectRelease(v0[25]);
  swift_bridgeObjectRelease(v0[27]);
  return swift_deallocObject(v0, 224, 7);
}

unint64_t sub_1007BD74C()
{
  unint64_t result;

  result = qword_101108400;
  if (!qword_101108400)
  {
    result = swift_getWitnessTable(asc_100E642A4, &type metadata for SecureLocationLabel);
    atomic_store(result, (unint64_t *)&qword_101108400);
  }
  return result;
}

_QWORD *sub_1007BD790(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

unint64_t sub_1007BD7E4()
{
  unint64_t result;

  result = qword_101108410;
  if (!qword_101108410)
  {
    result = swift_getWitnessTable(byte_100E642F4, &type metadata for SecureLocationLabel);
    atomic_store(result, (unint64_t *)&qword_101108410);
  }
  return result;
}

uint64_t sub_1007BD828()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1007BD868()
{
  return sub_1007BD874(sub_100799230);
}

uint64_t sub_1007BD874(uint64_t (*a1)(void))
{
  Transaction.capture()();
  return a1();
}

uint64_t sub_1007BD8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1007BD9A8(void **a1, uint64_t a2)
{
  sub_1007BD9C4(a1, a2, type metadata accessor for LostModeRecord, (uint64_t (*)(void))sub_100AA925C, (uint64_t)sub_100088F5C);
}

void sub_1007BD9C4(void **a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;

  v11 = *(_QWORD *)(a3(0) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  sub_1007A32C8(*a1, a2, *(_QWORD *)(v5 + 16), v5 + v12, *(_QWORD *)(v5 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8)), a3, a4, a5);
}

uint64_t sub_1007BDA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1007BDB2C(id *a1)
{
  return sub_1007BDB48(a1, type metadata accessor for LostModeRecord, (void (*)(id))sub_100AA925C, (void (*)(id *, char *))sub_10084DF68);
}

uint64_t sub_1007BDB48(id *a1, uint64_t (*a2)(_QWORD), void (*a3)(id), void (*a4)(id *, char *))
{
  uint64_t v4;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return sub_1007A35F0(a1, *(void (**)(char *))(v4 + 16), *(_QWORD *)(v4 + 24), v4 + ((v9 + 32) & ~v9), a2, a3, a4);
}

uint64_t sub_1007BDBB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A39B0(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1011036B8);
}

uint64_t sub_1007BDBD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for LostModeRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v7 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1007BDCDC(uint64_t a1)
{
  return sub_1007BDCF0(a1, type metadata accessor for LostModeRecord, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))sub_100857530);
}

uint64_t sub_1007BDCF0(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a3(a1, v3 + v6, *(_QWORD *)(v3 + v7), *(_QWORD *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1007BDD60(uint64_t a1)
{
  uint64_t v1;

  return sub_1007A2D6C(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), type metadata accessor for LostModeRecord, (uint64_t)&unk_1010929B0, (uint64_t)sub_1007BD9A8);
}

uint64_t sub_1007BDD94(uint64_t a1)
{
  uint64_t v1;

  return sub_10079CAC8(a1, v1, (uint64_t)&unk_101092960, (uint64_t)sub_1007BD868, (uint64_t)&unk_101092978);
}

void sub_1007BDDC4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1004E5D3C(v1, a1);
}

uint64_t sub_1007BDDCC()
{
  uint64_t v0;

  return sub_1007F5CBC(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

unint64_t sub_1007BDDD4@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1006D24C0(v1, a1);
}

uint64_t sub_1007BDDDC()
{
  uint64_t v0;

  return sub_1007F5E9C(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_1007BDDE4(uint64_t a1)
{
  uint64_t v1;

  return sub_10079441C(a1, v1);
}

uint64_t storeEnumTagSinglePayload for BeaconManagerService.BeaconManagerServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1007BDE38 + 4 * byte_100E4F899[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1007BDE6C + 4 * byte_100E4F894[v4]))();
}

uint64_t sub_1007BDE6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BDE74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007BDE7CLL);
  return result;
}

uint64_t sub_1007BDE88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007BDE90);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1007BDE94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BDE9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerService.BeaconManagerServiceError()
{
  return &type metadata for BeaconManagerService.BeaconManagerServiceError;
}

uint64_t storeEnumTagSinglePayload for BeaconManagerEntitlement(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1007BDF04 + 4 * byte_100E4F8A3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1007BDF38 + 4 * byte_100E4F89E[v4]))();
}

uint64_t sub_1007BDF38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BDF40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007BDF48);
  return result;
}

uint64_t sub_1007BDF54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007BDF5CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1007BDF60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BDF68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerEntitlement()
{
  return &type metadata for BeaconManagerEntitlement;
}

unint64_t sub_1007BDF88()
{
  unint64_t result;

  result = qword_101108450;
  if (!qword_101108450)
  {
    result = swift_getWitnessTable(byte_100E4FDC4, &type metadata for BeaconManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_101108450);
  }
  return result;
}

unint64_t sub_1007BDFD0()
{
  unint64_t result;

  result = qword_101108458;
  if (!qword_101108458)
  {
    result = swift_getWitnessTable("M.$", &type metadata for BeaconManagerService.BeaconManagerServiceError);
    atomic_store(result, (unint64_t *)&qword_101108458);
  }
  return result;
}

unint64_t sub_1007BE018()
{
  unint64_t result;

  result = qword_101108460;
  if (!qword_101108460)
  {
    result = swift_getWitnessTable(byte_100E4FD4C, &type metadata for BeaconManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_101108460);
  }
  return result;
}

void sub_1007BE11C()
{
  sub_100088E9C();
}

void sub_1007BE130()
{
  sub_100088EFC();
}

void sub_1007BE144()
{
  sub_100088F44();
}

void sub_1007BE158()
{
  sub_100088F2C();
}

void sub_1007BE16C()
{
  sub_100088EB4();
}

void sub_1007BE180()
{
  sub_100088EE4();
}

void sub_1007BE194()
{
  sub_1007BC544();
}

void sub_1007BE1A8()
{
  sub_100088ECC();
}

void sub_1007BE1BC()
{
  sub_100088F5C();
}

ValueMetadata *_s34DisplayIdentifierAndMembershipTypeVMa()
{
  return &_s34DisplayIdentifierAndMembershipTypeVN;
}

Swift::Int sub_1007BE1EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)(v5);
  String.hash(into:)(v5, v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1007BE24C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = *((unsigned __int8 *)v1 + 16);
  String.hash(into:)(a1, v2, v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1007BE280()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)(v5);
  String.hash(into:)(v5, v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1007BE2DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char v10;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = *((unsigned __int8 *)a1 + 16);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == *(_QWORD *)a2 && v5 == v7)
    return v6 ^ v8 ^ 1u;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v7, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v6 ^ v8 ^ 1u;
  return result;
}

unint64_t sub_1007BE33C()
{
  unint64_t result;

  result = qword_101108530;
  if (!qword_101108530)
  {
    result = swift_getWitnessTable(byte_100E50064, &_s34DisplayIdentifierAndMembershipTypeVN);
    atomic_store(result, &qword_101108530);
  }
  return result;
}

void sub_1007BE380()
{
  qword_1011B7788 = (uint64_t)&off_101048E88;
}

uint64_t sub_1007BE394(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101113548 + dword_101113548);
  v5 = (_QWORD *)swift_task_alloc(unk_10111354C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return v7(a1, a2);
}

uint64_t sub_1007BE400(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = a2((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v4);
    v11 = swift_release(v4);
    if (v2)
      swift_willThrow(v11);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v9, -1);
    bzero(v12, v9);
    v10 = a2((char *)v12, v8, v4);
    swift_release(v4);
    swift_slowDealloc(v12, -1, -1);
  }
  return v10;
}

Swift::Int sub_1007BE568(Swift::Int result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12)
      goto LABEL_24;
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_24;
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_24;
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    if (*(_BYTE *)(*(_QWORD *)(a3 + 48) + 24 * v14 + 16) == 1)
    {
      *(_QWORD *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100852254(v5, a2, v6, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    goto LABEL_24;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      goto LABEL_24;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_1007BE6E4(Swift::Int result, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  v5 = (unint64_t *)result;
  v6 = 0;
  v7 = 0;
  v8 = a3 + 56;
  v9 = 1 << *(_BYTE *)(a3 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(a3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v7 << 6);
      goto LABEL_5;
    }
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v12)
      goto LABEL_24;
    v16 = *(_QWORD *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v12)
        goto LABEL_24;
      v16 = *(_QWORD *)(v8 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v12)
          goto LABEL_24;
        v16 = *(_QWORD *)(v8 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_20:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_5:
    if ((*(_BYTE *)(*(_QWORD *)(a3 + 48) + 24 * v14 + 16) & 1) == 0)
    {
      *(_QWORD *)(result + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      if (__OFADD__(v6++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100852254(v5, a2, v6, a3);
      }
    }
  }
  v17 = v15 + 3;
  if (v17 >= v12)
    goto LABEL_24;
  v16 = *(_QWORD *)(v8 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v12)
      goto LABEL_24;
    v16 = *(_QWORD *)(v8 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1007BE85C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  __n128 v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1010E9F40 != -1)
    swift_once(&qword_1010E9F40, sub_1007BE380);
  v4 = *(_QWORD *)(qword_1011B7788 + 16);
  if (!v4)
  {
LABEL_15:
    swift_bridgeObjectRetain(a2);
    return a1;
  }
  swift_bridgeObjectRetain(qword_1011B7788);
  v6 = (_QWORD *)(v5 + 40);
  while (1)
  {
    v8 = *(v6 - 1);
    v7 = *v6;
    v9 = swift_bridgeObjectRetain(*v6);
    v10 = String.count.getter(a1, a2, v9);
    if (String.count.getter(v8, v7, v11) >= v10)
    {
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    v13 = String.count.getter(v8, v7, v12);
    v14 = String.index(_:offsetBy:)(15, v13, a1, a2);
    String.subscript.getter(15, v14, a1, a2);
    v15 = Substring.lowercased()();
    swift_bridgeObjectRelease();
    v16 = String.lowercased()();
    swift_bridgeObjectRelease();
    if (v15._countAndFlagsBits == v16._countAndFlagsBits && v15._object == v16._object)
      break;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15._countAndFlagsBits, v15._object, v16._countAndFlagsBits, v16._object, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      result = swift_bridgeObjectRelease();
      goto LABEL_17;
    }
LABEL_6:
    v6 += 2;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease_n(v15._object, 2);
LABEL_17:
  v20 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v20 = a1 & 0xFFFFFFFFFFFFLL;
  if (4 * v20 < v14 >> 14)
  {
    __break(1u);
  }
  else
  {
    v21 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
      v21 = 11;
    v22 = String.subscript.getter(v14, v21 | (v20 << 16), a1, a2);
    a1 = static String._fromSubstring(_:)(v22);
    swift_bridgeObjectRelease();
    return a1;
  }
  return result;
}

uint64_t sub_1007BEA7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007BEA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10110853C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004C28;
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101113548 + dword_101113548);
  v5 = (_QWORD *)swift_task_alloc(unk_10111354C);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004A74;
  return v7(v2, v3);
}

uint64_t _s31DisplayIdentifierMembershipTypeOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007BEB64 + 4 * byte_100E50035[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007BEB98 + 4 * byte_100E50030[v4]))();
}

uint64_t sub_1007BEB98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BEBA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007BEBA8);
  return result;
}

uint64_t sub_1007BEBB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007BEBBCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007BEBC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007BEBC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s31DisplayIdentifierMembershipTypeOMa()
{
  return &_s31DisplayIdentifierMembershipTypeON;
}

unint64_t sub_1007BEBE8()
{
  unint64_t result;

  result = qword_101108548;
  if (!qword_101108548)
  {
    result = swift_getWitnessTable(byte_100E50130, &_s31DisplayIdentifierMembershipTypeON);
    atomic_store(result, (unint64_t *)&qword_101108548);
  }
  return result;
}

uint64_t sub_1007BEC2C(uint64_t a1)
{
  return sub_1007BEC4C(a1, "Paired %{private,mask.hash}s [%s]", 0);
}

uint64_t sub_1007BEC3C(uint64_t a1)
{
  return sub_1007BEC4C(a1, "Unpaired %{private,mask.hash}s [%s]", 1);
}

uint64_t sub_1007BEC4C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v5 = type metadata accessor for PairingEvent(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  if (qword_1010E9F48 != -1)
    swift_once(&qword_1010E9F48, sub_1007C13C8);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B7790);
  sub_1007C1448(a1, (uint64_t)v13);
  v15 = sub_1007C1448(a1, (uint64_t)v11);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(32, -1);
    v34 = v5;
    v19 = v18;
    v20 = swift_slowAlloc(64, -1);
    v33 = v20;
    *(_DWORD *)v19 = 141558531;
    v38 = 1752392040;
    v39 = v20;
    v35 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    v36 = a3;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_1001D4C18();
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    v38 = sub_100016940(v23, v24, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v19 + 22) = 2080;
    sub_1009A2CF8();
    v26 = v25;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v29 = v28;

    v38 = sub_100016940(v27, v29, &v39);
    a1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v19 + 24, v19 + 32);
    a3 = v36;
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v37, (uint8_t *)v19, 0x20u);
    v30 = v33;
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v31 = v19;
    v5 = v34;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
  }

  sub_1007C1448(a1, (uint64_t)v7);
  swift_storeEnumTagMultiPayload(v7, v5, a3);
  PassthroughSubject.send(_:)(v7);
  return sub_1000126B0((uint64_t)v7, type metadata accessor for PairingEvent);
}

uint64_t type metadata accessor for LocalPairingMonitor()
{
  return objc_opt_self(_TtC12searchpartyd19LocalPairingMonitor);
}

unint64_t sub_1007BEFBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = type metadata accessor for OwnedBeaconRecord(0);
    v10 = *(int *)(v9 + 20);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = (char *)a2 + *(int *)(v9 + 24);
    v15 = type metadata accessor for StableIdentifier(0);
    v16 = swift_getEnumCaseMultiPayload(v14, v15);
    if (EnumCaseMultiPayload == 1)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  v17 = *a2;
  *a1 = *a2;
  v18 = v17 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v18;
}

uint64_t sub_1007BF7B4(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9 = a1 + v4[6];
  v10 = type metadata accessor for StableIdentifier(0);
  v11 = swift_getEnumCaseMultiPayload(v9, v10);
  if (EnumCaseMultiPayload == 1)
  {
    switch(v11)
    {
      case 0:
      case 4:
        goto LABEL_7;
      case 1:
        goto LABEL_4;
      case 2:
        goto LABEL_5;
      case 3:
        goto LABEL_6;
      default:
        break;
    }
  }
  else
  {
    switch(v11)
    {
      case 0:
      case 4:
        goto LABEL_7;
      case 1:
LABEL_4:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2:
LABEL_5:
        v8(v9, v6);
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3:
LABEL_6:
        v8(v9, v6);
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
  }
  v12 = a1 + v4[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6))
    v8(v12, v6);
  v13 = a1 + v4[8];
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  sub_10001BC14(*(_QWORD *)(a1 + v4[9]), *(_QWORD *)(a1 + v4[9] + 8));
  v15 = (uint64_t *)(a1 + v4[10]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10001BC14(*v15, v16);
  v17 = (uint64_t *)(a1 + v4[11]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  sub_10001BC14(*(_QWORD *)(a1 + v4[12]), *(_QWORD *)(a1 + v4[12] + 8));
  sub_10001BC14(*(_QWORD *)(a1 + v4[13]), *(_QWORD *)(a1 + v4[13] + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1007BFA38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(int *)(v8 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  v13 = (char *)a2 + *(int *)(v8 + 24);
  v14 = type metadata accessor for StableIdentifier(0);
  v15 = swift_getEnumCaseMultiPayload(v13, v14);
  if (EnumCaseMultiPayload == 1)
    __asm { BR              X10 }
  __asm { BR              X10 }
}

void sub_1007BFB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(void *, const void *, uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;

  v20 = v19[1];
  *v16 = *v19;
  v16[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_storeEnumTagMultiPayload(v16, v17, v18);
  v21 = v14[7];
  v22 = (void *)(v11 + v21);
  v23 = (const void *)(v13 + v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13 + v21, 1, v15))
  {
    v24 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    a11(v22, v23, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v15);
  }
  v25 = v14[8];
  v26 = v11 + v25;
  v27 = v13 + v25;
  v28 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
  v29 = v14[9];
  v30 = (uint64_t *)(v11 + v29);
  v31 = (uint64_t *)(v13 + v29);
  v32 = *v31;
  v33 = v31[1];
  sub_10001BBBC(*v31, v33);
  *v30 = v32;
  v30[1] = v33;
  v34 = v14[10];
  v35 = v11 + v34;
  v36 = (uint64_t *)(v13 + v34);
  v37 = v36[1];
  if (v37 >> 60 == 15)
  {
    *(_OWORD *)v35 = *(_OWORD *)v36;
  }
  else
  {
    v38 = *v36;
    sub_10001BBBC(*v36, v36[1]);
    *(_QWORD *)v35 = v38;
    *(_QWORD *)(v35 + 8) = v37;
  }
  v39 = v14[11];
  v40 = v11 + v39;
  v41 = (uint64_t *)(v13 + v39);
  v42 = v41[1];
  if (v42 >> 60 == 15)
  {
    *(_OWORD *)v40 = *(_OWORD *)v41;
  }
  else
  {
    v43 = *v41;
    sub_10001BBBC(*v41, v41[1]);
    *(_QWORD *)v40 = v43;
    *(_QWORD *)(v40 + 8) = v42;
  }
  v44 = v14[12];
  v45 = (uint64_t *)(v11 + v44);
  v46 = (uint64_t *)(v13 + v44);
  v47 = *v46;
  v48 = v46[1];
  sub_10001BBBC(*v46, v48);
  *v45 = v47;
  v45[1] = v48;
  v49 = v14[13];
  v50 = (uint64_t *)(v11 + v49);
  v51 = (uint64_t *)(v13 + v49);
  v52 = *v51;
  v53 = v51[1];
  sub_10001BBBC(*v51, v53);
  *v50 = v52;
  v50[1] = v53;
  v54 = v14[14];
  v55 = (_QWORD *)(v11 + v54);
  v56 = (_QWORD *)(v13 + v54);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  v58 = v14[15];
  v59 = (_QWORD *)(v11 + v58);
  v60 = (_QWORD *)(v13 + v58);
  v61 = v60[1];
  *v59 = *v60;
  v59[1] = v61;
  JUMPOUT(0x1007C0124);
}

void sub_1007BFB48()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  JUMPOUT(0x1007BFC78);
}

void sub_1007BFE38()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[1];
  *v0 = *v1;
  v0[1] = v2;
  v3 = v1[3];
  v0[2] = v1[2];
  v0[3] = v3;
  v4 = v1[5];
  v0[4] = v1[4];
  v0[5] = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  JUMPOUT(0x1007BFF68);
}

uint64_t sub_1007C01A0(uint64_t result, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int EnumCaseMultiPayload;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;

  v3 = (_QWORD *)result;
  if ((uint64_t *)result != a2)
  {
    sub_1000126B0(result, type metadata accessor for PairingEvent);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *v3 = v7;
    v3[1] = v8;
    v9 = type metadata accessor for OwnedBeaconRecord(0);
    v10 = *(int *)(v9 + 20);
    v11 = (char *)v3 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
    v14 = (char *)a2 + *(int *)(v9 + 24);
    v15 = type metadata accessor for StableIdentifier(0);
    v16 = swift_getEnumCaseMultiPayload(v14, v15);
    if (EnumCaseMultiPayload == 1)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  return result;
}

uint64_t type metadata accessor for PairingEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_101108678;
  if (!qword_101108678)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairingEvent);
  return result;
}

_OWORD *sub_1007C0A20(_OWORD *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *(_OWORD *)a2;
  v6 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = &a2[v7];
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  v13 = v6[6];
  v14 = (char *)a1 + v13;
  v15 = &a2[v13];
  v16 = type metadata accessor for StableIdentifier(0);
  v17 = swift_getEnumCaseMultiPayload(v15, v16);
  if (EnumCaseMultiPayload == 1)
  {
    if (v17 == 3)
    {
      v12(v14, v15, v10);
      v20 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v14[v20[12]] = *(_OWORD *)&v15[v20[12]];
      *(_OWORD *)&v14[v20[16]] = *(_OWORD *)&v15[v20[16]];
      *(_OWORD *)&v14[v20[20]] = *(_OWORD *)&v15[v20[20]];
      v14[v20[24]] = v15[v20[24]];
      swift_storeEnumTagMultiPayload(v14, v16, 3);
    }
    else if (v17 == 2)
    {
      v12(v14, v15, v10);
      v18 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v14[v18[12]] = *(_OWORD *)&v15[v18[12]];
      *(_OWORD *)&v14[v18[16]] = *(_OWORD *)&v15[v18[16]];
      *(_OWORD *)&v14[v18[20]] = *(_OWORD *)&v15[v18[20]];
      *(_WORD *)&v14[v18[24]] = *(_WORD *)&v15[v18[24]];
      *(_OWORD *)&v14[v18[28]] = *(_OWORD *)&v15[v18[28]];
      swift_storeEnumTagMultiPayload(v14, v16, 2);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v21 = v6[7];
    v22 = (char *)a1 + v21;
    v23 = &a2[v21];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v21], 1, v10))
    {
      v24 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v12(v22, v23, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v22, 0, 1, v10);
    }
    v25 = v6[8];
    v26 = (char *)a1 + v25;
    v27 = &a2[v25];
    v28 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
    v29 = 1;
  }
  else
  {
    if (v17 == 3)
    {
      v12(v14, v15, v10);
      v30 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v14[v30[12]] = *(_OWORD *)&v15[v30[12]];
      *(_OWORD *)&v14[v30[16]] = *(_OWORD *)&v15[v30[16]];
      *(_OWORD *)&v14[v30[20]] = *(_OWORD *)&v15[v30[20]];
      v14[v30[24]] = v15[v30[24]];
      swift_storeEnumTagMultiPayload(v14, v16, 3);
    }
    else if (v17 == 2)
    {
      v12(v14, v15, v10);
      v19 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v14[v19[12]] = *(_OWORD *)&v15[v19[12]];
      *(_OWORD *)&v14[v19[16]] = *(_OWORD *)&v15[v19[16]];
      *(_OWORD *)&v14[v19[20]] = *(_OWORD *)&v15[v19[20]];
      *(_WORD *)&v14[v19[24]] = *(_WORD *)&v15[v19[24]];
      *(_OWORD *)&v14[v19[28]] = *(_OWORD *)&v15[v19[28]];
      swift_storeEnumTagMultiPayload(v14, v16, 2);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    v31 = v6[7];
    v32 = (char *)a1 + v31;
    v33 = &a2[v31];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(&a2[v31], 1, v10))
    {
      v34 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v12(v32, v33, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v32, 0, 1, v10);
    }
    v35 = v6[8];
    v36 = (char *)a1 + v35;
    v37 = &a2[v35];
    v38 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 32))(v36, v37, v38);
    v29 = 0;
  }
  *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)&a2[v6[9]];
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)&a2[v6[10]];
  *(_OWORD *)((char *)a1 + v6[11]) = *(_OWORD *)&a2[v6[11]];
  *(_OWORD *)((char *)a1 + v6[12]) = *(_OWORD *)&a2[v6[12]];
  *(_OWORD *)((char *)a1 + v6[13]) = *(_OWORD *)&a2[v6[13]];
  *(_OWORD *)((char *)a1 + v6[14]) = *(_OWORD *)&a2[v6[14]];
  *(_OWORD *)((char *)a1 + v6[15]) = *(_OWORD *)&a2[v6[15]];
  *(_QWORD *)((char *)a1 + v6[16]) = *(_QWORD *)&a2[v6[16]];
  *(_QWORD *)((char *)a1 + v6[17]) = *(_QWORD *)&a2[v6[17]];
  *((_BYTE *)a1 + v6[18]) = a2[v6[18]];
  *((_BYTE *)a1 + v6[19]) = a2[v6[19]];
  *((_BYTE *)a1 + v6[20]) = a2[v6[20]];
  swift_storeEnumTagMultiPayload(a1, a3, v29);
  return a1;
}

char *sub_1007C0EB0(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for PairingEvent);
    v42 = a3;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    v7 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v8 = v7[5];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v13(v9, v10, v11);
    v14 = v7[6];
    v15 = &a1[v14];
    v16 = &a2[v14];
    v17 = type metadata accessor for StableIdentifier(0);
    v18 = swift_getEnumCaseMultiPayload(v16, v17);
    if (EnumCaseMultiPayload == 1)
    {
      if (v18 == 3)
      {
        v13(v15, v16, v11);
        v21 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        *(_OWORD *)&v15[v21[12]] = *(_OWORD *)&v16[v21[12]];
        *(_OWORD *)&v15[v21[16]] = *(_OWORD *)&v16[v21[16]];
        *(_OWORD *)&v15[v21[20]] = *(_OWORD *)&v16[v21[20]];
        v15[v21[24]] = v16[v21[24]];
        swift_storeEnumTagMultiPayload(v15, v17, 3);
      }
      else if (v18 == 2)
      {
        v13(v15, v16, v11);
        v19 = (int *)sub_10001A9A8(&qword_101106F40);
        *(_OWORD *)&v15[v19[12]] = *(_OWORD *)&v16[v19[12]];
        *(_OWORD *)&v15[v19[16]] = *(_OWORD *)&v16[v19[16]];
        *(_OWORD *)&v15[v19[20]] = *(_OWORD *)&v16[v19[20]];
        *(_WORD *)&v15[v19[24]] = *(_WORD *)&v16[v19[24]];
        *(_OWORD *)&v15[v19[28]] = *(_OWORD *)&v16[v19[28]];
        swift_storeEnumTagMultiPayload(v15, v17, 2);
      }
      else
      {
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      v22 = v7[7];
      v23 = &a1[v22];
      v24 = &a2[v22];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v22], 1, v11))
      {
        v25 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v13(v23, v24, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
      }
      v26 = v42;
      v27 = v7[8];
      v28 = &a1[v27];
      v29 = &a2[v27];
      v30 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v28, v29, v30);
      v31 = 1;
    }
    else
    {
      if (v18 == 3)
      {
        v13(v15, v16, v11);
        v32 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        *(_OWORD *)&v15[v32[12]] = *(_OWORD *)&v16[v32[12]];
        *(_OWORD *)&v15[v32[16]] = *(_OWORD *)&v16[v32[16]];
        *(_OWORD *)&v15[v32[20]] = *(_OWORD *)&v16[v32[20]];
        v15[v32[24]] = v16[v32[24]];
        swift_storeEnumTagMultiPayload(v15, v17, 3);
      }
      else if (v18 == 2)
      {
        v13(v15, v16, v11);
        v20 = (int *)sub_10001A9A8(&qword_101106F40);
        *(_OWORD *)&v15[v20[12]] = *(_OWORD *)&v16[v20[12]];
        *(_OWORD *)&v15[v20[16]] = *(_OWORD *)&v16[v20[16]];
        *(_OWORD *)&v15[v20[20]] = *(_OWORD *)&v16[v20[20]];
        *(_WORD *)&v15[v20[24]] = *(_WORD *)&v16[v20[24]];
        *(_OWORD *)&v15[v20[28]] = *(_OWORD *)&v16[v20[28]];
        swift_storeEnumTagMultiPayload(v15, v17, 2);
      }
      else
      {
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      v33 = v7[7];
      v34 = &a1[v33];
      v35 = &a2[v33];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(&a2[v33], 1, v11))
      {
        v36 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        v13(v34, v35, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v34, 0, 1, v11);
      }
      v26 = v42;
      v37 = v7[8];
      v38 = &a1[v37];
      v39 = &a2[v37];
      v40 = type metadata accessor for Date(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32))(v38, v39, v40);
      v31 = 0;
    }
    *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
    *(_OWORD *)&a1[v7[10]] = *(_OWORD *)&a2[v7[10]];
    *(_OWORD *)&a1[v7[11]] = *(_OWORD *)&a2[v7[11]];
    *(_OWORD *)&a1[v7[12]] = *(_OWORD *)&a2[v7[12]];
    *(_OWORD *)&a1[v7[13]] = *(_OWORD *)&a2[v7[13]];
    *(_OWORD *)&a1[v7[14]] = *(_OWORD *)&a2[v7[14]];
    *(_OWORD *)&a1[v7[15]] = *(_OWORD *)&a2[v7[15]];
    *(_QWORD *)&a1[v7[16]] = *(_QWORD *)&a2[v7[16]];
    *(_QWORD *)&a1[v7[17]] = *(_QWORD *)&a2[v7[17]];
    a1[v7[18]] = a2[v7[18]];
    a1[v7[19]] = a2[v7[19]];
    a1[v7[20]] = a2[v7[20]];
    swift_storeEnumTagMultiPayload(a1, v26, v31);
  }
  return a1;
}

uint64_t sub_1007C1364(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for OwnedBeaconRecord(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
    return 0;
  }
  return result;
}

uint64_t sub_1007C13C8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7790);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7790);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000013, 0x8000000100EC6340);
}

uint64_t sub_1007C1448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_1007C148C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1007C1514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1007C1570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1007C15CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1007C1628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1007C1684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007C1690);
}

uint64_t sub_1007C1690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1007C171C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007C1728);
}

uint64_t sub_1007C1728(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for AirPodsLEPairingLockCheckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_101108708;
  if (!qword_101108708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLEPairingLockCheckEndPoint);
  return result;
}

uint64_t sub_1007C17DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for FMNAccountType(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E50208;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1007C184C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, _QWORD);
  Swift::String v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t *, _QWORD);
  Swift::String v22;
  void *v23;
  id v24;
  unsigned int v25;
  NSString v26;
  id v27;
  _BYTE v28[16];
  uint64_t v29;

  v3 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v28[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for FMNAccountType(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (*(_BYTE *)(v1 + *(int *)(type metadata accessor for AirPodsLEPairingLockCheckEndPoint(0) + 20)) == 1)
  {
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for FMNAccountType.none(_:), v7);
    v11 = type metadata accessor for AccountURLComponents();
    swift_allocObject(v11, 56, 7);
    v12 = sub_100C511C4((uint64_t)v10);
    v13 = sub_10001A9A8(&qword_1010EBF60);
    v14 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v12, v13);
    URLComponents.init()(v14);
    URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
    URLComponents.host.setter();
    URLComponents.path.setter();
    swift_release();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 32))(a1, v6, v3);
    v15 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v29);
    v16._countAndFlagsBits = 0xD00000000000002ALL;
    v16._object = (void *)0x8000000100EE5210;
    String.append(_:)(v16);
    v15(&v29, 0);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v8 + 16))(v10, v1, v7);
    v17 = type metadata accessor for AccountURLComponents();
    swift_allocObject(v17, 56, 7);
    v18 = sub_100C511C4((uint64_t)v10);
    v19 = sub_10001A9A8(&qword_1010EBF60);
    v20 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v18, v19);
    URLComponents.init()(v20);
    URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
    URLComponents.host.setter();
    URLComponents.path.setter();
    swift_release();
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v4 + 32))(a1, v6, v3);
    v21 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v29);
    v22._countAndFlagsBits = 0xD00000000000001BLL;
    v22._object = (void *)0x8000000100EE51F0;
    String.append(_:)(v22);
    v21(&v29, 0);
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v23 = (void *)qword_1011B7C08;
    v24 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v25 = objc_msgSend(v24, "isInternalBuild");

    if (v25)
    {
      v26 = String._bridgeToObjectiveC()();
      v27 = objc_msgSend(v23, "stringForKey:", v26);

      if (v27)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v27);

        URLComponents.host.setter();
      }
    }
  }
}

uint64_t sub_1007C1C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B77A8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B77A8);
  if (qword_1010EA1E0 != -1)
    swift_once(&qword_1010EA1E0, sub_100B1AEFC);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7C90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1007C1C90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  type metadata accessor for Transaction(0);
  v2 = swift_allocObject(&unk_101092E58, 32, 7);
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  swift_retain(v0);
  static Transaction.asyncTask(name:block:)("LocalFindableConnectionMaterialMonitoringSession", 48, 2, &unk_101108878, v2);
  return swift_release(v2);
}

uint64_t sub_1007C1D0C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007C1D68, 0, 0);
}

uint64_t sub_1007C1D68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for TaskPriority(0);
  v6 = *(_OWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = swift_allocObject(&unk_101092E80, 48, 7);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_OWORD *)(v3 + 32) = v6;
  swift_retain();
  v4 = sub_100791A98(v1, (uint64_t)&unk_101108890, v3);
  sub_100004048(v1, &qword_1010F46C0);
  *(_QWORD *)(v6 + 40) = v4;
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007C1E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4[44] = a4;
  v5 = type metadata accessor for UUID(0);
  v4[45] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[46] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[47] = swift_task_alloc(v7);
  v4[48] = swift_task_alloc(v7);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v4[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v4[50] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[51] = v10;
  v4[52] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CloudStorageStore.State(0);
  v4[53] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[54] = v12;
  v4[55] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_101100420);
  v4[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101100438);
  v4[57] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[58] = v15;
  v4[59] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1011088A0);
  v4[60] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[61] = v17;
  v4[62] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_101100430);
  v4[63] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[64] = v19;
  v4[65] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007C1FC0, 0, 0);
}

uint64_t sub_1007C1FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (*v4)(void);

  static Task<>.checkCancellation()(a1);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v1 + 296, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v1 + 136);
  if (*(_QWORD *)(v1 + 160))
  {
    sub_10000F9FC((__int128 *)(v1 + 136), v1 + 56);
    sub_10001AA44((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
    v4 = (uint64_t (*)(void))((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v1 + 528) = v3;
    *v3 = v1;
    v3[1] = sub_1007C2134;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007C2134(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007C2190, 0, 0);
}

uint64_t sub_1007C2190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 536);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (v1)
    return swift_task_switch(sub_1007C231C, *(_QWORD *)(v0 + 536), 0);
  if (qword_1010E9F50 != -1)
    swift_once(&qword_1010E9F50, sub_1007C1C00);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B77A8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing CloudStorageService!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 496);
  v9 = *(_QWORD *)(v0 + 472);
  v11 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 448);
  v12 = *(_QWORD *)(v0 + 416);
  v14 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 376);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007C231C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 536) + 128);
  *(_QWORD *)(v0 + 544) = v1;
  return swift_task_switch(sub_1007C2338, v1, 0);
}

uint64_t sub_1007C2338()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[68];
  v3 = v0[61];
  v2 = v0[62];
  v4 = v0[60];
  v5 = v0[53];
  v6 = swift_allocObject(&unk_101092EA8, 24, 7);
  swift_weakInit(v6 + 16, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v5, v2, sub_1005CD3D8, v6, v5);
  swift_release();
  return swift_task_switch(sub_1007C2400, 0, 0);
}

uint64_t sub_1007C2400()
{
  _QWORD *v0;
  _QWORD *v1;

  AsyncStream.makeAsyncIterator()(v0[63]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[69] = v1;
  *v1 = v0;
  v1[1] = sub_1007C246C;
  return AsyncStream.Iterator.next(isolation:)(v0[56], 0, 0, v0[57]);
}

uint64_t sub_1007C246C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 552));
  return swift_task_switch(sub_1007C24C0, 0, 0);
}

uint64_t sub_1007C24C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  Class isa;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  Class v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 424);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 432) + 48))(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD *)(v0 + 520);
    v4 = *(_QWORD *)(v0 + 504);
    v5 = *(_QWORD *)(v0 + 512);
    v7 = *(_QWORD *)(v0 + 464);
    v6 = *(_QWORD *)(v0 + 472);
    v8 = *(_QWORD *)(v0 + 456);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v9 = *(_QWORD *)(v0 + 496);
    v10 = *(_QWORD *)(v0 + 472);
    v12 = *(_QWORD *)(v0 + 440);
    v11 = *(_QWORD *)(v0 + 448);
    v13 = *(_QWORD *)(v0 + 416);
    v15 = *(_QWORD *)(v0 + 384);
    v14 = *(_QWORD *)(v0 + 392);
    v16 = *(_QWORD *)(v0 + 376);
    swift_task_dealloc(*(_QWORD *)(v0 + 520));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v18 = *(_QWORD *)(v0 + 440);
  sub_1000126EC(v1, v18, type metadata accessor for CloudStorageStore.State);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v2);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 368) + 32))(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 360));
      if (qword_1010E9F50 != -1)
        swift_once(&qword_1010E9F50, sub_1007C1C00);
      v20 = *(_QWORD *)(v0 + 376);
      v21 = *(_QWORD *)(v0 + 384);
      v22 = *(_QWORD *)(v0 + 360);
      v23 = *(_QWORD *)(v0 + 368);
      v24 = type metadata accessor for Logger(0);
      sub_10001A9E8(v24, (uint64_t)qword_1011B77A8);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v21, v22);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter(v26);
      v28 = os_log_type_enabled(v26, v27);
      v29 = *(_QWORD *)(v0 + 376);
      v30 = *(_QWORD *)(v0 + 384);
      v31 = *(_QWORD *)(v0 + 360);
      v32 = *(_QWORD *)(v0 + 368);
      if (v28)
      {
        v33 = swift_slowAlloc(22, -1);
        v34 = swift_slowAlloc(64, -1);
        v73 = v34;
        *(_DWORD *)v33 = 136315394;
        *(_QWORD *)(v33 + 4) = sub_100016940(0xD000000000000019, 0x8000000100EE52C0, &v73);
        *(_WORD *)(v33 + 12) = 2080;
        v35 = sub_1001D4C18();
        v36 = dispatch thunk of CustomStringConvertible.description.getter(v31, v35);
        *(_QWORD *)(v33 + 14) = sub_100016940(v36, v37, &v73);
        swift_bridgeObjectRelease();
        v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v38(v29, v31);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Deleted CK record type: %s id:%s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        v38(v30, v31);
      }
      else
      {

        v48 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
        v48(v29, v31);
        v48(v30, v31);
      }
    }
  }
  else
  {
    sub_10000F9FC(*(__int128 **)(v0 + 440), v0 + 176);
    if (qword_1010E9F50 != -1)
      swift_once(&qword_1010E9F50, sub_1007C1C00);
    v39 = type metadata accessor for Logger(0);
    sub_10001A9E8(v39, (uint64_t)qword_1011B77A8);
    v40 = sub_100030784(v0 + 176, v0 + 216);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v73 = v44;
      *(_DWORD *)v43 = 136315138;
      sub_100030784(v0 + 216, v0 + 96);
      v45 = sub_10001A9A8(&qword_101100440);
      v46 = String.init<A>(describing:)(v0 + 96, v45);
      *(_QWORD *)(v43 + 4) = sub_100016940(v46, v47, &v73);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Received modified CK record: [%s]", (uint8_t *)v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
    }

    v49 = *(_QWORD *)(v0 + 400);
    v50 = *(_QWORD *)(v0 + 408);
    v51 = *(_QWORD *)(v0 + 392);
    sub_100030784(v0 + 176, v0 + 256);
    v52 = sub_10001A9A8(&qword_101100440);
    v53 = swift_dynamicCast(v51, v0 + 256, v52, v49, 6);
    v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56);
    if ((v53 & 1) != 0)
    {
      v55 = *(_QWORD *)(v0 + 416);
      v56 = *(_QWORD *)(v0 + 392);
      v57 = *(_QWORD *)(v0 + 400);
      v54(v56, 0, 1, v57);
      sub_1000126EC(v56, v55, type metadata accessor for LocalFindableAccessoryRecord);
      v58 = objc_msgSend(objc_allocWithZone((Class)SPPeripheralConnectionMaterial), "init");
      *(_QWORD *)(v0 + 560) = v58;
      v59 = v55 + *(int *)(v57 + 52);
      v60 = (uint64_t *)(v59 + *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20));
      v61 = *v60;
      v62 = v60[1];
      sub_10001BBBC(*v60, v62);
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14(v61, v62);
      objc_msgSend(v58, "setIrkData:", isa);

      v65 = MACAddress.bluetoothAddressWithType.getter(v64);
      v67 = v66;
      v68 = Data._bridgeToObjectiveC()().super.isa;
      sub_10001BC14(v65, v67);
      objc_msgSend(v58, "setBtAddressWithTypeData:", v68);

      v69 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 568) = v69;
      v70 = sub_10001A9A8(&qword_1011088A8);
      *v69 = v0;
      v69[1] = sub_1007C2B60;
      return withCheckedContinuation<A>(isolation:function:_:)(v0 + 320, 0, 0, 0x736553636E797361, 0xED0000736E6F6973, sub_1007C33B8, *(_QWORD *)(v0 + 352), v70);
    }
    v71 = *(_QWORD *)(v0 + 392);
    v54(v71, 1, 1, *(_QWORD *)(v0 + 400));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    sub_100004048(v71, (uint64_t *)&unk_1010EDC50);
  }
  v72 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 552) = v72;
  *v72 = v0;
  v72[1] = sub_1007C246C;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 448), 0, 0, *(_QWORD *)(v0 + 456));
}

uint64_t sub_1007C2B60()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 568));
  return swift_task_switch(sub_1007C2BB4, 0, 0);
}

void sub_1007C2BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v1 = *(_QWORD *)(v0 + 320);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 320);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10001A9A8((uint64_t *)&unk_1010F78E0);
    v5 = sub_1007C33C0();
    v6 = Set.Iterator.init(_cocoa:)((_QWORD *)(v0 + 16), v3, v4, v5);
    v1 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v8 = *(_QWORD *)(v0 + 32);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 592) = v8;
    *(_QWORD *)(v0 + 584) = v7;
    *(_QWORD *)(v0 + 576) = v1;
    if (v1 < 0)
    {
      v25 = __CocoaSet.Iterator.next()(v6);
      if (v25)
      {
        v26 = v25;
        *(_QWORD *)(v0 + 344) = v25;
        swift_unknownObjectRetain(v25);
        v27 = sub_10001A9A8((uint64_t *)&unk_1010F78E0);
        swift_dynamicCast(v0 + 336, v0 + 344, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
        v14 = *(_QWORD *)(v0 + 336);
        swift_unknownObjectRelease(v26);
        v13 = v9;
        v11 = v10;
LABEL_9:
        *(_QWORD *)(v0 + 616) = v11;
        *(_QWORD *)(v0 + 608) = v13;
        *(_QWORD *)(v0 + 600) = v14;
        if (v14)
        {
          v15 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
          *(_QWORD *)(v0 + 624) = v15;
          *v15 = v0;
          v15[1] = sub_1007C2EAC;
          XPCSession.proxy(errorHandler:)(v0 + 328, SharingCircleWildAdvertisementKey.init(key:), 0);
          return;
        }
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    if (v10)
    {
LABEL_7:
      v11 = (v10 - 1) & v10;
      v12 = __clz(__rbit64(v10)) | (v9 << 6);
      v13 = v9;
LABEL_8:
      v14 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v12);
      swift_retain();
      goto LABEL_9;
    }
  }
  else
  {
    v9 = 0;
    v16 = -1;
    v17 = -1 << *(_BYTE *)(v1 + 32);
    v8 = ~v17;
    v7 = v1 + 56;
    v18 = *(_QWORD *)(v1 + 56);
    v19 = -v17;
    v20 = v19 < 64;
    v21 = -1 << v19;
    *(_QWORD *)(v0 + 592) = v8;
    if (v20)
      v16 = ~v21;
    v10 = v16 & v18;
    *(_QWORD *)(v0 + 584) = v7;
    *(_QWORD *)(v0 + 576) = v1;
    if ((v16 & v18) != 0)
      goto LABEL_7;
  }
  v22 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    v23 = (unint64_t)(v8 + 64) >> 6;
    if (v22 < v23)
    {
      v24 = *(_QWORD *)(v7 + 8 * v22);
      v13 = v9 + 1;
      if (v24)
      {
LABEL_18:
        v11 = (v24 - 1) & v24;
        v12 = __clz(__rbit64(v24)) + (v13 << 6);
        goto LABEL_8;
      }
      v13 = v9 + 2;
      if (v9 + 2 < v23)
      {
        v24 = *(_QWORD *)(v7 + 8 * v13);
        if (v24)
          goto LABEL_18;
        v13 = v9 + 3;
        if (v9 + 3 < v23)
        {
          v24 = *(_QWORD *)(v7 + 8 * v13);
          if (v24)
            goto LABEL_18;
          v13 = v9 + 4;
          if (v9 + 4 < v23)
          {
            v24 = *(_QWORD *)(v7 + 8 * v13);
            if (v24)
              goto LABEL_18;
            v28 = v9 + 5;
            while (v23 != v28)
            {
              v24 = *(_QWORD *)(v7 + 8 * v28++);
              if (v24)
              {
                v13 = v28 - 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
LABEL_31:
    v29 = *(_QWORD *)(v0 + 576);
    v30 = *(_QWORD *)(v0 + 416);

    sub_10007CC38(v29);
    sub_1007C340C(v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    v31 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 552) = v31;
    *v31 = v0;
    v31[1] = sub_1007C246C;
    AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 448), 0, 0, *(_QWORD *)(v0 + 456));
    return;
  }
  __break(1u);
}

uint64_t sub_1007C2EAC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 624));
  return swift_task_switch(sub_1007C2F00, 0, 0);
}

uint64_t sub_1007C2F00()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  Class isa;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v1 = (void *)v0[41];
  if (v1)
  {
    v2 = v0[70];
    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, "updatedConnectionMaterialForAccessory:connectionMaterial:", isa, v2);
    swift_release();

    result = swift_unknownObjectRelease(v1);
  }
  else
  {
    result = swift_release();
  }
  v5 = v0[77];
  v6 = v0[76];
  v7 = v0[72];
  if (v7 < 0)
  {
    v12 = __CocoaSet.Iterator.next()(result);
    if (v12)
    {
      v13 = v12;
      v0[43] = v12;
      swift_unknownObjectRetain(v12);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010F78E0);
      swift_dynamicCast(v0 + 42, v0 + 43, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      v11 = v0[42];
      swift_unknownObjectRelease(v13);
      v10 = v6;
      v8 = v5;
LABEL_10:
      v0[77] = v8;
      v0[76] = v10;
      v0[75] = v11;
      if (v11)
      {
        v15 = (_QWORD *)swift_task_alloc(async function pointer to XPCSession.proxy(errorHandler:)[1]);
        v0[78] = v15;
        *v15 = v0;
        v15[1] = sub_1007C2EAC;
        return XPCSession.proxy(errorHandler:)(v0 + 41, SharingCircleWildAdvertisementKey.init(key:), 0);
      }
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if (v5)
  {
    v8 = (v5 - 1) & v5;
    v9 = __clz(__rbit64(v5)) | (v6 << 6);
    v10 = v0[76];
LABEL_7:
    v11 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v9);
    swift_retain();
    goto LABEL_10;
  }
  v16 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    v17 = (unint64_t)(v0[74] + 64) >> 6;
    if (v16 < v17)
    {
      v18 = v0[73];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      v10 = v6 + 1;
      if (v19)
      {
LABEL_15:
        v8 = (v19 - 1) & v19;
        v9 = __clz(__rbit64(v19)) + (v10 << 6);
        goto LABEL_7;
      }
      v10 = v6 + 2;
      if (v6 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v10);
        if (v19)
          goto LABEL_15;
        v10 = v6 + 3;
        if (v6 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * v10);
          if (v19)
            goto LABEL_15;
          v10 = v6 + 4;
          if (v6 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v10);
            if (v19)
              goto LABEL_15;
            v20 = v6 + 5;
            while (v17 != v20)
            {
              v19 = *(_QWORD *)(v18 + 8 * v20++);
              if (v19)
              {
                v10 = v20 - 1;
                goto LABEL_15;
              }
            }
          }
        }
      }
    }
LABEL_26:
    v21 = v0[72];
    v22 = v0[52];

    sub_10007CC38(v21);
    sub_1007C340C(v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 22);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[69] = v23;
    *v23 = v0;
    v23[1] = sub_1007C246C;
    return AsyncStream.Iterator.next(isolation:)(v0[56], 0, 0, v0[57]);
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C31BC()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 40));
}

uint64_t sub_1007C31C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for LocalFindableConnectionMaterialMonitoringSession(uint64_t a1)
{
  uint64_t result;

  result = qword_101108768;
  if (!qword_101108768)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalFindableConnectionMaterialMonitoringSession);
  return result;
}

uint64_t sub_1007C323C(uint64_t a1)
{
  const char *v2;

  v2 = "\b";
  return swift_initClassMetadata2(a1, 256, 1, &v2, a1 + 216);
}

uint64_t sub_1007C327C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007C32A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101108874);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004C28;
  return sub_1007C1D0C(v2, v3);
}

uint64_t sub_1007C32F0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1007C331C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110888C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_1007C1E34(a1, v4, v5, v6);
}

uint64_t sub_1007C3394()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007C33B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1007268DC(a1, v1);
}

unint64_t sub_1007C33C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101110130;
  if (!qword_101110130)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F78E0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for XPCSession<A>, v1);
    atomic_store(result, (unint64_t *)&qword_101110130);
  }
  return result;
}

uint64_t sub_1007C340C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocalFindableAccessoryRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for MetricsResponse()
{
  return &type metadata for MetricsResponse;
}

uint64_t sub_1007C3458(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007C356C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007C3480(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007C356C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007C34A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = sub_10001A9A8(&qword_1011088B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  v8 = sub_1007C356C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MetricsResponse.CodingKeys, &type metadata for MetricsResponse.CodingKeys, v8, v6, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1007C356C()
{
  unint64_t result;

  result = qword_1011088B8;
  if (!qword_1011088B8)
  {
    result = swift_getWitnessTable(byte_100E50378, &type metadata for MetricsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011088B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for MetricsResponse.CodingKeys()
{
  return &type metadata for MetricsResponse.CodingKeys;
}

unint64_t sub_1007C35C4()
{
  unint64_t result;

  result = qword_1011088C0;
  if (!qword_1011088C0)
  {
    result = swift_getWitnessTable(byte_100E50328, &type metadata for MetricsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011088C0);
  }
  return result;
}

unint64_t sub_1007C360C()
{
  unint64_t result;

  result = qword_1011088C8;
  if (!qword_1011088C8)
  {
    result = swift_getWitnessTable(byte_100E50350, &type metadata for MetricsResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011088C8);
  }
  return result;
}

uint64_t sub_1007C3650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  char v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  _QWORD v57[3];

  v5 = 0;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v56 = (unint64_t)(v7 + 63) >> 6;
  v10 = _swiftEmptyDictionarySingleton;
  v55 = a3 + 64;
  while (v9)
  {
    v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    v14 = v13 | (v5 << 6);
LABEL_20:
    v18 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v14);
    v19 = *v18;
    v20 = v18[1];
    v12 = HIBYTE(v20) & 0xF;
    v21 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v20 & 0x2000000000000000) != 0)
      v22 = HIBYTE(v20) & 0xF;
    else
      v22 = v19 & 0xFFFFFFFFFFFFLL;
    if (v22)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v14);
      if ((v20 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain(v20);
        v11 = sub_100C717F4(v19, v20, 10);
        v52 = v51;
        swift_bridgeObjectRelease();
        if ((v52 & 1) == 0)
        {
LABEL_30:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
          v57[0] = v10;
          v29 = sub_100518D38(v11);
          v30 = v10[2];
          v31 = (v28 & 1) == 0;
          v32 = v30 + v31;
          if (__OFADD__(v30, v31))
            goto LABEL_92;
          v33 = v28;
          if (v10[3] >= v32)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_100A9B320();
          }
          else
          {
            sub_100A87CB0(v32, isUniquelyReferenced_nonNull_native);
            v34 = sub_100518D38(v11);
            if ((v33 & 1) != (v35 & 1))
              goto LABEL_94;
            v29 = v34;
          }
          v6 = v55;
          v10 = (_QWORD *)v57[0];
          if ((v33 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(v57[0] + 56) + 8 * v29) = v23;
          }
          else
          {
            *(_QWORD *)(v57[0] + 8 * (v29 >> 6) + 64) |= 1 << v29;
            v48 = 8 * v29;
            *(_QWORD *)(v10[6] + v48) = v11;
            *(_QWORD *)(v10[7] + v48) = v23;
            v49 = v10[2];
            v15 = __OFADD__(v49, 1);
            v50 = v49 + 1;
            if (v15)
              goto LABEL_93;
            v10[2] = v50;
          }
          swift_bridgeObjectRelease();
        }
      }
      else if ((v20 & 0x2000000000000000) != 0)
      {
        v57[0] = v19;
        v57[1] = v20 & 0xFFFFFFFFFFFFFFLL;
        if (v19 == 43)
        {
          if (!v12)
            goto LABEL_90;
          if (v12 == 1)
          {
LABEL_86:
            v11 = 0;
            goto LABEL_6;
          }
          if ((BYTE1(v19) - 48) <= 9u)
          {
            v11 = (BYTE1(v19) - 48);
            if (v12 == 2)
              goto LABEL_56;
            if ((BYTE2(v19) - 48) <= 9u)
            {
              v11 = 10 * (BYTE1(v19) - 48) + (BYTE2(v19) - 48);
              v36 = v12 - 3;
              if (v12 == 3)
                goto LABEL_56;
              v37 = (unsigned __int8 *)v57 + 3;
              while (1)
              {
                v38 = *v37 - 48;
                if (v38 > 9)
                  break;
                v39 = 10 * v11;
                if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
                  break;
                v11 = v39 + v38;
                if (__OFADD__(v39, v38))
                  break;
                LOBYTE(v12) = 0;
                ++v37;
                if (!--v36)
                  goto LABEL_6;
              }
            }
          }
        }
        else if (v19 == 45)
        {
          if (!v12)
            goto LABEL_89;
          if (v12 == 1)
            goto LABEL_86;
          if ((BYTE1(v19) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              LOBYTE(v12) = 0;
              v11 = -(uint64_t)(BYTE1(v19) - 48);
              goto LABEL_6;
            }
            if ((BYTE2(v19) - 48) <= 9u)
            {
              v11 = -10 * (BYTE1(v19) - 48) - (BYTE2(v19) - 48);
              v40 = v12 - 3;
              if (v12 == 3)
                goto LABEL_56;
              v41 = (unsigned __int8 *)v57 + 3;
              while (1)
              {
                v42 = *v41 - 48;
                if (v42 > 9)
                  break;
                v43 = 10 * v11;
                if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
                  break;
                v11 = v43 - v42;
                if (__OFSUB__(v43, v42))
                  break;
                LOBYTE(v12) = 0;
                ++v41;
                if (!--v40)
                  goto LABEL_6;
              }
            }
          }
        }
        else if (v12 && (v19 - 48) <= 9u)
        {
          v11 = (v19 - 48);
          if (v12 == 1)
            goto LABEL_56;
          if ((BYTE1(v19) - 48) <= 9u)
          {
            v11 = 10 * (v19 - 48) + (BYTE1(v19) - 48);
            v44 = v12 - 2;
            if (v12 == 2)
            {
LABEL_56:
              LOBYTE(v12) = 0;
              goto LABEL_6;
            }
            v45 = (unsigned __int8 *)v57 + 2;
            while (1)
            {
              v46 = *v45 - 48;
              if (v46 > 9)
                break;
              v47 = 10 * v11;
              if ((unsigned __int128)(v11 * (__int128)10) >> 64 != (10 * v11) >> 63)
                break;
              v11 = v47 + v46;
              if (__OFADD__(v47, v46))
                break;
              LOBYTE(v12) = 0;
              ++v45;
              if (!--v44)
                goto LABEL_6;
            }
          }
        }
        v11 = 0;
        LOBYTE(v12) = 1;
LABEL_6:
        if ((v12 & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        if ((v19 & 0x1000000000000000) != 0)
          v24 = (unsigned __int8 *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v24 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v19, v20);
        v25 = sub_100C715FC(v24, v21, 10);
        if ((v26 & 1) == 0)
        {
          v11 = (uint64_t)v25;
          goto LABEL_30;
        }
      }
    }
  }
  v15 = __OFADD__(v5++, 1);
  if (v15)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  if (v5 >= v56)
    goto LABEL_87;
  v16 = *(_QWORD *)(v6 + 8 * v5);
  if (v16)
  {
LABEL_19:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v5 << 6);
    goto LABEL_20;
  }
  v17 = v5 + 1;
  if (v5 + 1 >= v56)
    goto LABEL_87;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v5 + 2;
  if (v5 + 2 >= v56)
    goto LABEL_87;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v5 + 3;
  if (v5 + 3 >= v56)
  {
LABEL_87:
    swift_release();
    result = v54;
    *(_QWORD *)(v54 + 16) = v10;
    return result;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v5 = v17;
    goto LABEL_19;
  }
  while (1)
  {
    v5 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v5 >= v56)
      goto LABEL_87;
    v16 = *(_QWORD *)(v6 + 8 * v5);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  return result;
}

unint64_t sub_1007C3B6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  unint64_t result;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _BYTE v36[56];
  _QWORD *v37;
  _BYTE v38[24];

  swift_beginAccess(v0 + 2, v38, 0, 0);
  v1 = v0[2];
  v33 = v1 + 64;
  v2 = 1 << *(_BYTE *)(v1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(v1 + 64);
  v34 = (unint64_t)(v2 + 63) >> 6;
  v35 = v0[2];
  swift_bridgeObjectRetain(v1);
  v5 = 0;
  v6 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v8 = v7 | (v5 << 6);
    }
    else
    {
      v9 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_36;
      if (v9 >= v34)
      {
LABEL_33:
        swift_release();
        v29 = sub_10001A9A8(&qword_101108AE8);
        inited = swift_initStackObject(v29, v36);
        *(_OWORD *)(inited + 16) = xmmword_100E22B00;
        v31 = v0[4];
        *(_QWORD *)(inited + 32) = v0[3];
        *(_QWORD *)(inited + 40) = v31;
        *(_QWORD *)(inited + 48) = v6;
        swift_bridgeObjectRetain(v31);
        return sub_1006B96C0(inited);
      }
      v10 = *(_QWORD *)(v33 + 8 * v9);
      ++v5;
      if (!v10)
      {
        v5 = v9 + 1;
        if (v9 + 1 >= v34)
          goto LABEL_33;
        v10 = *(_QWORD *)(v33 + 8 * v5);
        if (!v10)
        {
          v5 = v9 + 2;
          if (v9 + 2 >= v34)
            goto LABEL_33;
          v10 = *(_QWORD *)(v33 + 8 * v5);
          if (!v10)
          {
            v11 = v9 + 3;
            if (v11 >= v34)
              goto LABEL_33;
            v10 = *(_QWORD *)(v33 + 8 * v11);
            if (!v10)
            {
              while (1)
              {
                v5 = v11 + 1;
                if (__OFADD__(v11, 1))
                  goto LABEL_37;
                if (v5 >= v34)
                  goto LABEL_33;
                v10 = *(_QWORD *)(v33 + 8 * v5);
                ++v11;
                if (v10)
                  goto LABEL_21;
              }
            }
            v5 = v11;
          }
        }
      }
LABEL_21:
      v4 = (v10 - 1) & v10;
      v8 = __clz(__rbit64(v10)) + (v5 << 6);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v8);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v15 = v14;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    v37 = v6;
    v18 = sub_100518DA0(v13, v15);
    v19 = v6[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v6[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v6 = v37;
        if ((v17 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100A9A654();
        v6 = v37;
        if ((v22 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100A865D4(v21, isUniquelyReferenced_nonNull_native);
      v23 = sub_100518DA0(v13, v15);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_38;
      v18 = v23;
      v6 = v37;
      if ((v22 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v6[7] + 8 * v18) = v12;
        goto LABEL_5;
      }
    }
    v6[(v18 >> 6) + 8] |= 1 << v18;
    v25 = (uint64_t *)(v6[6] + 16 * v18);
    *v25 = v13;
    v25[1] = v15;
    *(_QWORD *)(v6[7] + 8 * v18) = v12;
    v26 = v6[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_35;
    v6[2] = v28;
    swift_bridgeObjectRetain(v15);
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1007C3E8C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for Failure()
{
  return objc_opt_self(_TtC12searchpartyd7Failure);
}

uint64_t sub_1007C3ED8()
{
  uint64_t updated;
  uint64_t v1;
  uint64_t result;

  updated = type metadata accessor for FirmwareUpdateAlertCoordinator();
  v1 = swift_allocObject(updated, 56, 7);
  result = sub_1007C3F10();
  qword_1011B77C0 = v1;
  return result;
}

uint64_t sub_1007C3F10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  void (*v70)(_QWORD *);
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int64_t v81;
  char *v82;
  uint64_t v83;
  int64_t v84;
  char *v85;
  uint64_t v86;
  int64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[5];
  _QWORD v92[4];
  unint64_t v93;
  char v94[56];
  char v95[8];

  v1 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v1);
  v82 = (char *)&v78 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v78 - v9;
  __chkstk_darwin(v8);
  v89 = (uint64_t)&v78 - v11;
  v0[2] = 0xD00000000000001BLL;
  v0[3] = 0x8000000100EE53B0;
  v12 = sub_10001A9A8(&qword_1010F21B8);
  inited = swift_initStackObject(v12, v95);
  v88 = xmmword_100E22B10;
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  v14 = kCLErrorDomainPrivate;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCLErrorDomainPrivate);
  *(_QWORD *)(inited + 40) = v15;
  v16 = sub_10001A9A8(&qword_1010F21C0);
  v17 = swift_allocObject(v16, 48, 7);
  *(_OWORD *)(v17 + 16) = v88;
  *(_OWORD *)(v17 + 32) = xmmword_100E503D0;
  *(_QWORD *)(inited + 48) = v17;
  strcpy((char *)(inited + 56), "FirmwareUpdate");
  *(_BYTE *)(inited + 71) = -18;
  *(_QWORD *)(inited + 72) = &off_1010492E0;
  v0[5] = sub_1006B96A0(inited);
  v18 = swift_initStackObject(v12, v94);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v18 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  *(_QWORD *)(v18 + 40) = v19;
  v20 = swift_allocObject(v16, 56, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E221E0;
  *(_OWORD *)(v20 + 32) = xmmword_100E2BE40;
  *(_QWORD *)(v20 + 48) = 3;
  *(_QWORD *)(v18 + 48) = v20;
  v21 = sub_1006B96A0(v18);
  v78 = v0;
  v0[6] = v21;
  v93 = sub_1006B96AC((uint64_t)_swiftEmptyArrayStorage);
  v22 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v22, "objectForKey:", v23);

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)(v91, v24);
    swift_unknownObjectRelease(v24);
  }
  else
  {
    memset(v91, 0, 32);
  }
  sub_100005CF0((uint64_t)v91, (uint64_t)v92, (uint64_t *)&unk_1010F6390);
  v25 = (uint64_t)v82;
  if (!v92[3])
  {
    sub_100004048((uint64_t)v92, (uint64_t *)&unk_1010F6390);
    goto LABEL_71;
  }
  v26 = sub_10001A9A8(&qword_101108AF0);
  result = swift_dynamicCast(&v90, v92, (char *)&type metadata for Any + 8, v26, 6);
  if ((result & 1) == 0)
  {
LABEL_71:
    result = (uint64_t)v78;
    v78[4] = v93;
    return result;
  }
  v28 = v90;
  if (!*(_QWORD *)(v90 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  v29 = 0;
  v30 = *(_QWORD *)(v90 + 64);
  v80 = v90 + 64;
  v31 = 1 << *(_BYTE *)(v90 + 32);
  if (v31 < 64)
    v32 = ~(-1 << v31);
  else
    v32 = -1;
  v33 = v32 & v30;
  v81 = (unint64_t)(v31 + 63) >> 6;
  v88 = xmmword_100E22D10;
  v85 = v10;
  v79 = v90;
  while (1)
  {
    if (v33)
    {
      v83 = (v33 - 1) & v33;
      v84 = v29;
      v34 = __clz(__rbit64(v33)) | (v29 << 6);
      goto LABEL_29;
    }
    v35 = v29 + 1;
    if (__OFADD__(v29, 1))
      goto LABEL_74;
    if (v35 >= v81)
    {
LABEL_69:
      swift_release();
      goto LABEL_71;
    }
    v36 = *(_QWORD *)(v80 + 8 * v35);
    v37 = v29 + 1;
    if (v36)
      goto LABEL_28;
    v37 = v29 + 2;
    if (v29 + 2 >= v81)
      goto LABEL_69;
    v36 = *(_QWORD *)(v80 + 8 * v37);
    if (v36)
      goto LABEL_28;
    v37 = v29 + 3;
    if (v29 + 3 >= v81)
      goto LABEL_69;
    v36 = *(_QWORD *)(v80 + 8 * v37);
    if (v36)
      goto LABEL_28;
    v38 = v29 + 4;
    if (v29 + 4 >= v81)
      goto LABEL_69;
    v36 = *(_QWORD *)(v80 + 8 * v38);
    if (!v36)
      break;
    v37 = v29 + 4;
LABEL_28:
    v83 = (v36 - 1) & v36;
    v84 = v37;
    v34 = __clz(__rbit64(v36)) + (v37 << 6);
LABEL_29:
    v39 = (uint64_t *)(*(_QWORD *)(v28 + 48) + 16 * v34);
    v40 = *v39;
    v41 = v39[1];
    v42 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v34);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v42);
    UUID.init(uuidString:)(v40, v41);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v25, 1, v3) == 1)
    {
      swift_bridgeObjectRelease();
      result = sub_100004048(v25, &qword_1010ED860);
      goto LABEL_12;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v89, v25, v3);
    v43 = 0;
    v44 = *(_QWORD *)(v42 + 64);
    v86 = v42 + 64;
    v45 = 1 << *(_BYTE *)(v42 + 32);
    if (v45 < 64)
      v46 = ~(-1 << v45);
    else
      v46 = -1;
    v47 = v46 & v44;
    v87 = (unint64_t)(v45 + 63) >> 6;
    if ((v46 & v44) != 0)
    {
      while (1)
      {
        v53 = __clz(__rbit64(v47));
        v47 &= v47 - 1;
        v54 = v53 | (v43 << 6);
LABEL_51:
        v58 = (uint64_t *)(*(_QWORD *)(v42 + 48) + 16 * v54);
        v59 = *v58;
        v60 = v58[1];
        v61 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v54);
        v62 = type metadata accessor for Failure();
        v63 = swift_allocObject(v62, 40, 7);
        swift_bridgeObjectRetain(v60);
        swift_bridgeObjectRetain(v61);
        sub_1007C3650(v59, v60, v61);
        v64 = v93;
        if (!*(_QWORD *)(v93 + 16))
          goto LABEL_35;
        v65 = sub_100003FB0(v89);
        if ((v66 & 1) == 0)
          goto LABEL_35;
        v67 = *(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v65);
        if ((unint64_t)v67 >> 62)
        {
          if (v67 < 0)
            v76 = v67;
          else
            v76 = v67 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v67);
          v77 = _CocoaArrayWrapper.endIndex.getter(v76);
          swift_bridgeObjectRelease();
          if (!v77)
            goto LABEL_35;
LABEL_55:
          v68 = v85;
          (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v85, v89, v3);
          v70 = sub_100C47588(v92);
          if (*v69)
          {
            v71 = v69;
            v72 = swift_retain();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v72);
            v74 = *(_QWORD *)((*v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v73 = *(_QWORD *)((*v71 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v74 >= v73 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v73 > 1, v74 + 1, 1);
            v75 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v74, v63);
            specialized Array._endMutation()(v75);
            ((void (*)(_QWORD *, _QWORD))v70)(v92, 0);
            swift_release();
            result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v85, v3);
          }
          else
          {
            ((void (*)(_QWORD *, _QWORD))v70)(v92, 0);
            swift_release();
            result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v68, v3);
          }
          if (!v47)
            break;
        }
        else
        {
          if (*(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_55;
LABEL_35:
          (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v89, v3);
          v48 = sub_10001A9A8(&qword_10111BE20);
          v49 = swift_allocObject(v48, 40, 7);
          *(_OWORD *)(v49 + 16) = v88;
          *(_QWORD *)(v49 + 32) = v63;
          v92[0] = v49;
          specialized Array._endMutation()(v49);
          v50 = v92[0];
          swift_retain();
          v51 = v93;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v93);
          v92[0] = v51;
          sub_10010ABD0(v50, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
          v93 = v92[0];
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
          result = swift_release();
          if (!v47)
            break;
        }
      }
    }
    v55 = v43 + 1;
    if (__OFADD__(v43, 1))
    {
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    if (v55 < v87)
    {
      v56 = *(_QWORD *)(v86 + 8 * v55);
      ++v43;
      if (v56)
        goto LABEL_50;
      v43 = v55 + 1;
      if (v55 + 1 < v87)
      {
        v56 = *(_QWORD *)(v86 + 8 * v43);
        if (v56)
          goto LABEL_50;
        v43 = v55 + 2;
        if (v55 + 2 < v87)
        {
          v56 = *(_QWORD *)(v86 + 8 * v43);
          if (v56)
            goto LABEL_50;
          v57 = v55 + 3;
          if (v57 < v87)
          {
            v56 = *(_QWORD *)(v86 + 8 * v57);
            if (v56)
            {
              v43 = v57;
LABEL_50:
              v47 = (v56 - 1) & v56;
              v54 = __clz(__rbit64(v56)) + (v43 << 6);
              goto LABEL_51;
            }
            while (1)
            {
              v43 = v57 + 1;
              if (__OFADD__(v57, 1))
                goto LABEL_73;
              if (v43 >= v87)
                break;
              v56 = *(_QWORD *)(v86 + 8 * v43);
              ++v57;
              if (v56)
                goto LABEL_50;
            }
          }
        }
      }
    }
    swift_release();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v89, v3);
    v25 = (uint64_t)v82;
    v28 = v79;
LABEL_12:
    v29 = v84;
    v33 = v83;
  }
  while (1)
  {
    v37 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v37 >= v81)
      goto LABEL_69;
    v36 = *(_QWORD *)(v80 + 8 * v37);
    ++v38;
    if (v36)
      goto LABEL_28;
  }
LABEL_75:
  __break(1u);
  return result;
}

void sub_1007C485C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  id v39;
  Class isa;
  NSString v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v54 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_101108AD0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v42 - v8;
  v10 = sub_1006B96CC((uint64_t)_swiftEmptyArrayStorage);
  v11 = *(_QWORD *)(v0 + 32);
  v12 = *(_QWORD *)(v11 + 64);
  v44 = v0;
  v45 = v11 + 64;
  v13 = 1 << *(_BYTE *)(v11 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v46 = (unint64_t)(v13 + 63) >> 6;
  v47 = v11;
  v43 = v46 - 1;
  v16 = swift_bridgeObjectRetain(v11);
  v51 = v1;
  v52 = 0;
  v49 = v7;
  v50 = v2;
  v48 = v9;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v18 = (v15 - 1) & v15;
      v19 = v17 | (v52 << 6);
LABEL_7:
      v20 = v47;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v2 + 16))(v7, *(_QWORD *)(v47 + 48) + *(_QWORD *)(v2 + 72) * v19, v1, v16);
      v21 = *(_QWORD *)(v20 + 56);
      v22 = sub_10001A9A8(&qword_101108AD8);
      v23 = *(_QWORD *)(v21 + 8 * v19);
      *(_QWORD *)&v7[*(int *)(v22 + 48)] = v23;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v7, 0, 1, v22);
      swift_bridgeObjectRetain(v23);
      goto LABEL_26;
    }
    v24 = v52 + 1;
    if (__OFADD__(v52, 1))
      goto LABEL_42;
    if (v24 < v46)
    {
      v25 = *(_QWORD *)(v45 + 8 * v24);
      if (v25)
        goto LABEL_11;
      v26 = v52 + 2;
      ++v52;
      if (v24 + 1 < v46)
      {
        v25 = *(_QWORD *)(v45 + 8 * v26);
        if (v25)
          goto LABEL_14;
        v52 = v24 + 1;
        if (v24 + 2 < v46)
        {
          v25 = *(_QWORD *)(v45 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_11;
          }
          v26 = v24 + 3;
          v52 = v24 + 2;
          if (v24 + 3 < v46)
            break;
        }
      }
    }
LABEL_25:
    v27 = sub_10001A9A8(&qword_101108AD8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v7, 1, 1, v27);
    v18 = 0;
LABEL_26:
    sub_100005CF0((uint64_t)v7, (uint64_t)v9, &qword_101108AD0);
    v28 = sub_10001A9A8(&qword_101108AD8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v9, 1, v28) == 1)
    {
      swift_release();
      v39 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
      sub_10001A9A8(&qword_101108AE0);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v41 = String._bridgeToObjectiveC()();
      objc_msgSend(v39, "setObject:forKey:", isa, v41);

      return;
    }
    v29 = *(_QWORD *)&v9[*(int *)(v28 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v54, v9, v1);
    if ((unint64_t)v29 >> 62)
    {
      if (v29 < 0)
        v38 = v29;
      else
        v38 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v29);
      v30 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease();
      v53 = v18;
      if (!v30)
        goto LABEL_4;
    }
    else
    {
      v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      v53 = v18;
      if (!v30)
        goto LABEL_4;
    }
    if (v30 < 1)
    {
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    v31 = 0;
    do
    {
      if ((v29 & 0xC000000000000001) != 0)
        v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(v31, v29);
      else
        v32 = swift_retain();
      ++v31;
      v33 = UUID.uuidString.getter(v32);
      v35 = v34;
      v36 = sub_1007C3B6C();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      v55 = v10;
      sub_10010ABEC(v36, v33, v35, isUniquelyReferenced_nonNull_native);
      v10 = v55;
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v30 != v31);
LABEL_4:
    swift_bridgeObjectRelease();
    v2 = v50;
    v1 = v51;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v54, v51);
    v9 = v48;
    v7 = v49;
    v15 = v53;
  }
  v25 = *(_QWORD *)(v45 + 8 * v26);
  if (v25)
  {
LABEL_14:
    v24 = v26;
LABEL_11:
    v18 = (v25 - 1) & v25;
    v19 = __clz(__rbit64(v25)) + (v24 << 6);
    v52 = v24;
    goto LABEL_7;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v46)
    {
      v52 = v43;
      goto LABEL_25;
    }
    v25 = *(_QWORD *)(v45 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_11;
  }
LABEL_43:
  __break(1u);
}

void sub_1007C4D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  _QWORD *v46;
  _BYTE v47[24];
  char v48[24];

  v2 = *(_QWORD *)(v1 + 32);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_62;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
  v4 = sub_100003FB0(a1);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_62;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  if ((unint64_t)v6 >> 62)
    goto LABEL_56;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v6);
  v42 = v7;
  if (!v7)
  {
LABEL_60:
    v37 = v6;
    goto LABEL_61;
  }
  while (1)
  {
    v8 = 0;
    v43 = v6 & 0xC000000000000001;
    v40 = v6 + 32;
    v41 = v6;
LABEL_7:
    if (v43)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v41);
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (!v9)
        break;
      goto LABEL_54;
    }
    v6 = *(_QWORD *)(v40 + 8 * v8);
    swift_retain();
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (!v9)
      break;
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    if (v6 < 0)
      v38 = v6;
    else
      v38 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v6, 2);
    v39 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
    v42 = v39;
    if (!v39)
      goto LABEL_60;
  }
  v44 = v10;
  v11 = (_QWORD *)(v6 + 16);
  swift_beginAccess(v6 + 16, v48, 0, 0);
  v12 = *(_QWORD *)(v6 + 16);
  v13 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  if (v14 < 64)
    v15 = ~(-1 << v14);
  else
    v15 = -1;
  v16 = v15 & *(_QWORD *)(v12 + 64);
  v45 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain_n(v12, 2);
  v17 = 0;
  while (2)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_38;
    }
    v20 = v17 + 1;
    if (__OFADD__(v17, 1))
      goto LABEL_53;
    if (v20 < v45)
    {
      v21 = *(_QWORD *)(v13 + 8 * v20);
      ++v17;
      if (!v21)
      {
        v17 = v20 + 1;
        if (v20 + 1 >= v45)
          break;
        v21 = *(_QWORD *)(v13 + 8 * v17);
        if (!v21)
        {
          v17 = v20 + 2;
          if (v20 + 2 >= v45)
            break;
          v21 = *(_QWORD *)(v13 + 8 * v17);
          if (!v21)
          {
            v17 = v20 + 3;
            if (v20 + 3 >= v45)
              break;
            v21 = *(_QWORD *)(v13 + 8 * v17);
            if (!v21)
            {
              v17 = v20 + 4;
              if (v20 + 4 >= v45)
                break;
              v21 = *(_QWORD *)(v13 + 8 * v17);
              if (!v21)
              {
                v22 = v20 + 5;
                if (v22 >= v45)
                  break;
                v21 = *(_QWORD *)(v13 + 8 * v22);
                if (!v21)
                {
                  while (1)
                  {
                    v17 = v22 + 1;
                    if (__OFADD__(v22, 1))
                      goto LABEL_55;
                    if (v17 >= v45)
                      goto LABEL_6;
                    v21 = *(_QWORD *)(v13 + 8 * v17);
                    ++v22;
                    if (v21)
                      goto LABEL_37;
                  }
                }
                v17 = v22;
              }
            }
          }
        }
      }
LABEL_37:
      v16 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_38:
      v23 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v19);
      swift_beginAccess(v11, v47, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
      v46 = (_QWORD *)*v11;
      v6 = (uint64_t)v46;
      *v11 = 0x8000000000000000;
      v26 = sub_100518D38(v23);
      v27 = *(_QWORD *)(v6 + 16);
      v28 = (v25 & 1) == 0;
      v29 = v27 + v28;
      if (__OFADD__(v27, v28))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        goto LABEL_54;
      }
      v30 = v25;
      if (*(_QWORD *)(v6 + 24) >= v29)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v33 = v46;
          if ((v25 & 1) == 0)
            goto LABEL_45;
        }
        else
        {
          v6 = (uint64_t)&v46;
          sub_100A9B320();
          v33 = v46;
          if ((v30 & 1) == 0)
            goto LABEL_45;
        }
      }
      else
      {
        sub_100A87CB0(v29, isUniquelyReferenced_nonNull_native);
        v6 = (uint64_t)v46;
        v31 = sub_100518D38(v23);
        if ((v30 & 1) != (v32 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
          __break(1u);
          return;
        }
        v26 = v31;
        v33 = v46;
        if ((v30 & 1) == 0)
        {
LABEL_45:
          v33[(v26 >> 6) + 8] |= 1 << v26;
          v34 = 8 * v26;
          *(_QWORD *)(v33[6] + v34) = v23;
          *(_QWORD *)(v33[7] + v34) = 0;
          v35 = v33[2];
          v9 = __OFADD__(v35, 1);
          v36 = v35 + 1;
          if (v9)
            goto LABEL_52;
          v33[2] = v36;
          goto LABEL_17;
        }
      }
      *(_QWORD *)(v33[7] + 8 * v26) = 0;
LABEL_17:
      *v11 = v33;
      swift_bridgeObjectRelease();
      swift_endAccess(v47);
      continue;
    }
    break;
  }
LABEL_6:
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v8 = v44;
  if (v44 != v42)
    goto LABEL_7;
  v37 = v41;
LABEL_61:
  swift_bridgeObjectRelease_n(v37, 2);
LABEL_62:
  sub_1007C485C();
}

uint64_t sub_1007C5154()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for FirmwareUpdateAlertCoordinator()
{
  return objc_opt_self(_TtC12searchpartyd30FirmwareUpdateAlertCoordinator);
}

uint64_t sub_1007C51B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[7];
  char v23;
  _QWORD *v24;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v1 + 16) = 0x403E000000000000;
  v12 = sub_10001A9A8(&qword_1010FAAF0);
  v13 = swift_allocObject(v12, 20, 7);
  *(_DWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v13;
  sub_10001F6FC();
  v14 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v14);
  v24 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193E4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v2, v15);
  *(_QWORD *)(v1 + 32) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001CLL, 0x8000000100EE5470, v7, v4, v11, 0);
  v23 = 0;
  v18 = sub_10001A9A8(&qword_101108C08);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(v1 + 40) = CurrentValueSubject.init(_:)(&v23);
  *(_BYTE *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = 0;
  v19 = swift_retain();
  v20 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v19);
  swift_release();
  *(_QWORD *)(v1 + 64) = v20;
  return v1;
}

uint64_t sub_1007C53E8()
{
  return sub_1007C57A4("markActive()", (uint64_t)sub_1007C5A04);
}

uint64_t sub_1007C53FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[6];
  _QWORD *v37;

  v3 = type metadata accessor for DispatchTimeInterval(0);
  v32 = *(_QWORD *)(v3 - 8);
  v33 = v3;
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = type metadata accessor for DispatchTime(0);
  v30 = *(_QWORD *)(v34 - 8);
  v6 = __chkstk_darwin(v34);
  v29 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v31 = (char *)&v28 - v8;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    os_activity(name:block:)("AppActivity.markActive", 22, 2, sub_1007C5A1C);
  v35 = v1;
  *(_BYTE *)(a1 + 48) = 1;
  if (*(_QWORD *)(a1 + 56))
  {
    v12 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v12);
    swift_release();
  }
  v13 = swift_allocObject(&unk_101092FA0, 24, 7);
  swift_weakInit(v13 + 16, a1);
  aBlock[4] = sub_1007C5A7C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101092FB8;
  v14 = _Block_copy(aBlock);
  v37 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v17 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v16, v17, v9, v15);
  v18 = type metadata accessor for DispatchWorkItem(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v19 = DispatchWorkItem.init(flags:block:)(v11, v14);
  swift_release();
  swift_release();
  *(_QWORD *)(a1 + 56) = v19;
  swift_retain();
  v20 = swift_release();
  v21 = v29;
  static DispatchTime.now()(v20);
  *v5 = 30;
  v23 = v32;
  v22 = v33;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v32 + 104))(v5, enum case for DispatchTimeInterval.seconds(_:), v33);
  v24 = v31;
  + infix(_:_:)(v21, v5);
  (*(void (**)(_QWORD *, uint64_t))(v23 + 8))(v5, v22);
  v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v26 = v34;
  v25(v21, v34);
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v24, v19);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v26);
}

uint64_t sub_1007C573C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_1007C5790();
    return swift_release();
  }
  return result;
}

uint64_t sub_1007C5790()
{
  return sub_1007C57A4("markInactive()", (uint64_t)sub_1007C598C);
}

uint64_t sub_1007C57A4(const char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v5 = v2;
  if (qword_1010E9F60 != -1)
    swift_once(&qword_1010E9F60, sub_1007C5910);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B77C8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a1, v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  return OSAllocatedUnfairLock.callAsFunction<A>(_:)(a2, v5, *(_QWORD *)(v5 + 24), &type metadata for () + 1, &type metadata for () + 1);
}

uint64_t sub_1007C58AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for AppActivity()
{
  return objc_opt_self(_TtC12searchpartyd11AppActivity);
}

uint64_t sub_1007C5910()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B77C8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B77C8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x7669746341707061, 0xEB00000000797469);
}

uint64_t sub_1007C598C()
{
  uint64_t v0;
  uint64_t result;

  if (*(_BYTE *)(v0 + 48) == 1)
    result = os_activity(name:block:)("AppActivity.markInactive", 24, 2, sub_1007C59CC);
  *(_BYTE *)(v0 + 48) = 0;
  return result;
}

uint64_t sub_1007C59CC()
{
  char v1;

  v1 = 0;
  return CurrentValueSubject.send(_:)(&v1);
}

uint64_t sub_1007C5A04()
{
  uint64_t v0;

  return sub_1007C53FC(v0);
}

uint64_t sub_1007C5A1C()
{
  char v1;

  v1 = 1;
  return CurrentValueSubject.send(_:)(&v1);
}

uint64_t sub_1007C5A58()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007C5A7C()
{
  uint64_t v0;

  return sub_1007C573C(v0);
}

uint64_t sub_1007C5A84(void (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *Strong;
  id v8;
  _QWORD v10[5];
  _BYTE v11[48];
  _QWORD v12[7];
  _BYTE v13[48];

  v5 = *(_QWORD *)(a3 + 16);
  v10[2] = a3;
  v10[3] = a1;
  v10[4] = a2;
  v6 = sub_10001A9A8(&qword_1010FB8C8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1007CD410, v10, v5, &type metadata for () + 1, v6);
  sub_1007CD42C((uint64_t)v13, (uint64_t)v11);
  if (v11[40] == 255)
  {
    sub_100004048((uint64_t)v11, &qword_1010FB8C8);
    Strong = (char *)swift_unknownObjectUnownedLoadStrong(a3 + 24);
    v8 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    objc_msgSend(v8, "readValueForCharacteristic:", *(_QWORD *)(a3 + 40));
  }
  else
  {
    sub_100059244((uint64_t)v11, (uint64_t)v12);
    sub_100059280(v12, (uint64_t)v11);
    v11[41] = 1;
    a1(v11);
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_101107490);
    sub_1000593D4(v12);
  }
  return sub_100004048((uint64_t)v13, &qword_1010FB8C8);
}

uint64_t sub_1007C5BC4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  if (a1[9] || a1[13])
  {
    *(_QWORD *)a4 = a1;
    *(_BYTE *)(a4 + 40) = 6;
    return swift_retain();
  }
  else
  {
    v6 = a1[10];
    a1[9] = a2;
    a1[10] = a3;
    swift_retain();
    result = sub_10001D8A8(0, v6);
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_BYTE *)(a4 + 40) = -1;
  }
  return result;
}

uint64_t sub_1007C5C3C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = v2;
  if (qword_1010EA650 != -1)
    swift_once(&qword_1010EA650, sub_100E00F68);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B85A8);
  sub_10001BBBC(a1, a2);
  swift_retain();
  sub_10001BBBC(a1, a2);
  v7 = swift_retain();
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v25 = v23;
    *(_DWORD *)v10 = 136315394;
    sub_10001BBBC(a1, a2);
    v11 = Data.description.getter(a1, a2);
    v13 = v12;
    sub_10001BC14(a1, a2);
    v24 = sub_100016940(v11, v13, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);
    *(_WORD *)(v10 + 12) = 2080;
    swift_retain();
    v14 = sub_1007C6C74();
    v16 = v15;
    swift_release();
    v24 = sub_100016940(v14, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Writing %s to %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);

    swift_release_n(v2, 2);
  }
  v17 = (_QWORD *)swift_allocObject(&unk_101093090, 40, 7);
  v17[2] = v3;
  v17[3] = a1;
  v17[4] = a2;
  v18 = sub_10001A9A8(&qword_101109328);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_10001BBBC(a1, a2);
  swift_retain();
  v25 = Future.init(_:)(sub_1007CD4DC, v17, v19);
  v20 = sub_1000193A4((unint64_t *)&unk_101109330, &qword_101109328, (const char *)&protocol conformance descriptor for Future<A, B>);
  v21 = Publisher.eraseToAnyPublisher()(v18, v20);
  swift_release();
  return v21;
}

uint64_t sub_1007C5F64(void (*a1)(_BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *Strong;
  id v8;
  Class isa;
  _QWORD v11[5];
  _BYTE v12[48];
  _QWORD v13[7];
  _BYTE v14[48];

  v5 = *(_QWORD *)(a3 + 16);
  v11[2] = a3;
  v11[3] = a1;
  v11[4] = a2;
  v6 = sub_10001A9A8(&qword_1010FB8C8);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1007CD4E8, v11, v5, &type metadata for () + 1, v6);
  sub_1007CD42C((uint64_t)v14, (uint64_t)v12);
  if (v12[40] == 255)
  {
    sub_100004048((uint64_t)v12, &qword_1010FB8C8);
    Strong = (char *)swift_unknownObjectUnownedLoadStrong(a3 + 24);
    v8 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v8, "writeValue:forCharacteristic:type:", isa, *(_QWORD *)(a3 + 40), 0);

  }
  else
  {
    sub_100059244((uint64_t)v12, (uint64_t)v13);
    sub_100059280(v13, (uint64_t)v12);
    v12[41] = 1;
    a1(v12);
    sub_100004048((uint64_t)v12, &qword_1010EEBF8);
    sub_1000593D4(v13);
  }
  return sub_100004048((uint64_t)v14, &qword_1010FB8C8);
}

uint64_t sub_1007C60DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;

  if (*(_QWORD *)(a1 + 88))
  {
    *(_QWORD *)a4 = a1;
    *(_BYTE *)(a4 + 40) = 6;
    return swift_retain();
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 88) = a2;
    *(_QWORD *)(a1 + 96) = a3;
    swift_retain();
    result = sub_10001D8A8(0, v6);
    *(_QWORD *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_BYTE *)(a4 + 40) = -1;
  }
  return result;
}

uint64_t sub_1007C614C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *Strong;
  id v12;
  uint64_t v13;
  uint64_t v14;

  if (a1[13])
  {
    v3 = sub_10001A9A8(&qword_1011091E8);
    v4 = sub_1000193A4(&qword_1011091F0, &qword_1011091E8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    result = Publisher.eraseToAnyPublisher()(v3, v4);
    *a2 = result;
  }
  else if (a1[9])
  {
    v7 = sub_100059390();
    swift_allocError(&type metadata for CentralManager.Error, v7, 0, 0);
    *(_QWORD *)v8 = a1;
    *(_BYTE *)(v8 + 40) = 6;
    v9 = swift_retain();
    return swift_willThrow(v9);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_1011091E8);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    a1[13] = PassthroughSubject.init()();
    swift_retain();
    swift_release();
    Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 3);
    v12 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

    objc_msgSend(v12, "setNotifyValue:forCharacteristic:", 1, a1[5]);
    v13 = sub_1000193A4(&qword_1011091F0, &qword_1011091E8, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v14 = Publisher.eraseToAnyPublisher()(v10, v13);
    result = swift_release();
    *a2 = v14;
  }
  return result;
}

uint64_t sub_1007C62EC(uint64_t a1)
{
  char *Strong;
  id v3;
  _OWORD v5[2];
  uint64_t v6;
  char v7;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a1 + 24);
  v3 = *(id *)&Strong[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];

  objc_msgSend(v3, "setNotifyValue:forCharacteristic:", 0, *(_QWORD *)(a1 + 40));
  if (*(_QWORD *)(a1 + 104))
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    v7 = -1;
    swift_retain();
    PassthroughSubject.send(completion:)(v5);
    swift_release();
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010FBAF0);
  }
  *(_QWORD *)(a1 + 104) = 0;
  return swift_release();
}

uint64_t sub_1007C63BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v50;
  _QWORD *v51;
  uint64_t (*v52)();
  uint64_t (*v53)();
  uint64_t v54;
  __int128 v55;
  uint64_t (*v56)();
  uint64_t (*v57)();
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD v61[2];
  __int16 v62;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = sub_10001A9A8(&qword_101109320);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1007CD474, v1, v4, &type metadata for () + 1, v5);
  v6 = v60;
  v55 = *(_OWORD *)((char *)v61 + 8);
  if (v60)
  {
    v7 = *(_QWORD *)&v61[0];
    v8 = swift_allocObject(&unk_101093018, 32, 7);
    *(_QWORD *)(v8 + 16) = v60;
    *(_QWORD *)(v8 + 24) = v7;
    v9 = sub_10001D858;
    v10 = v55;
    if ((_QWORD)v55)
      goto LABEL_3;
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v10 = *((_QWORD *)&v61[0] + 1);
    if (*((_QWORD *)&v61[0] + 1))
    {
LABEL_3:
      v11 = swift_allocObject(&unk_101092FF0, 32, 7);
      *(_OWORD *)(v11 + 16) = v55;
      v12 = sub_1000A18BC;
      v13 = &qword_1010EA000;
      if (!v6)
        goto LABEL_4;
LABEL_11:
      v32 = qword_1010EA4A8;
      swift_retain();
      if (v32 != -1)
        swift_once(&qword_1010EA4A8, sub_100D0773C);
      v33 = type metadata accessor for Logger(0);
      sub_10001A9E8(v33, (uint64_t)qword_1011B80D0);
      sub_100059280(a1, (uint64_t)&v60);
      v34 = swift_retain_n(v2, 2);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v53 = v12;
        v37 = swift_slowAlloc(22, -1);
        v57 = v9;
        v38 = (uint64_t *)swift_slowAlloc(8, -1);
        v50 = swift_slowAlloc(32, -1);
        v59 = v50;
        *(_DWORD *)v37 = 136446466;
        v51 = a1;
        swift_retain();
        v39 = sub_1007C6C74();
        v54 = v11;
        v41 = v40;
        swift_release();
        v58 = sub_100016940(v39, v41, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v37 + 4, v37 + 12);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2112;
        v42 = sub_100059390();
        v43 = swift_allocError(&type metadata for CentralManager.Error, v42, 0, 0);
        sub_100059280(&v60, v44);
        v45 = _swift_stdlib_bridgeErrorToNSError(v43);
        v58 = v45;
        v11 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v37 + 14, v37 + 22);
        *v38 = v45;
        a1 = v51;
        sub_1000593D4(&v60);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s: Sending %@ failure to readPromise", (uint8_t *)v37, 0x16u);
        v46 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v38, 1, v46);
        v47 = v38;
        v9 = v57;
        swift_slowDealloc(v47, -1, -1);
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        v48 = v37;
        v12 = v53;
        swift_slowDealloc(v48, -1, -1);
      }
      else
      {
        swift_release_n(v2, 2);
        sub_1000593D4(&v60);
      }

      v60 = 11;
      memset(v61, 0, sizeof(v61));
      v62 = 267;
      v9();
      sub_10001D8A8((uint64_t)v9, v8);
      sub_100004048((uint64_t)&v60, (uint64_t *)&unk_101107490);
      v13 = &qword_1010EA000;
      if (v10)
        goto LABEL_5;
      return sub_10001D8A8((uint64_t)v9, v8);
    }
  }
  v12 = 0;
  v11 = 0;
  v13 = &qword_1010EA000;
  if (v6)
    goto LABEL_11;
LABEL_4:
  if (!v10)
    return sub_10001D8A8((uint64_t)v9, v8);
LABEL_5:
  v14 = v13[149];
  swift_retain();
  if (v14 != -1)
    swift_once(&qword_1010EA4A8, sub_100D0773C);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B80D0);
  sub_100059280(a1, (uint64_t)&v60);
  v16 = swift_retain_n(v2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v56 = v9;
    v20 = (uint64_t *)swift_slowAlloc(8, -1);
    v52 = v12;
    v21 = swift_slowAlloc(32, -1);
    v59 = v21;
    *(_DWORD *)v19 = 136446466;
    swift_retain();
    v22 = sub_1007C6C74();
    v24 = v23;
    swift_release();
    v58 = sub_100016940(v22, v24, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v19 + 4, v19 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2112;
    v25 = sub_100059390();
    v26 = swift_allocError(&type metadata for CentralManager.Error, v25, 0, 0);
    sub_100059280(&v60, v27);
    v28 = _swift_stdlib_bridgeErrorToNSError(v26);
    v58 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v19 + 14, v19 + 22);
    *v20 = v28;
    sub_1000593D4(&v60);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s: Sending %@ failure to writePromise", (uint8_t *)v19, 0x16u);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v20, 1, v29);
    v30 = v20;
    v9 = v56;
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v31 = v21;
    v12 = v52;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
    sub_1000593D4(&v60);
  }

  v60 = 11;
  memset(v61, 0, sizeof(v61));
  v62 = 267;
  v12();
  sub_10001D8A8((uint64_t)v12, v11);
  sub_10001D8A8((uint64_t)v12, v11);
  sub_10001D8A8((uint64_t)v9, v8);
  return sub_100004048((uint64_t)&v60, &qword_1010EEBF8);
}

uint64_t sub_1007C6A1C@<X0>(_QWORD *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t (*v10)();

  v4 = (uint64_t (*)())a1[9];
  v5 = a1[10];
  a1[9] = 0;
  a1[10] = 0;
  sub_10001D898((uint64_t)v4, v5);
  sub_10001D8A8((uint64_t)v4, v5);
  v6 = a1[11];
  v7 = a1[12];
  a1[11] = 0;
  a1[12] = 0;
  sub_10001D898(v6, v7);
  sub_10001D8A8(v6, v7);
  if (!v4)
  {
    v8 = 0;
    if (v6)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    result = 0;
    goto LABEL_6;
  }
  v8 = swift_allocObject(&unk_101093068, 32, 7);
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v5;
  v4 = sub_10001D858;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  result = swift_allocObject(&unk_101093040, 32, 7);
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v7;
  v10 = sub_1000A18BC;
LABEL_6:
  *a2 = v4;
  a2[1] = (uint64_t (*)())v8;
  a2[2] = v10;
  a2[3] = (uint64_t (*)())result;
  return result;
}

uint64_t sub_1007C6B04()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectUnownedDestroy(v0 + 24);
  swift_unownedRelease(*(_QWORD *)(v0 + 32));

  swift_bridgeObjectRelease();
  sub_10001D8A8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_10001D8A8(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  sub_10001D8A8(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  swift_release();
  return v0;
}

uint64_t sub_1007C6B60()
{
  uint64_t v0;

  sub_1007C6B04();
  return swift_deallocClassInstance(v0, 112, 7);
}

Swift::Int sub_1007C6B80()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NSObject.hash(into:)(v1);
  return Hasher._finalize()();
}

void sub_1007C6BC4(uint64_t a1)
{
  uint64_t v1;
  id v3;

  v3 = *(id *)(*(_QWORD *)v1 + 40);
  NSObject.hash(into:)(a1);

}

Swift::Int sub_1007C6C0C()
{
  uint64_t v0;
  id v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v1 = *(id *)(*(_QWORD *)v0 + 40);
  NSObject.hash(into:)(v3);

  return Hasher._finalize()();
}

BOOL sub_1007C6C58(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)a1 + 40) == *(_QWORD *)(*(_QWORD *)a2 + 40);
}

uint64_t sub_1007C6C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  id v12;
  Swift::String v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];

  v1 = type metadata accessor for CharacteristicUUID(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(29);
  v4._countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v24 = v0;
  v5 = type metadata accessor for Characteristic();
  v6 = sub_1007CD078(&qword_101109008, byte_100E50528);
  v7._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v5, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v5, v6);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  v11 = *(void **)(v0 + 40);
  v12 = objc_msgSend(v11, "UUID");
  sub_1008C5174();

  _print_unlocked<A, B>(_:_:)(v3, v25, v1, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  sub_1007CD0B4((uint64_t)v3);
  v13._countAndFlagsBits = 0x796669746F6E203ALL;
  v13._object = (void *)0xED0000203A676E69;
  String.append(_:)(v13);
  v14 = objc_msgSend(v11, "isNotifying");
  v15 = v14 == 0;
  if (v14)
    v16 = 1702195828;
  else
    v16 = 0x65736C6166;
  if (v15)
    v17 = 0xE500000000000000;
  else
    v17 = 0xE400000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 32;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = CBCharacteristicProperties.description.getter((__int16)objc_msgSend(v11, "properties"));
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return v25[0];
}

uint64_t CBCharacteristicProperties.description.getter(__int16 a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;

  if ((a1 & 1) == 0)
  {
    v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_7;
  }
  v2 = sub_1007C7438(0, 1, 1, _swiftEmptyArrayStorage);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v4 + 1;
  v5 = &v2[2 * v4];
  v5[4] = 0x616364616F72622ELL;
  v5[5] = 0xEA00000000007473;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0x646165722ELL;
    v8[5] = 0xE500000000000000;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v10 = v2[2];
    v9 = v2[3];
    if (v10 >= v9 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
    v2[2] = v10 + 1;
    v11 = &v2[2 * v10];
    v11[4] = 0xD000000000000015;
    v11[5] = 0x8000000100EE5510;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0)
        goto LABEL_15;
      goto LABEL_31;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v13 = v2[2];
  v12 = v2[3];
  if (v13 >= v12 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
  v2[2] = v13 + 1;
  v14 = &v2[2 * v13];
  v14[4] = 0x65746972772ELL;
  v14[5] = 0xE600000000000000;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0)
      goto LABEL_16;
    goto LABEL_36;
  }
LABEL_31:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v16 = v2[2];
  v15 = v2[3];
  if (v16 >= v15 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v15 > 1), v16 + 1, 1, v2);
  v2[2] = v16 + 1;
  v17 = &v2[2 * v16];
  v17[4] = 0x796669746F6E2ELL;
  v17[5] = 0xE700000000000000;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_36:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v19 = v2[2];
  v18 = v2[3];
  if (v19 >= v18 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
  v2[2] = v19 + 1;
  v20 = &v2[2 * v19];
  v20[4] = 0x74616369646E692ELL;
  v20[5] = 0xE900000000000065;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x80) == 0)
      goto LABEL_18;
    goto LABEL_46;
  }
LABEL_41:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v22 = v2[2];
  v21 = v2[3];
  if (v22 >= v21 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v21 > 1), v22 + 1, 1, v2);
  v2[2] = v22 + 1;
  v23 = &v2[2 * v22];
  v23[4] = 0xD00000000000001ALL;
  v23[5] = 0x8000000100EE54F0;
  if ((a1 & 0x80) == 0)
  {
LABEL_18:
    if ((a1 & 0x100) == 0)
      goto LABEL_19;
    goto LABEL_51;
  }
LABEL_46:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v25 = v2[2];
  v24 = v2[3];
  if (v25 >= v24 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
  v2[2] = v25 + 1;
  v26 = &v2[2 * v25];
  v26[4] = 0xD000000000000013;
  v26[5] = 0x8000000100EE54D0;
  if ((a1 & 0x100) == 0)
  {
LABEL_19:
    if ((a1 & 0x200) == 0)
      goto LABEL_61;
    goto LABEL_56;
  }
LABEL_51:
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
  v28 = v2[2];
  v27 = v2[3];
  if (v28 >= v27 >> 1)
    v2 = sub_1007C7438((_QWORD *)(v27 > 1), v28 + 1, 1, v2);
  v2[2] = v28 + 1;
  v29 = &v2[2 * v28];
  v29[4] = 0xD000000000000019;
  v29[5] = 0x8000000100EE54B0;
  if ((a1 & 0x200) != 0)
  {
LABEL_56:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1007C7438(0, v2[2] + 1, 1, v2);
    v31 = v2[2];
    v30 = v2[3];
    if (v31 >= v30 >> 1)
      v2 = sub_1007C7438((_QWORD *)(v30 > 1), v31 + 1, 1, v2);
    v2[2] = v31 + 1;
    v32 = &v2[2 * v31];
    v32[4] = 0xD00000000000001BLL;
    v32[5] = 0x8000000100EE5490;
  }
LABEL_61:
  v33 = Array.description.getter(v2, &type metadata for String);
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_1007C7410()
{
  return sub_1007C6C74();
}

uint64_t sub_1007C7430()
{
  _QWORD *v0;

  return CBCharacteristicProperties.description.getter(*v0);
}

_QWORD *sub_1007C7438(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101106C20);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CADD4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Characteristic()
{
  return objc_opt_self(_TtC12searchpartyd14Characteristic);
}

uint64_t sub_1007C7564()
{
  return sub_1007CD078(&qword_101108DE0, "i+$");
}

char *sub_1007C7588(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101108DF8);
      v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[32 * v8 + 32])
          memmove(v14, a4 + 32, 32 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1007CAFB8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1007C7694(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101108E00);
      v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[40 * v8 + 32])
          memmove(v13, a4 + 32, 40 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CAEC4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C77B4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9390(a1, a2, a3, a4, &qword_101109490);
}

uint64_t sub_1007C77C0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED4B0, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

_QWORD *sub_1007C77D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1010F4A30);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CB0A8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C78E0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9148(a1, a2, a3, a4, &qword_1010ED2D8);
}

uint64_t sub_1007C78F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED248, type metadata accessor for KeyDropJoinToken);
}

uint64_t sub_1007C7908(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A9A8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1007CD208(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_1007C7B14(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101109270);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CB198(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C7C20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED350, type metadata accessor for SharingCircleSecret);
}

uint64_t sub_1007C7C34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109268, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
}

_QWORD *sub_1007C7C48(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109260);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CB944(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C7D54(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109118, (uint64_t *)&unk_101109120);
}

_QWORD *sub_1007C7D68(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_101109290, &qword_101109298);
}

uint64_t sub_1007C7D7C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1011093C8, &qword_1011093D0);
}

uint64_t sub_1007C7D90(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A9A8(a5);
  v14 = *(_QWORD *)(sub_10001A9A8(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = sub_10001A9A8(a6);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (unint64_t)v18 + v23;
  if ((a1 & 1) != 0)
  {
    v25 = a4 + v23;
    if ((unint64_t)v18 < a4 || v24 >= v25 + *(_QWORD *)(v22 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v23, v25, v11, v21);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v23, v25);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1007CD0F0(0, v11, v24, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

_QWORD *sub_1007C7F9C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1011093D8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CBA34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C80BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010EE360, type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_1007C80D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108ED0, type metadata accessor for TimeBasedKey);
}

uint64_t sub_1007C80E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109258, type metadata accessor for KeyDropInterface.KeyPackage);
}

_QWORD *sub_1007C80F8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109250);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CBB40(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C8220(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_1011090A0, type metadata accessor for KeyDropCreateRequest.Member);
}

uint64_t sub_1007C8234(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109098, type metadata accessor for PeerTrustEnvelopeV1);
}

_QWORD *sub_1007C8248(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1011093A8, (uint64_t *)&unk_1011093B0);
}

_QWORD *sub_1007C825C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A9A8(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 40 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v14[2] = v11;
      v14[3] = 2 * ((uint64_t)(v15 - 32) / 40);
      v16 = v14 + 4;
      if ((v8 & 1) != 0)
      {
LABEL_13:
        if (v14 != a4 || v16 >= &a4[5 * v11 + 4])
          memmove(v16, a4 + 4, 40 * v11);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v16 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10001B9D0(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C8388(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109388, (uint64_t *)&unk_101109390);
}

_QWORD *sub_1007C839C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109380);
      v11 = (_QWORD *)swift_allocObject(v10, 56 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 56);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[7 * v8 + 4])
          memmove(v13, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CB280(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C84C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED238, type metadata accessor for ObservedAdvertisement);
}

_QWORD *sub_1007C84D8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9798(a1, a2, a3, a4, &qword_101108EF0);
}

_QWORD *sub_1007C84E4(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1010ED4A0, &qword_1011093A0);
}

uint64_t sub_1007C84F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011003C0, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_1007C850C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010ED658, &qword_101109410);
}

uint64_t sub_1007C8520(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108E30, type metadata accessor for OwnedBeaconRecord);
}

char *sub_1007C8534(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1007C8548(a1, a2, a3, a4, &qword_1011091E0, type metadata accessor for SPDisabledReason);
}

char *sub_1007C8548(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, void (*a6)(_QWORD))
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  char *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = *((_QWORD *)a4 + 3);
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = *((_QWORD *)a4 + 2);
    if (v10 <= v11)
      v12 = *((_QWORD *)a4 + 2);
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A9A8(a5);
      v14 = (char *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      *((_QWORD *)v14 + 2) = v11;
      *((_QWORD *)v14 + 3) = 2 * (v16 >> 3);
      v17 = v14 + 32;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = (char *)&_swiftEmptyArrayStorage;
      v17 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[8 * v11 + 32])
          memmove(v17, a4 + 32, 8 * v11);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1007CBE44(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C8660(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108E78, type metadata accessor for BeaconStoreFileRecord);
}

uint64_t sub_1007C8674(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101109100, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_1007C8688(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101108EA0, &qword_1010ECD00);
}

uint64_t sub_1007C869C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101108E90, &qword_1010ECCF8);
}

uint64_t sub_1007C86B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101108E80, &qword_1010ECCF0);
}

uint64_t sub_1007C86C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108E60, type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_1007C86D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010ED180, &qword_1010FAA80);
}

uint64_t sub_1007C86EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011091A8, (uint64_t (*)(_QWORD))&type metadata accessor for Destination);
}

_QWORD *sub_1007C8700(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1010EE2B0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CB374(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C8824(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1010ED368, (uint64_t *)&unk_101105A10);
}

uint64_t sub_1007C8838(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED308, type metadata accessor for OwnerPeerTrust);
}

uint64_t sub_1007C884C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_1011090C0, (uint64_t *)&unk_1011117D0);
}

uint64_t sub_1007C8860(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED668, type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_1007C8874(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109110, type metadata accessor for MemberPeerTrust);
}

uint64_t sub_1007C8888(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_1011092A0, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1007C889C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109478, (uint64_t *)&unk_101109480);
}

uint64_t sub_1007C88B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101108E20, &qword_1010ED1A0);
}

uint64_t sub_1007C88C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED568, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_1007C88D8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109208, &qword_101109210);
}

uint64_t sub_1007C88EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED550, type metadata accessor for UpdateDeviceState);
}

uint64_t sub_1007C8900(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108E10, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

_QWORD *sub_1007C8914(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101109028);
      v11 = (_QWORD *)swift_allocObject(v10, 5 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 5);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + 5 * v8 + 32))
          memmove(v13, a4 + 4, 5 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CC03C(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C8A28(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1010ED518);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CC124(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C8B34(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101108F38);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CC214(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C8C54(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108F40, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
}

uint64_t sub_1007C8C68(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108F30, type metadata accessor for KeyDropFetchItem);
}

uint64_t sub_1007C8C7C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108F28, type metadata accessor for KeyDropFetchRequest.SharedFetchItem);
}

uint64_t sub_1007C8C90(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108F20, type metadata accessor for MemberSharingCircle);
}

uint64_t sub_1007C8CA4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED348, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_1007C8CB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011092D0, type metadata accessor for LostModeRecord);
}

uint64_t sub_1007C8CCC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108EC0, type metadata accessor for LocationProvider);
}

uint64_t sub_1007C8CE0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011092F0, type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_1007C8CF4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED1E8, type metadata accessor for ShareRecord);
}

uint64_t sub_1007C8D08(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109230, type metadata accessor for SafeLocation);
}

uint64_t sub_1007C8D1C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011092D8, type metadata accessor for LeashRecord);
}

uint64_t sub_1007C8D30(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010F33C0, type metadata accessor for NotifyWhenFoundRecord);
}

uint64_t sub_1007C8D44(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010F33D8, (uint64_t *)&unk_1011093F0);
}

_QWORD *sub_1007C8D58(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101108E50);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CC308(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C8E64(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108EE0, _s18ConnectionKeyGroupVMa);
}

_QWORD *sub_1007C8E78(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1010ED260);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CBC34(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C8F84(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101109450, type metadata accessor for NotifyMeRequest.Subscription);
}

uint64_t sub_1007C8F98(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108FE8, type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_1007C8FAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1011090E8, (uint64_t *)&unk_1011090F0);
}

uint64_t sub_1007C8FC0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1011090D8, &qword_1011090E0);
}

uint64_t sub_1007C8FD4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_1011090B0, &qword_1010ED360);
}

uint64_t sub_1007C8FE8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109000, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
}

_QWORD *sub_1007C8FFC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101108FF0);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CB850(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C9120(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109440, type metadata accessor for BluetoothManagerDevice);
}

_QWORD *sub_1007C9134(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9148(a1, a2, a3, a4, &qword_101109448);
}

_QWORD *sub_1007C9148(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10001A9A8(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 17;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 4);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[2 * v9 + 4])
          memmove(v15, a4 + 4, 16 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CB468(0, v9, (unint64_t)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C9260(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101109350);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CB554(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C9384(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9390(a1, a2, a3, a4, &qword_101109360);
}

_QWORD *sub_1007C9390(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10001A9A8(a5);
      v12 = (_QWORD *)swift_allocObject(v11, v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * v13 - 64;
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= (_QWORD *)((char *)a4 + v9 + 32))
          memmove(v14, a4 + 4, v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CC4E0(0, v9, (char *)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C9484(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED2B0, type metadata accessor for LocalFindableAccessoryRecord);
}

_QWORD *sub_1007C9498(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101108FA0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CC3F0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C95A4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011092F8, type metadata accessor for SharedBeaconGroup);
}

uint64_t sub_1007C95B8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108E70, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_1007C95CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108F60, type metadata accessor for FetchRequestBeacon);
}

char *sub_1007C95E0(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1007C8548(a1, a2, a3, a4, &qword_1010ED3D8, type metadata accessor for SPBeaconTaskName);
}

uint64_t sub_1007C95F4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_1011091C0, &qword_1011118F0);
}

_QWORD *sub_1007C9608(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109300);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CB660(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C9714(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED210, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_1007C9728(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109370, type metadata accessor for AirPodsLostModeContent.Device);
}

uint64_t sub_1007C973C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101109430, &qword_1010ED508);
}

_QWORD *sub_1007C9750(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007CAAE0(a1, a2, a3, a4, &qword_101109498, (uint64_t *)&unk_1011094A0);
}

uint64_t sub_1007C9764(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_1010F78F0, type metadata accessor for BeaconObservation);
}

uint64_t sub_1007C9778(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101109010, &qword_1010F4868);
}

_QWORD *sub_1007C978C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9798(a1, a2, a3, a4, &qword_1010F21C0);
}

_QWORD *sub_1007C9798(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10001A9A8(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 8 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v9;
      v12[3] = 2 * (v14 >> 3);
      v15 = v12 + 4;
      if ((v6 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v15 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v12 != a4 || v15 >= &a4[v9 + 4])
          memmove(v15, a4 + 4, 8 * v9);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CB660(0, v9, (char *)v15, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C98A0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1010FAAA8, (uint64_t *)&unk_1010FABA0);
}

uint64_t sub_1007C98B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101108DE8, &qword_101108DF0);
}

_QWORD *sub_1007C98C8(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9390(a1, a2, a3, a4, &qword_1010ED318);
}

uint64_t sub_1007C98D4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109288, type metadata accessor for DeviceEvent);
}

uint64_t sub_1007C98E8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED220, type metadata accessor for RawSearchResult);
}

_QWORD *sub_1007C98FC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109090);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CBF48(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C9A20(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1010ED230, &qword_101100360);
}

_QWORD *sub_1007C9A34(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9A5C(a1, a2, a3, a4, &qword_101108EF8, &qword_101108F00);
}

_QWORD *sub_1007C9A48(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9A5C(a1, a2, a3, a4, &qword_101108F08, &qword_101108F10);
}

_QWORD *sub_1007C9A5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A9A8(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 25;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 3);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[v11 + 4])
          memmove(v17, a4 + 4, 8 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CC7A4(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C9B74(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108F78, type metadata accessor for FetchRequestBeacon_OwnedDevice);
}

uint64_t sub_1007C9B88(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101108F90, &qword_1010FB2D8);
}

_QWORD *sub_1007C9B9C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109158);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CB748(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007C9CA8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1010FB8E8);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CBD3C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C9DB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED490, type metadata accessor for SecureLocation);
}

uint64_t sub_1007C9DC8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_1011092B0, type metadata accessor for SecureLocationsCachedPayload);
}

_QWORD *sub_1007C9DDC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1010ED488);
      v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4])
          memmove(v13, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CC5C4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007C9F04(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109138, (uint64_t (*)(_QWORD))&type metadata accessor for URLQueryItem);
}

uint64_t sub_1007C9F18(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011092C8, type metadata accessor for LostModeInfoRecord);
}

_QWORD *sub_1007C9F2C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9798(a1, a2, a3, a4, &qword_1010ED228);
}

uint64_t sub_1007C9F38(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101109420, type metadata accessor for LegacyBeaconState);
}

_QWORD *sub_1007C9F4C(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007CACAC(a1, a2, a3, a4, (uint64_t *)&unk_101109340);
}

_QWORD *sub_1007C9F60(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101109400);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CC6B4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007CA06C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011092C0, type metadata accessor for SecureLocationsCachedSharedKey);
}

uint64_t sub_1007CA080(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109150, type metadata accessor for WildModeTrackingLocation);
}

_QWORD *sub_1007CA094(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9A5C(a1, a2, a3, a4, &qword_1010FA4C8, &qword_101109460);
}

uint64_t sub_1007CA0A8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010ED1A8, &qword_101108020);
}

uint64_t sub_1007CA0BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010ED4B8, &qword_1011093C0);
}

uint64_t sub_1007CA0D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010ED290, &qword_101108FE0);
}

uint64_t sub_1007CA0E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1011003B0, (uint64_t *)&unk_101108FD0);
}

uint64_t sub_1007CA0F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_1011091B0, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_1007CA10C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED1C8, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

_QWORD *sub_1007CA120(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9A5C(a1, a2, a3, a4, &qword_101108E38, (uint64_t *)&unk_101108E40);
}

uint64_t sub_1007CA134(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101108F18, type metadata accessor for BeaconKeyManager.IndexInformation);
}

uint64_t sub_1007CA148(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010ED398, &qword_1011091A0);
}

uint64_t sub_1007CA15C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109378, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
}

_QWORD *sub_1007CA170(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109368);
      v11 = (_QWORD *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 4 * v8 + 32))
          memmove(v14, a4 + 4, 4 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CC8A8(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007CA27C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109218, type metadata accessor for AccessoryConnectionService.Event);
}

_QWORD *sub_1007CA290(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109418);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CC990(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007CA3B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_101109140, &qword_1010ED378);
}

uint64_t sub_1007CA3C8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109468, &qword_101109470);
}

uint64_t sub_1007CA3DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED2D0, type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

_QWORD *sub_1007CA3F0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1010ED370, &qword_101109130);
}

uint64_t sub_1007CA404(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011094C0, (uint64_t (*)(_QWORD))&type metadata accessor for Bit);
}

uint64_t sub_1007CA418(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101108F50, type metadata accessor for SharingCircleSecretValue);
}

uint64_t sub_1007CA42C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109308, (uint64_t *)&unk_101109310);
}

uint64_t sub_1007CA440(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_1011092E0, type metadata accessor for KeySyncRecord);
}

_QWORD *sub_1007CA454(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101109248);
      v11 = (_QWORD *)swift_allocObject(v10, 88 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[11 * v8 + 4])
          memmove(v13, a4 + 4, 88 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CCA84(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007CA57C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_1011090D0);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CCB74(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007CA69C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_1011094B0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CCC68(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007CA7BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED268, type metadata accessor for FetchResponse.SearchResult);
}

uint64_t sub_1007CA7D0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109020, (uint64_t *)&unk_1010F7A10);
}

uint64_t sub_1007CA7E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109280, type metadata accessor for UTInfoPublishRequestBody.State);
}

uint64_t sub_1007CA7F8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED1B8, type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_1007CA80C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109238, &qword_101109240);
}

uint64_t sub_1007CA820(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1011091F8, (uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

uint64_t sub_1007CA834(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101109080, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

_QWORD *sub_1007CA848(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101108F80);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CCD5C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007CA96C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_101109200, type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_1007CA980(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109038, (uint64_t *)&unk_101109040);
}

uint64_t sub_1007CA994(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, (uint64_t *)&unk_1011091D0, &qword_101115FE0);
}

_QWORD *sub_1007CA9A8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8(&qword_101108EB0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CCE68(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007CAACC(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007CAAE0(a1, a2, a3, a4, &qword_101109188, (uint64_t *)&unk_101109190);
}

_QWORD *sub_1007CAAE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_10001A9A8(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 17;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4])
          memmove(v17, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1007CCF74(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007CABF8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010FBA60, type metadata accessor for AccessoryMetadata);
}

uint64_t sub_1007CAC0C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101109178, type metadata accessor for BeaconProductInfoRecord);
}

uint64_t sub_1007CAC20(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101108FB8, (uint64_t *)&unk_101108FC0);
}

uint64_t sub_1007CAC34(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_101109220, &qword_101109228);
}

uint64_t sub_1007CAC48(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7D90(a1, a2, a3, a4, &qword_1010ED328, &qword_101109050);
}

uint64_t sub_1007CAC5C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, &qword_1010ED340, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_1007CAC70(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1007C7908(a1, a2, a3, a4, (uint64_t *)&unk_101109070, type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

_QWORD *sub_1007CAC84(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C9A5C(a1, a2, a3, a4, &qword_101109058, &qword_101109060);
}

_QWORD *sub_1007CAC98(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007CACAC(a1, a2, a3, a4, &qword_101109068);
}

_QWORD *sub_1007CACAC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;

  v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    v8 = a2;
    goto LABEL_8;
  }
  v7 = a4[3];
  v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2)
    goto LABEL_8;
  if (v8 + 0x4000000000000000 >= 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v8 = a2;
LABEL_8:
    v9 = a4[2];
    if (v8 <= v9)
      v10 = a4[2];
    else
      v10 = v8;
    if (v10)
    {
      v11 = sub_10001A9A8(a5);
      v12 = (_QWORD *)swift_allocObject(v11, 40 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v12[2] = v9;
      v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
      v14 = v12 + 4;
      if ((v6 & 1) != 0)
      {
LABEL_13:
        if (v12 != a4 || v14 >= &a4[5 * v9 + 4])
          memmove(v14, a4 + 4, 40 * v9);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1007CD320(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007CADD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CAEC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CAFB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CB0A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1007CB198(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CB280(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 56 * a1 + 32;
  v6 = a3 + 56 * v4;
  if (v5 >= v6 || v5 + 56 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CB374(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CB468(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CB554(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_10001A9A8((uint64_t *)&unk_101103AA0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1007CB660(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CB748(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 16 * a1 + 32;
    v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_10001A9A8((uint64_t *)&unk_101109160);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CB850(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CB944(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CBA34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_10001A9A8((uint64_t *)&unk_1011093E0);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CBB40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CBC34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_10001A9A8(&qword_101108F70);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CBD3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 32 * a1 + 32;
    v7 = a3 + 32 * v4;
    if (v6 >= v7 || v6 + 32 * v4 <= a3)
    {
      sub_10001A9A8(&qword_101109170);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CBE44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(_QWORD))
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      a5(0);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CBF48(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1007CC03C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 5 * a1 + 32);
  v6 = 5 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CC124(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CC214(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_1007CC308(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CC3F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1007CC4E0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CC5C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CC6B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CC7A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 8 * a1 + 32;
    v8 = a3 + 8 * v5;
    if (v7 >= v8 || v7 + 8 * v5 <= a3)
    {
      sub_10001A9A8(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_1007CC8A8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CC990(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CCA84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 88 * a1 + 32;
  v6 = a3 + 88 * v4;
  if (v5 >= v6 || v5 + 88 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CCB74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CCC68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CCD5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_10001A9A8(&qword_1010ED270);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CCE68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_10001A9A8(&qword_101108EB8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CCF74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 16 * a1 + 32;
    v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      sub_10001A9A8(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1007CD078(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Characteristic();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1007CD0B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CharacteristicUUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1007CD0F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(sub_10001A9A8(a5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CD208(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CD320(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 40 * a1 + 32;
  v6 = a3 + 40 * v4;
  if (v5 >= v6 || v5 + 40 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1007CD410@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1007C5BC4(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1007CD42C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010FB8C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007CD474@<X0>(uint64_t (**a1)()@<X8>)
{
  _QWORD *v1;

  return sub_1007C6A1C(v1, a1);
}

uint64_t sub_1007CD48C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007CD4B0()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007CD4DC(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2;

  return sub_1007C5F64(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1007CD4E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1007C60DC(v1[2], v1[3], v1[4], a1);
}

_QWORD *sub_1007CD510(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_DWORD *)(a1 + 2) = *(_DWORD *)((char *)a2 + 2);
    *(_BYTE *)(a1 + 6) = *((_BYTE *)a2 + 6);
    v7 = *(int *)(a3 + 32);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for Bit(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 36)) = *((_BYTE *)a2 + *(int *)(a3 + 36));
  }
  return v4;
}

uint64_t sub_1007CD5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 32);
  v3 = type metadata accessor for Bit(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_1007CD5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Bit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

_BYTE *sub_1007CD684(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  v6 = *(int *)(a3 + 32);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Bit(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 36)] = a2[*(int *)(a3 + 36)];
  return a1;
}

uint64_t sub_1007CD72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 2) = *(_DWORD *)(a2 + 2);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Bit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1007CD7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  v6 = *(int *)(a3 + 32);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Bit(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_BYTE *)(a1 + *(int *)(a3 + 36)) = *(_BYTE *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_1007CD854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007CD860);
}

uint64_t sub_1007CD860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 3);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for Bit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v10);
  }
}

uint64_t sub_1007CD8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007CD8E8);
}

uint64_t sub_1007CD8E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 3) = a2 + 1;
  }
  else
  {
    v7 = type metadata accessor for Bit(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BeaconPayloadMetaDataV2(uint64_t a1)
{
  uint64_t result;

  result = qword_101109520;
  if (!qword_101109520)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconPayloadMetaDataV2);
  return result;
}

uint64_t sub_1007CD994(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E505E8;
  v4[1] = &unk_100E50600;
  v4[2] = &unk_100E50618;
  v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
  result = type metadata accessor for Bit(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1007CDA28(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v2 = a1[3];
  v3 = a1[4];
  sub_10001AA44(a1, v2);
  dispatch thunk of BinaryEncoding.container()(v34, v2, v3);
  v4 = v1[6] - 1;
  if ((v4 & 0xFFFFFF00) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  LOBYTE(v31) = *v1;
  v5 = sub_100059570();
  v30 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(_QWORD *)(v30 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v29 = type metadata accessor for Bit(0);
  v6 = *(_QWORD *)(v29 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  LOBYTE(v31) = v1[1];
  v28 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(_QWORD *)(v28 + 16) < 2uLL)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  LOBYTE(v31) = v1[2];
  v27 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(_QWORD *)(v27 + 16) < 3uLL)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  LOBYTE(v31) = v4;
  v8 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(_QWORD *)(v8 + 16) < 4uLL)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    __break(1u);
LABEL_17:
    __break(1u);
  }
  v9 = v8;
  v10 = (v7 + 32) & ~v7;
  v11 = sub_10001A9A8(&qword_1011094C0);
  v12 = swift_allocObject(v11, *(_QWORD *)(v6 + 72) + v10, v7 | 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  v13 = type metadata accessor for BeaconPayloadMetaDataV2(0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 16))(v12 + v10, &v1[*(int *)(v13 + 32)], v29);
  LOBYTE(v31) = v1[*(int *)(v13 + 36)];
  v14 = FixedWidthInteger.bits()(&type metadata for UInt8, v5);
  if (*(_QWORD *)(v14 + 16) < 4uLL)
    goto LABEL_15;
  v15 = v14;
  v31 = v30;
  v32 = v30 + v10;
  v33 = xmmword_100E505C0;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v28);
  sub_100C19EE4(v16, v28 + v10, 0, 5uLL);
  swift_bridgeObjectRelease();
  v17 = (_QWORD *)swift_unknownObjectRetain(v27);
  sub_100C19EE4(v17, v27 + v10, 0, 7uLL);
  swift_bridgeObjectRelease();
  v18 = (_QWORD *)swift_unknownObjectRetain(v9);
  sub_100C19EE4(v18, v9 + v10, 0, 9uLL);
  swift_bridgeObjectRelease();
  if (__OFADD__(2, 1))
    goto LABEL_17;
  v19 = v31;
  v31 = sub_1007CA404(0, 3, 0, (unint64_t)_swiftEmptyArrayStorage);
  v20 = swift_unknownObjectRetain(v19);
  sub_100304AAC(v20, v32, 0, 5uLL);
  swift_bridgeObjectRetain(v12);
  sub_100305040(v21);
  swift_unknownObjectRelease(v19);
  swift_setDeallocating(v12);
  swift_arrayDestroy(v12 + v10, *(_QWORD *)(v12 + 16), v29);
  swift_deallocClassInstance(v12, 32, 7);
  v22 = swift_unknownObjectRetain(v15);
  sub_100304AAC(v22, v15 + v10, 0, 9uLL);
  v23 = sub_100112060();
  FixedWidthInteger.init(bits:)(&v31, v31, &type metadata for UInt16, v23);
  LOWORD(v31) = bswap32((unsigned __int16)v31) >> 16;
  v24 = v35;
  v25 = v36;
  sub_10009F5D0((uint64_t)v34, v35);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v31, &type metadata for UInt16, v23, v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
}

uint64_t sub_1007CDE48(_QWORD *a1)
{
  return sub_1007CDA28(a1);
}

uint64_t sub_1007CDE5C(uint64_t a1)
{
  return sub_1000DD95C(a1, qword_101109568);
}

uint64_t sub_1007CDE68(uint64_t a1)
{
  return sub_1000DD95C(a1, qword_101109580);
}

uint64_t sub_1007CDE74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v4 = v3;
  v50 = a3;
  v52 = a1;
  v53 = a2;
  v5 = type metadata accessor for UUID(0);
  __chkstk_darwin(v5);
  v51 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v13);
  static DispatchQoS.unspecified.getter(v17);
  v54 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v19, v20, v7, v18);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003DLL, 0x8000000100EE62B0, v12, v9, v16, 0);
  *(_QWORD *)(v4 + 16) = v21;
  *(_QWORD *)(v4 + 80) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0xF000000000000000;
  *(_QWORD *)(v4 + 136) = _swiftEmptyArrayStorage;
  v22 = static os_log_type_t.debug.getter(v21);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, qword_1011B7DF0, "AccessoryPairingSession.init()", 30, 2, _swiftEmptyArrayStorage, v50);
  v24 = v52;
  v23 = v53;
  *(_QWORD *)(v4 + 24) = v52;
  *(_QWORD *)(v4 + 40) = v23;
  v25 = type metadata accessor for AccessoryPairingValidator();
  v26 = swift_allocObject(v25, 32, 7);
  v27 = type metadata accessor for DeviceIdentityUtility(0);
  v28 = swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize(v28);
  v29 = v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v30 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  *(_QWORD *)(v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v28 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 5;
  *(_QWORD *)(v26 + 16) = v28;
  *(_QWORD *)(v26 + 24) = 0;
  v31 = v50;
  *(_QWORD *)(v4 + 56) = v26;
  *(_QWORD *)(v4 + 64) = v31;
  v32 = type metadata accessor for AccessoryPairingErrorManager();
  swift_allocObject(v32, 32, 7);
  swift_retain();
  v33 = v31;
  *(_QWORD *)(v4 + 48) = sub_100142F3C(v24);
  v34 = objc_msgSend(*(id *)&v33[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
  v35 = (uint64_t)v51;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

  v36 = *(_QWORD *)(v4 + 56);
  v37 = *(void **)(v4 + 16);
  v38 = type metadata accessor for AccessoryPairingCoordinator(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  swift_retain();
  v39 = sub_100C9728C(v35, v36, v37);
  v40 = v39;
  if (v39)
  {
    *(_QWORD *)(v4 + 72) = v39;
    swift_retain();
    v41 = sub_10001A9A8((uint64_t *)&unk_1011106F0);
    unsafeFromAsyncTask<A>(_:)(&v54, &unk_101121848, 0, v41);
    v42 = v54;
    if (v54)
    {
      swift_release();
      swift_release();
      swift_release();

      *(_QWORD *)(v4 + 32) = v42;
      return v4;
    }
    v43 = sub_100059390();
    v44 = swift_allocError(&type metadata for CentralManager.Error, v43, 0, 0);
    *(_QWORD *)v45 = 15;
    *(_OWORD *)(v45 + 8) = 0u;
    *(_OWORD *)(v45 + 24) = 0u;
    *(_BYTE *)(v45 + 40) = 11;
    swift_willThrow(v44);
    v46 = swift_errorRelease(v44);
    v47 = static os_log_type_t.error.getter(v46);
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, qword_1011B7DF0, "AccessoryPairingSession.init: missing central manager service!", 62, 2, _swiftEmptyArrayStorage);
    swift_release();
  }
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  if (v40)
    swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 112));
  sub_10001EF3C(*(_QWORD *)(v4 + 120), *(_QWORD *)(v4 + 128));
  swift_bridgeObjectRelease();
  v48 = type metadata accessor for AccessoryPairingSession();
  swift_deallocPartialClassInstance(v4, v48, 144, 7);
  return 0;
}

uint64_t sub_1007CE3E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7DF0, "AccessoryPairingSession.deinit", 30, 2, _swiftEmptyArrayStorage);

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 112));
  sub_10001EF3C(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 128));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1007CE4D0(uint64_t a1)
{
  uint64_t v1;

  sub_1007CE3E4(a1);
  return swift_deallocClassInstance(v1, 144, 7);
}

uint64_t type metadata accessor for AccessoryPairingSession()
{
  return objc_opt_self(_TtC12searchpartyd23AccessoryPairingSession);
}

void sub_1007CE510(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  int v77;
  _QWORD *v78;
  __int128 v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  __int128 aBlock;
  uint64_t (*v94)(uint64_t);
  void *v95;
  void (*v96)();
  uint64_t v97;

  v89 = a2;
  v90 = a3;
  v88 = type metadata accessor for DispatchWorkItemFlags(0);
  v86 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v85 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for DispatchQoS(0);
  v84 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87);
  v83 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v81 = *(_QWORD *)(v7 - 8);
  v82 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F46C0);
  v11 = __chkstk_darwin(v10);
  v80 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 112, 7);
  v79 = xmmword_100E22B10;
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  *(_QWORD *)&aBlock = *v3;
  v17 = sub_10001A9A8(&qword_1011098F0);
  v18 = String.init<A>(describing:)(&aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v21;
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 72) = 0xD000000000000021;
  *(_QWORD *)(v16 + 80) = 0x8000000100EE60A0;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: %{public}@", 22, 2, v16);
  swift_bridgeObjectRelease();
  if ((objc_msgSend(a1, "isBatteryTooLow") & 1) != 0)
  {
    sub_10001F6FC();
    v23 = v81;
    v22 = v82;
    (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v82);
    v24 = (void *)static OS_dispatch_queue.global(qos:)(v9);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v22);
    v25 = swift_allocObject(&unk_101093840, 32, 7);
    v26 = v90;
    *(_QWORD *)(v25 + 16) = v89;
    *(_QWORD *)(v25 + 24) = v26;
    v96 = sub_1007DBB04;
    v97 = v25;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v94 = sub_100016FB8;
    v95 = &unk_101093858;
    v27 = _Block_copy(&aBlock);
    v28 = swift_retain();
    v29 = v83;
    static DispatchQoS.unspecified.getter(v28);
    v92 = (uint64_t)_swiftEmptyArrayStorage;
    v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v33 = v85;
    v34 = v31;
    v35 = v88;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v34, v32, v88, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v86 + 8))(v33, v35);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v29, v87);
    swift_release();
    type metadata accessor for SPPairingSessionError(0);
    v37 = v36;
    v92 = 15;
    v38 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v39 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v92, v38, v37, v39);
    v40 = (void *)aBlock;
    sub_100143100(aBlock, 0xD00000000000003DLL, 0x8000000100EE60F0);

  }
  else
  {
    v41 = v3;
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v42 = sub_100C1A870(aBlock);
    swift_bridgeObjectRelease();
    v43 = v3[3];
    v44 = sub_10080FABC();
    if (v44 >= v42)
    {
      v51 = (char *)v44;
      v52 = static os_log_type_t.error.getter(v44);
      v78 = v41;
      v53 = v52;
      v54 = qword_1011B7DF0;
      v55 = swift_allocObject(v15, 112, 7);
      *(_OWORD *)(v55 + 16) = v79;
      *(_QWORD *)(v55 + 56) = &type metadata for Int;
      *(_QWORD *)(v55 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v55 + 32) = v42;
      *(_QWORD *)(v55 + 96) = &type metadata for Int;
      *(_QWORD *)(v55 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v55 + 72) = v51;
      os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, v54, "Limit reached %i. Current count: %i", v77, (_DWORD)v78);
      swift_bridgeObjectRelease();
      sub_10001F6FC();
      v80 = v51;
      v57 = v81;
      v56 = v82;
      (*(void (**)(char *, _QWORD, uint64_t))(v81 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v82);
      v58 = (void *)static OS_dispatch_queue.global(qos:)(v9);
      (*(void (**)(char *, uint64_t))(v57 + 8))(v9, v56);
      v59 = swift_allocObject(&unk_1010937A0, 32, 7);
      v60 = v90;
      *(_QWORD *)(v59 + 16) = v89;
      *(_QWORD *)(v59 + 24) = v60;
      v96 = sub_1007DBA74;
      v97 = v59;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v94 = sub_100016FB8;
      v95 = &unk_1010937B8;
      v61 = _Block_copy(&aBlock);
      v62 = swift_retain();
      v63 = v83;
      static DispatchQoS.unspecified.getter(v62);
      v92 = (uint64_t)_swiftEmptyArrayStorage;
      v64 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v65 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v66 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v67 = v85;
      v68 = v88;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v65, v66, v88, v64);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v63, v67, v61);
      _Block_release(v61);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v67, v68);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v63, v87);
      swift_release();
      type metadata accessor for SPPairingSessionError(0);
      v70 = v69;
      *(_QWORD *)&aBlock = 17;
      v71 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v72 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(&v92, &aBlock, v71, v70, v72);
      v73 = (void *)v92;
      *(_QWORD *)&aBlock = 0;
      *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      strcpy((char *)&aBlock, "Limit reached ");
      HIBYTE(aBlock) = -18;
      v91 = (char *)v42;
      v74._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v74);
      swift_bridgeObjectRelease();
      v75._object = (void *)0x8000000100EE60D0;
      v75._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v75);
      v91 = v80;
      v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      sub_100143100((uint64_t)v73, aBlock, *((uint64_t *)&aBlock + 1));

      swift_bridgeObjectRelease();
    }
    else
    {
      v45 = (_QWORD *)swift_allocObject(&unk_1010937F0, 48, 7);
      v46 = v90;
      v45[2] = v89;
      v45[3] = v46;
      v45[4] = v41;
      v45[5] = a1;
      v47 = type metadata accessor for TaskPriority(0);
      v48 = (uint64_t)v80;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v80, 1, 1, v47);
      v49 = (_QWORD *)swift_allocObject(&unk_101093818, 56, 7);
      v49[2] = 0;
      v49[3] = 0;
      v49[4] = v43;
      v49[5] = sub_1007DBAC4;
      v49[6] = v45;
      swift_retain();
      swift_retain();
      v50 = a1;
      swift_retain();
      swift_retain();
      sub_100691AC0(v48, (uint64_t)&unk_1010F46C8, (uint64_t)v49);
      swift_release();
      swift_release();
    }
  }
}

void sub_1007CEE28(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **aBlock;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  void *v55;
  void *v56;
  _QWORD *v57;

  v48 = a5;
  v49 = a3;
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v50 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v20 = v17;
    v21 = (_QWORD *)swift_allocObject(&unk_1010938E0, 48, 7);
    v22 = v48;
    v21[2] = v48;
    v21[3] = a4;
    v21[4] = a2;
    v21[5] = v49;
    v56 = sub_1007DBB70;
    v57 = v21;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_100016FB8;
    v55 = &unk_1010938F8;
    v23 = _Block_copy(&aBlock);
    v24 = v22;
    swift_retain();
    v25 = swift_retain();
    static DispatchQoS.unspecified.getter(v25);
    v51 = (uint64_t)_swiftEmptyArrayStorage;
    v26 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v28 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v27, v28, v12, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v14, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v12);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v20);
    swift_release();
  }
  else
  {
    v45 = a2;
    v46 = a4;
    v47 = v16;
    v48 = (void *)v17;
    v29 = static os_log_type_t.error.getter(v17);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B7DF0, "initiatePairing - manatee not available!", 40, 2);
    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
    v30 = (void *)static OS_dispatch_queue.global(qos:)(v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v31 = swift_allocObject(&unk_101093890, 32, 7);
    v32 = v49;
    *(_QWORD *)(v31 + 16) = v45;
    *(_QWORD *)(v31 + 24) = v32;
    v56 = sub_1007DBB20;
    v57 = (_QWORD *)v31;
    aBlock = _NSConcreteStackBlock;
    v53 = 1107296256;
    v54 = sub_100016FB8;
    v55 = &unk_1010938A8;
    v33 = _Block_copy(&aBlock);
    v34 = swift_retain();
    v35 = v19;
    static DispatchQoS.unspecified.getter(v34);
    v51 = (uint64_t)_swiftEmptyArrayStorage;
    v36 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v38 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v37, v38, v12, v36);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v14, v33);
    _Block_release(v33);

    (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v12);
    (*(void (**)(char *, void *))(v47 + 8))(v35, v48);
    swift_release();
    type metadata accessor for SPPairingSessionError(0);
    v40 = v39;
    v51 = 20;
    v41 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v42 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v51, v41, v40, v42);
    v43 = aBlock;
    sub_100143100((uint64_t)aBlock, 0xD000000000000015, 0x8000000100EE6160);

  }
}

uint64_t sub_1007CF2F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  id v124;

  v120 = a3;
  v121 = a4;
  v122 = a2;
  v5 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v5);
  v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_10001A9A8(&qword_1010F3980);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v9 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_10001A9A8(&qword_1010F3988);
  v99 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v98 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_10001A9A8(&qword_1010F3990);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v102 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_10001A9A8(&qword_1010F3998);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v105 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_10001A9A8(&qword_1010F39A0);
  v110 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v106 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_10001A9A8(&qword_1010F5D78);
  v111 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v108 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F5D80);
  v115 = *(_QWORD *)(v15 - 8);
  v116 = v15;
  __chkstk_darwin(v15);
  v114 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F5D88);
  v118 = *(_QWORD *)(v17 - 8);
  v119 = v17;
  __chkstk_darwin(v17);
  v117 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v88 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = static os_log_type_t.default.getter(v21);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v25 = qword_1011B7DF0;
  v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v27 = swift_allocObject(v26, 72, 7);
  *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
  v28 = objc_msgSend(a1, "identifier");
  v101 = a1;
  v29 = v28;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

  v31 = UUID.uuidString.getter(v30);
  v33 = v32;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  *(_QWORD *)(v27 + 64) = sub_10001AA00();
  *(_QWORD *)(v27 + 32) = v31;
  *(_QWORD *)(v27 + 40) = v33;
  os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "Initiate pairing with accessory %@.", 35, 2, v27);
  swift_bridgeObjectRelease();
  v34 = v122;
  v123 = (id)sub_100E0799C(*(char **)(v122 + 64), 0);
  v124 = *(id *)(v34 + 16);
  v35 = v124;
  v95 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56);
  v36(v7, 1, 1, v95);
  v37 = v36;
  v94 = v36;
  v89 = v35;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v39 = sub_10001F6FC();
  v40 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v41 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v91 = v38;
  v93 = v39;
  v92 = v40;
  Publisher.receive<A>(on:options:)(&v124, v7, v38, v39, v40, v41);
  sub_100004048((uint64_t)v7, &qword_1010EECC8);

  v42 = swift_release();
  v43 = static Subscribers.Demand.unlimited.getter(v42);
  v44 = v9;
  v45 = type metadata accessor for Peripheral(0);
  v90 = v45;
  v46 = sub_1000193A4(&qword_1010F39D0, &qword_1010F3980, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v47 = v98;
  v48 = v43;
  v49 = v97;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v48, sub_1000E01BC, 0, v97, v45, v38, v46, v40);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v44, v49);
  v50 = v89;
  v123 = v89;
  v51 = v95;
  v37(v7, 1, 1, v95);
  v52 = sub_1000193A4(&qword_1010F39D8, &qword_1010F3988, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v53 = v50;
  v54 = v102;
  v55 = v100;
  Publisher.receive<A>(on:options:)(&v123, v7, v100, v39, v52, v41);
  sub_100004048((uint64_t)v7, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v99 + 8))(v47, v55);
  v56 = swift_allocObject(&unk_1010931B0, 24, 7);
  v57 = swift_weakInit(v56 + 16, v122);
  v58 = static Subscribers.Demand.unlimited.getter(v57);
  v59 = sub_1000193A4(&qword_1010F39E0, &qword_1010F3990, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v60 = v105;
  v61 = v104;
  v62 = v90;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v58, sub_1007DBB7C, v56, v104, v90, v91, v59, v92);
  swift_release();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v54, v61);
  v123 = v53;
  v94(v7, 1, 1, v51);
  v63 = sub_1000193A4(&qword_1010F39E8, &qword_1010F3998, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v64 = v53;
  v65 = v106;
  v66 = v109;
  Publisher.receive<A>(on:options:)(&v123, v7, v109, v93, v63, v41);
  sub_100004048((uint64_t)v7, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v107 + 8))(v60, v66);
  v67 = sub_1000193A4(&qword_1010F39F0, &qword_1010F39A0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v68 = v108;
  v69 = v112;
  Publisher.compactMap<A>(_:)(sub_1000E0680, 0, v112, v62, v67);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v65, v69);
  v70 = sub_10001A9A8(&qword_1011074A0);
  v71 = v113;
  v72 = v114;
  Publishers.CompactMap.map<A>(_:)(sub_100245644, 0, v113, v70);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v68, v71);
  v73 = sub_10001A9A8(&qword_1010EEE90);
  v74 = sub_1000193A4(&qword_1010F5D90, &qword_1010F5D80, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v75 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v76 = v116;
  v77 = v117;
  Publisher.catch<A>(_:)(sub_1002197E4, 0, v116, v73, v74, v75);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v72, v76);
  v78 = swift_allocObject(&unk_1010931B0, 24, 7);
  v79 = v122;
  swift_weakInit(v78 + 16, v122);
  v80 = (_QWORD *)swift_allocObject(&unk_101093930, 48, 7);
  v81 = v120;
  v82 = v121;
  v80[2] = v78;
  v80[3] = v81;
  v83 = v101;
  v80[4] = v82;
  v80[5] = v83;
  v84 = sub_1000193A4(&qword_1010F5D98, &qword_1010F5D88, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  v85 = v83;
  v86 = v119;
  Publisher<>.sink(receiveValue:)(sub_1007DBBB8, v80, v119, v84);
  swift_release();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v77, v86);
  swift_beginAccess(v79 + 80, &v123, 33, 0);
  AnyCancellable.store(in:)(v79 + 80);
  swift_endAccess(&v123);
  return swift_release();
}

uint64_t sub_1007CFCB8@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  char v39[16];
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42[2];
  char v43[24];
  _QWORD v44[5];

  v38 = a3;
  v5 = sub_10001A9A8(&qword_1010EEEB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (char *)*a1;
  v44[3] = &type metadata for BAServiceIdentifier;
  v44[4] = &off_101077A98;
  LOBYTE(v44[0]) = 1;
  v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v43, 0, 0);
  v15 = *v14;
  v40 = v44;
  swift_bridgeObjectRetain(v15);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v39, v15);
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v44);
  if (v17)
  {
    v19 = sub_1007ED9A8((uint64_t)&off_10104DC90);
    v20 = swift_allocObject(&unk_1010939F8, 32, 7);
    *(_QWORD *)(v20 + 16) = v17;
    *(_QWORD *)(v20 + 24) = v19;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    swift_retain();
    v22 = swift_bridgeObjectRetain(v19);
    v44[0] = Future.init(_:)(sub_1000FA48C, v20, v22);
    v23 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v24 = Publisher.eraseToAnyPublisher()(v21, v23);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    v37 = v10;
    v26 = a2 + 16;
    v27 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7DF0, "No FindMy service", 17, 2, _swiftEmptyArrayStorage);
    swift_beginAccess(v26, v44, 0, 0);
    if (swift_weakLoadStrong(v26))
    {
      swift_retain();
      swift_release();
      type metadata accessor for SPPairingSessionError(0);
      v29 = v28;
      v41 = 7;
      v30 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v31 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(v42, &v41, v30, v29, v31);
      v32 = (void *)v42[0];
      sub_100143100(v42[0], 0xD000000000000025, 0x8000000100EE6260);

      swift_release();
    }
    v42[0] = (uint64_t)v13;
    v33 = type metadata accessor for Peripheral(0);
    v34 = v13;
    Just.init(_:)(v42, v33);
    v35 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v5, &type metadata for CentralManager.Error, v35);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v36 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v24 = Publisher.eraseToAnyPublisher()(v9, v36);
    result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v12, v9);
  }
  *v38 = v24;
  return result;
}

uint64_t sub_1007D009C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void **v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  _QWORD v78[2];
  void **aBlock;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  ValueMetadata *v82;
  void (*v83)();
  uint64_t v84;
  _QWORD v85[6];
  _QWORD v86[5];
  char v87;
  char v88[8];

  v69 = a5;
  v76 = a4;
  v75 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v88, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v73 = Strong;
    sub_10000F9B8(a1, (uint64_t)v86, &qword_1011074A0);
    v72 = v7;
    v71 = v11;
    v70 = v8;
    if ((v87 & 1) != 0)
    {
      v19 = sub_100059244((uint64_t)v86, (uint64_t)v85);
      v20 = static os_log_type_t.error.getter(v19);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v21 = qword_1011B7DF0;
      v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v23 = swift_allocObject(v22, 72, 7);
      *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
      sub_100E01294();
      v25 = v24;
      v27 = v26;
      *(_QWORD *)(v23 + 56) = &type metadata for String;
      *(_QWORD *)(v23 + 64) = sub_10001AA00();
      *(_QWORD *)(v23 + 32) = v25;
      *(_QWORD *)(v23 + 40) = v27;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "initiatePairing error %@", 24, 2, v23);
      swift_bridgeObjectRelease();
      sub_10001F6FC();
      (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
      v28 = (void *)static OS_dispatch_queue.global(qos:)(v17);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      v29 = swift_allocObject(&unk_101093958, 32, 7);
      v30 = v76;
      *(_QWORD *)(v29 + 16) = v75;
      *(_QWORD *)(v29 + 24) = v30;
      v83 = sub_1002A3AB8;
      v84 = v29;
      aBlock = _NSConcreteStackBlock;
      v80 = 1107296256;
      v81 = sub_100016FB8;
      v82 = (ValueMetadata *)&unk_101093970;
      v31 = _Block_copy(&aBlock);
      v32 = swift_retain();
      static DispatchQoS.unspecified.getter(v32);
      v77[0] = _swiftEmptyArrayStorage;
      v33 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v34 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v35 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v36 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(v77, v34, v35, v72, v33);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v31);
      _Block_release(v31);
      swift_release();

      (*(void (**)(char *, uint64_t))(v70 + 8))(v10, v36);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v71);
      sub_1000593D4(v85);
      return swift_release();
    }
    v82 = &type metadata for BAServiceIdentifier;
    v83 = (void (*)())&off_101077A98;
    LOBYTE(aBlock) = 1;
    v68 = (id)v86[0];
    v39 = (uint64_t *)(v86[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
    swift_beginAccess(v86[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v85, 0, 0);
    v40 = *v39;
    __chkstk_darwin(v41);
    *(&v68 - 2) = &aBlock;
    swift_bridgeObjectRetain(v40);
    sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)(&v68 - 4), v40);
    v43 = v42;
    swift_bridgeObjectRelease();
    v44 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if (v43)
    {
      v82 = &type metadata for BACharacteristicIdentifier.FindMy;
      v83 = (void (*)())&off_101077A78;
      LOBYTE(aBlock) = 0;
      swift_beginAccess(v43 + 40, v77, 0, 0);
      v45 = *(_QWORD *)(v43 + 40);
      __chkstk_darwin(v46);
      *(&v68 - 2) = v47;
      swift_bridgeObjectRetain(v45);
      sub_100A77748((uint64_t (*)(uint64_t *))sub_100245470, (uint64_t)(&v68 - 4), v45);
      v49 = v48;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      if (v49)
      {
        v50 = v69;
        v51 = v75;
        v52 = v76;
        sub_1007D45A4(v69, v49, v75, v76);
        sub_1007D37A0(v50, v49, v51, v52);

        swift_release();
        swift_release();
        return swift_release();
      }
      v44 = swift_release();
    }
    v53 = static os_log_type_t.error.getter(v44);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v53, &_mh_execute_header, qword_1011B7DF0, "No pairing characteristic!", 26, 2, _swiftEmptyArrayStorage);
    type metadata accessor for SPPairingSessionError(0);
    v55 = v54;
    v78[0] = 7;
    v56 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v57 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v78, v56, v55, v57);
    v58 = aBlock;
    sub_100143100((uint64_t)aBlock, 0xD000000000000031, 0x8000000100EE6200);

    sub_10001F6FC();
    (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
    v59 = (void *)static OS_dispatch_queue.global(qos:)(v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v60 = swift_allocObject(&unk_1010939A8, 32, 7);
    v61 = v76;
    *(_QWORD *)(v60 + 16) = v75;
    *(_QWORD *)(v60 + 24) = v61;
    v83 = sub_1007DBBC4;
    v84 = v60;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_100016FB8;
    v82 = (ValueMetadata *)&unk_1010939C0;
    v62 = _Block_copy(&aBlock);
    v63 = swift_retain();
    static DispatchQoS.unspecified.getter(v63);
    v78[0] = _swiftEmptyArrayStorage;
    v64 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v65 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v66 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v67 = v72;
    dispatch thunk of SetAlgebra.init<A>(_:)(v78, v65, v66, v72, v64);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v62);

    _Block_release(v62);
    swift_release();

    (*(void (**)(char *, uint64_t))(v70 + 8))(v10, v67);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v13, v71);
    return swift_release();
  }
  v37 = static os_log_type_t.error.getter(0);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  return os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7DF0, "Missing self!", 13, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_1007D094C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD aBlock[6];

  v5 = v4;
  v35 = a4;
  v36 = a2;
  v33 = a3;
  v34 = a1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v9 - 8);
  v38 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v14 = qword_1011B7DF0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  aBlock[0] = *v4;
  v17 = sub_10001A9A8(&qword_1011098F0);
  v18 = String.init<A>(describing:)(aBlock, v17);
  v20 = v19;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v21 = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v21;
  *(_QWORD *)(v16 + 64) = v21;
  *(_QWORD *)(v16 + 72) = 0xD00000000000002FLL;
  *(_QWORD *)(v16 + 80) = 0x8000000100EE5F20;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "%{public}@: %{public}@", 22, 2, v16);
  swift_bridgeObjectRelease();
  v22 = (_QWORD *)swift_allocObject(&unk_101093610, 56, 7);
  v23 = v33;
  v24 = v34;
  v22[2] = v34;
  v22[3] = v5;
  v26 = v35;
  v25 = v36;
  v22[4] = v23;
  v22[5] = v26;
  v22[6] = v25;
  aBlock[4] = sub_1007DB9D0;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101093628;
  v27 = _Block_copy(aBlock);
  v28 = v24;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter(v25);
  v40 = _swiftEmptyArrayStorage;
  v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v30, v31, v6, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v38);
  return swift_release();
}

void sub_1007D0C50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD v65[2];
  __int128 v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[10];
  uint64_t v86;
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;
  char v90[24];
  __int128 aBlock;
  uint64_t (*v92)(uint64_t);
  void *v93;
  void (*v94)();
  uint64_t v95;

  v71 = a5;
  v82 = a3;
  v83 = a4;
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v7);
  v68 = (char *)v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for DispatchWorkItemFlags(0);
  v77 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v76 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for DispatchQoS(0);
  v79 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81);
  v78 = (char *)v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v74 = *(_QWORD *)(v11 - 8);
  v75 = v11;
  __chkstk_darwin(v11);
  v73 = (char *)v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v13 = __chkstk_darwin(v69);
  v70 = (char *)v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v72 = (char *)v65 - v15;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)v65 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = static os_log_type_t.default.getter(v18);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v22 = qword_1011B7DF0;
  v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v23 = swift_allocObject(v67, 72, 7);
  v66 = xmmword_100E22B00;
  *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
  v84 = (uint64_t)a1;
  v24 = objc_msgSend(a1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v26 = UUID.uuidString.getter(v25);
  v28 = v27;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  *(_QWORD *)(v23 + 56) = &type metadata for String;
  v29 = sub_10001AA00();
  *(_QWORD *)(v23 + 64) = v29;
  *(_QWORD *)(v23 + 32) = v26;
  *(_QWORD *)(v23 + 40) = v28;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Finalize pairing with accessory %@.", 35, 2, v23);
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(a2 + 72);
  v31 = v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess(v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext, v90, 0, 0);
  sub_10000F9B8(v31, (uint64_t)&aBlock, &qword_1010EC418);
  if (v93)
  {
    v32 = sub_10001A9A8(&qword_1010EC630);
    v33 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
    v34 = swift_dynamicCast(v85, &aBlock, v32, v33, 6);
    v35 = v84;
    if ((v34 & 1) != 0)
    {
      v36 = v85[0];
      v37 = *(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
          + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
      swift_beginAccess(v37, &v86, 0, 0);
      sub_10000F9B8(v37, (uint64_t)&aBlock, &qword_1010EC550);
      if (v93)
      {
        v65[0] = v29;
        sub_10000F9FC(&aBlock, (uint64_t)v87);
        v39 = v88;
        v38 = v89;
        sub_10001AA44(v87, v88);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v38 + 8) + 8) + 40))(v39);
        v41 = v40;
        CCCKGGetOpeningSize(224, 10);
        v42 = (char *)&loc_1007D1038 + dword_1007D1EA4[v41 >> 62];
        v65[1] = v36;
        __asm { BR              X10 }
      }
      swift_release();
      v34 = sub_100004048((uint64_t)&aBlock, &qword_1010EC550);
    }
    v43 = v82;
  }
  else
  {
    v34 = sub_100004048((uint64_t)&aBlock, &qword_1010EC418);
    v43 = v82;
    v35 = v84;
  }
  v44 = static os_log_type_t.error.getter(v34);
  os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_1011B7DF0, "Missing context to generate initial pairing data!", 49, 2, _swiftEmptyArrayStorage);
  sub_1007D2170(v35, 0, 0);
  sub_10001F6FC();
  v46 = v73;
  v45 = v74;
  v47 = v75;
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v73, enum case for DispatchQoS.QoSClass.default(_:), v75);
  v48 = (void *)static OS_dispatch_queue.global(qos:)(v46);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
  v49 = swift_allocObject(&unk_101093660, 32, 7);
  v50 = v83;
  *(_QWORD *)(v49 + 16) = v43;
  *(_QWORD *)(v49 + 24) = v50;
  v94 = sub_1007DBA04;
  v95 = v49;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v92 = sub_100016FB8;
  v93 = &unk_101093678;
  v51 = _Block_copy(&aBlock);
  v52 = swift_retain();
  v53 = v78;
  static DispatchQoS.unspecified.getter(v52);
  v85[0] = _swiftEmptyArrayStorage;
  v54 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v55 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v56 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v57 = v76;
  v58 = v55;
  v59 = v80;
  dispatch thunk of SetAlgebra.init<A>(_:)(v85, v58, v56, v80, v54);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v53, v57, v51);
  _Block_release(v51);

  (*(void (**)(char *, uint64_t))(v77 + 8))(v57, v59);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v53, v81);
  swift_release();
  type metadata accessor for SPPairingSessionError(0);
  v61 = v60;
  v85[0] = 7;
  v62 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v63 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v85, v62, v61, v63);
  v64 = (void *)aBlock;
  sub_100143100(aBlock, 0xD00000000000002DLL, 0x8000000100EE5FC0);

}

void sub_1007D1EB4(void (*a1)(_QWORD, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;

  type metadata accessor for SPPairingSessionError(0);
  v6 = v5;
  v10 = a3;
  v7 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  v9 = v11;
  a1(0, v11);

}

uint64_t sub_1007D1F60(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(v3 + 16);
  v14 = (_QWORD *)swift_allocObject(&unk_1010935C0, 48, 7);
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_1007DB96C;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010935D8;
  v15 = _Block_copy(aBlock);
  swift_retain();
  v16 = a1;
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v24 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_1007D2170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v16[16];

  v7 = *v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = (void *)v3[2];
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    v15 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v15);
    *(_QWORD *)&v16[-48] = v3;
    *(_QWORD *)&v16[-40] = a1;
    *(_QWORD *)&v16[-32] = a2;
    *(_QWORD *)&v16[-24] = a3;
    *(_QWORD *)&v16[-16] = v7;
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryPairingSession.unpair", 60, 2, sub_1007DB744, &v16[-64], &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007D22B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  id v74;
  void (*v75)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v76;
  uint64_t v77;
  char *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97[4];
  id v98;

  v96 = a5;
  v95 = a4;
  v79 = a3;
  v94 = a1;
  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_10001A9A8(&qword_101109890);
  v82 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101109898);
  v12 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  v81 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1011098A0);
  v83 = *(_QWORD *)(v15 - 8);
  v84 = v15;
  __chkstk_darwin(v15);
  v78 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1011098A8);
  v86 = *(_QWORD *)(v17 - 8);
  v87 = v17;
  __chkstk_darwin(v17);
  v85 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1011098B0);
  v89 = *(_QWORD *)(v19 - 8);
  v90 = v19;
  __chkstk_darwin(v19);
  v88 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1011098B8);
  v92 = *(_QWORD *)(v21 - 8);
  v93 = v21;
  __chkstk_darwin(v21);
  v91 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97[0] = (id)sub_100C977CC();
  v98 = *(id *)(a2 + 16);
  v23 = v98;
  v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v77 = v24;
  v75 = v25;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v8, 1, 1);
  v74 = v23;
  v26 = sub_10001A9A8(&qword_101109328);
  v27 = sub_10001F6FC();
  v28 = sub_1000193A4((unint64_t *)&unk_101109330, &qword_101109328, (const char *)&protocol conformance descriptor for Future<A, B>);
  v29 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v76 = v27;
  v72 = v29;
  Publisher.receive<A>(on:options:)(&v98, v8, v26, v27, v28, v29);
  sub_100004048((uint64_t)v8, &qword_1010EECC8);

  swift_release();
  v30 = swift_allocObject(&unk_101093480, 32, 7);
  v31 = v79;
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = v31;
  v32 = swift_allocObject(&unk_1010934A8, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_1007DB768;
  *(_QWORD *)(v32 + 24) = v30;
  swift_retain();
  v79 = v31;
  v33 = static Subscribers.Demand.unlimited.getter(v79);
  v34 = sub_1000193A4(&qword_1011098C0, &qword_101109890, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v35 = v73;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v33, sub_1007DB78C, v32, v73, &type metadata for () + 1, v26, v34, v28);
  swift_release();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v10, v35);
  v36 = swift_allocObject(&unk_1010934D0, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_1007DB7B4;
  *(_QWORD *)(v36 + 24) = a2;
  v82 = a2;
  v37 = swift_retain();
  v38 = static Subscribers.Demand.unlimited.getter(v37);
  v39 = type metadata accessor for Peripheral(0);
  v40 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v41 = sub_1000193A4(&qword_1011098C8, &qword_101109898, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v42 = v78;
  v43 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v44 = v80;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v38, sub_1007DB78C, v36, v80, v39, v40, v41, v43);
  swift_release();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v14, v44);
  if (qword_1010E9F70 != -1)
    swift_once(&qword_1010E9F70, sub_1007CDE68);
  v45 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v46 = sub_10001A9E8(v45, (uint64_t)qword_101109580);
  v47 = v74;
  v97[0] = v74;
  v75(v8, 1, 1, v77);
  v48 = sub_1000193A4(&qword_1011098D0, &qword_1011098A0, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v49 = v47;
  v50 = v84;
  v51 = v85;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v46, v97, v8, sub_1000E2DBC, 0, v84, v76, v48, v72);
  sub_100004048((uint64_t)v8, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v42, v50);
  v52 = sub_10001A9A8(&qword_1011074A0);
  v53 = sub_1000193A4(&qword_1011098D8, &qword_1011098A8, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v54 = v87;
  v55 = v88;
  Publisher.map<A>(_:)(sub_1000E068C, 0, v87, v52, v53);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v54);
  v56 = sub_10001A9A8(&qword_1010EEE90);
  v57 = sub_1000193A4(&qword_1011098E0, &qword_1011098B0, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v58 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v59 = v90;
  v60 = v91;
  Publisher.catch<A>(_:)(sub_1002197E4, 0, v90, v56, v57, v58);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v55, v59);
  v61 = swift_allocObject(&unk_1010931B0, 24, 7);
  v62 = v82;
  swift_weakInit(v61 + 16, v82);
  v63 = (_QWORD *)swift_allocObject(&unk_1010934F8, 56, 7);
  v65 = v94;
  v64 = v95;
  v63[2] = v61;
  v63[3] = v65;
  v66 = v79;
  v63[4] = v79;
  v63[5] = v64;
  v67 = v96;
  v63[6] = v96;
  v68 = v66;
  swift_retain();
  sub_10001D898(v64, v67);
  v69 = sub_1000193A4(&qword_1011098E8, &qword_1011098B8, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v70 = v93;
  Publisher<>.sink(receiveValue:)(sub_1007DB820, v63, v93, v69);
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v60, v70);
  swift_beginAccess(v62 + 80, v97, 33, 0);
  AnyCancellable.store(in:)(v62 + 80);
  swift_endAccess(v97);
  return swift_release();
}

void sub_1007D2A88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE *v58;
  void *v59;
  _BYTE *v60;
  id v61;
  void **v62;
  _BYTE v63[4];
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t Strong;
  _QWORD *v74;
  void **aBlock;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  void *v78;
  uint64_t (*v79)();
  uint64_t v80;
  _BYTE v81[48];
  _QWORD v82[6];
  id v83[2];
  char v84;
  char v85[8];

  v66 = a6;
  v65 = a5;
  v72 = type metadata accessor for DispatchWorkItemFlags(0);
  v70 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v69 = &v63[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v71 = type metadata accessor for DispatchQoS(0);
  v68 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v67 = &v63[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = &v63[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v63[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v85, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v83, &qword_1011074A0);
    if ((v84 & 1) == 0)
    {

      v64 = static os_log_type_t.default.getter(v38);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v39 = qword_1011B7DF0;
      v40 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v41 = swift_allocObject(v40, 72, 7);
      *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
      v42 = objc_msgSend(a4, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v42);

      v44 = UUID.uuidString.getter(v43);
      v46 = v45;
      (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
      *(_QWORD *)(v41 + 56) = &type metadata for String;
      *(_QWORD *)(v41 + 64) = sub_10001AA00();
      *(_QWORD *)(v41 + 32) = v44;
      *(_QWORD *)(v41 + 40) = v46;
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, v39, "Successfully unpaired %@.", 25, 2, v41);
      swift_bridgeObjectRelease();
      sub_10001F6FC();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
      v20 = (void *)static OS_dispatch_queue.global(qos:)(v14);
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
      v47 = swift_allocObject(&unk_101093570, 32, 7);
      v48 = v65;
      v49 = v66;
      *(_QWORD *)(v47 + 16) = v65;
      *(_QWORD *)(v47 + 24) = v49;
      v79 = sub_1007DB90C;
      v80 = v47;
      aBlock = _NSConcreteStackBlock;
      v76 = 1107296256;
      v77 = sub_100016FB8;
      v78 = &unk_101093588;
      v50 = _Block_copy(&aBlock);
      v51 = sub_10001D898(v48, v49);
      v52 = v67;
      static DispatchQoS.unspecified.getter(v51);
      v82[0] = _swiftEmptyArrayStorage;
      v53 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v54 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v55 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v56 = v69;
      v12 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(v82, v54, v55, v72, v53);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v52, v56, v50);
      _Block_release(v50);

      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v56, v12);
      (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v52, v71);
      goto LABEL_8;
    }
    v19 = sub_100059244((uint64_t)v83, (uint64_t)v82);
    v20 = (void *)static os_log_type_t.error.getter(v19);
    if (qword_1010EA310 != -1)
      goto LABEL_12;
    while (1)
    {
      v21 = qword_1011B7DF0;
      v22 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v23 = swift_allocObject(v22, 72, 7);
      *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
      sub_100E01294();
      v25 = v24;
      v27 = v26;
      *(_QWORD *)(v23 + 56) = &type metadata for String;
      *(_QWORD *)(v23 + 64) = sub_10001AA00();
      *(_QWORD *)(v23 + 32) = v25;
      *(_QWORD *)(v23 + 40) = v27;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Unpair failed. Error %@", 23, 2, v23);
      swift_bridgeObjectRelease();
      sub_10001F6FC();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
      v28 = (void *)static OS_dispatch_queue.global(qos:)(v14);
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v14, v11);
      sub_100059280(v82, (uint64_t)v81);
      v29 = swift_allocObject(&unk_101093520, 73, 7);
      v30 = v65;
      v31 = v66;
      *(_QWORD *)(v29 + 16) = v65;
      *(_QWORD *)(v29 + 24) = v31;
      sub_100059244((uint64_t)v81, v29 + 32);
      v79 = sub_1007DB8D4;
      v80 = v29;
      aBlock = _NSConcreteStackBlock;
      v76 = 1107296256;
      v77 = sub_100016FB8;
      v78 = &unk_101093538;
      v20 = _Block_copy(&aBlock);
      v32 = sub_10001D898(v30, v31);
      v33 = v67;
      static DispatchQoS.unspecified.getter(v32);
      v74 = _swiftEmptyArrayStorage;
      v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v37 = v69;
      v12 = v72;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v74, v35, v36, v72, v34);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v33, v37, v20);
      _Block_release(v20);

      (*(void (**)(_BYTE *, uint64_t))(v70 + 8))(v37, v12);
      (*(void (**)(_BYTE *, uint64_t))(v68 + 8))(v33, v71);
      sub_1000593D4(v82);
LABEL_8:
      v57 = swift_release();
      v58 = *(_BYTE **)(Strong + 32);
      if (v58[OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent] == 1)
        break;
      __break(1u);
LABEL_12:
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    }
    v59 = *(void **)(Strong + 64);
    __chkstk_darwin(v57);
    *(_QWORD *)&v63[-16] = v58;
    type metadata accessor for SharedPairingAgent();
    v60 = v58;
    v61 = v59;
    Lock.callAsFunction<A>(_:)(sub_1007DBD00);
    v62 = aBlock;
    sub_100BF49E4(v61);
    swift_release();

  }
}

uint64_t sub_1007D3288(uint64_t result, uint64_t a2, _QWORD *a3)
{
  void (*v4)(uint64_t);
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v4 = (void (*)(uint64_t))result;
    v5 = sub_100059390();
    v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0, 0);
    sub_100059280(a3, v7);
    v4(v6);
    return swift_errorRelease(v6);
  }
  return result;
}

uint64_t sub_1007D32F0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v40;
  _BYTE v41[24];
  _BYTE v42[24];
  _QWORD v43[3];
  ValueMetadata *v44;
  _UNKNOWN **v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v41[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v41[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = *(void **)(v2 + 16);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    v8 = static os_log_type_t.default.getter(v14);
    if (qword_1010EA310 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA310, sub_100B5E2C8);
LABEL_3:
  v15 = qword_1011B7DF0;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v16, 72, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
  v18 = objc_msgSend(a1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  *(_QWORD *)(v17 + 64) = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 40) = v22;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v15, "unpair accessory %@", 19, 2, v17);
  swift_bridgeObjectRelease();
  sub_10073748C();
  BinaryDecodable.init(data:)(v23, 0, 0xC000000000000000);
  v46 = 1;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0x2000000000000000;
  v24 = *(_QWORD *)(v2 + 64);
  v44 = &type metadata for BAServiceIdentifier;
  v45 = &off_101077A98;
  LOBYTE(v43[0]) = 1;
  v25 = (uint64_t *)(v24 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(v24 + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v42, 0, 0);
  v26 = *v25;
  __chkstk_darwin(v27);
  *(&v40 - 2) = (uint64_t)v43;
  swift_bridgeObjectRetain(v26);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FA448, (uint64_t)(&v40 - 4), v26);
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  if (!v29)
  {
LABEL_7:
    v36 = static os_log_type_t.error.getter(v30);
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_1011B7DF0, "Unable to retrieve Config Control Point!", 40, 2, _swiftEmptyArrayStorage);
    v37 = sub_10001A9A8(&qword_101109328);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    return Future.init(_:)(sub_1007D3748, 0, v38);
  }
  v44 = &type metadata for BACharacteristicIdentifier.FindMy;
  v45 = &off_101077A78;
  LOBYTE(v43[0]) = 1;
  swift_beginAccess(v29 + 40, v41, 0, 0);
  v31 = *(_QWORD *)(v29 + 40);
  __chkstk_darwin(v32);
  *(&v40 - 2) = (uint64_t)v43;
  swift_bridgeObjectRetain(v31);
  sub_100A77748((uint64_t (*)(uint64_t *))sub_1000FA464, (uint64_t)(&v40 - 4), v31);
  v34 = v33;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  if (!v34)
  {
    v30 = swift_release();
    goto LABEL_7;
  }
  v35 = sub_1007D5DB8((uint64_t)&v46, v34);
  swift_release();
  swift_release();
  return v35;
}

uint64_t sub_1007D374C(void (*a1)(_OWORD *))
{
  _OWORD v2[2];
  uint64_t v3;
  __int16 v4;

  v3 = 0;
  memset(v2, 0, sizeof(v2));
  v4 = 267;
  a1(v2);
  return sub_100004048((uint64_t)v2, &qword_1010EEBF8);
}

uint64_t sub_1007D37A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[16];

  v9 = *v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (void *)v4[2];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v17 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v17);
    *(_QWORD *)&v18[-48] = a1;
    *(_QWORD *)&v18[-40] = v4;
    *(_QWORD *)&v18[-32] = a2;
    *(_QWORD *)&v18[-24] = a3;
    *(_QWORD *)&v18[-16] = a4;
    *(_QWORD *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryPairingSession.pairingAgent", 66, 2, sub_1007DB5DC, &v18[-64], &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007D38E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  Swift::String v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  id v75;
  void (*v76)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97[2];
  Swift::String v98;

  v96 = a6;
  v94 = a5;
  v79 = a4;
  v74 = a2;
  v95 = a1;
  v8 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v8);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EECD0);
  v12 = *(_QWORD *)(v11 - 8);
  v80 = v11;
  v81 = v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_101109850);
  v83 = *(_QWORD *)(v15 - 8);
  v84 = v15;
  __chkstk_darwin(v15);
  v78 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_101109858);
  v86 = *(_QWORD *)(v17 - 8);
  v87 = v17;
  __chkstk_darwin(v17);
  v85 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_101109860);
  v89 = *(_QWORD *)(v19 - 8);
  v90 = v19;
  __chkstk_darwin(v19);
  v88 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101109868);
  v92 = *(_QWORD *)(v21 - 8);
  v93 = v21;
  __chkstk_darwin(v21);
  v91 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(a2, "discoveredMetadata");
  v24 = objc_msgSend(v23, "manufacturerName");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  v98 = v25;
  v97[0] = (id)0x6C6F6F747073;
  v97[1] = (id)0xE600000000000000;
  v26 = sub_1000330C8();
  LOBYTE(v23) = StringProtocol.contains<A>(_:)(v97, &type metadata for String, &type metadata for String, v26, v26);
  swift_bridgeObjectRelease();
  v98._countAndFlagsBits = sub_100E00E3C(v23 & 1, *(char **)(a3 + 64));
  v97[0] = *(id *)(a3 + 16);
  v27 = v97[0];
  v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v76 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v76(v10, 1, 1, v28);
  v75 = v27;
  v29 = sub_10001A9A8(&qword_1010EEBE8);
  v30 = sub_10001F6FC();
  v31 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v32 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v33 = v14;
  v77 = v30;
  v73 = v32;
  Publisher.receive<A>(on:options:)(v97, v10, v29, v30, v31, v32);
  sub_100004048((uint64_t)v10, &qword_1010EECC8);

  swift_release();
  v34 = (_QWORD *)swift_allocObject(&unk_1010933E0, 40, 7);
  v35 = v74;
  v34[2] = a3;
  v34[3] = v35;
  v34[4] = v79;
  v82 = a3;
  swift_retain();
  v36 = v35;
  v37 = swift_retain();
  v38 = static Subscribers.Demand.unlimited.getter(v37);
  v39 = sub_10001A9A8(&qword_101109328);
  v40 = sub_1000193A4(&qword_1010EECF8, &qword_1010EECD0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v41 = sub_1000193A4((unint64_t *)&unk_101109330, &qword_101109328, (const char *)&protocol conformance descriptor for Future<A, B>);
  v42 = v78;
  v43 = v38;
  v44 = v80;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v43, sub_1007DB650, v34, v80, &type metadata for () + 1, v39, v40, v41);
  swift_release();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v33, v44);
  if (qword_1010E9F70 != -1)
    swift_once(&qword_1010E9F70, sub_1007CDE68);
  v45 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v46 = sub_10001A9E8(v45, (uint64_t)qword_101109580);
  v47 = v75;
  v98._countAndFlagsBits = (uint64_t)v75;
  v76(v10, 1, 1, v28);
  v48 = sub_1000193A4(&qword_101109870, &qword_101109850, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v49 = v47;
  v50 = v85;
  v51 = v46;
  v52 = v84;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v51, &v98, v10, sub_1000FC3D0, 0, v84, v77, v48, v73);
  sub_100004048((uint64_t)v10, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v83 + 8))(v42, v52);
  v53 = sub_10001A9A8(&qword_1010EEBF8);
  v54 = sub_1000193A4(&qword_101109878, &qword_101109858, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v55 = v87;
  v56 = v88;
  Publisher.map<A>(_:)(sub_10046C0AC, 0, v87, v53, v54);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v50, v55);
  v57 = sub_10001A9A8(&qword_1010FCA88);
  v58 = sub_1000193A4(&qword_101109880, &qword_101109860, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v59 = sub_1000193A4(&qword_1010FCA98, &qword_1010FCA88, (const char *)&protocol conformance descriptor for Just<A>);
  v60 = v90;
  v61 = v91;
  Publisher.catch<A>(_:)(sub_10046C0B4, 0, v90, v57, v58, v59);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v56, v60);
  v62 = swift_allocObject(&unk_1010931B0, 24, 7);
  v63 = v82;
  swift_weakInit(v62 + 16, v82);
  v64 = (_QWORD *)swift_allocObject(&unk_101093408, 48, 7);
  v65 = v94;
  v66 = v95;
  v64[2] = v62;
  v64[3] = v66;
  v67 = v96;
  v64[4] = v65;
  v64[5] = v67;
  v68 = sub_1000193A4(&qword_101109888, &qword_101109868, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v69 = v93;
  v70 = Publisher<>.sink(receiveValue:)(sub_1007DB690, v64, v93, v68);
  swift_release();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v61, v69);
  *(_QWORD *)(v63 + 96) = v70;
  return swift_release();
}

uint64_t sub_1007D4044@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  _BYTE v7[88];

  sub_1007D8288(a1, (uint64_t)v7);
  v5 = sub_1007D8024((uint64_t)v7, a2);
  result = sub_100004048((uint64_t)v7, &qword_1011097D8);
  *a3 = v5;
  return result;
}

uint64_t sub_1007D40A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[4];
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[6];
  _BYTE v47[48];
  _QWORD v48[6];
  _BYTE v49[48];
  char v50[4];

  v42 = a5;
  v41 = a4;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v37[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  a2 += 16;
  swift_beginAccess(a2, v50, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    Transaction.capture()();
    v18 = sub_10000F9B8(a1, (uint64_t)v49, &qword_1010EEBF8);
    if ((v49[41] & 1) != 0)
    {
      v39 = v8;
      v40 = v7;
      v19 = sub_100059244((uint64_t)v49, (uint64_t)v48);
      v38 = static os_log_type_t.error.getter(v19);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v20 = qword_1011B7DF0;
      v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v22 = swift_allocObject(v21, 72, 7);
      *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
      sub_100E01294();
      v24 = v23;
      v26 = v25;
      *(_QWORD *)(v22 + 56) = &type metadata for String;
      *(_QWORD *)(v22 + 64) = sub_10001AA00();
      *(_QWORD *)(v22 + 32) = v24;
      *(_QWORD *)(v22 + 40) = v26;
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v20, "Failed to write initial pairing data. Error %@", 46, 2, v22);
      swift_bridgeObjectRelease();
      sub_1007D50BC(1);
      sub_10001F6FC();
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
      v27 = (void *)static OS_dispatch_queue.global(qos:)(v16);
      (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v16, v13);
      sub_100059280(v48, (uint64_t)v47);
      v28 = swift_allocObject(&unk_101093430, 73, 7);
      v29 = v42;
      *(_QWORD *)(v28 + 16) = v41;
      *(_QWORD *)(v28 + 24) = v29;
      sub_100059244((uint64_t)v47, v28 + 32);
      aBlock[4] = sub_1007DB738;
      aBlock[5] = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_101093448;
      v30 = _Block_copy(aBlock);
      v31 = swift_retain();
      static DispatchQoS.unspecified.getter(v31);
      v45 = _swiftEmptyArrayStorage;
      v32 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v33 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v34 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v35 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v33, v34, v40, v32);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v10, v30);
      swift_release();
      _Block_release(v30);

      (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v10, v35);
      (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v12, v44);
      sub_1000593D4(v48);
    }
    else
    {
      v36 = static os_log_type_t.default.getter(v18);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, qword_1011B7DF0, "Wrote initial pairing data. Waiting for accessory to write back.", 64, 2, _swiftEmptyArrayStorage);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1007D4544(void (*a1)(uint64_t), uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_100059390();
  v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0, 0);
  sub_100059280(a3, v7);
  a1(v6);
  return swift_errorRelease(v6);
}

uint64_t sub_1007D45A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[16];

  v9 = *v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v18[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = (void *)v4[2];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v17 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v17);
    *(_QWORD *)&v18[-48] = v4;
    *(_QWORD *)&v18[-40] = a2;
    *(_QWORD *)&v18[-32] = a1;
    *(_QWORD *)&v18[-24] = a3;
    *(_QWORD *)&v18[-16] = a4;
    *(_QWORD *)&v18[-8] = v9;
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryPairingSession.didUpdateValue", 68, 2, sub_1007DB4B4, &v18[-64], &type metadata for () + 1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007D46E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v91;
  id v92;
  uint64_t v93;
  void (*v94)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  id v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  id v128;

  v126 = a2;
  v122 = a1;
  v123 = a6;
  v121 = a5;
  v111 = a4;
  v7 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v7);
  v124 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_10001A9A8(&qword_1010EED38);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v104 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EED40);
  v109 = *(_QWORD *)(v10 - 8);
  v110 = v10;
  __chkstk_darwin(v10);
  v108 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101109800);
  v114 = *(_QWORD *)(v12 - 8);
  v115 = v12;
  __chkstk_darwin(v12);
  v113 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_10001A9A8(&qword_101109808);
  v116 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v112 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_101109810);
  v119 = *(_QWORD *)(v15 - 8);
  v120 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_101109818);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_101109820);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = *(_QWORD *)(a3 + 16);
  v27 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
  v117 = a3;
  v105 = &type metadata for () + 1;
  v103 = v27;
  v28 = v125;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9DF4, a3, v26, &type metadata for () + 1, v27);
  if (v28)
  {
    swift_errorRelease(v28);
    v29 = 0;
    v30 = v126;
  }
  else
  {
    v97 = v17;
    v98 = v21;
    v99 = v19;
    v96 = v18;
    v100 = 0;
    v101 = v25;
    v102 = v23;
    v125 = v22;
    v31 = v126;
    v127 = *(id *)(v126 + 16);
    v32 = v127;
    v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
    v35 = (uint64_t)v124;
    v95 = v33;
    v94 = v34;
    ((void (*)(char *, uint64_t, uint64_t))v34)(v124, 1, 1);
    v36 = sub_10001F6FC();
    v37 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v38 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v92 = v32;
    v39 = v104;
    v40 = v103;
    v103 = v36;
    v93 = v38;
    Publisher.receive<A>(on:options:)(&v127, v35, v40, v36, v37, v38);
    sub_100004048(v35, &qword_1010EECC8);

    swift_release();
    v41 = swift_retain();
    v42 = static Subscribers.Demand.unlimited.getter(v41);
    v43 = sub_10001A9A8(&qword_1010EC530);
    v44 = sub_10001A9A8(&qword_1010EEC28);
    v45 = sub_1000193A4(&qword_1010EED78, &qword_1010EED38, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v46 = sub_1000193A4(&qword_1010EED80, &qword_1010EEC28, (const char *)&protocol conformance descriptor for Future<A, B>);
    v48 = v107;
    v47 = v108;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v42, sub_1007DB4D0, v31, v107, v43, v44, v45, v46);
    swift_release();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v39, v48);
    v49 = swift_allocObject(&unk_101093278, 32, 7);
    v50 = v111;
    *(_QWORD *)(v49 + 16) = v31;
    *(_QWORD *)(v49 + 24) = v50;
    swift_retain();
    v111 = v50;
    v51 = sub_10001A9A8(&qword_1011097D8);
    v52 = sub_1000193A4(&qword_1010EED88, &qword_1010EED40, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v53 = v113;
    v54 = v110;
    Publisher.map<A>(_:)(sub_1007DB500, v49, v110, v51, v52);
    swift_release();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v47, v54);
    v55 = swift_allocObject(&unk_1010932A0, 32, 7);
    v56 = v117;
    *(_QWORD *)(v55 + 16) = v31;
    *(_QWORD *)(v55 + 24) = v56;
    swift_retain();
    v57 = swift_retain();
    v58 = static Subscribers.Demand.unlimited.getter(v57);
    v59 = sub_10001A9A8(&qword_101109328);
    v60 = sub_1000193A4(&qword_101109828, &qword_101109800, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v61 = sub_1000193A4((unint64_t *)&unk_101109330, &qword_101109328, (const char *)&protocol conformance descriptor for Future<A, B>);
    v62 = v112;
    v63 = v115;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v58, sub_1007DB530, v55, v115, v105, v59, v60, v61);
    swift_release();
    (*(void (**)(char *, uint64_t))(v114 + 8))(v53, v63);
    v30 = v31;
    if (qword_1010E9F68 != -1)
      swift_once(&qword_1010E9F68, sub_1007CDE5C);
    v64 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    v65 = sub_10001A9E8(v64, (uint64_t)qword_101109568);
    v66 = v92;
    v128 = v92;
    v67 = (uint64_t)v124;
    v94(v124, 1, 1, v95);
    v68 = sub_1000193A4(&qword_101109830, &qword_101109808, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v69 = v66;
    v70 = v97;
    v71 = v118;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v65, &v128, v67, sub_1000FC3D0, 0, v118, v103, v68, v93);
    sub_100004048(v67, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v116 + 8))(v62, v71);
    v72 = sub_10001A9A8(&qword_1010EEBF8);
    v73 = sub_1000193A4(&qword_101109838, &qword_101109810, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    v74 = v98;
    v75 = v120;
    Publisher.map<A>(_:)(sub_1007DBDD0, 0, v120, v72, v73);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v70, v75);
    v76 = sub_10001A9A8(&qword_1010FCA88);
    v77 = sub_1000193A4(&qword_101109840, &qword_101109818, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v78 = sub_1000193A4(&qword_1010FCA98, &qword_1010FCA88, (const char *)&protocol conformance descriptor for Just<A>);
    v79 = v101;
    v80 = v96;
    Publisher.catch<A>(_:)(sub_10046C0B4, 0, v96, v76, v77, v78);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v74, v80);
    v81 = swift_allocObject(&unk_1010931B0, 24, 7);
    swift_weakInit(v81 + 16, v30);
    v82 = (_QWORD *)swift_allocObject(&unk_1010932C8, 64, 7);
    v83 = v121;
    v84 = v122;
    v82[2] = v81;
    v82[3] = v84;
    v85 = v111;
    v82[4] = v111;
    v82[5] = v56;
    v86 = v123;
    v82[6] = v83;
    v82[7] = v86;
    v87 = sub_1000193A4(&qword_101109848, &qword_101109820, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v88 = v85;
    swift_retain();
    swift_retain();
    swift_retain();
    v89 = v125;
    v29 = Publisher<>.sink(receiveValue:)(sub_1007DB5A0, v82, v125, v87);
    swift_release();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v79, v89);
  }
  *(_QWORD *)(v30 + 88) = v29;
  return swift_release();
}

uint64_t sub_1007D502C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t result;
  _BYTE v13[24];

  v11 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v11);
  if (result)
  {
    Transaction.capture()();
    sub_1007DA49C(a1, a5, a6, a7);
    return swift_release();
  }
  return result;
}

void sub_1007D50BC(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  void *v5;

  v1[11] = 0;
  swift_release();
  v1[12] = 0;
  v3 = swift_release();
  if ((a1 & 1) != 0)
  {
    if (*(_BYTE *)(v1[4] + OBJC_IVAR____TtC12searchpartyd14CentralManager_isSharedPairingAgent) == 1)
    {
      v4 = (void *)v1[8];
      __chkstk_darwin(v3);
      type metadata accessor for SharedPairingAgent();
      Lock.callAsFunction<A>(_:)(sub_1000F9D30);
      sub_100BF49E4(v4);

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1007D518C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 16);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    static os_log_type_t.debug.getter(v10);
    if (qword_1010EA310 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA310, sub_100B5E2C8);
LABEL_3:
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  *(_OWORD *)(swift_allocObject(v11, 72, 7) + 16) = xmmword_100E22B00;
  __asm { BR              X11 }
}

uint64_t sub_1007D53D4(void (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  __int16 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t (*v59)(char *, uint64_t);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(__int128 *);
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128[8];

  v10 = type metadata accessor for BinaryDecodingError(0);
  v114 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v116 = (uint64_t)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BinaryDecoder(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v113 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EEC30);
  __chkstk_darwin(v15);
  v111 = (uint64_t)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for Bit(0);
  v112 = *(_QWORD *)(v115 - 8);
  v17 = __chkstk_darwin(v115);
  v109 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v101 - v19;
  a3 += 16;
  swift_beginAccess(a3, v128, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v119 = 0;
    v117 = 0u;
    v118 = 0u;
    LOBYTE(v120) = 11;
    LOBYTE(v121) = 1;
    a1(&v117);
    return sub_100004048((uint64_t)&v117, &qword_1010EEC38);
  }
  v22 = Strong;
  v101 = v13;
  v103 = v20;
  v102 = v12;
  v110 = v10;
  v107 = a2;
  v108 = a1;
  v23 = *(_QWORD *)(Strong + 120);
  v24 = *(_QWORD *)(Strong + 128);
  if (v24 >> 60 == 15)
    v25 = 0;
  else
    v25 = *(_QWORD *)(Strong + 120);
  v26 = 0xC000000000000000;
  if (v24 >> 60 != 15)
    v26 = *(_QWORD *)(Strong + 128);
  v126 = v25;
  v127 = v26;
  sub_10001BBBC(a4, a5);
  sub_10001BD08(v23, v24);
  sub_100AEF294(1, a4, a5);
  v27 = v117;
  Data.append(_:)(v117, *((_QWORD *)&v117 + 1));
  sub_10001BC14(v27, *((unint64_t *)&v27 + 1));
  v28 = v126;
  v29 = v127;
  v31 = *(_QWORD *)(v22 + 120);
  v30 = *(_QWORD *)(v22 + 128);
  *(_QWORD *)(v22 + 120) = v126;
  *(_QWORD *)(v22 + 128) = v29;
  sub_10001BBBC(v28, v29);
  v32 = sub_10001EF3C(v31, v30);
  v33 = static os_log_type_t.info.getter(v32);
  v34 = a4;
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v35 = qword_1011B7DF0;
  v106 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v36 = swift_allocObject(v106, 72, 7);
  v105 = xmmword_100E22B00;
  *(_OWORD *)(v36 + 16) = xmmword_100E22B00;
  sub_10001BBBC(v28, v29);
  v37 = Data.description.getter(v28, v29);
  v39 = v38;
  sub_10001BC14(v28, v29);
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  v104 = sub_10001AA00();
  *(_QWORD *)(v36 + 64) = v104;
  *(_QWORD *)(v36 + 32) = v37;
  *(_QWORD *)(v36 + 40) = v39;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v35, "localReadBuffer %@", 18, 2, v36);
  swift_bridgeObjectRelease();
  sub_10001BBBC(v34, a5);
  sub_1000FC3EC(v34, a5);
  v41 = v40;
  sub_10001BC14(v34, a5);
  v42 = a5;
  v43 = v34;
  v44 = v110;
  if ((v41 & 0x100) == 0)
  {
    LOBYTE(v117) = v41;
    v45 = sub_100059570();
    v46 = FixedWidthInteger.bits()(&type metadata for UInt8, v45);
    if (*(_QWORD *)(v46 + 16))
    {
      v47 = v112;
      v48 = v111;
      v49 = v115;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v112 + 16))(v111, v46 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80)), v115);
      v50 = 0;
    }
    else
    {
      v50 = 1;
      v49 = v115;
      v47 = v112;
      v48 = v111;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v48, v50, 1, v49);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v48, 1, v49) != 1)
    {
      v112 = v43;
      v54 = v103;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v103, v48, v49);
      v55 = v109;
      (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v109, enum case for Bit.one(_:), v49);
      v56 = v47;
      v57 = sub_100006204((unint64_t *)&qword_1010EDCA0, (uint64_t (*)(uint64_t))&type metadata accessor for Bit, (uint64_t)&protocol conformance descriptor for Bit);
      dispatch thunk of RawRepresentable.rawValue.getter(&v117, v49, v57);
      dispatch thunk of RawRepresentable.rawValue.getter(&v125, v49, v57);
      LODWORD(v57) = v117;
      v58 = v125;
      v59 = *(uint64_t (**)(char *, uint64_t))(v56 + 8);
      v60 = v59(v55, v49);
      if ((_DWORD)v57 == v58)
      {
        v111 = v42;
        BinaryDecoder.init()(v60);
        v62 = v126;
        v61 = v127;
        sub_10001BBBC(v126, v127);
        v63 = sub_1007DB424();
        BinaryDecoder.decode<A>(_:from:)(&type metadata for AccessoryPairingCommand, v62, v61, &type metadata for AccessoryPairingCommand, v63);
        sub_10001BC14(v62, v61);
        v83 = v117;
        v84 = *((_QWORD *)&v118 + 1);
        v112 = v118;
        v86 = v119;
        v85 = v120;
        v87 = v121;
        v116 = v122;
        v88 = v124;
        v114 = v123;
        v89 = *(_QWORD *)(v22 + 120);
        v90 = *(_QWORD *)(v22 + 128);
        *(_OWORD *)(v22 + 120) = xmmword_100E22B20;
        sub_10001EF3C(v89, v90);
        *((_QWORD *)&v118 + 1) = &type metadata for AccessoryPairingCommand;
        v119 = v63;
        v120 = sub_1007DA458();
        v91 = swift_allocObject(&unk_101093250, 96, 7);
        *(_QWORD *)&v117 = v91;
        *(_OWORD *)(v91 + 16) = v83;
        v92 = v112;
        *(_QWORD *)(v91 + 32) = v112;
        *(_QWORD *)(v91 + 40) = v84;
        v93 = v84;
        v94 = v86;
        *(_QWORD *)(v91 + 48) = v86;
        *(_QWORD *)(v91 + 56) = v85;
        v95 = v87;
        v111 = v87;
        v96 = v116;
        *(_QWORD *)(v91 + 64) = v87;
        *(_QWORD *)(v91 + 72) = v96;
        v97 = v114;
        *(_QWORD *)(v91 + 80) = v114;
        *(_QWORD *)(v91 + 88) = v88;
        LOBYTE(v121) = 0;
        v98 = v92;
        v99 = v93;
        v100 = v94;
        sub_1007D9DE4(v83, *((uint64_t *)&v83 + 1), v92, v93, v94, v85, v95, v96, v97, v88, (void (*)(void))sub_10001BBBC);
        v108(&v117);
        swift_release();
        sub_1007D9DE4(v83, *((uint64_t *)&v83 + 1), v98, v99, v100, v85, v111, v116, v114, v88, (void (*)(void))sub_10001BC14);
        (*(void (**)(char *, uint64_t))(v101 + 8))(v113, v102);
        v59(v103, v115);
        sub_10001BC14(v126, v127);
        return sub_100004048((uint64_t)&v117, &qword_1010EEC38);
      }
      v64 = sub_100006204((unint64_t *)&qword_1010EC010, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
      v52 = swift_allocError(v44, v64, 0, 0);
      v66 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v114 + 104))(v65, enum case for BinaryDecodingError.insufficientData(_:), v44);
      swift_willThrow(v66);
      v59(v54, v49);
      sub_10001BC14(v126, v127);
      v43 = v112;
      goto LABEL_20;
    }
    sub_100004048(v48, &qword_1010EEC30);
  }
  v51 = sub_1007DB3E0();
  v52 = swift_allocError(&type metadata for AccessoryPairingSession.AccessoryPairingSessionError, v51, 0, 0);
  *v53 = 1;
  swift_willThrow(v52);
  sub_10001BC14(v126, v127);
LABEL_20:
  *(_QWORD *)&v117 = v52;
  swift_errorRetain(v52);
  v67 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v68 = v116;
  if (swift_dynamicCast(v116, &v117, v67, v44, 0))
  {
    v69 = v114;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v114 + 88))(v68, v44) == enum case for BinaryDecodingError.insufficientData(_:))
    {
      v70 = swift_errorRelease(v52);
      v71 = static os_log_type_t.info.getter(v70);
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, qword_1011B7DF0, "insufficientData. Keep reading...", 33, 2, _swiftEmptyArrayStorage);
      swift_release();
      return swift_errorRelease(v117);
    }
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v44);
  }
  v73 = swift_errorRelease(v117);
  v74 = static os_log_type_t.error.getter(v73);
  v75 = qword_1011B7DF0;
  v76 = swift_allocObject(v106, 72, 7);
  *(_OWORD *)(v76 + 16) = v105;
  sub_10001BBBC(v43, v42);
  v77 = Data.description.getter(v43, v42);
  v79 = v78;
  sub_10001BC14(v43, v42);
  v80 = v104;
  *(_QWORD *)(v76 + 56) = &type metadata for String;
  *(_QWORD *)(v76 + 64) = v80;
  *(_QWORD *)(v76 + 32) = v77;
  *(_QWORD *)(v76 + 40) = v79;
  os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, v75, "Failed to decode data %@", 24, 2, v76);
  swift_bridgeObjectRelease();
  v81 = *(_QWORD *)(v22 + 120);
  v82 = *(_QWORD *)(v22 + 128);
  *(_OWORD *)(v22 + 120) = xmmword_100E22B20;
  sub_10001EF3C(v81, v82);
  *(_QWORD *)&v117 = v52;
  LOBYTE(v120) = 10;
  LOBYTE(v121) = 1;
  swift_errorRetain(v52);
  v108(&v117);
  swift_release();
  swift_errorRelease(v52);
  return sub_100004048((uint64_t)&v117, &qword_1010EEC38);
}

uint64_t sub_1007D5DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v12 = swift_allocObject(&unk_1010931B0, 24, 7);
    swift_weakInit(v12 + 16, v2);
    v13 = swift_allocObject(&unk_101093200, 112, 7);
    *(_QWORD *)(v13 + 16) = v12;
    sub_1007D9D58(a1, v13 + 24);
    *(_QWORD *)(v13 + 104) = a2;
    v14 = sub_10001A9A8(&qword_101109328);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    sub_1007D9D94(a1, (void (*)(void))sub_10001BBBC);
    swift_retain();
    return Future.init(_:)(sub_1007DA448, v13, v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007D5F10(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  __int16 v35;
  _BYTE v36[24];

  v10 = type metadata accessor for BinaryEncoder(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v36, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v15 = Strong;
    v31 = a5;
    v16 = *(_QWORD *)(Strong + 104);
    v17 = *(_QWORD *)(Strong + 112);
    *(_QWORD *)(Strong + 104) = a1;
    *(_QWORD *)(Strong + 112) = a2;
    swift_retain();
    v18 = sub_10001D8A8(v16, v17);
    BinaryEncoder.init()(v18);
    sub_1007D9D58(a4, (uint64_t)v33);
    v19 = sub_1007DA458();
    v20 = BinaryEncoder.encode<A>(_:)(v33, &type metadata for AccessoryPairingCommand, v19);
    v32 = v10;
    v22 = v20;
    v24 = v23;
    v25 = *(_QWORD *)(*(_QWORD *)(v15 + 64) + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
    __chkstk_darwin(v20);
    *(&v30 - 2) = (uint64_t)v26;
    v27 = v26;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F83D8, &v30 - 4, v25, &type metadata for () + 1, &type metadata for Int);

    result = *(_QWORD *)&v33[0] - 1;
    if (__OFSUB__(*(_QWORD *)&v33[0], 1))
    {
      __break(1u);
    }
    else
    {
      v28 = Data.chunked(into:)(result, v22, v24);
      v29 = sub_1000F7B84(v28);
      swift_bridgeObjectRelease();
      swift_beginAccess(v15 + 136, v33, 33, 0);
      sub_10030294C((uint64_t)v29);
      swift_endAccess(v33);
      sub_1007D6278(v31);
      sub_10001BC14(v22, v24);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v32);
    }
  }
  else
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    v35 = 267;
    a1(v33);
    return sub_100004048((uint64_t)v33, &qword_1010EEBF8);
  }
  return result;
}

void sub_1007D6278(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  void (*v50)(_QWORD *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  _QWORD v63[5];
  char v64;
  id v65;
  char v66[32];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EECD0);
  v56 = *(_QWORD *)(v7 - 8);
  v57 = v7;
  __chkstk_darwin(v7);
  v55 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010FCA78);
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  __chkstk_darwin(v9);
  v58 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010FCA80);
  v62 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v61 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = (void *)v2[2];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  v19 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  swift_beginAccess(v2 + 17, v66, 0, 0);
  v20 = (_QWORD *)v2[17];
  if (v20[2])
  {
    v53 = v11;
    v54 = a1;
    v16 = (_QWORD *)v20[4];
    v19 = v20[5];
    v21 = sub_10001BBBC((uint64_t)v16, v19);
    v13 = static os_log_type_t.debug.getter(v21);
    if (qword_1010EA310 == -1)
    {
LABEL_4:
      v22 = qword_1011B7DF0;
      v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v24 = swift_allocObject(v23, 72, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
      sub_10001BBBC((uint64_t)v16, v19);
      v25 = Data.description.getter(v16, v19);
      v27 = v26;
      sub_10001BC14((uint64_t)v16, v19);
      *(_QWORD *)(v24 + 56) = &type metadata for String;
      *(_QWORD *)(v24 + 64) = sub_10001AA00();
      *(_QWORD *)(v24 + 32) = v25;
      *(_QWORD *)(v24 + 40) = v27;
      os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v22, "processQueuedUpdates: writing %@", 32, 2, v24);
      swift_bridgeObjectRelease();
      v28 = v54;
      v52 = sub_1007C5C3C((uint64_t)v16, v19);
      v63[0] = v52;
      v65 = v18;
      v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 1, 1, v29);
      v30 = v18;
      v31 = sub_10001A9A8(&qword_1010EEBE8);
      v32 = sub_10001F6FC();
      v33 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      v34 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      v35 = v55;
      Publisher.receive<A>(on:options:)(&v65, v6, v31, v32, v33, v34);
      sub_100004048((uint64_t)v6, &qword_1010EECC8);

      v36 = sub_10001A9A8(&qword_1010EEBF8);
      v37 = sub_1000193A4(&qword_1010EECF8, &qword_1010EECD0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v38 = v57;
      v39 = v58;
      Publisher.map<A>(_:)(sub_1007DBDD0, 0, v57, v36, v37);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v35, v38);
      v40 = sub_10001A9A8(&qword_1010FCA88);
      v41 = sub_1000193A4(&qword_1010FCA90, &qword_1010FCA78, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v42 = sub_1000193A4(&qword_1010FCA98, &qword_1010FCA88, (const char *)&protocol conformance descriptor for Just<A>);
      v44 = v60;
      v43 = v61;
      Publisher.catch<A>(_:)(sub_10046C0B4, 0, v60, v40, v41, v42);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v44);
      v45 = swift_allocObject(&unk_1010931B0, 24, 7);
      swift_weakInit(v45 + 16, v2);
      v46 = swift_allocObject(&unk_1010931D8, 32, 7);
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = v28;
      v47 = sub_1000193A4(&qword_1010FCAA0, &qword_1010FCA80, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      swift_retain();
      v48 = v53;
      Publisher<>.sink(receiveValue:)(sub_1007DA3E4, v46, v53, v47);
      swift_release();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v48);
      v49 = v2 + 10;
      swift_beginAccess(v49, v63, 33, 0);
      AnyCancellable.store(in:)(v49);
      swift_endAccess(v63);
      swift_release();
      swift_release();
      sub_10001BC14((uint64_t)v16, v19);
      return;
    }
LABEL_9:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
    goto LABEL_4;
  }
  v50 = (void (*)(_QWORD *))v2[13];
  if (v50)
  {
    v51 = v2[14];
    v64 = 0;
    swift_retain();
    v50(v63);
    sub_10001D8A8((uint64_t)v50, v51);
    sub_100004048((uint64_t)v63, &qword_1010EEBF8);
  }
}

void sub_1007D6850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *);
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;
  _QWORD v28[6];
  _BYTE v29[48];
  _BYTE v30[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v30, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v7 = (_QWORD *)Strong;
    v8 = sub_10000F9B8(a1, (uint64_t)v29, &qword_1010EEBF8);
    if ((v29[41] & 1) != 0)
    {
      v9 = sub_100059244((uint64_t)v29, (uint64_t)v28);
      v10 = static os_log_type_t.error.getter(v9);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v11 = qword_1011B7DF0;
      v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v13 = swift_allocObject(v12, 72, 7);
      *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
      sub_100E01294();
      v15 = v14;
      v17 = v16;
      *(_QWORD *)(v13 + 56) = &type metadata for String;
      *(_QWORD *)(v13 + 64) = sub_10001AA00();
      *(_QWORD *)(v13 + 32) = v15;
      *(_QWORD *)(v13 + 40) = v17;
      os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "writeFuture error: %@", 21, 2, v13);
      swift_bridgeObjectRelease();
      v18 = (void (*)(uint64_t *))v7[13];
      if (v18)
      {
        v19 = v7[14];
        v24 = 4;
        v25 = 0u;
        v26 = 0u;
        v27 = 267;
        swift_retain();
        v18(&v24);
        sub_10001D8A8((uint64_t)v18, v19);
        swift_release();
        sub_100004048((uint64_t)&v24, &qword_1010EEBF8);
        sub_1000593D4(v28);
        return;
      }
      sub_1000593D4(v28);
    }
    else
    {
      v20 = static os_log_type_t.debug.getter(v8);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7DF0, "writeFuture success", 19, 2, _swiftEmptyArrayStorage);
      swift_beginAccess(v7 + 17, &v24, 33, 0);
      v21 = (_QWORD *)v7[17];
      if (!v21[2])
      {
        __break(1u);
        return;
      }
      v23 = v21[4];
      v22 = v21[5];
      sub_10001BBBC(v23, v22);
      sub_100779578(0, 1);
      swift_endAccess(&v24);
      sub_10001BC14(v23, v22);
      sub_1007D6278(a3);
    }
    swift_release();
  }
}

double sub_1007D6ACC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  double result;
  uint64_t v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  char v73;
  _BYTE v74[32];
  _QWORD v75[5];
  _BYTE v76[80];
  _BYTE v77[56];
  uint64_t v78;
  unint64_t v79;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 16);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  sub_100057DB8(a1, (uint64_t)v77);
  v6 = sub_10001A9A8(&qword_1010EC530);
  v12 = swift_dynamicCast(&v68, v77, v6, &type metadata for AccessoryPairingCommand, 6);
  if (!(_DWORD)v12)
  {
    v3 = static os_log_type_t.error.getter(v12);
    if (qword_1010EA310 == -1)
    {
LABEL_10:
      v24 = qword_1011B7DF0;
      v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v26 = swift_allocObject(v25, 72, 7);
      *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
      sub_100057DB8(a1, (uint64_t)&v68);
      v27 = String.init<A>(describing:)(&v68, v6);
      v29 = v28;
      *(_QWORD *)(v26 + 56) = &type metadata for String;
      *(_QWORD *)(v26 + 64) = sub_10001AA00();
      *(_QWORD *)(v26 + 32) = v27;
      *(_QWORD *)(v26 + 40) = v29;
      os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v24, "Invalid command from payload %@", 31, 2, v26);
      swift_bridgeObjectRelease();
LABEL_16:
      v38 = 6;
LABEL_18:
      *(_QWORD *)a2 = v38;
      result = 0.0;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_BYTE *)(a2 + 40) = 11;
LABEL_19:
      *(_BYTE *)(a2 + 80) = 1;
      return result;
    }
LABEL_24:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
    goto LABEL_10;
  }
  sub_1007D9D58((uint64_t)&v68, (uint64_t)v76);
  v13 = sub_1007D9D58((uint64_t)v76, (uint64_t)v77);
  v14 = (v79 >> 59) & 6 | ((v78 & 0x2000000000000000) != 0);
  if (v14 == 3)
  {
    v78 &= ~0x2000000000000000uLL;
    v79 &= 0xCFFFFFFFFFFFFFFFLL;
    v30 = static os_log_type_t.default.getter(v13);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7DF0, "Received pairing status.", 24, 2, _swiftEmptyArrayStorage);
    v31 = *(_QWORD *)(v3 + 72);
    *(_BYTE *)(v31 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 5;
    sub_100B5BA68();
    v32 = sub_10001A9A8(&qword_1010EC540);
    v17 = swift_dynamicCast(&v68, v75, v32, &type metadata for SendPairingStatusCommandPayload, 6);
    if ((_DWORD)v17)
    {
      v33 = v68;
      v34 = v70;
      v67 = v69;
      v35 = *((_QWORD *)&v70 + 1);
      v36 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
      v37 = *(_QWORD *)(v31 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      swift_retain();
      sub_10001BBBC(v34, v35);
      sub_1002F7924(v34, v35);
      v44 = *(_QWORD *)(v37 + 72);
      v45 = *(_QWORD *)(v37 + 80);
      *(_OWORD *)(v37 + 72) = v68;
      sub_10001EF3C(v44, v45);
      swift_release();
      v46 = *(_QWORD *)(v31 + v36);
      *((_QWORD *)&v69 + 1) = &type metadata for CollaborativeKeyGen.v1.C3;
      *(_QWORD *)&v70 = sub_100058360();
      swift_retain();
      sub_10001BBBC(v33, *((unint64_t *)&v33 + 1));
      sub_1002F74B0(v33, *((uint64_t *)&v33 + 1));
      v65 = v34;
      v66 = v35;
      sub_100005CF0((uint64_t)&v68, (uint64_t)v75, &qword_1010EC550);
      v47 = v46 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
      swift_beginAccess(v46 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3, v74, 33, 0);
      sub_100004084((uint64_t)v75, v47, &qword_1010EC550);
      swift_endAccess(v74);
      swift_release();
      v48 = (uint64_t *)(*(_QWORD *)(v31 + v36) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
      v49 = *v48;
      v50 = v48[1];
      v51 = v67;
      *(_OWORD *)v48 = v67;
      sub_10001BBBC(v51, *((unint64_t *)&v51 + 1));
      sub_10001EF3C(v49, v50);
      v52 = static Data.random(bytes:)(0);
      v54 = v53;
      sub_100357E4C();
      BinaryDecodable.init(data:)(v55, v52, v54);
      sub_10001BC14(v33, *((unint64_t *)&v33 + 1));
      sub_10001BC14(v51, *((unint64_t *)&v51 + 1));
      sub_10001BC14(v65, v66);
      sub_1007D9D94((uint64_t)v76, (void (*)(void))sub_10001BC14);
      result = 0.0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0x2000000000000000;
      *(_BYTE *)(a2 + 80) = 0;
      return result;
    }
    goto LABEL_17;
  }
  if (v14 != 1)
  {
    sub_1007D9D94((uint64_t)v76, (void (*)(void))sub_10001BC14);
    goto LABEL_16;
  }
  v78 &= ~0x2000000000000000uLL;
  v79 &= 0xCFFFFFFFFFFFFFFFLL;
  v15 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7DF0, "Received pairing data.", 22, 2, _swiftEmptyArrayStorage);
  sub_100B5BA68();
  v16 = sub_10001A9A8(&qword_1010EC540);
  v17 = swift_dynamicCast(v75, &v68, v16, &type metadata for SendPairingDataCommandPayload, 6);
  if (!(_DWORD)v17)
  {
LABEL_17:
    v39 = static os_log_type_t.error.getter(v17);
    os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, qword_1011B7DF0, "Invalid sendPairingData payload.", 32, 2, _swiftEmptyArrayStorage);
    sub_1007D9D94((uint64_t)v76, (void (*)(void))sub_10001BC14);
    v38 = 9;
    goto LABEL_18;
  }
  v18 = v75[1];
  *((_QWORD *)&v67 + 1) = v75[0];
  v20 = v75[2];
  v19 = v75[3];
  v21 = *(_QWORD *)(v3 + 72);
  *(_BYTE *)(v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 3;
  v22 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v23 = *(_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  swift_retain();
  sub_10001BBBC(v20, v19);
  v66 = v20;
  *(_QWORD *)&v67 = v19;
  sub_1002F7818(v20, v19);
  v40 = *(_QWORD *)(v23 + 56);
  v41 = *(_QWORD *)(v23 + 64);
  *(_OWORD *)(v23 + 56) = v68;
  sub_10001EF3C(v40, v41);
  swift_release();
  v42 = *(_QWORD *)(v21 + v22);
  swift_retain();
  v43 = *((_QWORD *)&v67 + 1);
  sub_10001BBBC(*((uint64_t *)&v67 + 1), v18);
  sub_1002F702C(v43, v18);
  v57 = v66;
  v56 = v67;
  v58 = *(_QWORD *)(v42 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  v59 = *(_QWORD *)(v42 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8);
  *(_OWORD *)(v42 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = v68;
  sub_10001EF3C(v58, v59);
  swift_release();
  sub_1007D72D4((unint64_t *)&v68);
  if ((v73 & 1) != 0)
  {
    v60 = sub_100059244((uint64_t)&v68, a2);
    v61 = static os_log_type_t.error.getter(v60);
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_1011B7DF0, "Unable to generate finalizeCommand payload.", 43, 2, _swiftEmptyArrayStorage);
    sub_10001BC14(v43, v18);
    sub_10001BC14(v57, v56);
    sub_1007D9D94((uint64_t)v76, (void (*)(void))sub_10001BC14);
    goto LABEL_19;
  }
  sub_10001BC14(v43, v18);
  sub_10001BC14(v57, v56);
  sub_1007D9D94((uint64_t)v76, (void (*)(void))sub_10001BC14);
  v62 = v69;
  *(_OWORD *)a2 = v68;
  *(_OWORD *)(a2 + 16) = v62;
  v63 = v71;
  *(_OWORD *)(a2 + 32) = v70;
  *(_OWORD *)(a2 + 48) = v63;
  result = *(double *)&v72;
  *(_OWORD *)(a2 + 64) = v72;
  *(_BYTE *)(a2 + 80) = 0;
  return result;
}

void sub_1007D72D4(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  char v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(char *, uint64_t);
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  void **v58;
  uint64_t EnumCaseMultiPayload;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  uint64_t v107;
  unint64_t *v108;
  _BYTE v109[144];
  _BYTE v110[80];
  _QWORD v111[10];
  _QWORD v112[10];
  _OWORD v113[9];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;

  v2 = v1;
  v108 = a1;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v104 = (uint64_t)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v103 = (char *)&v88 - v6;
  v102 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  __chkstk_darwin(v102);
  v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F4EE0);
  __chkstk_darwin(v9);
  v106 = (void **)((char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v107 = type metadata accessor for HashAlgorithm(0);
  v11 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v13 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = *(void **)(v2 + 16);
  *v17 = v18;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  v20 = (*(uint64_t (**)(_QWORD *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v105 = v9;
  v21 = *(_QWORD *)(v2 + 72);
  v22 = (uint64_t *)(*(_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  v23 = v22[1];
  if (v23 >> 60 == 15)
  {
    v9 = static os_log_type_t.error.getter(v20);
    if (qword_1010EA310 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7DF0, "Missing C1 from accessory!", 26, 2, _swiftEmptyArrayStorage);
      v24 = 0xD00000000000001ALL;
      v25 = "BeaconStoreActor";
LABEL_7:
      v31 = v108;
      *v108 = v24;
      v31[1] = (unint64_t)v25 | 0x8000000000000000;
      v32 = 9;
      goto LABEL_8;
    }
LABEL_23:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
    goto LABEL_4;
  }
  v101 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v26 = *v22;
  sub_10001BBBC(*v22, v23);
  sub_10001BBBC(v26, v23);
  v27 = sub_1007DE864(v26, v23);
  v100 = v28;
  v96 = v8;
  v30 = v29;
  sub_10001EF3C(v26, v23);
  sub_10001BBBC(v27, v30);
  sub_1002F7278(v27, v30);
  v97 = v27;
  v98 = v30;
  v34 = v114;
  v99 = v114;
  v35 = *(_QWORD *)(v21 + v101);
  *((_QWORD *)&v115 + 1) = &type metadata for CollaborativeKeyGen.v1.C2;
  *(_QWORD *)&v116 = sub_100059ED0();
  v114 = v34;
  sub_100005CF0((uint64_t)&v114, (uint64_t)v113, &qword_1010EC598);
  v36 = v35 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess(v35 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2, v109, 33, 0);
  swift_retain();
  v95 = *((_QWORD *)&v34 + 1);
  sub_10001BBBC(v99, *((unint64_t *)&v34 + 1));
  sub_100004084((uint64_t)v113, v36, &qword_1010EC598);
  swift_endAccess(v109);
  swift_release();
  *((_QWORD *)&v115 + 1) = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  *(_QWORD *)&v116 = &off_101093D30;
  *(_QWORD *)&v114 = v100;
  sub_100005CF0((uint64_t)&v114, (uint64_t)v113, &qword_1010EC418);
  v93 = v21;
  v37 = v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess(v21 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext, v109, 33, 0);
  swift_retain();
  sub_100004084((uint64_t)v113, v37, &qword_1010EC418);
  v38 = swift_endAccess(v109);
  v39 = static os_log_type_t.debug.getter(v38);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v40 = qword_1011B7DF0;
  v91 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v41 = swift_allocObject(v91, 72, 7);
  v90 = xmmword_100E22B00;
  *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
  v42 = Data.hexString.getter(v97, v98);
  v94 = v43;
  *(_QWORD *)(v41 + 56) = &type metadata for String;
  v92 = sub_10001AA00();
  *(_QWORD *)(v41 + 64) = v92;
  v44 = v94;
  *(_QWORD *)(v41 + 32) = v42;
  *(_QWORD *)(v41 + 40) = v44;
  os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "C2: %@.", 7, 2, v41);
  swift_bridgeObjectRelease();
  v45 = v107;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for HashAlgorithm.sha256(_:), v107);
  v46 = v99;
  v47 = v95;
  sub_10001BBBC(v99, v95);
  v94 = Data.hash(algorithm:)(v13, v46, v47);
  v49 = v48;
  sub_10001BC14(v46, v47);
  v50 = *(void (**)(char *, uint64_t))(v11 + 8);
  v51 = v49;
  v52 = v13;
  v53 = v94;
  v50(v52, v45);
  v54 = v93;
  swift_retain();
  sub_1001490B4(v53, v51, (uint64_t)v109);
  swift_release();
  sub_100005CF0((uint64_t)v109, (uint64_t)v113, &qword_1010F08D0);
  v55 = sub_100293A64((uint64_t)v113);
  if ((_DWORD)v55 == 1)
  {
    v56 = static os_log_type_t.error.getter(v55);
    os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, qword_1011B7DF0, "Unable to create pairing check data.", 36, 2, _swiftEmptyArrayStorage);
    swift_release();
    sub_10001BC14(v46, v47);
    sub_10001EF3C(v26, v23);
    sub_10001BC14(v97, v98);
    sub_10001BC14(v53, v51);
    v24 = 0xD00000000000001ALL;
    v57 = "Invalid E2 from accessory!";
LABEL_6:
    v25 = v57 - 32;
    goto LABEL_7;
  }
  v89 = v51;
  v107 = v26;
  v120 = v113[6];
  v121 = v113[7];
  v122 = v113[8];
  v116 = v113[2];
  v117 = v113[3];
  v118 = v113[4];
  v119 = v113[5];
  v114 = v113[0];
  v115 = v113[1];
  v58 = v106;
  sub_1007D7DC8((uint64_t)&v114, (uint64_t)v106);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v58, v105);
  if ((_DWORD)EnumCaseMultiPayload != 1)
  {
    v72 = (uint64_t)v96;
    v73 = sub_1000126EC((uint64_t)v58, (uint64_t)v96, type metadata accessor for AccessoryPairingLockCheckResponse);
    v74 = static os_log_type_t.default.getter(v73);
    os_log(_:dso:log:_:_:)(v74, &_mh_execute_header, qword_1011B7DF0, "Received Seed, S2, and C3 from server.", 38, 2, _swiftEmptyArrayStorage);
    v75 = v101;
    v76 = *(_QWORD *)(v54 + v101);
    v77 = v54;
    v78 = v72 + *(int *)(v102 + 32);
    v79 = type metadata accessor for UUID(0);
    v80 = *(_QWORD *)(v79 - 8);
    v81 = (uint64_t)v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v103, v78, v79);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v81, 0, 1, v79);
    v82 = v104;
    sub_100005CF0(v81, v104, &qword_1010ED860);
    v83 = v76 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess(v76 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v112, 33, 0);
    swift_retain();
    sub_100004084(v82, v83, &qword_1010ED860);
    swift_endAccess(v112);
    swift_release();
    v84 = *(_QWORD *)(v77 + v75);
    v85 = *(_QWORD *)(v72 + 56);
    *(_QWORD *)(v84 + 120) = *(_QWORD *)(v72 + 48);
    *(_QWORD *)(v84 + 128) = v85;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRelease();
    v87 = v97;
    v86 = v98;
    sub_1007D9F1C(v72, (uint64_t)v110);
    sub_100005CF0((uint64_t)v110, (uint64_t)v111, &qword_1011097E0);
    if ((~(v111[1] & v111[3] & v111[5] & v111[7] & v111[9]) & 0x3000000000000000) != 0)
    {
      sub_1007D9D58((uint64_t)v111, (uint64_t)v112);
      sub_1000126B0(v72, type metadata accessor for AccessoryPairingLockCheckResponse);
      swift_release();
      sub_10001BC14(v99, v95);
      sub_10001EF3C(v107, v23);
      sub_10001BC14(v87, v86);
      sub_1007DA298((uint64_t)v109);
      sub_10001BC14(v94, v89);
      v31 = v108;
      sub_1007D9D58((uint64_t)v112, (uint64_t)v108);
      v33 = 0;
      goto LABEL_10;
    }
    sub_10001EF3C(v107, v23);
    sub_1007DA298((uint64_t)v109);
    sub_10001BC14(v94, v89);
    swift_release();
    sub_10001BC14(v99, v95);
    sub_10001BC14(v87, v86);
    sub_1000126B0(v72, type metadata accessor for AccessoryPairingLockCheckResponse);
    v24 = 0xD000000000000019;
    v57 = "Invalid token from server";
    goto LABEL_6;
  }
  v60 = *v58;
  v61 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
  v62 = qword_1011B7DF0;
  v63 = swift_allocObject(v91, 72, 7);
  *(_OWORD *)(v63 + 16) = v90;
  v112[0] = v60;
  type metadata accessor for SPPairingSessionError(0);
  v65 = v64;
  v66 = v60;
  v67 = String.init<A>(describing:)(v112, v65);
  v68 = v92;
  *(_QWORD *)(v63 + 56) = &type metadata for String;
  *(_QWORD *)(v63 + 64) = v68;
  *(_QWORD *)(v63 + 32) = v67;
  *(_QWORD *)(v63 + 40) = v69;
  os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Pairing lock check failed. Error %@", 35, 2, v63);
  swift_bridgeObjectRelease();
  v111[0] = v66;
  v70 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  v71 = v66;
  _BridgedStoredNSError.code.getter(v112, v65, v70);
  sub_10001BC14(v97, v98);
  swift_release();
  sub_10001BC14(v99, v95);
  sub_10001EF3C(v107, v23);
  sub_1007DA298((uint64_t)v109);
  sub_10001BC14(v94, v89);

  if (v112[0] != 18)
  {
    v31 = v108;
    *v108 = (unint64_t)v71;
    *((_BYTE *)v31 + 40) = 0;
    goto LABEL_9;
  }

  v31 = v108;
  *v108 = 8;
  *(_OWORD *)(v31 + 1) = 0u;
  *(_OWORD *)(v31 + 3) = 0u;
  v32 = 11;
LABEL_8:
  *((_BYTE *)v31 + 40) = v32;
LABEL_9:
  v33 = 1;
LABEL_10:
  *((_BYTE *)v31 + 80) = v33;
}

uint64_t sub_1007D7DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD v24[3];
  uint64_t v25;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 16);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v13 = sub_10001A9A8(&qword_1010F4EE0);
    v14 = swift_allocBox(v13);
    v16 = v15;
    type metadata accessor for SPPairingSessionError(0);
    v18 = v17;
    v25 = 1;
    v19 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v20 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(v24, &v25, v19, v18, v20);
    *v16 = v24[0];
    swift_storeEnumTagMultiPayload(v16, v13, 1);
    v21 = dispatch_group_create();
    dispatch_group_enter(v21);
    v22 = swift_allocObject(&unk_101093188, 32, 7);
    *(_QWORD *)(v22 + 16) = v14;
    *(_QWORD *)(v22 + 24) = v21;
    swift_retain();
    v23 = v21;
    sub_10029E6B0(a1, sub_1007D9F14, v22);
    swift_release();
    OS_dispatch_group.wait()();

    swift_beginAccess(v16, v24, 0, 0);
    sub_10000F9B8((uint64_t)v16, a2, &qword_1010F4EE0);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1007D7FBC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  _BYTE v6[24];

  v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v6, 1, 0);
  sub_1000F8EF4(a1, v5, &qword_1010F4EE0);
  dispatch_group_leave(a3);
}

uint64_t sub_1007D8024(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v24[80];
  _BYTE v25[88];
  _QWORD v26[10];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v24[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_10000F9B8(a1, (uint64_t)v25, &qword_1011097D8);
  if ((v25[80] & 1) == 0)
  {
    v15 = sub_1007D9D58((uint64_t)v25, (uint64_t)v26);
    a1 = static os_log_type_t.default.getter(v15);
    if (qword_1010EA310 == -1)
    {
LABEL_5:
      v16 = qword_1011B7DF0;
      v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v18 = swift_allocObject(v17, 72, 7);
      *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
      sub_1007D9D58((uint64_t)v26, (uint64_t)v24);
      sub_1007D9D94((uint64_t)v26, (void (*)(void))sub_10001BBBC);
      v19 = String.init<A>(describing:)(v24, &type metadata for AccessoryPairingCommand);
      v21 = v20;
      *(_QWORD *)(v18 + 56) = &type metadata for String;
      *(_QWORD *)(v18 + 64) = sub_10001AA00();
      *(_QWORD *)(v18 + 32) = v19;
      *(_QWORD *)(v18 + 40) = v21;
      os_log(_:dso:log:_:_:)(a1, &_mh_execute_header, v16, "Sending %@.", 11, 2, v18);
      swift_bridgeObjectRelease();
      v14 = sub_1007D5DB8((uint64_t)v26, a2);
      sub_1007D9D94((uint64_t)v26, (void (*)(void))sub_10001BC14);
      return v14;
    }
LABEL_8:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
    goto LABEL_5;
  }
  sub_100059244((uint64_t)v25, (uint64_t)v26);
  sub_100059280(v26, (uint64_t)v24);
  v11 = swift_allocObject(&unk_101093160, 57, 7);
  sub_100059244((uint64_t)v24, v11 + 16);
  v12 = sub_10001A9A8(&qword_101109328);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v14 = Future.init(_:)(sub_1007D9CF8, v11, v13);
  sub_1000593D4(v26);
  return v14;
}

uint64_t sub_1007D8288@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v11 = *(_QWORD *)(v2 + 72);
  v12 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  swift_retain();
  v13 = objc_msgSend(a1, "productInformation");
  if (v13
    && (v14 = v13, v15 = objc_msgSend(v13, "encryptionKeyE1"),
                   v14,
                   v15))
  {
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

  }
  else
  {
    v16 = 0;
    v18 = 0xF000000000000000;
  }
  v19 = sub_100148AD8(v16, v18);
  v21 = v20;
  sub_10001EF3C(v16, v18);
  v22 = swift_release();
  if (v21 >> 60 == 15)
  {
    v2 = static os_log_type_t.error.getter(v22);
    if (qword_1010EA310 == -1)
    {
LABEL_8:
      result = os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7DF0, "Unable to generate E1 blob.", 27, 2, _swiftEmptyArrayStorage);
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
LABEL_13:
      *(_BYTE *)(a2 + 40) = 11;
      *(_BYTE *)(a2 + 80) = 1;
      return result;
    }
LABEL_16:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
    goto LABEL_8;
  }
  v49 = v19;
  v24 = *(_QWORD *)(v11 + v12);
  swift_retain();
  v25 = objc_msgSend(a1, "discoveredMetadata");
  v26 = objc_msgSend(v25, "firmwareVersion");

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  *(_QWORD *)(v24 + 88) = v27;
  *(_QWORD *)(v24 + 96) = v29;
  swift_release();
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(a1, "discoveredMetadata");
  v31 = objc_msgSend(v30, "productData");

  v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

  sub_1001EE65C(v32, v34);
  if (v36 >> 60 == 15)
  {
    v37 = static os_log_type_t.error.getter(v35);
    v38 = v49;
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7DF0, "Invalid product data!", 21, 2, _swiftEmptyArrayStorage);
    result = sub_10001EF3C(v38, v21);
    *(_QWORD *)a2 = 13;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    goto LABEL_13;
  }
  v39 = *(_QWORD *)(v11 + v12);
  v40 = *(_QWORD *)(v39 + 104);
  v41 = *(_QWORD *)(v39 + 112);
  *(_QWORD *)(v39 + 104) = v35;
  *(_QWORD *)(v39 + 112) = v36;
  sub_10001EF3C(v40, v41);
  v42 = *(_QWORD *)(v11 + v12);
  v43 = *(_QWORD *)(v42 + 16);
  v44 = *(_QWORD *)(v42 + 24);
  *(_QWORD *)a2 = sub_10099AE58(v43, v44);
  *(_QWORD *)(a2 + 8) = v45;
  *(_QWORD *)(a2 + 16) = v46;
  *(_QWORD *)(a2 + 24) = v47;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_BYTE *)(a2 + 80) = 0;
  return sub_10001BBBC(v43, v44);
}

uint64_t sub_1007D863C@<X0>(void *a1@<X0>, __int128 *a2@<X1>, void *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  int *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  _QWORD *v53;
  _QWORD *v54;
  NSObject *v55;
  char *v56;
  _QWORD *v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  NSObject *v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  id v87;
  id v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  id v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  __int128 *v99;
  _QWORD *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  id v111;
  char *v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  __int128 *v117;
  id v118;
  uint64_t v119;
  _QWORD *v120;
  char v121[24];
  _QWORD v122[3];
  _QWORD v123[2];

  v111 = a3;
  v117 = a2;
  v118 = a1;
  v120 = a4;
  v109 = type metadata accessor for PairingConfig(0);
  __chkstk_darwin(v109);
  v110 = (uint64_t *)((char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v7 = __chkstk_darwin(v6);
  v108 = (uint64_t)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v103 - v9;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v114 = (char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v115 = *(_QWORD *)(v13 - 8);
  v116 = v13;
  __chkstk_darwin(v13);
  v119 = (uint64_t)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v105);
  v16 = (char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v17);
  v19 = (char *)&v103 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v112 = (char *)&v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = (void *)v4[2];
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_30;
  }
  v29 = v4[5];
  v30 = v4[9];
  v31 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v32 = *(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  v33 = *(_QWORD *)(v32 + 128);
  v113 = v4;
  if (v33)
  {
    v106 = v30;
    v104 = *(_QWORD *)(v32 + 120);
    v34 = v32 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess(v32 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v121, 0, 0);
    sub_10000F9B8(v34, (uint64_t)v19, &qword_1010ED860);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    {
      sub_100004048((uint64_t)v19, &qword_1010ED860);
    }
    else
    {
      v35 = v112;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v112, v19, v20);
      v36 = HIBYTE(v33) & 0xF;
      if ((v33 & 0x2000000000000000) == 0)
        v36 = v104 & 0xFFFFFFFFFFFFLL;
      if (v36)
      {
        v107 = v29;
        v37 = (int *)sub_10001A9A8(&qword_101106F40);
        v38 = v35;
        v39 = &v16[v37[12]];
        v40 = &v16[v37[16]];
        v41 = &v16[v37[20]];
        v103 = v37[24];
        v42 = &v16[v37[28]];
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v16, v38, v20);
        *(_QWORD *)v39 = 0;
        *((_QWORD *)v39 + 1) = 0;
        *(_QWORD *)v40 = 0;
        *((_QWORD *)v40 + 1) = 0;
        *(_QWORD *)v41 = v104;
        *((_QWORD *)v41 + 1) = v33;
        *(_WORD *)&v16[v103] = 256;
        *(_QWORD *)v42 = 0;
        *((_QWORD *)v42 + 1) = 0;
        swift_storeEnumTagMultiPayload(v16, v105, 2);
        swift_bridgeObjectRetain(v33);
        v44 = static os_log_type_t.default.getter(v43);
        if (qword_1010EA310 != -1)
          swift_once(&qword_1010EA310, sub_100B5E2C8);
        v45 = qword_1011B7DF0;
        v46 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v47 = swift_allocObject(v46, 72, 7);
        *(_OWORD *)(v47 + 16) = xmmword_100E22B00;
        sub_100C6ED38();
        v49 = v48;
        v51 = v50;
        *(_QWORD *)(v47 + 56) = &type metadata for String;
        *(_QWORD *)(v47 + 64) = sub_10001AA00();
        *(_QWORD *)(v47 + 32) = v49;
        *(_QWORD *)(v47 + 40) = v51;
        os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Removing record matching StableIdentifier %@.", 45, 2, v47);
        swift_bridgeObjectRelease();
        v52 = dispatch_group_create();
        dispatch_group_enter(v52);
        v53 = v113;
        v54 = (_QWORD *)v113[3];
        v55 = v52;
        sub_10028CBBC((uint64_t)v16, v54, v55);

        OS_dispatch_group.wait()();
        v4 = v53;
        sub_1000126B0((uint64_t)v16, type metadata accessor for StableIdentifier);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v112, v20);
        v29 = v107;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v35, v20);
      }
    }
    v30 = v106;
  }
  v56 = (char *)v4[3];
  v57 = *(_QWORD **)(v30 + v31);
  swift_retain();
  v58 = v118;
  v59 = objc_msgSend(v118, "productInformation");
  if (v59)
  {
    v60 = v59;
    sub_100D14464((uint64_t)v10);

    v61 = type metadata accessor for AccessoryProductInfo(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v10, 0, 1, v61);
  }
  else
  {
    v62 = type metadata accessor for AccessoryProductInfo(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v10, 1, 1, v62);
  }
  v63 = v114;
  sub_10007CD78(v117, v57, (uint64_t)v10, v114);
  swift_release();
  sub_100004048((uint64_t)v10, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v63, 1, v116) == 1)
  {
    v64 = sub_100004048((uint64_t)v63, (uint64_t *)&unk_1010F47C0);
    v20 = static os_log_type_t.error.getter(v64);
    if (qword_1010EA310 == -1)
    {
LABEL_18:
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B7DF0, "createBeacon: failed to generate generateOwnedBeaconRecord.", 59, 2, _swiftEmptyArrayStorage);
      type metadata accessor for SPPairingSessionError(0);
      v66 = v65;
      v123[0] = 11;
      v67 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v68 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(v122, v123, v67, v66, v68);
      v69 = v120;
      *v120 = v122[0];
      v70 = sub_10001A9A8((uint64_t *)&unk_101108050);
      return swift_storeEnumTagMultiPayload(v69, v70, 1);
    }
LABEL_30:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
    goto LABEL_18;
  }
  v107 = v29;
  sub_1000126EC((uint64_t)v63, v119, type metadata accessor for OwnedBeaconRecord);
  v72 = dispatch_group_create();
  dispatch_group_enter(v72);
  v73 = sub_10001A9A8((uint64_t *)&unk_101108050);
  v117 = (__int128 *)swift_allocBox(v73);
  v75 = v74;
  type metadata accessor for SPPairingSessionError(0);
  v77 = v76;
  v123[0] = 1;
  v78 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v79 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(v122, v123, v78, v77, v79);
  *v75 = v122[0];
  swift_storeEnumTagMultiPayload(v75, v73, 1);
  v80 = v111;
  v81 = objc_msgSend(v111, "name");
  v112 = v56;
  if (v81)
  {
    v82 = v81;
    v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
    v84 = v83;

  }
  else
  {
    v116 = 0;
    v84 = 0xE000000000000000;
  }
  v85 = v109;
  v86 = v110;
  v87 = objc_msgSend(v80, "roleId");
  v88 = objc_msgSend(v80, "roleEmoji");
  if (v88)
  {
    v89 = v88;
    v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    v92 = v91;

  }
  else
  {
    v90 = 0;
    v92 = 0;
  }
  v93 = objc_msgSend(v58, "productInformation");
  if (v93)
  {
    v94 = v93;
    v95 = v108;
    sub_100D14464(v108);

    v96 = type metadata accessor for AccessoryProductInfo(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v95, 0, 1, v96);
  }
  else
  {
    v97 = type metadata accessor for AccessoryProductInfo(0);
    v95 = v108;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v108, 1, 1, v97);
  }
  *v86 = v116;
  v86[1] = v84;
  v86[2] = (uint64_t)v87;
  v86[3] = v90;
  v86[4] = v92;
  sub_100005CF0(v95, (uint64_t)v86 + *(int *)(v85 + 28), (uint64_t *)&unk_10111C0A0);
  v98 = (_QWORD *)swift_allocObject(&unk_101093110, 48, 7);
  v99 = v117;
  v98[2] = v72;
  v98[3] = v99;
  v100 = v113;
  v98[4] = v107;
  v98[5] = v100;
  v101 = v72;
  swift_retain();
  swift_retain();
  swift_retain();
  v102 = v119;
  sub_1007F1214(v119, v86, (uint64_t)sub_1007D9A74, (uint64_t)v98);
  swift_release();
  OS_dispatch_group.wait()();

  sub_1000126B0((uint64_t)v86, type metadata accessor for PairingConfig);
  sub_1000126B0(v102, type metadata accessor for OwnedBeaconRecord);
  swift_beginAccess(v75, v122, 0, 0);
  sub_10000F9B8((uint64_t)v75, (uint64_t)v120, (uint64_t *)&unk_101108050);
  return swift_release();
}

void sub_1007D8FEC(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t EnumCaseMultiPayload;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject **v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  dispatch_group_t v44[2];
  _QWORD v45[3];
  _BYTE v46[24];

  v44[0] = a3;
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v44 - v13;
  v15 = sub_10001A9A8((uint64_t *)&unk_101108050);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = swift_projectBox(a4);
  swift_beginAccess(v18, v46, 1, 0);
  sub_1000F8EF4(a1, v18, (uint64_t *)&unk_101108050);
  sub_10000F9B8(a1, (uint64_t)v17, (uint64_t *)&unk_101108050);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v15);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v20 = *v17;
    v21 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v22 = qword_1011B7DF0;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v24 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
    v45[0] = v20;
    swift_errorRetain(v20);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v26 = String.init<A>(describing:)(v45, v25);
    v28 = v27;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    *(_QWORD *)(v24 + 64) = sub_10001AA00();
    *(_QWORD *)(v24 + 32) = v26;
    *(_QWORD *)(v24 + 40) = v28;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Failure during finishing pairing - %@", 37, 2, v24, v44[0]);
    swift_bridgeObjectRelease();
    swift_errorRelease(v20);
  }
  else
  {
    v29 = sub_1000126EC((uint64_t)v17, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    v30 = static os_log_type_t.default.getter(v29);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v31 = qword_1011B7DF0;
    v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v33 = swift_allocObject(v32, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    v34 = String.init<A>(describing:)(v12, v9);
    v36 = v35;
    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = sub_10001AA00();
    *(_QWORD *)(v33 + 32) = v34;
    *(_QWORD *)(v33 + 40) = v36;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "New beacon record has been created. Record UUID - %@", 52, 2, v33, v44[0]);
    swift_bridgeObjectRelease();
    sub_1007BEC2C((uint64_t)v14);
    v37 = (NSObject **)(*(_QWORD *)((char *)a6[9].isa
                                  + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor)
                      + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess(v37, v45, 0, 0);
    v39 = *v37;
    if (*v37)
    {
      v40 = &v14[*(int *)(v9 + 20)];
      v41 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v41);
      v44[-4] = v40;
      v44[-3] = v39;
      v44[-2] = a6;
      v42 = v39;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryPairingSession.saveEstimatedLocation", 75, 2, sub_1007D9A80, &v44[-6], &type metadata for () + 1);

    }
    else
    {
      v43 = static os_log_type_t.error.getter(v38);
      os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, qword_1011B7DF0, "Unable to retrieve current location from CL for pairing", 55, 2, _swiftEmptyArrayStorage);
    }
    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }
  dispatch_group_leave(v44[0]);
}

uint64_t sub_1007D93F4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = a1;
  v41 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  v38 = v7;
  v8 = v7;
  v42 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v40 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v39 = *((_QWORD *)v10 - 1);
  v11 = *(_QWORD *)(v39 + 64);
  v12 = __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v37 - v15;
  UUID.init()(v14);
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v17(&v16[v10[6]], a2, v6);
  objc_msgSend(a3, "coordinate");
  v19 = v18;
  objc_msgSend(a3, "coordinate");
  v21 = v20;
  objc_msgSend(a3, "horizontalAccuracy");
  v23 = v22;
  v24 = objc_msgSend(a3, "timestamp");
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = &v16[v10[12]];
  v26 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(_OWORD *)v16 = xmmword_100E22FC0;
  *(_QWORD *)&v16[v10[7]] = v19;
  *(_QWORD *)&v16[v10[8]] = v21;
  *(_QWORD *)&v16[v10[9]] = v23;
  v16[v10[11]] = 1;
  *(_QWORD *)&v16[v10[13]] = 0;
  v41 = *(_QWORD *)(v41 + 24);
  sub_10005972C((uint64_t)v16, (uint64_t)v13, type metadata accessor for BeaconEstimatedLocation);
  v27 = v40;
  v28 = a2;
  v29 = v37;
  v17(v40, v28, v37);
  v30 = v38;
  v31 = *(unsigned __int8 *)(v39 + 80);
  v32 = (v31 + 24) & ~v31;
  v33 = *(unsigned __int8 *)(v38 + 80);
  v34 = (v11 + v33 + v32) & ~v33;
  v35 = swift_allocObject(&unk_101093138, v34 + v42, v31 | v33 | 7);
  *(_QWORD *)(v35 + 16) = v43;
  sub_1000126EC((uint64_t)v13, v35 + v32, type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v35 + v34, v27, v29);
  swift_retain();
  sub_100801BA0((uint64_t)v16, (uint64_t)sub_1007D9BF8, v35);
  swift_release();
  return sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_1007D96C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = sub_10001A9A8(&qword_1010F4A20);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10000F9B8(a1, (uint64_t)v4, &qword_1010F4A20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v6 = *v4;
    v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v8 = qword_1011B7DF0;
    v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v10 = swift_allocObject(v9, 152, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100E221E0;
    type metadata accessor for BeaconEstimatedLocation(0);
    v11 = type metadata accessor for Date(0);
    v12 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v15 = v14;
    *(_QWORD *)(v10 + 56) = &type metadata for String;
    v16 = sub_10001AA00();
    *(_QWORD *)(v10 + 64) = v16;
    *(_QWORD *)(v10 + 32) = v13;
    *(_QWORD *)(v10 + 40) = v15;
    v17 = type metadata accessor for UUID(0);
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    *(_QWORD *)(v10 + 96) = &type metadata for String;
    *(_QWORD *)(v10 + 104) = v16;
    *(_QWORD *)(v10 + 72) = v19;
    *(_QWORD *)(v10 + 80) = v20;
    v40 = v6;
    swift_errorRetain(v6);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v22 = String.init<A>(describing:)(&v40, v21);
    *(_QWORD *)(v10 + 136) = &type metadata for String;
    *(_QWORD *)(v10 + 144) = v16;
    *(_QWORD *)(v10 + 112) = v22;
    *(_QWORD *)(v10 + 120) = v23;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "Saving BeaconEstimatedLocation %@ for CL %@ error: %@", 53, 2, v10);
    swift_bridgeObjectRelease();
    return swift_errorRelease(v6);
  }
  else
  {
    v25 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v26 = qword_1011B7DF0;
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = swift_allocObject(v27, 112, 7);
    *(_OWORD *)(v28 + 16) = xmmword_100E22B10;
    type metadata accessor for BeaconEstimatedLocation(0);
    v29 = type metadata accessor for Date(0);
    v30 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    v33 = v32;
    *(_QWORD *)(v28 + 56) = &type metadata for String;
    v34 = sub_10001AA00();
    *(_QWORD *)(v28 + 64) = v34;
    *(_QWORD *)(v28 + 32) = v31;
    *(_QWORD *)(v28 + 40) = v33;
    v35 = type metadata accessor for UUID(0);
    v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v35, v36);
    *(_QWORD *)(v28 + 96) = &type metadata for String;
    *(_QWORD *)(v28 + 104) = v34;
    *(_QWORD *)(v28 + 72) = v37;
    *(_QWORD *)(v28 + 80) = v38;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Saved BeaconEstimatedLocation %@ from CL for beacon %@", 54, 2, v28);
    swift_bridgeObjectRelease();
    return sub_100004048((uint64_t)v4, &qword_1010F4A20);
  }
}

uint64_t sub_1007D9A38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1007D9A74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1007D8FEC(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(NSObject **)(v2 + 40));
}

uint64_t sub_1007D9A80(uint64_t a1)
{
  uint64_t v1;

  return sub_1007D93F4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1007D9A9C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v2 = *((_QWORD *)v1 - 1);
  v17 = *(unsigned __int8 *)(v2 + 80);
  v15 = *(_QWORD *)(v2 + 64);
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v14 = *(_QWORD *)(v4 + 64);
  swift_release();
  v16 = (v17 + 24) & ~v17;
  sub_10001BC14(*(_QWORD *)(v0 + v16), *(_QWORD *)(v0 + v16 + 8));
  v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v0 + v16 + v1[5], v3);
  v6(v0 + v16 + v1[6], v3);
  v7 = v0 + v16 + v1[10];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v16 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  v12 = (v16 + v15 + v5) & ~v5;
  swift_bridgeObjectRelease();
  v6(v0 + v12, v3);
  return swift_deallocObject(v0, v12 + v14, v17 | v5 | 7);
}

uint64_t sub_1007D9BF8(uint64_t a1)
{
  type metadata accessor for BeaconEstimatedLocation(0);
  type metadata accessor for UUID(0);
  return sub_1007D96C4(a1);
}

uint64_t sub_1007D9C64()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57, 7);
  }
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_1007D9CF8(void (*a1)(_BYTE *))
{
  uint64_t v1;
  _BYTE v4[48];

  sub_100059280((_QWORD *)(v1 + 16), (uint64_t)v4);
  v4[41] = 1;
  a1(v4);
  return sub_100004048((uint64_t)v4, &qword_1010EEBF8);
}

uint64_t sub_1007D9D58(uint64_t a1, uint64_t a2)
{
  initializeWithTake for InitialPairingInfo(a2, a1);
  return a2;
}

uint64_t sub_1007D9D94(uint64_t a1, void (*a2)(void))
{
  sub_1007D9DE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), a2);
  return a1;
}

void sub_1007D9DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void (*a11)(void))
{
  unint64_t v16;

  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 1uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      break;
    case 2uLL:
      v16 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a11)(a7, v16);
      ((void (*)(uint64_t, unint64_t))a11)(a9, a10 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      break;
    default:
      return;
  }
}

void sub_1007D9F14(uint64_t a1)
{
  uint64_t v1;

  sub_1007D7FBC(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1007D9F1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD v19[14];

  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  v9 = (uint64_t *)(a1 + *(int *)(v8 + 36));
  v10 = *v9;
  v11 = v9[1];
  static String.Encoding.utf8.getter(v8);
  v12 = String.data(using:allowLossyConversion:)(v7, 0, v10, v11);
  v14 = v13;
  v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v14 >> 60 != 15)
  {
    v19[12] = v12;
    v19[13] = v14;
    v18 = *(_QWORD *)(a1 + 24);
    v19[10] = *(_QWORD *)(a1 + 16);
    v19[11] = v18;
    __asm { BR              X11 }
  }
  v16 = static os_log_type_t.error.getter(v15);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  result = os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7DF0, "Unable to decode masked apple ID", 32, 2, _swiftEmptyArrayStorage);
  *(_OWORD *)a2 = xmmword_100E22B30;
  *(_OWORD *)(a2 + 16) = xmmword_100E22B30;
  *(_OWORD *)(a2 + 32) = xmmword_100E22B30;
  *(_OWORD *)(a2 + 48) = xmmword_100E22B30;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0x3000000000000000;
  return result;
}

uint64_t sub_1007DA298(uint64_t a1)
{
  sub_1007DA2F0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

uint64_t sub_1007DA2F0(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  if (a6)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a17, a18);
  }
  return result;
}

uint64_t sub_1007DA3B4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007DA3D8()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

void sub_1007DA3E4(uint64_t a1)
{
  uint64_t v1;

  sub_1007D6850(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1007DA3EC()
{
  uint64_t v0;

  swift_release();
  sub_1007D9DE4(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), (void (*)(void))sub_10001BC14);
  swift_release();
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1007DA448(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_1007D5F10(a1, a2, *(_QWORD *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 104));
}

unint64_t sub_1007DA458()
{
  unint64_t result;

  result = qword_1011097E8;
  if (!qword_1011097E8)
  {
    result = swift_getWitnessTable(a9_14, &type metadata for AccessoryPairingCommand);
    atomic_store(result, (unint64_t *)&qword_1011097E8);
  }
  return result;
}

_QWORD *sub_1007DA49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  uint64_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  int8x16_t v33;
  int8x8_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  Swift::String v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  Swift::String v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  Swift::String v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  Swift::String v87;
  Swift::String v88;
  _QWORD *v89;
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t aBlock;
  int8x16_t v115;
  int8x16_t v116;
  _QWORD *v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  _QWORD v121[6];
  _BYTE v122[48];

  v108 = a4;
  v107 = a3;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v112 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v110 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for DispatchQoS(0);
  v111 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v109 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106);
  v12 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v103 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10000F9B8(a1, (uint64_t)v122, &qword_1010EEBF8);
  if ((v122[41] & 1) != 0)
  {
    v105 = v7;
    v18 = sub_100059244((uint64_t)v122, (uint64_t)v121);
    v19 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v20 = qword_1011B7DF0;
    sub_100059280(v121, (uint64_t)&aBlock);
    v21 = v4;
    if (os_log_type_enabled(v20, v19))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (_QWORD *)swift_slowAlloc(32, -1);
      v118 = v23;
      *(_DWORD *)v22 = 136446210;
      sub_100E01294();
      v120 = sub_100016940(v24, v25, (uint64_t *)&v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      sub_1000593D4(&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v20, v19, "Pairing error %{public}s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_1000593D4(&aBlock);
    }
    sub_100059280(v121, (uint64_t)&aBlock);
    v32 = aBlock;
    if (v117 == 9)
    {
      v63 = (void *)v115.i64[0];
      type metadata accessor for SPPairingSessionError(0);
      v65 = v64;
      v120 = 3;
      v66 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v67 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v66, v65, v67);
      v39 = v118;
      v118 = 0;
      v119 = 0xE000000000000000;
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      v118 = (_QWORD *)0xD000000000000028;
      v119 = 0x8000000100EE5C40;
      v68._countAndFlagsBits = v32;
      v68._object = v63;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      v69 = v119;
      v104 = v118;
    }
    else
    {
      if (v117 != 11)
        goto LABEL_36;
      v33 = vorrq_s8(v115, v116);
      v34 = vorr_s8(*(int8x8_t *)v33.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL));
      if (aBlock == 4 && !*(_QWORD *)&v34)
      {
        type metadata accessor for SPPairingSessionError(0);
        v36 = v35;
        v120 = 12;
        v37 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v38 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v37, v36, v38);
        v39 = v118;
        v118 = 0;
        v119 = 0xE000000000000000;
        _StringGuts.grow(_:)(52);
        v40._countAndFlagsBits = 0xD000000000000032;
        v40._object = (void *)0x8000000100EE5C70;
        String.append(_:)(v40);
LABEL_28:
        v74._countAndFlagsBits = sub_100C9706C(*(_BYTE *)(*(_QWORD *)(v21 + 72)
                                                        + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
        String.append(_:)(v74);
        swift_bridgeObjectRelease();
        v69 = v119;
        v104 = v118;
        goto LABEL_37;
      }
      if (aBlock == 6 && !*(_QWORD *)&v34)
      {
        type metadata accessor for SPPairingSessionError(0);
        v71 = v70;
        v120 = 6;
        v72 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v73 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v72, v71, v73);
        v39 = v118;
        v118 = 0;
        v119 = 0xE000000000000000;
        _StringGuts.grow(_:)(35);
        swift_bridgeObjectRelease();
        v118 = (_QWORD *)0xD000000000000021;
        v119 = 0x8000000100EE5BE0;
        goto LABEL_28;
      }
      if (aBlock == 8 && !*(_QWORD *)&v34)
      {
        type metadata accessor for SPPairingSessionError(0);
        v76 = v75;
        v120 = 18;
        v77 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v78 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v77, v76, v78);
        v39 = v118;
        v104 = (_QWORD *)0xD00000000000002DLL;
        v69 = 0x8000000100EE5C10;
        goto LABEL_37;
      }
      if (aBlock != 10 || *(_QWORD *)&v34)
      {
LABEL_36:
        type metadata accessor for SPPairingSessionError(0);
        v84 = v83;
        v120 = 12;
        v85 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v86 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
        _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v85, v84, v86);
        v39 = v118;
        v118 = 0;
        v119 = 0xE000000000000000;
        _StringGuts.grow(_:)(55);
        v87._countAndFlagsBits = 0xD000000000000035;
        v87._object = (void *)0x8000000100EE5BA0;
        String.append(_:)(v87);
        v88._countAndFlagsBits = sub_100C9706C(*(_BYTE *)(*(_QWORD *)(v21 + 72)
                                                        + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
        String.append(_:)(v88);
        swift_bridgeObjectRelease();
        v69 = v119;
        v104 = v118;
        sub_1000593D4(&aBlock);
        goto LABEL_37;
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(v4 + 72)
                              + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) > 5u)
        return sub_1000593D4(v121);
      v104 = (_QWORD *)0xD000000000000020;
      type metadata accessor for SPPairingSessionError(0);
      v80 = v79;
      v120 = 13;
      v81 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v82 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
      _BridgedStoredNSError.init(_:userInfo:)(&v118, &v120, v81, v80, v82);
      v39 = v118;
      v69 = 0x8000000100EE5CB0;
    }
LABEL_37:
    v89 = v39;
    sub_1007D50BC(1);
    sub_10001F6FC();
    v90 = v106;
    (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v106);
    v91 = (void *)static OS_dispatch_queue.global(qos:)(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v90);
    v92 = (_QWORD *)swift_allocObject(&unk_1010932F0, 40, 7);
    v93 = v108;
    v92[2] = v107;
    v92[3] = v93;
    v92[4] = v89;
    v116.i64[1] = (uint64_t)sub_100016FE4;
    v117 = v92;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v115.i64[0] = 1107296256;
    v115.i64[1] = (uint64_t)sub_100016FB8;
    v116.i64[0] = (uint64_t)&unk_101093308;
    v94 = _Block_copy(&aBlock);
    swift_retain();
    v95 = v89;
    v96 = v109;
    static DispatchQoS.unspecified.getter(v95);
    v118 = _swiftEmptyArrayStorage;
    v97 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v98 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v99 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v100 = v110;
    v101 = v98;
    v102 = v105;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v118, v101, v99, v105, v97);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v96, v100, v94);
    _Block_release(v94);

    (*(void (**)(char *, uint64_t))(v112 + 8))(v100, v102);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v96, v113);
    swift_release();
    sub_100143100((uint64_t)v95, (uint64_t)v104, v69);

    swift_bridgeObjectRelease();
    return sub_1000593D4(v121);
  }
  v26 = v4;
  v27 = *(_QWORD *)(v4 + 72);
  v28 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
  v29 = *(unsigned __int8 *)(v27 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState);
  if (v29 == 5)
  {
    v105 = v7;
    v41 = static os_log_type_t.default.getter(v17);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, qword_1011B7DF0, "Sent pairing complete.", 22, 2, _swiftEmptyArrayStorage);
    *(_BYTE *)(v27 + v28) = 6;
    *(_QWORD *)(v26 + 88) = 0;
    swift_release();
    *(_QWORD *)(v26 + 96) = 0;
    swift_release();
    v42 = *(void **)(v27 + 24);
    *v16 = v42;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
    v43 = v42;
    v44 = _dispatchPreconditionTest(_:)(v16);
    v45 = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
    if ((v44 & 1) != 0)
    {
      v46 = static os_log_type_t.default.getter(v45);
      os_log(_:dso:log:_:_:)(v46, &_mh_execute_header, qword_1011B7DF0, "completeInitiatePairing: starting timeout...", 44, 2, _swiftEmptyArrayStorage);
      *(_BYTE *)(v27 + v28) = 8;
      sub_100C98798(0, 0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9D48, a2, *(_QWORD *)(a2 + 16), &type metadata for () + 1, &type metadata for () + 1);
      aBlock = 12;
      v115 = 0u;
      v116 = 0u;
      LOBYTE(v117) = 11;
      sub_1007C63BC(&aBlock);
      sub_1000593D4(&aBlock);
      sub_10001F6FC();
      v47 = v106;
      (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v106);
      v48 = (void *)static OS_dispatch_queue.global(qos:)(v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v47);
      v49 = swift_allocObject(&unk_101093390, 32, 7);
      v50 = v108;
      *(_QWORD *)(v49 + 16) = v107;
      *(_QWORD *)(v49 + 24) = v50;
      v116.i64[1] = (uint64_t)sub_1002A3AD4;
      v117 = (_QWORD *)v49;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v115.i64[0] = 1107296256;
      v115.i64[1] = (uint64_t)sub_100016FB8;
      v116.i64[0] = (uint64_t)&unk_1010933A8;
      v51 = _Block_copy(&aBlock);
      v52 = swift_retain();
      v53 = v109;
      static DispatchQoS.unspecified.getter(v52);
      v121[0] = _swiftEmptyArrayStorage;
      v54 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v55 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v56 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v57 = v110;
      v58 = v55;
      v28 = v105;
LABEL_23:
      dispatch thunk of SetAlgebra.init<A>(_:)(v121, v58, v56, v28, v54);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v53, v57, v51);
      _Block_release(v51);

      (*(void (**)(char *, uint64_t))(v112 + 8))(v57, v28);
      (*(void (**)(char *, uint64_t))(v111 + 8))(v53, v113);
      return (_QWORD *)swift_release();
    }
    __break(1u);
    goto LABEL_40;
  }
  if (v29 != 3)
  {
    v14 = v108;
    v28 = v7;
    v44 = static os_log_type_t.error.getter(v17);
    if (qword_1010EA310 == -1)
    {
LABEL_22:
      os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_1011B7DF0, "Invalid state!", 14, 2, _swiftEmptyArrayStorage);
      sub_1007D50BC(1);
      sub_10001F6FC();
      v59 = v106;
      (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v106);
      v48 = (void *)static OS_dispatch_queue.global(qos:)(v12);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v59);
      v60 = swift_allocObject(&unk_101093340, 32, 7);
      *(_QWORD *)(v60 + 16) = v107;
      *(_QWORD *)(v60 + 24) = v14;
      v116.i64[1] = (uint64_t)sub_1007DBD14;
      v117 = (_QWORD *)v60;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v115.i64[0] = 1107296256;
      v115.i64[1] = (uint64_t)sub_100016FB8;
      v116.i64[0] = (uint64_t)&unk_101093358;
      v51 = _Block_copy(&aBlock);
      v61 = swift_retain();
      v53 = v109;
      static DispatchQoS.unspecified.getter(v61);
      v121[0] = _swiftEmptyArrayStorage;
      v54 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v62 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v56 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v57 = v110;
      v58 = v62;
      goto LABEL_23;
    }
LABEL_40:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
    goto LABEL_22;
  }
  v30 = static os_log_type_t.default.getter(v17);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  result = (_QWORD *)os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7DF0, "Sent finalize pairing.", 22, 2, _swiftEmptyArrayStorage);
  *(_BYTE *)(v27 + v28) = 4;
  return result;
}

uint64_t sub_1007DB3A8()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007DB3D4(void (*a1)(__int128 *), uint64_t a2)
{
  uint64_t v2;

  return sub_1007D53D4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

unint64_t sub_1007DB3E0()
{
  unint64_t result;

  result = qword_1011097F0;
  if (!qword_1011097F0)
  {
    result = swift_getWitnessTable(byte_100E507C8, &type metadata for AccessoryPairingSession.AccessoryPairingSessionError);
    atomic_store(result, (unint64_t *)&qword_1011097F0);
  }
  return result;
}

unint64_t sub_1007DB424()
{
  unint64_t result;

  result = qword_1011097F8;
  if (!qword_1011097F8)
  {
    result = swift_getWitnessTable(aY_55, &type metadata for AccessoryPairingCommand);
    atomic_store(result, (unint64_t *)&qword_1011097F8);
  }
  return result;
}

uint64_t sub_1007DB468()
{
  uint64_t v0;

  sub_1007D9DE4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), (void (*)(void))sub_10001BC14);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1007DB4B4(uint64_t a1)
{
  return sub_1007DB5F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1007D46E8);
}

void sub_1007DB4D0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  sub_1007D518C(*a1, a1[1]);
  *a2 = v3;
}

double sub_1007DB500@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1007D6ACC(a1, a2);
}

uint64_t sub_1007DB524()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_1007DB530@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1007D8024(a1, *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_1007DB55C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1007DB5A0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1007D502C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1007DB5B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007DB5DC(uint64_t a1)
{
  return sub_1007DB5F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1007D38E4);
}

uint64_t sub_1007DB5F8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_1007DB61C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007DB650@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1007D4044(*(void **)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1007DB65C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1007DB690(uint64_t a1)
{
  uint64_t *v1;

  return sub_1007D40A8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1007DB69C()
{
  uint64_t v0;
  id *v1;
  id v2;

  swift_release();
  v1 = (id *)(v0 + 32);
  switch(*(_BYTE *)(v0 + 72))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 73, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 73, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 73, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 40);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 73, 7);
  }
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_1007DB738()
{
  uint64_t v0;

  return sub_1007D4544(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), (_QWORD *)(v0 + 32));
}

uint64_t sub_1007DB744(uint64_t a1)
{
  uint64_t v1;

  return sub_1007D22B0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1007DB768()
{
  uint64_t v0;

  return sub_1007D32F0(*(void **)(v0 + 24));
}

uint64_t sub_1007DB78C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1007DB7B4()
{
  uint64_t v0;

  return sub_100E08534(*(void **)(v0 + 64));
}

uint64_t sub_1007DB7DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1007DB820(uint64_t a1)
{
  uint64_t v1;

  sub_1007D2A88(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1007DB830()
{
  uint64_t v0;
  id *v1;
  id v2;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  v1 = (id *)(v0 + 32);
  switch(*(_BYTE *)(v0 + 72))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_11;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 73, 7);
    case 2:

      goto LABEL_10;
    case 3:

      return swift_deallocObject(v0, 73, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 73, 7);
    case 8:
      swift_release();
LABEL_10:
      v2 = *(id *)(v0 + 40);
LABEL_11:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 73, 7);
  }
  return swift_deallocObject(v0, 73, 7);
}

uint64_t sub_1007DB8D4()
{
  uint64_t *v0;

  return sub_1007D3288(v0[2], v0[3], v0 + 4);
}

uint64_t sub_1007DB8E0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007DB90C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t result;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  if (v1)
    return v1(0);
  return result;
}

uint64_t sub_1007DB938()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1007DB96C()
{
  uint64_t *v0;

  return sub_1007D2170(v0[3], v0[4], v0[5]);
}

uint64_t sub_1007DB994()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_1007DB9D0()
{
  uint64_t v0;

  sub_1007D0C50(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_1007DB9E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1007DBA04()
{
  uint64_t v0;

  sub_1007D1EB4(*(void (**)(_QWORD, void *))(v0 + 16), *(_QWORD *)(v0 + 24), 7);
}

void sub_1007DBA20()
{
  uint64_t v0;

  sub_1007D1EB4(*(void (**)(_QWORD, void *))(v0 + 16), *(_QWORD *)(v0 + 24), 3);
}

void sub_1007DBA3C()
{
  uint64_t v0;

  sub_1007D1EB4(*(void (**)(_QWORD, void *))(v0 + 16), *(_QWORD *)(v0 + 24), 10);
}

void sub_1007DBA58()
{
  uint64_t v0;

  sub_1007D1EB4(*(void (**)(_QWORD, void *))(v0 + 16), *(_QWORD *)(v0 + 24), 11);
}

void sub_1007DBA74()
{
  uint64_t v0;

  sub_1002A183C(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 17);
}

uint64_t sub_1007DBA90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_1007DBAC4(char a1)
{
  uint64_t v1;

  sub_1007CEE28(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1007DBAD0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1007DBB04()
{
  uint64_t v0;

  sub_1002A183C(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 15);
}

void sub_1007DBB20()
{
  uint64_t v0;

  sub_1002A183C(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 20);
}

uint64_t sub_1007DBB3C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1007DBB70()
{
  uint64_t v0;

  return sub_1007CF2F4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1007DBB7C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1007CFCB8(a1, v2, a2);
}

uint64_t sub_1007DBB84()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1007DBBB8(uint64_t a1)
{
  uint64_t *v1;

  return sub_1007D009C(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_1007DBBC4()
{
  uint64_t v0;

  sub_1002A183C(*(void (**)(void *))(v0 + 16), *(_QWORD *)(v0 + 24), 7);
}

uint64_t sub_1007DBBE0()
{
  return sub_1000072B8((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingSession.AccessoryPairingSessionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007DBC38 + 4 * byte_100E506AA[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007DBC6C + 4 * byte_100E506A5[v4]))();
}

uint64_t sub_1007DBC6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007DBC74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007DBC7CLL);
  return result;
}

uint64_t sub_1007DBC88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007DBC90);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007DBC94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007DBC9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingSession.AccessoryPairingSessionError()
{
  return &type metadata for AccessoryPairingSession.AccessoryPairingSessionError;
}

unint64_t sub_1007DBCBC()
{
  unint64_t result;

  result = qword_1011098F8;
  if (!qword_1011098F8)
  {
    result = swift_getWitnessTable("13$", &type metadata for AccessoryPairingSession.AccessoryPairingSessionError);
    atomic_store(result, (unint64_t *)&qword_1011098F8);
  }
  return result;
}

id sub_1007DBD00@<X0>(char **a1@<X8>)
{
  return sub_1000F9D30(a1);
}

uint64_t sub_1007DBDD4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t *v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD v79[3];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v3 = v1;
  v5 = type metadata accessor for HashAlgorithm(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  dispatch thunk of BinaryEncoding.container()(v79, v9, v10);
  v76 = sub_10078EE58();
  v12 = v11;
  v14 = *v3;
  v13 = v3[1];
  v75 = objc_autoreleasePoolPush();
  sub_10001BBBC(v14, v13);
  sub_1007E7118(v14, v13);
  if (!v2)
  {
    v17 = v15;
    v73 = v3;
    v74 = v12;
    sub_10001BC14(v14, v13);
    v18 = sub_1007E3D28(v17, 0);
    v20 = v19;
    CCECCryptorRelease(v17);
    v36 = sub_1002FB6C8(v18, v20);
    v38 = v37;
    sub_10001BBBC(v36, v37);
    v70 = objc_autoreleasePoolPush();
    v71 = v38;
    v72 = v36;
    v39 = v76;
    v40 = v74;
    sub_1007E5D00(&v77);
    objc_autoreleasePoolPop(v70);
    v41 = v71;
    sub_10001BC14(v72, v71);
    sub_10001BC14(v72, v41);
    v42 = v77;
    v72 = v78;
    objc_autoreleasePoolPop(v75);
    sub_10001BC14(v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for HashAlgorithm.sha256(_:), v5);
    v43 = Data.hash(algorithm:)(v8, v14, v13);
    v45 = v44;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v77 = v43;
    v78 = v45;
    v46 = v80;
    v47 = v81;
    sub_10009F5D0((uint64_t)v79, v80);
    v48 = sub_1000DCC90();
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v77, &type metadata for Data, v48, v46, v47);
    sub_10001BC14(v43, v45);
    v49 = type metadata accessor for BeaconPayloadV2(0);
    v50 = v73;
    v51 = Date.timeIntervalSinceReferenceDate.getter(v49);
    if ((~*(_QWORD *)&v51 & 0x7FF0000000000000) != 0)
    {
      if (v51 > -1.0)
      {
        if (v51 < 4294967300.0)
        {
          LODWORD(v77) = bswap32(v51);
          v52 = v80;
          v53 = v81;
          sub_10009F5D0((uint64_t)v79, v80);
          v54 = sub_1000588DC();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v77, &type metadata for UInt32, v54, v52, v53);
          v55 = (uint64_t)v50 + *(int *)(v49 + 44);
          v56 = v80;
          v57 = v81;
          sub_10009F5D0((uint64_t)v79, v80);
          v58 = v49;
          v59 = type metadata accessor for BeaconPayloadMetaDataV2(0);
          v60 = sub_1007DD4C8();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v55, v59, v60, v56, v57);
          v47 = v58;
          v46 = v72;
          v77 = v42;
          v78 = v72;
          v61 = v80;
          v62 = v81;
          sub_10009F5D0((uint64_t)v79, v80);
          dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v77, &type metadata for Data, v48, v61, v62);
          if (qword_1010E9D08 == -1)
            goto LABEL_11;
          goto LABEL_20;
        }
LABEL_19:
        __break(1u);
LABEL_20:
        swift_once(&qword_1010E9D08, sub_10059A6E0);
LABEL_11:
        OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
        v63 = sub_100C1BDB4(v77);
        swift_bridgeObjectRelease();
        v64 = v73;
        if ((v63 & 1) != 0)
          goto LABEL_15;
        if (qword_1010EA1D0 != -1)
          swift_once(&qword_1010EA1D0, sub_100B11444);
        v77 = 0x7365547265646E75;
        v78 = 0xE900000000000074;
        SynchronousCache.cachedValue<A>(key:computeBlock:)(&v82, &v77, sub_10001F628, 0, &type metadata for Bool);
        swift_bridgeObjectRelease();
        if (v82 == 1)
        {
LABEL_15:
          v65 = (int *)((char *)v64 + *(int *)(v47 + 40));
          v66 = *v65;
          BYTE4(v77) = *((_BYTE *)v65 + 4);
          LODWORD(v77) = v66;
          v67 = v80;
          v68 = v81;
          sub_10009F5D0((uint64_t)v79, v80);
          v69 = sub_1007DD510();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v77, &type metadata for TLVPackets, v69, v67, v68);
        }
        v33 = v42;
        v34 = v46;
        goto LABEL_6;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_19;
  }
  v16 = sub_10001BC14(v14, v13);
  v21 = static os_log_type_t.error.getter(v16);
  if (qword_1010E9F78 != -1)
    swift_once(&qword_1010E9F78, sub_1007E28B4);
  v22 = qword_1011B77E0;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v24 = swift_allocObject(v23, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
  v77 = v2;
  swift_errorRetain(v2);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v26 = String.init<A>(describing:)(&v77, v25);
  v28 = v27;
  *(_QWORD *)(v24 + 56) = &type metadata for String;
  *(_QWORD *)(v24 + 64) = sub_10001AA00();
  *(_QWORD *)(v24 + 32) = v26;
  *(_QWORD *)(v24 + 40) = v28;
  os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Error deriving advertisementKey: %@", 35, 2, v24);
  swift_bridgeObjectRelease();
  v29 = sub_1000D95A8();
  v30 = swift_allocError(&type metadata for CryptoTokenError, v29, 0, 0);
  *v31 = 1;
  swift_willThrow(v30);
  swift_errorRelease(v2);
  v32 = v76;
  objc_autoreleasePoolPop(v75);
  v33 = v32;
  v34 = v12;
LABEL_6:
  sub_10001BC14(v33, v34);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v79);
}

uint64_t sub_1007DC440(_QWORD *a1)
{
  return sub_1007DBDD4(a1);
}

uint64_t sub_1007DC454@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  int *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  double v32;
  int v33;
  unsigned int v34;
  int v35;
  _BYTE *v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  void (*v40)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  int *v51;
  char *v52;
  int v53;
  _BYTE v54[4];
  int v55;
  int v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71[2];
  uint64_t v72;

  v4 = type metadata accessor for Date(0);
  v70 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v69 = &v54[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v68 = type metadata accessor for Bit(0);
  v65 = *(_QWORD *)(v68 - 8);
  v6 = __chkstk_darwin(v68);
  v64 = &v54[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v67 = &v54[-v8];
  v66 = type metadata accessor for BeaconPayloadMetaDataV2(0);
  __chkstk_darwin(v66);
  v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8((uint64_t *)&unk_101100320);
  __chkstk_darwin(v11);
  v13 = &v54[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for ObservedAdvertisement.Location(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (double *)&v54[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = (int *)type metadata accessor for ObservedAdvertisement(0);
  sub_1007DC9D8(a1 + v18[12], (uint64_t)v13);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1007DCA20((uint64_t)v13);
    v19 = sub_1007DCA60();
    v20 = swift_allocError(&type metadata for BeaconPayloadV2.BeaconPayloadV2Error, v19, 0, 0);
    *v21 = 0;
    swift_willThrow(v20);
    return sub_1000126B0(a1, type metadata accessor for ObservedAdvertisement);
  }
  else
  {
    sub_1000126EC((uint64_t)v13, (uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
    v23 = *(_QWORD *)(a1 + 24);
    if ((v23 & 0x2000000000000000) != 0)
    {
      v27 = sub_1007DCA60();
      v28 = swift_allocError(&type metadata for BeaconPayloadV2.BeaconPayloadV2Error, v27, 0, 0);
      *v29 = 1;
      swift_willThrow(v28);
      sub_1000126B0(a1, type metadata accessor for ObservedAdvertisement);
      return sub_1000126B0((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
    }
    else
    {
      v59 = *(_QWORD *)(a1 + 16);
      v60 = v23;
      sub_10001BBBC(v59, v23);
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      v24 = v63;
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v63 = v24;
      v25 = sub_100C1BDB4(v71[0]);
      swift_bridgeObjectRelease();
      v61 = v4;
      v62 = a2;
      if ((v25 & 1) == 0)
      {
        if (qword_1010EA1D0 != -1)
          swift_once(&qword_1010EA1D0, sub_100B11444);
        v71[0] = 0x7365547265646E75;
        v71[1] = 0xE900000000000074;
        SynchronousCache.cachedValue<A>(key:computeBlock:)(&v72, v71, sub_10001F628, 0, &type metadata for Bool);
        swift_bridgeObjectRelease();
        if (v72 != 1)
          goto LABEL_11;
      }
      if ((*(_BYTE *)(a1 + 35) & 1) == 0)
      {
        v30 = 2;
        if (*(_BYTE *)(a1 + v18[14]))
          v30 = 0;
        v26 = v30 | ((unint64_t)*(unsigned __int8 *)(a1 + 33) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 34) << 32);
      }
      else
      {
LABEL_11:
        v26 = 3;
      }
      v58 = v26;
      if (v26 == 3)
        v31 = 1;
      else
        v31 = 2;
      v57 = v31;
      v32 = v17[2];
      v33 = sub_1001E58F8(v32);
      v34 = *(unsigned __int8 *)(a1 + 32);
      v55 = (v34 >> 4) & 3;
      v56 = v33;
      v35 = sub_1000AF25C(v34 & 0xB);
      v36 = v64;
      v37 = v65;
      if (*(_BYTE *)(a1 + v18[14]))
        v38 = (unsigned int *)&enum case for Bit.one(_:);
      else
        v38 = (unsigned int *)&enum case for Bit.zero(_:);
      v39 = v68;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v65 + 104))(v64, *v38, v68);
      v40 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 32);
      v41 = v67;
      v40(v67, v36, v39);
      *v10 = v56;
      v10[1] = v55;
      v10[2] = v35;
      v10[3] = BYTE1(v35) & 1;
      v10[4] = BYTE2(v35) & 1;
      v10[5] = HIBYTE(v35) & 1;
      v10[6] = v57;
      v42 = v66;
      v40(&v10[*(int *)(v66 + 32)], v41, v39);
      v10[*(int *)(v42 + 36)] = 0;
      v43 = a1 + v18[11];
      v45 = v69;
      v44 = v70;
      v46 = v61;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v70 + 16))(v69, v43, v61);
      v47 = *v17;
      v48 = *((_QWORD *)v17 + 1);
      sub_1000126B0((uint64_t)v17, type metadata accessor for ObservedAdvertisement.Location);
      LOBYTE(v39) = *(_BYTE *)(a1 + 32);
      sub_1000126B0(a1, type metadata accessor for ObservedAdvertisement);
      v49 = v62;
      v50 = v60;
      *(_QWORD *)v62 = v59;
      *((_QWORD *)v49 + 1) = v50;
      v51 = (int *)type metadata accessor for BeaconPayloadV2(0);
      (*(void (**)(char *, _BYTE *, uint64_t))(v44 + 32))(&v49[v51[5]], v45, v46);
      *(double *)&v49[v51[6]] = v47;
      *(_QWORD *)&v49[v51[7]] = v48;
      *(double *)&v49[v51[8]] = v32;
      v49[v51[9]] = v39;
      v52 = &v49[v51[10]];
      v53 = v58;
      v52[4] = BYTE4(v58);
      *(_DWORD *)v52 = v53;
      return sub_1000126EC((uint64_t)v10, (uint64_t)&v49[v51[11]], type metadata accessor for BeaconPayloadMetaDataV2);
    }
  }
}

uint64_t sub_1007DC9D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_101100320);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007DCA20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_101100320);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1007DCA60()
{
  unint64_t result;

  result = qword_101109900;
  if (!qword_101109900)
  {
    result = swift_getWitnessTable("\t3$", &type metadata for BeaconPayloadV2.BeaconPayloadV2Error);
    atomic_store(result, (unint64_t *)&qword_101109900);
  }
  return result;
}

uint64_t type metadata accessor for BeaconPayloadV2(uint64_t a1)
{
  uint64_t result;

  result = qword_101109960;
  if (!qword_101109960)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconPayloadV2);
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadV2.BeaconPayloadV2Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007DCB2C + 4 * byte_100E50815[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007DCB60 + 4 * byte_100E50810[v4]))();
}

uint64_t sub_1007DCB60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007DCB68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007DCB70);
  return result;
}

uint64_t sub_1007DCB7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007DCB84);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007DCB88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007DCB90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadV2.BeaconPayloadV2Error()
{
  return &type metadata for BeaconPayloadV2.BeaconPayloadV2Error;
}

uint64_t *sub_1007DCBAC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    v14 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
    v15 = a3[10];
    v16 = a3[11];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_DWORD *)v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    v19 = (char *)a1 + v16;
    v20 = (char *)a2 + v16;
    *v19 = *((_BYTE *)a2 + v16);
    v19[1] = *((_BYTE *)a2 + v16 + 1);
    *(_DWORD *)(v19 + 2) = *(_DWORD *)((char *)a2 + v16 + 2);
    v19[6] = *((_BYTE *)a2 + v16 + 6);
    v21 = type metadata accessor for BeaconPayloadMetaDataV2(0);
    v22 = *(int *)(v21 + 32);
    v23 = &v19[v22];
    v24 = &v20[v22];
    v25 = type metadata accessor for Bit(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
    v19[*(int *)(v21 + 36)] = v20[*(int *)(v21 + 36)];
  }
  return a1;
}

uint64_t sub_1007DCD00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 44);
  v7 = v6 + *(int *)(type metadata accessor for BeaconPayloadMetaDataV2(0) + 32);
  v8 = type metadata accessor for Bit(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t *sub_1007DCD88(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[10];
  v15 = a3[11];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (char *)a1 + v15;
  v19 = (char *)a2 + v15;
  *v18 = *((_BYTE *)a2 + v15);
  v18[1] = *((_BYTE *)a2 + v15 + 1);
  *(_DWORD *)(v18 + 2) = *(_DWORD *)((char *)a2 + v15 + 2);
  v18[6] = *((_BYTE *)a2 + v15 + 6);
  v20 = type metadata accessor for BeaconPayloadMetaDataV2(0);
  v21 = *(int *)(v20 + 32);
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for Bit(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v22, v23, v24);
  v18[*(int *)(v20 + 36)] = v19[*(int *)(v20 + 36)];
  return a1;
}

uint64_t *sub_1007DCEB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  v14 = a3[10];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = v16[4];
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v15[4] = v17;
  v18 = a3[11];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *v19 = *((_BYTE *)a2 + v18);
  v19[1] = *((_BYTE *)a2 + v18 + 1);
  v19[2] = *((_BYTE *)a2 + v18 + 2);
  v19[3] = *((_BYTE *)a2 + v18 + 3);
  v19[4] = *((_BYTE *)a2 + v18 + 4);
  v19[5] = *((_BYTE *)a2 + v18 + 5);
  v19[6] = *((_BYTE *)a2 + v18 + 6);
  v21 = type metadata accessor for BeaconPayloadMetaDataV2(0);
  v22 = *(int *)(v21 + 32);
  v23 = &v19[v22];
  v24 = &v20[v22];
  v25 = type metadata accessor for Bit(0);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  v19[*(int *)(v21 + 36)] = v20[*(int *)(v21 + 36)];
  return a1;
}

_OWORD *sub_1007DD004(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v12 = a3[10];
  v13 = a3[11];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_DWORD *)v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  v16 = (char *)a1 + v13;
  v17 = (char *)a2 + v13;
  *v16 = *((_BYTE *)a2 + v13);
  v16[1] = *((_BYTE *)a2 + v13 + 1);
  *(_DWORD *)(v16 + 2) = *(_DWORD *)((char *)a2 + v13 + 2);
  v16[6] = *((_BYTE *)a2 + v13 + 6);
  v18 = type metadata accessor for BeaconPayloadMetaDataV2(0);
  v19 = *(int *)(v18 + 32);
  v20 = &v16[v19];
  v21 = &v17[v19];
  v22 = type metadata accessor for Bit(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v20, v21, v22);
  v16[*(int *)(v18 + 36)] = v17[*(int *)(v18 + 36)];
  return a1;
}

uint64_t *sub_1007DD120(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  *(uint64_t *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  *(uint64_t *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v14 = a3[10];
  v15 = a3[11];
  v16 = (char *)a1 + v14;
  v17 = (char *)a2 + v14;
  *(_DWORD *)v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  v18 = (char *)a1 + v15;
  v19 = (char *)a2 + v15;
  *v18 = *((_BYTE *)a2 + v15);
  v18[1] = *((_BYTE *)a2 + v15 + 1);
  v18[2] = *((_BYTE *)a2 + v15 + 2);
  v18[3] = *((_BYTE *)a2 + v15 + 3);
  v18[4] = *((_BYTE *)a2 + v15 + 4);
  v18[5] = *((_BYTE *)a2 + v15 + 5);
  v18[6] = *((_BYTE *)a2 + v15 + 6);
  v20 = type metadata accessor for BeaconPayloadMetaDataV2(0);
  v21 = *(int *)(v20 + 32);
  v22 = &v18[v21];
  v23 = &v19[v21];
  v24 = type metadata accessor for Bit(0);
  (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(v22, v23, v24);
  v18[*(int *)(v20 + 36)] = v19[*(int *)(v20 + 36)];
  return a1;
}

uint64_t sub_1007DD260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1007DD26C);
}

uint64_t sub_1007DD26C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 252)
  {
    v8 = type metadata accessor for BeaconPayloadMetaDataV2(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(unsigned __int8 *)(a1 + a3[10]);
  if (v10 >= 2)
    v11 = ((v10 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v11 = -2;
  return v11 & ~(v11 >> 31);
}

uint64_t sub_1007DD320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1007DD32C);
}

uint64_t sub_1007DD32C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 252)
    {
      *(_BYTE *)(a1 + a4[10]) = a2 + 3;
      return result;
    }
    v10 = type metadata accessor for BeaconPayloadMetaDataV2(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[11];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

uint64_t sub_1007DD3C8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = &unk_100E50858;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = (char *)&value witness table for Builtin.Int8 + 64;
    v5[6] = &unk_100E50870;
    result = type metadata accessor for BeaconPayloadMetaDataV2(319);
    if (v4 <= 0x3F)
    {
      v5[7] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 8, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1007DD484()
{
  unint64_t result;

  result = qword_1011099B0;
  if (!qword_1011099B0)
  {
    result = swift_getWitnessTable("!3$", &type metadata for BeaconPayloadV2.BeaconPayloadV2Error);
    atomic_store(result, (unint64_t *)&qword_1011099B0);
  }
  return result;
}

unint64_t sub_1007DD4C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011099B8;
  if (!qword_1011099B8)
  {
    v1 = type metadata accessor for BeaconPayloadMetaDataV2(255);
    result = swift_getWitnessTable(byte_100E50630, v1);
    atomic_store(result, (unint64_t *)&qword_1011099B8);
  }
  return result;
}

unint64_t sub_1007DD510()
{
  unint64_t result;

  result = qword_1011099C0;
  if (!qword_1011099C0)
  {
    result = swift_getWitnessTable(byte_100E5CD70, &type metadata for TLVPackets);
    atomic_store(result, (unint64_t *)&qword_1011099C0);
  }
  return result;
}

uint64_t sub_1007DD554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch(sub_1007DD570, 0, 0);
}

uint64_t sub_1007DD570()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10111508C);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_1007DD5CC;
  return sub_100B1C264(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1007DD5CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1007DD664;
  else
    v3 = sub_1007DD630;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1007DD630()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 32))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007DD664()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(void (**)(uint64_t))(v0 + 32);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  (*(void (**)(_QWORD))(v0 + 32))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007DD720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_1007DD73C, 0, 0);
}

uint64_t sub_1007DD73C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101115094);
  *(_QWORD *)(v0 + 40) = v1;
  *v1 = v0;
  v1[1] = sub_1007DD790;
  return sub_100B1C50C();
}

uint64_t sub_1007DD790()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1007DD828;
  else
    v3 = sub_1007DD7F4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1007DD7F4()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(v0 + 24))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007DD828()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(void (**)(uint64_t))(v0 + 24);
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  (*(void (**)(_QWORD))(v0 + 24))(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007DD9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  return swift_task_switch(sub_1007DD9C4, 0, 0);
}

uint64_t sub_1007DD9C4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_10111509C);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_1007DDA20;
  return sub_100B1C79C(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1007DDA20(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(*v3 + 56);
  v6 = *v3;
  *(_QWORD *)(v6 + 64) = a1;
  swift_task_dealloc(v5);
  if (v2)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_BYTE *)(v6 + 72) = a2;
  return swift_task_switch(sub_1007DDAA8, 0, 0);
}

uint64_t sub_1007DDAA8()
{
  uint64_t v0;
  void *v1;
  void (*v2)(void *, void *);
  id v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 64);
  v2 = *(void (**)(void *, void *))(v0 + 40);
  if ((*(_BYTE *)(v0 + 72) & 1) != 0)
  {
    *(_QWORD *)(v0 + 16) = v1;
    swift_errorRetain(v1);
    v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(v0 + 16, v4, &protocol self-conformance witness table for Error);
    swift_errorRetain(v1);
    v2(0, v1);
    sub_10010F93C(v1, 1);
    sub_10010F93C(v1, 1);
    swift_errorRelease(v1);
  }
  else
  {
    v3 = v1;
    v2(v1, 0);
    sub_10010F93C(v1, 0);
    sub_10010F93C(v1, 0);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1007DDD94()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocalFindableConnectionMaterialTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LocalFindableConnectionMaterialTrampoline()
{
  return objc_opt_self(_TtC12searchpartyd41LocalFindableConnectionMaterialTrampoline);
}

uint64_t sub_1007DDDF4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007DDE18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1007DDEB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc(dword_101109A6C);
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_100004C28;
  *(_OWORD *)(v7 + 40) = v8;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v6;
  return swift_task_switch(sub_1007DD9C4, 0, 0);
}

uint64_t sub_1007DDF50()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1007DDF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_101109A84);
  v4 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004C28;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_1007DD73C, 0, 0);
}

void sub_1007DDFEC(void *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject(&unk_101093CF0, 24, 7);
  *(_QWORD *)(v7 + 16) = a2;
  v8 = (void *)objc_opt_self(NSXPCConnection);
  _Block_copy(a2);
  v9 = objc_msgSend(v8, "currentConnection");
  if (v9)
  {
    v10 = v9;
    v11 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v6, 1, 1, v11);
    v12 = (_QWORD *)swift_allocObject(&unk_101093D18, 64, 7);
    v12[2] = 0;
    v12[3] = 0;
    v12[4] = a1;
    v12[5] = v10;
    v12[6] = sub_10001D1EC;
    v12[7] = v7;
    v13 = a1;
    swift_retain();
    sub_100691AC0((uint64_t)v6, (uint64_t)&unk_101109AA0, (uint64_t)v12);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(0);
    v15 = v14;
    v20 = 1;
    v16 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v17 = sub_1007DE1A4();
    _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v16, v15, v17);
    v18 = v21;
    v19 = (void *)_convertErrorToNSError(_:)(v21);
    ((void (**)(_QWORD, void *))a2)[2](a2, v19);
    swift_release();

  }
}

unint64_t sub_1007DE1A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EB240;
  if (!qword_1010EB240)
  {
    type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(255);
    result = swift_getWitnessTable(aE_60, v1);
    atomic_store(result, (unint64_t *)&qword_1010EB240);
  }
  return result;
}

uint64_t sub_1007DE1EC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1007DE228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc(dword_101109A9C);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch(sub_1007DD570, 0, 0);
}

uint64_t sub_1007DE290(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _DWORD v23[8];
  uint64_t v24;

  v3 = sub_10001A9A8(&qword_1010F1958);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = CCCKG2ParamsP224Sha256Version2(v4);
  v24 = 0;
  v8 = CCCKG2OwnerCreate(v7, &v24);
  v9 = v8;
  v23[7] = v8;
  if (!(_DWORD)v8)
  {
    v21 = v24;
    if (v24)
    {
      v22 = type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
      *(_QWORD *)(swift_allocObject(v22, 24, 7) + 16) = v21;
      CCCKG2GetCommitmentSize(v7);
      CCCKG2GetShareSize(v7);
      __asm { BR              X10 }
    }
  }
  v10 = static os_log_type_t.error.getter(v8);
  if (qword_1010E9F78 != -1)
    swift_once(&qword_1010E9F78, sub_1007E28B4);
  v11 = qword_1011B77E0;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 72, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v13 + 56) = &type metadata for Int32;
  *(_QWORD *)(v13 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v13 + 32) = v9;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "CCCKG2OwnerCreate: Error creating owner for collaborative key generation. Status: %d.", v23[0]);
  swift_bridgeObjectRelease();
  CryptoError.init(rawValue:)(v9);
  v14 = type metadata accessor for CryptoError(0);
  v15 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
  swift_allocError(v14, v15, 0, 0);
  v17 = v16;
  v18 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v6, 1, v14) == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v17, enum case for CryptoError.unspecifiedError(_:), v14);
    v19 = sub_1007EB448((uint64_t)v6);
  }
  else
  {
    v19 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v17, v6, v14);
  }
  swift_willThrow(v19);
  return v18;
}

uint64_t sub_1007DE864(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _DWORD v21[8];
  uint64_t v22;

  v3 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0;
  v6 = CCCKGOwnerCreate(224, 10, &v22);
  v7 = v6;
  v21[7] = v6;
  if (!(_DWORD)v6)
  {
    v19 = v22;
    if (v22)
    {
      v20 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
      *(_QWORD *)(swift_allocObject(v20, 24, 7) + 16) = v19;
      CCCKGGetShareSize(224, 10);
      __asm { BR              X10 }
    }
  }
  v8 = static os_log_type_t.error.getter(v6);
  if (qword_1010E9F78 != -1)
    swift_once(&qword_1010E9F78, sub_1007E28B4);
  v9 = qword_1011B77E0;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v11 + 56) = &type metadata for Int32;
  *(_QWORD *)(v11 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v11 + 32) = v7;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "CCCKGOwnerCreate: Error creating owner for collaborative key generation. Status: %d.", v21[0]);
  swift_bridgeObjectRelease();
  CryptoError.init(rawValue:)(v7);
  v12 = type metadata accessor for CryptoError(0);
  v13 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
  swift_allocError(v12, v13, 0, 0);
  v15 = v14;
  v16 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v5, 1, v12) == 1)
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v16 + 104))(v15, enum case for CryptoError.unspecifiedError(_:), v12);
    v17 = sub_1007EB448((uint64_t)v5);
  }
  else
  {
    v17 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(v15, v5, v12);
  }
  swift_willThrow(v17);
  return v16;
}

void sub_1007DEE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = CCCKG2ParamsP224Sha256Version2();
  CCCKG2GetOpeningSize(v4);
  __asm { BR              X10 }
}

uint64_t sub_1007DEE84()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  _OWORD v17[12];

  v11 = v4;
  v12 = v5;
  v13 = BYTE2(v5);
  v14 = BYTE3(v5);
  v15 = BYTE4(v5);
  v16 = BYTE5(v5);
  swift_retain();
  sub_1007E54F8((uint64_t)&v11, v1, v3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1007E5738, (uint64_t)v17);
  result = swift_release();
  if (!v2)
  {
    v7 = v17[1];
    v8 = v17[2];
    v9 = v17[3];
    v10 = v17[4];
    *v0 = v17[0];
    v0[1] = v7;
    v0[2] = v8;
    v0[3] = v9;
    v0[4] = v10;
  }
  return result;
}

void sub_1007DF07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CCCKGGetOpeningSize(224, 10);
  __asm { BR              X10 }
}

uint64_t sub_1007DF0EC()
{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  _OWORD v17[12];

  v11 = v4;
  v12 = v5;
  v13 = BYTE2(v5);
  v14 = BYTE3(v5);
  v15 = BYTE4(v5);
  v16 = BYTE5(v5);
  swift_retain();
  sub_1007E54F8((uint64_t)&v11, v1, v3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1007E4520, (uint64_t)v17);
  result = swift_release();
  if (!v2)
  {
    v7 = v17[1];
    v8 = v17[2];
    v9 = v17[3];
    v10 = v17[4];
    *v0 = v17[0];
    v0[1] = v7;
    v0[2] = v8;
    v0[3] = v9;
    v0[4] = v10;
  }
  return result;
}

uint64_t sub_1007DF2E4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, unint64_t *a9, unint64_t a10, _QWORD **a11)
{
  uint64_t v11;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[16];
  __int128 v46;
  _BYTE v47[24];
  int i;
  uint64_t v49;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v40 = 0x7365547265646E75;
  v41 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v49, &v40, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || (_BYTE)v49)
  {
    result = sub_1007E0410(a5, a6, a7);
    if (!v11)
    {
      v22 = result;
      v23 = v21;
      v40 = result;
      v41 = v21;
      for (i = a8; ; LOBYTE(a8) = i)
      {
        v24 = objc_autoreleasePoolPush();
        sub_10001BBBC(v22, v23);
        sub_1007E2220(a1, a2, a3, a4, v22, v23, a8 & 1, &v40, &v42);
        sub_10001BC14(v22, v23);
        v22 = v40;
        v23 = v41;
        sub_100005CF0((uint64_t)&v42, (uint64_t)v47, &qword_1010F5538);
        v46 = v43;
        sub_100005CF0((uint64_t)&v44, (uint64_t)v45, &qword_1010FC1C8);
        v25 = *a11;
        sub_10001BBBC(v22, v23);
        sub_10001BBBC(v22, v23);
        sub_1002B1E20((uint64_t)v47);
        sub_100059DE8((uint64_t)&v46);
        sub_1002B1E20((uint64_t)v45);
        sub_1004D4410(&v42, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
        *a11 = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v25 = sub_1007C98FC(0, v25[2] + 1, 1, v25);
          *a11 = v25;
        }
        v28 = v25[2];
        v27 = v25[3];
        if (v28 >= v27 >> 1)
          v25 = sub_1007C98FC((_QWORD *)(v27 > 1), v28 + 1, 1, v25);
        v25[2] = v28 + 1;
        v29 = &v25[6 * v28];
        v30 = v42;
        v31 = v44;
        v29[3] = v43;
        v29[4] = v31;
        v29[2] = v30;
        *a11 = v25;
        sub_1004D4410(&v42, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        sub_10001BC14(v22, v23);
        if (*a9 >= a10)
          break;
        ++*a9;
        sub_1004D4410(&v42, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        sub_10001BC14(v22, v23);
        objc_autoreleasePoolPop(v24);
      }
      sub_1004D4410(&v42, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_10001BC14(v22, v23);
      objc_autoreleasePoolPop(v24);
      return sub_10001BC14(v22, v23);
    }
  }
  else
  {
    v16 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v17 = objc_msgSend(v16, "isInternalBuild");

    if (v17)
      v19 = static os_log_type_t.fault.getter(v18);
    else
      v19 = static os_log_type_t.error.getter(v18);
    v32 = v19;
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v33 = sub_1000D95A8();
    v34 = swift_allocError(&type metadata for CryptoTokenError, v33, 0, 0);
    *v35 = 3;
    return swift_willThrow(v34);
  }
  return result;
}

uint64_t sub_1007DF724(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t a11)
{
  uint64_t v11;
  id v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  void *contexta;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v49 = 0x7365547265646E75;
  v50 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v55, &v49, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || (_BYTE)v55)
  {
    result = sub_1007E0410(a5, a6, a7);
    if (!v11)
    {
      v25 = result;
      v26 = v24;
      v49 = result;
      v50 = v24;
      v27 = objc_autoreleasePoolPush();
      sub_10001BBBC(v25, v26);
      sub_1007E2220(a1, a2, a3, a4, v25, v26, a8 & 1, &v49, &v51);
      contexta = v27;
      v32 = v52;
      v41 = v53;
      v42 = v51;
      v33 = v54;
      sub_10001BC14(v25, v26);
      v34 = v49;
      v35 = v50;
      v36 = a9[2];
      v45 = a9[1];
      v46 = *a9;
      v37 = a9[3];
      v43 = a9[5];
      v44 = a9[4];
      *(_OWORD *)a9 = v42;
      a9[2] = v32;
      *(_OWORD *)(a9 + 3) = v41;
      a9[5] = v33;
      sub_10001BBBC(v34, v35);
      sub_1004D4410(&v51, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
      sub_1002B1CD0(v46, v45, v36, v37, v44, v43);
      v38 = *a10;
      v39 = a10[1];
      v40 = a10[2];
      *a10 = a11;
      a10[1] = v34;
      a10[2] = v35;
      sub_10001BBBC(v34, v35);
      sub_1002B1C34(v38, v39, v40);
      sub_1004D4410(&v51, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
      sub_10001BC14(v34, v35);
      objc_autoreleasePoolPop(contexta);
      return sub_10001BC14(v34, v35);
    }
  }
  else
  {
    v19 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v20 = objc_msgSend(v19, "isInternalBuild");

    if (v20)
      v22 = static os_log_type_t.fault.getter(v21);
    else
      v22 = static os_log_type_t.error.getter(v21);
    v28 = v22;
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v29 = sub_1000D95A8();
    v30 = swift_allocError(&type metadata for CryptoTokenError, v29, 0, 0);
    *v31 = 3;
    return swift_willThrow(v30);
  }
  return result;
}

uint64_t sub_1007DFA88(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8, void (*a9)(uint64_t, unint64_t, _OWORD *, uint64_t *))
{
  uint64_t v9;
  id v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v32;
  unint64_t v33;
  _OWORD v34[3];
  uint64_t v35;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v32 = 0x7365547265646E75;
  v33 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v35, &v32, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a8 & 1) != 0 || (_BYTE)v35)
  {
    result = sub_1007E0410(a5, a6, a7);
    if (!v9)
    {
      v21 = result;
      v22 = v20;
      v32 = result;
      v33 = v20;
      LOBYTE(v35) = 0;
      do
      {
        v23 = objc_autoreleasePoolPush();
        sub_10001BBBC(v21, v22);
        sub_1007E2220(a1, a2, a3, a4, v21, v22, a8 & 1, &v32, v34);
        sub_10001BC14(v21, v22);
        v21 = v32;
        v22 = v33;
        sub_10001BBBC(v32, v33);
        a9(v21, v22, v34, &v35);
        sub_1004D4410(v34, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
        sub_10001BC14(v21, v22);
        v24 = v35;
        objc_autoreleasePoolPop(v23);
      }
      while ((v24 & 1) == 0);
      return sub_10001BC14(v21, v22);
    }
  }
  else
  {
    v15 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v16 = objc_msgSend(v15, "isInternalBuild");

    if (v16)
      v18 = static os_log_type_t.fault.getter(v17);
    else
      v18 = static os_log_type_t.error.getter(v17);
    v25 = v18;
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v26 = sub_1000D95A8();
    v27 = swift_allocError(&type metadata for CryptoTokenError, v26, 0, 0);
    *v28 = 3;
    return swift_willThrow(v27);
  }
  return result;
}

uint64_t sub_1007DFD44()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 16);
  v1 = v7;
  sub_100059DE8((uint64_t)&v7);
  v2 = sub_1007E6F8C(v1, *((uint64_t *)&v1 + 1));
  v4 = v3;
  sub_1000ADA04((uint64_t)&v7);
  sub_1002F7394(v2, v4);
  return v6;
}

unint64_t sub_1007DFE68(unint64_t a1)
{
  if (a1)
    return a1 / 0x60 + 1;
  else
    return 0;
}

uint64_t sub_1007DFE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFData *isa;
  const __CFDictionary *v18;
  __SecKey *v19;
  uint64_t v20;
  uint64_t IsAlgorithmSupported;
  const __CFData *v22;
  const __CFData *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CFErrorRef v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  CFErrorRef *v38;
  __CFError *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  CFErrorRef v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CFErrorRef *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFErrorRef v65;
  CFErrorRef v66;
  CFErrorRef error;
  _BYTE v68[176];

  v8 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v8, v68);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrKeyClass);
  *(_QWORD *)(inited + 40) = v10;
  type metadata accessor for CFString(0);
  v12 = v11;
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 48) = kSecAttrKeyClassPublic;
  *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrKeyType);
  *(_QWORD *)(inited + 88) = v13;
  *(_QWORD *)(inited + 120) = v12;
  *(_QWORD *)(inited + 96) = kSecAttrKeyTypeEC;
  *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrKeySizeInBits);
  *(_QWORD *)(inited + 136) = v14;
  *(_QWORD *)(inited + 168) = &type metadata for Int;
  *(_QWORD *)(inited + 144) = 256;
  v15 = (id)kSecAttrKeyClassPublic;
  v16 = (id)kSecAttrKeyTypeEC;
  sub_1006B8B10(inited);
  error = 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v18 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v19 = SecKeyCreateWithData(isa, v18, &error);

  if (v19)
  {
    IsAlgorithmSupported = SecKeyIsAlgorithmSupported(v19, kSecKeyOperationTypeVerify, a7);
    if ((_DWORD)IsAlgorithmSupported)
    {
      v66 = 0;
      v22 = Data._bridgeToObjectiveC()().super.isa;
      v23 = Data._bridgeToObjectiveC()().super.isa;
      v24 = SecKeyVerifySignature(v19, a7, v22, v23, &v66);

      if (v24)
      {
LABEL_16:

        return 1;
      }
      v26 = static os_log_type_t.error.getter(v25);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v27 = qword_1011B77E0;
      v28 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v29 = swift_allocObject(v28, 72, 7);
      *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
      v65 = v66;
      v30 = sub_10001A9A8(&qword_1010F74F0);
      v31 = String.init<A>(describing:)(&v65, v30);
      v33 = v32;
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      *(_QWORD *)(v29 + 64) = sub_10001AA00();
      *(_QWORD *)(v29 + 32) = v31;
      *(_QWORD *)(v29 + 40) = v33;
      os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "SignatureVerification: Error validating signature. Error - %@", 61, 2, v29);
      swift_bridgeObjectRelease();
      v34 = error;
      if (error)
      {
        type metadata accessor for CFError(0);
        v36 = v35;
        v37 = sub_100006204(&qword_101109D68, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
        swift_allocError(v36, v37, 0, 0);
        *v38 = v34;
        v39 = v34;
        swift_willThrow(v39);

        goto LABEL_16;
      }
    }
    else
    {
      v54 = static os_log_type_t.error.getter(IsAlgorithmSupported);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, qword_1011B77E0, "SignatureVerification: Key does not support algorithm.", 54, 2, _swiftEmptyArrayStorage, a4);
    }
    v55 = type metadata accessor for CryptoError(0);
    v56 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v55, v56, 0, 0);
    v58 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v57, enum case for CryptoError.unspecifiedError(_:), v55);
    swift_willThrow(v58);
    goto LABEL_16;
  }
  v40 = static os_log_type_t.error.getter(v20);
  if (qword_1010E9F78 != -1)
    swift_once(&qword_1010E9F78, sub_1007E28B4);
  v41 = qword_1011B77E0;
  v42 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v43 = swift_allocObject(v42, 72, 7);
  *(_OWORD *)(v43 + 16) = xmmword_100E22B00;
  v44 = error;
  v66 = error;
  v45 = sub_10001A9A8(&qword_1010F74F0);
  v46 = String.init<A>(describing:)(&v66, v45);
  v48 = v47;
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  *(_QWORD *)(v43 + 64) = sub_10001AA00();
  *(_QWORD *)(v43 + 32) = v46;
  *(_QWORD *)(v43 + 40) = v48;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "SignatureVerification: Error serializing public key. Error - %@", 63, 2, v43);
  swift_bridgeObjectRelease();
  if (v44)
  {
    type metadata accessor for CFError(0);
    v50 = v49;
    v51 = sub_100006204(&qword_101109D68, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
    v52 = swift_allocError(v50, v51, 0, 0);
    *v53 = v44;
    swift_willThrow(v52);
  }
  else
  {
    v60 = type metadata accessor for CryptoError(0);
    v61 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v60, v61, 0, 0);
    v63 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v60 - 8) + 104))(v62, enum case for CryptoError.invalidKey(_:), v60);
    swift_willThrow(v63);
  }
  return 1;
}

uint64_t sub_1007E0410(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[4];
  _BOOL4 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v6);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001BBBC(a1, a2);
  v9 = String.utf8Data.getter(0x657461647075, 0xE600000000000000);
  if (a3)
  {
    v15[2] = v8;
    v23 = v9 >> 32;
    v24 = (int)v9;
    v25 = HIDWORD(v9);
    v11 = __OFSUB__(HIDWORD(v9), (_DWORD)v9);
    v16 = v11;
    v15[3] = HIDWORD(v9) - (int)v9;
    v21 = v10 >> 40;
    v22 = BYTE6(v10);
    v19 = v10 >> 24;
    v20 = HIDWORD(v10);
    v18 = v10 >> 16;
    v17 = v10 >> 8;
    v27 = v10;
    v28 = v10 >> 62;
    v26 = v10 & 0x3FFFFFFFFFFFFFFFLL;
    v29 = objc_autoreleasePoolPush();
    v12 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    sub_10001BBBC(a1, a2);
    v13 = __DataStorage.init(length:)(32);
    v30 = 0x2000000000;
    v31 = v13 | 0x4000000000000000;
    __asm { BR              X8 }
  }
  sub_10001BC14(v9, v10);
  return a1;
}

uint64_t sub_1007E1B84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, _QWORD *a8@<X7>, _OWORD *a9@<X8>, uint64_t *a10)
{
  uint64_t v10;
  id v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _OWORD *v73;
  uint64_t v76;
  uint64_t v78;
  unint64_t v79;
  _OWORD v80[3];
  _QWORD v81[7];
  uint64_t v82;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v78 = 0x7365547265646E75;
  v79 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v82, &v78, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a7 & 1) != 0 || (_BYTE)v82)
  {
    result = sub_1007E0410(a5, a6, 1);
    if (!v10)
    {
      v23 = result;
      v24 = v22;
      v73 = a9;
      v25 = String.utf8Data.getter(0x6669737265766964, 0xE900000000000079);
      v27 = v26;
      sub_10001BBBC(v23, v24);
      sub_1007E6A88(v23, v24, v25, v27, 72);
      v28 = v24;
      v34 = v33;
      v36 = v35;
      v71 = v23;
      v72 = v28;
      sub_10001BC14(v23, v28);
      sub_1002F6F10(v34, v36);
      sub_10001BC14(v25, v27);
      v38 = v78;
      v37 = v79;
      v39 = a2;
      if (a2 >> 60 == 15)
      {
        sub_10001BBBC(v78, v79);
        sub_10001BBBC(a3, a4);
        sub_1007E7118(a3, a4);
        v40 = v71;
        v42 = v41;
        sub_1007E79D4(v41, 0, v38, v37);
        v46 = v45;
        CCECCryptorRelease(v42);
        sub_10001BC14(a3, a4);
        sub_10001BC14(v38, v37);
        v52 = sub_1007E3D28(v46, 0);
        v54 = v53;
        v55 = v46;
        sub_10001BBBC(v52, v53);
        v56 = sub_1002FB6C8(v52, v54);
        v57 = v72;
        v69 = v61;
        v70 = v56;
        CCECCryptorRelease(v55);
        sub_10001BC14(v52, v54);
        v62 = a1;
      }
      else
      {
        sub_10001BD08(a1, a2);
        sub_10001BBBC(v38, v37);
        sub_1007E7118(a1, a2);
        v40 = v71;
        v57 = v72;
        v44 = v43;
        sub_1007E79D4(v43, 1, v38, v37);
        v48 = v47;
        CCECCryptorRelease(v44);
        sub_10001BC14(v38, v37);
        v49 = sub_1007E3D28(v48, 1);
        v51 = v50;
        v76 = sub_1007E3D28(v48, 0);
        v68 = v58;
        sub_10001BBBC(v49, v51);
        v59 = sub_1002FB3AC(v49, v51);
        v66 = v60;
        v67 = v59;
        sub_10001BBBC(v76, v68);
        v64 = sub_1002FB6C8(v76, v68);
        v69 = v65;
        v70 = v64;
        CCECCryptorRelease(v48);
        sub_10001BC14(v76, v68);
        sub_10001BC14(v49, v51);
        sub_10001EF3C(a1, v39);
        v39 = v66;
        v62 = v67;
      }
      v81[0] = v62;
      v81[1] = v39;
      v81[2] = v70;
      v81[3] = v69;
      v81[4] = v40;
      v81[5] = v57;
      sub_10001BBBC(v40, v57);
      sub_10001BD08(v70, v69);
      sub_10001BD08(v62, v39);
      sub_100736C64((uint64_t)v81, a8, a10, v80);
      sub_10001EF3C(v62, v39);
      sub_10001EF3C(v70, v69);
      sub_10001BC14(v40, v57);
      sub_10001EF3C(v62, v39);
      sub_10001BC14(v70, v69);
      sub_10001BC14(v40, v57);
      result = sub_10001BC14(v38, v37);
      v63 = v80[1];
      *v73 = v80[0];
      v73[1] = v63;
      v73[2] = v80[2];
    }
  }
  else
  {
    v17 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v18 = objc_msgSend(v17, "isInternalBuild");

    if (v18)
      v20 = static os_log_type_t.fault.getter(v19);
    else
      v20 = static os_log_type_t.error.getter(v19);
    v29 = v20;
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v30 = sub_1000D95A8();
    v31 = swift_allocError(&type metadata for CryptoTokenError, v30, 0, 0);
    *v32 = 3;
    return swift_willThrow(v31);
  }
  return result;
}

uint64_t sub_1007E2220@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, char a7@<W6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v9;
  id v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _OWORD *v72;
  uint64_t v75;
  uint64_t v77;
  unint64_t v78;
  _OWORD v79[3];
  _QWORD v80[7];
  uint64_t v81;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v77 = 0x7365547265646E75;
  v78 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v81, &v77, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((a7 & 1) != 0 || (_BYTE)v81)
  {
    result = sub_1007E0410(a5, a6, 1);
    if (!v9)
    {
      v22 = result;
      v23 = v21;
      v72 = a9;
      v24 = String.utf8Data.getter(0x6669737265766964, 0xE900000000000079);
      v26 = v25;
      sub_10001BBBC(v22, v23);
      sub_1007E6A88(v22, v23, v24, v26, 72);
      v27 = v23;
      v33 = v32;
      v35 = v34;
      v70 = v22;
      v71 = v27;
      sub_10001BC14(v22, v27);
      sub_1002F6F10(v33, v35);
      sub_10001BC14(v24, v26);
      v37 = v77;
      v36 = v78;
      v38 = a2;
      if (a2 >> 60 == 15)
      {
        sub_10001BBBC(v77, v78);
        sub_10001BBBC(a3, a4);
        sub_1007E7118(a3, a4);
        v39 = v70;
        v41 = v40;
        sub_1007E79D4(v40, 0, v37, v36);
        v45 = v44;
        CCECCryptorRelease(v41);
        sub_10001BC14(a3, a4);
        sub_10001BC14(v37, v36);
        v51 = sub_1007E3D28(v45, 0);
        v53 = v52;
        v54 = v45;
        sub_10001BBBC(v51, v52);
        v55 = sub_1002FB6C8(v51, v53);
        v56 = v71;
        v68 = v60;
        v69 = v55;
        CCECCryptorRelease(v54);
        sub_10001BC14(v51, v53);
        v61 = a1;
      }
      else
      {
        sub_10001BD08(a1, a2);
        sub_10001BBBC(v37, v36);
        sub_1007E7118(a1, a2);
        v39 = v70;
        v56 = v71;
        v43 = v42;
        sub_1007E79D4(v42, 1, v37, v36);
        v47 = v46;
        CCECCryptorRelease(v43);
        sub_10001BC14(v37, v36);
        v48 = sub_1007E3D28(v47, 1);
        v50 = v49;
        v75 = sub_1007E3D28(v47, 0);
        v67 = v57;
        sub_10001BBBC(v48, v50);
        v58 = sub_1002FB3AC(v48, v50);
        v65 = v59;
        v66 = v58;
        sub_10001BBBC(v75, v67);
        v63 = sub_1002FB6C8(v75, v67);
        v68 = v64;
        v69 = v63;
        CCECCryptorRelease(v47);
        sub_10001BC14(v75, v67);
        sub_10001BC14(v48, v50);
        sub_10001EF3C(a1, v38);
        v38 = v65;
        v61 = v66;
      }
      v80[0] = v61;
      v80[1] = v38;
      v80[2] = v69;
      v80[3] = v68;
      v80[4] = v39;
      v80[5] = v56;
      sub_10001BBBC(v39, v56);
      sub_10001BD08(v69, v68);
      sub_10001BD08(v61, v38);
      sub_1007E5BBC((uint64_t)v80, a8, v79);
      sub_10001EF3C(v61, v38);
      sub_10001EF3C(v69, v68);
      sub_10001BC14(v39, v56);
      sub_10001EF3C(v61, v38);
      sub_10001BC14(v69, v68);
      sub_10001BC14(v39, v56);
      result = sub_10001BC14(v37, v36);
      v62 = v79[1];
      *v72 = v79[0];
      v72[1] = v62;
      v72[2] = v79[2];
    }
  }
  else
  {
    v16 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v17 = objc_msgSend(v16, "isInternalBuild");

    if (v17)
      v19 = static os_log_type_t.fault.getter(v18);
    else
      v19 = static os_log_type_t.error.getter(v18);
    v28 = v19;
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v29 = sub_1000D95A8();
    v30 = swift_allocError(&type metadata for CryptoTokenError, v29, 0, 0);
    *v31 = 3;
    return swift_willThrow(v30);
  }
  return result;
}

uint64_t sub_1007E28B4()
{
  uint64_t result;

  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6F7470797263, 0xE600000000000000);
  qword_1011B77E0 = result;
  return result;
}

uint64_t sub_1007E291C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101109DD8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1007EBC80();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GeneratedTokens.CodingKeys, &type metadata for GeneratedTokens.CodingKeys, v11, v9, v10);
  v16 = *v3;
  *(_QWORD *)&v17 = *((_QWORD *)v3 + 2);
  v19 = 0;
  v12 = sub_1007EBD4C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v19, v5, &type metadata for KeyGenerationHint, v12);
  if (!v2)
  {
    v13 = *(__int128 *)((char *)v3 + 40);
    v16 = *(__int128 *)((char *)v3 + 24);
    v17 = v13;
    v18 = *(__int128 *)((char *)v3 + 56);
    v19 = 1;
    v14 = sub_1007EBD90();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v19, v5, &type metadata for DiversifiedRootKeys, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1007E2A74()
{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v11[9];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v1 = v0;
  Hasher.init(_seed:)(v11);
  v16 = *v0;
  v17 = *((_QWORD *)v0 + 2);
  Hasher._combine(_:)(v16);
  v2 = *((_QWORD *)&v16 + 1);
  v3 = v17;
  sub_1007EBC28((uint64_t)&v16);
  Data.hash(into:)(v11, v2, v3);
  sub_1007EBC54((uint64_t)&v16);
  v4 = *(__int128 *)((char *)v1 + 40);
  v12 = *(__int128 *)((char *)v1 + 24);
  v13 = v4;
  v14 = *(__int128 *)((char *)v1 + 56);
  v5 = *((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_1004D4410(&v12, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
  }
  else
  {
    v6 = v12;
    Hasher._combine(_:)(1u);
    sub_1004D4410(&v12, (void (*)(_QWORD, _QWORD))sub_10005CB9C, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BD08);
    sub_10001BD08(v6, v5);
    Data.hash(into:)(v11, v6, v5);
    sub_10001EF3C(v6, v5);
  }
  v15 = v13;
  v7 = v13;
  sub_100059DE8((uint64_t)&v15);
  Data.hash(into:)(v11, v7, *((_QWORD *)&v7 + 1));
  sub_1000ADA04((uint64_t)&v15);
  v8 = *((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1) >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = v14;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v9, v8);
    Data.hash(into:)(v11, v9, v8);
    sub_10001EF3C(v9, v8);
  }
  sub_1004D4410(&v12, (void (*)(_QWORD, _QWORD))sub_1000FC25C, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001EF3C);
  return Hasher._finalize()();
}

uint64_t sub_1007E2C44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;
  _BYTE v19[16];
  _BYTE v20[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101109D80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1007EB488();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DiversifiedRootKeys.CodingKeys, &type metadata for DiversifiedRootKeys.CodingKeys, v11, v9, v10);
  sub_100005CF0(v3, (uint64_t)v20, &qword_1010F5538);
  sub_100005CF0((uint64_t)v20, (uint64_t)&v18, &qword_1010F5538);
  v17 = 0;
  v12 = sub_1002FDD74();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for IntermediateKey, v12);
  if (!v2)
  {
    v18 = *(_OWORD *)(v3 + 16);
    v17 = 1;
    v13 = sub_1002FD29C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PublicKey, v13);
    sub_100005CF0(v3 + 32, (uint64_t)v19, &qword_1010FC1C8);
    sub_100005CF0((uint64_t)v19, (uint64_t)&v18, &qword_1010FC1C8);
    v17 = 2;
    v14 = sub_100068134();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PrivateKey, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1007E2E08()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[9];
  __int128 v8;

  Hasher.init(_seed:)(v7);
  v1 = *(_QWORD *)(v0 + 8);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v2 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v2, v1);
    Data.hash(into:)(v7, v2, v1);
    sub_10001EF3C(v2, v1);
  }
  v8 = *(_OWORD *)(v0 + 16);
  v3 = v8;
  sub_100059DE8((uint64_t)&v8);
  Data.hash(into:)(v7, v3, *((_QWORD *)&v3 + 1));
  sub_1000ADA04((uint64_t)&v8);
  v4 = *(_QWORD *)(v0 + 40);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 32);
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v5, v4);
    Data.hash(into:)(v7, v5, v4);
    sub_10001EF3C(v5, v4);
  }
  return Hasher._finalize()();
}

uint64_t sub_1007E2F24(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v18 = a4;
  v8 = sub_10001A9A8(&qword_101109E00);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1007EBDD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyGenerationHint.CodingKeys, &type metadata for KeyGenerationHint.CodingKeys, v14, v12, v13);
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0] = a3;
    v19[1] = v18;
    v20 = 1;
    v15 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for SharedSecretKey, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1007E3060()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 1953393000;
}

uint64_t sub_1007E3098@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007E9B0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007E30BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007EBC80();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007E30E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007EBC80();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1007E3110(uint64_t a1)
{
  Swift::UInt64 *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = v1[8];
  Hasher._combine(_:)(*v1);
  sub_10001BBBC(v3, v5);
  Data.hash(into:)(a1, v3, v5);
  sub_10001BC14(v3, v5);
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10001BD08(v4, v7);
    sub_10001BBBC(v6, v9);
    sub_10001BD08(v8, v10);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10001BD08(v4, v7);
    sub_10001BBBC(v6, v9);
    sub_10001BD08(v8, v10);
    sub_10001BD08(v4, v7);
    Data.hash(into:)(a1, v4, v7);
    sub_10001EF3C(v4, v7);
  }
  sub_10001BBBC(v6, v9);
  Data.hash(into:)(a1, v6, v9);
  sub_10001BC14(v6, v9);
  if (v10 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v8, v10);
    Data.hash(into:)(a1, v8, v10);
    sub_10001EF3C(v8, v10);
  }
  sub_10001EF3C(v4, v7);
  sub_10001BC14(v6, v9);
  return sub_10001EF3C(v8, v10);
}

Swift::Int sub_1007E32C0()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v11[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  v8 = v0[6];
  v7 = v0[7];
  v9 = v0[8];
  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(v1);
  sub_10001BBBC(v2, v4);
  Data.hash(into:)(v11, v2, v4);
  sub_10001BC14(v2, v4);
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
    sub_10001BD08(v3, v6);
    sub_10001BBBC(v5, v8);
    sub_10001BD08(v7, v9);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10001BD08(v3, v6);
    sub_10001BBBC(v5, v8);
    sub_10001BD08(v7, v9);
    sub_10001BD08(v3, v6);
    Data.hash(into:)(v11, v3, v6);
    sub_10001EF3C(v3, v6);
  }
  sub_10001BBBC(v5, v8);
  Data.hash(into:)(v11, v5, v8);
  sub_10001BC14(v5, v8);
  if (v9 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v7, v9);
    Data.hash(into:)(v11, v7, v9);
    sub_10001EF3C(v7, v9);
  }
  sub_10001EF3C(v3, v6);
  sub_10001BC14(v5, v8);
  sub_10001EF3C(v7, v9);
  return Hasher._finalize()();
}

__n128 sub_1007E3484@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[4];
  uint64_t v7;

  sub_1007E9BE8(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_QWORD *)(a2 + 64) = v7;
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1007E34D4(_QWORD *a1)
{
  return sub_1007E291C(a1);
}

BOOL sub_1007E34E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  BOOL v14;
  _OWORD v16[3];
  _OWORD v17[3];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *(_OWORD *)(a1 + 5);
  v16[0] = *(_OWORD *)(a1 + 3);
  v16[1] = v5;
  v6 = *(_OWORD *)(a1 + 7);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = *(_OWORD *)(a2 + 7);
  v11 = *(_OWORD *)(a2 + 3);
  v17[1] = *(_OWORD *)(a2 + 5);
  v17[2] = v10;
  v16[2] = v6;
  v17[0] = v11;
  v14 = v2 == v7
     && (sub_10001BBBC(v3, v4),
         sub_10001BBBC(v8, v9),
         _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v4),
         v13 = v12,
         sub_10001BC14(v8, v9),
         sub_10001BC14(v3, v4),
         (v13 & 1) != 0)
     && sub_1007E8C34((uint64_t)v16, (uint64_t)v17);
  return v14;
}

uint64_t sub_1007E35B8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x654B63696C627570;
  if (*v0 != 1)
    v1 = 0x4B65746176697270;
  if (*v0)
    return v1;
  else
    return 0x64656D7265746E69;
}

uint64_t sub_1007E3628@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007E9E44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007E364C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007EB488();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007E3674(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007EB488();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1007E36A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v4 = v1[1];
  v3 = v1[2];
  v6 = v1[3];
  v5 = v1[4];
  v7 = v1[5];
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v8 = *v1;
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v8, v4);
    Data.hash(into:)(a1, v8, v4);
    sub_10001EF3C(v8, v4);
  }
  sub_10001BBBC(v3, v6);
  Data.hash(into:)(a1, v3, v6);
  sub_10001BC14(v3, v6);
  if (v7 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v5, v7);
    Data.hash(into:)(a1, v5, v7);
    sub_10001EF3C(v5, v7);
  }
}

Swift::Int sub_1007E37BC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  Hasher.init(_seed:)(v8);
  if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v1, v2);
    Data.hash(into:)(v8, v1, v2);
    sub_10001EF3C(v1, v2);
  }
  sub_10001BBBC(v3, v4);
  Data.hash(into:)(v8, v3, v4);
  sub_10001BC14(v3, v4);
  if (v6 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    sub_10001BBBC(v5, v6);
    Data.hash(into:)(v8, v5, v6);
    sub_10001EF3C(v5, v6);
  }
  return Hasher._finalize()();
}

double sub_1007E38D0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1007E9FD4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1007E3910(_QWORD *a1)
{
  return sub_1007E2C44(a1);
}

BOOL sub_1007E3948(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1007E8C34((uint64_t)v7, (uint64_t)v8);
}

uint64_t sub_1007E398C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6553646572616873;
  else
    return 0x7865646E69;
}

uint64_t sub_1007E39CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007EA2AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007E39F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007EBDD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007E3A18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007EBDD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1007E3A40()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  sub_10001BBBC(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_10001BC14(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1007E3AB8(uint64_t a1)
{
  Swift::UInt64 *v1;
  uint64_t v3;
  unint64_t v4;

  v3 = v1[1];
  v4 = v1[2];
  Hasher._combine(_:)(*v1);
  sub_10001BBBC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_10001BC14(v3, v4);
}

Swift::Int sub_1007E3B10()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  sub_10001BBBC(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_10001BC14(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1007E3B84@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1007EA3AC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1007E3BB0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1007E2F24(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1007E3BCC(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  if (*a1 != *a2)
    return 0;
  v3 = a2[1];
  v2 = a2[2];
  v5 = a1[1];
  v4 = a1[2];
  sub_10001BBBC(v5, v4);
  sub_10001BBBC(v3, v2);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v4);
  v7 = v6;
  sub_10001BC14(v3, v2);
  sub_10001BC14(v5, v4);
  return v7 & 1;
}

uint64_t CollaborativeKeyGen.v1.OwnerContext.deinit()
{
  uint64_t v0;

  CCCKGOwnerDestroy(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t CollaborativeKeyGen.v1.OwnerContext.__deallocating_deinit()
{
  return sub_1007E3D00((void (*)(_QWORD))&_CCCKGOwnerDestroy);
}

uint64_t CollaborativeKeyGen.v1.ContributorContext.deinit()
{
  uint64_t v0;

  CCCKGContributorDestroy(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t CollaborativeKeyGen.v1.ContributorContext.__deallocating_deinit()
{
  return sub_1007E3D00((void (*)(_QWORD))&_CCCKGContributorDestroy);
}

uint64_t CollaborativeKeyGen.v2.OwnerContext.deinit()
{
  uint64_t v0;

  CCCKG2OwnerDestroy(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t CollaborativeKeyGen.v2.OwnerContext.__deallocating_deinit()
{
  return sub_1007E3D00((void (*)(_QWORD))&_CCCKG2OwnerDestroy);
}

uint64_t CollaborativeKeyGen.v2.ContributorContext.deinit()
{
  uint64_t v0;

  CCCKG2ContributorDestroy(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t CollaborativeKeyGen.v2.ContributorContext.__deallocating_deinit()
{
  return sub_1007E3D00((void (*)(_QWORD))&_CCCKG2ContributorDestroy);
}

uint64_t sub_1007E3D00(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  return swift_deallocClassInstance(v1, 24, 7);
}

uint64_t sub_1007E3D28(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22[2];
  uint64_t v23;
  unint64_t v24;

  v4 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1)
    v7 = 85;
  else
    v7 = 57;
  v22[0] = v7;
  v23 = sub_10060C584(v7);
  v24 = v8;
  sub_1004A5040((uint64_t)&v23);
  if (!v2)
  {
    v10 = v9;
    if (!(_DWORD)v9)
    {
      sub_1002F7C0C(v22[0], v23, v24);
      return v22[1];
    }
    v11 = static os_log_type_t.error.getter(v9);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v12 = qword_1011B77E0;
    v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v14 = swift_allocObject(v13, 72, 7);
    *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v14 + 56) = &type metadata for Int32;
    *(_QWORD *)(v14 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v14 + 32) = v10;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "Error running CCECCryptorExportKey. Code: %d.", LODWORD(v22[0]));
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v10);
    v15 = type metadata accessor for CryptoError(0);
    v16 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v15, v16, 0, 0);
    v18 = v17;
    v19 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v6, 1, v15) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v18, enum case for CryptoError.unspecifiedError(_:), v15);
      v20 = sub_1007EB448((uint64_t)v6);
    }
    else
    {
      v20 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v18, v6, v15);
    }
    swift_willThrow(v20);
  }
  return sub_10001BC14(v23, v24);
}

uint64_t sub_1007E3F98()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x4B65746176697270;
  if (*v0 != 1)
    v1 = 0x6553646572616873;
  if (*v0)
    return v1;
  else
    return 0x654B63696C627570;
}

uint64_t sub_1007E4004@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1007EA518(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1007E4028(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007E41FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1007E4050(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1007E41FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RootKey.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  __int128 v18;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101109AB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1007E41FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for RootKey.CodingKeys, &type metadata for RootKey.CodingKeys, v11, v9, v10);
  v18 = *v3;
  v17 = 0;
  v12 = sub_1002FD29C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PublicKey, v12);
  if (!v2)
  {
    v18 = v3[1];
    v17 = 1;
    v13 = sub_100068134();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for PrivateKey, v13);
    v18 = v3[2];
    v17 = 2;
    v14 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v5, &type metadata for SharedSecretKey, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1007E41FC()
{
  unint64_t result;

  result = qword_101109AB8;
  if (!qword_101109AB8)
  {
    result = swift_getWitnessTable("M6$", &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109AB8);
  }
  return result;
}

double RootKey.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1007EA69C(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1007E4280(_QWORD *a1)
{
  return RootKey.encode(to:)(a1);
}

uint64_t sub_1007E4294(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4, uint64_t a5, int a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v11 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    result = CCCKGOwnerGenerateShare(*a4, a5, 32, a1, a6);
    *a3 = result;
    if (!(_DWORD)result)
      return result;
    v15 = static os_log_type_t.error.getter(result);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v16 = qword_1011B77E0;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    v19 = *a3;
    *(_QWORD *)(v18 + 56) = &type metadata for Int32;
    *(_QWORD *)(v18 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v18 + 32) = v19;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "CCCKGOwnerGenerateShare: Error generating share from owner device. Status: %d.", v29);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(*a3);
    v20 = type metadata accessor for CryptoError(0);
    v21 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v20, v21, 0, 0);
    v23 = v22;
    v24 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v13, 1, v20) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v24 + 104))(v23, enum case for CryptoError.unspecifiedError(_:), v20);
      v25 = sub_1007EB448((uint64_t)v13);
    }
    else
    {
      v25 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v23, v13, v20);
    }
  }
  else
  {
    v26 = type metadata accessor for CryptoError(0);
    v27 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v26, v27, 0, 0);
    v25 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for CryptoError.memoryFailure(_:), v26);
  }
  return swift_willThrow(v25);
}

uint64_t sub_1007E4504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1007E54F8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1007E4520, a4);
}

uint64_t sub_1007E4520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t PublicKeyFromPrivateKey;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;

  v13 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v29 = type metadata accessor for CryptoError(0);
    v30 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v29, v30, 0, 0);
    v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for CryptoError.memoryFailure(_:), v29);
    return swift_willThrow(v32);
  }
  v55 = 0;
  PublicKeyFromPrivateKey = CCCKGOwnerFinish(*(_QWORD *)(a2 + 16), a3, a4, a1, a5, &v55);
  if ((_DWORD)PublicKeyFromPrivateKey)
  {
    v17 = PublicKeyFromPrivateKey;
    v18 = (int)PublicKeyFromPrivateKey;
    v19 = static os_log_type_t.error.getter(PublicKeyFromPrivateKey);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v20 = qword_1011B77E0;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v22 + 56) = &type metadata for Int32;
    *(_QWORD *)(v22 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v22 + 32) = v17;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "CCCKGOwnerFinish: Error generating share from owner device. Status: %d", v53);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v18);
    v23 = type metadata accessor for CryptoError(0);
    v24 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v23, v24, 0, 0);
    v26 = v25;
    v27 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v15, 1, v23) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v26, enum case for CryptoError.unspecifiedError(_:), v23);
      v28 = sub_1007EB448((uint64_t)v15);
    }
    else
    {
      v28 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v15, v23);
    }
  }
  else
  {
    v34 = v55;
    if (v55)
    {
      PublicKeyFromPrivateKey = CCECCryptorGetPublicKeyFromPrivateKey(v55);
      if (PublicKeyFromPrivateKey)
      {
        v35 = PublicKeyFromPrivateKey;
        v36 = sub_1007E3D28(v34, 1);
        if (!v6)
        {
          v38 = v36;
          v39 = v37;
          v40 = sub_1007E3D28(v35, 0);
          v42 = v41;
          sub_10001BBBC(v38, v39);
          v47 = sub_1002FB3AC(v38, v39);
          v54 = v48;
          v49 = sub_1002FB6C8(v40, v42);
          v51 = v50;
          sub_10001BC14(v38, v39);
          v52 = v54;
          *a6 = v47;
          a6[1] = v52;
          a6[2] = v49;
          a6[3] = v51;
        }
        CCECCryptorRelease(v35);
        result = v34;
        return CCECCryptorRelease(result);
      }
    }
    v43 = static os_log_type_t.error.getter(PublicKeyFromPrivateKey);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, qword_1011B77E0, "CCCKGOwnerFinish: Private key not available", 43, 2, _swiftEmptyArrayStorage);
    v44 = type metadata accessor for CryptoError(0);
    v45 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v44, v45, 0, 0);
    v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v46, enum case for CryptoError.invalidKey(_:), v44);
  }
  swift_willThrow(v28);
  result = v55;
  if (v55)
    return CCECCryptorRelease(result);
  return result;
}

uint64_t sub_1007E49A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _DWORD v21[4];
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v1 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v1);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = 0;
  v4 = CCCKGContributorCreate(224, 10, &v24);
  v5 = v4;
  v21[3] = v4;
  if ((_DWORD)v4 || (v17 = v24) == 0)
  {
    v6 = static os_log_type_t.error.getter(v4);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v7 = qword_1011B77E0;
    v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v9 + 56) = &type metadata for Int32;
    *(_QWORD *)(v9 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v9 + 32) = v5;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "CCCKGOwnerCreate: Error creating owner for collaborative key generation. Status: %d.", v21[0]);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v5);
    v10 = type metadata accessor for CryptoError(0);
    v11 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v10, v11, 0, 0);
    v13 = v12;
    v14 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v3, 1, v10) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v14 + 104))(v13, enum case for CryptoError.unspecifiedError(_:), v10);
      v15 = sub_1007EB448((uint64_t)v3);
    }
    else
    {
      v15 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v3, v10);
    }
    return swift_willThrow(v15);
  }
  else
  {
    v18 = type metadata accessor for CollaborativeKeyGen.v1.ContributorContext();
    *(_QWORD *)(swift_allocObject(v18, 24, 7) + 16) = v17;
    v19 = CCCKGGetCommitmentSize(224, 10);
    v22 = sub_10060C584(v19);
    v23 = v20;
    swift_retain();
    sub_1007E85A4((uint64_t)&v22);
    result = v22;
    if (v0)
    {
      sub_10001BC14(v22, v23);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1007E4C40(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v9 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    result = CCCKGContributorCommit(*(_QWORD *)(a4 + 16), a1, a5);
    *a3 = result;
    if (!(_DWORD)result)
      return result;
    v13 = static os_log_type_t.error.getter(result);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v14 = qword_1011B77E0;
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    v17 = *a3;
    *(_QWORD *)(v16 + 56) = &type metadata for Int32;
    *(_QWORD *)(v16 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v16 + 32) = v17;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CCCKGContributorCommit: Error generating contributon commmit. Status: %d.", v27);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(*a3);
    v18 = type metadata accessor for CryptoError(0);
    v19 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v18, v19, 0, 0);
    v21 = v20;
    v22 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v11, 1, v18) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v21, enum case for CryptoError.unspecifiedError(_:), v18);
      v23 = sub_1007EB448((uint64_t)v11);
    }
    else
    {
      v23 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v21, v11, v18);
    }
  }
  else
  {
    v24 = type metadata accessor for CryptoError(0);
    v25 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v24, v25, 0, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, enum case for CryptoError.memoryFailure(_:), v24);
  }
  return swift_willThrow(v23);
}

uint64_t sub_1007E4E9C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  if (a1)
  {
    CCCKGGetShareSize(224, 10);
    v4 = CCCKGGetOpeningSize(224, 10);
    v12 = sub_10060C584(v4);
    v13 = v5;
    swift_retain();
    sub_100C9E380((uint64_t)&v12);
    result = v12;
    v7 = v13;
    if (v2)
    {
      return sub_10001BC14(v12, v13);
    }
    else
    {
      *a2 = v12;
      a2[1] = v7;
    }
  }
  else
  {
    v8 = type metadata accessor for CryptoError(0);
    v9 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v8, v9, 0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for CryptoError.memoryFailure(_:), v8);
    return swift_willThrow(v11);
  }
  return result;
}

uint64_t sub_1007E4FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v13 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v32 = 0;
    result = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t *))CCCKGContributorFinish)(*(_QWORD *)(a3 + 16), a4, a5, a6, a7, a1, 32, &v32);
    if (!(_DWORD)result)
      return result;
    v17 = result;
    v18 = (int)result;
    v19 = static os_log_type_t.error.getter(result);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v20 = qword_1011B77E0;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v22 + 56) = &type metadata for Int32;
    *(_QWORD *)(v22 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v22 + 32) = v17;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "CCCKGContributorFinish: Error finishing contribution. Status: %d.", v32);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v18);
    v23 = type metadata accessor for CryptoError(0);
    v24 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v23, v24, 0, 0);
    v26 = v25;
    v27 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v15, 1, v23) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v27 + 104))(v26, enum case for CryptoError.unspecifiedError(_:), v23);
      v28 = sub_1007EB448((uint64_t)v15);
    }
    else
    {
      v28 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v27 + 32))(v26, v15, v23);
    }
  }
  else
  {
    v29 = type metadata accessor for CryptoError(0);
    v30 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v29, v30, 0, 0);
    v28 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for CryptoError.memoryFailure(_:), v29);
  }
  return swift_willThrow(v28);
}

uint64_t sub_1007E5268(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4, uint64_t a5, int a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v13 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    result = CCCKG2OwnerGenerateShare(*a4, a5, a6, a1, a7);
    *a3 = result;
    if (!(_DWORD)result)
      return result;
    v17 = static os_log_type_t.error.getter(result);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v18 = qword_1011B77E0;
    v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v20 = swift_allocObject(v19, 72, 7);
    *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
    v21 = *a3;
    *(_QWORD *)(v20 + 56) = &type metadata for Int32;
    *(_QWORD *)(v20 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v20 + 32) = v21;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "CCCKG2OwnerGenerateShare: Error generating share from owner device. Status: %d.", v31);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(*a3);
    v22 = type metadata accessor for CryptoError(0);
    v23 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v22, v23, 0, 0);
    v25 = v24;
    v26 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v15, 1, v22) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, enum case for CryptoError.unspecifiedError(_:), v22);
      v27 = sub_1007EB448((uint64_t)v15);
    }
    else
    {
      v27 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v15, v22);
    }
  }
  else
  {
    v28 = type metadata accessor for CryptoError(0);
    v29 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v28, v29, 0, 0);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for CryptoError.memoryFailure(_:), v28);
  }
  return swift_willThrow(v27);
}

uint64_t sub_1007E54DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return sub_1007E54F8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1007E5738, a4);
}

uint64_t sub_1007E54F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1)
  {
    v11 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v26 = 0x4000000000;
    v27 = __DataStorage.init(length:)(64);
    swift_retain();
    sub_1007E8A98((int *)&v26, a2, a1, a3, 64, a4);
    if (v5)
    {
      return swift_release(v27);
    }
    else
    {
      v18 = v26;
      v17 = v27;
      v19 = v27 | 0x4000000000000000;
      v20 = v28;
      v22 = v29;
      v21 = v30;
      sub_10001BBBC(v26, v27 | 0x4000000000000000);
      sub_1002F7C0C(32, v18, v19);
      sub_1002F702C(v26, v27);
      v31 = *((_QWORD *)&v28 + 1);
      v25 = v28;
      sub_10001BBBC(v18, v19);
      sub_100626E70(32, v18, v19);
      sub_1002F702C(v26, v27);
      result = swift_release(v17);
      v23 = v28;
      *(_OWORD *)a5 = v20;
      *(_QWORD *)(a5 + 16) = v22;
      *(_QWORD *)(a5 + 24) = v21;
      v24 = v31;
      *(_QWORD *)(a5 + 32) = v25;
      *(_QWORD *)(a5 + 40) = v24;
      *(_OWORD *)(a5 + 48) = v23;
      *(_OWORD *)(a5 + 64) = xmmword_100E22B20;
    }
  }
  else
  {
    v13 = type metadata accessor for CryptoError(0);
    v14 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v13, v14, 0, 0);
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, enum case for CryptoError.memoryFailure(_:), v13);
    return swift_willThrow(v16);
  }
  return result;
}

uint64_t sub_1007E5738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t PublicKeyFromPrivateKey;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;

  v13 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v28 = type metadata accessor for CryptoError(0);
    v29 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v28, v29, 0, 0);
    v31 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for CryptoError.memoryFailure(_:), v28);
    return swift_willThrow(v31);
  }
  v54 = 0;
  PublicKeyFromPrivateKey = CCCKG2OwnerFinish(*(_QWORD *)(a2 + 16), a3, a4, a1, a5, &v54);
  if ((_DWORD)PublicKeyFromPrivateKey)
  {
    v17 = (int)PublicKeyFromPrivateKey;
    v18 = static os_log_type_t.error.getter(PublicKeyFromPrivateKey);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v19 = qword_1011B77E0;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v21 + 56) = &type metadata for Int;
    *(_QWORD *)(v21 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v21 + 32) = v17;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "CCCKG2OwnerFinish: Error generating share from owner device. Status: %d", v52);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v17);
    v22 = type metadata accessor for CryptoError(0);
    v23 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v22, v23, 0, 0);
    v25 = v24;
    v26 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v15, 1, v22) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v26 + 104))(v25, enum case for CryptoError.unspecifiedError(_:), v22);
      v27 = sub_1007EB448((uint64_t)v15);
    }
    else
    {
      v27 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v15, v22);
    }
  }
  else
  {
    v33 = v54;
    if (v54)
    {
      PublicKeyFromPrivateKey = CCECCryptorGetPublicKeyFromPrivateKey(v54);
      if (PublicKeyFromPrivateKey)
      {
        v34 = PublicKeyFromPrivateKey;
        v35 = sub_1007E3D28(v33, 1);
        if (!v6)
        {
          v37 = v35;
          v38 = v36;
          v39 = sub_1007E3D28(v34, 0);
          v41 = v40;
          sub_10001BBBC(v37, v38);
          v46 = sub_1002FB3AC(v37, v38);
          v53 = v47;
          v48 = sub_1002FB6C8(v39, v41);
          v50 = v49;
          sub_10001BC14(v37, v38);
          v51 = v53;
          *a6 = v46;
          a6[1] = v51;
          a6[2] = v48;
          a6[3] = v50;
        }
        CCECCryptorRelease(v34);
        result = v33;
        return CCECCryptorRelease(result);
      }
    }
    v42 = static os_log_type_t.error.getter(PublicKeyFromPrivateKey);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, qword_1011B77E0, "CCCKG2OwnerFinish: Private key not available", 44, 2, _swiftEmptyArrayStorage);
    v43 = type metadata accessor for CryptoError(0);
    v44 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v43, v44, 0, 0);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, enum case for CryptoError.invalidKey(_:), v43);
  }
  swift_willThrow(v27);
  result = v54;
  if (v54)
    return CCECCryptorRelease(result);
  return result;
}

uint64_t sub_1007E5BBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v23 = *(_OWORD *)(a1 + 32);
  v6 = *a2;
  v7 = a2[1];
  *(_OWORD *)a2 = v23;
  sub_100059DE8((uint64_t)&v23);
  sub_10001BC14(v6, v7);
  v8 = String.utf8Data.getter(0x64656D7265746E69, 0xEC00000065746169);
  v10 = v9;
  v11 = v23;
  sub_100059DE8((uint64_t)&v23);
  sub_1007E6A88(v11, *((uint64_t *)&v11 + 1), v8, v10, 32);
  if (v3)
  {
    sub_10001BC14(v8, v10);
    return sub_1000ADA04((uint64_t)&v23);
  }
  else
  {
    v15 = v12;
    v16 = v13;
    sub_1000ADA04((uint64_t)&v23);
    sub_1002F702C(v15, v16);
    sub_10001BC14(v8, v10);
    v17 = *(_QWORD *)(a1 + 16);
    v18 = *(_QWORD *)(a1 + 24);
    v20 = *(_QWORD *)a1;
    v19 = *(_QWORD *)(a1 + 8);
    sub_10001BBBC(v17, v18);
    result = sub_10001BD08(v20, v19);
    *a3 = v21;
    a3[1] = v22;
    a3[2] = v17;
    a3[3] = v18;
    a3[4] = v20;
    a3[5] = v19;
  }
  return result;
}

void sub_1007E5D00(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __CFString *v3;
  const __CFString *v4;
  char isUniquelyReferenced_nonNull_native;
  __CFString *v6;
  const __CFString *v7;
  char v8;
  const __CFData *isa;
  const __CFDictionary *v10;
  __SecKey *v11;
  uint64_t v12;
  const __CFData *v13;
  CFDataRef EncryptedData;
  uint64_t v15;
  CFErrorRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  CFErrorRef *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFData *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v46;
  CFErrorRef v47[4];
  CFErrorRef error[3];
  uint64_t v49;

  type metadata accessor for CFString(0);
  v2 = v1;
  v49 = v1;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_10010F90C(error, v47);
  v3 = (id)kSecAttrKeyType;
  v4 = (id)kSecAttrKeyTypeEC;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  sub_10010AA84(v47, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  v49 = v2;
  error[0] = (CFErrorRef)kSecAttrKeyClassPublic;
  sub_10010F90C(error, v47);
  v6 = (id)kSecAttrKeyClass;
  v7 = (id)kSecAttrKeyClassPublic;
  v8 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  v46 = &_swiftEmptyDictionarySingleton;
  sub_10010AA84(v47, v6, v8);

  swift_bridgeObjectRelease();
  error[0] = 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000F4A0(0, &qword_1010F7800, NSObject_ptr);
  sub_100301D88();
  v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = SecKeyCreateWithData(isa, v10, error);

  if (v11)
  {
    v47[0] = 0;
    v13 = Data._bridgeToObjectiveC()().super.isa;
    EncryptedData = SecKeyCreateEncryptedData(v11, kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v13, v47);

    v16 = v47[0];
    if (v47[0])
    {
      type metadata accessor for CFError(0);
      v18 = v17;
      v19 = sub_100006204(&qword_101109D68, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
      v20 = swift_allocError(v18, v19, 0, 0);
      *v21 = v16;
      v22 = static os_log_type_t.error.getter(v20);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      v23 = qword_1011B77E0;
      v24 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v25 = swift_allocObject(v24, 72, 7);
      *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
      v46 = (void *)v20;
      swift_errorRetain(v20);
      v26 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v27 = String.init<A>(describing:)(&v46, v26);
      v29 = v28;
      *(_QWORD *)(v25 + 56) = &type metadata for String;
      *(_QWORD *)(v25 + 64) = sub_10001AA00();
      *(_QWORD *)(v25 + 32) = v27;
      *(_QWORD *)(v25 + 40) = v29;
      os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "CryptoUtil: Encryption: Could not encrypt the data. Error - %@", 62, 2, v25);
      v30 = swift_bridgeObjectRelease();
      swift_willThrow(v30);

LABEL_6:
      return;
    }
    if (!EncryptedData)
    {
      v40 = static os_log_type_t.error.getter(v15);
      if (qword_1010E9F78 != -1)
        swift_once(&qword_1010E9F78, sub_1007E28B4);
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_1011B77E0, "CryptoUtil: Encryption did not fail, but encrypted data is nil.", 63, 2, _swiftEmptyArrayStorage);
      v41 = type metadata accessor for CryptoError(0);
      v42 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
      swift_allocError(v41, v42, 0, 0);
      v44 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v41 - 8) + 104))(v43, enum case for CryptoError.encodeError(_:), v41);
      swift_willThrow(v44);
      goto LABEL_6;
    }
    v36 = EncryptedData;
    v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(EncryptedData);
    v39 = v38;

    *a1 = v37;
    a1[1] = v39;
  }
  else
  {
    v31 = static os_log_type_t.error.getter(v12);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B77E0, "CryptoUtil: SecKeyCreateWithData could not be created for the public key", 72, 2, _swiftEmptyArrayStorage);
    v32 = type metadata accessor for CryptoError(0);
    v33 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v32, v33, 0, 0);
    v35 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, enum case for CryptoError.encodeError(_:), v32);
    swift_willThrow(v35);
  }
}

void sub_1007E6220(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __CFString *v3;
  const __CFString *v4;
  char isUniquelyReferenced_nonNull_native;
  __CFString *v6;
  const __CFString *v7;
  char v8;
  const __CFData *isa;
  const __CFDictionary *v10;
  SecKeyRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFData *v25;
  CFDataRef DecryptedData;
  uint64_t v27;
  CFErrorRef v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFErrorRef *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFData *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  CFErrorRef v54[4];
  CFErrorRef error[3];
  uint64_t v56;

  type metadata accessor for CFString(0);
  v2 = v1;
  v56 = v1;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_10010F90C(error, v54);
  v3 = (id)kSecAttrKeyType;
  v4 = (id)kSecAttrKeyTypeEC;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_10010AA84(v54, v3, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  v56 = v2;
  error[0] = (CFErrorRef)kSecAttrKeyClassPrivate;
  sub_10010F90C(error, v54);
  v6 = (id)kSecAttrKeyClass;
  v7 = (id)kSecAttrKeyClassPrivate;
  v8 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v53 = _swiftEmptyDictionarySingleton;
  sub_10010AA84(v54, v6, v8);

  swift_bridgeObjectRelease();
  error[0] = 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000F4A0(0, &qword_1010F7800, NSObject_ptr);
  sub_100301D88();
  v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = SecKeyCreateWithData(isa, v10, error);

  if (!v11)
    goto LABEL_4;
  if (error[0])
  {

LABEL_4:
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    v54[0] = error[0];
    v14 = sub_10001A9A8(&qword_1010F74F0);
    v15 = String.init<A>(describing:)(v54, v14);
    v17 = v16;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_10001AA00();
    *(_QWORD *)(v13 + 32) = v15;
    *(_QWORD *)(v13 + 40) = v17;
    v18 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v19 = (void *)static OS_os_log.default.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:type:_:)("CryptoUtil: decryption: could not create SecKey for private key: %@", 67, 2, &_mh_execute_header, v19, v20, v13);
    swift_bridgeObjectRelease();

    v21 = type metadata accessor for CryptoError(0);
    v22 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v21, v22, 0, 0);
    v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for CryptoError.decodeError(_:), v21);
    swift_willThrow(v24);
    return;
  }
  v54[0] = 0;
  v25 = Data._bridgeToObjectiveC()().super.isa;
  DecryptedData = SecKeyCreateDecryptedData(v11, kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v25, v54);

  v28 = v54[0];
  if (v54[0])
  {
    type metadata accessor for CFError(0);
    v30 = v29;
    v31 = sub_100006204(&qword_101109D68, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
    v32 = swift_allocError(v30, v31, 0, 0);
    *v33 = v28;
    v34 = static os_log_type_t.error.getter(v32);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v35 = qword_1011B77E0;
    v36 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v37 = swift_allocObject(v36, 72, 7);
    *(_OWORD *)(v37 + 16) = xmmword_100E22B00;
    v53 = (_QWORD *)v32;
    swift_errorRetain(v32);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v39 = String.init<A>(describing:)(&v53, v38);
    v41 = v40;
    *(_QWORD *)(v37 + 56) = &type metadata for String;
    *(_QWORD *)(v37 + 64) = sub_10001AA00();
    *(_QWORD *)(v37 + 32) = v39;
    *(_QWORD *)(v37 + 40) = v41;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "CryptoUtil: Decryption: Could not decrypt the data. Error - %@", 62, 2, v37);
    v42 = swift_bridgeObjectRelease();
    swift_willThrow(v42);

  }
  else if (DecryptedData)
  {
    v43 = DecryptedData;
    v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(DecryptedData);
    v46 = v45;

    *a1 = v44;
    a1[1] = v46;
  }
  else
  {
    v47 = static os_log_type_t.error.getter(v27);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, qword_1011B77E0, "CryptoUtil: Decryption did not fail, but decrypted data is nil.", 63, 2, _swiftEmptyArrayStorage);
    v48 = type metadata accessor for CryptoError(0);
    v49 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v48, v49, 0, 0);
    v51 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v48 - 8) + 104))(v50, enum case for CryptoError.decodeError(_:), v48);
    swift_willThrow(v51);

  }
}

void sub_1007E67B4(__SecKey *a1@<X0>, uint64_t *a2@<X8>)
{
  const __CFData *isa;
  CFDataRef v5;
  uint64_t v6;
  CFErrorRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFErrorRef *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const __CFData *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFErrorRef error;

  error = 0;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v5 = SecKeyCreateDecryptedData(a1, kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, isa, &error);

  v7 = error;
  if (error)
  {
    type metadata accessor for CFError(0);
    v9 = v8;
    v10 = sub_100006204(&qword_101109D68, (uint64_t (*)(uint64_t))type metadata accessor for CFError, (uint64_t)&protocol conformance descriptor for CFErrorRef);
    v11 = swift_allocError(v9, v10, 0, 0);
    *v12 = v7;
    v13 = static os_log_type_t.error.getter(v11);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v14 = qword_1011B77E0;
    v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v16 = swift_allocObject(v15, 72, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
    v31 = v11;
    swift_errorRetain(v11);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v18 = String.init<A>(describing:)(&v31, v17);
    v20 = v19;
    *(_QWORD *)(v16 + 56) = &type metadata for String;
    *(_QWORD *)(v16 + 64) = sub_10001AA00();
    *(_QWORD *)(v16 + 32) = v18;
    *(_QWORD *)(v16 + 40) = v20;
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "CryptoUtil: Decryption: Could not decrypt the data. Error - %@", 62, 2, v16);
    v21 = swift_bridgeObjectRelease();
    swift_willThrow(v21);

  }
  else if (v5)
  {
    v22 = v5;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v25 = v24;

    *a2 = v23;
    a2[1] = v25;
  }
  else
  {
    v26 = static os_log_type_t.error.getter(v6);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B77E0, "CryptoUtil: Decryption did not fail, but decrypted data is nil.", 63, 2, _swiftEmptyArrayStorage);
    v27 = type metadata accessor for CryptoError(0);
    v28 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v27, v28, 0, 0);
    v30 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, enum case for CryptoError.decodeError(_:), v27);
    swift_willThrow(v30);
  }
}

void sub_1007E6A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;

  v7 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v7);
  sub_10060C584(a5);
  __asm { BR              X10 }
}

uint64_t sub_1007E6B30()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  *(_QWORD *)(v6 - 120) = v3;
  *(_WORD *)(v6 - 112) = v2;
  *(_BYTE *)(v6 - 110) = BYTE2(v2);
  *(_BYTE *)(v6 - 109) = BYTE3(v2);
  *(_BYTE *)(v6 - 108) = BYTE4(v2);
  *(_BYTE *)(v6 - 107) = BYTE5(v2);
  sub_10001BBBC(v1, v0);
  sub_1007E76CC(v6 - 120, v6 - 120 + BYTE6(v2), v3, v2);
  sub_10001BC14(v3, v2);
  v7 = sub_10001BC14(v1, v0);
  if (!v4)
  {
    v9 = *(_DWORD *)(v6 - 124);
    if (!v9)
      return *(_QWORD *)(v6 - 104);
    v10 = static os_log_type_t.error.getter(v7);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v11 = qword_1011B77E0;
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v13 + 56) = &type metadata for Int32;
    *(_QWORD *)(v13 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v13 + 32) = v9;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Error running CCDeriveKey. Code: %d.", v20);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v9);
    v14 = type metadata accessor for CryptoError(0);
    v15 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v14, v15, 0, 0);
    v17 = v16;
    v18 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v5, 1, v14) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v17, enum case for CryptoError.unspecifiedError(_:), v14);
      v19 = sub_1007EB448(v5);
    }
    else
    {
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v5, v14);
    }
    swift_willThrow(v19);
  }
  return sub_10001BC14(*(_QWORD *)(v6 - 104), *(_QWORD *)(v6 - 96));
}

uint64_t sub_1007E6F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v16;
  uint64_t v17;

  sub_1007E7118(a1, a2);
  if (v2)
  {
    v5 = static os_log_type_t.error.getter(v3);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v16 = qword_1011B77E0;
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
    v17 = v2;
    swift_errorRetain(v2);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(&v17, v8);
    v11 = v10;
    *(_QWORD *)(v7 + 56) = &type metadata for String;
    *(_QWORD *)(v7 + 64) = sub_10001AA00();
    *(_QWORD *)(v7 + 32) = v9;
    *(_QWORD *)(v7 + 40) = v11;
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v16, "Error deriving advertisementKey: %@", 35, 2, v7);
    swift_bridgeObjectRelease();
    v12 = sub_1000D95A8();
    v13 = swift_allocError(&type metadata for CryptoTokenError, v12, 0, 0);
    *v14 = 0;
    swift_willThrow(v13);
    swift_errorRelease(v2);
  }
  else
  {
    v4 = v3;
    v16 = sub_1007E3D28(v3, 0);
    CCECCryptorRelease(v4);
  }
  return v16;
}

void sub_1007E7118(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

uint64_t sub_1007E71B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  *(_QWORD *)(v5 - 112) = v1;
  *(_WORD *)(v5 - 104) = v4;
  *(_BYTE *)(v5 - 102) = BYTE2(v4);
  *(_BYTE *)(v5 - 101) = BYTE3(v4);
  *(_BYTE *)(v5 - 100) = BYTE4(v4);
  *(_BYTE *)(v5 - 99) = BYTE5(v4);
  v12 = ((uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))CCECCryptorImportKey)(v3, v5 - 112, BYTE6(v4), v2, v5 - 96);
  v13 = v12;
  if ((_DWORD)v12)
  {
    v14 = static os_log_type_t.error.getter(v12);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v15 = qword_1011B77E0;
    v16 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v17 = swift_allocObject(v16, 72, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v17 + 56) = &type metadata for Int32;
    *(_QWORD *)(v17 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v17 + 32) = v13;
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Error running CCECCryptorImportKey. Code: %d.", v23);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v13);
    v18 = type metadata accessor for CryptoError(0);
    v19 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v18, v19, 0, 0);
    v21 = v20;
    v22 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v0, 1, v18) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v21, enum case for CryptoError.unspecifiedError(_:), v18);
      v11 = sub_1007EB448(v0);
    }
    else
    {
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v0, v18);
    }
  }
  else
  {
    result = *(_QWORD *)(v5 - 96);
    if (result)
      return result;
    v7 = static os_log_type_t.error.getter(0);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B77E0, "CryptoUtil: diversifyKey: CryptorRef was not populated as expected.", 67, 2, _swiftEmptyArrayStorage);
    v8 = type metadata accessor for CryptoError(0);
    v9 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v8, v9, 0, 0);
    v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v10, enum case for CryptoError.unspecifiedError(_:), v8);
  }
  return swift_willThrow(v11);
}

uint64_t sub_1007E76CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a1)
    __asm { BR              X11 }
  v4 = type metadata accessor for CryptoError(0);
  v5 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
  swift_allocError(v4, v5, 0, 0);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v6, enum case for CryptoError.memoryFailure(_:), v4);
  return swift_willThrow(v7);
}

void sub_1007E79D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v6);
  Data.append(_:)(a3, a4);
  JUMPOUT(0x1007E7BE0);
}

uint64_t sub_1007E7A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 - 128) = v4;
  *(_WORD *)(v6 - 120) = v3;
  *(_BYTE *)(v6 - 118) = BYTE2(v3);
  *(_BYTE *)(v6 - 117) = BYTE3(v3);
  *(_BYTE *)(v6 - 116) = BYTE4(v3);
  *(_BYTE *)(v6 - 115) = BYTE5(v3);
  *(_BYTE *)(v6 - 114) = BYTE6(v3);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))((char *)&loc_1007E7B10 + dword_1007E80E4[v5 >> 62]))(a1, a2, a3, 0);
}

uint64_t sub_1007E7B20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;

  v5 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))CCECCryptorTwinDiversifyKey)(v1, v3, v4 - 128, BYTE6(v2), v4 - 96);
  v6 = v5;
  v7 = *(unsigned __int8 *)(v4 - 114);
  v8 = *(_QWORD *)(v4 - 128);
  v9 = *(unsigned int *)(v4 - 120) | ((unint64_t)*(unsigned __int8 *)(v4 - 116) << 32) | ((unint64_t)*(unsigned __int8 *)(v4 - 115) << 40);
  *(_QWORD *)(v4 - 112) = v8;
  *(_QWORD *)(v4 - 104) = v9 | (v7 << 48);
  if ((_DWORD)v5)
  {
    v10 = static os_log_type_t.error.getter(v5);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v11 = qword_1011B77E0;
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v13 + 56) = &type metadata for Int32;
    *(_QWORD *)(v13 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v13 + 32) = v6;
    os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "Error running CCECCryptorTwinDiversifyKey. Code: %d.", v24);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v6);
    v14 = type metadata accessor for CryptoError(0);
    v15 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v14, v15, 0, 0);
    v17 = v16;
    v18 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v0, 1, v14) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v18 + 104))(v17, enum case for CryptoError.unspecifiedError(_:), v14);
      v19 = sub_1007EB448(v0);
    }
    else
    {
      v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v17, v0, v14);
    }
LABEL_12:
    swift_willThrow(v19);
    sub_10001BC14(*(_QWORD *)(v4 - 112), *(_QWORD *)(v4 - 104));
    return v0;
  }
  v0 = *(_QWORD *)(v4 - 96);
  if (!v0)
  {
    v20 = static os_log_type_t.error.getter(v5);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, qword_1011B77E0, "CryptoUtil: diversifyKey: CryptorRef was not populated as expected.", 67, 2, _swiftEmptyArrayStorage);
    v0 = type metadata accessor for CryptoError(0);
    v21 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v0, v21, 0, 0);
    v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v22, enum case for CryptoError.unspecifiedError(_:), v0);
    goto LABEL_12;
  }
  sub_10001BC14(v8, v9 | (v7 << 48));
  return v0;
}

void sub_1007E80F4(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1007E8160@<X0>(uint64_t a1@<X4>, int a2@<W5>, int a3@<W6>, uint64_t a4@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t result;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;

  v10 = v4;
  LOWORD(v11) = a4;
  BYTE2(v11) = BYTE2(a4);
  HIBYTE(v11) = BYTE3(a4);
  v12 = BYTE4(a4);
  v13 = BYTE5(a4);
  v14 = BYTE6(a4);
  result = sub_1007E5268((uint64_t)&v10, (uint64_t)&v10 + BYTE6(a4), v7, v6, a1, a2, a3);
  v9 = v11 | ((unint64_t)v12 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v14 << 48);
  *v5 = v10;
  v5[1] = v9;
  return result;
}

void sub_1007E8350(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1007E83B8@<X0>(uint64_t a1@<X4>, int a2@<W5>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;

  v9 = v3;
  LOWORD(v10) = a3;
  BYTE2(v10) = BYTE2(a3);
  HIBYTE(v10) = BYTE3(a3);
  v11 = BYTE4(a3);
  v12 = BYTE5(a3);
  v13 = BYTE6(a3);
  result = sub_1007E4294((uint64_t)&v9, (uint64_t)&v9 + BYTE6(a3), v6, v5, a1, a2);
  v8 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *v4 = v9;
  v4[1] = v8;
  return result;
}

void sub_1007E85A4(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1007E8608@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  unsigned __int8 v16;

  v12 = v1;
  LOWORD(v13) = a1;
  BYTE2(v13) = BYTE2(a1);
  HIBYTE(v13) = BYTE3(a1);
  v14 = BYTE4(a1);
  v15 = BYTE5(a1);
  v16 = BYTE6(a1);
  sub_1007E4C40((uint64_t)&v12, (uint64_t)&v12 + BYTE6(a1), v5, v2, v3);
  v6 = v12;
  v7 = v13;
  v8 = v14;
  v9 = v15;
  v10 = v16;
  result = swift_release();
  *v4 = v6;
  v4[1] = v7 | (v8 << 32) | (v9 << 40) | (v10 << 48);
  return result;
}

void sub_1007E8830(int *a1, int *a2, _QWORD *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  _QWORD *v25;

  Data.InlineSlice.ensureUniqueReference()();
  v14 = *a1;
  v15 = a1[1];
  if ((int)v15 < (int)v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  v24 = a2;
  v25 = a3;
  v16 = __DataStorage._bytes.getter(v12, v13);
  if (!v16)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v18 = v16;
  v19 = __DataStorage._offset.getter(v16, v17);
  v20 = v14 - v19;
  if (__OFSUB__(v14, v19))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v21 = v15 - v14;
  v22 = __DataStorage._length.getter();
  if (v22 >= v21)
    v23 = v21;
  else
    v23 = v22;
  sub_1007E5268(v18 + v20, v18 + v20 + v23, v24, v25, a4, a5, a6);
}

void sub_1007E88FC(int *a1, int *a2, _QWORD *a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;

  Data.InlineSlice.ensureUniqueReference()();
  v13 = *a1;
  v12 = a1[1];
  if ((int)v12 < (int)v13)
  {
    __break(1u);
    goto LABEL_9;
  }
  v22 = a2;
  v14 = __DataStorage._bytes.getter(v10, v11);
  if (!v14)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v16 = v14;
  v17 = __DataStorage._offset.getter(v14, v15);
  v18 = v13 - v17;
  if (__OFSUB__(v13, v17))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v19 = v12 - v13;
  v20 = __DataStorage._length.getter();
  if (v20 >= v19)
    v21 = v19;
  else
    v21 = v20;
  sub_1007E4294(v16 + v18, v16 + v18 + v21, v22, a3, a4, a5);
}

void sub_1007E89CC(int *a1, int *a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  Data.InlineSlice.ensureUniqueReference()();
  v10 = *a1;
  v11 = a1[1];
  if ((int)v11 < (int)v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  v12 = __DataStorage._bytes.getter(v8, v9);
  if (!v12)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v14 = v12;
  v15 = __DataStorage._offset.getter(v12, v13);
  v16 = v10 - v15;
  if (__OFSUB__(v10, v15))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v17 = v11 - v10;
  v18 = __DataStorage._length.getter();
  if (v18 >= v17)
    v19 = v17;
  else
    v19 = v18;
  sub_1007E4C40(v14 + v16, v14 + v16 + v19, a2, a3, a4);
  swift_release();
}

void sub_1007E8A98(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  Data.InlineSlice.ensureUniqueReference()();
  v12 = *a1;
  v13 = a1[1];
  if ((int)v13 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  v21 = a3;
  v22 = a6;
  v14 = __DataStorage._bytes.getter();
  if (!v14)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v15 = v14;
  v16 = __DataStorage._offset.getter();
  v17 = v12 - v16;
  if (__OFSUB__(v12, v16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v18 = v13 - v12;
  v19 = __DataStorage._length.getter();
  if (v19 >= v18)
    v20 = v18;
  else
    v20 = v19;
  v22(v15 + v17, v15 + v17 + v20, a2, v21, a4, a5);
  swift_release(a2);
}

uint64_t sub_1007E8B74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
      goto LABEL_7;
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_1007E54F8(v11, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1007E5738, a5);
    return swift_release(a3);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

BOOL sub_1007E8C34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  __int128 v23;
  __int128 v24;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15)
      goto LABEL_8;
LABEL_5:
    sub_10001BD08(*(_QWORD *)a1, v5);
    sub_10001BD08(v6, v7);
    sub_10001EF3C(v4, v5);
    v8 = v6;
    v9 = v7;
LABEL_6:
    sub_10001EF3C(v8, v9);
    return 0;
  }
  if (v7 >> 60 == 15)
    goto LABEL_5;
  sub_10001BD08(*(_QWORD *)a1, v5);
  sub_10001BD08(v6, v7);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v4, v5);
  v11 = v10;
  sub_10001EF3C(v6, v7);
  sub_10001EF3C(v4, v5);
  if ((v11 & 1) == 0)
    return 0;
LABEL_8:
  v12 = *(_OWORD *)(a1 + 16);
  v23 = *(_OWORD *)(a2 + 16);
  v24 = v12;
  v14 = *((_QWORD *)&v12 + 1);
  v13 = v12;
  sub_100059DE8((uint64_t)&v24);
  sub_100059DE8((uint64_t)&v23);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14);
  LOBYTE(v13) = v15;
  sub_1000ADA04((uint64_t)&v23);
  sub_1000ADA04((uint64_t)&v24);
  if ((v13 & 1) == 0)
    return 0;
  v17 = *(_QWORD *)(a1 + 32);
  v16 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 40);
  if (v16 >> 60 == 15)
  {
    if (v18 >> 60 == 15)
      return 1;
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    sub_10001BD08(v17, v16);
    sub_10001BD08(v19, v18);
    sub_10001EF3C(v17, v16);
    v8 = v19;
    v9 = v18;
    goto LABEL_6;
  }
  sub_10001BD08(v17, v16);
  sub_10001BD08(v19, v18);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v16);
  v21 = v20;
  sub_10001EF3C(v19, v18);
  sub_10001EF3C(v17, v16);
  return (v21 & 1) != 0;
}

void sub_1007E8E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(a1, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      __asm { BR              X10 }
    }
    __break(1u);
    JUMPOUT(0x1007E8F18);
  }
  __break(1u);
  JUMPOUT(0x1007E8F24);
}

void sub_1007E8F34(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1007E8FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;

  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))((char *)&loc_1007E9024
                                                                   + *((int *)qword_1007E9388 + (v3 >> 62))))(*v4, a2, a3, 0);
}

uint64_t sub_1007E9034(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  unsigned __int8 v13;

  v6 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t *, uint64_t))CCDeriveKey)(a1, 10, v1, BYTE6(v4), &v9, v3);
  ((void (*)(_QWORD))CCKDFParametersDestroy)(*v5);
  v7 = v10 | ((unint64_t)v11 << 32) | ((unint64_t)v12 << 40) | ((unint64_t)v13 << 48);
  *v2 = v9;
  v2[1] = v7;
  return v6;
}

uint64_t sub_1007E9398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v10 = __DataStorage._bytes.getter(a1, a2);
  if (!v10)
  {
    __DataStorage._length.getter();
    v14 = type metadata accessor for CryptoError(0);
    v15 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v14, v15, 0, 0);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, enum case for CryptoError.memoryFailure(_:), v14);
    swift_willThrow(v17);
    sub_10001BC14(a5, a6);
    return v14;
  }
  result = __DataStorage._offset.getter(v10, v11);
  if (!__OFSUB__(a1, result))
  {
    __DataStorage._length.getter();
    sub_10001BBBC(a5, a6);
    sub_1007E8F34(a3);
    v14 = v13;
    sub_10001BC14(a5, a6);
    sub_10001BC14(a5, a6);
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007E94E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  result = __DataStorage._bytes.getter(a1, a2);
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter(result, v10);
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  result = sub_1007E76CC(v11, v17, a4, a5);
  if (!v18)
    return v19;
  return result;
}

uint64_t sub_1007E95C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v3 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = 0;
  v59 = 0;
  v6 = CCECCryptorGeneratePair(224, &v59, &v58);
  if ((_DWORD)v6)
  {
    v7 = v6;
    v8 = (int)v6;
    v9 = static os_log_type_t.error.getter(v6);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    v10 = qword_1011B77E0;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v12 + 56) = &type metadata for Int32;
    *(_QWORD *)(v12 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v12 + 32) = v7;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Initial Pairing: CCECCryptorGeneratePair failed. Status: %d", v49);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v8);
    v13 = type metadata accessor for CryptoError(0);
    v14 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v13, v14, 0, 0);
    v16 = v15;
    v17 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v13) == 1)
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, enum case for CryptoError.unspecifiedError(_:), v13);
      v18 = sub_1007EB448((uint64_t)v5);
    }
    else
    {
      v18 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v16, v5, v13);
    }
    return swift_willThrow(v18);
  }
  v19 = v58;
  if (!v58)
  {
    v31 = static os_log_type_t.error.getter(v6);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, qword_1011B77E0, "Initial Pairing: Private key is not available.", 46, 2, _swiftEmptyArrayStorage);
    v32 = type metadata accessor for CryptoError(0);
    v33 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v32, v33, 0, 0);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v34, enum case for CryptoError.invalidKey(_:), v32);
    return swift_willThrow(v18);
  }
  v20 = sub_1007E3D28(v58, 1);
  if (!v1)
  {
    v22 = v20;
    v23 = v21;
    v24 = v59;
    if (v59)
    {
      v25 = sub_1007E3D28(v59, 0);
      v55 = v26;
      v27 = static Data.random(bytes:)(32);
      v29 = v28;
      sub_10001BBBC(v22, v23);
      v30 = sub_1002FB3AC(v22, v23);
      v53 = v27;
      v54 = v29;
      v51 = v30;
      v52 = v40;
      v41 = v55;
      sub_10001BBBC(v25, v55);
      v42 = sub_1002FB6C8(v25, v41);
      v44 = v43;
      v50 = v42;
      sub_1002F702C(v53, v54);
      sub_10001BC14(v25, v41);
      v45 = v56;
      v46 = v57;
      CCECCryptorRelease(v24);
      sub_10001BC14(v22, v23);
      result = CCECCryptorRelease(v19);
      *a1 = v50;
      a1[1] = v44;
      v48 = v52;
      a1[2] = v51;
      a1[3] = v48;
      a1[4] = v45;
      a1[5] = v46;
      return result;
    }
    v35 = static os_log_type_t.error.getter(v20);
    if (qword_1010E9F78 != -1)
      swift_once(&qword_1010E9F78, sub_1007E28B4);
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, qword_1011B77E0, "Initial Pairing: Public key is not available.", 45, 2, _swiftEmptyArrayStorage);
    v36 = type metadata accessor for CryptoError(0);
    v37 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
    swift_allocError(v36, v37, 0, 0);
    v39 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v38, enum case for CryptoError.invalidKey(_:), v36);
    swift_willThrow(v39);
    sub_10001BC14(v22, v23);
  }
  return CCECCryptorRelease(v19);
}

uint64_t sub_1007E9B0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953393000, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100EE6C90)
  {
    swift_bridgeObjectRelease(0x8000000100EE6C90);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EE6C90, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1007E9BE8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v5 = sub_10001A9A8(&qword_101109DB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1007EBC80();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GeneratedTokens.CodingKeys, &type metadata for GeneratedTokens.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v36 = 0;
  v12 = sub_1007EBCC4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for KeyGenerationHint, &v36, v5, &type metadata for KeyGenerationHint, v12);
  v13 = v31;
  v29 = v30;
  v14 = v32;
  v36 = 1;
  sub_10001BBBC(v31, v32);
  v15 = sub_1007EBD08();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for DiversifiedRootKeys, &v36, v5, &type metadata for DiversifiedRootKeys, v15);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = v30;
  v17 = v31;
  v18 = v32;
  v26 = v33;
  v27 = v30;
  v19 = v35;
  v28 = v34;
  sub_10001BBBC(v13, v14);
  sub_10001BD08(v16, v17);
  v20 = v18;
  v21 = v18;
  v22 = v26;
  sub_10001BBBC(v21, v26);
  sub_10001BD08(v28, v19);
  sub_10001BC14(v13, v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001BC14(v13, v14);
  sub_10001EF3C(v27, v17);
  sub_10001BC14(v20, v22);
  v23 = v28;
  result = sub_10001EF3C(v28, v19);
  *a2 = v29;
  a2[1] = v13;
  v25 = v27;
  a2[2] = v14;
  a2[3] = v25;
  a2[4] = v17;
  a2[5] = v20;
  a2[6] = v22;
  a2[7] = v23;
  a2[8] = v19;
  return result;
}

uint64_t sub_1007E9E44(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x64656D7265746E69 && a2 == 0xEF79654B65746169)
  {
    v5 = 0xEF79654B65746169;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656D7265746E69, 0xEF79654B65746169, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079)
  {
    v7 = 0xE900000000000079;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    swift_bridgeObjectRelease(0xEA00000000007965);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270, 0xEA00000000007965, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1007E9FD4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v5 = sub_10001A9A8(&qword_101109D70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1007EB488();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DiversifiedRootKeys.CodingKeys, &type metadata for DiversifiedRootKeys.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v32 = 0;
  v12 = sub_1002FDD30();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for IntermediateKey, &v32, v5, &type metadata for IntermediateKey, v12);
  v14 = v30;
  v13 = v31;
  v32 = 1;
  sub_10001BD08(v30, v31);
  v15 = sub_1002FD258();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for PublicKey, &v32, v5, &type metadata for PublicKey, v15);
  v28 = v14;
  v29 = v13;
  v16 = v30;
  v32 = 2;
  v17 = v31;
  sub_10001BBBC(v30, v31);
  v18 = sub_10007CB0C();
  v27 = 0;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for PrivateKey, &v32, v5, &type metadata for PrivateKey, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v31;
  v27 = v30;
  v20 = v16;
  v22 = v28;
  v21 = v29;
  sub_10001BD08(v28, v29);
  v23 = v17;
  sub_10001BBBC(v20, v17);
  v24 = v27;
  sub_10001BD08(v27, v19);
  sub_10001BC14(v20, v23);
  sub_10001EF3C(v22, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001EF3C(v22, v21);
  sub_10001BC14(v20, v23);
  result = sub_10001EF3C(v24, v19);
  *a2 = v22;
  a2[1] = v21;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v24;
  a2[5] = v19;
  return result;
}

uint64_t sub_1007EA2AC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease(0xEC00000074657263);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1007EA3AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = sub_10001A9A8(&qword_101109DF0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1007EBDD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyGenerationHint.CodingKeys, &type metadata for KeyGenerationHint.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    LOBYTE(v14) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    v13 = 1;
    v10 = sub_1001EC3A8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for SharedSecretKey, &v13, v3, &type metadata for SharedSecretKey, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

uint64_t sub_1007EA518(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079)
  {
    v5 = 0xE900000000000079;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B63696C627570, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965)
  {
    v7 = 0xEA00000000007965;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B65746176697270, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263)
  {
    swift_bridgeObjectRelease(0xEC00000074657263);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6553646572616873, 0xEC00000074657263, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1007EA69C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v5 = sub_10001A9A8(&qword_101109D88);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1007E41FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for RootKey.CodingKeys, &type metadata for RootKey.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v32 = 0;
  v12 = sub_1002FD258();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for PublicKey, &v32, v5, &type metadata for PublicKey, v12);
  v14 = v30;
  v13 = v31;
  v32 = 1;
  sub_10001BBBC(v30, v31);
  v15 = sub_10007CB0C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for PrivateKey, &v32, v5, &type metadata for PrivateKey, v15);
  v28 = v14;
  v29 = v13;
  v16 = v30;
  v32 = 2;
  v17 = v31;
  sub_10001BBBC(v30, v31);
  v18 = sub_1001EC3A8();
  v27 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for SharedSecretKey, &v32, v5, &type metadata for SharedSecretKey, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v31;
  v27 = v30;
  v20 = v16;
  v22 = v28;
  v21 = v29;
  sub_10001BBBC(v28, v29);
  v23 = v17;
  sub_10001BBBC(v20, v17);
  v24 = v27;
  sub_10001BBBC(v27, v19);
  sub_10001BC14(v20, v23);
  sub_10001BC14(v22, v21);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_10001BC14(v22, v21);
  sub_10001BC14(v20, v23);
  result = sub_10001BC14(v24, v19);
  *a2 = v22;
  a2[1] = v21;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v24;
  a2[5] = v19;
  return result;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen()
{
  return &type metadata for CollaborativeKeyGen;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1()
{
  return &type metadata for CollaborativeKeyGen.v1;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v1.OwnerContext()
{
  return objc_opt_self(_TtCOO12searchpartyd19CollaborativeKeyGen2v112OwnerContext);
}

uint64_t type metadata accessor for CollaborativeKeyGen.v1.ContributorContext()
{
  return objc_opt_self(_TtCOO12searchpartyd19CollaborativeKeyGen2v118ContributorContext);
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2()
{
  return &type metadata for CollaborativeKeyGen.v2;
}

uint64_t type metadata accessor for CollaborativeKeyGen.v2.OwnerContext()
{
  return objc_opt_self(_TtCOO12searchpartyd19CollaborativeKeyGen2v212OwnerContext);
}

uint64_t type metadata accessor for CollaborativeKeyGen.v2.ContributorContext()
{
  return objc_opt_self(_TtCOO12searchpartyd19CollaborativeKeyGen2v218ContributorContext);
}

ValueMetadata *type metadata accessor for RootKey()
{
  return &type metadata for RootKey;
}

uint64_t destroy for DiversifiedRootKeys(uint64_t *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  v2 = a1[1];
  if (v2 >> 60 != 15)
    sub_10001BC14(*a1, v2);
  result = sub_10001BC14(a1[2], a1[3]);
  v4 = a1[5];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[4], v4);
  return result;
}

uint64_t initializeWithCopy for DiversifiedRootKeys(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 4;
  v9 = a2[5];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, v9);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v9;
  }
  return a1;
}

uint64_t *assignWithCopy for DiversifiedRootKeys(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      v5 = *a2;
      sub_10001BBBC(*a2, a2[1]);
      *a1 = v5;
      a1[1] = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_1007EAC70((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v6 = *a2;
  sub_10001BBBC(*a2, a2[1]);
  v7 = *a1;
  v8 = a1[1];
  *a1 = v6;
  a1[1] = v4;
  sub_10001BC14(v7, v8);
LABEL_8:
  v9 = a2[2];
  v10 = a2[3];
  sub_10001BBBC(v9, v10);
  v11 = a1[2];
  v12 = a1[3];
  a1[2] = v9;
  a1[3] = v10;
  sub_10001BC14(v11, v12);
  v13 = a2 + 4;
  v14 = a2[5];
  if ((unint64_t)a1[5] >> 60 != 15)
  {
    if (v14 >> 60 != 15)
    {
      v16 = *v13;
      sub_10001BBBC(*v13, v14);
      v17 = a1[4];
      v18 = a1[5];
      a1[4] = v16;
      a1[5] = v14;
      sub_10001BC14(v17, v18);
      return a1;
    }
    sub_1002EEEE0((uint64_t)(a1 + 4));
    goto LABEL_13;
  }
  if (v14 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v13;
    return a1;
  }
  v15 = *v13;
  sub_10001BBBC(*v13, v14);
  a1[4] = v15;
  a1[5] = v14;
  return a1;
}

uint64_t sub_1007EAC70(uint64_t a1)
{
  destroy for KeyRepresentableInternal();
  return a1;
}

uint64_t assignWithTake for DiversifiedRootKeys(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >> 60 == 15)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_1007EAC70(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v4);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v7, v8);
  v9 = (_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 >> 60 != 15)
  {
    v11 = *(_QWORD *)(a2 + 40);
    if (v11 >> 60 != 15)
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = *v9;
      *(_QWORD *)(a1 + 40) = v11;
      sub_10001BC14(v12, v10);
      return a1;
    }
    sub_1002EEEE0(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for DiversifiedRootKeys(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 24) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 24) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for DiversifiedRootKeys(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiversifiedRootKeys()
{
  return &type metadata for DiversifiedRootKeys;
}

uint64_t destroy for InitialPairingInfo(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  result = sub_10001BC14(a1[4], a1[5]);
  v3 = a1[7];
  if (v3 >> 60 != 15)
    result = sub_10001BC14(a1[6], v3);
  v4 = a1[9];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[8], v4);
  return result;
}

uint64_t initializeWithCopy for InitialPairingInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2 + 6;
  v11 = a2[7];
  if (v11 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
  }
  else
  {
    v12 = *v10;
    sub_10001BBBC(*v10, a2[7]);
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v11;
  }
  v13 = a2 + 8;
  v14 = a2[9];
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v13;
  }
  else
  {
    v15 = *v13;
    sub_10001BBBC(*v13, v14);
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v14;
  }
  return a1;
}

uint64_t *assignWithCopy for InitialPairingInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2 + 6;
  v17 = a2[7];
  if ((unint64_t)a1[7] >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      v18 = *v16;
      sub_10001BBBC(*v16, a2[7]);
      a1[6] = v18;
      a1[7] = v17;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
    sub_1001FD268((uint64_t)(a1 + 6));
LABEL_6:
    *((_OWORD *)a1 + 3) = *(_OWORD *)v16;
    goto LABEL_8;
  }
  v19 = *v16;
  sub_10001BBBC(*v16, a2[7]);
  v20 = a1[6];
  v21 = a1[7];
  a1[6] = v19;
  a1[7] = v17;
  sub_10001BC14(v20, v21);
LABEL_8:
  v22 = a2 + 8;
  v23 = a2[9];
  if ((unint64_t)a1[9] >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      v25 = *v22;
      sub_10001BBBC(*v22, v23);
      v26 = a1[8];
      v27 = a1[9];
      a1[8] = v25;
      a1[9] = v23;
      sub_10001BC14(v26, v27);
      return a1;
    }
    sub_1001FD268((uint64_t)(a1 + 8));
    goto LABEL_13;
  }
  if (v23 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v22;
    return a1;
  }
  v24 = *v22;
  sub_10001BBBC(*v22, v23);
  a1[8] = v24;
  a1[9] = v23;
  return a1;
}

uint64_t assignWithTake for InitialPairingInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = (_OWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  if (v11 >> 60 == 15)
    goto LABEL_4;
  v12 = *(_QWORD *)(a2 + 56);
  if (v12 >> 60 == 15)
  {
    sub_1001FD268(a1 + 48);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v10;
    goto LABEL_6;
  }
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)v10;
  *(_QWORD *)(a1 + 56) = v12;
  sub_10001BC14(v13, v11);
LABEL_6:
  v14 = (_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  if (v15 >> 60 != 15)
  {
    v16 = *(_QWORD *)(a2 + 72);
    if (v16 >> 60 != 15)
    {
      v17 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = *v14;
      *(_QWORD *)(a1 + 72) = v16;
      sub_10001BC14(v17, v15);
      return a1;
    }
    sub_1001FD268(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v14;
  return a1;
}

ValueMetadata *type metadata accessor for InitialPairingInfo()
{
  return &type metadata for InitialPairingInfo;
}

ValueMetadata *type metadata accessor for RootKey.CodingKeys()
{
  return &type metadata for RootKey.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CryptoTokenError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1007EB260 + 4 * byte_100E509B5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1007EB294 + 4 * byte_100E509B0[v4]))();
}

uint64_t sub_1007EB294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EB29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007EB2A4);
  return result;
}

uint64_t sub_1007EB2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007EB2B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1007EB2BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EB2C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoTokenError()
{
  return &type metadata for CryptoTokenError;
}

unint64_t sub_1007EB2E4()
{
  unint64_t result;

  result = qword_101109D40;
  if (!qword_101109D40)
  {
    result = swift_getWitnessTable(byte_100E50BD4, &type metadata for CryptoTokenError);
    atomic_store(result, (unint64_t *)&qword_101109D40);
  }
  return result;
}

unint64_t sub_1007EB32C()
{
  unint64_t result;

  result = qword_101109D48;
  if (!qword_101109D48)
  {
    result = swift_getWitnessTable(byte_100E50C8C, &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109D48);
  }
  return result;
}

unint64_t sub_1007EB374()
{
  unint64_t result;

  result = qword_101109D50;
  if (!qword_101109D50)
  {
    result = swift_getWitnessTable(byte_100E50CB4, &type metadata for DiversifiedRootKeys);
    atomic_store(result, (unint64_t *)&qword_101109D50);
  }
  return result;
}

unint64_t sub_1007EB3BC()
{
  unint64_t result;

  result = qword_101109D58;
  if (!qword_101109D58)
  {
    result = swift_getWitnessTable(byte_100E50BFC, &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109D58);
  }
  return result;
}

unint64_t sub_1007EB404()
{
  unint64_t result;

  result = qword_101109D60;
  if (!qword_101109D60)
  {
    result = swift_getWitnessTable(byte_100E50C24, &type metadata for RootKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109D60);
  }
  return result;
}

uint64_t sub_1007EB448(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F1958);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1007EB488()
{
  unint64_t result;

  result = qword_101109D78;
  if (!qword_101109D78)
  {
    result = swift_getWitnessTable("m3$", &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109D78);
  }
  return result;
}

uint64_t _s12searchpartyd7RootKeyV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1007EB518 + 4 * byte_100E509BF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1007EB54C + 4 * byte_100E509BA[v4]))();
}

uint64_t sub_1007EB54C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EB554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007EB55CLL);
  return result;
}

uint64_t sub_1007EB568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007EB570);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1007EB574(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EB57C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiversifiedRootKeys.CodingKeys()
{
  return &type metadata for DiversifiedRootKeys.CodingKeys;
}

uint64_t destroy for GeneratedTokens(_QWORD *a1)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;

  sub_10001BC14(a1[1], a1[2]);
  v2 = a1[4];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[3], v2);
  result = sub_10001BC14(a1[5], a1[6]);
  v4 = a1[8];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[7], v4);
  return result;
}

uint64_t initializeWithCopy for GeneratedTokens(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;

  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  v5 = a2[2];
  sub_10001BBBC(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2 + 3;
  v7 = a2[4];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_10001BBBC(*v6, a2[4]);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  v9 = a2[5];
  v10 = a2[6];
  sub_10001BBBC(v9, v10);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  v11 = a2 + 7;
  v12 = a2[8];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    sub_10001BBBC(*v11, v12);
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v12;
  }
  return a1;
}

_QWORD *assignWithCopy for GeneratedTokens(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_10001BBBC(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2 + 3;
  v9 = a2[4];
  if (a1[4] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      v10 = *v8;
      sub_10001BBBC(*v8, a2[4]);
      a1[3] = v10;
      a1[4] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_1007EAC70((uint64_t)(a1 + 3));
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v11 = *v8;
  sub_10001BBBC(*v8, a2[4]);
  v12 = a1[3];
  v13 = a1[4];
  a1[3] = v11;
  a1[4] = v9;
  sub_10001BC14(v12, v13);
LABEL_8:
  v14 = a2[5];
  v15 = a2[6];
  sub_10001BBBC(v14, v15);
  v16 = a1[5];
  v17 = a1[6];
  a1[5] = v14;
  a1[6] = v15;
  sub_10001BC14(v16, v17);
  v18 = a2 + 7;
  v19 = a2[8];
  if (a1[8] >> 60 != 15)
  {
    if (v19 >> 60 != 15)
    {
      v21 = *v18;
      sub_10001BBBC(*v18, v19);
      v22 = a1[7];
      v23 = a1[8];
      a1[7] = v21;
      a1[8] = v19;
      sub_10001BC14(v22, v23);
      return a1;
    }
    sub_1002EEEE0((uint64_t)(a1 + 7));
    goto LABEL_13;
  }
  if (v19 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 7) = *(_OWORD *)v18;
    return a1;
  }
  v20 = *v18;
  sub_10001BBBC(*v18, v19);
  a1[7] = v20;
  a1[8] = v19;
  return a1;
}

uint64_t assignWithTake for GeneratedTokens(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v4;
  sub_10001BC14(v5, v6);
  v7 = (_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8 >> 60 == 15)
    goto LABEL_4;
  v9 = *(_QWORD *)(a2 + 32);
  if (v9 >> 60 == 15)
  {
    sub_1007EAC70(a1 + 24);
LABEL_4:
    *(_OWORD *)(a1 + 24) = *v7;
    goto LABEL_6;
  }
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v7;
  *(_QWORD *)(a1 + 32) = v9;
  sub_10001BC14(v10, v8);
LABEL_6:
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001BC14(v11, v12);
  v13 = (_QWORD *)(a2 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  if (v14 >> 60 != 15)
  {
    v15 = *(_QWORD *)(a2 + 64);
    if (v15 >> 60 != 15)
    {
      v16 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = *v13;
      *(_QWORD *)(a1 + 64) = v15;
      sub_10001BC14(v16, v14);
      return a1;
    }
    sub_1002EEEE0(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)v13;
  return a1;
}

ValueMetadata *type metadata accessor for GeneratedTokens()
{
  return &type metadata for GeneratedTokens;
}

_QWORD *sub_1007EB93C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  sub_10001BBBC(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for KeyGenerationHint(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  sub_10001BBBC(v3, v4);
  v5 = a1[1];
  v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_10001BC14(v5, v6);
  return a1;
}

uint64_t assignWithTake for KeyGenerationHint(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  sub_10001BC14(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyGenerationHint(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for KeyGenerationHint(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationHint()
{
  return &type metadata for KeyGenerationHint;
}

unint64_t sub_1007EBAC4()
{
  unint64_t result;

  result = qword_101109D90;
  if (!qword_101109D90)
  {
    result = swift_getWitnessTable("e5$", &type metadata for KeyGenerationHint);
    atomic_store(result, (unint64_t *)&qword_101109D90);
  }
  return result;
}

unint64_t sub_1007EBB0C()
{
  unint64_t result;

  result = qword_101109D98;
  if (!qword_101109D98)
  {
    result = swift_getWitnessTable(byte_100E50EDC, &type metadata for GeneratedTokens);
    atomic_store(result, (unint64_t *)&qword_101109D98);
  }
  return result;
}

unint64_t sub_1007EBB54()
{
  unint64_t result;

  result = qword_101109DA0;
  if (!qword_101109DA0)
  {
    result = swift_getWitnessTable("e3$", &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109DA0);
  }
  return result;
}

unint64_t sub_1007EBB9C()
{
  unint64_t result;

  result = qword_101109DA8;
  if (!qword_101109DA8)
  {
    result = swift_getWitnessTable(byte_100E50F94, &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109DA8);
  }
  return result;
}

unint64_t sub_1007EBBE4()
{
  unint64_t result;

  result = qword_101109DB0;
  if (!qword_101109DB0)
  {
    result = swift_getWitnessTable(byte_100E50FBC, &type metadata for DiversifiedRootKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109DB0);
  }
  return result;
}

uint64_t sub_1007EBC28(uint64_t a1)
{
  sub_10001BBBC(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_1007EBC54(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

unint64_t sub_1007EBC80()
{
  unint64_t result;

  result = qword_101109DC0;
  if (!qword_101109DC0)
  {
    result = swift_getWitnessTable("]1$", &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109DC0);
  }
  return result;
}

unint64_t sub_1007EBCC4()
{
  unint64_t result;

  result = qword_101109DC8;
  if (!qword_101109DC8)
  {
    result = swift_getWitnessTable(byte_100E50E74, &type metadata for KeyGenerationHint);
    atomic_store(result, (unint64_t *)&qword_101109DC8);
  }
  return result;
}

unint64_t sub_1007EBD08()
{
  unint64_t result;

  result = qword_101109DD0;
  if (!qword_101109DD0)
  {
    result = swift_getWitnessTable("=6$", &type metadata for DiversifiedRootKeys);
    atomic_store(result, (unint64_t *)&qword_101109DD0);
  }
  return result;
}

unint64_t sub_1007EBD4C()
{
  unint64_t result;

  result = qword_101109DE0;
  if (!qword_101109DE0)
  {
    result = swift_getWitnessTable(byte_100E50E4C, &type metadata for KeyGenerationHint);
    atomic_store(result, (unint64_t *)&qword_101109DE0);
  }
  return result;
}

unint64_t sub_1007EBD90()
{
  unint64_t result;

  result = qword_101109DE8;
  if (!qword_101109DE8)
  {
    result = swift_getWitnessTable("u6$", &type metadata for DiversifiedRootKeys);
    atomic_store(result, (unint64_t *)&qword_101109DE8);
  }
  return result;
}

unint64_t sub_1007EBDD4()
{
  unint64_t result;

  result = qword_101109DF8;
  if (!qword_101109DF8)
  {
    result = swift_getWitnessTable(byte_100E5120C, &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109DF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyGenerationHint.CodingKeys()
{
  return &type metadata for KeyGenerationHint.CodingKeys;
}

uint64_t _s12searchpartyd17KeyGenerationHintV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1007EBE78 + 4 * byte_100E509C9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1007EBEAC + 4 * byte_100E509C4[v4]))();
}

uint64_t sub_1007EBEAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EBEB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1007EBEBCLL);
  return result;
}

uint64_t sub_1007EBEC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1007EBED0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1007EBED4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1007EBEDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GeneratedTokens.CodingKeys()
{
  return &type metadata for GeneratedTokens.CodingKeys;
}

unint64_t sub_1007EBEFC()
{
  unint64_t result;

  result = qword_101109E08;
  if (!qword_101109E08)
  {
    result = swift_getWitnessTable("]2$", &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109E08);
  }
  return result;
}

unint64_t sub_1007EBF44()
{
  unint64_t result;

  result = qword_101109E10;
  if (!qword_101109E10)
  {
    result = swift_getWitnessTable(byte_100E511E4, &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109E10);
  }
  return result;
}

unint64_t sub_1007EBF8C()
{
  unint64_t result;

  result = qword_101109E18;
  if (!qword_101109E18)
  {
    result = swift_getWitnessTable("E2$", &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109E18);
  }
  return result;
}

unint64_t sub_1007EBFD4()
{
  unint64_t result;

  result = qword_101109E20;
  if (!qword_101109E20)
  {
    result = swift_getWitnessTable("-2$", &type metadata for KeyGenerationHint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109E20);
  }
  return result;
}

unint64_t sub_1007EC01C()
{
  unint64_t result;

  result = qword_101109E28;
  if (!qword_101109E28)
  {
    result = swift_getWitnessTable(byte_100E5109C, &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109E28);
  }
  return result;
}

unint64_t sub_1007EC064()
{
  unint64_t result;

  result = qword_101109E30;
  if (!qword_101109E30)
  {
    result = swift_getWitnessTable(byte_100E510C4, &type metadata for GeneratedTokens.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101109E30);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryTXPowerResponsePayload()
{
  return &type metadata for AccessoryTXPowerResponsePayload;
}

uint64_t sub_1007EC0B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[2];
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  dispatch thunk of BinaryEncoding.container()(v12, v1, v2);
  v3 = sub_1004719B0();
  v4 = FixedWidthInteger.data.getter(&type metadata for Int8, v3);
  v6 = v5;
  v11[0] = v4;
  v11[1] = v5;
  v7 = v13;
  v8 = v14;
  sub_10009F5D0((uint64_t)v12, v13);
  v9 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v11, &type metadata for Data, v9, v7, v8);
  sub_10001BC14(v4, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_1007EC18C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1007EC23C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_1007EC1B4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1007EC1E0();
  result = sub_1001E9A08();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1007EC1E0()
{
  unint64_t result;

  result = qword_101109E38;
  if (!qword_101109E38)
  {
    result = swift_getWitnessTable(byte_100E512D0, &type metadata for AccessoryTXPowerResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101109E38);
  }
  return result;
}

uint64_t sub_1007EC224(_QWORD *a1)
{
  return sub_1007EC0B8(a1);
}

uint64_t sub_1007EC23C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[30];
  uint64_t v21;
  uint64_t v22;

  v3 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryDecoding.container()(&v20[8], v6, v7);
  v8 = v21;
  v9 = v22;
  v10 = sub_10009F5D0((uint64_t)&v20[8], v21);
  v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v8, v9);
  if (!v1)
  {
    v13 = v11;
    v14 = v12;
    v15 = sub_10001BBBC(v11, v12);
    static Endianness.current.getter(v15);
    sub_1004719B0();
    FixedWidthInteger.init(data:ofEndianness:)(&v20[6], v13, v14, v5);
    if (v20[7] != 1)
    {
      v10 = v20[6];
      sub_10001BC14(v13, v14);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v10;
    }
    v10 = type metadata accessor for BinaryDecodingError(0);
    v16 = sub_100345C00();
    swift_allocError(v10, v16, 0, 0);
    v18 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v17, enum case for BinaryDecodingError.decodingError(_:), v10);
    swift_willThrow(v18);
    sub_10001BC14(v13, v14);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v20[8]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10;
}

void sub_1007EC3DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, unint64_t, uint64_t);
  void (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v29)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  char v50;
  void (*v51)(_BYTE *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  _BYTE *v56;
  uint64_t v57;
  int64_t v58;
  void (*v59)(_BYTE *, uint64_t, uint64_t, uint64_t);
  __int128 v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  int64_t v68;
  uint64_t v69;
  _BYTE *v70;
  _BYTE *v71;
  void (*v72)(_BYTE *, unint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v71 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v6);
  v56 = &v55[-v9];
  __chkstk_darwin(v8);
  v70 = &v55[-v10];
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v65 = &v55[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v15 = &v55[-v14];
  v16 = *(_QWORD *)(a1 + 56);
  v57 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  if (v17 < 64)
    v18 = ~(-1 << v17);
  else
    v18 = -1;
  v19 = v18 & v16;
  v58 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v20 = 0;
  v60 = xmmword_100E22B00;
  v62 = a2;
  v63 = a1;
  v74 = v5;
  v61 = v15;
  while (1)
  {
    if (v19)
    {
      v69 = (v19 - 1) & v19;
      v22 = __clz(__rbit64(v19)) | (v20 << 6);
      goto LABEL_25;
    }
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v23 >= v58)
      goto LABEL_35;
    v24 = *(_QWORD *)(v57 + 8 * v23);
    ++v20;
    if (!v24)
    {
      v20 = v23 + 1;
      if (v23 + 1 >= v58)
        goto LABEL_35;
      v24 = *(_QWORD *)(v57 + 8 * v20);
      if (!v24)
      {
        v20 = v23 + 2;
        if (v23 + 2 >= v58)
          goto LABEL_35;
        v24 = *(_QWORD *)(v57 + 8 * v20);
        if (!v24)
        {
          v20 = v23 + 3;
          if (v23 + 3 >= v58)
            goto LABEL_35;
          v24 = *(_QWORD *)(v57 + 8 * v20);
          if (!v24)
            break;
        }
      }
    }
LABEL_24:
    v69 = (v24 - 1) & v24;
    v22 = __clz(__rbit64(v24)) + (v20 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 72);
    v27 = *(void (**)(_BYTE *, unint64_t, uint64_t))(v5 + 16);
    v27(v15, *(_QWORD *)(a1 + 48) + v26 * v22, v4);
    v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v28(v15, 0, 1, v4);
    v29 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48);
    if (v29(v15, 1, v4) == 1)
    {
      v54 = v63;
LABEL_36:
      swift_release(v54);
      return;
    }
    v68 = v20;
    v30 = v70;
    v64 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32);
    v64(v70, v15, v4);
    v31 = sub_10001A9A8(&qword_1011003C0);
    v32 = *(unsigned __int8 *)(v5 + 80);
    v33 = (v32 + 32) & ~v32;
    v73 = v26;
    v34 = swift_allocObject(v31, v33 + v26, v32 | 7);
    *(_OWORD *)(v34 + 16) = v60;
    v67 = v34;
    v35 = v34 + v33;
    v36 = v65;
    v27((_BYTE *)v35, (unint64_t)v30, v4);
    v37 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = Set.init(minimumCapacity:)(1);
    v66 = v35;
    v27(v36, v35, v4);
    v28(v36, 0, 1, v4);
    if (v29(v36, 1, v4) == 1)
    {
      v5 = v74;
      v15 = v61;
      v20 = v68;
      a1 = v63;
    }
    else
    {
      v72 = v27;
      v59 = v28;
      v39 = v56;
      v64(v56, v36, v4);
      v40 = *(_QWORD *)(v38 + 40);
      swift_bridgeObjectRetain(v38);
      v41 = v39;
      v42 = dispatch thunk of Hashable._rawHashValue(seed:)(v40, v4, v37);
      v43 = -1 << *(_BYTE *)(v38 + 32);
      v44 = v42 & ~v43;
      v45 = v38;
      v46 = v38 + 56;
      if (((*(_QWORD *)(v38 + 56 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) != 0)
      {
        v47 = ~v43;
        while (1)
        {
          v48 = v71;
          v72(v71, *(_QWORD *)(v45 + 48) + v44 * v73, v4);
          v49 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v50 = dispatch thunk of static Equatable.== infix(_:_:)(v48, v41, v4, v49);
          v51 = *(void (**)(_BYTE *, uint64_t))(v74 + 8);
          v51(v48, v4);
          if ((v50 & 1) != 0)
            break;
          v44 = (v44 + 1) & v47;
          if (((*(_QWORD *)(v46 + ((v44 >> 3) & 0xFFFFFFFFFFFFF8)) >> v44) & 1) == 0)
            goto LABEL_31;
        }
        v38 = v45;
        swift_bridgeObjectRelease();
        v5 = v74;
        v51(v41, v4);
      }
      else
      {
LABEL_31:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
        v53 = (uint64_t)v71;
        v72(v71, (unint64_t)v41, v4);
        v75 = v45;
        sub_100A1CCB8(v53, v44, isUniquelyReferenced_nonNull_native);
        v38 = v75;
        swift_bridgeObjectRelease();
        v5 = v74;
        (*(void (**)(_BYTE *, uint64_t))(v74 + 8))(v41, v4);
      }
      v59(v65, 1, 1, v4);
      a1 = v63;
      v15 = v61;
      v20 = v68;
    }
    v21 = v67;
    swift_setDeallocating(v67);
    swift_arrayDestroy(v66, 1, v4);
    swift_deallocClassInstance(v21, 32, 7);
    sub_100A0FEC4(&v75, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v70, v4);
    v19 = v69;
  }
  v25 = v23 + 4;
  if (v25 >= v58)
  {
LABEL_35:
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v15, 1, 1, v4);
    v54 = a1;
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(v57 + 8 * v25);
  if (v24)
  {
    v20 = v25;
    goto LABEL_24;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v58)
      goto LABEL_35;
    v24 = *(_QWORD *)(v57 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_24;
  }
LABEL_38:
  __break(1u);
}

uint64_t sub_1007EC9B8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  unsigned int v13;
  unint64_t v14;
  NSString *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  unint64_t v27;
  uint64_t result;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, _BYTE *, uint64_t);
  _BYTE v34[12];
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = &v34[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v34[-v10];
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v36 = 0x7365547265646E75;
  v37 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v35, &v36, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease(v37);
  if ((v35 & 1) != 0)
  {
    v12 = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
    v13 = objc_msgSend(v12, "processIdentifier");

    v36 = 0;
    v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v14 = v37;
    v15 = NSTemporaryDirectory();
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;
    swift_bridgeObjectRelease(v14);

    v36 = v16;
    v37 = v18;
    v19._countAndFlagsBits = 0x2D7473657463782FLL;
    v19._object = (void *)0xE800000000000000;
    String.append(_:)(v19);
    v35 = v13;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._object = (void *)0x8000000100EDD0F0;
    v22._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v22);
    if (qword_1010E9FA0 != -1)
      swift_once(&qword_1010E9FA0, sub_100828A34);
    v23 = type metadata accessor for UUID(0);
    sub_10001A9E8(v23, (uint64_t)qword_101109E40);
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    v26 = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v26);
    v27 = v37;
    URL.init(fileURLWithPath:isDirectory:)(v36, v37, 1);
    return swift_bridgeObjectRelease(v27);
  }
  else
  {
    v29 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v30 = 1;
    v31 = objc_msgSend(v29, "URLsForDirectory:inDomains:", 5, 1);

    v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v5);
    if (*(_QWORD *)(v32 + 16))
    {
      (*(void (**)(_BYTE *, unint64_t, uint64_t))(v6 + 16))(v4, v32 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
      v30 = 0;
    }
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v30, 1, v5);
    swift_bridgeObjectRelease(v32);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100004048((uint64_t)v4, &qword_1010FBA40);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000031, 0x8000000100EE7300, "searchpartyd/BeaconStore.swift", 30, 2, 3156, 0);
      __break(1u);
    }
    else
    {
      v33 = *(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32);
      v33((uint64_t)v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001DLL, 0x8000000100EC5D30, 1);
      (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v5);
      return v33(a1, v9, v5);
    }
  }
  return result;
}

_QWORD *sub_1007ECE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v15 = v1;
    v17 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v7, 0);
    v8 = v17;
    v9 = *(_QWORD *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v16 = *(_QWORD *)(v9 + 72);
    v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      v11(v6, v10, v3);
      v17 = v8;
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_10009A578(v12 > 1, v13 + 1, 1);
        v8 = v17;
      }
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13, v6, v3);
      v10 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

_QWORD *sub_1007ECF78(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  ValueMetadata *v18;
  unint64_t v19;
  _QWORD *v20;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v20 = _swiftEmptyArrayStorage;
    sub_10009A5FC(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (_QWORD *)(a1 + 80);
    do
    {
      v5 = *(v4 - 6);
      v6 = *(v4 - 5);
      v16 = *((_BYTE *)v4 - 32);
      v7 = *(v4 - 2);
      v15 = *(v4 - 3);
      v13 = *((_BYTE *)v4 - 7);
      v14 = *((_BYTE *)v4 - 8);
      v8 = *v4;
      sub_10001BBBC(v5, v6);
      v20 = v2;
      v9 = v2[2];
      v10 = v2[3];
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      if (v9 >= v10 >> 1)
      {
        sub_10009A5FC(v10 > 1, v9 + 1, 1);
        v2 = v20;
      }
      v18 = &type metadata for OwnSubmitPayload;
      v19 = sub_100881B10();
      v11 = swift_allocObject(&unk_101096C20, 72, 7);
      *(_QWORD *)&v17 = v11;
      *(_QWORD *)(v11 + 16) = v5;
      *(_QWORD *)(v11 + 24) = v6;
      *(_BYTE *)(v11 + 32) = v16;
      *(_QWORD *)(v11 + 40) = v15;
      *(_QWORD *)(v11 + 48) = v7;
      *(_BYTE *)(v11 + 56) = v14;
      *(_BYTE *)(v11 + 57) = v13;
      *(_QWORD *)(v11 + 64) = v8;
      v2[2] = v9 + 1;
      sub_10000F9FC(&v17, (uint64_t)&v2[5 * v9 + 4]);
      v4 += 7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1007ED0E0(uint64_t a1)
{
  return sub_1007EDE50(a1, &qword_10110AD18, SPOrphanedRecords_ptr);
}

_QWORD *sub_1007ED0F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for OwnerPeerTrust(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A8B8(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for OwnerPeerTrust);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A8B8(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_10110AA00, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D480);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for OwnerPeerTrust);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for OwnerPeerTrust);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_1007ED26C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for MemberPeerTrust(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A8B8(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for MemberPeerTrust);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A8B8(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_10110A9F8, type metadata accessor for MemberPeerTrust, (uint64_t)&unk_100E5B10C);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for MemberPeerTrust);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for MemberPeerTrust);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_1007ED3E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for SharingCircleSecret(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A8B8(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for SharingCircleSecret);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A8B8(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_10110A9E0, type metadata accessor for SharingCircleSecret, (uint64_t)&unk_100E57EB8);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for SharingCircleSecret);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for SharingCircleSecret);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_1007ED55C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for SharedBeaconRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A8B8(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A8B8(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_10110A9A8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F570);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_1007ED6D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for BeaconNamingRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A8B8(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for BeaconNamingRecord);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A8B8(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_10110A950, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E58684);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for BeaconNamingRecord);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for BeaconNamingRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_1007ED84C(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  char *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  ValueMetadata *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  __int128 v16;
  ValueMetadata *v17;
  _UNKNOWN **v18;
  _QWORD v19[3];
  ValueMetadata *v20;
  _UNKNOWN **v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_10009A948(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (char *)(a1 + 32);
    do
    {
      v5 = *v4++;
      v20 = &type metadata for BAServiceIdentifier;
      v21 = &off_101077A98;
      LOBYTE(v19[0]) = v5;
      v22 = v2;
      v7 = v2[2];
      v6 = v2[3];
      v8 = &type metadata for BAServiceIdentifier;
      if (v7 >= v6 >> 1)
      {
        sub_10009A948(v6 > 1, v7 + 1, 1);
        v8 = v20;
        v2 = v22;
      }
      v9 = sub_10009F5D0((uint64_t)v19, (uint64_t)v8);
      __chkstk_darwin(v9);
      v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v12 + 16))(v11);
      v13 = *v11;
      v17 = &type metadata for BAServiceIdentifier;
      v18 = &off_101077A98;
      LOBYTE(v16) = v13;
      v2[2] = v7 + 1;
      sub_10000F9FC(&v16, (uint64_t)&v2[5 * v7 + 4]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1007ED9A8(uint64_t a1)
{
  return sub_1007EE6A4(a1, (uint64_t)&type metadata for BACharacteristicIdentifier.FindMy, (uint64_t)&off_101077A78);
}

uint64_t sub_1007ED9BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_10009AA9C(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10009AA9C(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_10000F4A0(0, (unint64_t *)&qword_101111D20, NRDevice_ptr);
        v17 = sub_10001AC90(&qword_10110AD10, (unint64_t *)&qword_101111D20, NRDevice_ptr, byte_100E3FC2C);
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10000F9FC(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_10009AA9C(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = sub_10000F4A0(0, (unint64_t *)&qword_101111D20, NRDevice_ptr);
        v17 = sub_10001AC90(&qword_10110AD10, (unint64_t *)&qword_101111D20, NRDevice_ptr, byte_100E3FC2C);
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10000F9FC(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007EDBEC(uint64_t a1)
{
  return sub_1007EE524(a1, type metadata accessor for SPCachedAdvertisement, (void (*)(BOOL, unint64_t, uint64_t))sub_10009AB20, (uint64_t)&off_101063140, (void (*)(_QWORD *, _QWORD *))sub_10000F9FC);
}

_QWORD *sub_1007EDC10(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  void *v11;
  unint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v13 = _swiftEmptyArrayStorage;
    sub_10009AC44(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v13 = v2;
      v7 = v2[2];
      v8 = v2[3];
      swift_bridgeObjectRetain(v5);
      if (v7 >= v8 >> 1)
      {
        sub_10009AC44(v8 > 1, v7 + 1, 1);
        v2 = v13;
      }
      v4 += 2;
      v11 = &type metadata for String;
      v12 = sub_10001AA00();
      *(_QWORD *)&v10 = v6;
      *((_QWORD *)&v10 + 1) = v5;
      v2[2] = v7 + 1;
      sub_10000F9FC(&v10, (uint64_t)&v2[5 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1007EDD08(uint64_t a1)
{
  int64_t v1;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10009AC9C(0, v1, 0);
    v3 = (void **)(a1 + 32);
    type metadata accessor for SPPairingSessionError(0);
    v5 = v4;
    v6 = sub_100006204(&qword_1010EB048, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E20E9C);
    do
    {
      v7 = *v3;
      v8 = swift_allocError(v5, v6, 0, 0);
      *v9 = v7;
      v10 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009AC9C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_10009AC9C(v11 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      _swiftEmptyArrayStorage[v12 + 4] = v8;
      ++v3;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1007EDE3C(uint64_t a1)
{
  return sub_1007EDE50(a1, &qword_1010F94E0, IDSDevice_ptr);
}

uint64_t sub_1007EDE50(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  _OWORD v20[2];
  _QWORD *v21;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v18 = a1;
    else
      v18 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = _swiftEmptyArrayStorage;
  if (!v6)
    return (uint64_t)v7;
  v21 = _swiftEmptyArrayStorage;
  result = sub_10009A828(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v6; ++i)
      {
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v10 = sub_10000F4A0(0, a2, a3);
        swift_dynamicCast(v20, &v19, v10, (char *)&type metadata for Any + 8, 7);
        v7 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_10009A828(0, v7[2] + 1, 1);
          v7 = v21;
        }
        v12 = v7[2];
        v11 = v7[3];
        if (v12 >= v11 >> 1)
        {
          sub_10009A828(v11 > 1, v12 + 1, 1);
          v7 = v21;
        }
        v7[2] = v12 + 1;
        sub_10010F90C(v20, &v7[4 * v12 + 4]);
      }
    }
    else
    {
      v13 = (id *)(a1 + 32);
      v14 = sub_10000F4A0(0, a2, a3);
      do
      {
        v19 = *v13;
        v15 = v19;
        swift_dynamicCast(v20, &v19, v14, (char *)&type metadata for Any + 8, 7);
        v7 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_10009A828(0, v7[2] + 1, 1);
          v7 = v21;
        }
        v17 = v7[2];
        v16 = v7[3];
        if (v17 >= v16 >> 1)
        {
          sub_10009A828(v16 > 1, v17 + 1, 1);
          v7 = v21;
        }
        v7[2] = v17 + 1;
        sub_10010F90C(v20, &v7[4 * v17 + 4]);
        ++v13;
        --v6;
      }
      while (v6);
    }
    return (uint64_t)v7;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007EE0A0(uint64_t a1)
{
  return sub_1007EE524(a1, type metadata accessor for BeaconEstimatedLocation, (void (*)(BOOL, unint64_t, uint64_t))sub_10009ADAC, (uint64_t)&off_1010634C0, (void (*)(_QWORD *, _QWORD *))sub_10000F9FC);
}

_QWORD *sub_1007EE0C4(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  char *v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  char v9;
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_10009A828(0, v1, 0);
    v4 = (char *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *v4++;
      v9 = v5;
      swift_dynamicCast(v10, &v9, &type metadata for LocationSource, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10009A828(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10009A828(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v2[2] = v7 + 1;
      sub_10010F90C(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1007EE1E0(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _BYTE v20[8];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE v25[8];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v30 = _swiftEmptyArrayStorage;
    sub_10009B010(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (unint64_t *)(a1 + 64);
    do
    {
      v6 = *(v4 - 3);
      v5 = *(v4 - 2);
      v7 = *(v4 - 1);
      v8 = *v4;
      v20[0] = *((_BYTE *)v4 - 32);
      v21 = v6;
      v22 = v5;
      v23 = v7;
      v24 = v8;
      swift_bridgeObjectRetain(v5);
      sub_10001BD08(v7, v8);
      v9 = sub_10001A9A8(&qword_1010ED3B8);
      v10 = sub_10001A9A8(&qword_1010ED3A8);
      swift_dynamicCast(v25, v20, v9, v10, 7);
      v11 = v25[0];
      v12 = v26;
      v13 = v27;
      v14 = v28;
      v15 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10009B010(0, v2[2] + 1, 1);
        v2 = v30;
      }
      v17 = v2[2];
      v16 = v2[3];
      if (v17 >= v16 >> 1)
      {
        sub_10009B010(v16 > 1, v17 + 1, 1);
        v2 = v30;
      }
      v2[2] = v17 + 1;
      v18 = &v2[5 * v17];
      *((_BYTE *)v18 + 32) = v11;
      v4 += 5;
      v18[5] = v12;
      v18[6] = v13;
      v18[7] = v14;
      v18[8] = v15;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1007EE340(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v16 = sub_10001A9A8(&qword_1010FB2D8);
  v2 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ED280);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009B068(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v12 = *(_QWORD *)(v2 + 72);
    v10 = v17;
    do
    {
      sub_10000F9B8(v11, (uint64_t)v4, &qword_1010FB2D8);
      swift_dynamicCast(v8, v4, v16, v5, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      {
        sub_10009B068(0, v10[2] + 1, 1);
        v10 = v17;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009B068(v13 > 1, v14 + 1, 1);
        v10 = v17;
      }
      v10[2] = v14 + 1;
      sub_100005CF0((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_1010ED280);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  return v10;
}

_QWORD *sub_1007EE500(uint64_t a1)
{
  return sub_1007EE524(a1, type metadata accessor for RawSearchResult, (void (*)(BOOL, unint64_t, uint64_t))sub_10009ADAC, (uint64_t)&off_1010634E8, (void (*)(_QWORD *, _QWORD *))sub_10000F9FC);
}

_QWORD *sub_1007EE524(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(BOOL, unint64_t, uint64_t), uint64_t a4, void (*a5)(_QWORD *, _QWORD *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  void (*v21)(BOOL, unint64_t, uint64_t);
  void (*v22)(_QWORD *, _QWORD *);
  _QWORD v23[5];
  _QWORD *v24;

  v22 = a5;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  if (v13)
  {
    v24 = _swiftEmptyArrayStorage;
    v21 = a3;
    a3(0, v13, 0);
    v14 = v24;
    v15 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v16 = *(_QWORD *)(v10 + 72);
    do
    {
      sub_10005972C(v15, (uint64_t)v12, a2);
      v24 = v14;
      v18 = v14[2];
      v17 = v14[3];
      if (v18 >= v17 >> 1)
      {
        v21(v17 > 1, v18 + 1, 1);
        v14 = v24;
      }
      v23[3] = v9;
      v23[4] = a4;
      v19 = sub_100018F08(v23);
      sub_10005972C((uint64_t)v12, (uint64_t)v19, a2);
      v14[2] = v18 + 1;
      v22(v23, &v14[5 * v18 + 4]);
      sub_1000126B0((uint64_t)v12, a2);
      v15 += v16;
      --v13;
    }
    while (v13);
  }
  return v14;
}

_QWORD *sub_1007EE690(uint64_t a1)
{
  return sub_1007EE6A4(a1, (uint64_t)&type metadata for BACharacteristicIdentifier.AccessoryInformation, (uint64_t)&off_101077A88);
}

_QWORD *sub_1007EE6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  _QWORD *v4;
  char *v8;
  char v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A974(0, v3, 0);
    v4 = _swiftEmptyArrayStorage;
    v8 = (char *)(a1 + 32);
    do
    {
      v10 = *v8++;
      v9 = v10;
      v17 = v4;
      v12 = v4[2];
      v11 = v4[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A974(v11 > 1, v12 + 1, 1);
        v4 = v17;
      }
      v15 = a2;
      v16 = a3;
      LOBYTE(v14) = v9;
      v4[2] = v12 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v4[5 * v12 + 4]);
      --v3;
    }
    while (v3);
  }
  return v4;
}

_QWORD *sub_1007EE788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v16 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v2 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1011091A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009B358(0, v9, 0);
    v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v12 = *(_QWORD *)(v2 + 72);
    do
    {
      sub_10005972C(v11, (uint64_t)v4, type metadata accessor for BeaconKeyManager.IndexInformation);
      swift_dynamicCast(v8, v4, v16, v5, 7);
      v10 = v17;
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      {
        sub_10009B358(0, v10[2] + 1, 1);
        v10 = v17;
      }
      v14 = v10[2];
      v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_10009B358(v13 > 1, v14 + 1, 1);
        v10 = v17;
      }
      v10[2] = v14 + 1;
      sub_100005CF0((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, &qword_1011091A0);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  return v10;
}

uint64_t sub_1007EE944(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void **v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _QWORD *v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v18 = _swiftEmptyArrayStorage;
  result = sub_10009B5C0(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v3 = v18;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v5 = 0;
      do
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v18 = v3;
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10009B5C0(v7 > 1, v8 + 1, 1);
          v3 = v18;
        }
        ++v5;
        v16 = sub_10000F4A0(0, &qword_10110AD20, RTLocationOfInterest_ptr);
        v17 = &off_1010AA320;
        *(_QWORD *)&v15 = v6;
        v3[2] = v8 + 1;
        sub_10000F9FC(&v15, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      v9 = (void **)(a1 + 32);
      do
      {
        v10 = *v9;
        v18 = v3;
        v12 = v3[2];
        v11 = v3[3];
        v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_10009B5C0(v11 > 1, v12 + 1, 1);
          v3 = v18;
        }
        v16 = sub_10000F4A0(0, &qword_10110AD20, RTLocationOfInterest_ptr);
        v17 = &off_1010AA320;
        *(_QWORD *)&v15 = v13;
        v3[2] = v12 + 1;
        sub_10000F9FC(&v15, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007EEB34(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[2];
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_10009A828(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10009A828(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10009A828(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v4 += 2;
      v2[2] = v7 + 1;
      sub_10010F90C(v10, &v2[4 * v7 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1007EEC58@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  unsigned int v10;
  id v11;
  NSString v12;
  id v13;
  id v14;
  id v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v10 = objc_msgSend(v9, "isInternalBuild");

  if (!v10)
    return static Date.trustedNow.getter(a1);
  v11 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "stringForKey:", v12);

  if (!v13)
    return static Date.trustedNow.getter(a1);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
  v15 = objc_msgSend(v14, "dateFromString:", v13);

  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_9;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v15);

  v16 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
  v16(v8, v5, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
LABEL_9:
    sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
    return static Date.trustedNow.getter(a1);
  }
  v17 = ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(a1, v8, v2);
  v18 = static os_log_type_t.error.getter(v17);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v19 = qword_1011B7D38;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v23 = dispatch thunk of CustomStringConvertible.description.getter(v2, v22);
  v25 = v24;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_10001AA00();
  *(_QWORD *)(v21 + 32) = v23;
  *(_QWORD *)(v21 + 40) = v25;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Forced pairing date: %@", 23, 2, v21);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1007EEF64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100CA7EDC((uint64_t)&off_101047F40);
  v6 = sub_100A0658C(a1, v5);
  swift_bridgeObjectRelease(v5);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B77E8);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(18, -1);
    *(_DWORD *)v11 = 134218240;
    v20 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 1024;
    LODWORD(v20) = v6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 4, v11 + 14, v11 + 18);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Posting SPBeaconsChangedNotification for reason %ld, bypass rate-limit %{BOOL}d", (uint8_t *)v11, 0x12u);
    swift_slowDealloc(v11, -1, -1);
  }

  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(v6 & 1);
  v12 = sub_100CA7EDC((uint64_t)&off_101047F70);
  v13 = sub_100A0658C(a1, v12);
  swift_bridgeObjectRelease(v12);
  if ((v13 & 1) != 0)
    sub_10085A268();
  v14 = sub_100CA7EDC((uint64_t)&off_101047F98);
  v15 = sub_100A0658C(a1, v14);
  result = swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
    type metadata accessor for Transaction(0);
    result = static Transaction.asyncTask(name:block:)("BeaconStore.taskInfoStateChanged", 32, 2, &unk_10110A928, 0);
  }
  if (a1 == 7)
  {
    v17 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v4, 1, 1, v17);
    v18 = swift_allocObject(&unk_101094588, 32, 7);
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
    v19 = sub_100691AC0((uint64_t)v4, (uint64_t)&unk_10110A920, v18);
    return swift_release(v19);
  }
  return result;
}

uint64_t sub_1007EF200()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  v11 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_100877B34;
  v23 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101094B90;
  v12 = _Block_copy(aBlock);
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v1, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  swift_release(v23);
  type metadata accessor for Transaction(0);
  return static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A980, 0);
}

uint64_t sub_1007EF48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  BOOL v12;

  v1 = v0;
  v2 = sub_10080FABC();
  result = sub_10085A600(v2);
  if (v2 > 0 != (result & 1))
  {
    v4 = static os_log_type_t.default.getter(result);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v5 = v2 > 0;
    v6 = qword_1011B7D38;
    v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v8 = swift_allocObject(v7, 112, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100E22B10;
    v9 = sub_10085A600(v8);
    *(_QWORD *)(v8 + 56) = &type metadata for Bool;
    *(_QWORD *)(v8 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v8 + 32) = v9 & 1;
    *(_QWORD *)(v8 + 96) = &type metadata for Bool;
    *(_QWORD *)(v8 + 104) = &protocol witness table for Bool;
    *(_BYTE *)(v8 + 72) = v5;
    os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v6, "processBeaconStoreChanges FindMyAccessory %{public}d %{public}d - SEND", 70, 2, v8);
    swift_bridgeObjectRelease(v8);
    sub_10085A8D4(v5);
    v12 = v5;
    result = CurrentValueSubject.send(_:)(&v12);
  }
  v10 = *(void (**)(uint64_t))(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  if (v10)
  {
    v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
    swift_retain();
    v10(v1);
    return sub_10001D8A8((uint64_t)v10, v11);
  }
  return result;
}

BOOL sub_1007EF5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  v5 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return (dispatch thunk of static Comparable.< infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

BOOL sub_1007EF65C(uint64_t (*a1)(char *), _BOOL8 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  int v16;
  BOOL v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  _BOOL8 v31;
  uint64_t (*v32)(char *);
  uint64_t v33;

  v4 = v3;
  v31 = a2;
  v32 = a1;
  v33 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 + 16);
  if (v12)
  {
    v13 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v28 = *(_QWORD *)(v6 + 72);
    v29 = v8;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v26 = a3;
    swift_bridgeObjectRetain(a3);
    while (1)
    {
      v14 = v33;
      v30(v11, v13, v33);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v15(v11, 0, 1, v14);
      v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v14);
      v17 = v16 != 1;
      if (v16 == 1)
      {
        a3 = v26;
        goto LABEL_13;
      }
      v27 = 1;
      v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v19 = v6;
      v20 = v29;
      v18(v29, v11, v14);
      v17 = v31;
      v21 = v32(v20);
      if (v4)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
        swift_bridgeObjectRelease(v26);
        return v17;
      }
      v22 = v21;
      v23 = v15;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v20, v14);
      if ((v22 & 1) != 0)
        break;
      v13 += v28;
      --v12;
      v4 = 0;
      v6 = v19;
      if (!v12)
      {
        a3 = v26;
        goto LABEL_9;
      }
    }
    a3 = v26;
    v17 = v27;
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain(a3);
LABEL_9:
    v23(v11, 1, 1, v33);
    v17 = 0;
  }
LABEL_13:
  swift_bridgeObjectRelease(a3);
  return v17;
}

uint64_t sub_1007EF884(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  char v18;
  char v19;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v12++, 1))
      break;
    if (v12 >= v10)
      goto LABEL_27;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
    {
      v17 = v12 + 1;
      if (v12 + 1 >= v10)
        goto LABEL_27;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (!v16)
      {
        v17 = v12 + 2;
        if (v12 + 2 >= v10)
          goto LABEL_27;
        v16 = *(_QWORD *)(v6 + 8 * v17);
        if (!v16)
        {
          v17 = v12 + 3;
          if (v12 + 3 >= v10)
            goto LABEL_27;
          v16 = *(_QWORD *)(v6 + 8 * v17);
          if (!v16)
          {
            v17 = v12 + 4;
            if (v12 + 4 >= v10)
            {
LABEL_27:
              swift_release(a3);
              v18 = 0;
              return v18 & 1;
            }
            v16 = *(_QWORD *)(v6 + 8 * v17);
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_30;
                if (v12 >= v10)
                  goto LABEL_27;
                v16 = *(_QWORD *)(v6 + 8 * v12);
                ++v17;
                if (v16)
                  goto LABEL_18;
              }
            }
          }
        }
      }
      v12 = v17;
    }
LABEL_18:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_19:
    v19 = *(_BYTE *)(*(_QWORD *)(a3 + 56) + v14);
    result = a1(&v19);
    if (v3)
    {
      swift_release(a3);
      return v18 & 1;
    }
    if ((result & 1) != 0)
    {
      swift_release(a3);
      v18 = 1;
      return v18 & 1;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1007EFA24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t result;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  void (*v113)(char *, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t);
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint64_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  Swift::String v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  void *v148;
  Swift::String v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  Swift::String v158;
  Swift::String v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint8_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE v185[16];

  v177 = a1;
  v2 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v2);
  v165 = (char *)&v160 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = type metadata accessor for BeaconProductInfoRecord(0);
  v162 = *(_QWORD *)(v164 - 8);
  __chkstk_darwin(v164);
  v160 = (uint64_t)&v160 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v5);
  v168 = (uint64_t)&v160 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for OwnedBeaconGroup(0);
  v167 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v166 = (uint64_t)&v160 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v172 = (uint64_t)&v160 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v178 = v10;
  v179 = v11;
  v12 = __chkstk_darwin(v10);
  v176 = (uint8_t *)&v160 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v173 = (char *)&v160 - v15;
  v16 = __chkstk_darwin(v14);
  v171 = (char *)&v160 - v17;
  v18 = __chkstk_darwin(v16);
  v163 = (char *)&v160 - v19;
  v20 = __chkstk_darwin(v18);
  v161 = (char *)&v160 - v21;
  __chkstk_darwin(v20);
  v169 = (char *)&v160 - v22;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v23);
  v25 = (char *)&v160 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for OwnedBeaconRecord(0);
  v26 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v174 = (uint64_t)&v160 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v28);
  v30 = (char *)&v160 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for BeaconNamingRecord(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (uint8_t *)&v160 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = v1;
  v35 = v177;
  v181 = v177;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10029826C);
  v36 = v31;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
  {
    sub_100004048((uint64_t)v30, (uint64_t *)&unk_101105880);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B77E8);
    v38 = v178;
    v39 = v179;
    v40 = (uint64_t)v176;
    v41 = (*(uint64_t (**)(uint8_t *, uint64_t, uint64_t))(v179 + 16))(v176, v35, v178);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = v40;
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v182 = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v38, v47);
      v184 = sub_100016940(v48, v49, &v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v44, v38);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "groupedBeaconDisplayName: No beacon naming record for beacon %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v38);
    }

    return 0;
  }
  sub_1000126EC((uint64_t)v30, (uint64_t)v34, type metadata accessor for BeaconNamingRecord);
  v50 = v35;
  sub_10080B950(v35, (uint64_t)v25);
  v51 = v175;
  v52 = v34;
  v53 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v25, 1, v175) == 1)
  {
    sub_100004048((uint64_t)v25, (uint64_t *)&unk_1010F47C0);
    v54 = v178;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v55 = type metadata accessor for Logger(0);
    sub_10001A9E8(v55, (uint64_t)qword_1011B77E8);
    v56 = v179;
    v57 = v173;
    v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v179 + 16))(v173, v53, v54);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(12, -1);
      v177 = v36;
      v62 = (uint8_t *)v61;
      v63 = swift_slowAlloc(32, -1);
      v182 = v63;
      *(_DWORD *)v62 = 136315138;
      v176 = v62 + 4;
      v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v54, v64);
      v184 = sub_100016940(v65, v66, &v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v176, v62 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v54);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "groupedBeaconDisplayName: No beacon record for beacon identifier %s", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      v67 = v62;
      v36 = v177;
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v54);
    }

    v74 = (uint64_t *)&v52[*(int *)(v36 + 32)];
    v68 = *v74;
    swift_bridgeObjectRetain(v74[1]);
    v75 = type metadata accessor for BeaconNamingRecord;
    v76 = (uint64_t)v52;
    goto LABEL_25;
  }
  v176 = v34;
  v69 = v174;
  sub_1000126EC((uint64_t)v25, v174, type metadata accessor for OwnedBeaconRecord);
  v70 = v69 + *(int *)(v51 + 28);
  v71 = v172;
  sub_10000F9B8(v70, v172, &qword_1010ED860);
  v73 = v178;
  v72 = v179;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v71, 1, v178) == 1)
  {
    sub_100004048(v71, &qword_1010ED860);
LABEL_19:
    v81 = v171;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v82 = type metadata accessor for Logger(0);
    sub_10001A9E8(v82, (uint64_t)qword_1011B77E8);
    v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 16))(v81, v53, v73);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.default.getter(v84);
    if (os_log_type_enabled(v84, v85))
    {
      v86 = swift_slowAlloc(12, -1);
      v177 = v36;
      v87 = (uint8_t *)v86;
      v88 = swift_slowAlloc(32, -1);
      v182 = v88;
      *(_DWORD *)v87 = 136315138;
      v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v73, v89);
      v184 = sub_100016940(v90, v91, &v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v81, v73);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "groupedBeaconDisplayName: Beacon %s does not belong to an item group or group record is missing.", v87, 0xCu);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      v92 = v87;
      v36 = v177;
      swift_slowDealloc(v92, -1, -1);

      v93 = v174;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v72 + 8))(v81, v73);
      v93 = v69;
    }
    sub_1000126B0(v93, type metadata accessor for OwnedBeaconRecord);
    v94 = *(int *)(v36 + 32);
    v95 = (uint64_t)v176;
    v96 = (uint64_t *)&v176[v94];
    v68 = *v96;
    swift_bridgeObjectRetain(v96[1]);
    v75 = type metadata accessor for BeaconNamingRecord;
    v76 = v95;
    goto LABEL_25;
  }
  v77 = v53;
  v78 = (uint64_t)v169;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 32))(v169, v71, v73);
  v79 = v168;
  sub_10081EDA8(v78, v168);
  v80 = v170;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v79, 1, v170) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v78, v73);
    sub_100004048(v79, (uint64_t *)&unk_1010FF7F0);
    v53 = v77;
    goto LABEL_19;
  }
  v98 = v166;
  sub_1000126EC(v79, v166, type metadata accessor for OwnedBeaconGroup);
  v99 = *(_QWORD *)(*(_QWORD *)(v98 + *(int *)(v80 + 40)) + 16);
  if (v99 < 0x100)
  {
    v100 = v179;
    v101 = (uint64_t)v165;
    if (v99 == 1)
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v102 = type metadata accessor for Logger(0);
      sub_10001A9E8(v102, (uint64_t)qword_1011B77E8);
      v103 = v163;
      v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 16))(v163, v77, v73);
      v105 = v100;
      v106 = Logger.logObject.getter(v104);
      v107 = static os_log_type_t.default.getter(v106);
      if (os_log_type_enabled(v106, v107))
      {
        v108 = (uint8_t *)swift_slowAlloc(12, -1);
        v109 = swift_slowAlloc(32, -1);
        v182 = v109;
        *(_DWORD *)v108 = 136315138;
        v110 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v111 = dispatch thunk of CustomStringConvertible.description.getter(v73, v110);
        v184 = sub_100016940(v111, v112, &v182);
        v80 = v170;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v108 + 4, v108 + 12);
        swift_bridgeObjectRelease();
        v113 = *(void (**)(char *, uint64_t))(v105 + 8);
        v113(v103, v73);
        _os_log_impl((void *)&_mh_execute_header, v106, v107, "groupedBeaconDisplayName: Beacon %s is from a single group.", v108, 0xCu);
        swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v108, -1, -1);

        v113(v169, v73);
        v114 = v174;
        v98 = v166;
      }
      else
      {

        v120 = *(void (**)(char *, uint64_t))(v105 + 8);
        v120(v103, v73);
        v120((char *)v78, v73);
        v114 = v69;
      }
      sub_1000126B0(v114, type metadata accessor for OwnedBeaconRecord);
      sub_1000126B0((uint64_t)v176, type metadata accessor for BeaconNamingRecord);
      v121 = (uint64_t *)(v98 + *(int *)(v80 + 36));
      v68 = *v121;
      swift_bridgeObjectRetain(v121[1]);
      v75 = type metadata accessor for OwnedBeaconGroup;
      v76 = v98;
    }
    else
    {
      v115 = sub_10085DD20(v69);
      sub_10081BB64(v77, v101);
      v116 = (uint64_t)v165;
      v117 = v164;
      v118 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v162 + 48))(v165, 1, v164);
      if (v118 == 1)
      {
        v119 = v179;
        sub_100004048(v116, &qword_10110EEB0);
      }
      else
      {
        v122 = v116;
        v123 = v160;
        sub_1000126EC(v122, v160, type metadata accessor for BeaconProductInfoRecord);
        v124 = *(_QWORD *)(v123 + *(int *)(v117 + 72));
        if (v124)
        {
          v125 = *(_QWORD *)(v124 + 16);
          if (v125)
          {
            v126 = (uint64_t *)(v124 + 48);
            while (v115 != *((unsigned __int8 *)v126 - 16))
            {
              v126 += 8;
              if (!--v125)
                goto LABEL_43;
            }
            v150 = *v126;
            v151 = v126[1];
            v152 = (void *)v126[2];
            v153 = v69;
            v154 = v126[4];
            v155 = (uint64_t *)(v98 + *(int *)(v80 + 36));
            v156 = v123;
            v157 = v155[1];
            v182 = *v155;
            v183 = v157;
            swift_bridgeObjectRetain(v154);
            swift_bridgeObjectRetain(v157);
            swift_bridgeObjectRetain(v150);
            swift_bridgeObjectRetain(v152);
            v158._countAndFlagsBits = 2108704;
            v158._object = (void *)0xE300000000000000;
            String.append(_:)(v158);
            swift_bridgeObjectRetain(v152);
            v159._countAndFlagsBits = v151;
            v159._object = v152;
            String.append(_:)(v159);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n(v152, 2);
            swift_bridgeObjectRelease();
            v68 = v182;
            sub_1000126B0(v156, type metadata accessor for BeaconProductInfoRecord);
            sub_1000126B0(v98, type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v78, v73);
            sub_1000126B0(v153, type metadata accessor for OwnedBeaconRecord);
            v75 = type metadata accessor for BeaconNamingRecord;
            v76 = (uint64_t)v176;
            goto LABEL_25;
          }
        }
LABEL_43:
        v119 = v179;
        sub_1000126B0(v123, type metadata accessor for BeaconProductInfoRecord);
      }
      v127 = v161;
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v128 = type metadata accessor for Logger(0);
      sub_10001A9E8(v128, (uint64_t)qword_1011B77E8);
      v129 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v127, v77, v73);
      v130 = Logger.logObject.getter(v129);
      v131 = static os_log_type_t.error.getter(v130);
      if (os_log_type_enabled(v130, v131))
      {
        v132 = swift_slowAlloc(12, -1);
        v177 = v36;
        v133 = (uint8_t *)v132;
        v134 = swift_slowAlloc(32, -1);
        v182 = v134;
        *(_DWORD *)v133 = 136315138;
        v135 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v136 = dispatch thunk of CustomStringConvertible.description.getter(v73, v135);
        v184 = sub_100016940(v136, v137, &v182);
        v78 = (uint64_t)v169;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v133 + 4, v133 + 12);
        swift_bridgeObjectRelease();
        v138 = *(void (**)(char *, uint64_t))(v119 + 8);
        v138(v127, v73);
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "groupedBeaconDisplayName: No product info or partInfo for %s.", v133, 0xCu);
        swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
        v139 = v134;
        v69 = v174;
        swift_slowDealloc(v139, -1, -1);
        v140 = v133;
        v36 = v177;
        swift_slowDealloc(v140, -1, -1);
      }
      else
      {
        v138 = *(void (**)(char *, uint64_t))(v119 + 8);
        v138(v127, v73);
      }

      v141 = v166;
      v142 = (uint64_t *)(v166 + *(int *)(v170 + 36));
      v143 = v142[1];
      v182 = *v142;
      v183 = v143;
      swift_bridgeObjectRetain(v143);
      v144._countAndFlagsBits = 2108704;
      v144._object = (void *)0xE300000000000000;
      String.append(_:)(v144);
      v145 = (uint64_t)v176;
      v146 = (uint64_t *)&v176[*(int *)(v36 + 32)];
      v147 = *v146;
      v148 = (void *)v146[1];
      swift_bridgeObjectRetain(v148);
      v149._countAndFlagsBits = v147;
      v149._object = v148;
      String.append(_:)(v149);
      swift_bridgeObjectRelease();
      v68 = v182;
      sub_1000126B0(v141, type metadata accessor for OwnedBeaconGroup);
      v138((char *)v78, v73);
      sub_1000126B0(v69, type metadata accessor for OwnedBeaconRecord);
      v75 = type metadata accessor for BeaconNamingRecord;
      v76 = v145;
    }
LABEL_25:
    sub_1000126B0(v76, v75);
    return v68;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_1007F0B38@<X0>(__int128 *a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  void *v24;
  unint64_t v25;
  id v26;
  void *v27;
  unint64_t v28;
  id v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  __int128 v45;
  unsigned __int8 v46;
  char *v47;
  int *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __int128 *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  __int128 v73;
  __int128 v74;
  _QWORD v75[2];
  _QWORD v76[2];
  __int128 v77;

  v68 = a1;
  v72 = a3;
  v4 = type metadata accessor for Date(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v7);
  v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for StableIdentifier(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v59 - v18);
  v20 = objc_msgSend(a2, "systemVersion");
  if (!v20)
    goto LABEL_20;
  v21 = v20;
  v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v71 = v22;

  if ((uint64_t)objc_msgSend(a2, "vendorId") < 1
    || (uint64_t)objc_msgSend(a2, "productId") < 1
    || (v23 = objc_msgSend(a2, "ecid")) == 0)
  {
LABEL_19:
    v20 = (id)swift_bridgeObjectRelease();
LABEL_20:
    v52 = static os_log_type_t.error.getter(v20);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    os_log(_:dso:log:_:_:)(v52, &_mh_execute_header, qword_1011B7D88, "generateOwnedBeaconRecord: could not get basic device info from the session.", 76, 2, _swiftEmptyArrayStorage);
    v53 = type metadata accessor for OwnedBeaconRecord(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v72, 1, 1, v53);
  }
  v24 = v23;
  v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v66 = v25;

  v26 = objc_msgSend(a2, "chipId");
  if (!v26)
  {
LABEL_18:
    sub_10001BC14(v65, v66);
    goto LABEL_19;
  }
  v27 = v26;
  v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v64 = v28;

  v29 = objc_msgSend(a2, "serialNumber");
  if (!v29)
  {
    sub_10001BC14(v63, v64);
    goto LABEL_18;
  }
  v30 = v29;
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v62 = v31;

  v32 = Data.hexString.getter(v63, v64);
  v34 = HIBYTE(v33) & 0xF;
  v61 = v33;
  if ((v33 & 0x2000000000000000) == 0)
    v34 = v32 & 0xFFFFFFFFFFFFLL;
  if (v34)
  {
    v35 = v32;
    v36 = Data.hexString.getter(v65, v66);
    v38 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0)
      v38 = v36 & 0xFFFFFFFFFFFFLL;
    if (v38)
    {
      v39 = v62;
      v40 = HIBYTE(v62) & 0xF;
      v41 = v60;
      if ((v62 & 0x2000000000000000) == 0)
        v40 = v60 & 0xFFFFFFFFFFFFLL;
      if (v40)
      {
        v42 = v61;
        *v19 = v35;
        v19[1] = v42;
        v19[2] = v36;
        v19[3] = v37;
        v19[4] = v41;
        v19[5] = v39;
        v43 = swift_storeEnumTagMultiPayload(v19, v14, 1);
        UUID.init()(v43);
        sub_10005972C((uint64_t)v19, (uint64_t)v17, type metadata accessor for StableIdentifier);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
        sub_1007EEC58((uint64_t)v6);
        v44 = v68;
        v77 = v68[2];
        sub_100005CF0((uint64_t)(v68 + 3), (uint64_t)v76, &qword_1010ECB38);
        sub_100005CF0((uint64_t)(v44 + 4), (uint64_t)v75, &qword_1010ECB38);
        v45 = *v44;
        v73 = v44[1];
        v74 = v45;
        sub_100059DE8((uint64_t)&v77);
        sub_10007D62C(v76);
        sub_10007D62C(v75);
        sub_100059DE8((uint64_t)&v74);
        sub_100059DE8((uint64_t)&v73);
        v68 = (__int128 *)objc_msgSend(a2, "vendorId");
        v62 = (unint64_t)objc_msgSend(a2, "productId");
        LODWORD(v61) = sub_100DC72C8((unint64_t)objc_msgSend(a2, "batteryLevel"));
        v46 = objc_msgSend(a2, "isZeus");
        sub_10001BC14(v65, v66);
        sub_10001BC14(v63, v64);
        sub_1000126B0((uint64_t)v19, type metadata accessor for StableIdentifier);
        v47 = v72;
        *(_OWORD *)v72 = xmmword_100E22FC0;
        v48 = (int *)type metadata accessor for OwnedBeaconRecord(0);
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v47[v48[5]], v13, v10);
        sub_1000126EC((uint64_t)v17, (uint64_t)&v47[v48[6]], type metadata accessor for StableIdentifier);
        sub_100005CF0((uint64_t)v9, (uint64_t)&v47[v48[7]], &qword_1010ED860);
        (*(void (**)(char *, char *, uint64_t))(v69 + 32))(&v47[v48[8]], v6, v70);
        *(_OWORD *)&v47[v48[9]] = v77;
        sub_100005CF0((uint64_t)v76, (uint64_t)&v47[v48[10]], &qword_1010ECB38);
        sub_100005CF0((uint64_t)v75, (uint64_t)&v47[v48[11]], &qword_1010ECB38);
        *(_OWORD *)&v47[v48[12]] = v74;
        *(_OWORD *)&v47[v48[13]] = v73;
        v49 = &v47[v48[14]];
        *(_QWORD *)v49 = 0;
        *((_QWORD *)v49 + 1) = 0xE000000000000000;
        v50 = (uint64_t *)&v47[v48[15]];
        *v50 = v67;
        v50[1] = v71;
        *(_QWORD *)&v47[v48[16]] = v68;
        *(_QWORD *)&v47[v48[17]] = v62;
        v47[v48[18]] = 3;
        v47[v48[19]] = v61;
        v47[v48[20]] = v46;
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v48 - 1) + 56))(v47, 0, 1, v48);
      }
      v62 = v37;
      v54 = v72;
    }
    else
    {
      v54 = v72;
    }
    swift_bridgeObjectRelease();
    v55 = v63;
  }
  else
  {
    v54 = v72;
    v55 = v63;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v56 = swift_bridgeObjectRelease();
  v57 = static os_log_type_t.error.getter(v56);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, qword_1011B7D88, "generateOwnedBeaconRecord: invalid parameters for StableIdentifier.", 67, 2, _swiftEmptyArrayStorage);
  sub_10001BC14(v65, v66);
  sub_10001BC14(v55, v64);
  v58 = type metadata accessor for OwnedBeaconRecord(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v54, 1, 1, v58);
}

uint64_t sub_1007F1214(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(void);
  uint64_t v50;
  void *v51;
  void *v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  int64_t v56;
  NSObject *v57;
  id v58;
  void **v59;
  NSObject *v60;
  Class isa;
  uint64_t v62;
  unint64_t *v63;
  NSObject **v64;
  unint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  int *v78;
  void (*v79)(char *, char *, void *);
  void *v80;
  char *v81;
  char *v82;
  void *v83;
  char *v84;
  char *v85;
  int *v86;
  __int128 *v87;
  uint64_t v88;
  char *v89;
  void (*v90)(void);
  void (*v91)(char *, char *, uint64_t);
  char *v92;
  uint64_t v93;
  uint64_t v94;
  int *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  NSObject *v108;
  uint64_t v109;
  NSObject *v110;
  NSObject *v111;
  void (*v112)(NSObject *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  void (*v125)(char *, void *);
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  NSObject *v165;
  NSObject *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  os_log_type_t v171;
  uint64_t v172;
  void **v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  uint64_t v212;
  uint64_t v213;
  NSObject *v214;
  NSObject *v215;
  NSObject *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  void *v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint64_t v226;
  void **v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  _QWORD *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  NSObject *v296;
  NSObject *v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  __int128 *v307;
  uint64_t v308;
  uint64_t v309;
  void (*v310)(void);
  __int128 v311;
  void *v312;
  char *v313;
  uint64_t v314;
  void **aBlock;
  uint64_t v316;
  uint64_t (*v317)(uint64_t);
  void *v318;
  uint64_t (*v319)();
  _QWORD *v320;
  uint64_t v321;
  char v322[8];

  v282 = a4;
  v281 = a3;
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v273 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v274 = v8;
  v275 = (uint64_t)&v257 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconProductInfoRecord(0);
  __chkstk_darwin(v9);
  v261 = (uint64_t)&v257 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v11);
  v264 = (uint64_t)&v257 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v263 = type metadata accessor for AccessoryProductInfo(0);
  v262 = *(_QWORD *)(v263 - 8);
  v13 = __chkstk_darwin(v263);
  v258 = (uint64_t)&v257 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v260 = (uint64_t)&v257 - v15;
  v287 = type metadata accessor for DispatchWorkItemFlags(0);
  v283 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287);
  v284 = (char *)&v257 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = type metadata accessor for DispatchQoS(0);
  v285 = *(_QWORD *)(v288 - 8);
  __chkstk_darwin(v288);
  v286 = (char *)&v257 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = type metadata accessor for DispatchTime(0);
  v295 = *(_QWORD *)(v298 - 8);
  v18 = __chkstk_darwin(v298);
  v296 = ((char *)&v257 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v297 = ((char *)&v257 - v20);
  v294 = type metadata accessor for KeySyncRecord(0);
  v268 = *(_QWORD *)(v294 - 8);
  v21 = __chkstk_darwin(v294);
  v270 = (uint64_t)&v257 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v269 = v22;
  __chkstk_darwin(v21);
  v306 = (uint64_t)&v257 - v23;
  v290 = type metadata accessor for KeyAlignmentRecord(0);
  v265 = *(_QWORD *)(v290 - 8);
  v24 = __chkstk_darwin(v290);
  v267 = (uint64_t)&v257 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v266 = v25;
  __chkstk_darwin(v24);
  v307 = (__int128 *)((char *)&v257 - v26);
  v289 = type metadata accessor for BeaconNamingRecord(0);
  v291 = *(_QWORD *)(v289 - 8);
  v27 = __chkstk_darwin(v289);
  v293 = (uint64_t)&v257 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v292 = v28;
  __chkstk_darwin(v27);
  v300 = (char *)&v257 - v29;
  v303 = type metadata accessor for Date(0);
  v301 = *(_QWORD *)(v303 - 8);
  __chkstk_darwin(v303);
  v31 = (char *)&v257 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for UUID(0);
  v33 = __chkstk_darwin(v32);
  v259 = (char *)&v257 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v257 = (char *)&v257 - v36;
  v37 = __chkstk_darwin(v35);
  v278 = (char *)&v257 - v38;
  v39 = __chkstk_darwin(v37);
  v280 = (char *)&v257 - v40;
  v41 = __chkstk_darwin(v39);
  v305 = (char *)&v257 - v42;
  v43 = __chkstk_darwin(v41);
  v304 = (char *)&v257 - v44;
  v276 = v45;
  __chkstk_darwin(v43);
  v46 = *(int *)(v7 + 20);
  v277 = a1;
  v47 = a1 + v46;
  v308 = v48;
  v49 = *(void (**)(void))(v48 + 16);
  v313 = (char *)&v257 - v50;
  v271 = v47;
  v312 = v51;
  v310 = v49;
  v49();
  v302 = v31;
  sub_1007EEC58((uint64_t)v31);
  if (a2[2])
    v52 = (void *)a2[2];
  else
    v52 = (void *)SPBeaconRoleIdUndefined;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v272 = 0;
  v299 = sub_100C1AF0C((uint64_t)aBlock);
  swift_bridgeObjectRelease();
  v53 = a2[4];
  v279 = a2;
  if (v53 && v52 == (void *)SPBeaconRoleIdOther)
  {
    v54 = (void *)a2[3];
    swift_bridgeObjectRetain(v53);
    v55 = swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v56 = *(_QWORD *)(v299 + 16);
  if (v56)
  {
    v57 = v299;
    aBlock = (void **)_swiftEmptyArrayStorage;
    sub_10009A9BC(0, v56, 0);
    v58 = 0;
    v59 = aBlock;
    v60 = v57 + 4;
    *(_QWORD *)&v311 = v57 + 4;
    while (1)
    {
      isa = v60[4 * (_QWORD)v58 + 3].isa;
      v62 = *((_QWORD *)isa + 2);
      if (v62)
      {
        if (*((void **)isa + 4) == v52)
        {
          v63 = (unint64_t *)((char *)isa + 64);
          v64 = (NSObject **)((char *)isa + 56);
          v65 = (unint64_t *)((char *)isa + 48);
          v66 = (uint64_t *)((char *)isa + 40);
LABEL_21:
          v57 = *v64;
          v4 = *v66;
          v69 = *v63;
          v70 = *v65;
          swift_bridgeObjectRetain(*v65);
          swift_bridgeObjectRetain(v69);
          v60 = v311;
          goto LABEL_22;
        }
        if (v62 != 1)
        {
          v63 = (unint64_t *)((char *)isa + 104);
          v67 = 1;
          while (1)
          {
            v68 = v67 + 1;
            if (__OFADD__(v67, 1))
              break;
            if ((void *)*(v63 - 4) == v52)
            {
              v66 = (uint64_t *)(v63 - 3);
              v65 = v63 - 2;
              v64 = (NSObject **)(v63 - 1);
              goto LABEL_21;
            }
            v63 += 5;
            ++v67;
            if (v68 == v62)
              goto LABEL_19;
          }
          __break(1u);
          goto LABEL_57;
        }
      }
LABEL_19:
      v57 = 0;
      v69 = 0xE000000000000000;
      v4 = 0x4E206D6F74737543;
      v70 = 0xEB00000000656D61;
LABEL_22:
      aBlock = v59;
      v72 = (unint64_t)v59[2];
      v71 = (unint64_t)v59[3];
      if (v72 >= v71 >> 1)
      {
        sub_10009A9BC(v71 > 1, v72 + 1, 1);
        v60 = v311;
        v59 = aBlock;
      }
      v58 = (char *)v58 + 1;
      v59[2] = (void *)(v72 + 1);
      v73 = &v59[5 * v72];
      v73[4] = v52;
      v73[5] = (void *)v4;
      v73[6] = (void *)v70;
      v73[7] = v57;
      v73[8] = (void *)v69;
      if (v58 == (id)v56)
      {
        swift_bridgeObjectRelease();
        a2 = v279;
        if (!v59[2])
          goto LABEL_28;
LABEL_26:
        v54 = v59[7];
        v53 = (unint64_t)v59[8];
        swift_bridgeObjectRetain(v53);
        v55 = swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRelease();
  v59 = (void **)_swiftEmptyArrayStorage;
  if (_swiftEmptyArrayStorage[2])
    goto LABEL_26;
LABEL_28:
  v55 = swift_bridgeObjectRelease();
  v54 = 0;
  v53 = 0xE000000000000000;
LABEL_29:
  UUID.init()(v55);
  ((void (*)(char *, char *, void *))v310)(v305, v313, v312);
  v74 = a2[1];
  if (v74)
  {
    v75 = *a2;
    v76 = a2[1];
  }
  else
  {
    v75 = 0;
    v76 = 0xE000000000000000;
  }
  v311 = xmmword_100E22FC0;
  v77 = v300;
  *(_OWORD *)v300 = xmmword_100E22FC0;
  v78 = (int *)v289;
  v79 = *(void (**)(char *, char *, void *))(v308 + 32);
  v80 = v312;
  v79(&v77[*(int *)(v289 + 20)], v304, v312);
  v81 = &v77[v78[6]];
  v82 = v305;
  v305 = (char *)v79;
  v79(v81, v82, v80);
  *(_QWORD *)&v77[v78[7]] = v52;
  v83 = v80;
  v84 = &v77[v78[8]];
  *(_QWORD *)v84 = v75;
  *((_QWORD *)v84 + 1) = v76;
  v85 = &v77[v78[9]];
  *(_QWORD *)v85 = v54;
  *((_QWORD *)v85 + 1) = v53;
  v86 = (int *)v290;
  v87 = v307;
  swift_bridgeObjectRetain(v74);
  UUID.init()(v88);
  v89 = v313;
  v90 = v310;
  ((void (*)(char *, char *, void *))v310)((char *)v87 + v86[6], v313, v83);
  v91 = *(void (**)(char *, char *, uint64_t))(v301 + 16);
  v92 = v302;
  v93 = v303;
  v91((char *)v87 + v86[8], v302, v303);
  *v87 = v311;
  *(_QWORD *)((char *)v87 + v86[7]) = 1;
  v94 = v306;
  ((void (*)(uint64_t, char *, void *))v90)(v306, v89, v83);
  v95 = (int *)v294;
  v91((char *)(v94 + *(int *)(v294 + 28)), v92, v93);
  v96 = v94 + v95[6];
  v97 = v94 + v95[8];
  v98 = v94 + v95[9];
  v99 = v94 + v95[11];
  *(_QWORD *)(v94 + v95[5]) = 1;
  *(_QWORD *)v96 = 0;
  *(_BYTE *)(v96 + 8) = 1;
  *(_QWORD *)v97 = 1;
  *(_BYTE *)(v97 + 8) = 0;
  *(_QWORD *)v98 = 96;
  *(_BYTE *)(v98 + 8) = 0;
  *(_QWORD *)(v94 + v95[10]) = 1;
  *(_QWORD *)v99 = 0;
  *(_BYTE *)(v99 + 8) = 1;
  v100 = swift_allocObject(&unk_101095578, 24, 7);
  *(_QWORD *)(v100 + 16) = 0;
  v101 = (uint64_t *)(v100 + 16);
  v102 = dispatch_group_create();
  dispatch_group_enter(v102);
  v103 = v293;
  sub_10005972C((uint64_t)v77, v293, type metadata accessor for BeaconNamingRecord);
  v104 = *(unsigned __int8 *)(v291 + 80);
  v105 = (v104 + 24) & ~v104;
  v106 = (v292 + v105 + 7) & 0xFFFFFFFFFFFFFFF8;
  v107 = swift_allocObject(&unk_1010955A0, v106 + 8, v104 | 7);
  *(_QWORD *)(v107 + 16) = v102;
  sub_1000126EC(v103, v107 + v105, type metadata accessor for BeaconNamingRecord);
  *(_QWORD *)(v107 + v106) = v100;
  v108 = v102;
  *(_QWORD *)&v311 = v100;
  swift_retain();
  sub_1008048E0((uint64_t)v77, 0, (uint64_t)sub_10087C41C, v107);
  v109 = swift_release(v107);
  v110 = v296;
  static DispatchTime.now()(v109);
  v111 = v297;
  + infix(_:_:)(v110, 60.0);
  v112 = *(void (**)(NSObject *, uint64_t))(v295 + 8);
  v113 = v298;
  v112(v110, v298);
  v114 = OS_dispatch_group.wait(timeout:)(v111) & 1;
  v112(v111, v113);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v114, 1) & 1) != 0)
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v115 = type metadata accessor for Logger(0);
    sub_10001A9E8(v115, (uint64_t)qword_1011B7DF8);
    v116 = v280;
    v52 = v312;
    v117 = ((uint64_t (*)(char *, char *, void *))v310)(v280, v313, v312);
    v118 = Logger.logObject.getter(v117);
    v119 = static os_log_type_t.error.getter(v118);
    if (os_log_type_enabled(v118, v119))
    {
      v120 = swift_slowAlloc(22, -1);
      v121 = (void **)swift_slowAlloc(32, -1);
      aBlock = v121;
      *(_DWORD *)v120 = 141558275;
      v321 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, v322, v120 + 4, v120 + 12);
      *(_WORD *)(v120 + 12) = 2081;
      v122 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v123 = dispatch thunk of CustomStringConvertible.description.getter(v52, v122);
      v321 = sub_100016940(v123, v124, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v321, v322, v120 + 14, v120 + 22);
      swift_bridgeObjectRelease();
      v125 = *(void (**)(char *, void *))(v308 + 8);
      v125(v116, v52);
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "Timed out saving beacon naming record for beacon %{private,mask.hash}s", (uint8_t *)v120, 0x16u);
      swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1, -1);
      swift_slowDealloc(v120, -1, -1);
    }
    else
    {
      v125 = *(void (**)(char *, void *))(v308 + 8);
      v125(v116, v52);
    }

    v138 = swift_allocObject(&unk_101095758, 32, 7);
    v139 = v282;
    *(_QWORD *)(v138 + 16) = v281;
    *(_QWORD *)(v138 + 24) = v139;
    v319 = sub_10087CA2C;
    v320 = (_QWORD *)v138;
    aBlock = _NSConcreteStackBlock;
    v316 = 1107296256;
    v317 = sub_100016FB8;
    v318 = &unk_101095770;
    v140 = _Block_copy(&aBlock);
    v141 = swift_retain();
    v142 = v286;
    static DispatchQoS.unspecified.getter(v141);
    v321 = (uint64_t)_swiftEmptyArrayStorage;
    v143 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v144 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v145 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v146 = v284;
    v147 = v144;
    v148 = v287;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v321, v147, v145, v287, v143);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v142, v146, v140);
    _Block_release(v140);

    (*(void (**)(char *, uint64_t))(v283 + 8))(v146, v148);
    (*(void (**)(char *, uint64_t))(v285 + 8))(v142, v288);
LABEL_41:
    sub_1000126B0(v306, type metadata accessor for KeySyncRecord);
    sub_1000126B0((uint64_t)v307, type metadata accessor for KeyAlignmentRecord);
    sub_1000126B0((uint64_t)v300, type metadata accessor for BeaconNamingRecord);
    (*(void (**)(char *, uint64_t))(v301 + 8))(v302, v303);
    v125(v313, v52);
    goto LABEL_42;
  }
  swift_beginAccess(v101, &v321, 0, 0);
  v126 = *v101;
  if (!*v101)
  {
    v152 = sub_1009A2EDC();
    v52 = v312;
    if ((v152 & 1) != 0)
    {
      v153 = type metadata accessor for PairingConfig(0);
      v154 = v264;
      sub_10000F9B8((uint64_t)v279 + *(int *)(v153 + 28), v264, (uint64_t *)&unk_10111C0A0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v262 + 48))(v154, 1, v263) == 1)
      {
        v155 = sub_100004048(v154, (uint64_t *)&unk_10111C0A0);
        v156 = static os_log_type_t.error.getter(v155);
        if (qword_1010EA310 != -1)
          swift_once(&qword_1010EA310, sub_100B5E2C8);
        os_log(_:dso:log:_:_:)(v156, &_mh_execute_header, qword_1011B7DF0, "Missing info for BeaconProductInfoRecord!", 41, 2, _swiftEmptyArrayStorage);
LABEL_72:

        sub_1000126B0(v306, type metadata accessor for KeySyncRecord);
        sub_1000126B0((uint64_t)v307, type metadata accessor for KeyAlignmentRecord);
        sub_1000126B0((uint64_t)v300, type metadata accessor for BeaconNamingRecord);
        (*(void (**)(char *, uint64_t))(v301 + 8))(v302, v303);
        (*(void (**)(char *, void *))(v308 + 8))(v313, v52);
        v150 = (_QWORD *)v311;
        return swift_release(v150);
      }
      v157 = v154;
      v158 = v260;
      sub_1000126EC(v157, v260, type metadata accessor for AccessoryProductInfo);
      v159 = v258;
      sub_10005972C(v158, v258, type metadata accessor for AccessoryProductInfo);
      v160 = (uint64_t)v278;
      ((void (*)(char *, char *, void *))v310)(v278, v313, v52);
      v161 = v261;
      sub_1006038EC(v159, v160, v261);
      dispatch_group_enter(v108);
      v162 = swift_allocObject(&unk_101095640, 32, 7);
      v163 = v311;
      *(_QWORD *)(v162 + 16) = v108;
      *(_QWORD *)(v162 + 24) = v163;
      v58 = v108;
      swift_retain();
      sub_100CAA114(v161, (uint64_t)sub_10087C9F0, v162);
      v164 = swift_release(v162);
      v165 = v296;
      static DispatchTime.now()(v164);
      v166 = v297;
      + infix(_:_:)(v165, 60.0);
      v167 = v298;
      v112(v165, v298);
      v168 = OS_dispatch_group.wait(timeout:)(v166) & 1;
      v112(v166, v167);
      if ((static DispatchTimeoutResult.== infix(_:_:)(v168, 1) & 1) != 0)
      {
        if (qword_1010EA318 != -1)
          swift_once(&qword_1010EA318, sub_100B5E330);
        v169 = type metadata accessor for Logger(0);
        sub_10001A9E8(v169, (uint64_t)qword_1011B7DF8);
        v4 = (uint64_t)v257;
        v170 = ((uint64_t (*)(char *, char *, void *))v310)(v257, v313, v52);
        v57 = Logger.logObject.getter(v170);
        v171 = static os_log_type_t.error.getter(v57);
        if (os_log_type_enabled(v57, v171))
        {
          v172 = swift_slowAlloc(22, -1);
          v173 = (void **)swift_slowAlloc(32, -1);
          *(_DWORD *)v172 = 141558275;
          v314 = 1752392040;
          aBlock = v173;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v314, &aBlock, v172 + 4, v172 + 12);
          *(_WORD *)(v172 + 12) = 2081;
          v174 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v175 = dispatch thunk of CustomStringConvertible.description.getter(v52, v174);
          v314 = sub_100016940(v175, v176, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v314, &aBlock, v172 + 14, v172 + 22);
          swift_bridgeObjectRelease();
          v125 = *(void (**)(char *, void *))(v308 + 8);
          v125((char *)v4, v52);
          _os_log_impl((void *)&_mh_execute_header, v57, v171, "Timed out saving productInfoRecord for beacon %{private,mask.hash}s", (uint8_t *)v172, 0x16u);
          swift_arrayDestroy(v173, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v173, -1, -1);
          swift_slowDealloc(v172, -1, -1);
        }
        else
        {
LABEL_57:
          v125 = *(void (**)(char *, void *))(v308 + 8);
          v125((char *)v4, v52);
        }

        v189 = swift_allocObject(&unk_1010956B8, 32, 7);
        v190 = v282;
        *(_QWORD *)(v189 + 16) = v281;
        *(_QWORD *)(v189 + 24) = v190;
        v319 = sub_100882AE8;
        v320 = (_QWORD *)v189;
        aBlock = _NSConcreteStackBlock;
        v316 = 1107296256;
        v317 = sub_100016FB8;
        v318 = &unk_1010956D0;
        v191 = _Block_copy(&aBlock);
        v192 = swift_retain();
        v193 = v286;
        static DispatchQoS.unspecified.getter(v192);
        v314 = (uint64_t)_swiftEmptyArrayStorage;
        v194 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v195 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v196 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v197 = v284;
        v198 = v195;
        v199 = v287;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v314, v198, v196, v287, v194);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v193, v197, v191);
        _Block_release(v191);

        (*(void (**)(char *, uint64_t))(v283 + 8))(v197, v199);
        (*(void (**)(char *, uint64_t))(v285 + 8))(v193, v288);
        sub_1000126B0(v261, type metadata accessor for BeaconProductInfoRecord);
        sub_1000126B0(v260, type metadata accessor for AccessoryProductInfo);
        goto LABEL_41;
      }
      v177 = *v101;
      if (*v101)
      {
        v178 = (_QWORD *)swift_allocObject(&unk_101095668, 40, 7);
        v179 = v282;
        v178[2] = v281;
        v178[3] = v179;
        v178[4] = v177;
        v319 = sub_100882D6C;
        v320 = v178;
        aBlock = _NSConcreteStackBlock;
        v316 = 1107296256;
        v317 = sub_100016FB8;
        v318 = &unk_101095680;
        v180 = _Block_copy(&aBlock);
        swift_errorRetain(v177);
        swift_retain();
        v181 = swift_errorRetain(v177);
        v182 = v286;
        static DispatchQoS.unspecified.getter(v181);
        v314 = (uint64_t)_swiftEmptyArrayStorage;
        v183 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v184 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v185 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v186 = v284;
        v187 = v184;
        v188 = v287;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v314, v187, v185, v287, v183);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v182, v186, v180);
        _Block_release(v180);
        swift_errorRelease(v177);

        (*(void (**)(char *, uint64_t))(v283 + 8))(v186, v188);
        (*(void (**)(char *, uint64_t))(v285 + 8))(v182, v288);
        sub_1000126B0(v261, type metadata accessor for BeaconProductInfoRecord);
        sub_1000126B0(v260, type metadata accessor for AccessoryProductInfo);
        sub_1000126B0(v306, type metadata accessor for KeySyncRecord);
        sub_1000126B0((uint64_t)v307, type metadata accessor for KeyAlignmentRecord);
        sub_1000126B0((uint64_t)v300, type metadata accessor for BeaconNamingRecord);
        (*(void (**)(char *, uint64_t))(v301 + 8))(v302, v303);
        (*(void (**)(char *, void *))(v308 + 8))(v313, v52);
        goto LABEL_42;
      }
      sub_1000126B0(v261, type metadata accessor for BeaconProductInfoRecord);
      sub_1000126B0(v260, type metadata accessor for AccessoryProductInfo);
    }
    dispatch_group_enter(v108);
    v200 = v267;
    sub_10005972C((uint64_t)v307, v267, type metadata accessor for KeyAlignmentRecord);
    v201 = v270;
    sub_10005972C(v306, v270, type metadata accessor for KeySyncRecord);
    ((void (*)(char *, char *, void *))v310)(v278, v313, v52);
    v202 = *(unsigned __int8 *)(v265 + 80);
    v203 = (v202 + 32) & ~v202;
    v204 = *(unsigned __int8 *)(v268 + 80);
    v205 = (v266 + v204 + v203) & ~v204;
    v206 = *(unsigned __int8 *)(v308 + 80);
    v207 = (v269 + v206 + v205) & ~v206;
    v304 = (char *)v206;
    v208 = (v276 + v207 + 7) & 0xFFFFFFFFFFFFFFF8;
    v209 = swift_allocObject(&unk_1010955C8, v208 + 8, v206 | v202 | v204 | 7);
    v210 = v309;
    *(_QWORD *)(v209 + 16) = v108;
    *(_QWORD *)(v209 + 24) = v210;
    sub_1000126EC(v200, v209 + v203, type metadata accessor for KeyAlignmentRecord);
    sub_1000126EC(v201, v209 + v205, type metadata accessor for KeySyncRecord);
    ((void (*)(unint64_t, char *, void *))v305)(v209 + v207, v278, v312);
    *(_QWORD *)(v209 + v208) = v311;
    v211 = v108;
    v212 = v277;
    swift_retain();
    swift_retain();
    sub_100804FB8(v212, 0, (uint64_t)sub_10087C608, v209);
    v213 = swift_release(v209);
    v214 = v296;
    static DispatchTime.now()(v213);
    v215 = v297;
    + infix(_:_:)(v214, 60.0);
    v216 = v214;
    v217 = v298;
    v112(v216, v298);
    v296 = v211;
    v218 = OS_dispatch_group.wait(timeout:)(v215) & 1;
    v112(v215, v217);
    v219 = static DispatchTimeoutResult.== infix(_:_:)(v218, 1);
    if ((v219 & 1) != 0)
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v220 = type metadata accessor for Logger(0);
      sub_10001A9E8(v220, (uint64_t)qword_1011B7DF8);
      v221 = v259;
      v222 = v312;
      v223 = ((uint64_t (*)(char *, char *, void *))v310)(v259, v313, v312);
      v224 = Logger.logObject.getter(v223);
      v225 = static os_log_type_t.error.getter(v224);
      if (os_log_type_enabled(v224, v225))
      {
        v226 = swift_slowAlloc(22, -1);
        v227 = (void **)swift_slowAlloc(32, -1);
        *(_DWORD *)v226 = 141558275;
        v314 = 1752392040;
        aBlock = v227;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v314, &aBlock, v226 + 4, v226 + 12);
        *(_WORD *)(v226 + 12) = 2081;
        v228 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v229 = dispatch thunk of CustomStringConvertible.description.getter(v222, v228);
        v314 = sub_100016940(v229, v230, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v314, &aBlock, v226 + 14, v226 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, void *))(v308 + 8))(v221, v222);
        _os_log_impl((void *)&_mh_execute_header, v224, v225, "Timed out saving new beacon %{private,mask.hash}s", (uint8_t *)v226, 0x16u);
        swift_arrayDestroy(v227, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v227, -1, -1);
        swift_slowDealloc(v226, -1, -1);
      }
      else
      {
        (*(void (**)(char *, void *))(v308 + 8))(v221, v222);
      }

      v212 = v277;
    }
    v231 = (unint64_t)v304;
    v232 = static os_log_type_t.default.getter(v219);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v233 = qword_1011B7D38;
    v234 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v235 = swift_allocObject(v234, 72, 7);
    *(_OWORD *)(v235 + 16) = xmmword_100E22B00;
    v236 = UUID.uuidString.getter(v235);
    v238 = v237;
    *(_QWORD *)(v235 + 56) = &type metadata for String;
    *(_QWORD *)(v235 + 64) = sub_10001AA00();
    *(_QWORD *)(v235 + 32) = v236;
    *(_QWORD *)(v235 + 40) = v238;
    os_log(_:dso:log:_:_:)(v232, &_mh_execute_header, v233, "completed beacon creation: %@", 29, 2, v235);
    swift_bridgeObjectRelease();
    v299 = *(_QWORD *)(v309 + 128);
    v239 = v278;
    v240 = v312;
    ((void (*)(char *, char *, void *))v310)(v278, v313, v312);
    v241 = v275;
    sub_10005972C(v212, v275, type metadata accessor for OwnedBeaconRecord);
    v242 = (v231 + 40) & ~v231;
    v243 = *(unsigned __int8 *)(v273 + 80);
    v244 = (v242 + v276 + v243) & ~v243;
    v245 = v231 | v243;
    v52 = v240;
    v246 = (_QWORD *)swift_allocObject(&unk_1010955F0, v244 + v274, v245 | 7);
    v247 = v281;
    v246[2] = v311;
    v246[3] = v247;
    v246[4] = v282;
    ((void (*)(char *, char *, void *))v305)((char *)v246 + v242, v239, v52);
    sub_1000126EC(v241, (uint64_t)v246 + v244, type metadata accessor for OwnedBeaconRecord);
    v319 = sub_10087C984;
    v320 = v246;
    aBlock = _NSConcreteStackBlock;
    v316 = 1107296256;
    v317 = sub_100016FB8;
    v318 = &unk_101095608;
    v248 = _Block_copy(&aBlock);
    swift_retain();
    v249 = swift_retain();
    v250 = v286;
    static DispatchQoS.unspecified.getter(v249);
    v314 = (uint64_t)_swiftEmptyArrayStorage;
    v251 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v252 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v253 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v254 = v284;
    v255 = v287;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v314, v252, v253, v287, v251);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v250, v254, v248);
    _Block_release(v248);
    (*(void (**)(char *, uint64_t))(v283 + 8))(v254, v255);
    (*(void (**)(char *, uint64_t))(v285 + 8))(v250, v288);
    swift_release(v320);
    v256 = v272;
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(3);
    sub_1007F9F70();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    if (v256)
      swift_errorRelease(v256);
    v108 = v296;
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
    static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, v309);
    goto LABEL_72;
  }
  v127 = (_QWORD *)swift_allocObject(&unk_101095708, 40, 7);
  v128 = v282;
  v127[2] = v281;
  v127[3] = v128;
  v127[4] = v126;
  v319 = sub_10087CA10;
  v320 = v127;
  aBlock = _NSConcreteStackBlock;
  v316 = 1107296256;
  v317 = sub_100016FB8;
  v318 = &unk_101095720;
  v129 = _Block_copy(&aBlock);
  swift_errorRetain(v126);
  swift_retain();
  v130 = swift_errorRetain(v126);
  v131 = v286;
  static DispatchQoS.unspecified.getter(v130);
  v314 = (uint64_t)_swiftEmptyArrayStorage;
  v132 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v133 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v134 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v135 = v284;
  v136 = v133;
  v137 = v287;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v314, v136, v134, v287, v132);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v131, v135, v129);
  _Block_release(v129);
  swift_errorRelease(v126);

  (*(void (**)(char *, uint64_t))(v283 + 8))(v135, v137);
  (*(void (**)(char *, uint64_t))(v285 + 8))(v131, v288);
  sub_1000126B0(v306, type metadata accessor for KeySyncRecord);
  sub_1000126B0((uint64_t)v307, type metadata accessor for KeyAlignmentRecord);
  sub_1000126B0((uint64_t)v300, type metadata accessor for BeaconNamingRecord);
  (*(void (**)(char *, uint64_t))(v301 + 8))(v302, v303);
  (*(void (**)(char *, void *))(v308 + 8))(v313, v312);
LABEL_42:
  v149 = v320;
  swift_release(v311);
  v150 = v149;
  return swift_release(v150);
}

uint64_t sub_1007F3274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject **v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject **v11;
  uint64_t v12;
  NSObject *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t result;
  NSObject *v18;
  char v19;
  NSObject *v20;
  uint8_t *v21;
  _QWORD v22[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (NSObject **)((char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B77E8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Attempting to purge beacon store files.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(NSObject ***)(v1 + 160);
  v22[1] = v1;
  v12 = sub_1007FDEC4();
  v13 = v11[2];
  v14 = (_QWORD *)swift_allocObject(&unk_101095A00, 40, 7);
  v14[2] = v11;
  v14[3] = sub_10088C538;
  v14[4] = 0;
  v15 = swift_allocObject(&unk_101095A28, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10087DDF4;
  *(_QWORD *)(v15 + 24) = v14;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_101095A40;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v13, v16);
  _Block_release(v16);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation(v15, "", 113, 683, 26, 1);
  result = swift_release();
  if ((v16 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *v5 = v13;
    (*(void (**)(NSObject **, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.notOnQueue(_:), v2);
    v18 = v13;
    v19 = _dispatchPreconditionTest(_:)(v5);
    result = (*(uint64_t (**)(NSObject **, uint64_t))(v3 + 8))(v5, v2);
    if ((v19 & 1) != 0)
    {
      v20 = dispatch_group_create();
      dispatch_group_enter(v20);
      swift_retain();
      v21 = v20;
      sub_100BD2320(0, v12, v11, v21);
      swift_release();
      swift_release();
      swift_release();

      return QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1007F3570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];

  v3 = v2;
  v75 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v75);
  v7 = (char *)v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for OwnedBeaconGroup(0);
  v8 = __chkstk_darwin(v68);
  v67[1] = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v70 = (uint64_t)v67 - v10;
  v11 = type metadata accessor for URL(0);
  v88 = *(_QWORD *)(v11 - 8);
  v89 = v11;
  __chkstk_darwin(v11);
  v87 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v86);
  v85 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BeaconProductInfoRecord(0);
  v84 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v73 = (uint64_t)v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = a1;
  sub_10036AC6C();
  v21 = v20;
  swift_retain();
  sub_10085D4FC(v21, v3, (uint64_t *)&unk_1010F47C0, type metadata accessor for OwnedBeaconRecord, (void (*)(char *))sub_10080B950, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1007C8520);
  v23 = v22;
  swift_release(v3);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a2, 1, 1, v16);
  }
  v69 = a2;
  v80 = v23 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v72 = v7 + 8;
  v24 = *(_QWORD *)(v3 + 160);
  v78 = (void *)0x8000000100ED68C0;
  v79 = v24;
  v76 = v17;
  v77 = v23;
  v82 = v7;
  v83 = v19;
  v81 = v16;
  if (*(_QWORD *)(v23 + 16))
  {
    v90 = 0;
    v91 = 0;
    v25 = v14;
    sub_10005972C(v80, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    v26 = *(int *)(v16 + 20);
    if (qword_1010E9D40 != -1)
      swift_once(&qword_1010E9D40, sub_100601994);
    v27 = &v19[v26];
    v28 = v89;
    v29 = sub_10001A9E8(v89, (uint64_t)qword_1011B7200);
    v31 = v87;
    v30 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v88 + 16))(v87, v29, v28);
    v32._countAndFlagsBits = 0xD000000000000014;
    v32._object = v78;
    prohibitAsyncContext(functionName:)(v32);
    v93[0] = v25;
    v33 = sub_10001A9A8(&qword_10110AA60);
    v34 = String.init<A>(describing:)(v93, v33);
    v36 = v35;
    v37 = objc_autoreleasePoolPush();
    __chkstk_darwin(v37);
    v67[-6] = v38;
    v67[-5] = v27;
    v67[-4] = v31;
    v67[-3] = v34;
    v67[-2] = v36;
    v39 = (uint64_t)v85;
    OS_dispatch_queue.sync<A>(execute:)(sub_10087B544, &v67[-8], v86);
    objc_autoreleasePoolPop(v37);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v28);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v39, 1, v25) == 1)
    {
      sub_100004048(v39, &qword_10110EEB0);
      v16 = v81;
      v40 = (uint64_t)v82;
      v19 = v83;
      goto LABEL_18;
    }
    v41 = v73;
    sub_1000126EC(v39, v73, type metadata accessor for BeaconProductInfoRecord);
    v3 = *(_QWORD *)(v41 + *(int *)(v25 + 72));
    v16 = v81;
    v19 = v83;
    if (v3)
    {
      v42 = *(_QWORD *)(v3 + 16);
      v40 = (uint64_t)v82;
      if (v42)
      {
        v43 = 88;
        v44 = 1;
        while (1)
        {
          v45 = *(unsigned __int8 *)(v3 + v43);
          if (v45 != 2 && (v45 & 1) != 0)
            break;
          if (v42 == v44)
            goto LABEL_16;
          v43 += 64;
          if (__OFADD__(v44++, 1))
          {
            __break(1u);
            goto LABEL_25;
          }
        }
        swift_bridgeObjectRetain(v3);
        swift_bridgeObjectRelease();
        if (qword_1010E9F90 == -1)
          goto LABEL_20;
        goto LABEL_26;
      }
LABEL_16:
      sub_1000126B0(v41, type metadata accessor for BeaconProductInfoRecord);
    }
    else
    {
      sub_1000126B0(v41, type metadata accessor for BeaconProductInfoRecord);
      v40 = (uint64_t)v82;
    }
LABEL_18:
    sub_10005972C((uint64_t)&v19[*(int *)(v16 + 24)], v40, type metadata accessor for StableIdentifier);
    v47 = (char *)&loc_1007F3A58 + *((int *)qword_1007F4040 + swift_getEnumCaseMultiPayload(v40, v75));
    __asm { BR              X9 }
  }
LABEL_25:
  __break(1u);
LABEL_26:
  swift_once(&qword_1010E9F90, sub_1007FA7C0);
LABEL_20:
  v48 = type metadata accessor for Logger(0);
  sub_10001A9E8(v48, (uint64_t)qword_1011B7818);
  v49 = v70;
  sub_10005972C(v71, v70, type metadata accessor for OwnedBeaconGroup);
  swift_bridgeObjectRetain(v3);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = v49;
    v54 = swift_slowAlloc(22, -1);
    v55 = swift_slowAlloc(64, -1);
    v93[0] = v55;
    *(_DWORD *)v54 = 136446466;
    v56 = type metadata accessor for UUID(0);
    v57 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v58 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
    v92 = sub_100016940(v58, v59, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v53, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v54 + 12) = 2080;
    swift_bridgeObjectRetain(v3);
    v61 = Array.description.getter(v60, &type metadata for AccessoryLayoutTemplate);
    v63 = v62;
    swift_bridgeObjectRelease();
    v92 = sub_100016940(v61, v63, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease_n(v3, 2);
    v19 = v83;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Group %{public}s multipart layout template: %s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v3, 2);

    sub_1000126B0(v49, type metadata accessor for OwnedBeaconGroup);
  }
  sub_1000126B0(v73, type metadata accessor for BeaconProductInfoRecord);
  v64 = v76;
  v65 = v69;
  sub_1000126EC((uint64_t)v19, v69, type metadata accessor for OwnedBeaconRecord);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v64 + 56))(v65, 0, 1, v16);
}

uint64_t sub_1007F4054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, __n128);
  __n128 v65;
  unsigned __int8 v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v71;
  unint64_t v72;
  uint64_t v73;
  _BOOL8 v74;
  uint64_t v75;
  char v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  unint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  char v92;
  _QWORD *v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  int64_t v116;
  unint64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t *v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned __int8 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t result;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  int64_t v174;
  __int128 v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  __int128 v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;

  v169 = a2;
  v168 = a1;
  v4 = sub_10001A9A8(&qword_1010EF490);
  v5 = __chkstk_darwin(v4);
  v170 = (uint64_t)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v171 = (uint64_t)&v167 - v7;
  v8 = sub_10001A9A8(&qword_1010ED1A0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v167 = (uint64_t)&v167 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v186 = (uint64_t)&v167 - v13;
  v14 = __chkstk_darwin(v12);
  v185 = (uint64_t)&v167 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v167 - v17;
  v19 = __chkstk_darwin(v16);
  v192 = (uint64_t)&v167 - v20;
  v21 = __chkstk_darwin(v19);
  v178 = (uint64_t)&v167 - v22;
  v23 = __chkstk_darwin(v21);
  v177 = (uint64_t)&v167 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v167 - v26;
  v28 = __chkstk_darwin(v25);
  v191 = (uint64_t)&v167 - v29;
  __chkstk_darwin(v28);
  v183 = (char *)&v167 - v30;
  v193 = _swiftEmptyArrayStorage;
  v31 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain(a3);
  v189 = v8;
  v190 = v27;
  v179 = v9;
  v187 = v18;
  if (v31)
  {
    v32 = *(unsigned __int8 *)(v9 + 80);
    v33 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)&v182 = a3;
    v184 = (v32 + 32) & ~v32;
    v34 = a3 + v184;
    v35 = _swiftEmptyArrayStorage;
    v36 = (uint64_t)v183;
    v188 = v33;
    do
    {
      sub_10000F9B8(v34, v36, &qword_1010ED1A0);
      v38 = v189;
      v39 = (_QWORD *)(v36 + *(int *)(v189 + 32));
      v41 = v39[3];
      v40 = v39[4];
      sub_10001AA44(v39, v41);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v36 + *(int *)(v38 + 28), v41, v40) & 1) != 0)
      {
        sub_100004048(v36, &qword_1010ED1A0);
        v37 = v188;
      }
      else
      {
        sub_100005CF0(v36, v191, &qword_1010ED1A0);
        if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
        {
          sub_10009ABEC(0, v35[2] + 1, 1);
          v36 = (uint64_t)v183;
        }
        v35 = v193;
        v43 = v193[2];
        v42 = v193[3];
        if (v43 >= v42 >> 1)
        {
          sub_10009ABEC(v42 > 1, v43 + 1, 1);
          v36 = (uint64_t)v183;
          v35 = v193;
        }
        v35[2] = v43 + 1;
        v44 = (uint64_t)v35 + v184 + v43 * v188;
        v37 = v188;
        sub_100005CF0(v191, v44, &qword_1010ED1A0);
      }
      v34 += v37;
      --v31;
    }
    while (v31);
    v45 = v193;
    v9 = v179;
    v18 = v187;
    v27 = v190;
  }
  else
  {
    v45 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v46 = v45[2];
  if (v46)
  {
    v47 = *(unsigned __int8 *)(v9 + 80);
    v48 = (v47 + 32) & ~v47;
    v49 = (uint64_t)v45 + v48;
    v50 = *(_QWORD *)(v9 + 72);
    v188 = v48;
    v180 = (unint64_t)v45;
    v181 = v50;
    v183 = (char *)(v47 | 7);
    v184 = v50 + v48;
    swift_retain();
    v51 = &_swiftEmptyDictionarySingleton;
    v182 = xmmword_100E22B00;
    while (1)
    {
      v191 = v49;
      sub_10000F9B8(v49, (uint64_t)v27, &qword_1010ED1A0);
      v54 = &v27[*(int *)(v189 + 32)];
      v55 = *((_QWORD *)v54 + 3);
      v56 = *((_QWORD *)v54 + 4);
      sub_10001AA44(v54, v55);
      v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 16))(v55, v56);
      if (v51[2])
      {
        v58 = sub_100519244(v57);
        if ((v59 & 1) != 0)
        {
          v60 = *(_QWORD **)(v51[7] + 8 * v58);
          v61 = (uint64_t)v27;
          v62 = *((_QWORD *)v54 + 3);
          v63 = *((_QWORD *)v54 + 4);
          sub_10001AA44(v54, v62);
          v64 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v63 + 16);
          v65 = swift_bridgeObjectRetain(v60);
          v66 = v64(v62, v63, v65);
          v67 = sub_10001A9A8((uint64_t *)&unk_101108E20);
          v68 = swift_allocObject(v67, v184, v183);
          *(_OWORD *)(v68 + 16) = v182;
          sub_10000F9B8(v61, v68 + v188, &qword_1010ED1A0);
          v193 = v60;
          sub_100302F10(v68);
          v69 = v193;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
          v193 = v51;
          v72 = sub_100519244(v66);
          v73 = v51[2];
          v74 = (v71 & 1) == 0;
          v75 = v73 + v74;
          if (__OFADD__(v73, v74))
            goto LABEL_87;
          v76 = v71;
          if (v51[3] >= v75)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_100A9B314();
          }
          else
          {
            sub_100A879E4(v75, isUniquelyReferenced_nonNull_native);
            v77 = sub_100519244(v66);
            if ((v76 & 1) != (v78 & 1))
              goto LABEL_90;
            v72 = v77;
          }
          v27 = v190;
          v97 = v193;
          if ((v76 & 1) != 0)
          {
            v51 = v193;
            v98 = v193[7];
            swift_bridgeObjectRelease();
            *(_QWORD *)(v98 + 8 * v72) = v69;
          }
          else
          {
            v193[(v72 >> 6) + 8] |= 1 << v72;
            *(_BYTE *)(v97[6] + v72) = v66;
            *(_QWORD *)(v97[7] + 8 * v72) = v69;
            v99 = v97[2];
            v95 = __OFADD__(v99, 1);
            v100 = v99 + 1;
            if (v95)
              goto LABEL_88;
            v51 = v97;
            v97[2] = v100;
          }
          swift_bridgeObjectRelease();
          v9 = v179;
          goto LABEL_17;
        }
      }
      v79 = *((_QWORD *)v54 + 3);
      v80 = *((_QWORD *)v54 + 4);
      sub_10001AA44(v54, v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 16))(v79, v80);
      v82 = sub_10001A9A8((uint64_t *)&unk_101108E20);
      v83 = swift_allocObject(v82, v184, v183);
      *(_OWORD *)(v83 + 16) = v182;
      sub_10000F9B8((uint64_t)v27, v83 + v188, &qword_1010ED1A0);
      v84 = swift_isUniquelyReferenced_nonNull_native(v51);
      v193 = v51;
      v86 = sub_100519244(v81);
      v87 = v51[2];
      v88 = (v85 & 1) == 0;
      v89 = v87 + v88;
      if (__OFADD__(v87, v88))
        goto LABEL_85;
      v90 = v85;
      if (v51[3] >= v89)
      {
        if ((v84 & 1) != 0)
        {
          v93 = v193;
          if ((v85 & 1) == 0)
            goto LABEL_31;
        }
        else
        {
          sub_100A9B314();
          v93 = v193;
          if ((v90 & 1) == 0)
            goto LABEL_31;
        }
      }
      else
      {
        sub_100A879E4(v89, v84);
        v91 = sub_100519244(v81);
        if ((v90 & 1) != (v92 & 1))
        {
LABEL_90:
          result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for EventGroup);
          __break(1u);
          return result;
        }
        v86 = v91;
        v93 = v193;
        if ((v90 & 1) == 0)
        {
LABEL_31:
          v93[(v86 >> 6) + 8] |= 1 << v86;
          *(_BYTE *)(v93[6] + v86) = v81;
          *(_QWORD *)(v93[7] + 8 * v86) = v83;
          v94 = v93[2];
          v95 = __OFADD__(v94, 1);
          v96 = v94 + 1;
          if (v95)
            goto LABEL_86;
          v51 = v93;
          v93[2] = v96;
          goto LABEL_16;
        }
      }
      v51 = v93;
      v52 = v93[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v52 + 8 * v86) = v83;
LABEL_16:
      swift_bridgeObjectRelease();
      v27 = v190;
LABEL_17:
      v53 = v191;
      sub_100004048((uint64_t)v27, &qword_1010ED1A0);
      v49 = v53 + v181;
      if (!--v46)
      {
        swift_release_n(v180, 2);
        v18 = v187;
        v101 = v51;
        goto LABEL_44;
      }
    }
  }
  swift_release(v45);
  v101 = &_swiftEmptyDictionarySingleton;
LABEL_44:
  v193 = _swiftEmptyArrayStorage;
  v102 = v101[8];
  v173 = (char *)(v101 + 8);
  v103 = 1 << *((_BYTE *)v101 + 32);
  v104 = -1;
  if (v103 < 64)
    v104 = ~(-1 << v103);
  v105 = v104 & v102;
  v174 = (unint64_t)(v103 + 63) >> 6;
  swift_bridgeObjectRetain(v101);
  v106 = 0;
  v107 = &qword_1010ED1A0;
  v175 = xmmword_100E22B00;
  v108 = v189;
  v176 = v101;
  while (v105)
  {
    v114 = __clz(__rbit64(v105));
    v105 &= v105 - 1;
    v115 = v114 | (v106 << 6);
LABEL_68:
    v119 = *(_QWORD *)(v101[7] + 8 * v115);
    v120 = *(_QWORD *)(v119 + 16);
    if (v120)
    {
      v181 = v105;
      *(_QWORD *)&v182 = v106;
      v180 = *(unsigned __int8 *)(v9 + 80);
      v121 = v119;
      v183 = (char *)((v180 + 32) & ~v180);
      sub_10000F9B8((uint64_t)&v183[v119], v192, v107);
      v184 = v121;
      swift_bridgeObjectRetain(v121);
      v122 = v120 - 1;
      if (v120 != 1)
      {
        v188 = *(_QWORD *)(v179 + 72);
        v123 = (uint64_t)&v183[v188 + v184];
        while (1)
        {
          v190 = (char *)v123;
          v191 = v122;
          sub_10000F9B8(v123, (uint64_t)v18, v107);
          v124 = &v18[*(int *)(v108 + 32)];
          v125 = (uint64_t)v18;
          v127 = *((_QWORD *)v124 + 3);
          v126 = *((_QWORD *)v124 + 4);
          sub_10001AA44(v124, v127);
          v128 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v126 + 16))(v127, v126);
          v129 = v107;
          v130 = v192;
          v131 = (_QWORD *)(v192 + *(int *)(v108 + 32));
          v132 = v131[3];
          v133 = v131[4];
          sub_10001AA44(v131, v132);
          v134 = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 16))(v132, v133);
          v135 = v185;
          sub_10000F9B8(v125, v185, v129);
          v136 = v130;
          v107 = v129;
          v137 = v186;
          sub_10000F9B8(v136, v186, v129);
          if (v128 == v134)
            break;
          v138 = v189;
          v139 = (_QWORD *)(v135 + *(int *)(v189 + 32));
          v140 = v135;
          v141 = v139[3];
          v142 = v139[4];
          sub_10001AA44(v139, v141);
          v143 = (*(uint64_t (**)(uint64_t, uint64_t))(v142 + 8))(v141, v142);
          v144 = (_QWORD *)(v137 + *(int *)(v138 + 32));
          v146 = v144[3];
          v145 = v144[4];
          sub_10001AA44(v144, v146);
          v147 = (*(uint64_t (**)(uint64_t, uint64_t))(v145 + 8))(v146, v145);
          sub_100004048(v140, v107);
          sub_100004048(v137, v107);
          if (v143 == v147)
            goto LABEL_76;
          v148 = *((_QWORD *)v124 + 3);
          v149 = *((_QWORD *)v124 + 4);
          sub_10001AA44(v124, v148);
          v150 = (*(uint64_t (**)(uint64_t, uint64_t))(v149 + 8))(v148, v149);
          v151 = v131[3];
          v152 = v131[4];
          sub_10001AA44(v131, v151);
          v153 = (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 8))(v151, v152);
          v108 = v189;
          v18 = v187;
          if (v150 < v153)
          {
LABEL_79:
            v154 = v192;
            sub_100004048(v192, v107);
            sub_100005CF0((uint64_t)v18, v154, v107);
            goto LABEL_72;
          }
LABEL_71:
          sub_100004048((uint64_t)v18, v107);
LABEL_72:
          v123 = (uint64_t)&v190[v188];
          v122 = v191 - 1;
          if (v191 == 1)
            goto LABEL_47;
        }
        sub_100004048(v135, v129);
        sub_100004048(v137, v129);
LABEL_76:
        v108 = v189;
        v18 = v187;
        if ((static Date.> infix(_:_:)(&v187[*(int *)(v189 + 28)], v192 + *(int *)(v189 + 28)) & 1) != 0)
          goto LABEL_79;
        goto LABEL_71;
      }
LABEL_47:
      v109 = v178;
      sub_100005CF0(v192, v178, v107);
      v110 = v177;
      sub_100005CF0(v109, v177, v107);
      v111 = sub_10001A9A8((uint64_t *)&unk_101108E20);
      v9 = v179;
      v112 = v183;
      v113 = swift_allocObject(v111, &v183[*(_QWORD *)(v179 + 72)], v180 | 7);
      *(_OWORD *)(v113 + 16) = v175;
      sub_10000F9B8(v110, (uint64_t)&v112[v113], v107);
      sub_100302F10(v113);
      sub_100004048(v110, v107);
      swift_bridgeObjectRelease();
      v101 = v176;
      v105 = v181;
      v106 = v182;
    }
  }
  v116 = v106 + 1;
  if (__OFADD__(v106, 1))
  {
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
  }
  if (v116 >= v174)
    goto LABEL_80;
  v117 = *(_QWORD *)&v173[8 * v116];
  ++v106;
  if (v117)
    goto LABEL_67;
  v106 = v116 + 1;
  if (v116 + 1 >= v174)
    goto LABEL_80;
  v117 = *(_QWORD *)&v173[8 * v106];
  if (v117)
    goto LABEL_67;
  v106 = v116 + 2;
  if (v116 + 2 >= v174)
    goto LABEL_80;
  v117 = *(_QWORD *)&v173[8 * v106];
  if (v117)
    goto LABEL_67;
  v106 = v116 + 3;
  if (v116 + 3 >= v174)
    goto LABEL_80;
  v117 = *(_QWORD *)&v173[8 * v106];
  if (v117)
    goto LABEL_67;
  v106 = v116 + 4;
  if (v116 + 4 >= v174)
    goto LABEL_80;
  v117 = *(_QWORD *)&v173[8 * v106];
  if (v117)
  {
LABEL_67:
    v105 = (v117 - 1) & v117;
    v115 = __clz(__rbit64(v117)) + (v106 << 6);
    goto LABEL_68;
  }
  v118 = v116 + 5;
  if (v118 < v174)
  {
    v117 = *(_QWORD *)&v173[8 * v118];
    if (!v117)
    {
      while (1)
      {
        v106 = v118 + 1;
        if (__OFADD__(v118, 1))
          goto LABEL_89;
        if (v106 >= v174)
          goto LABEL_80;
        v117 = *(_QWORD *)&v173[8 * v106];
        ++v118;
        if (v117)
          goto LABEL_67;
      }
    }
    v106 = v118;
    goto LABEL_67;
  }
LABEL_80:
  swift_release(v101);
  swift_bridgeObjectRelease();
  v155 = v171;
  sub_1001E62BC((uint64_t)v193, v171);
  swift_bridgeObjectRelease();
  v156 = v170;
  sub_10000F9B8(v155, v170, &qword_1010EF490);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v179 + 48))(v156, 1, v108) == 1)
  {
    v157 = v156;
    v158 = (uint64_t)&qword_1010EF490;
    sub_100004048(v157, &qword_1010EF490);
    v159 = sub_10001A9A8(&qword_1010EF4C0);
    v160 = sub_1000193A4(&qword_1010EF4C8, &qword_1010EF4C0, byte_100E31138);
    v172 = swift_allocError(v159, v160, 0, 0);
    swift_willThrow(v172);
    sub_100004048(v155, &qword_1010EF490);
  }
  else
  {
    v161 = v167;
    sub_100005CF0(v156, v167, &qword_1010ED1A0);
    v162 = (_QWORD *)(v161 + *(int *)(v108 + 32));
    v158 = v162[3];
    v163 = v162[4];
    sub_10001AA44(v162, v158);
    LOBYTE(v158) = (*(uint64_t (**)(uint64_t, uint64_t))(v163 + 24))(v158, v163);
    sub_100004048(v155, &qword_1010EF490);
    sub_10005972C(v161, v168, type metadata accessor for DeviceEvent);
    v164 = v161 + *(int *)(v108 + 28);
    v165 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v165 - 8) + 16))(v169, v164, v165);
    sub_100004048(v161, &qword_1010ED1A0);
  }
  return v158 & 1;
}

uint64_t sub_1007F4EB8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B77E8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Requesting SPUnknownBeaconsChangedNotification to be posted before rate limit.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
}

uint64_t sub_1007F4FBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a3;
  v22 = a4;
  v19 = a5;
  v20 = a2;
  v25 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v13 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v5, v12, &type metadata for () + 1, v13);
  v15 = a1[3];
  v14 = a1[4];
  sub_10001AA44(a1, v15);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8) + 32))(v15);
  v17 = a1[3];
  v16 = a1[4];
  sub_10001AA44(a1, v17);
  (*(void (**)(uint64_t, uint64_t))(v16 + 184))(v17, v16);
  sub_100833FB0((uint64_t)v11, v8, v20, v21, v22, v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v8, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v24);
}

_QWORD *sub_1007F516C(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  void (*v38)(_QWORD, _QWORD);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t);
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  BOOL v86;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  unint64_t v108;
  _QWORD *v109;

  v6 = v5;
  v12 = type metadata accessor for UUID(0);
  v100 = *(_QWORD *)(v12 - 8);
  v101 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TimeBasedKey(0);
  v16 = *(_QWORD *)(v15 - 8);
  v93 = v15;
  v94 = v16;
  v17 = __chkstk_darwin(v15);
  v99 = (unint64_t)&v87 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v108 = (unint64_t)&v87 - v20;
  v21 = __chkstk_darwin(v19);
  v92 = (uint64_t)&v87 - v22;
  __chkstk_darwin(v21);
  v107 = (uint64_t *)((char *)&v87 - v23);
  v24 = type metadata accessor for Date(0);
  v95 = *(_QWORD *)(v24 - 8);
  v96 = v24;
  v25 = __chkstk_darwin(v24);
  v102 = (char *)&v87 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v91 = (char *)&v87 - v27;
  v28 = type metadata accessor for DateInterval(0);
  v105 = *(_QWORD *)(v28 - 8);
  v106 = v28;
  __chkstk_darwin(v28);
  v104 = (_QWORD **)((char *)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = type metadata accessor for BeaconKeyManager.KeyCriteria(0);
  result = (_QWORD *)__chkstk_darwin(v30);
  v33 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = a1;
  if ((a5 & 1) != 0)
  {
    v90 = sub_1004DDCE4(a4);
    v34 = a1;
    v35 = a1[3];
    v36 = v34[4];
    sub_10001AA44(v34, v35);
    result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v36 + 8) + 8) + 32))(v35);
    if (a3 < a2)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v33[*(int *)(v30 + 20)] = a4;
    v37 = (unint64_t *)&v33[*(int *)(v30 + 24)];
    *v37 = a2;
    v37[1] = a3;
    v38 = (void (*)(_QWORD, _QWORD))v103;
    v39 = *(_QWORD *)&v103[OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock];
    v40 = type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v38, v39, &type metadata for () + 1, v40);
    v89 = v5;
    v88 = v33;
    v41 = sub_100DD0AD4((uint64_t)v33);
    swift_release();
    v42 = v41[2];
    v87 = v41;
    if (v42)
    {
      v43 = v41 + 9;
      v109 = _swiftEmptyArrayStorage;
      while (1)
      {
        v108 = a2;
        v44 = *(v43 - 5);
        v45 = *(v43 - 4);
        v46 = *(v43 - 2);
        v100 = *(v43 - 3);
        v47 = v100;
        v101 = v45;
        v49 = *(v43 - 1);
        v48 = *v43;
        v98 = v42;
        v99 = v48;
        v51 = v97[3];
        v50 = v97[4];
        v52 = (char *)sub_10001AA44(v97, v51);
        v53 = *(char **)(v50 + 184);
        v102 = v52;
        v103 = v53;
        sub_10001BD08(v44, v45);
        sub_10001BBBC(v47, v46);
        sub_10001BD08(v49, v48);
        v54 = v91;
        ((void (*)(uint64_t, uint64_t))v103)(v51, v50);
        v55 = v104;
        v56 = v108;
        sub_10064C538(v54, v108, v90, (uint64_t)v104);
        (*(void (**)(char *, uint64_t))(v95 + 8))(v54, v96);
        v57 = v93;
        v58 = v107;
        (*(void (**)(uint64_t, _QWORD *, uint64_t))(v105 + 16))((uint64_t)v107 + *(int *)(v93 + 20), v55, v106);
        *v58 = v56;
        v60 = v99;
        v59 = v100;
        v61 = (uint64_t *)((char *)v58 + *(int *)(v57 + 24));
        v62 = v101;
        *v61 = v44;
        v61[1] = v62;
        v61[2] = v59;
        v61[3] = v46;
        v61[4] = v49;
        v61[5] = v60;
        v63 = v92;
        sub_10005972C((uint64_t)v58, v92, type metadata accessor for TimeBasedKey);
        v102 = (char *)v44;
        sub_10001BD08(v44, v62);
        v103 = (char *)v46;
        sub_10001BBBC(v59, v46);
        sub_10001BD08(v49, v60);
        if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
          v109 = (_QWORD *)sub_1007C80D0(0, v109[2] + 1, 1, (unint64_t)v109);
        v65 = v109[2];
        v64 = v109[3];
        if (v65 >= v64 >> 1)
          v109 = (_QWORD *)sub_1007C80D0(v64 > 1, v65 + 1, 1, (unint64_t)v109);
        v66 = v109;
        v109[2] = v65 + 1;
        sub_1000126EC(v63, (uint64_t)v66+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(_QWORD *)(v94 + 72) * v65, type metadata accessor for TimeBasedKey);
        sub_10001EF3C((uint64_t)v102, v62);
        sub_10001BC14(v59, (unint64_t)v103);
        sub_10001EF3C(v49, v60);
        sub_1000126B0((uint64_t)v107, type metadata accessor for TimeBasedKey);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(v105 + 8))(v104, v106);
        a2 = v108 + 1;
        if (v108 == -1)
          break;
        v43 += 6;
        v42 = v98 - 1;
        if (v98 == 1)
          goto LABEL_25;
      }
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v109 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v88, type metadata accessor for BeaconKeyManager.KeyCriteria);
    return v109;
  }
  if (a3 >= a2)
  {
    v106 = *(_QWORD *)&v103[OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock];
    v105 = type metadata accessor for BeaconKeyManager(0);
    v109 = _swiftEmptyArrayStorage;
    v104 = &type metadata for () + 1;
    while (1)
    {
      v67 = a3;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v103, v106, v104, v105);
      v107 = (uint64_t *)v6;
      v68 = v97;
      v70 = v97[3];
      v69 = v97[4];
      sub_10001AA44(v97, v70);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v69 + 8) + 8) + 32))(v70);
      v71 = v14;
      v72 = a4;
      v73 = a2;
      v74 = v68[3];
      v75 = v68[4];
      sub_10001AA44(v68, v74);
      v76 = *(void (**)(uint64_t, uint64_t))(v75 + 184);
      v77 = v102;
      v78 = v75;
      v79 = v73;
      a4 = v72;
      v14 = v71;
      v76(v74, v78);
      v80 = (uint64_t)v107;
      v81 = v108;
      sub_100833FB0((uint64_t)v14, v77, v79, a4, 0, v108);
      v6 = v80;
      if (v80)
        break;
      swift_release();
      (*(void (**)(char *, uint64_t))(v95 + 8))(v77, v96);
      (*(void (**)(char *, unint64_t))(v100 + 8))(v14, v101);
      v82 = v99;
      sub_10005972C(v81, v99, type metadata accessor for TimeBasedKey);
      if ((swift_isUniquelyReferenced_nonNull_native(v109) & 1) == 0)
        v109 = (_QWORD *)sub_1007C80D0(0, v109[2] + 1, 1, (unint64_t)v109);
      a3 = v67;
      v84 = v109[2];
      v83 = v109[3];
      if (v84 >= v83 >> 1)
        v109 = (_QWORD *)sub_1007C80D0(v83 > 1, v84 + 1, 1, (unint64_t)v109);
      v85 = v109;
      v109[2] = v84 + 1;
      sub_1000126EC(v82, (uint64_t)v85+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(_QWORD *)(v94 + 72) * v84, type metadata accessor for TimeBasedKey);
      result = (_QWORD *)sub_1000126B0(v108, type metadata accessor for TimeBasedKey);
      if (v67 == v79)
        return v109;
      v86 = __CFADD__(v79, 1);
      a2 = v79 + 1;
      if (v86)
        goto LABEL_28;
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v95 + 8))(v77, v96);
    (*(void (**)(char *, unint64_t))(v100 + 8))(v14, v101);
    swift_bridgeObjectRelease();
    return v109;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1007F58F0(void (*a1)(_QWORD *__return_ptr))
{
  uint64_t v1;
  __n128 v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v17[2];
  _QWORD v18[2];
  _QWORD v19[4];

  a1(v18);
  v1 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  JSONEncoder.init()(v2);
  v3 = sub_100882510();
  v4 = dispatch thunk of JSONEncoder.encode<A>(_:)(v18, &type metadata for FinderStatePermissions, v3);
  v6 = v5;
  v7 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v17[0] = 0;
  v9 = objc_msgSend(v7, "JSONObjectWithData:options:error:", isa, 4, v17);

  v10 = v17[0];
  if (!v9)
  {
    v13 = v10;
    v14 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)(v19, v9);
  swift_unknownObjectRelease(v9);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  if ((swift_dynamicCast(v17, v19, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001BC14(v4, v6);
    swift_release();
    return 0;
  }
  v12 = sub_10047ACFC((uint64_t)v17[0]);
  swift_release();
  sub_10001BC14(v4, v6);
  swift_bridgeObjectRelease();
  swift_release();
  return v12;
}

uint64_t sub_1007F5AD0(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  Class isa;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v18[2];
  uint64_t v19;
  _QWORD v20[4];

  a1(&v19);
  v1 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  JSONEncoder.init()(v2);
  v3 = sub_10001A9A8(&qword_1010FB180);
  v4 = sub_100880EA8();
  v5 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v19, v3, v4);
  v7 = v6;
  v8 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v18[0] = 0;
  v10 = objc_msgSend(v8, "JSONObjectWithData:options:error:", isa, 4, v18);

  v11 = v18[0];
  if (!v10)
  {
    v14 = v11;
    v15 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v16);
    swift_errorRelease(v15);
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)(v20, v10);
  swift_unknownObjectRelease(v10);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  if ((swift_dynamicCast(v18, v20, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001BC14(v5, v7);
    swift_bridgeObjectRelease();
    return 0;
  }
  v13 = sub_10047ACFC((uint64_t)v18[0]);
  swift_release();
  sub_10001BC14(v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1007F5CBC(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  __n128 v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v17[2];
  uint64_t v18;
  _QWORD v19[4];

  a1(&v18);
  v1 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  JSONEncoder.init()(v2);
  v3 = sub_100882404();
  v4 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v18, &type metadata for LegacyBeaconStateCapture, v3);
  v6 = v5;
  v7 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v17[0] = 0;
  v9 = objc_msgSend(v7, "JSONObjectWithData:options:error:", isa, 4, v17);

  v10 = v17[0];
  if (!v9)
  {
    v13 = v10;
    v14 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)(v19, v9);
  swift_unknownObjectRelease(v9);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  if ((swift_dynamicCast(v17, v19, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001BC14(v4, v6);
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = sub_10047ACFC((uint64_t)v17[0]);
  swift_release();
  sub_10001BC14(v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1007F5E9C(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v1;
  __n128 v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v17[2];
  uint64_t v18;
  _QWORD v19[4];

  a1(&v18);
  v1 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  JSONEncoder.init()(v2);
  v3 = sub_1008823C0();
  v4 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v18, &type metadata for BeaconStateCapture, v3);
  v6 = v5;
  v7 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v17[0] = 0;
  v9 = objc_msgSend(v7, "JSONObjectWithData:options:error:", isa, 4, v17);

  v10 = v17[0];
  if (!v9)
  {
    v13 = v10;
    v14 = _convertNSErrorToError(_:)(v10);

    swift_willThrow(v15);
    swift_errorRelease(v14);
    goto LABEL_5;
  }
  _bridgeAnyObjectToAny(_:)(v19, v9);
  swift_unknownObjectRelease(v9);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  if ((swift_dynamicCast(v17, v19, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_10001BC14(v4, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 0;
  }
  v12 = sub_10047ACFC((uint64_t)v17[0]);
  swift_release();
  sub_10001BC14(v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1007F609C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(_QWORD, _QWORD);
  uint64_t v40;
  void (*v41)(_QWORD, _QWORD);
  uint64_t result;
  _OWORD *v43;
  void (*v44)(_BYTE *, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(_BYTE *, uint64_t, uint64_t);
  NSObject *v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v50;
  _BYTE *v51;
  NSObject *v52;
  uint64_t isa_low;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE v105[4];
  int v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  NSObject *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(_QWORD, _QWORD);
  int *v124;
  _BYTE *v125;
  void (*v126)(_QWORD, _QWORD, _QWORD);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129[3];
  _OWORD v130[3];
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;

  v108 = a2;
  v116 = sub_10001A9A8(&qword_1010F7608);
  __chkstk_darwin(v116);
  v112 = &v105[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0);
  v122 = *((_QWORD *)v4 - 1);
  v5 = __chkstk_darwin(v4);
  v111 = &v105[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v5);
  v119 = &v105[-v8];
  v9 = __chkstk_darwin(v7);
  v113 = &v105[-v10];
  v11 = __chkstk_darwin(v9);
  v13 = &v105[-v12];
  __chkstk_darwin(v11);
  v125 = &v105[-v14];
  v15 = type metadata accessor for UUID(0);
  v16 = *(NSObject **)(v15 - 8);
  isa = v16[8].isa;
  v18 = __chkstk_darwin(v15);
  v109 = &v105[-(((unint64_t)isa + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v18);
  v21 = &v105[-v20];
  v22 = __chkstk_darwin(v19);
  v118 = &v105[-v23];
  v24 = __chkstk_darwin(v22);
  v114 = &v105[-v25];
  __chkstk_darwin(v24);
  v27 = &v105[-v26];
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B8520);
  v126 = (void (*)(_QWORD, _QWORD, _QWORD))v16[2].isa;
  v127 = a1;
  v30 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v126)(v27, a1, v15);
  v121 = v29;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = v32;
  v34 = os_log_type_enabled(v31, v32);
  v110 = v21;
  v120 = v13;
  v115 = v16;
  if (v34)
  {
    v35 = swift_slowAlloc(22, -1);
    v107 = swift_slowAlloc(32, -1);
    v129[0] = v107;
    *(_DWORD *)v35 = 141558275;
    v133 = 1752392040;
    v124 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v35 + 4, v35 + 12);
    *(_WORD *)(v35 + 12) = 2081;
    v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v106 = v33;
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v15, v36);
    v133 = sub_100016940(v37, v38, v129);
    v4 = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease();
    v39 = (void (*)(_QWORD, _QWORD))v16[1].isa;
    v39(v27, v15);
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v106, "BeaconStore createNewOwnedDeviceKeyRecord called with deviceIdentifier:%{private,mask.hash}s", (uint8_t *)v35, 0x16u);
    v40 = v107;
    swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    v39 = (void (*)(_QWORD, _QWORD))v16[1].isa;
    v39(v27, v15);
  }

  v41 = v123;
  result = sub_1007E95C4((uint64_t *)v130);
  if (!v41)
  {
    v107 = 0;
    v123 = v39;
    v43 = v125;
    UUID.init()(result);
    v44 = (void (*)(_BYTE *, uint64_t, uint64_t))v126;
    v45 = v127;
    v126((char *)v43 + v4[6], v127, v15);
    v46 = v44;
    v131 = v130[1];
    v132 = v130[0];
    sub_100059DE8((uint64_t)&v132);
    sub_100059DE8((uint64_t)&v131);
    sub_10087BE2C((uint64_t *)v130);
    *v43 = xmmword_100E22FC0;
    *(_OWORD *)((char *)v43 + v4[7]) = v132;
    *(_OWORD *)((char *)v43 + v4[8]) = v131;
    v47 = dispatch_group_create();
    v48 = swift_allocBox(v116);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v122 + 56);
    v116 = v50;
    v49(v50, 1, 1, v4);
    dispatch_group_enter(v47);
    v124 = v4;
    v51 = v114;
    v46(v114, v45, v15);
    v52 = v115;
    isa_low = LOBYTE(v115[10].isa);
    v54 = (isa_low + 24) & ~isa_low;
    v55 = ((unint64_t)isa + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
    v56 = swift_allocObject(&unk_101095398, v55 + 8, isa_low | 7);
    *(_QWORD *)(v56 + 16) = v47;
    ((void (*)(uint64_t, _BYTE *, uint64_t))v52[4].isa)(v56 + v54, v51, v15);
    *(_QWORD *)(v56 + v55) = v48;
    v57 = v47;
    v114 = (_BYTE *)v48;
    swift_retain();
    sub_100805690((uint64_t)v43, 0, (void (*)(char *))sub_10087BF18, v56, &qword_10110AAC0, type metadata accessor for OwnedDeviceKeyRecord, (uint64_t)sub_100088F8C, (uint64_t)sub_10087BF2C, (uint64_t (*)(uint64_t, void (*)(_QWORD), uint64_t))sub_1008094E4);
    swift_release();
    v58 = v118;
    v126(v118, v127, v15);
    v59 = (uint64_t)v120;
    v60 = sub_10005972C((uint64_t)v43, (uint64_t)v120, type metadata accessor for OwnedDeviceKeyRecord);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter(v61);
    v63 = os_log_type_enabled(v61, v62);
    v115 = v57;
    if (v63)
    {
      v64 = swift_slowAlloc(42, -1);
      v117 = swift_slowAlloc(64, -1);
      v129[0] = v117;
      *(_DWORD *)v64 = 141558787;
      v133 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 4, v64 + 12);
      *(_WORD *)(v64 + 12) = 2081;
      v65 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v15, v65);
      v133 = sub_100016940(v66, v67, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 14, v64 + 22);
      swift_bridgeObjectRelease();
      v123(v58, v15);
      *(_WORD *)(v64 + 22) = 2160;
      v133 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 24, v64 + 32);
      *(_WORD *)(v64 + 32) = 2081;
      v68 = (uint64_t)v120;
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v15, v65);
      v133 = sub_100016940(v69, v70, v129);
      v57 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v64 + 34, v64 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v68, type metadata accessor for OwnedDeviceKeyRecord);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Waiting for the new record to be saved to the cloud %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v64, 0x2Au);
      v71 = v117;
      swift_arrayDestroy(v117, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      v72 = v124;
      swift_slowDealloc(v64, -1, -1);

      v73 = (uint64_t)v119;
      v74 = (uint64_t)v112;
    }
    else
    {
      v123(v58, v15);
      sub_1000126B0(v59, type metadata accessor for OwnedDeviceKeyRecord);

      v73 = (uint64_t)v119;
      v74 = (uint64_t)v112;
      v72 = v124;
    }
    OS_dispatch_group.wait()();
    v75 = v116;
    swift_beginAccess(v116, v129, 0, 0);
    sub_10000F9B8(v75, v74, &qword_1010F7608);
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v122 + 48))(v74, 1, v72) == 1)
    {
      sub_100004048(v74, &qword_1010F7608);
      v76 = v109;
      v126(v109, v127, v15);
      v77 = v111;
      v78 = sub_10005972C((uint64_t)v125, (uint64_t)v111, type metadata accessor for OwnedDeviceKeyRecord);
      v79 = Logger.logObject.getter(v78);
      v80 = static os_log_type_t.error.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        v81 = swift_slowAlloc(42, -1);
        v127 = swift_slowAlloc(64, -1);
        v133 = v127;
        *(_DWORD *)v81 = 141558787;
        v128 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 4, v81 + 12);
        *(_WORD *)(v81 + 12) = 2081;
        v82 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v83 = dispatch thunk of CustomStringConvertible.description.getter(v15, v82);
        v128 = sub_100016940(v83, v84, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 14, v81 + 22);
        swift_bridgeObjectRelease();
        v123(v76, v15);
        *(_WORD *)(v81 + 22) = 2160;
        v128 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 24, v81 + 32);
        *(_WORD *)(v81 + 32) = 2081;
        v85 = v111;
        v86 = dispatch thunk of CustomStringConvertible.description.getter(v15, v82);
        v128 = sub_100016940(v86, v87, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v81 + 34, v81 + 42);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v85, type metadata accessor for OwnedDeviceKeyRecord);
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "OwnedDeviceKeyRecord save failed for %{private,mask.hash}s uuid: %{private,mask.hash}s", (uint8_t *)v81, 0x2Au);
        v88 = v127;
        swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1, -1);
        v89 = v81;
        v57 = v115;
        swift_slowDealloc(v89, -1, -1);
      }
      else
      {
        v123(v76, v15);
        sub_1000126B0((uint64_t)v77, type metadata accessor for OwnedDeviceKeyRecord);
      }

      v102 = sub_10008806C();
      v103 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v102, 0, 0);
      *v104 = 13;
      swift_willThrow(v103);

      sub_1000126B0((uint64_t)v125, type metadata accessor for OwnedDeviceKeyRecord);
    }
    else
    {
      sub_1000126EC(v74, (uint64_t)v113, type metadata accessor for OwnedDeviceKeyRecord);
      v90 = v110;
      v126(v110, v127, v15);
      v91 = sub_10005972C((uint64_t)v125, v73, type metadata accessor for OwnedDeviceKeyRecord);
      v92 = Logger.logObject.getter(v91);
      v93 = static os_log_type_t.default.getter(v92);
      if (os_log_type_enabled(v92, v93))
      {
        v94 = swift_slowAlloc(42, -1);
        v127 = swift_slowAlloc(64, -1);
        v133 = v127;
        *(_DWORD *)v94 = 141558787;
        v128 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 4, v94 + 12);
        *(_WORD *)(v94 + 12) = 2081;
        v95 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v96 = dispatch thunk of CustomStringConvertible.description.getter(v15, v95);
        v128 = sub_100016940(v96, v97, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 14, v94 + 22);
        swift_bridgeObjectRelease();
        v123(v90, v15);
        *(_WORD *)(v94 + 22) = 2160;
        v128 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 24, v94 + 32);
        *(_WORD *)(v94 + 32) = 2081;
        v98 = (uint64_t)v119;
        v99 = dispatch thunk of CustomStringConvertible.description.getter(v15, v95);
        v128 = sub_100016940(v99, v100, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, v129, v94 + 34, v94 + 42);
        swift_bridgeObjectRelease();
        sub_1000126B0(v98, type metadata accessor for OwnedDeviceKeyRecord);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "OwnedDeviceKeyRecord saved to CloudKit for: %{private,mask.hash}s uuid: %{private,mask.hash}s.", (uint8_t *)v94, 0x2Au);
        v101 = v127;
        swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v94, -1, -1);

      }
      else
      {

        sub_1000126B0(v73, type metadata accessor for OwnedDeviceKeyRecord);
        v123(v90, v15);

      }
      sub_1000126B0((uint64_t)v125, type metadata accessor for OwnedDeviceKeyRecord);
      sub_1000126EC((uint64_t)v113, v108, type metadata accessor for OwnedDeviceKeyRecord);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1007F6EC4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t (*v31)(char *, char *, uint64_t);
  uint64_t i;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t Path;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, char *, uint64_t);
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t (*v66)(char *, char *, uint64_t);
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;

  v62 = a1;
  v58 = a2;
  v2 = sub_10001A9A8(&qword_1010ED860);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v56 - v6;
  v8 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v8 - 8);
  v69 = v8;
  __chkstk_darwin(v8);
  v64 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v59 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  v19 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v19);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DirectorySequence(0);
  v56 = *(_QWORD *)(v22 - 8);
  v57 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  if (qword_1010E9B78 != -1)
    swift_once(&qword_1010E9B78, sub_10033DA58);
  v26 = sub_10001A9E8(v10, (uint64_t)qword_1011B6DB0);
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v26, 0, 0);

  DirectorySequence.next()(v27);
  v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v67(v21, 1, v10) != 1)
  {
    v31 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
    v65 = (unint64_t)"shold: %{public}@";
    v66 = v31;
    v63 = 0x8000000100ECC9E0;
    v61 = v24;
    for (i = v31(v18, v21, v10); ; i = v66(v18, v21, v10))
    {
      v35 = URL.pathExtension.getter(i);
      if (v35 == 0xD000000000000010 && v36 == v63)
      {
        v37 = swift_bridgeObjectRelease();
      }
      else
      {
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, 0xD000000000000010, v65 | 0x8000000000000000, 0);
        v37 = swift_bridgeObjectRelease();
        if ((v38 & 1) == 0)
        {
          v34 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, v10);
          goto LABEL_8;
        }
      }
      v39 = v11;
      v40 = URL.deletingPathExtension()(v37);
      v41 = URL.lastPathComponent.getter(v40);
      UUID.init(uuidString:)(v41, v42);
      swift_bridgeObjectRelease();
      v43 = v68;
      v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v68 + 48);
      if (v44(v7, 1, v69) == 1)
      {
        v11 = v39;
        v33 = *(void (**)(char *, uint64_t))(v39 + 8);
        v33(v16, v10);
        v33(v18, v10);
        v34 = sub_100004048((uint64_t)v7, &qword_1010ED860);
      }
      else
      {
        v45 = v16;
        v46 = v64;
        v60 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
        v60(v64, v7, v69);
        v47 = static UUID.== infix(_:_:)(v46, v62);
        if ((v47 & 1) != 0)
        {
          v48 = v59;
          Path = URL.deletingLastPathComponent()(v47);
          v50 = URL.lastPathComponent.getter(Path);
          UUID.init(uuidString:)(v50, v51);
          swift_bridgeObjectRelease();
          v52 = *(void (**)(char *, uint64_t))(v39 + 8);
          v53 = v48;
          v16 = v45;
          v52(v53, v10);
          v54 = v69;
          (*(void (**)(char *, uint64_t))(v68 + 8))(v64, v69);
          v52(v16, v10);
          v52(v18, v10);
          if (v44(v5, 1, v54) != 1)
          {
            (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v57);
            v29 = v58;
            v60(v58, v5, v69);
            v28 = 0;
            return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v29, v28, 1, v69);
          }
          v34 = sub_100004048((uint64_t)v5, &qword_1010ED860);
          v11 = v39;
          v24 = v61;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v43 + 8))(v64, v69);
          v11 = v39;
          v55 = *(void (**)(char *, uint64_t))(v39 + 8);
          v16 = v45;
          v55(v45, v10);
          v34 = ((uint64_t (*)(char *, uint64_t))v55)(v18, v10);
          v24 = v61;
        }
      }
LABEL_8:
      DirectorySequence.next()(v34);
      if (v67(v21, 1, v10) == 1)
        break;
    }
  }
  (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v57);
  v28 = 1;
  v29 = v58;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v29, v28, 1, v69);
}

uint64_t sub_1007F73D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    if (a3 == 1)
      v12 = 0x7261646E6F636553;
    else
      v12 = 0x6F4C657275636553;
    if (a3 == 1)
      v13 = 0xE900000000000079;
    else
      v13 = 0xEF736E6F69746163;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, 0x7972616D697250, 0xE700000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v15 = sub_100C1AE40(v21);
      goto LABEL_16;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v15 = sub_100C1A848(v21);
LABEL_16:
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = a1[3];
  v18 = a1[4];
  sub_10001AA44(a1, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 184))(v17, v18);
  if ((v16 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    sub_10064C538(v11, a2, v16, a4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

Swift::Int sub_1007F7648(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for BeaconEstimatedLocation(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F0D8(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10084F55C(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1007F76C8(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F164(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10027EDD4(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1007F7748(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v5;
  Swift::Int result;

  type metadata accessor for BeaconStatus(0);
  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = (_QWORD *)sub_10088F1C8(v5);
  result = sub_10085037C(a1, a2);
  *v2 = v5;
  return result;
}

uint64_t sub_1007F77E0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B77E8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Requesting SPUnknownBeaconsSetChangedNotification to be posted before rate limit.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
}

void *sub_1007F78E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  double v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t i;
  int64_t v88;
  unint64_t v89;
  int64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, unint64_t, uint64_t);
  void (*v94)(uint64_t, char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  void **v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  __int16 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  os_log_type_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char *v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t);
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  _QWORD *v167;
  int64_t v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  int v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  void **v193;
  void (*v194)(char *, uint64_t);
  uint64_t v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  NSObject *v212;
  os_log_type_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t v221;
  uint64_t v222;
  os_log_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t inited;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  NSObject *v236;
  os_log_type_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  NSObject *v257;
  os_log_type_t v258;
  uint64_t v259;
  uint8_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  NSObject *v274;
  os_log_type_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v289;
  os_log_t v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  __int128 v294;
  char *v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  __int128 v301;
  char *v302;
  __int128 v303;
  uint64_t v304;
  char *v305;
  uint64_t v306;
  char *v307;
  char *v308;
  char *v309;
  __int128 v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void **v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  int64_t v330;
  __int128 v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  char *v339;
  void (*v340)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  int64_t v344;
  uint64_t v345;
  char *v346;
  char *v347;
  uint64_t v348;
  char v349[8];
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  char v355[16];

  v2 = v1;
  v317 = type metadata accessor for Date(0);
  v316 = *(_QWORD *)(v317 - 8);
  v4 = __chkstk_darwin(v317);
  v315 = (uint64_t)&v289 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v314 = (char *)&v289 - v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  __chkstk_darwin(v7);
  v322 = (uint64_t)&v289 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v289 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v295 = (char *)&v289 - v14;
  v15 = __chkstk_darwin(v13);
  v297 = (uint64_t)&v289 - v16;
  v17 = __chkstk_darwin(v15);
  v300 = (uint64_t)&v289 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v289 - v20;
  __chkstk_darwin(v19);
  v298 = (uint64_t)&v289 - v22;
  v23 = sub_10001A9A8(&qword_10110EEB0);
  __chkstk_darwin(v23);
  v325 = (uint64_t)&v289 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v324 = type metadata accessor for BeaconProductInfoRecord(0);
  v323 = *(_QWORD *)(v324 - 8);
  __chkstk_darwin(v324);
  v319 = (uint64_t)&v289 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v26);
  v339 = (char *)&v289 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v336 = type metadata accessor for OwnedBeaconRecord(0);
  v335 = *(_QWORD *)(v336 - 8);
  __chkstk_darwin(v336);
  v342 = (uint64_t)&v289 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v341 = type metadata accessor for BeaconStatus(0);
  v29 = __chkstk_darwin(v341);
  v308 = (char *)&v289 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v306 = (uint64_t)&v289 - v32;
  v33 = __chkstk_darwin(v31);
  v334 = (uint64_t)&v289 - v34;
  v35 = __chkstk_darwin(v33);
  v333 = (uint64_t)&v289 - v36;
  v37 = __chkstk_darwin(v35);
  v313 = (uint64_t)&v289 - v38;
  v39 = __chkstk_darwin(v37);
  v328 = (uint64_t)&v289 - v40;
  __chkstk_darwin(v39);
  v345 = (uint64_t)&v289 - v41;
  v42 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = __chkstk_darwin(v42);
  v296 = (char *)&v289 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __chkstk_darwin(v44);
  v48 = (char *)&v289 - v47;
  v49 = __chkstk_darwin(v46);
  v312 = (char *)&v289 - v50;
  v51 = __chkstk_darwin(v49);
  v305 = (char *)&v289 - v52;
  v53 = __chkstk_darwin(v51);
  v55 = (char *)&v289 - v54;
  __chkstk_darwin(v53);
  v347 = (char *)&v289 - v56;
  v57 = sub_10001A9A8(&qword_1010ED860);
  v58 = __chkstk_darwin(v57);
  v59 = __chkstk_darwin(v58);
  v299 = (char *)&v289 - v60;
  v61 = __chkstk_darwin(v59);
  v338 = (char *)&v289 - v62;
  __chkstk_darwin(v61);
  v321 = (uint64_t)&v289 - v64;
  v311 = v9;
  v65 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v9 + 40)) + 16);
  if (v65 >= 0x100)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
    JUMPOUT(0x1007F9E78);
  }
  v327 = a1;
  if (v65 == 1)
  {
    if (qword_1010E9F90 != -1)
LABEL_114:
      swift_once(&qword_1010E9F90, sub_1007FA7C0);
    v66 = type metadata accessor for Logger(0);
    sub_10001A9E8(v66, (uint64_t)qword_1011B7818);
    v67 = sub_10005972C(v327, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    v68 = Logger.logObject.getter(v67);
    v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = swift_slowAlloc(32, -1);
      v350 = v71;
      *(_DWORD *)v70 = 136446210;
      v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v73 = dispatch thunk of CustomStringConvertible.description.getter(v42, v72);
      v354 = (void *)sub_100016940(v73, v74, &v350);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v354, v355, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%{public}s is a single beacon group, returning default set of 1 beacon", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    }

    v226 = sub_10001A9A8(&qword_10110AAE8);
    inited = swift_initStackObject(v226, v349);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    sub_10036AC6C();
    *(_QWORD *)(inited + 32) = v228;
    v229 = sub_100CA84CC(inited);
    swift_setDeallocating(inited);
    v230 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
    swift_arrayDestroy(inited + 32, 1, v230);
    return (void *)v229;
  }
  v307 = v21;
  v320 = v48;
  v292 = v63;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v75 = sub_100C1AED0(v350);
  swift_bridgeObjectRelease();
  v76 = (double)v75;
  v354 = &_swiftEmptySetSingleton;
  v340 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
  v340(v321, 1, 1, v42);
  sub_10036AC6C();
  v77 = 0;
  v79 = *(_QWORD *)(v78 + 56);
  v329 = v78 + 56;
  v337 = v78;
  v80 = 1 << *(_BYTE *)(v78 + 32);
  v81 = -1;
  if (v80 < 64)
    v81 = ~(-1 << v80);
  v82 = v81 & v79;
  v330 = (unint64_t)(v80 + 63) >> 6;
  v326 = &v354;
  v302 = (char *)&v353 + 1;
  v331 = xmmword_100E2E3D0;
  v310 = 0x8700203uLL;
  v309 = (char *)&type metadata for Any + 8;
  v301 = 0x1000202uLL;
  v303 = 0x8200102uLL;
  v294 = 0x8200202uLL;
  v293 = 0x8220202uLL;
  v332 = v2;
  v348 = v43;
  v12 = v339;
  v346 = v55;
  v83 = (uint64_t)v347;
  v84 = v338;
  v318 = v42;
  if ((v81 & v79) == 0)
    goto LABEL_12;
LABEL_11:
  v85 = __clz(__rbit64(v82));
  v86 = (v82 - 1) & v82;
  v344 = v77;
  for (i = v85 | (v77 << 6); ; i = __clz(__rbit64(v89)) + (v90 << 6))
  {
    v92 = *(_QWORD *)(v43 + 72);
    v93 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    v93(v84, *(_QWORD *)(v337 + 48) + v92 * i, v42);
    v340((uint64_t)v84, 0, 1, v42);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v84, 1, v42) == 1)
      goto LABEL_90;
    v343 = v86;
    v94 = *(void (**)(uint64_t, char *, uint64_t))(v43 + 32);
    v94(v83, v84, v42);
    v95 = v345;
    v96 = ((uint64_t (*)(uint64_t, char *, uint64_t))v93)(v345, v347, v42);
    v97 = (int *)v341;
    static Date.distantPast.getter(v96);
    *(_BYTE *)(v95 + v97[5]) = 0;
    *(_OWORD *)(v95 + v97[7]) = v331;
    *(_BYTE *)(v95 + v97[8]) = 0;
    *(_QWORD *)(v95 + v97[9]) = 0;
    v98 = (uint64_t)v347;
    sub_10080B950((uint64_t)v347, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v335 + 48))(v12, 1, v336) == 1)
    {
      v99 = v2;
      sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
      if (qword_1010E9F90 != -1)
        swift_once(&qword_1010E9F90, sub_1007FA7C0);
      v100 = type metadata accessor for Logger(0);
      sub_10001A9E8(v100, (uint64_t)qword_1011B7818);
      v101 = v320;
      v102 = ((uint64_t (*)(char *, uint64_t, uint64_t))v93)(v320, v98, v42);
      v103 = Logger.logObject.getter(v102);
      v104 = static os_log_type_t.error.getter(v103);
      if (os_log_type_enabled(v103, v104))
      {
        v105 = swift_slowAlloc(22, -1);
        v106 = swift_slowAlloc(32, -1);
        v350 = v106;
        *(_DWORD *)v105 = v310;
        v353 = 1752392040;
        v107 = v326;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v326, v105 + 4, v105 + 12);
        *(_WORD *)(v105 + 12) = 2081;
        v108 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v109 = dispatch thunk of CustomStringConvertible.description.getter(v42, v108);
        v353 = sub_100016940(v109, v110, &v350);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v107, v105 + 14, v105 + 22);
        swift_bridgeObjectRelease();
        v111 = *(void (**)(char *, uint64_t))(v348 + 8);
        v111(v101, v42);
        _os_log_impl((void *)&_mh_execute_header, v103, v104, "No beacon record for %{private,mask.hash}s", (uint8_t *)v105, 0x16u);
        swift_arrayDestroy(v106, 1, v309);
        v99 = v332;
        swift_slowDealloc(v106, -1, -1);
        v112 = v105;
        v43 = v348;
        swift_slowDealloc(v112, -1, -1);
      }
      else
      {
        v111 = *(void (**)(char *, uint64_t))(v43 + 8);
        v111(v101, v42);
      }

      v77 = v344;
      v115 = v345;
      v116 = v334;
      sub_10005972C(v345, v334, type metadata accessor for BeaconStatus);
      v117 = v333;
      sub_100A10054(v333, v116);
      sub_1000126B0(v117, type metadata accessor for BeaconStatus);
      v118 = v115;
      goto LABEL_70;
    }
    sub_1000126EC((uint64_t)v12, v342, type metadata accessor for OwnedBeaconRecord);
    v113 = v325;
    sub_10081BB64(v98, v325);
    v114 = v324;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v323 + 48))(v113, 1, v324) == 1)
    {
      sub_100004048(v113, &qword_10110EEB0);
    }
    else
    {
      v119 = v2;
      v120 = v113;
      v121 = v319;
      sub_1000126EC(v120, v319, type metadata accessor for BeaconProductInfoRecord);
      v122 = v121;
      v12 = *(char **)(v121 + *(int *)(v114 + 72));
      if (v12)
      {
        v123 = *((_QWORD *)v12 + 2);
        if (v123)
        {
          v124 = 88;
          v125 = 1;
          while (1)
          {
            v126 = v12[v124];
            if (v126 != 2 && (v126 & 1) != 0)
              break;
            if (v123 == v125)
              goto LABEL_45;
            v124 += 64;
            if (__OFADD__(v125++, 1))
            {
              __break(1u);
              goto LABEL_112;
            }
          }
          v208 = qword_1010E9F90;
          swift_bridgeObjectRetain(v12);
          if (v208 != -1)
            swift_once(&qword_1010E9F90, sub_1007FA7C0);
          v209 = type metadata accessor for Logger(0);
          sub_10001A9E8(v209, (uint64_t)qword_1011B7818);
          v210 = v298;
          sub_10005972C(v327, v298, type metadata accessor for OwnedBeaconGroup);
          swift_bridgeObjectRetain(v12);
          v212 = Logger.logObject.getter(v211);
          v213 = static os_log_type_t.default.getter(v212);
          LODWORD(v304) = v213;
          if (!os_log_type_enabled(v212, v213))
          {
            swift_bridgeObjectRelease_n(v12, 2);

            sub_1000126B0(v210, type metadata accessor for OwnedBeaconGroup);
            sub_1000126B0(v319, type metadata accessor for BeaconProductInfoRecord);
            v140 = v321;
            sub_100004048(v321, &qword_1010ED860);
            v2 = v119;
            goto LABEL_53;
          }
          v214 = swift_slowAlloc(22, -1);
          v291 = swift_slowAlloc(64, -1);
          v350 = v291;
          *(_DWORD *)v214 = v293;
          v290 = v212;
          v215 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v216 = dispatch thunk of CustomStringConvertible.description.getter(v42, v215);
          v353 = sub_100016940(v216, v217, &v350);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v326, v214 + 4, v214 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v210, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v214 + 12) = 2080;
          swift_bridgeObjectRetain(v12);
          v219 = Array.description.getter(v218, &type metadata for AccessoryLayoutTemplate);
          v221 = v220;
          swift_bridgeObjectRelease();
          v222 = v219;
          v98 = (uint64_t)v347;
          v2 = v332;
          v353 = sub_100016940(v222, v221, &v350);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v326, v214 + 14, v214 + 22);
          swift_bridgeObjectRelease_n(v12, 2);
          v140 = v321;
          swift_bridgeObjectRelease();
          v223 = v290;
          _os_log_impl((void *)&_mh_execute_header, v290, (os_log_type_t)v304, "Group %{public}s multipart layout template: %s", (uint8_t *)v214, 0x16u);
          v224 = v291;
          swift_arrayDestroy(v291, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v224, -1, -1);
          v225 = v214;
          v43 = v348;
          swift_slowDealloc(v225, -1, -1);

          sub_1000126B0(v319, type metadata accessor for BeaconProductInfoRecord);
          goto LABEL_51;
        }
      }
LABEL_45:
      sub_1000126B0(v122, type metadata accessor for BeaconProductInfoRecord);
    }
    sub_1009A2B44();
    if ((v128 & 0x1FF) != 2)
      goto LABEL_54;
    if (qword_1010E9F90 != -1)
      swift_once(&qword_1010E9F90, sub_1007FA7C0);
    v129 = type metadata accessor for Logger(0);
    sub_10001A9E8(v129, (uint64_t)qword_1011B7818);
    v130 = (uint64_t)v307;
    v131 = sub_10005972C(v327, (uint64_t)v307, type metadata accessor for OwnedBeaconGroup);
    v132 = Logger.logObject.getter(v131);
    v133 = static os_log_type_t.default.getter(v132);
    if (!os_log_type_enabled(v132, v133))
    {

      sub_1000126B0(v130, type metadata accessor for OwnedBeaconGroup);
      v140 = v321;
      sub_100004048(v321, &qword_1010ED860);
      v2 = v332;
      goto LABEL_53;
    }
    v134 = swift_slowAlloc(15, -1);
    v304 = swift_slowAlloc(32, -1);
    v350 = v304;
    *(_DWORD *)v134 = v301;
    LOBYTE(v353) = 2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v302, v134 + 4, v134 + 5);
    *(_WORD *)(v134 + 5) = 2082;
    v135 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v136 = dispatch thunk of CustomStringConvertible.description.getter(v42, v135);
    v353 = sub_100016940(v136, v137, &v350);
    v138 = v42;
    v139 = v321;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v326, v134 + 7, v134 + 15);
    v140 = v139;
    v42 = v138;
    swift_bridgeObjectRelease();
    sub_1000126B0(v130, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v132, v133, "AlphaWasp: hardcoding primary part %hhu for group %{public}s.", (uint8_t *)v134, 0xFu);
    v141 = v304;
    swift_arrayDestroy(v304, 1, (char *)&type metadata for Any + 8);
    v142 = v141;
    v98 = (uint64_t)v347;
    v2 = v332;
    swift_slowDealloc(v142, -1, -1);
    v143 = v134;
    v43 = v348;
    swift_slowDealloc(v143, -1, -1);

LABEL_51:
    sub_100004048(v140, &qword_1010ED860);
LABEL_53:
    v93((char *)v140, v98, v42);
    v340(v140, 0, 1, v42);
LABEL_54:
    v144 = v322;
    sub_1008202EC(v98, v322);
    v145 = sub_10001A9A8(&qword_101102F80);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v145 - 8) + 48))(v144, 1, v145) == 1)
    {
      v99 = v2;
      sub_100004048(v144, (uint64_t *)&unk_101102F70);
      if (qword_1010E9F90 != -1)
        swift_once(&qword_1010E9F90, sub_1007FA7C0);
      v146 = type metadata accessor for Logger(0);
      sub_10001A9E8(v146, (uint64_t)qword_1011B7818);
      v147 = v312;
      v148 = ((uint64_t (*)(char *, uint64_t, uint64_t))v93)(v312, v98, v42);
      v149 = Logger.logObject.getter(v148);
      v150 = static os_log_type_t.default.getter(v149);
      if (os_log_type_enabled(v149, v150))
      {
        v151 = (uint8_t *)swift_slowAlloc(12, -1);
        v152 = swift_slowAlloc(32, -1);
        v350 = v152;
        *(_DWORD *)v151 = v303;
        v153 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v154 = dispatch thunk of CustomStringConvertible.description.getter(v42, v153);
        v353 = sub_100016940(v154, v155, &v350);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v326, v151 + 4, v151 + 12);
        swift_bridgeObjectRelease();
        v156 = v147;
        v111 = *(void (**)(char *, uint64_t))(v348 + 8);
        v111(v156, v42);
        _os_log_impl((void *)&_mh_execute_header, v149, v150, "No beacon status for %s", v151, 0xCu);
        swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
        v99 = v332;
        swift_slowDealloc(v152, -1, -1);
        v157 = v151;
        v43 = v348;
        swift_slowDealloc(v157, -1, -1);
      }
      else
      {
        v176 = v147;
        v111 = *(void (**)(char *, uint64_t))(v43 + 8);
        v111(v176, v42);
      }

      v77 = v344;
      v177 = v345;
      v178 = v334;
      sub_10005972C(v345, v334, type metadata accessor for BeaconStatus);
      v179 = v333;
      sub_100A10054(v333, v178);
      sub_1000126B0(v179, type metadata accessor for BeaconStatus);
      sub_1000126B0(v342, type metadata accessor for OwnedBeaconRecord);
      v118 = v177;
LABEL_70:
      sub_1000126B0(v118, type metadata accessor for BeaconStatus);
      v83 = (uint64_t)v347;
      v111(v347, v42);
      v12 = v339;
      v84 = v338;
      v82 = v343;
      v2 = v99;
      if (v343)
        goto LABEL_11;
      goto LABEL_12;
    }
    v158 = v313;
    sub_1000126EC(v144, v313, type metadata accessor for BeaconStatus);
    v159 = v328;
    sub_1000126EC(v158, v328, type metadata accessor for BeaconStatus);
    v160 = v341;
    v161 = v314;
    Date.addingTimeInterval(_:)(v76);
    v162 = v315;
    static Date.trustedNow.getter(v315);
    LOBYTE(v158) = static Date.> infix(_:_:)(v161, v162);
    v163 = *(void (**)(uint64_t, uint64_t))(v316 + 8);
    v164 = v162;
    v165 = v317;
    v163(v164, v317);
    v163((uint64_t)v161, v165);
    if ((v158 & 1) != 0)
    {
      v166 = sub_1000AF25C(*(_BYTE *)(v159 + *(int *)(v160 + 20)) & 0xB);
      v167 = sub_10085FDB4(v342, (v166 >> 8) & 1, HIWORD(v166) & 1, HIBYTE(v166) & 1, v332);
      v168 = v167[2];
      if (v168)
      {
        v353 = (uint64_t)_swiftEmptyArrayStorage;
        sub_10009A578(0, v168, 0);
        v169 = (uint64_t)(v167 + 4);
        v170 = (_QWORD *)v353;
        v171 = v318;
        do
        {
          sub_100030784(v169, (uint64_t)&v350);
          v173 = v351;
          v172 = v352;
          sub_10001AA44(&v350, v351);
          (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v172 + 8) + 8) + 32))(v173);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v350);
          if ((swift_isUniquelyReferenced_nonNull_native(v170) & 1) == 0)
          {
            sub_10009A578(0, v170[2] + 1, 1);
            v170 = (_QWORD *)v353;
          }
          v175 = v170[2];
          v174 = v170[3];
          if (v175 >= v174 >> 1)
          {
            sub_10009A578(v174 > 1, v175 + 1, 1);
            v170 = (_QWORD *)v353;
          }
          v170[2] = v175 + 1;
          v94((uint64_t)v170+ ((*(unsigned __int8 *)(v348 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v348 + 80))+ v175 * v92, v346, v171);
          v353 = (uint64_t)v170;
          v169 += 40;
          --v168;
        }
        while (v168);
        swift_bridgeObjectRelease();
        v160 = v341;
        v159 = v328;
      }
      else
      {
        swift_bridgeObjectRelease();
        v170 = _swiftEmptyArrayStorage;
      }
      v203 = v333;
      sub_10005972C(v159, v333, type metadata accessor for BeaconStatus);
      v204 = sub_10001B664((uint64_t)v170);
      swift_bridgeObjectRelease();
      v205 = *(int *)(v160 + 36);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v203 + v205) = v204;
      v206 = v306;
      sub_10005972C(v203, v306, type metadata accessor for BeaconStatus);
      v207 = v334;
      sub_100A10054(v334, v206);
      sub_1000126B0(v207, type metadata accessor for BeaconStatus);
      sub_1000126B0(v159, type metadata accessor for BeaconStatus);
      sub_1000126B0(v342, type metadata accessor for OwnedBeaconRecord);
      sub_1000126B0(v345, type metadata accessor for BeaconStatus);
      v83 = (uint64_t)v347;
      v43 = v348;
      v42 = v318;
      (*(void (**)(char *, uint64_t))(v348 + 8))(v347, v318);
      sub_1000126B0(v203, type metadata accessor for BeaconStatus);
      v12 = v339;
      v84 = v338;
      v77 = v344;
    }
    else
    {
      v180 = (uint64_t)v308;
      if (qword_1010E9F90 != -1)
        swift_once(&qword_1010E9F90, sub_1007FA7C0);
      v181 = type metadata accessor for Logger(0);
      sub_10001A9E8(v181, (uint64_t)qword_1011B7818);
      v182 = v305;
      v42 = v318;
      v93(v305, (unint64_t)v347, v318);
      v183 = sub_10005972C(v328, v180, type metadata accessor for BeaconStatus);
      v184 = Logger.logObject.getter(v183);
      v185 = static os_log_type_t.default.getter(v184);
      v186 = v185;
      if (os_log_type_enabled(v184, v185))
      {
        v187 = swift_slowAlloc(22, -1);
        v188 = v182;
        v189 = swift_slowAlloc(64, -1);
        v350 = v189;
        *(_DWORD *)v187 = v294;
        v190 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v191 = dispatch thunk of CustomStringConvertible.description.getter(v42, v190);
        v353 = sub_100016940(v191, v192, &v350);
        v193 = v326;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v326, v187 + 4, v187 + 12);
        swift_bridgeObjectRelease();
        LODWORD(v304) = v186;
        v194 = *(void (**)(char *, uint64_t))(v348 + 8);
        v194(v188, v42);
        *(_WORD *)(v187 + 12) = 2080;
        v195 = (uint64_t)v308;
        v196 = sub_1000AF25C(v308[*(int *)(v341 + 20)] & 0xB);
        v197 = sub_1000AEBCC(v196 & 0x10101FF);
        v353 = sub_100016940(v197, v198, &v350);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, v193, v187 + 14, v187 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v195, type metadata accessor for BeaconStatus);
        _os_log_impl((void *)&_mh_execute_header, v184, (os_log_type_t)v304, "Beacon status for %s expired. %s", (uint8_t *)v187, 0x16u);
        swift_arrayDestroy(v189, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v189, -1, -1);
        v199 = v187;
        v43 = v348;
        swift_slowDealloc(v199, -1, -1);
      }
      else
      {
        v194 = *(void (**)(char *, uint64_t))(v43 + 8);
        v194(v182, v42);
        sub_1000126B0(v180, type metadata accessor for BeaconStatus);
      }

      v77 = v344;
      v200 = v345;
      v201 = v334;
      sub_10005972C(v345, v334, type metadata accessor for BeaconStatus);
      v202 = v333;
      sub_100A10054(v333, v201);
      sub_1000126B0(v202, type metadata accessor for BeaconStatus);
      sub_1000126B0(v328, type metadata accessor for BeaconStatus);
      sub_1000126B0(v342, type metadata accessor for OwnedBeaconRecord);
      sub_1000126B0(v200, type metadata accessor for BeaconStatus);
      v83 = (uint64_t)v347;
      v194(v347, v42);
      v12 = v339;
      v84 = v338;
    }
    v82 = v343;
    v2 = v332;
    if (v343)
      goto LABEL_11;
LABEL_12:
    v88 = v77 + 1;
    if (__OFADD__(v77, 1))
    {
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
      goto LABEL_114;
    }
    if (v88 >= v330)
      goto LABEL_89;
    v89 = *(_QWORD *)(v329 + 8 * v88);
    v90 = v77 + 1;
    if (!v89)
    {
      v90 = v77 + 2;
      if (v77 + 2 >= v330)
        goto LABEL_89;
      v89 = *(_QWORD *)(v329 + 8 * v90);
      if (!v89)
      {
        v90 = v77 + 3;
        if (v77 + 3 >= v330)
          goto LABEL_89;
        v89 = *(_QWORD *)(v329 + 8 * v90);
        if (!v89)
          break;
      }
    }
LABEL_25:
    v86 = (v89 - 1) & v89;
    v344 = v90;
  }
  v91 = v77 + 4;
  if (v77 + 4 < v330)
  {
    v89 = *(_QWORD *)(v329 + 8 * v91);
    if (!v89)
    {
      while (1)
      {
        v90 = v91 + 1;
        if (__OFADD__(v91, 1))
          goto LABEL_113;
        if (v90 >= v330)
          goto LABEL_89;
        v89 = *(_QWORD *)(v329 + 8 * v90);
        ++v91;
        if (v89)
          goto LABEL_25;
      }
    }
    v90 = v77 + 4;
    goto LABEL_25;
  }
LABEL_89:
  v340((uint64_t)v84, 1, 1, v42);
LABEL_90:
  swift_release(v337);
  v231 = sub_10082E568((uint64_t)v354, v321);
  swift_bridgeObjectRelease();
  if (qword_1010E9F90 != -1)
    swift_once(&qword_1010E9F90, sub_1007FA7C0);
  v232 = type metadata accessor for Logger(0);
  v233 = sub_10001A9E8(v232, (uint64_t)qword_1011B7818);
  v234 = v300;
  sub_10005972C(v327, v300, type metadata accessor for OwnedBeaconGroup);
  v235 = swift_bridgeObjectRetain_n(v231, 2);
  v236 = Logger.logObject.getter(v235);
  v237 = static os_log_type_t.default.getter(v236);
  if (os_log_type_enabled(v236, v237))
  {
    v238 = swift_slowAlloc(22, -1);
    v347 = (char *)v233;
    v239 = v238;
    v240 = swift_slowAlloc(64, -1);
    v350 = v240;
    *(_DWORD *)v239 = v293;
    v241 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v242 = dispatch thunk of CustomStringConvertible.description.getter(v42, v241);
    v353 = sub_100016940(v242, v243, &v350);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v239 + 4, v239 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v234, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v239 + 12) = 2082;
    swift_bridgeObjectRetain(v231);
    v244 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
    v245 = sub_1000193A4(&qword_10110AAE0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
    v246 = Set.description.getter(v231, v244, v245);
    v248 = v247;
    swift_bridgeObjectRelease();
    v353 = sub_100016940(v246, v248, &v350);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v239 + 14, v239 + 22);
    swift_bridgeObjectRelease_n(v231, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v236, v237, "MultipartStatus for %{public}s: %{public}s)", (uint8_t *)v239, 0x16u);
    swift_arrayDestroy(v240, 2, (char *)&type metadata for Any + 8);
    v249 = v321;
    swift_slowDealloc(v240, -1, -1);
    v250 = v239;
    v233 = (uint64_t)v347;
    swift_slowDealloc(v250, -1, -1);

    v251 = (uint64_t)v299;
  }
  else
  {
    sub_1000126B0(v234, type metadata accessor for OwnedBeaconGroup);

    swift_bridgeObjectRelease_n(v231, 2);
    v251 = (uint64_t)v299;
    v249 = v321;
  }
  sub_10000F9B8(v249, v251, &qword_1010ED860);
  v252 = v348;
  v253 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v348 + 48))(v251, 1, v42);
  v254 = v327;
  if (v253 == 1)
  {
    sub_100004048(v251, &qword_1010ED860);
    v255 = v297;
    v256 = sub_10005972C(v254, v297, type metadata accessor for OwnedBeaconGroup);
    v257 = Logger.logObject.getter(v256);
    v258 = static os_log_type_t.default.getter(v257);
    if (os_log_type_enabled(v257, v258))
    {
      v259 = swift_slowAlloc(12, -1);
      v347 = (char *)v233;
      v260 = (uint8_t *)v259;
      v261 = swift_slowAlloc(32, -1);
      v350 = v261;
      *(_DWORD *)v260 = 136446210;
      v262 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v263 = dispatch thunk of CustomStringConvertible.description.getter(v42, v262);
      v353 = sub_100016940(v263, v264, &v350);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v260 + 4, v260 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v255, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v257, v258, "No primary beacon in group %{public}s.", v260, 0xCu);
      swift_arrayDestroy(v261, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v261, -1, -1);
      swift_slowDealloc(v260, -1, -1);
    }
    else
    {
      sub_1000126B0(v255, type metadata accessor for OwnedBeaconGroup);
    }

    v268 = (uint64_t)v295;
    v269 = v327;
    v270 = sub_10081D61C(v327);
    if (v270 == 3)
    {
      sub_100004048(v321, &qword_1010ED860);
      return v231;
    }
    v271 = v270;
    v272 = v292;
    v340(v292, 1, 1, v42);
    v229 = sub_100860204((uint64_t)v231, v272);
    swift_bridgeObjectRelease();
    sub_100004048(v272, &qword_1010ED860);
    sub_10005972C(v269, v268, type metadata accessor for OwnedBeaconGroup);
    v273 = swift_bridgeObjectRetain_n(v229, 2);
    v274 = Logger.logObject.getter(v273);
    v275 = static os_log_type_t.default.getter(v274);
    if (os_log_type_enabled(v274, v275))
    {
      v276 = swift_slowAlloc(32, -1);
      v277 = swift_slowAlloc(96, -1);
      v350 = v277;
      *(_DWORD *)v276 = 136446722;
      v278 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v279 = dispatch thunk of CustomStringConvertible.description.getter(v42, v278);
      v353 = sub_100016940(v279, v280, &v350);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v276 + 4, v276 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v268, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v276 + 12) = 2082;
      v281 = 0x6574617261706573;
      v282 = 0xE900000000000064;
      switch(v271)
      {
        case 1:
          break;
        case 2:
          v282 = 0xE700000000000000;
          v281 = 0x646570756F7267;
          break;
        case 4:
          v282 = 0xEF657361436E4964;
          break;
        default:
          v282 = 0xE700000000000000;
          v281 = 0x6E776F6E6B6E75;
          break;
      }
      v353 = sub_100016940(v281, v282, &v350);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v276 + 14, v276 + 22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v276 + 22) = 2082;
      swift_bridgeObjectRetain(v229);
      v283 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
      v284 = sub_1000193A4(&qword_10110AAE0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
      v285 = Set.description.getter(v229, v283, v284);
      v287 = v286;
      swift_bridgeObjectRelease();
      v353 = sub_100016940(v285, v287, &v350);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v353, &v354, v276 + 24, v276 + 32);
      swift_bridgeObjectRelease_n(v229, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v274, v275, "Group %{public}s legacy status: %{public}s. After separated: %{public}s.", (uint8_t *)v276, 0x20u);
      swift_arrayDestroy(v277, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v277, -1, -1);
      swift_slowDealloc(v276, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v229, 2);

      sub_1000126B0(v268, type metadata accessor for OwnedBeaconGroup);
    }
    v267 = v321;
  }
  else
  {
    v265 = v296;
    (*(void (**)(char *, uint64_t, uint64_t))(v252 + 32))(v296, v251, v42);
    v266 = v292;
    (*(void (**)(uint64_t, char *, uint64_t))(v252 + 16))(v292, v265, v42);
    v340(v266, 0, 1, v42);
    v229 = sub_100860204((uint64_t)v231, v266);
    swift_bridgeObjectRelease();
    sub_100004048(v266, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v252 + 8))(v265, v42);
    v267 = v249;
  }
  sub_100004048(v267, &qword_1010ED860);
  return (void *)v229;
}

void sub_1007F9E8C(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];

  v10 = sub_10001A9A8(a4);
  __chkstk_darwin(v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = swift_projectBox(a2);
  sub_10000F9B8(a1, (uint64_t)v12, a5);
  v14 = sub_10001A9A8(a5);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 0, 1, v14);
  swift_beginAccess(v13, v16, 1, 0);
  sub_100004084((uint64_t)v12, v13, a4);
  dispatch_group_leave(a3);
}

uint64_t sub_1007F9F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v7);
  v11 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  aBlock[4] = sub_100878F84;
  v23 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101094D98;
  v12 = _Block_copy(aBlock);
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v1, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v3, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v19);
  return swift_release(v23);
}

_QWORD *sub_1007FA1D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA060 == -1)
    goto LABEL_2;
LABEL_30:
  swift_once(&qword_1010EA060, sub_100967AE8);
LABEL_2:
  v7 = type metadata accessor for URL(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B7970);
  result = sub_10084B2A8(v8);
  v10 = result;
  v11 = 0;
  v12 = result + 8;
  v13 = 1 << *((_BYTE *)result + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & result[8];
  v22 = (unint64_t)(v13 + 63) >> 6;
  if (v15)
  {
LABEL_5:
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v22)
      goto LABEL_27;
    v19 = v12[v18];
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v22)
        goto LABEL_27;
      v19 = v12[v11];
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v22)
          goto LABEL_27;
        v19 = v12[v11];
        if (!v19)
        {
          v11 = v18 + 3;
          if (v18 + 3 >= v22)
            goto LABEL_27;
          v19 = v12[v11];
          if (!v19)
          {
            v11 = v18 + 4;
            if (v18 + 4 >= v22)
              goto LABEL_27;
            v19 = v12[v11];
            if (!v19)
              break;
          }
        }
      }
    }
LABEL_23:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v6, v10[6] + *(_QWORD *)(v1 + 72) * v17, v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
      return (_QWORD *)swift_release();
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
    sub_100827DCC();
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v15)
      goto LABEL_5;
  }
  v20 = v18 + 5;
  if (v20 >= v22)
  {
LABEL_27:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
    return (_QWORD *)swift_release();
  }
  v19 = v12[v20];
  if (v19)
  {
    v11 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v22)
      goto LABEL_27;
    v19 = v12[v11];
    ++v20;
    if (v19)
      goto LABEL_23;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1007FA4A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  _QWORD *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA600 == -1)
    goto LABEL_2;
LABEL_30:
  swift_once(&qword_1010EA600, sub_100D83308);
LABEL_2:
  v7 = type metadata accessor for URL(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B84D0);
  result = sub_10084BAA4(v8);
  v10 = result;
  v11 = 0;
  v12 = result + 8;
  v13 = 1 << *((_BYTE *)result + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & result[8];
  v22 = (unint64_t)(v13 + 63) >> 6;
  if (v15)
  {
LABEL_5:
    v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v17 = v16 | (v11 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v22)
      goto LABEL_27;
    v19 = v12[v18];
    ++v11;
    if (!v19)
    {
      v11 = v18 + 1;
      if (v18 + 1 >= v22)
        goto LABEL_27;
      v19 = v12[v11];
      if (!v19)
      {
        v11 = v18 + 2;
        if (v18 + 2 >= v22)
          goto LABEL_27;
        v19 = v12[v11];
        if (!v19)
        {
          v11 = v18 + 3;
          if (v18 + 3 >= v22)
            goto LABEL_27;
          v19 = v12[v11];
          if (!v19)
          {
            v11 = v18 + 4;
            if (v18 + 4 >= v22)
              goto LABEL_27;
            v19 = v12[v11];
            if (!v19)
              break;
          }
        }
      }
    }
LABEL_23:
    v15 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_24:
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v6, v10[6] + *(_QWORD *)(v1 + 72) * v17, v0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v6, 0, 1, v0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v6, 1, v0) == 1)
      return (_QWORD *)swift_release();
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v6, v0);
    sub_1008285AC((uint64_t)v3);
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (v15)
      goto LABEL_5;
  }
  v20 = v18 + 5;
  if (v20 >= v22)
  {
LABEL_27:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v6, 1, 1, v0);
    return (_QWORD *)swift_release();
  }
  v19 = v12[v20];
  if (v19)
  {
    v11 = v20;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v11 >= v22)
      goto LABEL_27;
    v19 = v12[v11];
    ++v20;
    if (v19)
      goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_1007FA778(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B77E8, 0x74536E6F63616562, 0xEB0000000065726FLL);
}

uint64_t sub_1007FA7A0(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7800, 0x7363697274656DLL, 0xE700000000000000);
}

uint64_t sub_1007FA7C0(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7818, 0x72617069746C756DLL, 0xE900000000000074);
}

uint64_t sub_1007FA7E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;

  v1 = v0;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x203A737265657020;
  v5._object = (void *)0xE800000000000000;
  String.append(_:)(v5);
  v6 = type metadata accessor for BeaconStatus(0);
  v7 = *(_QWORD *)(v0 + *(int *)(v6 + 36));
  if (v7)
    v8 = *(void **)(v1 + *(int *)(v6 + 36));
  else
    v8 = &_swiftEmptySetSingleton;
  v9 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v7);
  v10._countAndFlagsBits = Set.description.getter(v8, v2, v9);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x203A6574616420;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = Date.localISO8601.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0x64496E6F63616562;
}

Swift::Int sub_1007FA970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  v2 = type metadata accessor for Date(0);
  v3 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1007FAA28(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  v4 = type metadata accessor for Date(0);
  v5 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
}

Swift::Int sub_1007FAAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v5, v0, v1);
  v2 = type metadata accessor for Date(0);
  v3 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1007FAB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24));
}

BOOL sub_1007FAB8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 24), a1 + *(int *)(a3 + 24)) & 1) == 0;
}

BOOL sub_1007FABB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 24), a2 + *(int *)(a3 + 24)) & 1) == 0;
}

uint64_t sub_1007FABE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 24), a1 + *(int *)(a3 + 24));
}

uint64_t sub_1007FABFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10[2];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1BEB8(v10[1]);
  v6 = v5;
  swift_bridgeObjectRelease();
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v4, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject(&unk_101096928, 48, 7);
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v1;
  v8[5] = v6;
  swift_retain();
  sub_100028774((uint64_t)v4, (uint64_t)&unk_10110AC88, (uint64_t)v8);
  swift_release();
  return sub_100004048((uint64_t)v4, &qword_1010F46C0);
}

uint64_t sub_1007FAD48(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;

  *(double *)(v5 + 128) = a1;
  *(_QWORD *)(v5 + 120) = a5;
  v6 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v5 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007FADA4, 0, 0);
}

uint64_t sub_1007FADA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 144) = v3;
    *v3 = v0;
    v3[1] = sub_1007FAEA4;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007FAEA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007FAF00, 0, 0);
}

uint64_t sub_1007FAF00()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 152);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = type metadata accessor for XPCActivity(0);
    static DispatchQoS.background.getter(v4);
    v5 = swift_allocObject(&unk_101096950, 24, 7);
    *(_QWORD *)(v5 + 16) = v3;
    v6 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v0 + 160) = v7;
    *v7 = v0;
    v7[1] = sub_1007FB0B8;
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000022, 0x8000000100EE8E00, *(_QWORD *)(v0 + 136), &unk_10110AC98, v5, &unk_10110ACA8, v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B77E8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing BeaconStoreActor!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1007FB0B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007FB114, 0, 0);
}

uint64_t sub_1007FB114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 152));
  v3 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v1;
  swift_release(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007FB160(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(double *)(v3 + 40) = a3;
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  v4 = type metadata accessor for XPCActivity.Criteria.Options(0);
  *(_QWORD *)(v3 + 48) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 56) = v5;
  *(_QWORD *)(v3 + 64) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for XPCActivity.Priority(0);
  *(_QWORD *)(v3 + 72) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 80) = v7;
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010FDCF8);
  *(_QWORD *)(v3 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for XPCActivity.Criteria(0);
  *(_QWORD *)(v3 + 104) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 112) = v10;
  *(_QWORD *)(v3 + 120) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007FB238, 0, 0);
}

uint64_t sub_1007FB238()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t result;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  sub_10000F9B8(*(_QWORD *)(v0 + 32), v3, &qword_1010FDCF8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    v23 = *(_QWORD *)(v0 + 112);
    v22 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 104);
    v25 = *(_QWORD *)(v0 + 24);
    v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
    v26(v22, *(_QWORD *)(v0 + 96), v24);
    v26(v25, v22, v24);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v24);
    goto LABEL_7;
  }
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(double *)(v0 + 40);
  sub_100004048(*(_QWORD *)(v0 + 96), &qword_1010FDCF8);
  result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v4, enum case for XPCActivity.Priority.utility(_:), v5);
  v9 = v7 * 0.5;
  if ((~COERCE__INT64(v7 * 0.5) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v9 < 9.22337204e18)
  {
    v31 = *(_QWORD *)(v0 + 112);
    v32 = *(_QWORD *)(v0 + 104);
    v30 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 48);
    v13 = *(_QWORD *)(v0 + 24);
    v14 = (uint64_t)v9;
    v15 = sub_10001A9A8(&qword_1010FDD00);
    v16 = swift_allocObject(v15, ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ 3 * *(_QWORD *)(v10 + 72), *(unsigned __int8 *)(v10 + 80) | 7);
    *(_OWORD *)(v16 + 16) = xmmword_100E221E0;
    v17 = static XPCActivity.Criteria.Options.requiresNetwork.getter(v16);
    v18 = static XPCActivity.Criteria.Options.requiresClassC.getter(v17);
    static XPCActivity.Criteria.Options.allowBattery.getter(v18);
    *(_QWORD *)(v0 + 16) = v16;
    v19 = sub_100006204(&qword_1010EBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
    v20 = sub_10001A9A8(&qword_1010FDD08);
    v21 = sub_1000193A4(&qword_1010FDD10, &qword_1010FDD08, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v20, v21, v12, v19);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v30, 1, 0, v14, v14, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v13, 0, 1, v32);
LABEL_7:
    v27 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v28);
    swift_task_dealloc(v27);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1007FB4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for XPCActivity.State(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007FB538, 0, 0);
}

uint64_t sub_1007FB538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 24), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.checkIn(_:) || v4 == enum case for XPCActivity.State.wait(_:))
    goto LABEL_6;
  if (v4 != enum case for XPCActivity.State.run(_:))
  {
    if (v4 == enum case for XPCActivity.State.defer(_:))
    {
      v13 = type metadata accessor for XPCActivity(0);
      v14 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, v14);
      v17 = v16;
      v18 = sub_1007FB7CC;
      return swift_task_switch(v18, v15, v17);
    }
    if (v4 != enum case for XPCActivity.State.continue(_:)
      && v4 != enum case for XPCActivity.State.done(_:)
      && v4 != enum case for XPCActivity.State.invalidated(_:))
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    }
LABEL_6:
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if ((sub_100871710() & 1) == 0)
  {
    v19 = type metadata accessor for XPCActivity(0);
    v20 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v15 = dispatch thunk of Actor.unownedExecutor.getter(v19, v20);
    v17 = v21;
    v18 = sub_1007FB898;
    return swift_task_switch(v18, v15, v17);
  }
  if (qword_1010E9F88 != -1)
    swift_once(&qword_1010E9F88, sub_1007FA7A0);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B7800);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling postMetrics()", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = (_QWORD *)swift_task_alloc(dword_10110ACB4);
  *(_QWORD *)(v0 + 64) = v12;
  *v12 = v0;
  v12[1] = sub_1007FB808;
  return sub_1007FB8D4();
}

uint64_t sub_1007FB7CC()
{
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_100882E58, 0, 0);
}

uint64_t sub_1007FB808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  v1 = type metadata accessor for XPCActivity(0);
  v2 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_1007FB898, v3, v4);
}

uint64_t sub_1007FB898()
{
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_100882E58, 0, 0);
}

uint64_t sub_1007FB8D4()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1[27] = v0;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[28] = swift_task_alloc(v2);
  v1[29] = swift_task_alloc(v2);
  v3 = sub_10001A9A8(&qword_1010ED860);
  v1[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v1[31] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[32] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[33] = swift_task_alloc(v6);
  v1[34] = swift_task_alloc(v6);
  v1[35] = swift_task_alloc(v6);
  v7 = type metadata accessor for StableIdentifier(0);
  v1[36] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[37] = swift_task_alloc(v8);
  v1[38] = swift_task_alloc(v8);
  v1[39] = swift_task_alloc(v8);
  v1[40] = swift_task_alloc(v8);
  v1[41] = swift_task_alloc(v8);
  v1[42] = swift_task_alloc(v8);
  v1[43] = swift_task_alloc(v8);
  v1[44] = swift_task_alloc(v8);
  v1[45] = swift_task_alloc(v8);
  v1[46] = swift_task_alloc(v8);
  v1[47] = swift_task_alloc(v8);
  v1[48] = swift_task_alloc(v8);
  v1[49] = swift_task_alloc(v8);
  v1[50] = swift_task_alloc(v8);
  v1[51] = swift_task_alloc(v8);
  v1[52] = swift_task_alloc(v8);
  v9 = type metadata accessor for OwnedBeaconRecord(0);
  v1[53] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[54] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[55] = swift_task_alloc(v11);
  v1[56] = swift_task_alloc(v11);
  v1[57] = swift_task_alloc(v11);
  v1[58] = swift_task_alloc(v11);
  v1[59] = swift_task_alloc(v11);
  return swift_task_switch(sub_1007FBAE0, v0, 0);
}

uint64_t sub_1007FBAE0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 144, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 104, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 128))
  {
    sub_10000F9FC((__int128 *)(v0 + 104), v0 + 64);
    sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCA0 + dword_1010EBCA0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBCA4);
    *(_QWORD *)(v0 + 480) = v2;
    *v2 = v0;
    v2[1] = sub_1007FBBCC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007FBBCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 480);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 488) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007FBC2C, v3, 0);
}

uint64_t sub_1007FBC2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (_QWORD *)(v0 + 64);
  if (*(_QWORD *)(v0 + 488))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 496) = v3;
    v4 = sub_10001A9A8(&qword_1010EE190);
    *v3 = v0;
    v3[1] = sub_1007FBF00;
    return unsafeBlocking<A>(_:)(v0 + 208, sub_10001ED38, *(_QWORD *)(v0 + 216), v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B77E8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing FMIPService!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(_QWORD *)(v0 + 464);
    v12 = *(_QWORD *)(v0 + 448);
    v13 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 416);
    v18 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 400);
    v19 = *(_QWORD *)(v0 + 384);
    v20 = *(_QWORD *)(v0 + 376);
    v21 = *(_QWORD *)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 360);
    v23 = *(_QWORD *)(v0 + 352);
    v24 = *(_QWORD *)(v0 + 344);
    v25 = *(_QWORD *)(v0 + 336);
    v26 = *(_QWORD *)(v0 + 328);
    v27 = *(_QWORD *)(v0 + 320);
    v28 = *(_QWORD *)(v0 + 312);
    v29 = *(_QWORD *)(v0 + 304);
    v30 = *(_QWORD *)(v0 + 296);
    v31 = *(_QWORD *)(v0 + 280);
    v32 = *(_QWORD *)(v0 + 272);
    v33 = *(_QWORD *)(v0 + 264);
    v34 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 232);
    v36 = *(_QWORD *)(v0 + 224);
    swift_task_dealloc(*(_QWORD *)(v0 + 472));
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1007FBF00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 216);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 496));
  swift_release();
  return swift_task_switch(sub_1007FBF60, v1, 0);
}

uint64_t sub_1007FBF60()
{
  _QWORD *v0;
  uint64_t result;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int EnumCaseMultiPayload;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, unint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t);
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;

  result = v0[26];
  v2 = _swiftEmptyArrayStorage;
  v131 = *(_QWORD *)(result + 16);
  if (v131)
  {
    v3 = 0;
    v127 = v0[54];
    v125 = v0[53];
    v122 = v0[32];
    v129 = v0[26];
    while (1)
    {
      if (v3 >= *(_QWORD *)(result + 16))
      {
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        __break(1u);
LABEL_100:
        __break(1u);
LABEL_101:
        __break(1u);
        return result;
      }
      v6 = v2;
      v7 = v0[59];
      v9 = v0[38];
      v8 = v0[39];
      v10 = v0[36];
      v11 = (*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
      v12 = *(_QWORD *)(v127 + 72);
      sub_10005972C(result + v11 + v12 * v3, v7, type metadata accessor for OwnedBeaconRecord);
      v13 = v7 + *(int *)(v125 + 24);
      sub_10005972C(v13, v8, type metadata accessor for StableIdentifier);
      LODWORD(v10) = swift_getEnumCaseMultiPayload(v8, v10);
      sub_1000126B0(v8, type metadata accessor for StableIdentifier);
      sub_10005972C(v13, v9, type metadata accessor for StableIdentifier);
      v14 = v0[38];
      if ((_DWORD)v10 == 1)
        break;
      v16 = v0[36];
      v15 = v0[37];
      sub_10005972C(v0[38], v15, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v15, v16);
      if (EnumCaseMultiPayload == 2)
      {
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v6;
LABEL_12:
        v18 = v0[37];
        v14 = v0[38];
        v19 = v0[31];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v18, v19);
LABEL_13:
        sub_1000126B0(v14, type metadata accessor for StableIdentifier);
        sub_1000126EC(v0[59], v0[55], type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
        {
          sub_10009A680(0, v2[2] + 1, 1);
          v2 = _swiftEmptyArrayStorage;
        }
        v21 = v2[2];
        v20 = v2[3];
        if (v21 >= v20 >> 1)
        {
          sub_10009A680(v20 > 1, v21 + 1, 1);
          v2 = _swiftEmptyArrayStorage;
        }
        v22 = v0[55];
        v2[2] = v21 + 1;
        sub_1000126EC(v22, (uint64_t)v2 + v11 + v21 * v12, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_4;
      }
      v2 = v6;
      if (EnumCaseMultiPayload == 3)
      {
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      v4 = v0[59];
      v5 = v0[38];
      sub_1000126B0(v0[37], type metadata accessor for StableIdentifier);
      sub_1000126B0(v5, type metadata accessor for StableIdentifier);
      sub_1000126B0(v4, type metadata accessor for OwnedBeaconRecord);
LABEL_4:
      ++v3;
      result = v129;
      if (v131 == v3)
        goto LABEL_18;
    }
    v2 = v6;
    goto LABEL_13;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  v0[24] = &_swiftEmptySetSingleton;
  v126 = v2[2];
  if (v126)
  {
    v24 = (int *)v0[53];
    v23 = v0[54];
    v120 = v0[32];
    v124 = (char *)v2 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    v123 = *(_QWORD *)(v23 + 72);
    swift_retain();
    v25 = 0;
    v114 = 0;
    v115 = 0;
    v26 = 0;
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v121 = v24;
    v112 = v2;
    while (1)
    {
      v28 = v0[52];
      v29 = v0[36];
      v30 = (uint64_t)&v124[v25 * v123];
      v132 = v30 + v24[6];
      sub_10005972C(v132, v28, type metadata accessor for StableIdentifier);
      v31 = swift_getEnumCaseMultiPayload(v28, v29);
      if (v31 == 3)
      {
        v128 = v25;
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v31 != 2)
        {
          v36 = v0[51];
          v37 = v0[50];
          v38 = v0[36];
          v39 = type metadata accessor for StableIdentifier;
          sub_1000126B0(v0[52], type metadata accessor for StableIdentifier);
          v40 = v132;
          sub_10005972C(v132, v36, type metadata accessor for StableIdentifier);
          LODWORD(v38) = swift_getEnumCaseMultiPayload(v36, v38);
          sub_1000126B0(v36, type metadata accessor for StableIdentifier);
          sub_10005972C(v132, v37, type metadata accessor for StableIdentifier);
          if ((_DWORD)v38 != 1)
          {
            v41 = v0[49];
            v42 = v0[36];
            sub_10005972C(v0[50], v41, type metadata accessor for StableIdentifier);
            v43 = swift_getEnumCaseMultiPayload(v41, v42);
            if (v43 == 2)
            {
              sub_10001A9A8(&qword_101106F40);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              if (v43 != 3)
              {
                v82 = v0[50];
                sub_1000126B0(v0[49], type metadata accessor for StableIdentifier);
LABEL_60:
                result = sub_1000126B0(v82, v39);
                v24 = v121;
LABEL_61:
                v27 = __OFADD__(v117++, 1);
                if (v27)
                  goto LABEL_96;
                goto LABEL_22;
              }
              sub_10001A9A8((uint64_t *)&unk_1010F46F0);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            v77 = v0[49];
            v78 = v0[31];
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v77, v78);
            v40 = v132;
          }
          v79 = v0[58];
          v80 = v0[48];
          v81 = v0[36];
          sub_1000126B0(v0[50], type metadata accessor for StableIdentifier);
          sub_10005972C(v40, v80, type metadata accessor for StableIdentifier);
          LODWORD(v81) = swift_getEnumCaseMultiPayload(v80, v81);
          sub_1000126B0(v80, type metadata accessor for StableIdentifier);
          v39 = type metadata accessor for OwnedBeaconRecord;
          sub_10005972C(v30, v79, type metadata accessor for OwnedBeaconRecord);
          v82 = v0[58];
          if ((_DWORD)v81 != 1)
            goto LABEL_60;
          v24 = v121;
          v83 = (_QWORD *)(v82 + v121[15]);
          v84 = v83[1];
          if (*v83 == 0x3830332E302E32 && v84 == 0xE700000000000000)
          {
            result = sub_1000126B0(v0[58], type metadata accessor for OwnedBeaconRecord);
          }
          else
          {
            v85 = _stringCompareWithSmolCheck(_:_:expecting:)(*v83, v84, 0x3830332E302E32, 0xE700000000000000, 0);
            result = sub_1000126B0(v82, type metadata accessor for OwnedBeaconRecord);
            if ((v85 & 1) == 0)
              goto LABEL_61;
          }
          v27 = __OFADD__(v115++, 1);
          if (v27)
            goto LABEL_100;
          goto LABEL_22;
        }
        v128 = v25;
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v32 = v0[52];
      v33 = v0[31];
      swift_bridgeObjectRelease();
      v130 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
      v130(v32, v33);
      if (*(_QWORD *)(v30 + v24[16]) == 76)
      {
        v35 = v0[30];
        v34 = v0[31];
        v119 = (uint64_t)&v124[v25 * v123];
        sub_10000F9B8(v30 + v24[7], v35, &qword_1010ED860);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v35, 1, v34) == 1)
        {
          sub_100004048(v0[30], &qword_1010ED860);
        }
        else
        {
          (*(void (**)(_QWORD, _QWORD, _QWORD))(v120 + 32))(v0[35], v0[30], v0[31]);
          v52 = v0[24];
          if (*(_QWORD *)(v52 + 16))
          {
            v113 = v26;
            v53 = v0[31];
            v54 = *(_QWORD *)(v52 + 40);
            v55 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            swift_bridgeObjectRetain(v52);
            v56 = dispatch thunk of Hashable._rawHashValue(seed:)(v54, v53, v55);
            v57 = -1 << *(_BYTE *)(v52 + 32);
            v58 = v56 & ~v57;
            if (((*(_QWORD *)(v52 + 56 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) != 0)
            {
              v59 = ~v57;
              v60 = *(_QWORD *)(v120 + 72);
              v61 = *(void (**)(uint64_t, unint64_t, uint64_t))(v120 + 16);
              while (1)
              {
                v63 = v0[34];
                v62 = v0[35];
                v64 = v0[31];
                v61(v63, *(_QWORD *)(v52 + 48) + v58 * v60, v64);
                v65 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
                LOBYTE(v62) = dispatch thunk of static Equatable.== infix(_:_:)(v63, v62, v64, v65);
                v130(v63, v64);
                if ((v62 & 1) != 0)
                  break;
                v58 = (v58 + 1) & v59;
                if (((*(_QWORD *)(v52 + 56 + ((v58 >> 3) & 0xFFFFFFFFFFFFF8)) >> v58) & 1) == 0)
                  goto LABEL_43;
              }
              v104 = v0[35];
              v105 = v0[31];
              swift_bridgeObjectRelease();
              v130(v104, v105);
              v2 = v112;
              v26 = v113;
              v24 = v121;
              v25 = v128;
              goto LABEL_22;
            }
LABEL_43:
            swift_bridgeObjectRelease();
            v2 = v112;
            v26 = v113;
          }
          v67 = v0[34];
          v66 = v0[35];
          v68 = (char *)v0[33];
          v69 = v0[31];
          (*(void (**)(char *, uint64_t, uint64_t))(v120 + 16))(v68, v66, v69);
          sub_100A09F38(v67, v68);
          v130(v67, v69);
          v130(v66, v69);
        }
        v71 = v0[42];
        v70 = v0[43];
        v72 = v0[36];
        v73 = type metadata accessor for StableIdentifier;
        sub_10005972C(v132, v70, type metadata accessor for StableIdentifier);
        LODWORD(v72) = swift_getEnumCaseMultiPayload(v70, v72);
        sub_1000126B0(v70, type metadata accessor for StableIdentifier);
        sub_10005972C(v132, v71, type metadata accessor for StableIdentifier);
        v25 = v128;
        if ((_DWORD)v72 != 1)
        {
          v74 = v0[41];
          v75 = v0[36];
          sub_10005972C(v0[42], v74, type metadata accessor for StableIdentifier);
          v76 = swift_getEnumCaseMultiPayload(v74, v75);
          if (v76 == 2)
          {
            sub_10001A9A8(&qword_101106F40);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v76 != 3)
            {
              v100 = v0[42];
              sub_1000126B0(v0[41], type metadata accessor for StableIdentifier);
LABEL_87:
              result = sub_1000126B0(v100, v73);
              v24 = v121;
LABEL_88:
              v27 = __OFADD__(v26++, 1);
              if (v27)
                goto LABEL_98;
              goto LABEL_22;
            }
            sub_10001A9A8((uint64_t *)&unk_1010F46F0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v95 = v0[41];
          v96 = v0[31];
          swift_bridgeObjectRelease();
          v130(v95, v96);
        }
        v97 = v0[56];
        v98 = v0[40];
        v99 = v0[36];
        sub_1000126B0(v0[42], type metadata accessor for StableIdentifier);
        sub_10005972C(v132, v98, type metadata accessor for StableIdentifier);
        LODWORD(v99) = swift_getEnumCaseMultiPayload(v98, v99);
        sub_1000126B0(v98, type metadata accessor for StableIdentifier);
        v73 = type metadata accessor for OwnedBeaconRecord;
        sub_10005972C(v119, v97, type metadata accessor for OwnedBeaconRecord);
        v100 = v0[56];
        if ((_DWORD)v99 != 1)
          goto LABEL_87;
        v24 = v121;
        v101 = (_QWORD *)(v100 + v121[15]);
        v102 = v101[1];
        if (*v101 == 0x3830332E302E32 && v102 == 0xE700000000000000)
        {
          result = sub_1000126B0(v0[56], type metadata accessor for OwnedBeaconRecord);
        }
        else
        {
          v103 = _stringCompareWithSmolCheck(_:_:expecting:)(*v101, v102, 0x3830332E302E32, 0xE700000000000000, 0);
          result = sub_1000126B0(v100, type metadata accessor for OwnedBeaconRecord);
          if ((v103 & 1) == 0)
            goto LABEL_88;
        }
        v27 = __OFADD__(v114++, 1);
        if (v27)
          goto LABEL_101;
      }
      else
      {
        v45 = v0[46];
        v44 = v0[47];
        v46 = v0[36];
        v47 = v132;
        v48 = type metadata accessor for StableIdentifier;
        sub_10005972C(v132, v44, type metadata accessor for StableIdentifier);
        LODWORD(v46) = swift_getEnumCaseMultiPayload(v44, v46);
        sub_1000126B0(v44, type metadata accessor for StableIdentifier);
        sub_10005972C(v132, v45, type metadata accessor for StableIdentifier);
        v25 = v128;
        if ((_DWORD)v46 != 1)
        {
          v49 = v0[45];
          v50 = v0[36];
          sub_10005972C(v0[46], v49, type metadata accessor for StableIdentifier);
          v51 = swift_getEnumCaseMultiPayload(v49, v50);
          if (v51 == 2)
          {
            sub_10001A9A8(&qword_101106F40);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            if (v51 != 3)
            {
              v91 = v0[46];
              sub_1000126B0(v0[45], type metadata accessor for StableIdentifier);
LABEL_72:
              result = sub_1000126B0(v91, v48);
              v24 = v121;
LABEL_73:
              v27 = __OFADD__(v118++, 1);
              if (v27)
                goto LABEL_97;
              goto LABEL_22;
            }
            sub_10001A9A8((uint64_t *)&unk_1010F46F0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v86 = v0[45];
          v87 = v0[31];
          swift_bridgeObjectRelease();
          v130(v86, v87);
          v47 = v132;
        }
        v88 = v0[57];
        v89 = v0[44];
        v90 = v0[36];
        sub_1000126B0(v0[46], type metadata accessor for StableIdentifier);
        sub_10005972C(v47, v89, type metadata accessor for StableIdentifier);
        LODWORD(v90) = swift_getEnumCaseMultiPayload(v89, v90);
        sub_1000126B0(v89, type metadata accessor for StableIdentifier);
        v48 = type metadata accessor for OwnedBeaconRecord;
        sub_10005972C(v30, v88, type metadata accessor for OwnedBeaconRecord);
        v91 = v0[57];
        if ((_DWORD)v90 != 1)
          goto LABEL_72;
        v24 = v121;
        v92 = (_QWORD *)(v91 + v121[15]);
        v93 = v92[1];
        if (*v92 == 0x3830332E302E32 && v93 == 0xE700000000000000)
        {
          result = sub_1000126B0(v0[57], type metadata accessor for OwnedBeaconRecord);
        }
        else
        {
          v94 = _stringCompareWithSmolCheck(_:_:expecting:)(*v92, v93, 0x3830332E302E32, 0xE700000000000000, 0);
          result = sub_1000126B0(v91, type metadata accessor for OwnedBeaconRecord);
          if ((v94 & 1) == 0)
            goto LABEL_73;
        }
        v27 = __OFADD__(v116++, 1);
        if (v27)
          goto LABEL_99;
      }
LABEL_22:
      if (++v25 == v126)
      {
        swift_release_n(v2, 2);
        v107 = v117;
        v106 = v118;
        v109 = v114;
        v108 = v115;
        v110 = v116;
        goto LABEL_94;
      }
    }
  }
  swift_release();
  v109 = 0;
  v26 = 0;
  v110 = 0;
  v106 = 0;
  v108 = 0;
  v107 = 0;
LABEL_94:
  v0[2] = v107;
  v0[3] = v108;
  v0[4] = v106;
  v0[5] = v110;
  v0[6] = v26;
  v0[7] = v109;
  v111 = (_QWORD *)swift_task_alloc(dword_1010ECB7C);
  v0[63] = v111;
  *v111 = v0;
  v111[1] = sub_1007FCD38;
  return sub_1000800B4((uint64_t)(v0 + 2));
}

uint64_t sub_1007FCD38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1007FD018;
  else
    v4 = sub_1007FCD9C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 216), 0);
}

uint64_t sub_1007FCD9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(_QWORD *)(v1 + 232);
  Date.init()(a1);
  v3 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 0, 1, v3);
  if (qword_1010E9FC0 != -1)
    swift_once(&qword_1010E9FC0, sub_100848710);
  v4 = *(_QWORD *)(v1 + 224);
  v5 = *(_QWORD *)(v1 + 232);
  v6 = sub_10001A9A8(&qword_10110ACB8);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_101109E98);
  sub_10000F9B8(v5, v4, (uint64_t *)&unk_1010EA690);
  v8 = swift_beginAccess(v7, v1 + 168, 33, 0);
  ManagedDefault.wrappedValue.setter(v4, v6, v8);
  swift_endAccess(v1 + 168);
  sub_100004048(v5, (uint64_t *)&unk_1010EA690);
  swift_release();
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v1 + 464);
  v10 = *(_QWORD *)(v1 + 448);
  v11 = *(_QWORD *)(v1 + 456);
  v12 = *(_QWORD *)(v1 + 440);
  v14 = *(_QWORD *)(v1 + 408);
  v13 = *(_QWORD *)(v1 + 416);
  v16 = *(_QWORD *)(v1 + 392);
  v15 = *(_QWORD *)(v1 + 400);
  v17 = *(_QWORD *)(v1 + 384);
  v19 = *(_QWORD *)(v1 + 376);
  v20 = *(_QWORD *)(v1 + 368);
  v21 = *(_QWORD *)(v1 + 360);
  v22 = *(_QWORD *)(v1 + 352);
  v23 = *(_QWORD *)(v1 + 344);
  v24 = *(_QWORD *)(v1 + 336);
  v25 = *(_QWORD *)(v1 + 328);
  v26 = *(_QWORD *)(v1 + 320);
  v27 = *(_QWORD *)(v1 + 312);
  v28 = *(_QWORD *)(v1 + 304);
  v29 = *(_QWORD *)(v1 + 296);
  v30 = *(_QWORD *)(v1 + 280);
  v31 = *(_QWORD *)(v1 + 272);
  v32 = *(_QWORD *)(v1 + 264);
  v33 = *(_QWORD *)(v1 + 240);
  v34 = *(_QWORD *)(v1 + 232);
  v35 = *(_QWORD *)(v1 + 224);
  swift_task_dealloc(*(_QWORD *)(v1 + 472));
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1007FD018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (qword_1010E9F88 != -1)
    swift_once(&qword_1010E9F88, sub_1007FA7A0);
  v1 = *(_QWORD *)(v0 + 512);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7800);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 512);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 200) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error from postMetrics: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release();

    swift_errorRelease(v7);
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 448);
  v14 = *(_QWORD *)(v0 + 456);
  v15 = *(_QWORD *)(v0 + 440);
  v17 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 416);
  v19 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 400);
  v20 = *(_QWORD *)(v0 + 384);
  v22 = *(_QWORD *)(v0 + 376);
  v23 = *(_QWORD *)(v0 + 368);
  v24 = *(_QWORD *)(v0 + 360);
  v25 = *(_QWORD *)(v0 + 352);
  v26 = *(_QWORD *)(v0 + 344);
  v27 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD *)(v0 + 328);
  v29 = *(_QWORD *)(v0 + 320);
  v30 = *(_QWORD *)(v0 + 312);
  v31 = *(_QWORD *)(v0 + 304);
  v32 = *(_QWORD *)(v0 + 296);
  v33 = *(_QWORD *)(v0 + 280);
  v34 = *(_QWORD *)(v0 + 272);
  v35 = *(_QWORD *)(v0 + 264);
  v36 = *(_QWORD *)(v0 + 240);
  v37 = *(_QWORD *)(v0 + 232);
  v38 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 472));
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007FD354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for DispatchQoS(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007FD3AC, 0, 0);
}

uint64_t sub_1007FD3AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for XPCActivity(0);
  static DispatchQoS.background.getter(v1);
  v2 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[4] = v3;
  *v3 = v0;
  v3[1] = sub_1007FD454;
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000012, 0x8000000100EE7C70, v0[3], &unk_10110AA78, 0, &unk_10110AA88, v0[2]);
}

uint64_t sub_1007FD454(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1007FD4B0, 0, 0);
}

uint64_t sub_1007FD4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = *(_QWORD *)(v0 + 40);
  swift_release(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007FD4F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCActivity.Priority(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FDCF8);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for XPCActivity.Criteria(0);
  v2[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[13] = v9;
  v2[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007FD5C8, 0, 0);
}

uint64_t sub_1007FD5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  sub_10000F9B8(*(_QWORD *)(v0 + 32), v3, &qword_1010FDCF8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 64);
    v7 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 48);
    v8 = *(_QWORD *)(v0 + 56);
    v10 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 24);
    sub_100004048(*(_QWORD *)(v0 + 88), &qword_1010FDCF8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v5, enum case for XPCActivity.Priority.maintenance(_:), v6);
    v12 = sub_10001A9A8(&qword_1010FDD00);
    v13 = swift_allocObject(v12, ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72), *(unsigned __int8 *)(v9 + 80) | 7);
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    static XPCActivity.Criteria.Options.requiresNetwork.getter(v13);
    *(_QWORD *)(v0 + 16) = v13;
    v14 = sub_100006204(&qword_1010EBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
    v15 = sub_10001A9A8(&qword_1010FDD08);
    v16 = sub_1000193A4(&qword_1010FDD10, &qword_1010FDD08, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v15, v16, v10, v14);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v5, 0, 0, 0, 0, v8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v11, 0, 1, v26);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 24);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
    v21(v17, *(_QWORD *)(v0 + 88), v19);
    v21(v20, v17, v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v19);
  }
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 88);
  v24 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007FD7E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for XPCActivity.State(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v3[7] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1007FD844, 0, 0);
}

uint64_t sub_1007FD844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v1, *(_QWORD *)(v0 + 24), v3);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 == enum case for XPCActivity.State.run(_:))
  {
    sub_1007FDA08();
    v5 = type metadata accessor for XPCActivity(0);
    v6 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, v6);
    v9 = v8;
    v10 = sub_1007FD99C;
    return swift_task_switch(v10, v7, v9);
  }
  if (v4 == enum case for XPCActivity.State.defer(_:))
  {
    v11 = type metadata accessor for XPCActivity(0);
    v12 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v11, v12);
    v9 = v13;
    v10 = sub_1007FB7CC;
    return swift_task_switch(v10, v7, v9);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007FD99C()
{
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_1007FD9D8, 0, 0);
}

uint64_t sub_1007FD9D8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1007FDA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[7];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v2 - 8);
  v38 = v2;
  __chkstk_darwin(v2);
  v36 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v34 = *(_QWORD *)(v4 - 8);
  v35 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1007FDEC4();
  swift_retain_n(v0, 2);
  v11 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100293CD4);
  v12 = LOBYTE(aBlock[0]);
  v13 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA268 != -1)
    swift_once(&qword_1010EA268, sub_100B5DA8C);
  v14 = qword_1011B7D48;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v16 + 56) = &type metadata for Bool;
  *(_QWORD *)(v16 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v16 + 32) = v12;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "localAvailable: %d", v33);
  v17 = swift_bridgeObjectRelease();
  v18 = static os_log_type_t.default.getter(v17);
  v19 = qword_1011B7D48;
  if (v12)
  {
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1011B7D48, "Container is already available -- calling completion immediately", 64, 2, _swiftEmptyArrayStorage);
    v20 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
    v21 = (_QWORD *)swift_allocObject(&unk_101095258, 40, 7);
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = v1;
    swift_retain();
    sub_100691AC0((uint64_t)v9, (uint64_t)&unk_10110AA98, (uint64_t)v21);
  }
  else
  {
    v22 = os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1011B7D48, "Container is not yet available", 30, 2, _swiftEmptyArrayStorage);
    v23 = static os_log_type_t.default.getter(v22);
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v19, "Waiting for availableWaitQueue", 30, 2, _swiftEmptyArrayStorage);
    v24 = (_QWORD *)swift_allocObject(&unk_101095208, 40, 7);
    v24[2] = v10;
    v24[3] = sub_10087B608;
    v24[4] = v1;
    aBlock[4] = sub_100882D68;
    aBlock[5] = v24;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101095220;
    v25 = _Block_copy(aBlock);
    swift_retain();
    v26 = swift_retain();
    static DispatchQoS.unspecified.getter(v26);
    v39 = _swiftEmptyArrayStorage;
    v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v30 = v36;
    v31 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v28, v29, v38, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v30, v25);
    _Block_release(v25);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v35);
  }
  swift_release();
  swift_release_n(v1, 2);
  return swift_release();
}

unint64_t sub_1007FDE28@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10086BD1C(*a1);
  *a2 = result;
  return result;
}

CKRecordZoneID sub_1007FDE50()
{
  Swift::String v0;
  void *v1;
  Swift::String v2;
  CKRecordZoneID result;

  sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
  v0._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v0._object = v1;
  v2._countAndFlagsBits = 0x74536E6F63616542;
  v2._object = (void *)0xEB0000000065726FLL;
  result.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v2, v0).super.isa;
  qword_1011B7830 = (uint64_t)result.super.isa;
  return result;
}

uint64_t sub_1007FDEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (*(_QWORD *)(v0 + 208))
  {
    v1 = *(_QWORD *)(v0 + 208);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 176);
    v3 = type metadata accessor for CloudKitCoordinator();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100880FA8, v0, v2, (char *)&type metadata for () + 8, v3);
    v1 = v6;
    v4 = *(_QWORD *)(v0 + 208);
    *(_QWORD *)(v0 + 208) = v6;
    swift_retain();
    swift_release(v4);
  }
  swift_retain();
  return v1;
}

void sub_1007FDF58(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;

  v25 = a2;
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 216);
  v24 = *(_QWORD *)(a1 + 184);
  v23 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v9);
  swift_retain();
  v14 = swift_retain();
  static DispatchQoS.unspecified.getter(v14);
  v26 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v16, v17, v3, v15);
  v18 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000044, 0x8000000100EE8D00, v8, v5, v12, 0);
  v19 = type metadata accessor for CloudKitCoordinator();
  v20 = swift_allocObject(v19, 288, 7);
  swift_retain();
  v21 = v24;
  v22 = sub_100871A98(v13, a1, v24, v18, v20);
  swift_release(v13);
  swift_release(a1);
  swift_release(v21);

  *v25 = v22;
}

id sub_1007FE1AC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  _QWORD v11[6];

  v1 = OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture);
  }
  else
  {
    v4 = objc_allocWithZone((Class)FMStateCapture);
    swift_retain();
    v5 = objc_msgSend(v4, "init");
    v6 = swift_allocObject(&unk_1010968D8, 32, 7);
    *(_QWORD *)(v6 + 16) = sub_100880E98;
    *(_QWORD *)(v6 + 24) = v0;
    v11[4] = sub_100880EA0;
    v11[5] = v6;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_10009A0A8;
    v11[3] = &unk_1010968F0;
    v7 = _Block_copy(v11);
    swift_retain();
    swift_release();
    objc_msgSend(v5, "setStateCaptureBlock:", v7);
    _Block_release(v7);
    swift_release();
    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

_QWORD *sub_1007FE2DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  if (qword_1010EA060 != -1)
    swift_once(&qword_1010EA060, sub_100967AE8);
  v2 = type metadata accessor for URL(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7970);
  result = sub_10084B2A8(v3);
  *a1 = result;
  return result;
}

uint64_t sub_1007FE340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher);
  }
  else
  {
    v3 = v0;
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v5 = type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v3, v4, &type metadata for () + 1, v5);
    swift_retain();
    swift_release();
    v6 = sub_10001A9A8(&qword_10110AC60);
    v7 = sub_1000193A4(&qword_10110AC68, &qword_10110AC60, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v2 = Publisher.eraseToAnyPublisher()(v6, v7);
    swift_release();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t sub_1007FE45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager))
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager);
  }
  else
  {
    v3 = v0;
    v4 = type metadata accessor for BeaconKeyManager(0);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v5 = swift_retain();
    v2 = sub_100DC91CC(v5);
    v6 = *(_QWORD *)(v3 + v1);
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release(v6);
  }
  swift_retain();
  return v2;
}

uint64_t sub_1007FE4DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1007FE45C();
  *a1 = result;
  return result;
}

_QWORD *sub_1007FE514(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void *v119;
  id v120;
  NSString v121;
  id v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  NSString v132;
  id v133;
  NSString v134;
  id v135;
  NSString v136;
  void *v137;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  void *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t (*v159)(char *, uint64_t, uint64_t);
  char *v160;
  uint64_t aBlock[6];
  id v162;
  uint64_t v163;

  v5 = v4;
  v143 = a4;
  v150 = a2;
  v151 = a3;
  v148 = *v4;
  v149 = a1;
  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v144 = (char *)&v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_10001A9A8(&qword_10110ACD8);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = v15;
  __chkstk_darwin(v15);
  v19 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = 0x74536E6F63616542;
  v4[3] = 0xEB0000000065726FLL;
  v4[4] = 0;
  v4[5] = 0;
  LOBYTE(aBlock[0]) = 0;
  v20 = sub_10001A9A8(&qword_101108C08);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v4[6] = CurrentValueSubject.init(_:)(aBlock);
  v160 = (char *)sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v21 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v159 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v22 = v17;
  v153 = v17;
  v23 = v159(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v17);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v24 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v156 = v24;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v158 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v154 = v25;
  v152 = v9;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v158, v9, v24);
  v26 = v11;
  v4[8] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x8000000100EE8E90, v14, v11, v19, 0);
  v4[10] = 0;
  v27 = v21;
  v28 = v21;
  v29 = v159;
  v30 = v159(v19, v28, v22);
  v31 = v14;
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v32 = v25;
  v33 = v158;
  v34 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v158, v152, v156);
  v142 = 0xD00000000000003BLL;
  v4[11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003BLL, 0x8000000100EE8EC0, v31, v26, v19, 0);
  v35 = v27;
  v157 = v27;
  v36 = v27;
  v37 = v153;
  v38 = v29(v19, v36, v153);
  static DispatchQoS.unspecified.getter(v38);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v39 = v154;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v154, v33, v152, v34);
  v40 = v31;
  v4[12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v142, 0x8000000100EE8F00, v31, v26, v19, 0);
  v4[13] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v41 = v35;
  v42 = v159;
  v43 = v159(v19, v41, v37);
  static DispatchQoS.unspecified.getter(v43);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v44 = v39;
  v45 = v158;
  v46 = v152;
  v47 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v44, v158, v152, v156);
  v4[17] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x8000000100EE8F40, v40, v26, v19, 0);
  v48 = v42(v19, v157, v153);
  static DispatchQoS.unspecified.getter(v48);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v154, v45, v46, v47);
  v141 = 0xD000000000000031;
  v155 = (uint64_t)v40;
  v49 = v26;
  v4[18] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x8000000100EE8F70, v40, v26, v19, 0);
  if (qword_1010E9F98 != -1)
    swift_once(&qword_1010E9F98, sub_1007FDE50);
  v50 = (void *)qword_1011B7830;
  v4[19] = qword_1011B7830;
  v4[21] = 0;
  v140 = sub_10001A9A8(&qword_1010FAAF0);
  v51 = swift_allocObject(v140, 20, 7);
  *(_DWORD *)(v51 + 16) = 0;
  v4[22] = v51;
  v4[25] = &_swiftEmptySetSingleton;
  v142 = (unint64_t)(v4 + 25);
  v4[26] = 0;
  v52 = (void *)SPBeaconsChangedNotification;
  v53 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v54 = v50;
  v4[28] = DarwinNotificationHelper.init(notificationName:rateLimit:)(v52, 1.0);
  v55 = (void *)SPUnknownBeaconsChangedNotification;
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v4[29] = DarwinNotificationHelper.init(notificationName:rateLimit:)(v55, 1.0);
  v56 = (void *)SPUnknownBeaconsSetChangedNotification;
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v4[30] = DarwinNotificationHelper.init(notificationName:rateLimit:)(v56, 1.0);
  v57 = (void *)SPSeparationMonitoringBeaconsChangedNotification;
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v4[31] = DarwinNotificationHelper.init(notificationName:rateLimit:)(v57, 1.0);
  v58 = (void *)SPSeparationMonitoringStateChangedNotification;
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v4[32] = DarwinNotificationHelper.init(notificationName:rateLimit:)(v58, 1.0);
  v59 = (void *)SPAccessoryDidPairNotification;
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v60 = DarwinNotificationHelper.init(notificationName:rateLimit:)(v59, 0.0);
  v4[34] = 0;
  v4[35] = 0;
  v4[33] = v60;
  v61 = v19;
  v62 = v153;
  v63 = v159(v19, v157, v153);
  v64 = v155;
  static DispatchQoS.unspecified.getter(v63);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v65 = v154;
  v66 = v156;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v154, v158, v46, v156);
  v67 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000035, 0x8000000100EE8FB0, v64, v49, v61, 0);
  v4[36] = v67;
  v4[37] = _swiftEmptyDictionarySingleton;
  v4[38] = _swiftEmptyDictionarySingleton;
  PressuredExitTransactionManager.init()(v67);
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___locationStateCapture) = 0;
  v68 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  *v68 = 0;
  v68[1] = 0;
  v69 = (_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
  *v69 = 0;
  v69[1] = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___sharedBeaconKeysUpdatedPublisher) = 0;
  *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage____beaconKeyManager) = 0;
  v70 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
  v71 = swift_allocObject(v140, 20, 7);
  *(_DWORD *)(v71 + 16) = 0;
  *(_QWORD *)((char *)v5 + v70) = v71;
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher) = 0;
  v72 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_estimatedLocationSubject;
  v73 = sub_10001A9A8((uint64_t *)&unk_101107F00);
  swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  *(_QWORD *)((char *)v5 + v72) = PassthroughSubject.init()();
  v74 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedSubject;
  v140 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedSubject;
  v75 = sub_10001A9A8(&qword_10110ACE0);
  swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
  *(_QWORD *)((char *)v5 + v74) = PassthroughSubject.init()();
  v76 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_changeSetSequence;
  type metadata accessor for Sequencer(0);
  *(_QWORD *)((char *)v5 + v76) = Sequencer.__allocating_init(name:softTimeout:hardTimeout:)(0xD000000000000011, 0x8000000100EE8FF0, 10.0, 300.0);
  v77 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper;
  v78 = _s22SharedBeaconUUIDMapperCMa();
  v79 = swift_allocObject(v78, 32, 7);
  *(_QWORD *)(v79 + 16) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v79 + 24) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)((char *)v5 + v77) = v79;
  v80 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_hiddenBeaconCoordinator;
  v81 = _s23HiddenBeaconCoordinatorCMa();
  v82 = swift_allocObject(v81, 120, 15);
  swift_defaultActor_initialize(v82);
  *(_QWORD *)(v82 + 112) = &_swiftEmptySetSingleton;
  *(_QWORD *)((char *)v5 + v80) = v82;
  v83 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue;
  v84 = v159(v61, v157, v62);
  v85 = v155;
  static DispatchQoS.unspecified.getter(v84);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v65, v158, v46, v66);
  v86 = v160;
  v87 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v141, 0x8000000100EE9010, v85, v49, v61, 0);
  *(_QWORD *)((char *)v5 + v83) = v87;
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = 0;
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords) = 0;
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconNamingRecordCache) = _swiftEmptyDictionarySingleton;
  v88 = (void *)v5[8];
  v89 = type metadata accessor for QueueSynchronizer(0);
  swift_allocObject(v89, *(unsigned int *)(v89 + 48), *(unsigned __int16 *)(v89 + 52));
  v90 = v88;
  v5[9] = QueueSynchronizer.init(queue:)(v90);
  swift_allocObject(v89, *(unsigned int *)(v89 + 48), *(unsigned __int16 *)(v89 + 52));
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer) = QueueSynchronizer.init(queue:)(v87);
  v92 = v149;
  v91 = v150;
  v5[27] = v149;
  v93 = v151;
  v5[23] = v91;
  v5[24] = v93;
  v94 = type metadata accessor for BeaconStoreFileManager();
  swift_allocObject(v94, 80, 7);
  swift_retain_n(v92, 2);
  swift_retain();
  swift_retain();
  v5[20] = sub_100885F50(v92);
  v95 = v5[6];
  v96 = sub_10001A9A8(&qword_10110ACE8);
  v97 = swift_allocObject(v96, 24, 7);
  *(_QWORD *)(v97 + 16) = v95;
  v5[7] = v97;
  v98 = v143;
  v5[16] = v143;
  aBlock[0] = *(_QWORD *)((char *)v5 + v140);
  v99 = sub_1000193A4(&qword_10110ACF0, &qword_10110ACE0, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  swift_retain();
  v159 = v98;
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher) = Publisher.eraseToAnyPublisher()(v75, v99);
  aBlock[0] = *(_QWORD *)(v93 + 64);
  v162 = v90;
  v100 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v101 = (uint64_t)v144;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v144, 1, 1, v100);
  v102 = v90;
  swift_retain();
  v103 = sub_10001A9A8(&qword_1010FAA88);
  v104 = sub_1000193A4(&qword_1010FAA90, &qword_1010FAA88, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v105 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
  v106 = v145;
  Publisher.receive<A>(on:options:)(&v162, v101, v103, v86, v104, v105);
  sub_100004048(v101, &qword_1010EECC8);

  swift_release();
  v107 = swift_allocObject(&unk_101096540, 24, 7);
  swift_weakInit(v107 + 16, v5);
  v108 = sub_1000193A4(&qword_10110ACF8, &qword_10110ACD8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v109 = v147;
  Publisher<>.sink(receiveValue:)(sub_100882448, v107, v147, v108);
  swift_release();
  (*(void (**)(char *, uint64_t))(v146 + 8))(v106, v109);
  v110 = v142;
  swift_beginAccess(v142, aBlock, 33, 0);
  AnyCancellable.store(in:)(v110);
  swift_endAccess(aBlock);
  swift_release();
  v111 = type metadata accessor for InstructionEventCoalescer();
  swift_allocObject(v111, 72, 7);
  v112 = swift_retain();
  v113 = sub_100AB6168(v112);
  swift_release();
  *(_QWORD *)((char *)v5 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer) = v113;
  swift_release();

  v114 = v155;
  static DispatchQoS.background.getter(v115);
  v116 = swift_allocObject(&unk_101096EC8, 24, 7);
  *(_QWORD *)(v116 + 16) = v148;
  v117 = type metadata accessor for XPCActivity();
  swift_allocObject(v117, 112, 7);
  swift_retain();
  v118 = sub_100734F68(0xD00000000000002BLL, (void *)0x8000000100EE9050, v114, (uint64_t)sub_100882460, v116, (uint64_t)sub_1008824A0, (uint64_t)v5);
  swift_release();
  swift_release();
  v5[35] = v118;
  swift_release();
  v119 = (void *)objc_opt_self(NSUserDefaults);
  v120 = objc_msgSend(v119, "standardUserDefaults");
  v121 = String._bridgeToObjectiveC()();
  v122 = objc_msgSend(v120, "stringForKey:", v121);

  if (v122)
  {
    v160 = "aringCircleSecrets %@: %@";
    v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
    v125 = v124;

    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v126 = type metadata accessor for Logger(0);
    sub_10001A9E8(v126, (uint64_t)qword_1011B77E8);
    swift_bridgeObjectRetain(v125);
    v128 = Logger.logObject.getter(v127);
    v129 = static os_log_type_t.error.getter(v128);
    if (os_log_type_enabled(v128, v129))
    {
      v158 = v123;
      v130 = (uint8_t *)swift_slowAlloc(12, -1);
      v131 = swift_slowAlloc(32, -1);
      aBlock[0] = v131;
      *(_DWORD *)v130 = 136446210;
      swift_bridgeObjectRetain(v125);
      v162 = (id)sub_100016940(v158, v125, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v130 + 4, v130 + 12);
      swift_bridgeObjectRelease_n(v125, 3);
      _os_log_impl((void *)&_mh_execute_header, v128, v129, "Previous daemon crashed during transaction: %{public}s", v130, 0xCu);
      swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v131, -1, -1);
      swift_slowDealloc(v130, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v125, 2);
    }
    v133 = objc_msgSend(v119, "standardUserDefaults");
    v134 = String._bridgeToObjectiveC()();
    objc_msgSend(v133, "setBool:forKey:", 1, v134);

    v135 = objc_msgSend(v119, "standardUserDefaults");
    v136 = String._bridgeToObjectiveC()();
    objc_msgSend(v135, "removeObjectForKey:", v136);

    v132 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_1007FF7D4;
    aBlock[5] = 0;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100C47710;
    aBlock[3] = (uint64_t)&unk_101096EE0;
    v137 = _Block_copy(aBlock);
    AnalyticsSendEventLazy(v132, v137);
    swift_release();
    swift_release();
    swift_release();

    _Block_release(v137);
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v132 = v159;
  }

  return v5;
}

uint64_t sub_1007FF62C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_10080B4E4();
    return swift_release();
  }
  return result;
}

void sub_1007FF680(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  Transaction.capture()();
  if (a3 == 3)
  {
    sub_1007329F0();
  }
  else if (a3 == 2)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B77E8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "XPC activity fired for BeaconStore", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("publishDuplicateBeaconAnalytics", 31, 2, sub_1008824A8, a4);
    sub_100732A0C();
  }
}

unint64_t sub_1007FF7D4()
{
  uint64_t v0;
  uint64_t inited;
  _BYTE v3[56];

  v0 = sub_10001A9A8(&qword_10110AD00);
  inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = 0xD000000000000019;
  *(_QWORD *)(inited + 40) = 0x8000000100EE90F0;
  sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  return sub_1006BB3A4(inited);
}

uint64_t sub_1007FF864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;

  v1 = v0;
  v2 = swift_allocObject(&unk_101096540, 24, 7);
  swift_weakInit(v2 + 16, v0);
  v3 = type metadata accessor for CryptorRepairTool();
  v4 = (_QWORD *)swift_allocObject(v3, 72, 7);
  v5 = sub_10001A9A8(&qword_10110AC28);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_retain();
  v4[2] = KeyedThrottle.init(throttleInterval:)(v6, 10800.0);
  v7 = sub_10001A9A8(&qword_1010FAAF0);
  v8 = swift_allocObject(v7, 20, 7);
  *(_DWORD *)(v8 + 16) = 0;
  v4[3] = v8;
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  v4[7] = sub_100880990;
  v4[8] = v2;
  swift_release();
  *(_QWORD *)(*(_QWORD *)(v0 + 160) + 32) = v4;
  swift_retain();
  swift_release();
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v27[0] = 0x7365547265646E75;
  v27[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v28, v27, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease();
  if ((v28 & 1) == 0)
  {
    v10 = sub_1007FDEC4();
    sub_100BC0FEC();
    sub_100BC1238(1);
    sub_100BC1874();
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.SetupAPS", 38, 2, sub_100880998, v10, &type metadata for () + 1);
    result = swift_release();
  }
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer))
  {
    v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v12 = type metadata accessor for BeaconKeyManager(0);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v0, v11, &type metadata for () + 1, v12);
    v13 = *(void **)(v27[0] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_publisher);
    swift_retain();
    swift_release();
    sub_100AB48D8(v13);
    swift_release();
    swift_release();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v0, v11, &type metadata for () + 1, v12);
    v14 = v27[0];
    v15 = *(_QWORD *)(v27[0] + 16);
    swift_unownedRetainStrong(v15);
    swift_retain();
    if (v15)
    {
      sub_100870018(v15, (void (*)(uint64_t))sub_1008809B0, v14);
      swift_release();
    }
    else
    {
      sub_100DCACB0(v14);
    }
    swift_release_n(v14, 2);
    v16 = swift_retain();
    sub_100870810(v16, v1);
    swift_release();
    v17 = sub_10001A9A8(&qword_1010F0E48);
    inited = swift_initStackObject(v17, &v26);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    if (qword_1010EA458 != -1)
      swift_once(&qword_1010EA458, sub_100C67E2C);
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(qword_1011B7FF0);
    v21 = v20;
    v22 = swift_allocObject(&unk_101096540, 24, 7);
    swift_weakInit(v22 + 16, v1);
    v23 = swift_allocObject(&unk_101096568, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_1008809B8;
    *(_QWORD *)(v23 + 24) = v22;
    *(_QWORD *)(inited + 32) = v19;
    *(_QWORD *)(inited + 40) = v21;
    *(_QWORD *)(inited + 48) = sub_10015A05C;
    *(_QWORD *)(inited + 56) = v23;
    v24 = sub_1006B9680(inited);
    v25 = type metadata accessor for DarwinNotificationHelper(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    *(_QWORD *)(v1 + 272) = DarwinNotificationHelper.init(notificationHandlers:)(v24);
    swift_release();
    type metadata accessor for Transaction(0);
    swift_retain();
    static Transaction.asyncTask(name:block:)("UpdateBeaconStatusFromObservationStore", 38, 2, &unk_10110AC30, v1);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007FFCB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[7];
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v4);
    v5[3] = 0;
    v5[4] = 0;
    v5[2] = v3;
    static Transaction.named<A>(_:with:)("com.apple.searchpartyd.beaconstore.repairdatastore", 50, 2, sub_1007BCE70, v5);
    return swift_release();
  }
  return result;
}

uint64_t sub_1007FFD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD aBlock[6];
  _QWORD *v21;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(_QWORD *)(a2 + 64);
  v11 = swift_allocObject(&unk_1010966A8, 32, 7);
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  aBlock[4] = sub_100880B1C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010966C0;
  v12 = _Block_copy(aBlock);
  swift_retain();
  v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v16 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

uint64_t sub_1007FFF74(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[16];

  v3 = *a2;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (void *)a2[8];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v11 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v11);
    *(_QWORD *)&v12[-16] = a2;
    *(_QWORD *)&v12[-8] = v3;
    return static Transaction.named<A>(_:with:)("removeDuplicateBeaconsCheck", 27, 2, sub_100880B24, &v12[-32]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100800090(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = a1;
  return swift_task_switch(sub_1008000A8, 0, 0);
}

uint64_t sub_1008000A8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_100800194;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100800194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1008001F0, 0, 0);
}

uint64_t sub_1008001F0()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 120) + 168) = *(_QWORD *)(v0 + 136);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100800238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v4);
    static Transaction.asyncTask(name:block:)("UpdateBeaconStatusFromObservationStore", 38, 2, &unk_10110AC38, v4);
    return swift_release_n(v4, 2);
  }
  return result;
}

void sub_1008002C0(uint64_t a1, char a2)
{
  int64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void **v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void ***v25;
  void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void **v33;
  NSString v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  void **aBlock;
  _QWORD v43[5];

  Transaction.capture()();
  if ((a2 & 1) == 0)
  {
    v4 = 0;
    v5 = 0;
    v6 = a1 + 64;
    v7 = 1 << *(_BYTE *)(a1 + 32);
    v8 = -1;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    v9 = v8 & *(_QWORD *)(a1 + 64);
    v10 = *(void ***)(a1 + 16);
    v11 = (unint64_t)(v7 + 63) >> 6;
    while (1)
    {
      if (v9)
      {
        v12 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v13 = v12 | (v4 << 6);
      }
      else
      {
        v16 = v4 + 1;
        if (__OFADD__(v4, 1))
          goto LABEL_40;
        if (v16 >= v11)
        {
LABEL_29:
          sub_1000FE298(a1, 0);
          swift_release();
          if (qword_1010E9F80 != -1)
            swift_once(&qword_1010E9F80, sub_1007FA778);
          v28 = type metadata accessor for Logger(0);
          v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B77E8);
          v30 = Logger.logObject.getter(v29);
          v31 = static os_log_type_t.default.getter(v30);
          if (os_log_type_enabled(v30, v31))
          {
            v32 = (uint8_t *)swift_slowAlloc(12, -1);
            v33 = (void **)swift_slowAlloc(32, -1);
            aBlock = v33;
            *(_DWORD *)v32 = 136446210;
            v41 = sub_100016940(0xD000000000000038, 0x8000000100EE9130, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &aBlock, v32 + 4, v32 + 12);
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "Publishing %{public}s analytics event.", v32, 0xCu);
            swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v33, -1, -1);
            swift_slowDealloc(v32, -1, -1);
          }

          v34 = String._bridgeToObjectiveC()();
          v35 = swift_allocObject(&unk_101096F18, 33, 7);
          *(_QWORD *)(v35 + 16) = v10;
          *(_QWORD *)(v35 + 24) = v5;
          *(_BYTE *)(v35 + 32) = v10 != v5;
          v43[3] = sub_100882504;
          v43[4] = v35;
          aBlock = _NSConcreteStackBlock;
          v43[0] = 1107296256;
          v43[1] = sub_100C47710;
          v43[2] = &unk_101096F30;
          v36 = _Block_copy(&aBlock);
          swift_release();
          AnalyticsSendEventLazy(v34, v36);
          _Block_release(v36);

          if (v10 != v5)
          {
            v38 = Logger.logObject.getter(v37);
            v39 = static os_log_type_t.fault.getter(v38);
            if (os_log_type_enabled(v38, v39))
            {
              v40 = swift_slowAlloc(22, -1);
              *(_DWORD *)v40 = 134218240;
              aBlock = v5;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v43, v40 + 4, v40 + 12);
              *(_WORD *)(v40 + 12) = 2048;
              aBlock = v10;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v43, v40 + 14, v40 + 22);
              _os_log_impl((void *)&_mh_execute_header, v38, v39, "DUPLICATE BEACONS DETECTED -- beaconCount: %ld stableIdentifierCount: %ld", (uint8_t *)v40, 0x16u);
              swift_slowDealloc(v40, -1, -1);
            }

          }
          return;
        }
        v17 = *(_QWORD *)(v6 + 8 * v16);
        ++v4;
        if (!v17)
        {
          v4 = v16 + 1;
          if (v16 + 1 >= v11)
            goto LABEL_29;
          v17 = *(_QWORD *)(v6 + 8 * v4);
          if (!v17)
          {
            v4 = v16 + 2;
            if (v16 + 2 >= v11)
              goto LABEL_29;
            v17 = *(_QWORD *)(v6 + 8 * v4);
            if (!v17)
            {
              v4 = v16 + 3;
              if (v16 + 3 >= v11)
                goto LABEL_29;
              v17 = *(_QWORD *)(v6 + 8 * v4);
              if (!v17)
              {
                v4 = v16 + 4;
                if (v16 + 4 >= v11)
                  goto LABEL_29;
                v17 = *(_QWORD *)(v6 + 8 * v4);
                if (!v17)
                {
                  v18 = v16 + 5;
                  if (v18 >= v11)
                    goto LABEL_29;
                  v17 = *(_QWORD *)(v6 + 8 * v18);
                  if (!v17)
                  {
                    while (1)
                    {
                      v4 = v18 + 1;
                      if (__OFADD__(v18, 1))
                        break;
                      if (v4 >= v11)
                        goto LABEL_29;
                      v17 = *(_QWORD *)(v6 + 8 * v4);
                      ++v18;
                      if (v17)
                        goto LABEL_25;
                    }
                    __break(1u);
                    return;
                  }
                  v4 = v18;
                }
              }
            }
          }
        }
LABEL_25:
        v9 = (v17 - 1) & v17;
        v13 = __clz(__rbit64(v17)) + (v4 << 6);
      }
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v13);
      v15 = __OFADD__(v5, v14);
      v5 = (void **)((char *)v5 + v14);
      if (v15)
      {
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
    }
  }
  aBlock = (void **)a1;
  swift_errorRetain(a1);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  swift_willThrowTypedImpl(&aBlock, v19, &protocol self-conformance witness table for Error);
  if (qword_1010E9F80 != -1)
LABEL_41:
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v20 = type metadata accessor for Logger(0);
  sub_10001A9E8(v20, (uint64_t)qword_1011B77E8);
  v21 = swift_errorRetain(a1);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v24 = 138543362;
    v26 = (void **)_convertErrorToNSError(_:)(a1);
    aBlock = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v43, v24 + 4, v24 + 12);
    *v25 = v26;
    sub_1000FE214(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "duplicateReport error: %{public}@", v24, 0xCu);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v25, 1, v27);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    sub_1000FE214(a1, 1);
  }
  else
  {
    sub_1000FE214(a1, 1);
    sub_1000FE214(a1, 1);

  }
}

unint64_t sub_100800884()
{
  uint64_t v0;
  uint64_t inited;
  _BYTE v3[104];

  v0 = sub_10001A9A8(&qword_10110AD00);
  inited = swift_initStackObject(v0, v3);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 40) = 0x8000000100EE9170;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0x664F7265626D756ELL;
  *(_QWORD *)(inited + 64) = 0xEF736E6F63616542;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0xD000000000000013;
  *(_QWORD *)(inited + 88) = 0x8000000100EE9190;
  *(NSNumber *)(inited + 96) = Bool._bridgeToObjectiveC()();
  return sub_1006BB3A4(inited);
}

uint64_t sub_100800968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_100800984, 0, 0);
}

uint64_t sub_100800984()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_1007FDEC4();
  *(_QWORD *)(v0 + 40) = v1;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_100800A1C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 72, 0, 0, 0xD000000000000014, 0x8000000100ECF730, sub_1002DCAAC, v1, &type metadata for Bool);
}

uint64_t sub_100800A1C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_100800A70, 0, 0);
}

uint64_t sub_100800A70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release();
  v3 = *(_BYTE *)(v0 + 72);
  v4 = swift_allocObject(&unk_1010950F0, 33, 7);
  *(_QWORD *)(v0 + 56) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_BYTE *)(v4 + 32) = v3;
  v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 64) = v6;
  *v6 = v0;
  v6[1] = sub_100800B18;
  return unsafeBlocking<A>(_:)(v6, sub_1001D1D50, v4, &type metadata for () + 1);
}

uint64_t sub_100800B18()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release();
  return swift_task_switch(sub_1002A7C1C, 0, 0);
}

_QWORD *sub_100800B74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _UNKNOWN **v23;
  void *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  int *v33;
  int *v34;
  int *v35;
  char v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _UNKNOWN **v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  _QWORD v65[5];

  v2 = type metadata accessor for SharedBeaconRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v48 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v49 = (char *)&v38 - v7;
  v8 = __chkstk_darwin(v6);
  v57 = (uint64_t)&v38 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - v11;
  __chkstk_darwin(v10);
  v61 = (uint64_t)&v38 - v13;
  v14 = type metadata accessor for Date(0);
  v55 = *(_QWORD *)(v14 - 8);
  v56 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DateInterval(0);
  v39 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v16);
  v58 = v18;
  v54 = v16;
  DateInterval.init(start:duration:)(v16, 1.0);
  v44 = *(_QWORD *)(a1 + 16);
  if (v44)
  {
    v41 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
    v47 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v42 = a1 + v47;
    v50 = *(_QWORD *)(v3 + 72);
    v38 = a1;
    swift_bridgeObjectRetain(a1);
    v19 = 0;
    v53 = &type metadata for () + 1;
    v52 = xmmword_100E22B00;
    v51 = v2;
    v43 = v12;
    v20 = v61;
    while (1)
    {
      v46 = v19;
      sub_10005972C(v42 + v50 * v19, v20, type metadata accessor for SharedBeaconRecord);
      v21 = *(_QWORD *)(v20 + *(int *)(v2 + 44));
      sub_10005972C(v20, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      if (v21 == -1)
        break;
      v22 = *(_QWORD *)&v12[*(int *)(v2 + 48)];
      sub_1000126B0((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      v23 = &off_10104DC40;
      if (v22 == -1)
        goto LABEL_8;
LABEL_9:
      v24 = v23[2];
      v20 = v61;
      v45 = v23;
      if (v24)
      {
        v59 = *(_QWORD *)(v60 + v41);
        v25 = *((unsigned __int8 *)v23 + 32);
        v63 = _swiftEmptyArrayStorage;
        v64 = (char *)v23 + 33;
        v26 = v57;
        sub_10005972C(v61, v57, type metadata accessor for SharedBeaconRecord);
        v27 = type metadata accessor for BeaconKeyManager(0);
        v28 = v60;
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v60, v59, v53, v27);
        v62 = 0;
        v29 = (_QWORD *)v65[0];
        v65[3] = v2;
        v65[4] = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
        v30 = sub_100018F08(v65);
        sub_10005972C(v26, (uint64_t)v30, type metadata accessor for SharedBeaconRecord);
        v31 = v54;
        v32 = sub_1004DF310(v54, v65, v28);
        v33 = (int *)sub_1003B81B8((uint64_t)v30, (uint64_t)v58, v32, (uint64_t)v31, v25, v29);
        v35 = v34;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v31, v56);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
        sub_1003B56E4(v26, v33, v35, v25, 0, 0, v29);
        LOBYTE(v33) = v36;
        swift_release();
        sub_1000126B0(v26, type metadata accessor for SharedBeaconRecord);
        __asm { BR              X9 }
      }
      v19 = v46 + 1;
      swift_bridgeObjectRelease();
      sub_1000126B0(v20, type metadata accessor for SharedBeaconRecord);
      v12 = v43;
      if (v19 == v44)
      {
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
    }
    sub_1000126B0((uint64_t)v12, type metadata accessor for SharedBeaconRecord);
LABEL_8:
    v23 = &off_10104DC68;
    goto LABEL_9;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t))(v39 + 8))(v58, v40);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1008014D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  Swift::String v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  id v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  Swift::Bool v35;
  uint64_t v36;
  Swift::Bool v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSObject *v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t countAndFlagsBits;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  Swift::Bool v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  id v59;
  NSString v60;
  _QWORD v61[2];
  id v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  Swift::String v67;

  v1 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v1);
  v63 = (char *)v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchPredicate(0);
  v64 = *(_QWORD *)(v3 - 8);
  v65 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v66 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v61 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)v61 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)v61 - v16;
  v62 = (id)objc_opt_self(NSUserDefaults);
  v18 = objc_msgSend(v62, "standardUserDefaults");
  v61[1] = "attachEvent(beacon:)";
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "integerForKey:", v19);

  if (v20 != (id)27)
  {
    v38 = static os_log_type_t.default.getter(v21);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, qword_1011B7D38, "Migration attempting to re-initialize store.", 44, 2, _swiftEmptyArrayStorage);
    v6 = *(_QWORD *)(v0 + 160);
    v23 = sub_1007FDEC4();
    v39 = *(void **)(v6 + 16);
    *(_QWORD *)v5 = v39;
    v41 = v64;
    v40 = v65;
    (*(void (**)(char *, _QWORD, uint64_t))(v64 + 104))(v5, enum case for DispatchPredicate.notOnQueue(_:), v65);
    v42 = v39;
    LOBYTE(v39) = _dispatchPreconditionTest(_:)(v5);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v40);
    if ((v39 & 1) != 0)
    {
      v43 = dispatch_group_create();
      dispatch_group_enter(v43);
      swift_retain();
      v44 = v43;
      sub_100BD2320(0, v23, (NSObject **)v6, v44);
      swift_release();
      swift_release();

      v45 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
      v46 = type metadata accessor for BeaconKeyManager(0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100882AD4, v0, v45, &type metadata for () + 1, v46);
      countAndFlagsBits = v67._countAndFlagsBits;
      v48 = type metadata accessor for TaskPriority(0);
      v49 = (uint64_t)v63;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v63, 1, 1, v48);
      v50 = (_QWORD *)swift_allocObject(&unk_101096518, 40, 7);
      v50[2] = 0;
      v50[3] = 0;
      v50[4] = countAndFlagsBits;
      swift_retain();
      sub_100691AC0(v49, (uint64_t)&unk_1010F4AD0, (uint64_t)v50);
      swift_release();
      type metadata accessor for Transaction(0);
      static Transaction.named<A>(_:with:)("BeaconKeyManager.deleteAllKeyMaps", 33, 2, sub_1002958B4, countAndFlagsBits, &type metadata for () + 1);
      swift_release();
      return sub_100867C44();
    }
    __break(1u);
    goto LABEL_21;
  }
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v12);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100ED0480, 1);
  v5 = *(char **)(v7 + 8);
  ((void (*)(char *, uint64_t))v5)(v12, v6);
  URL.appendingPathComponent(_:)(0x2E65746176697250, 0xED00006E656B6F74);
  ((void (*)(char *, uint64_t))v5)(v15, v6);
  v12 = v17;
  if (qword_1010E9F98 != -1)
    swift_once(&qword_1010E9F98, sub_1007FDE50);
  v22 = (void *)qword_1011B7830;
  sub_1007EC9B8((uint64_t)v15);
  v23 = (uint64_t)v66;
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
  ((void (*)(char *, uint64_t))v5)(v15, v6);
  v24._countAndFlagsBits = 0x65746176697250;
  v24._object = (void *)0xE700000000000000;
  URL.appendPathComponent(_:)(v24);
  v25 = objc_msgSend(v22, "ownerName");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  v29._countAndFlagsBits = v26;
  v29._object = v28;
  URL.appendPathComponent(_:)(v29);
  swift_bridgeObjectRelease();
  v30 = objc_msgSend(v22, "zoneName");
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  v67._countAndFlagsBits = v31;
  v67._object = v33;
  v34._countAndFlagsBits = 0x6E656B6F742ELL;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  URL.appendPathComponent(_:)(v67);
  swift_bridgeObjectRelease();
  v35 = URL.checkResourceIsReachable()();
  if (v36)
  {
    swift_errorRelease(v36);
    v37 = 0;
  }
  else
  {
    v37 = v35;
  }
  v52 = URL.checkResourceIsReachable()();
  if (v53)
  {
    swift_errorRelease(v53);
    if (!v37)
      goto LABEL_19;
LABEL_15:
    if (qword_1010E9F80 == -1)
    {
LABEL_16:
      v54 = type metadata accessor for Logger(0);
      v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B77E8);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Recovering from 110328093", v58, 2u);
        swift_slowDealloc(v58, -1, -1);
      }

      v59 = objc_msgSend(v62, "standardUserDefaults");
      v60 = String._bridgeToObjectiveC()();
      objc_msgSend(v59, "removeObjectForKey:", v60);

      goto LABEL_19;
    }
LABEL_21:
    swift_once(&qword_1010E9F80, sub_1007FA778);
    goto LABEL_16;
  }
  if (!v52 && v37)
    goto LABEL_15;
LABEL_19:
  ((void (*)(uint64_t, uint64_t))v5)(v23, v6);
  return ((uint64_t (*)(char *, uint64_t))v5)(v12, v6);
}

uint64_t sub_100801BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[5];
  uint64_t v47;

  v39 = a3;
  v37 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  __chkstk_darwin(v4);
  v42 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v6 - 8);
  v41 = v6;
  __chkstk_darwin(v6);
  v36 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconEstimatedLocation(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v13 = qword_1011B7D38;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  sub_10005972C(a1, (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeaconEstimatedLocation);
  v16 = String.init<A>(describing:)((char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  v18 = v17;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  *(_QWORD *)(v15 + 64) = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v16;
  *(_QWORD *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Saving BeaconEstimatedLocation record %@", 40, 2, v15);
  swift_bridgeObjectRelease();
  v19 = v38;
  sub_10005972C(a1, (uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeaconEstimatedLocation);
  v20 = *(unsigned __int8 *)(v9 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = (v10 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_101096428, v23 + 16, v20 | 7);
  sub_1000126EC((uint64_t)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v21, type metadata accessor for BeaconEstimatedLocation);
  *(_QWORD *)(v24 + v22) = v19;
  v25 = (_QWORD *)(v24 + v23);
  v26 = v39;
  *v25 = v37;
  v25[1] = v26;
  aBlock[4] = sub_1008805C0;
  v47 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101096440;
  v27 = _Block_copy(aBlock);
  swift_retain();
  v28 = swift_retain();
  v29 = v36;
  static DispatchQoS.unspecified.getter(v28);
  v45 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v42;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v44, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v33, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  return swift_release(v47);
}

uint64_t sub_100801F10(uint64_t *a1, uint64_t a2, void (*a3)(uint64_t *), void (*a4)(uint64_t *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  void (*v45)(uint64_t *);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (**v56)(uint64_t *);
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t *v82;
  uint64_t (*v83)(char *, uint64_t, uint64_t);
  void (*v84)(uint64_t *);
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t *);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD aBlock[5];
  uint64_t v103;

  v97 = a4;
  v99 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v95 = *(_QWORD *)(v6 - 8);
  v96 = v6;
  __chkstk_darwin(v6);
  v94 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v92 = *(_QWORD *)(v8 - 8);
  v93 = v8;
  __chkstk_darwin(v8);
  v91 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10001A9A8(&qword_1010F4A20);
  __chkstk_darwin(v86);
  v87 = (uint64_t *)((char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = (int *)type metadata accessor for BeaconEstimatedLocation(0);
  v90 = *((_QWORD *)v11 - 1);
  __chkstk_darwin(v11);
  v89 = v12;
  v100 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v83 - v17;
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  v22 = __chkstk_darwin(v19);
  v88 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v22);
  v98 = (char *)&v83 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v83 - v25;
  v27 = sub_100B8C970();
  if ((v27 & 1) != 0)
  {
    v28 = static os_log_type_t.default.getter(v27);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v29 = qword_1011B7D38;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
    v32 = v100;
    sub_10005972C((uint64_t)a1, v100, type metadata accessor for BeaconEstimatedLocation);
    v33 = String.init<A>(describing:)(v32, v11);
    v35 = v34;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10001AA00();
    *(_QWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 40) = v35;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Not saving blocked region BeaconEstimatedLocation record %@", 59, 2, v31);
    return swift_bridgeObjectRelease();
  }
  v84 = a3;
  v37 = (uint64_t)a1 + v11[6];
  sub_1008026F4(v37, *((unsigned __int8 *)a1 + v11[11]), (uint64_t)v18);
  v83 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v38 = v83(v18, 1, v19);
  v85 = v20;
  if (v38 == 1)
  {
    v87 = a1;
    v39 = v19;
    sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010EA690);
LABEL_9:
    v41 = v99;
    v42 = sub_10088AA6C(v37);
    sub_100803764((uint64_t)v42, 19, (uint64_t)v16);
    swift_bridgeObjectRelease();
    v43 = v83(v16, 1, v39);
    if ((_DWORD)v43 == 1)
    {
      v44 = v98;
      static Date.distantPast.getter(v43);
      sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010EA690);
      v45 = v97;
      v46 = v85;
    }
    else
    {
      v46 = v85;
      v44 = v98;
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v98, v16, v39);
      v45 = v97;
    }
    v97 = *(void (**)(uint64_t *))(v41 + 64);
    v47 = v100;
    sub_10005972C((uint64_t)v87, v100, type metadata accessor for BeaconEstimatedLocation);
    v48 = v88;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v88, v44, v39);
    v49 = *(unsigned __int8 *)(v90 + 80);
    v50 = v41;
    v51 = (v49 + 24) & ~v49;
    v52 = *(unsigned __int8 *)(v46 + 80);
    v53 = (v89 + v52 + v51) & ~v52;
    v54 = (v21 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    v55 = swift_allocObject(&unk_101096478, v54 + 16, v49 | v52 | 7);
    *(_QWORD *)(v55 + 16) = v50;
    sub_1000126EC(v47, v55 + v51, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v55 + v53, v48, v39);
    v56 = (void (**)(uint64_t *))(v55 + v54);
    *v56 = v84;
    v56[1] = v45;
    aBlock[4] = sub_10088077C;
    v103 = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_101096490;
    v57 = _Block_copy(aBlock);
    swift_retain();
    v58 = swift_retain();
    v59 = v91;
    static DispatchQoS.unspecified.getter(v58);
    v101 = _swiftEmptyArrayStorage;
    v60 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v62 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v63 = v94;
    v64 = v61;
    v65 = v96;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v64, v62, v96, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v59, v63, v57);
    _Block_release(v57);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v63, v65);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v59, v93);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v98, v39);
    return swift_release(v103);
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v26, v18, v19);
  v40 = static Date.> infix(_:_:)((char *)a1 + v11[10], v26);
  if ((v40 & 1) != 0)
  {
    v87 = a1;
    v39 = v19;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v26, v19);
    goto LABEL_9;
  }
  LODWORD(v99) = static os_log_type_t.default.getter(v40);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v66 = qword_1011B7D38;
  v67 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v68 = swift_allocObject(v67, 112, 7);
  *(_OWORD *)(v68 + 16) = xmmword_100E22B10;
  v69 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v70 = v26;
  v71 = v19;
  v72 = dispatch thunk of CustomStringConvertible.description.getter(v19, v69);
  v74 = v73;
  *(_QWORD *)(v68 + 56) = &type metadata for String;
  v75 = sub_10001AA00();
  *(_QWORD *)(v68 + 64) = v75;
  *(_QWORD *)(v68 + 32) = v72;
  *(_QWORD *)(v68 + 40) = v74;
  v76 = v100;
  sub_10005972C((uint64_t)a1, v100, type metadata accessor for BeaconEstimatedLocation);
  v77 = String.init<A>(describing:)(v76, v11);
  *(_QWORD *)(v68 + 96) = &type metadata for String;
  *(_QWORD *)(v68 + 104) = v75;
  *(_QWORD *)(v68 + 72) = v77;
  *(_QWORD *)(v68 + 80) = v78;
  os_log(_:dso:log:_:_:)(v99, &_mh_execute_header, v66, "Not saving outdated (latestLocationDate: %@) BeaconEstimatedLocation record %@", 78, 2, v68);
  swift_bridgeObjectRelease();
  v79 = sub_10008806C();
  v80 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v79, 0, 0);
  *v81 = 8;
  v82 = v87;
  *v87 = v80;
  swift_storeEnumTagMultiPayload(v82, v86, 1);
  v84(v82);
  sub_100004048((uint64_t)v82, &qword_1010F4A20);
  return (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v70, v71);
}

uint64_t sub_1008026F4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  char *v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  void (*v49)(_QWORD, _QWORD);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  void (*v69)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  void (*v109)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  id v127;
  NSURL *v128;
  void *v129;
  void *v130;
  uint64_t v131;
  unsigned __int8 v132;
  void (*v133)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v134)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v135)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v136)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v148;
  void (*v149)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  __n128 v162;
  char *v163;
  void (*v164)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(char *, uint64_t, uint64_t);
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  char v183[8];
  void (*v184)(uint64_t, uint64_t, uint64_t, uint64_t);

  LODWORD(v173) = a2;
  v6 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v6);
  v159 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = type metadata accessor for BeaconStoreFileRecord(0);
  v150 = *(_QWORD *)(v174 - 8);
  __chkstk_darwin(v174);
  v163 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v176 - 8);
  v10 = __chkstk_darwin(v176);
  v158 = (char *)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v169 = (char *)&v148 - v12;
  v172 = type metadata accessor for UUID(0);
  v155 = *(_QWORD *)(v172 - 8);
  v13 = __chkstk_darwin(v172);
  v168 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v154 = (char *)&v148 - v15;
  v16 = type metadata accessor for Date(0);
  *(_QWORD *)&v180 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v148 - v20;
  v179 = type metadata accessor for BeaconEstimatedLocation(0);
  v165 = *(_QWORD *)(v179 - 8);
  v22 = __chkstk_darwin(v179);
  v24 = (char *)&v148 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v161 = (char *)&v148 - v26;
  __chkstk_darwin(v25);
  v153 = (uint64_t)&v148 - v27;
  v28 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v29 = __chkstk_darwin(v28);
  v166 = (unint64_t *)((char *)&v148 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = __chkstk_darwin(v29);
  v162.n128_u64[0] = (unint64_t)&v148 - v32;
  __chkstk_darwin(v31);
  v177 = (uint64_t)&v148 - v33;
  sub_100827DCC();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v160 = (char *)sub_100C1B03C((uint64_t)v184);
  swift_bridgeObjectRelease();
  v167 = *(_QWORD *)(v3 + 160);
  v34 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10088AA90();
  v156 = v35;
  v184 = v34;
  v152 = v34;
  swift_bridgeObjectRetain(v34);
  sub_1007F7648(&v184);
  v36 = v184;
  v181 = 0;
  v170 = v24;
  v164 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v180 + 56);
  v164(v177, 1, 1, v16);
  v37 = *((_QWORD *)v36 + 2);
  v178 = v9;
  v175 = v37;
  v151 = a3;
  v171 = a1;
  if (v37)
  {
    LODWORD(v173) = v173;
    v148 = (*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80);
    v38 = (char *)v36 + v148;
    v39 = v36;
    v40 = *((unsigned __int8 *)v36 + v148 + *(int *)(v179 + 44));
    v149 = v39;
    swift_retain();
    v41 = 0;
    v157 = _swiftEmptyArrayStorage;
    v42 = 1;
LABEL_5:
    v43 = v42;
    v44 = v40;
    v45 = v179;
    v46 = v165;
    while (1)
    {
      v47 = v180;
      if (v44 == (_DWORD)v173)
      {
        v48 = *(void (**)(char *, char *, uint64_t))(v180 + 16);
        v48(v21, &v38[*(_QWORD *)(v46 + 72) * v41 + *(int *)(v45 + 40)], v16);
        v49 = (void (*)(_QWORD, _QWORD))v166;
        sub_10000F9B8(v177, (uint64_t)v166, (uint64_t *)&unk_1010EA690);
        v50 = (*(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v47 + 48))(v49, 1, v16);
        if ((_DWORD)v50 == 1)
        {
          static Date.distantPast.getter(v50);
          sub_100004048((uint64_t)v49, (uint64_t *)&unk_1010EA690);
        }
        else
        {
          (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v47 + 32))(v19, v49, v16);
        }
        v51 = sub_100006204((unint64_t *)&qword_1010F4820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Comparable.>= infix(_:_:)(v19, v21, v16, v51) & 1) != 0)
          v52 = v19;
        else
          v52 = v21;
        v53 = v162.n128_u64[0];
        v48((char *)v162.n128_u64[0], v52, v16);
        v54 = *(void (**)(char *, uint64_t))(v47 + 8);
        v54(v19, v16);
        v54(v21, v16);
        v164(v53, 0, 1, v16);
        sub_100004084(v53, v177, (uint64_t *)&unk_1010EA690);
        v45 = v179;
        v46 = v165;
      }
      if (v175 == v43)
        break;
      v55 = *(_QWORD *)(v46 + 72);
      v56 = *(int *)(v45 + 44);
      v40 = v38[v55 * v41 + v56];
      v57 = (uint64_t)&v38[v55 * v43];
      v42 = v43 + 1;
      v44 = *(unsigned __int8 *)(v57 + v56);
      v41 = v43++;
      if (v40 == v44)
      {
        sub_10005972C(v57, v153, type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v157) & 1) == 0)
          v157 = (_QWORD *)sub_1007C95B8(0, v157[2] + 1, 1, (unint64_t)v157);
        v59 = v157[2];
        v58 = v157[3];
        v60 = v59 + 1;
        if (v59 >= v58 >> 1)
        {
          v62 = (_QWORD *)sub_1007C95B8(v58 > 1, v59 + 1, 1, (unint64_t)v157);
          v60 = v59 + 1;
          v157 = v62;
        }
        v41 = v42 - 1;
        v61 = v157;
        v157[2] = v60;
        sub_1000126EC(v153, (uint64_t)v61 + v148 + v59 * v55, type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_5;
      }
    }
    v36 = v149;
    swift_release(v149);
    v9 = v178;
    v63 = v157;
  }
  else
  {
    v63 = _swiftEmptyArrayStorage;
  }
  v64 = v172;
  swift_release(v36);
  v65 = v63[2];
  v66 = (unint64_t)v160;
  if ((uint64_t)v160 >= v65)
    v66 = v63[2];
  v67 = v155;
  v68 = v154;
  v69 = v152;
  *(_QWORD *)&v180 = v66;
  if ((v66 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v70 = qword_1010E9B58;
    swift_bridgeObjectRetain(v63);
    if (v70 == -1)
      goto LABEL_27;
  }
  swift_once(&qword_1010E9B58, sub_1003087EC);
LABEL_27:
  v71 = type metadata accessor for Logger(0);
  v72 = sub_10001A9E8(v71, (uint64_t)qword_1011B6D28);
  v173 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v173(v68, v171, v64);
  swift_bridgeObjectRetain((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v69);
  swift_bridgeObjectRetain(v63);
  v175 = v72;
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter(v74);
  v76 = os_log_type_enabled(v74, v75);
  v157 = v63;
  if (v76)
  {
    v77 = swift_slowAlloc(42, -1);
    v78 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_slowAlloc(32, -1);
    v184 = v78;
    *(_DWORD *)v77 = 134218755;
    v182 = v65 - v180;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v77 + 4, v77 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 12) = 2048;
    v79 = v69[2];
    swift_bridgeObjectRelease();
    v182 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v77 + 14, v77 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 22) = 2160;
    v182 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v77 + 24, v77 + 32);
    *(_WORD *)(v77 + 32) = 2081;
    v80 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v81 = v154;
    v82 = dispatch thunk of CustomStringConvertible.description.getter(v64, v80);
    v182 = sub_100016940(v82, v83, (uint64_t *)&v184);
    v9 = v178;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v77 + 34, v77 + 42);
    swift_bridgeObjectRelease();
    v166 = *(unint64_t **)(v155 + 8);
    ((void (*)(char *, uint64_t))v166)(v81, v64);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Decimating %ld of %ld locations for beacon %{private,mask.hash}s.", (uint8_t *)v77, 0x2Au);
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v77, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v69, 2);
    v166 = *(unint64_t **)(v67 + 8);
    ((void (*)(char *, uint64_t))v166)(v68, v64);
  }

  v84 = (uint64_t)v159;
  v85 = (uint64_t)v170;
  if (v65 > (uint64_t)v160)
  {
    v86 = (*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80);
    v87 = *(_QWORD *)(v165 + 72);
    v88 = swift_bridgeObjectRetain(v157);
    v89 = v65 - v180;
    v165 = v87;
    v91 = v90 + v86 + v87 * v180;
    v88.n128_u64[0] = 141558787;
    v162 = v88;
    v160 = (char *)&type metadata for Any + 8;
    v92 = (uint64_t)v161;
    do
    {
      *(_QWORD *)&v180 = v89;
      sub_10005972C(v91, v92, type metadata accessor for BeaconEstimatedLocation);
      sub_10005972C(v92, v85, type metadata accessor for BeaconEstimatedLocation);
      v93 = v168;
      v94 = v172;
      v95 = ((uint64_t (*)(char *, uint64_t, uint64_t))v173)(v168, v171, v172);
      v96 = Logger.logObject.getter(v95);
      v97 = static os_log_type_t.default.getter(v96);
      if (os_log_type_enabled(v96, v97))
      {
        v98 = swift_slowAlloc(42, -1);
        v164 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))swift_slowAlloc(64, -1);
        v184 = v164;
        *(_DWORD *)v98 = v162.n128_u32[0];
        *(_QWORD *)(v98 + 4) = 1752392040;
        *(_WORD *)(v98 + 12) = 2081;
        v99 = v179;
        v100 = v85;
        v101 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v102 = dispatch thunk of CustomStringConvertible.description.getter(v94, v101);
        *(_QWORD *)(v98 + 14) = sub_100016940(v102, v103, (uint64_t *)&v184);
        swift_bridgeObjectRelease();
        v104 = v100;
        v92 = (uint64_t)v161;
        sub_1000126B0(v104, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v98 + 22) = 2160;
        *(_QWORD *)(v98 + 24) = 1752392040;
        *(_WORD *)(v98 + 32) = 2081;
        v105 = v101;
        v106 = v176;
        v107 = dispatch thunk of CustomStringConvertible.description.getter(v94, v105);
        *(_QWORD *)(v98 + 34) = sub_100016940(v107, v108, (uint64_t *)&v184);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v166)(v93, v94);
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "Decimating beacon BeaconEstimatedLocation %{private,mask.hash}s for beacon %{private,mask.hash}s.", (uint8_t *)v98, 0x2Au);
        v109 = v164;
        swift_arrayDestroy(v164, 2, v160);
        swift_slowDealloc(v109, -1, -1);
        swift_slowDealloc(v98, -1, -1);

      }
      else
      {
        sub_1000126B0(v85, type metadata accessor for BeaconEstimatedLocation);
        ((void (*)(char *, uint64_t))v166)(v93, v94);

        v99 = v179;
        v106 = v176;
      }
      v110 = *(int *)(v99 + 20);
      v111 = objc_autoreleasePoolPush();
      if (qword_1010EA060 != -1)
        swift_once(&qword_1010EA060, sub_100967AE8);
      v112 = sub_10001A9E8(v106, (uint64_t)qword_1011B7970);
      v113 = UUID.uuidString.getter(v112);
      v114 = v106;
      v115 = v169;
      URL.appendingPathComponent(_:)(v113, v116);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v111);
      __chkstk_darwin(v117);
      *(&v148 - 4) = v118;
      *(&v148 - 3) = v92 + v110;
      *(&v148 - 2) = (unint64_t)v115;
      v119 = v181;
      OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v148 - 6, &type metadata for Bool);
      v181 = v119;
      v9 = v178;
      (*(void (**)(char *, uint64_t))(v178 + 8))(v115, v114);
      sub_1000126B0(v92, type metadata accessor for BeaconEstimatedLocation);
      v91 += v165;
      v89 = v180 - 1;
      v85 = (uint64_t)v170;
    }
    while ((_QWORD)v180 != 1);
    swift_bridgeObjectRelease();
    v84 = (uint64_t)v159;
  }
  v120 = *(_QWORD *)(v156 + 16);
  if (v120)
  {
    v121 = v156 + ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80));
    v122 = *(_QWORD *)(v150 + 72);
    v180 = xmmword_100E22B00;
    v123 = (uint64_t)v163;
    v124 = v158;
    v125 = v176;
    v181 = v122;
    do
    {
      sub_10005972C(v121, v123, type metadata accessor for BeaconStoreFileRecord);
      sub_10000F9B8(v123 + *(int *)(v174 + 20), v84, &qword_1010FBA40);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v84, 1, v125) == 1)
      {
        sub_100004048(v84, &qword_1010FBA40);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v124, v84, v125);
        v126 = v124;
        v127 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
        URL._bridgeToObjectiveC()(v128);
        v130 = v129;
        v184 = 0;
        v131 = v9;
        v132 = objc_msgSend(v127, "removeItemAtURL:error:", v129, &v184);

        v133 = v184;
        if ((v132 & 1) != 0)
        {
          v134 = v184;
          (*(void (**)(char *, uint64_t))(v131 + 8))(v126, v125);
          v123 = (uint64_t)v163;
          v9 = v131;
          v124 = v126;
        }
        else
        {
          v135 = v184;
          v136 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))_convertNSErrorToError(_:)(v133);

          v138 = swift_willThrow(v137);
          v139 = static os_log_type_t.default.getter(v138);
          if (qword_1010EA258 != -1)
            swift_once(&qword_1010EA258, sub_100B5D9CC);
          v140 = qword_1011B7D38;
          v141 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v142 = swift_allocObject(v141, 72, 7);
          *(_OWORD *)(v142 + 16) = v180;
          v184 = v136;
          swift_errorRetain(v136);
          v143 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          v144 = String.init<A>(describing:)(&v184, v143);
          v146 = v145;
          *(_QWORD *)(v142 + 56) = &type metadata for String;
          *(_QWORD *)(v142 + 64) = sub_10001AA00();
          *(_QWORD *)(v142 + 32) = v144;
          *(_QWORD *)(v142 + 40) = v146;
          os_log(_:dso:log:_:_:)(v139, &_mh_execute_header, v140, "Could not delete tombstoned record %@", 37, 2, v142);
          swift_bridgeObjectRelease();
          swift_errorRelease(v136);
          v9 = v178;
          v124 = v158;
          v125 = v176;
          (*(void (**)(char *, uint64_t))(v178 + 8))(v158, v176);
          v84 = (uint64_t)v159;
          v123 = (uint64_t)v163;
        }
        v122 = v181;
      }
      sub_1000126B0(v123, type metadata accessor for BeaconStoreFileRecord);
      v121 += v122;
      --v120;
    }
    while (v120);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100005CF0(v177, v151, (uint64_t *)&unk_1010EA690);
  return swift_bridgeObjectRelease();
}

