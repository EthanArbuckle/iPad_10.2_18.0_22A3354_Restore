uint64_t sub_100531D18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v37;
  char *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD aBlock[6];

  v40 = a5;
  v41 = a6;
  v39 = a4;
  v37 = a3;
  v44 = type metadata accessor for DispatchWorkItemFlags(0);
  v47 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v43 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  __chkstk_darwin(v9);
  v38 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = *(_QWORD *)(a2 + 296);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_10107DC18, v20 + 16, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + v16, v14, v11);
  v22 = v37;
  *(_QWORD *)(v21 + v17) = v37;
  v24 = v39;
  v23 = v40;
  *(_QWORD *)(v21 + v18) = v39;
  *(_QWORD *)(v21 + v19) = a2;
  v25 = (_QWORD *)(v21 + v20);
  v26 = v41;
  *v25 = v23;
  v25[1] = v26;
  aBlock[4] = sub_100555234;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107DC30;
  v27 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(v22);
  v28 = v24;
  swift_retain();
  v29 = swift_retain();
  v30 = v38;
  static DispatchQoS.unspecified.getter(v29);
  v48 = _swiftEmptyArrayStorage;
  v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v33 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v35 = v43;
  v34 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v32, v33, v44, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v35, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v35, v34);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v30, v46);
  return swift_release();
}

void sub_100531FEC(uint64_t a1, _QWORD *a2, id a3, _QWORD *a4, void (*a5)(_QWORD), void **a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  void **v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  _QWORD *v57;
  void *v58;
  id v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  id v64;
  NSString v65;
  id v66;
  id v67;
  void **v68;
  _QWORD *v69;
  uint64_t v70;
  void **v71;
  void (*v72)(_QWORD);
  void **aBlock;
  _QWORD v74[4];
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;

  v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v14) == 200)
  {
    if (qword_1010EA098 != -1)
      goto LABEL_22;
    while (1)
    {
      v71 = a6;
      v72 = a5;
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain_n(a2, 2);
      a3 = a3;
      v70 = v18;
      v19 = a2;
      v20 = Logger.logObject.getter(a3);
      v21 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(32, -1);
        v68 = (void **)swift_slowAlloc(64, -1);
        aBlock = v68;
        *(_DWORD *)v22 = 134218498;
        v76 = v19[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v22 + 4, v22 + 12);
        *(_WORD *)(v22 + 12) = 2080;
        v69 = a4;
        v23 = objc_msgSend(a3, "clientApp");
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v26 = v25;

        v76 = sub_100016940(v24, v26, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v22 + 14, v22 + 22);

        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 22) = 2080;
        swift_bridgeObjectRetain(v19);
        v28 = Array.description.getter(v27, &type metadata for String);
        v30 = v29;
        swift_bridgeObjectRelease();
        v31 = v28;
        a4 = v69;
        v76 = sub_100016940(v31, v30, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v22 + 24, v22 + 32);
        swift_bridgeObjectRelease_n(v19, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unsubscribe received status 200 - Success for %ld IDs for clientApp %s ids %s", (uint8_t *)v22, 0x20u);
        v32 = v68;
        swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v22, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v19, 2);
      }
      v52 = v19;
      a6 = (void **)v19[2];
      if (!a6)
        break;
      a5 = (void (*)(_QWORD))a4[6];
      swift_bridgeObjectRetain(v19);
      v69 = v19;
      v53 = v19 + 5;
      v68 = a6;
      while (1)
      {
        v54 = *(v53 - 1);
        v55 = *v53;
        v56 = *((_QWORD *)a5 + 2);
        v57 = (_QWORD *)swift_allocObject(&unk_10107DC68, 48, 7);
        v57[2] = a5;
        v57[3] = v54;
        v57[4] = v55;
        v57[5] = a3;
        a4 = (_QWORD *)swift_allocObject(&unk_10107DC90, 32, 7);
        a4[2] = sub_1005552A4;
        a4[3] = v57;
        v74[3] = sub_10005CBA4;
        v75 = a4;
        aBlock = _NSConcreteStackBlock;
        v74[0] = 1107296256;
        v74[1] = sub_10001D8B8;
        v74[2] = &unk_10107DCA8;
        v58 = _Block_copy(&aBlock);
        a2 = v75;
        swift_bridgeObjectRetain_n(v55, 2);
        v59 = a3;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v56, v58);
        _Block_release(v58);
        LOBYTE(v56) = swift_isEscapingClosureAtFileLocation(a4, "", 120, 116, 35, 1);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        if ((v56 & 1) != 0)
          break;
        v53 += 2;
        a6 = (void **)((char *)a6 - 1);
        if (!a6)
        {
          v52 = v69;
          swift_bridgeObjectRelease();
          a6 = v68;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_22:
      swift_once(&qword_1010EA098, sub_10098F7D8);
    }
LABEL_15:
    swift_bridgeObjectRetain(v52);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v63 = 134217984;
      aBlock = a6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v74, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unsubscribe removed subscription for %ld subs", v63, 0xCu);
      swift_slowDealloc(v63, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v72(0);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7A18);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
    swift_bridgeObjectRetain_n(a2, 2);
    v34 = a3;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      v38 = swift_slowAlloc(42, -1);
      v72 = a5;
      v39 = v38;
      v40 = (void **)swift_slowAlloc(64, -1);
      v71 = a6;
      v41 = v40;
      aBlock = v40;
      *(_DWORD *)v39 = 134218754;
      LODWORD(v70) = v37;
      v42 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v40);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      v76 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2048;
      v76 = a2[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 14, v39 + 22);
      *(_WORD *)(v39 + 22) = 2080;
      v43 = objc_msgSend(v34, "clientApp");
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

      v76 = sub_100016940(v44, v46, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 24, v39 + 32);

      swift_bridgeObjectRelease();
      *(_WORD *)(v39 + 32) = 2080;
      swift_bridgeObjectRetain(a2);
      v48 = Array.description.getter(v47, &type metadata for String);
      v50 = v49;
      swift_bridgeObjectRelease();
      v76 = sub_100016940(v48, v50, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 34, v39 + 42);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v70, "Error during Unsubscribe %ld for %ld IDs for clientApp %s ids %s", (uint8_t *)v39, 0x2Au);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      v51 = v39;
      a5 = v72;
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);

      swift_bridgeObjectRelease_n(a2, 2);
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v64 = objc_allocWithZone((Class)NSError);
    v65 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v66 = objc_msgSend(v64, "initWithDomain:code:userInfo:", v65, 4, 0);

    v67 = v66;
    a5(v66);

  }
}

uint64_t sub_100532800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[6];

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_allocObject(&unk_10107DBC8, 40, 7);
  v14[2] = a1;
  v14[3] = a3;
  v14[4] = a4;
  aBlock[4] = sub_100555158;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107DBE0;
  v15 = _Block_copy(aBlock);
  swift_errorRetain(a1);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v22 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_100532A08(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  void ***v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  char *v41;
  unint64_t *v42;
  void (*v43)(uint64_t, uint64_t);
  void **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(uint64_t (*)(uint64_t), void ***, uint64_t);
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void ***v55;
  void **v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  uint64_t v61;
  void ***v62;
  uint64_t v63;
  void **v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void **v69;
  _QWORD *v70;
  __int128 v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint64_t v76;
  uint8_t *v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void **v82;
  char *v83;
  uint64_t v84;
  char *v85;
  __n128 v86;
  uint64_t v87;
  void (*v88)(char *, char *, uint64_t, __n128);
  void (*v89)(char *, uint64_t, uint64_t, uint64_t);
  char *v90;
  uint64_t v91;
  char v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  void *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void **v122;
  void **v123;
  char *v124;
  __int128 v125;
  __int128 v126;
  uint64_t (*v127)(uint64_t);
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  void **v145;
  void ***p_aBlock;
  char *v147;
  void ***v148;
  _QWORD *v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  _QWORD *v154;
  void **aBlock;
  _QWORD v156[5];

  v137 = type metadata accessor for DispatchWorkItemFlags(0);
  v136 = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137);
  v135 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = type metadata accessor for DispatchQoS(0);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v132 = (char *)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v153 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  v142 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v131 = (uint64_t)&v123 - v13;
  v14 = __chkstk_darwin(v12);
  v141 = (char *)&v123 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v123 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v152 = (char *)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v23 = __chkstk_darwin(v22);
  v25 = (uint64_t (*)(uint64_t))((char *)&v123 - v24);
  result = __chkstk_darwin(v23);
  v29 = (void ***)((char *)&v123 - v28);
  if (*a1 == 1)
  {
    *(_QWORD *)&v128 = v27;
    v144 = v11;
    v130 = *(_QWORD *)(a2 + 24);
    swift_retain();
    v30 = sub_10088A680();
    swift_release();
    v139 = (char *)v30[2];
    if (v139)
    {
      if (qword_1010EA098 != -1)
LABEL_42:
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v31 = type metadata accessor for Logger(0);
      v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B7A18);
      swift_bridgeObjectRetain(v30);
      v150 = v32;
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter(v34);
      v36 = os_log_type_enabled(v34, v35);
      v143 = v8;
      v140 = v30;
      v129 = a2;
      if (v36)
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v37 = 134217984;
        aBlock = (void **)v30[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v156, v37 + 4, v37 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Shared keys found %ld. Determining if we need to delete", v37, 0xCu);
        swift_slowDealloc(v37, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease();
      }
      v30 = v17;
      if (qword_1010EA0A8 != -1)
        swift_once(&qword_1010EA0A8, sub_10098F82C);
      v38 = qword_1011B7A48;
      swift_retain();
      v39 = sub_10001A9A8(&qword_1010FEF48);
      OS_dispatch_queue.sync<A>(execute:)(sub_100555824, v38, v39);
      swift_release();
      v41 = (char *)aBlock[2];
      v17 = (char *)_swiftEmptyArrayStorage;
      v149 = v30;
      v123 = aBlock;
      if (v41)
      {
        v42 = (unint64_t *)(aBlock + 8);
        *(_QWORD *)&v40 = 136315394;
        v125 = v40;
        v124 = (char *)&type metadata for Any + 8;
        v148 = v29;
        v127 = v25;
        do
        {
          v44 = (void **)*(v42 - 2);
          v45 = *(v42 - 1);
          v46 = *v42;
          p_aBlock = (void ***)*(v42 - 3);
          v147 = v41;
          swift_bridgeObjectRetain(p_aBlock);
          v145 = v44;
          swift_bridgeObjectRetain(v44);
          swift_bridgeObjectRetain(v46);
          v138 = v45;
          v47 = String.utf8Data.getter(v45, v46);
          v49 = v48;
          aBlock = (void **)v47;
          v156[0] = v48;
          v50 = sub_100035530();
          DataProtocol.stableUUID.getter(&type metadata for Data, v50);
          sub_10001BC14(v47, v49);
          v51 = *(void (**)(uint64_t (*)(uint64_t), void ***, uint64_t))(v19 + 16);
          v51(v25, v29, v18);
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = (char *)sub_1007C84F8(0, *((_QWORD *)v17 + 2) + 1, 1, (unint64_t)v17);
          v53 = *((_QWORD *)v17 + 2);
          v52 = *((_QWORD *)v17 + 3);
          if (v53 >= v52 >> 1)
            v17 = (char *)sub_1007C84F8(v52 > 1, v53 + 1, 1, (unint64_t)v17);
          *((_QWORD *)v17 + 2) = v53 + 1;
          (*(void (**)(char *, uint64_t (*)(uint64_t), uint64_t))(v19 + 32))(&v17[((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v53], v25, v18);
          v54 = v128;
          v51((uint64_t (*)(uint64_t))v128, v148, v18);
          v55 = p_aBlock;
          swift_bridgeObjectRetain(p_aBlock);
          v56 = v145;
          swift_bridgeObjectRetain(v145);
          swift_bridgeObjectRetain(v46);
          v58 = Logger.logObject.getter(v57);
          v59 = static os_log_type_t.default.getter(v58);
          v60 = v59;
          if (os_log_type_enabled(v58, v59))
          {
            v61 = swift_slowAlloc(22, -1);
            LODWORD(v126) = v60;
            v62 = v55;
            v63 = v61;
            v64 = (void **)swift_slowAlloc(64, -1);
            v151 = v17;
            v65 = v64;
            aBlock = v64;
            *(_DWORD *)v63 = v125;
            swift_bridgeObjectRetain(v46);
            *(_QWORD *)(v63 + 4) = sub_100016940(v138, v46, (uint64_t *)&aBlock);
            swift_bridgeObjectRelease_n(v56, 2);
            swift_bridgeObjectRelease_n(v62, 2);
            swift_bridgeObjectRelease_n(v46, 3);
            *(_WORD *)(v63 + 12) = 2080;
            v66 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v67 = dispatch thunk of CustomStringConvertible.description.getter(v18, v66);
            *(_QWORD *)(v63 + 14) = sub_100016940(v67, v68, (uint64_t *)&aBlock);
            swift_bridgeObjectRelease();
            v43 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
            v43(v54, v18);
            _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v126, "Handle serverId %s UUID %s", (uint8_t *)v63, 0x16u);
            swift_arrayDestroy(v65, 2, v124);
            v69 = v65;
            v17 = v151;
            swift_slowDealloc(v69, -1, -1);
            swift_slowDealloc(v63, -1, -1);

          }
          else
          {

            v43 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
            v43(v54, v18);
            swift_bridgeObjectRelease_n(v46, 2);
            swift_bridgeObjectRelease_n(v56, 2);
            swift_bridgeObjectRelease_n(v55, 2);
          }
          v29 = v148;
          v43((uint64_t)v148, v18);
          v30 = v149;
          v42 += 5;
          v41 = v147 - 1;
          v25 = v127;
        }
        while (v147 != (char *)1);
      }
      swift_bridgeObjectRelease();
      v8 = 0;
      v70 = v140;
      v147 = (char *)v140
           + ((*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80));
      p_aBlock = &aBlock;
      v25 = type metadata accessor for SecureLocationsCachedSharedKey;
      *(_QWORD *)&v71 = 136315138;
      v128 = v71;
      v127 = (uint64_t (*)(uint64_t))((char *)&type metadata for Any + 8);
      *(_QWORD *)&v71 = 136315394;
      v126 = v71;
      a2 = (uint64_t)v141;
      v151 = v17;
      do
      {
        if (v8 >= v70[2])
        {
          __break(1u);
          goto LABEL_42;
        }
        sub_10005972C((uint64_t)&v147[*(_QWORD *)(v142 + 72) * v8], (uint64_t)v30, type metadata accessor for SecureLocationsCachedSharedKey);
        v29 = (void ***)v30;
        v72 = sub_10005972C((uint64_t)v30, a2, type metadata accessor for SecureLocationsCachedSharedKey);
        v73 = Logger.logObject.getter(v72);
        v74 = static os_log_type_t.default.getter(v73);
        v75 = os_log_type_enabled(v73, v74);
        v148 = (void ***)v8;
        if (v75)
        {
          v76 = a2;
          v77 = (uint8_t *)swift_slowAlloc(12, -1);
          v78 = (void **)swift_slowAlloc(32, -1);
          aBlock = v78;
          *(_DWORD *)v77 = v128;
          v79 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v80 = dispatch thunk of CustomStringConvertible.description.getter(v18, v79);
          v154 = (_QWORD *)sub_100016940(v80, v81, (uint64_t *)&aBlock);
          v29 = (void ***)v149;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, p_aBlock, v77 + 4, v77 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v76, type metadata accessor for SecureLocationsCachedSharedKey);
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Cached key identifier %s", v77, 0xCu);
          swift_arrayDestroy(v78, 1, v127);
          v82 = v78;
          v17 = v151;
          swift_slowDealloc(v82, -1, -1);
          swift_slowDealloc(v77, -1, -1);
        }
        else
        {
          sub_1000126B0(a2, type metadata accessor for SecureLocationsCachedSharedKey);
        }

        v83 = v153;
        v84 = *((_QWORD *)v17 + 2);
        if (v84)
        {
          v85 = &v17[(*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)];
          v86 = swift_bridgeObjectRetain(v17);
          v87 = *(_QWORD *)(v19 + 72);
          v88 = *(void (**)(char *, char *, uint64_t, __n128))(v19 + 16);
          while (1)
          {
            v88(v83, v85, v18, v86);
            v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
            v89(v83, 0, 1, v18);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v83, 1, v18) == 1)
              break;
            v90 = v152;
            (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v152, v83, v18);
            v91 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v92 = dispatch thunk of static Equatable.== infix(_:_:)(v90, v29, v18, v91);
            (*(void (**)(char *, uint64_t))(v19 + 8))(v90, v18);
            if ((v92 & 1) != 0)
            {
              v17 = v151;
              swift_bridgeObjectRelease();
              v30 = v29;
              v25 = type metadata accessor for SecureLocationsCachedSharedKey;
              sub_1000126B0((uint64_t)v29, type metadata accessor for SecureLocationsCachedSharedKey);
              v70 = v140;
              goto LABEL_23;
            }
            v85 += v87;
            --v84;
            v83 = v153;
            if (!v84)
              goto LABEL_35;
          }
        }
        else
        {
          swift_bridgeObjectRetain(v17);
          v89 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
LABEL_35:
          v89(v83, 1, 1, v18);
        }
        swift_bridgeObjectRelease();
        v93 = (uint64_t *)((char *)v29 + *(int *)(v143 + 20));
        v95 = *v93;
        v94 = v93[1];
        swift_bridgeObjectRetain(v94);
        sub_1008AA594(v95, v94);
        v96 = *(_QWORD *)(v129 + 16);
        v29 = *(void ****)(v96 + 16);
        v97 = (_QWORD *)swift_allocObject(&unk_10107E208, 56, 7);
        v97[2] = v95;
        v97[3] = v94;
        v97[4] = v96;
        v97[5] = SharingCircleWildAdvertisementKey.init(key:);
        v97[6] = 0;
        v156[3] = sub_100555400;
        v156[4] = v97;
        aBlock = _NSConcreteStackBlock;
        v156[0] = 1107296256;
        v156[1] = sub_100016FB8;
        v156[2] = &unk_10107E220;
        v98 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain(v94);
        v99 = swift_retain();
        v100 = v132;
        static DispatchQoS.unspecified.getter(v99);
        v154 = _swiftEmptyArrayStorage;
        v101 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v102 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v103 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v104 = v135;
        v105 = v137;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v154, v102, v103, v137, v101);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v100, v104, v98);
        _Block_release(v98);
        v30 = v149;
        (*(void (**)(char *, uint64_t))(v136 + 8))(v104, v105);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v100, v134);
        swift_bridgeObjectRelease();
        swift_release();
        v106 = v131;
        v25 = type metadata accessor for SecureLocationsCachedSharedKey;
        sub_10005972C((uint64_t)v30, v131, type metadata accessor for SecureLocationsCachedSharedKey);
        v107 = (uint64_t)v144;
        v108 = sub_10005972C((uint64_t)v30, (uint64_t)v144, type metadata accessor for SecureLocationsCachedSharedKey);
        v109 = Logger.logObject.getter(v108);
        v110 = static os_log_type_t.default.getter(v109);
        if (os_log_type_enabled(v109, v110))
        {
          v111 = swift_slowAlloc(22, -1);
          v145 = (void **)swift_slowAlloc(64, -1);
          aBlock = v145;
          *(_DWORD *)v111 = v126;
          v112 = (uint64_t *)(v106 + *(int *)(v143 + 20));
          v113 = v106;
          v114 = *v112;
          v115 = v112[1];
          swift_bridgeObjectRetain(v115);
          v154 = (_QWORD *)sub_100016940(v114, v115, (uint64_t *)&aBlock);
          v29 = p_aBlock;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, p_aBlock, v111 + 4, v111 + 12);
          v25 = type metadata accessor for SecureLocationsCachedSharedKey;
          v116 = v149;
          swift_bridgeObjectRelease();
          v117 = v113;
          v30 = v116;
          sub_1000126B0(v117, type metadata accessor for SecureLocationsCachedSharedKey);
          *(_WORD *)(v111 + 12) = 2080;
          v138 = v111 + 14;
          v118 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v119 = (uint64_t)v144;
          v120 = dispatch thunk of CustomStringConvertible.description.getter(v18, v118);
          v154 = (_QWORD *)sub_100016940(v120, v121, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v154, v29, v138, v111 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0(v119, type metadata accessor for SecureLocationsCachedSharedKey);
          _os_log_impl((void *)&_mh_execute_header, v109, v110, "Removing keys for %s %s", (uint8_t *)v111, 0x16u);
          v122 = v145;
          swift_arrayDestroy(v145, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v122, -1, -1);
          swift_slowDealloc(v111, -1, -1);

        }
        else
        {

          sub_1000126B0(v107, type metadata accessor for SecureLocationsCachedSharedKey);
          sub_1000126B0(v106, type metadata accessor for SecureLocationsCachedSharedKey);
        }
        sub_1000126B0((uint64_t)v30, type metadata accessor for SecureLocationsCachedSharedKey);
        v70 = v140;
        v17 = v151;
LABEL_23:
        v8 = (unint64_t)v148 + 1;
        a2 = (uint64_t)v141;
      }
      while ((char *)v148 + 1 != v139);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100533918(uint64_t *a1, char *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  NSString v12;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v3 = (void *)a1[1];
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(v3, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v3);
    v14 = sub_100016940(v4, (unint64_t)v3, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v3, 3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received sink of friend stopped sharing %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  v11 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
  v12 = String._bridgeToObjectiveC()();
  objc_msgSend(v11, "setClientApp:", v12);

  objc_msgSend(v11, "setSubscriptionMode:", 2);
  swift_bridgeObjectRetain(v3);
  swift_retain();
  sub_10054FA10(v4, v3, v11, a2, (uint64_t)a2, v4, (uint64_t)v3);

  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100533B68(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  char v95[16];
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void *v99;
  char v100[24];
  uint64_t v101;
  __int128 v102;
  _OWORD v103[2];
  _OWORD v104[2];

  v91 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v91);
  v92 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v12);
  v14 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SecureLocationsSubscription(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104[0] = 0uLL;
  v93 = a4;
  v94 = a1;
  v96 = *(_QWORD *)(a4 + 48);
  v97 = a1;
  v19 = a2;
  v98 = a2;
  v99 = a3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100555CF0, v95, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010EF1C0);
  }
  else
  {
    v90 = a3;
    sub_1000126EC((uint64_t)v14, (uint64_t)v18, type metadata accessor for SecureLocationsSubscription);
    v20 = &v18[*(int *)(v15 + 32)];
    v21 = *((_QWORD *)v20 + 1);
    if (v21)
    {
      v22 = *(_QWORD *)v20;
      v23 = qword_1010EA0A8;
      swift_bridgeObjectRetain(v21);
      if (v23 != -1)
        swift_once(&qword_1010EA0A8, sub_10098F82C);
      swift_retain();
      v24 = Data.init(base64Encoded:options:)(v22, v21, 0);
      if (v25 >> 60 == 15)
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v26 = type metadata accessor for Logger(0);
        v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B7A18);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "failed to decode server provided push identifier", v30, 2u);
          swift_slowDealloc(v30, -1, -1);
        }
        swift_release();
        swift_bridgeObjectRelease();

        v31 = 0;
        v32 = 0;
      }
      else
      {
        v33 = v24;
        v34 = v25;
        static String.Encoding.utf8.getter(v24);
        v31 = String.init(data:encoding:)(v33, v34, v11);
        v32 = v35;
        sub_10001EF3C(v33, v34);
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      *(_QWORD *)&v104[0] = v31;
      *((_QWORD *)&v104[0] + 1) = v32;
      if (qword_1010E9B48 != -1)
        swift_once(&qword_1010E9B48, sub_100308748);
      v36 = type metadata accessor for Logger(0);
      sub_10001A9E8(v36, (uint64_t)qword_1011B6D08);
      swift_bridgeObjectRetain_n(a2, 2);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = swift_slowAlloc(42, -1);
        v41 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v102 = v41;
        *(_DWORD *)v40 = 141558787;
        *(_QWORD *)&v103[0] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, (char *)v103 + 8, v40 + 4, v40 + 12);
        *(_WORD *)(v40 + 12) = 2081;
        swift_beginAccess(v104, v100, 0, 0);
        v103[0] = v104[0];
        swift_bridgeObjectRetain(*((_QWORD *)&v104[0] + 1));
        v42 = sub_10001A9A8(&qword_1010F6350);
        v43 = String.init<A>(describing:)(v103, v42);
        *(_QWORD *)&v103[0] = sub_100016940(v43, v44, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, (char *)v103 + 8, v40 + 14, v40 + 22);
        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 22) = 2160;
        *(_QWORD *)&v103[0] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, (char *)v103 + 8, v40 + 24, v40 + 32);
        *(_WORD *)(v40 + 32) = 2081;
        swift_bridgeObjectRetain(v19);
        *(_QWORD *)&v103[0] = sub_100016940(v94, (unint64_t)v19, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, (char *)v103 + 8, v40 + 34, v40 + 42);
        swift_bridgeObjectRelease_n(v19, 3);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "stopLiveLocations: Got handle from server %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v40, 0x2Au);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(a2, 2);
      }

    }
    sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocationsSubscription);
    a3 = v90;
  }
  swift_beginAccess(v104, v103, 1, 0);
  v46 = *((_QWORD *)&v104[0] + 1);
  v47 = v93;
  if (!*((_QWORD *)&v104[0] + 1))
  {
    if (qword_1010EA0A8 != -1)
      v45 = swift_once(&qword_1010EA0A8, sub_10098F82C);
    v48 = qword_1011B7A48;
    __chkstk_darwin(v45);
    v49 = v94;
    *(&v89 - 4) = v48;
    *(&v89 - 3) = v49;
    *(&v89 - 2) = (uint64_t)v19;
    swift_retain();
    v50 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_100555DF8, &v89 - 6, v50);
    swift_release();
    v104[0] = v102;
    swift_bridgeObjectRelease();
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v51 = type metadata accessor for Logger(0);
    sub_10001A9E8(v51, (uint64_t)qword_1011B6D08);
    v52 = v104[0];
    swift_bridgeObjectRetain_n(*((_QWORD *)&v104[0] + 1), 2);
    swift_bridgeObjectRetain_n(v19, 2);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc(42, -1);
      v57 = swift_slowAlloc(64, -1);
      v90 = a3;
      v58 = v57;
      *(_DWORD *)v56 = 141558787;
      v101 = v57;
      *(_QWORD *)&v102 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, (char *)&v102 + 8, v56 + 4, v56 + 12);
      *(_WORD *)(v56 + 12) = 2081;
      v102 = v52;
      swift_bridgeObjectRetain(*((_QWORD *)&v52 + 1));
      v59 = String.init<A>(describing:)(&v102, v50);
      *(_QWORD *)&v102 = sub_100016940(v59, v60, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, (char *)&v102 + 8, v56 + 14, v56 + 22);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v52 + 1), 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 22) = 2160;
      *(_QWORD *)&v102 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, (char *)&v102 + 8, v56 + 24, v56 + 32);
      *(_WORD *)(v56 + 32) = 2081;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)&v102 = sub_100016940(v94, (unint64_t)v19, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, (char *)&v102 + 8, v56 + 34, v56 + 42);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "stopLiveLocations: Got handle from fmf following %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v56, 0x2Au);
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      v61 = v58;
      a3 = v90;
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v52 + 1), 2);
    }
    v47 = v93;
    v46 = *((_QWORD *)&v104[0] + 1);
    if (!*((_QWORD *)&v104[0] + 1))
      goto LABEL_32;
  }
  v62 = *(_QWORD *)&v104[0];
  swift_bridgeObjectRetain(v46);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v62, v46);
  if (!v65)
  {
LABEL_32:
    v92 = 0;
    *(_QWORD *)&v102 = 0;
    *((_QWORD *)&v102 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v77._countAndFlagsBits = 0xD000000000000031;
    v77._object = (void *)0x8000000100EDA610;
    String.append(_:)(v77);
    v78._countAndFlagsBits = v94;
    v78._object = v19;
    String.append(_:)(v78);
    v79._object = (void *)0x8000000100EDA650;
    v79._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v79);
    v80 = v102;
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v81 = type metadata accessor for Logger(0);
    sub_10001A9E8(v81, (uint64_t)qword_1011B6D08);
    swift_bridgeObjectRetain_n(*((_QWORD *)&v80 + 1), 2);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.error.getter(v83);
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(12, -1);
      v86 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v102 = v86;
      *(_DWORD *)v85 = 136315138;
      swift_bridgeObjectRetain(*((_QWORD *)&v80 + 1));
      v101 = sub_100016940(v80, *((unint64_t *)&v80 + 1), (uint64_t *)&v102);
      v47 = v93;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v85 + 4, v85 + 12);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v80 + 1), 3);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "LiveLocations: %s", v85, 0xCu);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v85, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(*((_QWORD *)&v80 + 1), 2);
    }
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C49090(v80, *((uint64_t *)&v80 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    v87 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v87);
    v88 = v94;
    *(&v89 - 4) = v47;
    *(&v89 - 3) = v88;
    *(&v89 - 2) = (uint64_t)v19;
    *(&v89 - 1) = (uint64_t)a3;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe", 61, 2, sub_100555BD8, &v89 - 6, &type metadata for () + 1);
    return swift_bridgeObjectRelease();
  }
  v66 = v65;
  v67 = *(_QWORD *)(v47 + 32);
  v68 = (uint64_t)v92;
  *v92 = v63;
  *(_QWORD *)(v68 + 8) = v64;
  *(_QWORD *)(v68 + 16) = v65;
  result = swift_storeEnumTagMultiPayload(v68, v91, 1);
  if (*(_QWORD *)(v67 + 432))
  {
    swift_bridgeObjectRetain(v66);
    swift_retain();
    v70 = dispatch thunk of AsynchronousCache.value(for:)(v68);
    swift_release();
    *(_QWORD *)&v102 = v70;
    v71 = sub_10001A9A8(&qword_1010F7980);
    v72 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v73 = Publisher.eraseToAnyPublisher()(v71, v72);
    swift_release();
    sub_1000126B0(v68, type metadata accessor for BeaconSharingSessionContext);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v102 = v73;
    v74 = (_QWORD *)swift_allocObject(&unk_10107E1B8, 48, 7);
    v75 = v94;
    v74[2] = v47;
    v74[3] = v75;
    v74[4] = v19;
    v74[5] = a3;
    swift_bridgeObjectRetain(v19);
    swift_retain();
    v76 = a3;
    Publisher.oneshot(_:)(sub_100555C1C, v74, v71, v72);
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1005347D0(uint64_t a1, void *a2, void *a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  id v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD);
  uint64_t v101;
  char v102[16];
  uint64_t v103;
  uint64_t v104;
  void *v105;
  void *v106;
  char v107[24];
  uint64_t v108;
  __int128 v109;
  _OWORD v110[2];
  _OWORD v111[2];

  v98 = a5;
  v100 = a4;
  v95 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v95);
  v96 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for SecureLocationsSubscription(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111[0] = 0uLL;
  v99 = v5;
  v103 = *(_QWORD *)(v5 + 48);
  v104 = a1;
  v101 = a1;
  v20 = a2;
  v105 = a2;
  v106 = a3;
  v97 = a3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100554E48, v102, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100004048((uint64_t)v15, &qword_1010EF1C0);
LABEL_13:
    v34 = v99;
    v35 = v100;
    goto LABEL_21;
  }
  sub_1000126EC((uint64_t)v15, (uint64_t)v19, type metadata accessor for SecureLocationsSubscription);
  v21 = &v19[*(int *)(v16 + 32)];
  v22 = *((_QWORD *)v21 + 1);
  if (!v22)
  {
    sub_1000126B0((uint64_t)v19, type metadata accessor for SecureLocationsSubscription);
    goto LABEL_13;
  }
  v23 = *(_QWORD *)v21;
  v24 = qword_1010EA0A8;
  swift_bridgeObjectRetain(v22);
  if (v24 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v25 = Data.init(base64Encoded:options:)(v23, v22, 0);
  if (v26 >> 60 == 15)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B7A18);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "failed to decode server provided push identifier", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }
    swift_release();
    swift_bridgeObjectRelease();

    v32 = 0;
    v33 = 0;
  }
  else
  {
    v36 = v25;
    v37 = v26;
    static String.Encoding.utf8.getter(v25);
    v32 = String.init(data:encoding:)(v36, v37, v12);
    v33 = v38;
    sub_10001EF3C(v36, v37);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v111[0] = v32;
  *((_QWORD *)&v111[0] + 1) = v33;
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v39 = type metadata accessor for Logger(0);
  sub_10001A9E8(v39, (uint64_t)qword_1011B6D08);
  swift_bridgeObjectRetain_n(a2, 2);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc(42, -1);
    v44 = v19;
    v45 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v109 = v45;
    *(_DWORD *)v43 = 141558787;
    *(_QWORD *)&v110[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    swift_beginAccess(v111, v107, 0, 0);
    v110[0] = v111[0];
    swift_bridgeObjectRetain(*((_QWORD *)&v111[0] + 1));
    v46 = sub_10001A9A8(&qword_1010F6350);
    v47 = String.init<A>(describing:)(v110, v46);
    *(_QWORD *)&v110[0] = sub_100016940(v47, v48, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 22) = 2160;
    *(_QWORD *)&v110[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 24, v43 + 32);
    *(_WORD *)(v43 + 32) = 2081;
    swift_bridgeObjectRetain(v20);
    *(_QWORD *)&v110[0] = sub_100016940(v101, (unint64_t)v20, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, (char *)v110 + 8, v43 + 34, v43 + 42);
    swift_bridgeObjectRelease_n(v20, 3);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "stopLiveLocations: Got handle from server %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v43, 0x2Au);
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    v49 = (uint64_t)v44;
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);

    v49 = (uint64_t)v19;
  }
  sub_1000126B0(v49, type metadata accessor for SecureLocationsSubscription);
  v35 = v100;
  v34 = v99;
LABEL_21:
  swift_beginAccess(v111, v110, 1, 0);
  v51 = *((_QWORD *)&v111[0] + 1);
  if (!*((_QWORD *)&v111[0] + 1))
  {
    if (qword_1010EA0A8 != -1)
      v50 = swift_once(&qword_1010EA0A8, sub_10098F82C);
    v52 = qword_1011B7A48;
    __chkstk_darwin(v50);
    v53 = v101;
    *(&v94 - 4) = v52;
    *(&v94 - 3) = v53;
    *(&v94 - 2) = (uint64_t)v20;
    swift_retain();
    v54 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_100554E94, &v94 - 6, v54);
    swift_release();
    v111[0] = v109;
    swift_bridgeObjectRelease();
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v55 = type metadata accessor for Logger(0);
    sub_10001A9E8(v55, (uint64_t)qword_1011B6D08);
    v56 = v111[0];
    swift_bridgeObjectRetain_n(*((_QWORD *)&v111[0] + 1), 2);
    swift_bridgeObjectRetain_n(v20, 2);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(42, -1);
      v61 = swift_slowAlloc(64, -1);
      *(_DWORD *)v60 = 141558787;
      v108 = v61;
      *(_QWORD *)&v109 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 4, v60 + 12);
      *(_WORD *)(v60 + 12) = 2081;
      v109 = v56;
      swift_bridgeObjectRetain(*((_QWORD *)&v56 + 1));
      v62 = String.init<A>(describing:)(&v109, v54);
      *(_QWORD *)&v109 = sub_100016940(v62, v63, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v56 + 1), 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 22) = 2160;
      *(_QWORD *)&v109 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 24, v60 + 32);
      *(_WORD *)(v60 + 32) = 2081;
      swift_bridgeObjectRetain(v20);
      *(_QWORD *)&v109 = sub_100016940(v101, (unint64_t)v20, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v60 + 34, v60 + 42);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "stopLiveLocations: Got handle from fmf following %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v60, 0x2Au);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      v64 = v61;
      v34 = v99;
      v35 = v100;
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v60, -1, -1);

      v51 = *((_QWORD *)&v111[0] + 1);
      if (!*((_QWORD *)&v111[0] + 1))
        goto LABEL_33;
    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v56 + 1), 2);
      v51 = *((_QWORD *)&v111[0] + 1);
      if (!*((_QWORD *)&v111[0] + 1))
      {
LABEL_33:
        v99 = 0;
        *(_QWORD *)&v109 = 0;
        *((_QWORD *)&v109 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(67);
        v81._countAndFlagsBits = 0xD000000000000031;
        v81._object = (void *)0x8000000100EDA610;
        String.append(_:)(v81);
        v82._countAndFlagsBits = v101;
        v82._object = v20;
        String.append(_:)(v82);
        v83._object = (void *)0x8000000100EDA650;
        v83._countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v83);
        v84 = v109;
        if (qword_1010E9B48 != -1)
          swift_once(&qword_1010E9B48, sub_100308748);
        v85 = type metadata accessor for Logger(0);
        sub_10001A9E8(v85, (uint64_t)qword_1011B6D08);
        swift_bridgeObjectRetain_n(*((_QWORD *)&v84 + 1), 2);
        v87 = Logger.logObject.getter(v86);
        v88 = static os_log_type_t.error.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          v89 = (uint8_t *)swift_slowAlloc(12, -1);
          v90 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v109 = v90;
          *(_DWORD *)v89 = 136315138;
          swift_bridgeObjectRetain(*((_QWORD *)&v84 + 1));
          v108 = sub_100016940(v84, *((unint64_t *)&v84 + 1), (uint64_t *)&v109);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v89 + 4, v89 + 12);
          swift_bridgeObjectRelease_n(*((_QWORD *)&v84 + 1), 3);
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "LiveLocations: %s", v89, 0xCu);
          swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v90, -1, -1);
          swift_slowDealloc(v89, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(*((_QWORD *)&v84 + 1), 2);
        }
        if (qword_1010EA428 != -1)
          swift_once(&qword_1010EA428, sub_100C48554);
        swift_retain();
        sub_100C49090(v84, *((uint64_t *)&v84 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        v91 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v91);
        v92 = v101;
        *(&v94 - 4) = v34;
        *(&v94 - 3) = v92;
        v93 = (uint64_t)v97;
        *(&v94 - 2) = (uint64_t)v20;
        *(&v94 - 1) = v93;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe", 61, 2, sub_100554E64, &v94 - 6, &type metadata for () + 1);
        v35 = v100;
        goto LABEL_41;
      }
    }
  }
  v65 = *(_QWORD *)&v111[0];
  swift_bridgeObjectRetain(v51);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v65, v51);
  if (!v68)
    goto LABEL_33;
  v69 = v68;
  v70 = *(_QWORD *)(v34 + 32);
  v71 = (uint64_t)v96;
  *v96 = v66;
  *(_QWORD *)(v71 + 8) = v67;
  *(_QWORD *)(v71 + 16) = v68;
  result = swift_storeEnumTagMultiPayload(v71, v95, 1);
  if (*(_QWORD *)(v70 + 432))
  {
    swift_bridgeObjectRetain(v69);
    swift_retain();
    v73 = dispatch thunk of AsynchronousCache.value(for:)(v71);
    swift_release();
    *(_QWORD *)&v109 = v73;
    v74 = sub_10001A9A8(&qword_1010F7980);
    v75 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v76 = Publisher.eraseToAnyPublisher()(v74, v75);
    swift_release();
    sub_1000126B0(v71, type metadata accessor for BeaconSharingSessionContext);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v109 = v76;
    v77 = (_QWORD *)swift_allocObject(&unk_10107D948, 48, 7);
    v78 = v101;
    v77[2] = v34;
    v77[3] = v78;
    v79 = v97;
    v77[4] = v20;
    v77[5] = v79;
    swift_bridgeObjectRetain(v20);
    swift_retain();
    v80 = v79;
    Publisher.oneshot(_:)(sub_100554E88, v77, v74, v75);
    swift_release();
    swift_release();
LABEL_41:
    v35(0);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void sub_1005354A8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  id v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  _QWORD *v26;
  uint8_t *v27;
  NSObject *v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  _QWORD aBlock[8];

  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v30 - v10;
  v12 = *(_QWORD *)(a1 + 120);
  if (v12)
  {
    *a2 = *(_QWORD *)(a1 + 112);
    a2[1] = v12;
  }
  else
  {
    v31 = a2;
    aBlock[7] = v2;
    v13 = dispatch_group_create();
    dispatch_group_enter(v13);
    v30 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
    v14 = swift_allocObject(&unk_10107D1C8, 32, 7);
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = a1;
    aBlock[4] = sub_100554218;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100535978;
    aBlock[3] = &unk_10107D1E0;
    v15 = _Block_copy(aBlock);
    v16 = v13;
    swift_retain();
    swift_release();
    v17 = v30;
    objc_msgSend(v30, "fetchAPNSTokenWithCompletion:", v15);
    _Block_release(v15);

    static DispatchTime.now()(v18);
    + infix(_:_:)(v9, 10.0);
    v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19(v9, v5);
    v20 = OS_dispatch_group.wait(timeout:)(v11) & 1;
    v19(v11, v5);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v20, 1) & 1) != 0)
    {
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      v25 = os_log_type_enabled(v23, v24);
      v26 = v31;
      if (v25)
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Timed out waiting for APS token call to return", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
        v28 = v16;
        v16 = v23;
      }
      else
      {
        v28 = v23;
      }

    }
    else
    {
      v26 = v31;
    }

    v29 = *(_QWORD *)(a1 + 120);
    *v26 = *(_QWORD *)(a1 + 112);
    v26[1] = v29;
    swift_bridgeObjectRetain(v29);
  }
  swift_bridgeObjectRetain(v12);
}

void sub_100535770(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;

  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a3);
    v8 = swift_errorRetain(a3);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v18 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_getErrorValue(a3, v17, v16);
      v13 = Error.localizedDescription.getter(v16[1], v16[2]);
      v15 = sub_100016940(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error fetching APS token %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(a3);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
  }
  else
  {
    *(_QWORD *)(a5 + 112) = a1;
    *(_QWORD *)(a5 + 120) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a4);
}

uint64_t sub_100535978(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, void *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v5 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  swift_retain(v4);
  v9 = a3;
  v5(v6, v8, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v8);
}

void sub_1005359F8(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002000010002;
  sub_100536640(a1, (uint64_t (*)(void))&static os_log_type_t.info.getter, "Error starting location monitoring %s", "Started location monitoring", a2);
}

void sub_100535A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD *v12;
  void *v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  uint64_t v18;
  void *v19;
  void **aBlock;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  void *v23;
  void *v24;
  _QWORD *v25;

  v12 = (_QWORD *)swift_allocObject(&unk_10107D4C0, 56, 7);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a1;
  v24 = sub_10055466C;
  v25 = v12;
  aBlock = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_100555E2C;
  v23 = &unk_10107D4D8;
  v13 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  swift_retain();
  swift_release();
  v14 = objc_msgSend(objc_allocWithZone((Class)FMDSecureLocationContext), "init");
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setMode:", v15);

  v16 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "setFindMyId:", v16);

  v17 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
  v18 = swift_allocObject(&unk_10107D510, 24, 7);
  *(_QWORD *)(v18 + 16) = v13;
  v24 = sub_10001D1F0;
  v25 = (_QWORD *)v18;
  aBlock = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_100555E2C;
  v23 = &unk_10107D528;
  v19 = _Block_copy(&aBlock);
  _Block_copy(v13);
  swift_release();
  objc_msgSend(v17, "startLocationMonitoringWithContext:forcePublish:completion:", v14, a6 & 1, v19);
  _Block_release(v19);

  _Block_release(v13);
}

void sub_100535C28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v25 = a1;
      v26 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_errorRetain(a1);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v13 = String.init<A>(describing:)(&v25, v12);
      v25 = sub_100016940(v13, v14, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error starting location monitoring %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(a3, 2);
    swift_bridgeObjectRetain_n(a5, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v26 = v24;
      *(_DWORD *)v23 = 136315394;
      swift_bridgeObjectRetain(a3);
      v25 = sub_100016940(a2, a3, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain(a5);
      v25 = sub_100016940(a4, a5, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Requested starting location monitoring for %s with %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
  Transaction.capture()();
}

void sub_100535FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  NSString v16;
  NSString v17;
  uint64_t v18;
  void *v19;
  void **aBlock;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  void *v23;
  void (*v24)(uint64_t);
  uint64_t v25;

  v12 = swift_allocObject(&unk_10107D5D8, 64, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a3;
  *(_QWORD *)(v12 + 32) = a4;
  *(_QWORD *)(v12 + 40) = a5;
  *(_BYTE *)(v12 + 48) = a6;
  *(_QWORD *)(v12 + 56) = a1;
  v24 = sub_1005547B0;
  v25 = v12;
  aBlock = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_100555E2C;
  v23 = &unk_10107D5F0;
  v13 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain(a5);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  swift_release();
  v14 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
  v15 = objc_msgSend(objc_allocWithZone((Class)FMDSecureLocationContext), "init");
  if (a3)
  {
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setFindMyId:", v16);

  }
  if (a5)
  {
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v15, "setMode:", v17);

  }
  objc_msgSend(v15, "setStopMonitoringActivePolicy:", a6 & 1);
  v18 = swift_allocObject(&unk_10107D628, 24, 7);
  *(_QWORD *)(v18 + 16) = v13;
  v24 = (void (*)(uint64_t))sub_10001D1EC;
  v25 = v18;
  aBlock = _NSConcreteStackBlock;
  v21 = 1107296256;
  v22 = sub_100555E2C;
  v23 = &unk_10107D640;
  v19 = _Block_copy(&aBlock);
  _Block_copy(v13);
  swift_release();
  objc_msgSend(v14, "stopLocationMonitoringWithContext:completion:", v15, v19);
  _Block_release(v19);

  _Block_release(v13);
}

void sub_100536210(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    v8 = swift_errorRetain(a1);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138543362;
      swift_errorRetain(a1);
      v13 = _swift_stdlib_bridgeErrorToNSError(a1);
      v30 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v11 + 4, v11 + 12);
      *v12 = v13;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error stopping location monitoring %{public}@", v11, 0xCu);
      v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(a5, 2);
    swift_bridgeObjectRetain_n(a3, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(28, -1);
      v28 = swift_slowAlloc(64, -1);
      v30 = v28;
      *(_DWORD *)v24 = 136446722;
      if (a3)
      {
        v25 = a3;
      }
      else
      {
        a2 = 0;
        v25 = 0xE000000000000000;
      }
      swift_bridgeObjectRetain(a3);
      v29 = sub_100016940(a2, v25, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2082;
      if (a5)
        v26 = a4;
      else
        v26 = 0;
      if (a5)
        v27 = a5;
      else
        v27 = 0xE000000000000000;
      swift_bridgeObjectRetain(a5);
      v29 = sub_100016940(v26, v27, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 22) = 1024;
      LODWORD(v29) = a6 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v24 + 24, v24 + 28);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Requested stopping location monitoring for %{public}s with %{public}s stopMonitoringActivePolicy: %{BOOL}d.", (uint8_t *)v24, 0x1Cu);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
  Transaction.capture()();
}

void sub_10053661C(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002200010002;
  sub_100536640(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Error stopping location monitoring %{public}s", "Stopped location monitoring", a2);
}

void sub_100536640(uint64_t a1, uint64_t (*a2)(void), const char *a3, const char *a4, int16x8_t a5)
{
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *oslog;
  uint64_t v23;
  uint64_t v24;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    v8 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v23 = a1;
      v24 = v11;
      *(_DWORD *)v10 = vmovn_s16(a5).u32[0];
      swift_errorRetain(a1);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v13 = String.init<A>(describing:)(&v23, v12);
      v23 = sub_100016940(v13, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, a3, v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
    oslog = Logger.logObject.getter(v18);
    v19 = a2();
    if (os_log_type_enabled(oslog, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v19, a4, v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
  }

}

uint64_t sub_1005368F4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v10;
  uint64_t v11;

  v2 = v1;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "LocationSharing: publishingDeviceStatus changed %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_retain();
  sub_10000B028((uint64_t)sub_100554FF8, v2);
  return swift_release();
}

void sub_100536A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  NSObject *oslog;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v5 = swift_retain();
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = swift_slowAlloc(64, -1);
      v17 = v8;
      *(_DWORD *)v7 = 136315394;
      v9 = (uint64_t *)(*(_QWORD *)(a2 + 328)
                     + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix);
      v10 = *v9;
      v11 = v9[1];
      swift_bridgeObjectRetain(v11);
      v16 = sub_100016940(v10, v11, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v7 + 4, v7 + 12);
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2080;
      v16 = a1;
      swift_errorRetain(a1);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v13 = String.init<A>(describing:)(&v16, v12);
      v16 = sub_100016940(v13, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v7 + 14, v7 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "%s - error starting monitor after device became a location publishing device %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_release();
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_100536C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[6];
  _QWORD *v23;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a2 + 176);
  v13 = (_QWORD *)swift_allocObject(&unk_10107D740, 40, 7);
  v13[2] = a3;
  v13[3] = a2;
  v13[4] = a1;
  aBlock[4] = sub_10055495C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107D758;
  v14 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  swift_retain();
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_100536EA8(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33[2];
  char v34;

  v34 = 0;
  v4 = objc_msgSend((id)objc_opt_self(BMStreams), "findMyLocationChangeStream");
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(type metadata accessor for SecureLocation(0) - 8);
    v7 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
    v8 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_10053725C(v7, a2, &v34, v4);
      v7 = (uint64_t *)((char *)v7 + v8);
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    if ((v34 & 1) != 0)
    {
      v9 = objc_allocWithZone((Class)CHSTimelineController);
      v10 = String._bridgeToObjectiveC()();
      v11 = String._bridgeToObjectiveC()();
      v12 = objc_msgSend(v9, "initForAvocadoIdentifier:inBundleIdentifier:", v10, v11);

      v13 = objc_msgSend(v12, "reloadTimeline");
      v14 = qword_1010EA098;
      if (v13)
      {
        v15 = v13;
        if (v14 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v16 = type metadata accessor for Logger(0);
        sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
        v17 = v15;
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.error.getter(v18);
        if (os_log_type_enabled(v18, v19))
        {
          v20 = (uint8_t *)swift_slowAlloc(12, -1);
          v31 = v12;
          v32 = (uint64_t)v17;
          v21 = swift_slowAlloc(32, -1);
          v33[0] = v21;
          *(_DWORD *)v20 = 136315138;
          v22 = v17;
          v23 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
          v24 = String.init<A>(describing:)(&v32, v23);
          v32 = sub_100016940(v24, v25, v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v20 + 4, v20 + 12);

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error reloading FindMyPeopleWidget timelines %s", v20, 0xCu);
          swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v21, -1, -1);
          swift_slowDealloc(v20, -1, -1);

        }
        else
        {

        }
      }
      else
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v26 = type metadata accessor for Logger(0);
        v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B7A18);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Completed reloading FindMyPeopleWidget timelines", v30, 2u);
          swift_slowDealloc(v30, -1, -1);
        }

      }
    }
  }
  Transaction.capture()();

}

void sub_10053725C(uint64_t *a1, uint64_t a2, _BYTE *a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  double v115;
  uint64_t (*v116)(char *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  double v119;
  double *v120;
  double *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  os_log_type_t v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  id v140;
  Class isa;
  id v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  id v150;
  Class v151;
  id v152;
  double v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double *v166;
  double *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t *v180;
  char *v181;
  uint64_t v182;
  _QWORD v183[2];
  uint64_t v184;
  _BYTE v185[32];

  v173 = a4;
  v179 = a3;
  v176 = a2;
  v169 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v171 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_101119450);
  v8 = __chkstk_darwin(v7);
  v174 = (char *)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v165 - v10;
  v12 = type metadata accessor for SecureLocation(0);
  v175 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v177 = (uint64_t)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v180 = (uint64_t *)((char *)&v165 - v16);
  v17 = __chkstk_darwin(v15);
  v181 = (char *)&v165 - v18;
  v19 = __chkstk_darwin(v17);
  v165 = (uint64_t)&v165 - v20;
  v21 = __chkstk_darwin(v19);
  v166 = (double *)((char *)&v165 - v22);
  v23 = __chkstk_darwin(v21);
  v167 = (double *)((char *)&v165 - v24);
  v25 = __chkstk_darwin(v23);
  v168 = (uint64_t)&v165 - v26;
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v165 - v28;
  v30 = __chkstk_darwin(v27);
  v170 = (uint64_t)&v165 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v165 - v33;
  v35 = __chkstk_darwin(v32);
  v37 = (char *)&v165 - v36;
  v38 = __chkstk_darwin(v35);
  v40 = (char *)&v165 - v39;
  v178 = *(int *)(v38 + 60);
  v41 = *(uint64_t *)((char *)a1 + v178);
  sub_10005972C((uint64_t)a1, (uint64_t)&v165 - v39, v42);
  if (v41 == 3)
  {
    sub_1000126B0((uint64_t)v40, type metadata accessor for SecureLocation);
    sub_10005972C((uint64_t)a1, (uint64_t)v37, type metadata accessor for SecureLocation);
LABEL_5:
    sub_1000126B0((uint64_t)v37, type metadata accessor for SecureLocation);
    sub_10005972C((uint64_t)a1, (uint64_t)v34, type metadata accessor for SecureLocation);
LABEL_6:
    sub_1000126B0((uint64_t)v34, type metadata accessor for SecureLocation);
    v46 = 0;
    v47 = 0;
LABEL_7:
    v48 = (uint64_t)v180;
    v49 = (uint64_t)v181;
    goto LABEL_8;
  }
  v43 = *(int *)(v12 + 60);
  v172 = v12;
  v44 = *(_QWORD *)&v40[v43];
  sub_1000126B0((uint64_t)v40, type metadata accessor for SecureLocation);
  sub_10005972C((uint64_t)a1, (uint64_t)v37, type metadata accessor for SecureLocation);
  v45 = v44 == 5;
  v12 = v172;
  if (v45)
    goto LABEL_5;
  v85 = *(_QWORD *)&v37[*(int *)(v172 + 60)];
  sub_1000126B0((uint64_t)v37, type metadata accessor for SecureLocation);
  sub_10005972C((uint64_t)a1, (uint64_t)v34, type metadata accessor for SecureLocation);
  v45 = v85 == 4;
  v12 = v172;
  if (v45)
    goto LABEL_6;
  v86 = *(_QWORD *)&v34[*(int *)(v172 + 60)];
  sub_1000126B0((uint64_t)v34, type metadata accessor for SecureLocation);
  if (v86 == 1)
  {
    v46 = 0;
    v47 = 0;
LABEL_42:
    v12 = v172;
    goto LABEL_7;
  }
  v95 = *a1;
  v94 = a1[1];
  v96 = v176;
  v97 = swift_beginAccess(v176 + 304, v185, 0, 0);
  v98 = *(_QWORD *)(v96 + 304);
  if (!*(_QWORD *)(v98 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v175 + 56))(v11, 1, 1, v172, v97);
LABEL_36:
    sub_100004048((uint64_t)v11, &qword_101119450);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v104 = type metadata accessor for Logger(0);
    sub_10001A9E8(v104, (uint64_t)qword_1011B7A18);
    v105 = sub_10005972C((uint64_t)a1, (uint64_t)v29, type metadata accessor for SecureLocation);
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.default.getter(v106);
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = swift_slowAlloc(32, -1);
      *(_DWORD *)v108 = 136446210;
      v182 = v109;
      v110 = sub_100AA723C(*(_QWORD *)&v29[*(int *)(v172 + 60)]);
      v184 = sub_100016940(v110, v111, &v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v108 + 4, v108 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v29, type metadata accessor for SecureLocation);
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "biomeDonation: No previous biome event cached, will donate: %{public}s", v108, 0xCu);
      swift_arrayDestroy(v109, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v29, type metadata accessor for SecureLocation);
    }

    v46 = 0;
    v47 = 1;
    goto LABEL_42;
  }
  swift_bridgeObjectRetain(v94);
  swift_bridgeObjectRetain(v98);
  v99 = sub_100518DA0(v95, v94);
  v12 = v172;
  if ((v100 & 1) != 0)
  {
    v101 = v175;
    sub_10005972C(*(_QWORD *)(v98 + 56) + *(_QWORD *)(v175 + 72) * v99, (uint64_t)v11, type metadata accessor for SecureLocation);
    v102 = 0;
  }
  else
  {
    v102 = 1;
    v101 = v175;
  }
  v103 = v171;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v11, v102, 1, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v11, 1, v12) == 1)
    goto LABEL_36;
  v112 = v170;
  v113 = sub_1000126EC((uint64_t)v11, v170, type metadata accessor for SecureLocation);
  Date.init()(v113);
  v114 = v112 + *(int *)(v12 + 52);
  v115 = Date.timeIntervalSince(_:)(v114);
  v116 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v117 = v169;
  v118 = v116(v103, v169);
  v49 = (uint64_t)v181;
  if (v115 >= 1080.0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v122 = type metadata accessor for Logger(0);
    sub_10001A9E8(v122, (uint64_t)qword_1011B7A18);
    v123 = v168;
    v124 = sub_10005972C((uint64_t)a1, v168, type metadata accessor for SecureLocation);
    v125 = Logger.logObject.getter(v124);
    v126 = static os_log_type_t.default.getter(v125);
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc(12, -1);
      v128 = swift_slowAlloc(32, -1);
      *(_DWORD *)v127 = 136446210;
      v182 = v128;
      v129 = v172;
      v130 = sub_100AA723C(*(_QWORD *)(v123 + *(int *)(v172 + 60)));
      v184 = sub_100016940(v130, v131, &v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v127 + 4, v127 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v168, type metadata accessor for SecureLocation);
      v132 = v126;
      v12 = v129;
      _os_log_impl((void *)&_mh_execute_header, v125, v132, "biomeDonation: Heartbeat threshold passed, location publish reason: %{public}s)", v127, 0xCu);
      v47 = 1;
      swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v128, -1, -1);
      swift_slowDealloc(v127, -1, -1);

      v49 = (uint64_t)v181;
      sub_1000126B0(v170, type metadata accessor for SecureLocation);
      v46 = 0;
    }
    else
    {

      sub_1000126B0(v123, type metadata accessor for SecureLocation);
      sub_1000126B0(v112, type metadata accessor for SecureLocation);
      v46 = 0;
      v47 = 1;
      v12 = v172;
    }
    v48 = (uint64_t)v180;
  }
  else
  {
    Date.init()(v118);
    v119 = Date.timeIntervalSince(_:)(v114);
    v116(v103, v117);
    v120 = v167;
    sub_10005972C(v112, (uint64_t)v167, type metadata accessor for SecureLocation);
    v121 = v166;
    sub_10005972C((uint64_t)a1, (uint64_t)v166, type metadata accessor for SecureLocation);
    if (v119 < 500.0)
    {
      sub_1000126B0((uint64_t)v121, type metadata accessor for SecureLocation);
      sub_1000126B0((uint64_t)v120, type metadata accessor for SecureLocation);
      v48 = (uint64_t)v180;
LABEL_56:
      sub_1000126B0(v112, type metadata accessor for SecureLocation);
      v47 = 0;
      v46 = 1;
      goto LABEL_8;
    }
    v134 = v120[2];
    v133 = v120[3];
    v136 = v120[7];
    v135 = v120[8];
    v138 = v120[4];
    v137 = v120[5];
    v139 = v120[6];
    v140 = objc_allocWithZone((Class)CLLocation);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v142 = objc_msgSend(v140, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", isa, v133, v134, v135, v137, v138, v136, v139);

    v144 = v121[2];
    v143 = v121[3];
    v146 = v121[7];
    v145 = v121[8];
    v148 = v121[4];
    v147 = v121[5];
    v149 = v121[6];
    v150 = objc_allocWithZone((Class)CLLocation);
    v151 = Date._bridgeToObjectiveC()().super.isa;
    v152 = objc_msgSend(v150, "initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:", v151, v143, v144, v145, v147, v148, v146, v149);

    objc_msgSend(v142, "distanceFromLocation:", v152);
    v154 = v153;

    v12 = v172;
    sub_1000126B0((uint64_t)v121, type metadata accessor for SecureLocation);
    sub_1000126B0((uint64_t)v120, type metadata accessor for SecureLocation);
    v48 = (uint64_t)v180;
    if (v154 <= 540.0)
      goto LABEL_56;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v155 = type metadata accessor for Logger(0);
    sub_10001A9E8(v155, (uint64_t)qword_1011B7A18);
    v156 = v165;
    v157 = sub_10005972C((uint64_t)a1, v165, type metadata accessor for SecureLocation);
    v158 = Logger.logObject.getter(v157);
    v159 = static os_log_type_t.default.getter(v158);
    if (os_log_type_enabled(v158, v159))
    {
      v160 = (uint8_t *)swift_slowAlloc(12, -1);
      v161 = swift_slowAlloc(32, -1);
      *(_DWORD *)v160 = 136446210;
      v182 = v161;
      v162 = sub_100AA723C(*(_QWORD *)(v156 + *(int *)(v172 + 60)));
      v184 = sub_100016940(v162, v163, &v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v160 + 4, v160 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v156, type metadata accessor for SecureLocation);
      _os_log_impl((void *)&_mh_execute_header, v158, v159, "biomeDonation: Min distance and time threshold passed, location publish reason: %{public}s", v160, 0xCu);
      swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
      v164 = v161;
      v48 = (uint64_t)v180;
      swift_slowDealloc(v164, -1, -1);
      swift_slowDealloc(v160, -1, -1);

      v49 = (uint64_t)v181;
      sub_1000126B0(v170, type metadata accessor for SecureLocation);
    }
    else
    {

      sub_1000126B0(v156, type metadata accessor for SecureLocation);
      sub_1000126B0(v112, type metadata accessor for SecureLocation);
    }
    v46 = 0;
    v47 = 1;
    v12 = v172;
  }
LABEL_8:
  v50 = *(uint64_t *)((char *)a1 + v178);
  sub_10005972C((uint64_t)a1, v49, type metadata accessor for SecureLocation);
  if (v50 == 6)
  {
    sub_1000126B0(v49, type metadata accessor for SecureLocation);
    v51 = 0;
  }
  else
  {
    v52 = *(_QWORD *)(v49 + *(int *)(v12 + 60));
    sub_1000126B0(v49, type metadata accessor for SecureLocation);
    v51 = v52 != 7;
  }
  *v179 = v51;
  v53 = sub_1008CBE70(*a1, a1[1]);
  v55 = v54;
  if (v54)
    v56 = v46;
  else
    v56 = 1;
  if ((v56 & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v57 = type metadata accessor for Logger(0);
    sub_10001A9E8(v57, (uint64_t)qword_1011B7A18);
    v58 = (uint64_t)a1;
    v59 = v177;
    sub_10005972C(v58, v177, type metadata accessor for SecureLocation);
    swift_bridgeObjectRetain(v55);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter(v61);
    if (os_log_type_enabled(v61, v62))
    {
      v63 = swift_slowAlloc(28, -1);
      v64 = swift_slowAlloc(64, -1);
      v184 = v64;
      *(_DWORD *)v63 = 136315650;
      v182 = v53;
      v183[0] = v55;
      swift_bridgeObjectRetain(v55);
      v65 = sub_10001A9A8(&qword_1010F6350);
      v66 = String.init<A>(describing:)(&v182, v65);
      v181 = (char *)v47;
      v182 = sub_100016940(v66, v67, &v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease_n(v55, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2082;
      v68 = v177;
      v69 = sub_100AA723C(*(_QWORD *)(v177 + *(int *)(v12 + 60)));
      v182 = sub_100016940(v69, v70, &v184);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v183, v63 + 14, v63 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v68, type metadata accessor for SecureLocation);
      *(_WORD *)(v63 + 22) = 1024;
      LODWORD(v182) = (_DWORD)v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, (char *)&v182 + 4, v63 + 24, v63 + 28);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "biomeDonation: NOT donating to Biome %s, publishReason: %{public}s, donationThresholdPassed: %{BOOL}d", (uint8_t *)v63, 0x1Cu);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v55, 2);
      sub_1000126B0(v59, type metadata accessor for SecureLocation);
    }

  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v71 = type metadata accessor for Logger(0);
    sub_10001A9E8(v71, (uint64_t)qword_1011B7A18);
    sub_10005972C((uint64_t)a1, v48, type metadata accessor for SecureLocation);
    swift_bridgeObjectRetain_n(v55, 2);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.default.getter(v73);
    v75 = v74;
    if (os_log_type_enabled(v73, v74))
    {
      v76 = v48;
      v77 = swift_slowAlloc(28, -1);
      v78 = swift_slowAlloc(64, -1);
      v181 = (char *)v47;
      v182 = v78;
      v179 = (_BYTE *)v78;
      *(_DWORD *)v77 = 136315650;
      swift_bridgeObjectRetain(v55);
      v184 = sub_100016940(v53, v55, &v182);
      v180 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v77 + 4, v77 + 12);
      swift_bridgeObjectRelease_n(v55, 3);
      *(_WORD *)(v77 + 12) = 2082;
      v79 = *(_QWORD *)(v76 + *(int *)(v12 + 60));
      LODWORD(v178) = v75;
      v80 = v76;
      v81 = sub_100AA723C(v79);
      v82 = v12;
      v184 = sub_100016940(v81, v83, &v182);
      a1 = v180;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, v185, v77 + 14, v77 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v80, type metadata accessor for SecureLocation);
      *(_WORD *)(v77 + 22) = 1024;
      LODWORD(v184) = (_DWORD)v181;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v184, (char *)&v184 + 4, v77 + 24, v77 + 28);
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v178, "biomeDonation: Writing Biome event for handle: %s, publishReason: %{public}s, donationThresholdPassed: %{BOOL}d", (uint8_t *)v77, 0x1Cu);
      v84 = v179;
      swift_arrayDestroy(v179, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v77, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(v55, 2);
      sub_1000126B0(v48, type metadata accessor for SecureLocation);

      v82 = v12;
    }
    v87 = (uint64_t)v174;
    v88 = v173;
    v89 = v175;
    v90 = sub_1005509C4((uint64_t)a1, v53, v55);
    swift_bridgeObjectRelease();
    v91 = objc_msgSend(v88, "source");
    objc_msgSend(v91, "sendEvent:", v90);

    v92 = *a1;
    v93 = a1[1];
    sub_10005972C((uint64_t)a1, v87, type metadata accessor for SecureLocation);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56))(v87, 0, 1, v82);
    swift_beginAccess(v176 + 304, &v182, 33, 0);
    swift_bridgeObjectRetain(v93);
    sub_1000FFA8C(v87, v92, v93);
    swift_endAccess(&v182);

  }
}

void sub_10053848C()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *oslog;
  uint64_t v9;
  uint64_t v10;

  swift_retain();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  swift_release();
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7A18);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(12, -1);
    v4 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v3 = 138412290;
    v5 = SPSecureLocationsStewiePublishRequest;
    v9 = SPSecureLocationsStewiePublishRequest;
    v6 = SPSecureLocationsStewiePublishRequest;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v3 + 4, v3 + 12);
    *v4 = v5;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Posted %@ notification", v3, 0xCu);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v4, 1, v7);
    swift_slowDealloc(v4, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10053885C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_10055443C(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 280));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100538988()
{
  uint64_t v0;

  sub_10053885C();
  return swift_deallocClassInstance(v0, 352, 7);
}

uint64_t sub_1005389A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005389E4 + 4 * byte_100E42FDC[a1]))(0xD000000000000014, 0x8000000100EC3350);
}

uint64_t sub_1005389E4()
{
  uint64_t v0;

  return v0 + 7;
}

uint64_t sub_100538A1C()
{
  return 0x5F454D5F4F545541;
}

unint64_t sub_100538A40()
{
  return 0xD000000000000010;
}

uint64_t sub_100538A5C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100538A94 + 4 * byte_100E42FE2[a1]))(0x54646E6553706174, 0xE900000000000053);
}

uint64_t sub_100538A94()
{
  return 0x6449646D63;
}

uint64_t sub_100538AA8()
{
  return 6581603;
}

uint64_t sub_100538AB8()
{
  return 0x6143654D6F747561;
}

uint64_t sub_100538ADC()
{
  return 0x6449794D646E6966;
}

uint64_t sub_100538AF4()
{
  return 7562345;
}

uint64_t sub_100538B04()
{
  return 1701080941;
}

uint64_t sub_100538B14()
{
  return 0x6E65644968737570;
}

uint64_t sub_100538B38()
{
  return 0x6544656D6F747561;
}

uint64_t sub_100538B58(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100538B90 + 4 * byte_100E42FEB[a1]))(0x54646E6553706174, 0xE900000000000053);
}

uint64_t sub_100538B90()
{
  return 0x6449646D63;
}

uint64_t sub_100538BA4()
{
  return 6581603;
}

uint64_t sub_100538BB4()
{
  return 0x6143654D6F747561;
}

uint64_t sub_100538BD8()
{
  return 0x6449794D646E6966;
}

uint64_t sub_100538BF0()
{
  return 7562345;
}

uint64_t sub_100538C00()
{
  return 1701080941;
}

uint64_t sub_100538C10()
{
  return 0x6E65644968737570;
}

uint64_t sub_100538C34()
{
  return 0x6544656D6F747561;
}

void sub_100538C54(char *a1)
{
  sub_100511D44(*a1);
}

void sub_100538C60()
{
  char *v0;

  sub_10051FCFC(*v0);
}

void sub_100538C68(uint64_t a1)
{
  char *v1;

  sub_1005154F8(a1, *v1);
}

void sub_100538C70(uint64_t a1)
{
  char *v1;

  sub_100516654(a1, *v1);
}

unint64_t sub_100538C78@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100550C80(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100538CA4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1005389A8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100538CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100551524();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100538D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100551524();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100538D74(char *a1)
{
  sub_100511F0C(*a1);
}

Swift::Int sub_100538D80()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1005155CC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_100538DC4(uint64_t a1)
{
  char *v1;

  sub_1005155CC(a1, *v1);
}

Swift::Int sub_100538DCC()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1005155CC((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t sub_100538E0C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100550CC8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100538E38@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100538A5C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100538E60()
{
  unsigned __int8 *v0;

  return sub_100538B58(*v0);
}

unint64_t sub_100538E68@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100550CC8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100538E8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100551358();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100538EB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100551358();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100538EDC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE v26[15];
  char v27;
  _BYTE v28[8];
  _BYTE v29[8];
  _BYTE v30[8];
  _BYTE v31[8];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FEE48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100551358();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v26[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v26, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v26[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v26, v5);
    v26[0] = *((_BYTE *)v3 + 32);
    v27 = 2;
    v16 = sub_100551460();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v27, v5, &type metadata for SecureLocationsPushCommands, v16);
    v17 = v3[5];
    v18 = v3[6];
    v26[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, v26, v5);
    sub_100005CF0((uint64_t)(v3 + 7), (uint64_t)v31, &qword_1010F9678);
    sub_100005CF0((uint64_t)v31, (uint64_t)v26, &qword_1010F9678);
    v27 = 4;
    v19 = sub_10001A9A8(&qword_1011063B0);
    v20 = sub_100365C28((unint64_t *)&qword_1010F9680, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v19, v20);
    sub_100005CF0((uint64_t)(v3 + 8), (uint64_t)v30, &qword_1010F9678);
    sub_100005CF0((uint64_t)v30, (uint64_t)v26, &qword_1010F9678);
    v27 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v19, v20);
    v21 = v3[9];
    v22 = v3[10];
    v26[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, v26, v5);
    sub_100005CF0((uint64_t)(v3 + 11), (uint64_t)v29, &qword_1010FEE58);
    sub_100005CF0((uint64_t)v29, (uint64_t)v26, &qword_1010FEE58);
    v27 = 7;
    v23 = sub_10001A9A8(&qword_1010FEE38);
    v24 = sub_1005514A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v23, v24);
    sub_100005CF0((uint64_t)(v3 + 12), (uint64_t)v28, &qword_1010F9678);
    sub_100005CF0((uint64_t)v28, (uint64_t)v26, &qword_1010F9678);
    v27 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v19, v20);
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_100539224@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_100550D10(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100539280(_QWORD *a1)
{
  return sub_100538EDC(a1);
}

uint64_t sub_1005392C8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  swift_retain();
  swift_retain();
  sub_10054E594(a3, 0, a2, a2, a1);
  swift_release();
  return swift_release();
}

void sub_100539334(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;

  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v24 - v10;
  v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  v13 = swift_allocObject(&unk_10107D718, 33, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = v2;
  *(_BYTE *)(v13 + 32) = a2;
  v14 = v12;
  swift_retain();
  sub_10044036C(a1, 1, (uint64_t)sub_100554904, v13);
  v15 = swift_release();
  static DispatchTime.now()(v15);
  + infix(_:_:)(v9, 10.0);
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v9, v5);
  v17 = OS_dispatch_group.wait(timeout:)(v11) & 1;
  v16(v11, v5);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v17, 1) & 1) != 0)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7A18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "saveLocation - timed out waiting to save locations", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
      v23 = v14;
      v14 = v20;
    }
    else
    {
      v23 = v20;
    }

  }
}

void sub_100539544(uint64_t a1, NSObject *a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)(a1 + 16))
  {
    v8 = *(_QWORD *)(a3 + 40);
    v9 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v9);
    v17[0] = v8;
    v17[1] = SharingCircleWildAdvertisementKey.init(key:);
    v18 = 0;
    v19 = a1;
    v10 = static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.receivedUpdatedLocations", 70, 2, sub_100555BC4, &v16, &type metadata for () + 1);
    if ((a4 & 1) != 0)
    {
      __chkstk_darwin(v10);
      v18 = a3;
      v19 = a1;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.notifyLocationUpdate", 50, 2, sub_100554910, v17, &type metadata for () + 1);
    }
    dispatch_group_leave(a2);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "saveLocation - No locations were updated. Not posting notification", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    dispatch_group_leave(a2);
  }
}

uint64_t sub_100539728(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v4 + 288);
  v15 = (_QWORD *)swift_allocObject(&unk_10107D290, 56, 7);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = v4;
  v15[5] = a3;
  v15[6] = a4;
  aBlock[4] = sub_100554270;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107D2A8;
  v16 = _Block_copy(aBlock);
  sub_10001BBBC(a1, a2);
  swift_retain();
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v25 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v9, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v23);
  return swift_release();
}

void sub_100539948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD aBlock[6];
  uint64_t v49;

  v38 = a5;
  v33 = a3;
  v41 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v39 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v36 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v35 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.Encoding(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v15);
  v18 = String.init(data:encoding:)(a1, a2, v17);
  v34 = v10;
  if (v19)
  {
    v20 = v19;
    v32 = v18;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v31[2] = v8;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v31[1] = a4;
      v27 = v26;
      *(_QWORD *)&aBlock[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain(v20);
      *(_QWORD *)&v42[0] = sub_100016940(v32, v20, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v42, (char *)v42 + 8, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "jsonString %s", v25, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
    }
  }
  v28 = type metadata accessor for JSONDecoder(0);
  v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  JSONDecoder.init()(v29);
  v30 = sub_10055427C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload, a1, a2, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload, v30);
  aBlock[3] = v44;
  aBlock[4] = v45;
  aBlock[5] = v46;
  aBlock[0] = v42[0];
  v49 = v47;
  aBlock[1] = v42[1];
  aBlock[2] = v43;
  __asm { BR              X10 }
}

void sub_10053A790(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t *v94;
  __int128 aBlock;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  char v102[8];
  _QWORD *v103;

  v2 = v1;
  v4 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = a1[7];
  v94 = a1 + 7;
  v91 = v9;
  v92 = v6;
  v84 = a1[5];
  v85 = a1[6];
  v90 = a1[8];
  v89 = a1[9];
  v88 = a1[10];
  v87 = a1[11];
  v86 = a1[12];
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (void *)v2[36];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v80 = v7;
    v81 = v5;
    if (qword_1010E9CD8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9CD8, sub_1005201AC);
LABEL_3:
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1010FE9B0);
  sub_10055437C(a1);
  v17 = sub_10055437C(a1);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v83 = v8;
  v82 = v4;
  if (v20)
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = (_QWORD *)swift_slowAlloc(32, -1);
    v93 = v2;
    v23 = v22;
    v103 = v22;
    *(_DWORD *)v21 = 136315138;
    v24 = *((_OWORD *)a1 + 5);
    v99 = *((_OWORD *)a1 + 4);
    v100 = v24;
    v101 = a1[12];
    v25 = *((_OWORD *)a1 + 1);
    aBlock = *(_OWORD *)a1;
    v96 = v25;
    v26 = *((_OWORD *)a1 + 3);
    v97 = *((_OWORD *)a1 + 2);
    v98 = v26;
    sub_10055437C(a1);
    v27 = String.init<A>(describing:)(&aBlock, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    *(_QWORD *)&aBlock = sub_100016940(v27, v28, (uint64_t *)&v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    sub_1005542CC(a1);
    sub_1005542CC(a1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received startLocate command %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v29 = v23;
    v2 = v93;
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    sub_1005542CC(a1);
    sub_1005542CC(a1);
  }

  v30 = (_QWORD *)a1[8];
  if (v30 && v30[2])
  {
    v32 = v30[4];
    v31 = v30[5];
    sub_100005CF0((uint64_t)v94, (uint64_t)v102, &qword_1010F9678);
    sub_100005CF0((uint64_t)v102, (uint64_t)&v103, &qword_1010F9678);
    if (v103 && v103[2])
    {
      v79 = v32;
      v93 = v2;
      v33 = v2 + 23;
      v77 = v2[23];
      v34 = v103[5];
      v78 = v103[4];
      v35 = v31;
      v36 = v2[24];
      v37 = v2[25];
      v38 = v2[26];
      v39 = v2[27];
      v40 = v2[28];
      v41 = v33[6];
      v76 = v33[7];
      v75 = *((_OWORD *)v33 + 4);
      v74 = *((_OWORD *)v33 + 5);
      v42 = v33[12];
      v43 = v81;
      *v33 = v82;
      v33[1] = v43;
      v44 = v92;
      v33[2] = v80;
      v33[3] = v44;
      v45 = v84;
      v33[4] = v83;
      v33[5] = v45;
      v46 = v91;
      v33[6] = v85;
      v33[7] = v46;
      v47 = v89;
      v33[8] = v90;
      v33[9] = v47;
      v48 = v87;
      v33[10] = v88;
      v33[11] = v48;
      v33[12] = v86;
      sub_10055437C(a1);
      v94 = (uint64_t *)v35;
      swift_bridgeObjectRetain(v35);
      v92 = v34;
      swift_bridgeObjectRetain(v34);
      sub_10055443C(v77, v36, v37, v38, v39, v40, v41, v76, v75, *((uint64_t *)&v75 + 1), v74, *((uint64_t *)&v74 + 1), v42);
      v49 = a1[10];
      if (v49)
      {
        v50 = a1[9];
        v51 = a1[10];
      }
      else
      {
        v51 = 0xE900000000000065;
        v50 = 0x76697463616F7270;
      }
      v65 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v65);
      v66 = (uint64_t)v94;
      v67 = v79;
      *((_QWORD *)&v74 - 8) = v93;
      *((_QWORD *)&v74 - 7) = v67;
      v68 = v66;
      v69 = v78;
      v70 = v92;
      v71 = a1;
      v72 = v50;
      v73 = v51;
      swift_bridgeObjectRetain(v49);
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocationsVerifyAndStartLocate", 65, 2, sub_1005544C8, &v74 - 5, &type metadata for () + 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    v56 = qword_1011B7F60;
    v57 = *(NSObject **)(qword_1011B7F60 + 16);
    v58 = (_QWORD *)swift_allocObject(&unk_10107D380, 40, 7);
    v58[2] = v56;
    v58[3] = 0xD00000000000001BLL;
    v58[4] = 0x8000000100EDA2B0;
    v59 = swift_allocObject(&unk_10107D3A8, 32, 7);
    *(_QWORD *)(v59 + 16) = sub_100554420;
    *(_QWORD *)(v59 + 24) = v58;
    *(_QWORD *)&v97 = sub_10005CBA4;
    *((_QWORD *)&v97 + 1) = v59;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v96 = sub_10001D8B8;
    *((_QWORD *)&v96 + 1) = &unk_10107D3C0;
    v60 = _Block_copy(&aBlock);
    swift_retain_n(v56, 2);
    swift_retain();
    swift_release();
    dispatch_sync(v57, v60);
    _Block_release(v60);
    LOBYTE(v60) = swift_isEscapingClosureAtFileLocation(v59, "", 110, 308, 38, 1);
    swift_release();
    swift_release();
    swift_release();
    if ((v60 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      sub_10053BCB0((__int128 *)a1);
      if (qword_1010EA098 == -1)
      {
LABEL_19:
        v61 = sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
        v62 = Logger.logObject.getter(v61);
        v63 = static os_log_type_t.default.getter(v62);
        if (os_log_type_enabled(v62, v63))
        {
          v64 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "startLocate - no locationId or findMyId specified in push. Cannot start locate", v64, 2u);
          swift_slowDealloc(v64, -1, -1);
        }

        return;
      }
    }
    swift_once(&qword_1010EA098, sub_10098F7D8);
    goto LABEL_19;
  }
  sub_100550788();
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "startLocate - no locationIds received. Possibly me device change or SML was turned ON. Starting location monitor", v55, 2u);
    swift_slowDealloc(v55, -1, -1);
  }

  sub_10053BCB0((__int128 *)a1);
}

void sub_10053AF8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  _OWORD v29[6];
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + 288);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
  sub_10055437C((_QWORD *)a1);
  v10 = sub_10055437C((_QWORD *)a1);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    *(_DWORD *)v13 = 136315138;
    v15 = *(_OWORD *)(a1 + 80);
    v29[4] = *(_OWORD *)(a1 + 64);
    v29[5] = v15;
    v30 = *(_QWORD *)(a1 + 96);
    v31 = v14;
    v16 = *(_OWORD *)(a1 + 16);
    v29[0] = *(_OWORD *)a1;
    v29[1] = v16;
    v17 = *(_OWORD *)(a1 + 48);
    v29[2] = *(_OWORD *)(a1 + 32);
    v29[3] = v17;
    sub_10055437C((_QWORD *)a1);
    v18 = String.init<A>(describing:)(v29, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    *(_QWORD *)&v29[0] = sub_100016940(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, (char *)v29 + 8, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    sub_1005542CC((_QWORD *)a1);
    sub_1005542CC((_QWORD *)a1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received stopLocate %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1005542CC((_QWORD *)a1);
    sub_1005542CC((_QWORD *)a1);
  }

  sub_100005CF0(a1 + 56, (uint64_t)&v31, &qword_1010F9678);
  v20 = sub_100005CF0((uint64_t)&v31, (uint64_t)v29, &qword_1010F9678);
  if (*(_QWORD *)&v29[0] && *(_QWORD *)(*(_QWORD *)&v29[0] + 16))
  {
    v22 = *(_QWORD *)(*(_QWORD *)&v29[0] + 32);
    v21 = *(_QWORD *)(*(_QWORD *)&v29[0] + 40);
    v23 = *(_QWORD *)(a1 + 80);
    if (v23)
    {
      v24 = *(_QWORD *)(a1 + 72);
      v25 = *(_QWORD *)(a1 + 80);
    }
    else
    {
      v25 = 0xE900000000000065;
      v24 = 0x76697463616F7270;
    }
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)&v29[0] + 40));
    swift_bridgeObjectRetain(v23);
    sub_10054F6F0(v22, v21, v24, v25, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = Logger.logObject.getter(v20);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No findMyId specified for StopLocate", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
}

uint64_t sub_10053B2F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint8_t **)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 288);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received distributeKeys command", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  sub_100005CF0(a1 + 56, (uint64_t)&v41, &qword_1010F9678);
  result = sub_100005CF0((uint64_t)&v41, (uint64_t)&v42, &qword_1010F9678);
  v16 = (uint64_t)v42;
  if (v42 && v42[2])
  {
    v17 = v42[4];
    v18 = v42[5];
    v19 = *(_QWORD *)(a1 + 88);
    if (v19)
      v20 = *(_QWORD **)(a1 + 88);
    else
      v20 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain_n(v20, 2);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v40 = v36;
      v37 = v18;
      *(_DWORD *)v24 = 136315138;
      v35 = v24 + 4;
      swift_bridgeObjectRetain(v20);
      v25 = sub_10001A9A8(&qword_1011063B0);
      v26 = Dictionary.description.getter(v20, &type metadata for String, v25, &protocol witness table for String);
      v38 = v17;
      v28 = v27;
      swift_bridgeObjectRelease();
      v39 = sub_100016940(v26, v28, &v40);
      v18 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v35, v24 + 12);
      swift_bridgeObjectRelease_n(v20, 2);
      v17 = v38;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "shareKey pushIdentifiers %s", v24, 0xCu);
      v29 = v36;
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
    }
    v30 = swift_allocObject(&unk_10107D678, 152, 7);
    v31 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v30 + 88) = *(_OWORD *)(a1 + 48);
    v32 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v30 + 104) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v30 + 120) = v32;
    v33 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v30 + 40) = *(_OWORD *)a1;
    *(_OWORD *)(v30 + 56) = v33;
    *(_QWORD *)(v30 + 16) = v2;
    *(_QWORD *)(v30 + 24) = v17;
    *(_QWORD *)(v30 + 32) = v18;
    v34 = *(_QWORD *)(a1 + 96);
    *(_OWORD *)(v30 + 72) = v31;
    *(_QWORD *)(v30 + 136) = v34;
    *(_QWORD *)(v30 + 144) = v16;
    sub_100004F74(&v41);
    swift_retain();
    sub_10055437C((_QWORD *)a1);
    sub_1008B601C(v16, (uint64_t)v20, 0, (uint64_t)sub_100554838, v30);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10053B6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 288);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_1010EA098 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA098, sub_10098F7D8);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7A18);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handling FetchLabelledLocations command", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_100446454();
  sub_100546FC8(0);
  type metadata accessor for Transaction(0);
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocationHandleLabelFetch", 59, 2, sub_10055484C, v1, &type metadata for () + 1);
}

void sub_10053B888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  Class isa;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 288);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1010EA0A8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA0A8, sub_10098F82C);
LABEL_3:
  v7 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain();
  v8 = objc_msgSend(v7, "standardUserDefaults");
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", isa, v10);
  swift_release();

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received autoMeIsActive command. Set autoMeActive to true", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

}

void sub_10053BA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  Class isa;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 288);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_1010EA0A8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA0A8, sub_10098F82C);
LABEL_3:
  v7 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain();
  v8 = objc_msgSend(v7, "standardUserDefaults");
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setValue:forKey:", isa, v10);
  swift_release();

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received autoMeIsInactive command. Set autoMeActive to false", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

}

uint64_t sub_10053BCB0(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  __int128 aBlock;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v38 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  sub_10055437C(a1);
  v11 = sub_10055437C(a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v35 = v2;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v36 = v8;
    v16 = v15;
    v47[0] = v15;
    *(_DWORD *)v14 = 136315138;
    v37 = v7;
    v17 = a1[5];
    v44 = a1[4];
    v45 = v17;
    v46 = *((_QWORD *)a1 + 12);
    v18 = a1[1];
    aBlock = *a1;
    v41 = v18;
    v19 = a1[3];
    v42 = a1[2];
    v43 = v19;
    sub_10055437C(a1);
    v20 = String.init<A>(describing:)(&aBlock, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    *(_QWORD *)&aBlock = sub_100016940(v20, v21, v47);
    v7 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v14 + 4, v14 + 12);
    v2 = v35;
    swift_bridgeObjectRelease();
    sub_1005542CC(a1);
    sub_1005542CC(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "PushAck: Sending ACK for %s", v14, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v22 = v16;
    v8 = v36;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_1005542CC(a1);
    sub_1005542CC(a1);
  }

  v23 = swift_allocObject(&unk_10107D560, 128, 7);
  v24 = a1[2];
  *(_OWORD *)(v23 + 72) = a1[3];
  v25 = a1[5];
  *(_OWORD *)(v23 + 88) = a1[4];
  *(_OWORD *)(v23 + 104) = v25;
  v26 = a1[1];
  *(_OWORD *)(v23 + 24) = *a1;
  *(_OWORD *)(v23 + 40) = v26;
  *(_QWORD *)(v23 + 16) = v2;
  *(_QWORD *)(v23 + 120) = *((_QWORD *)a1 + 12);
  *(_OWORD *)(v23 + 56) = v24;
  *(_QWORD *)&v42 = sub_100554714;
  *((_QWORD *)&v42 + 1) = v23;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v41 = sub_100016FB8;
  *((_QWORD *)&v41 + 1) = &unk_10107D578;
  v27 = _Block_copy(&aBlock);
  sub_10055437C(a1);
  v28 = swift_retain();
  v29 = v38;
  static DispatchQoS.unspecified.getter(v28);
  v47[0] = (uint64_t)_swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v47, v31, v32, v4, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v29, v7, v27);
  _Block_release(v27);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v8);
  return swift_release();
}

uint64_t sub_10053C09C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;

  v15 = *(_QWORD *)(a2 + 24);
  v16 = swift_allocObject(&unk_10107D3F8, 168, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a2;
  v17 = *(_OWORD *)(a7 + 80);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(a7 + 64);
  *(_OWORD *)(v16 + 112) = v17;
  v18 = *(_QWORD *)(a7 + 96);
  v19 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)a7;
  *(_OWORD *)(v16 + 48) = v19;
  v20 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(a7 + 32);
  *(_OWORD *)(v16 + 80) = v20;
  *(_QWORD *)(v16 + 128) = v18;
  *(_QWORD *)(v16 + 136) = a5;
  *(_QWORD *)(v16 + 144) = a6;
  *(_QWORD *)(v16 + 152) = a8;
  *(_QWORD *)(v16 + 160) = a9;
  v21 = (_QWORD *)swift_allocObject(&unk_10107D420, 72, 7);
  v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a6;
  v21[6] = v15;
  v21[7] = sub_100554574;
  v21[8] = v16;
  swift_bridgeObjectRetain_n(a6, 2);
  swift_retain();
  swift_retain();
  sub_10055437C((_QWORD *)a7);
  swift_bridgeObjectRetain(a9);
  swift_bridgeObjectRetain(a4);
  swift_retain();
  swift_retain();
  sub_1008B0DEC((uint64_t)sub_1005545C4, (uint64_t)v21);
  swift_release();
  return swift_release();
}

void sub_10053C1E0(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t aBlock[6];

  if (!a1)
  {
    sub_1005479A0(a5, a6, a7, a8, 0);
LABEL_11:
    sub_10053BCB0(a4);
    Transaction.capture()();
    return;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7A18);
  swift_errorRetain(a1);
  v11 = swift_errorRetain(a1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = a1;
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    swift_errorRetain(a1);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v17 = String.init<A>(describing:)(&v24, v16);
    v24 = sub_100016940(v17, v18, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, aBlock, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "startLocate - unable to verify locationId. Cannot start monitor %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  v19 = qword_1011B7F60;
  v20 = *(NSObject **)(qword_1011B7F60 + 16);
  v21 = (_QWORD *)swift_allocObject(&unk_10107D448, 40, 7);
  v21[2] = v19;
  v21[3] = 0xD00000000000001ELL;
  v21[4] = 0x8000000100EDA320;
  v22 = swift_allocObject(&unk_10107D470, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_100555DCC;
  *(_QWORD *)(v22 + 24) = v21;
  aBlock[4] = (uint64_t)sub_10005CBA4;
  aBlock[5] = v22;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10001D8B8;
  aBlock[3] = (uint64_t)&unk_10107D488;
  v23 = _Block_copy(aBlock);
  swift_retain_n(v19, 2);
  swift_retain();
  swift_release();
  dispatch_sync(v20, v23);
  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v22, "", 110, 308, 38, 1);
  swift_release();
  swift_release();
  swift_release();
  if ((v23 & 1) == 0)
    goto LABEL_11;
  __break(1u);
}

uint64_t sub_10053C538(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;

  v7 = (__int128 *)a5;
  if (!a1)
  {
    v11 = *(_QWORD *)(a5 + 80);
    if (v11)
    {
      v12 = *(_QWORD *)(a5 + 72);
      v13 = *(_QWORD *)(a5 + 80);
    }
    else
    {
      v13 = 0xE900000000000065;
      v12 = 0x76697463616F7270;
    }
    swift_bridgeObjectRetain(v11);
    sub_1005479A0(a3, a4, v12, v13, 0);
    swift_bridgeObjectRelease();
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    sub_100C4C864();
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain(a6);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a6);
  v15 = swift_errorRetain(a1);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(32, -1);
    v19 = swift_slowAlloc(64, -1);
    *(_DWORD *)v18 = 141558531;
    v29 = 1752392040;
    v30 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2081;
    swift_bridgeObjectRetain(a6);
    v28 = v7;
    v21 = Array.description.getter(v20, &type metadata for String);
    v23 = v22;
    swift_bridgeObjectRelease();
    v29 = sub_100016940(v21, v23, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease_n(a6, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 22) = 2080;
    v29 = a1;
    swift_errorRetain(a1);
    v24 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v25 = String.init<A>(describing:)(&v29, v24);
    v29 = sub_100016940(v25, v26, &v30);
    v7 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "completed shareKey to %{private,mask.hash}s Error %s", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a6, 2);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return sub_10053BCB0(v7);
}

uint64_t sub_10053C85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject(&unk_10107D6A0, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  swift_retain();
  swift_retain();
  sub_10053CB1C((uint64_t)sub_100554870, v4);
  return swift_release();
}

void sub_10053C8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t v19[2];

  if (a2)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a2);
    v6 = swift_errorRetain(a2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v18 = a2;
      v19[0] = v10;
      *(_DWORD *)v9 = 136315138;
      swift_errorRetain(a2);
      v11 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
      v12 = String.init<A>(describing:)(&v18, v11);
      v18 = sub_100016940(v12, v13, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "LabelledLocations: Error fetching labels after receiving a fetch labels push %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

  }
  else
  {
    v15 = sub_100443164();
    v16 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v16);
    v17[2] = a4;
    v17[3] = v15;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocationsResolveLabels", 58, 2, sub_1005548E4, v17, &type metadata for () + 1);
    swift_bridgeObjectRelease();
  }
  Transaction.capture()();
}

uint64_t sub_10053CB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  uint64_t MyAppURLSessionFactory;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;

  v76 = a1;
  v77 = a2;
  v2 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v2);
  v74 = (char *)&v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v4);
  v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SecureLocationsLabelledLocationsEndpoint(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v69 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v69 - v14;
  v16 = enum case for FMNAccountType.fmfApp(_:);
  v17 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 104))(v15, v16, v17);
  sub_100BE8E14((uint64_t)&v15[*(int *)(v7 + 20)]);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7A18);
  v20 = sub_10005972C((uint64_t)v15, (uint64_t)v13, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v78 = v15;
  if (v23)
  {
    v73 = v6;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v80 = v25;
    *(_DWORD *)v24 = 136315138;
    sub_10005972C((uint64_t)v13, (uint64_t)v10, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
    v26 = String.init<A>(describing:)(v10, v7);
    v79 = sub_100016940(v26, v27, &v80);
    v6 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v13, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "FetchLabelledLocations: Endpoint %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v28 = v24;
    v15 = v78;
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v13, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  }

  MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0);
  swift_allocObject(MyAppURLSessionFactory, *(unsigned int *)(MyAppURLSessionFactory + 48), *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
  v30 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v6, 1, 1, v30);
  v31 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v6);
  v32 = type metadata accessor for ServerInteractionController(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  sub_10005972C((uint64_t)v15, (uint64_t)v10, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  swift_retain();
  v34 = (_QWORD *)sub_10041D8B8((uint64_t)v10, v31, v33);
  v35 = sub_100BE9C08();
  if (v35)
  {
    v38 = (uint64_t)v35;
    v39 = v36;
    v40 = v37;
    sub_100555020((uint64_t)v35, v36, v37);
    swift_bridgeObjectRetain(v38);
    v41 = sub_10001BBBC(v39, v40);
    v71 = v19;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter(v42);
    v44 = os_log_type_enabled(v42, v43);
    v72 = v34;
    v73 = (char *)v31;
    if (v44)
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = swift_slowAlloc(32, -1);
      v80 = v46;
      *(_DWORD *)v45 = 136315138;
      v70 = v45 + 4;
      swift_bridgeObjectRetain(v38);
      v48 = Dictionary.description.getter(v47, &type metadata for String, &type metadata for String, &protocol witness table for String);
      v50 = v49;
      swift_bridgeObjectRelease();
      v79 = sub_100016940(v48, v50, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v70, v45 + 12);
      swift_bridgeObjectRelease();
      sub_100153D94(v38, v39, v40);
      sub_100153D94(v38, v39, v40);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "FetchLabelledLocations request headers %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      sub_100153D94(v38, v39, v40);
      sub_100153D94(v38, v39, v40);
    }

    swift_bridgeObjectRetain(v38);
    sub_10001BBBC(v39, v40);
    swift_bridgeObjectRetain(v38);
    v54 = sub_10001BBBC(v39, v40);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.debug.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v80 = v58;
      *(_DWORD *)v57 = 136315138;
      v59 = v74;
      static String.Encoding.utf8.getter(v58);
      v60 = String.init(data:encoding:)(v39, v40, v59);
      if (v61)
      {
        v62 = v61;
      }
      else
      {
        v60 = 7104878;
        v62 = 0xE300000000000000;
      }
      v79 = sub_100016940(v60, v62, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      sub_100153D94(v38, v39, v40);
      sub_100153D94(v38, v39, v40);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "FetchLabelledLocations request body %s", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      sub_100153D94(v38, v39, v40);
      sub_100153D94(v38, v39, v40);
    }

    v63 = v77;
    v15 = v78;
    v65 = v75;
    v64 = v76;
    swift_bridgeObjectRetain(v38);
    sub_10001BBBC(v39, v40);
    sub_10034D740(v38, v39, v40, 0, v72);
    sub_100153D94(v38, v39, v40);
    v66 = (_QWORD *)swift_allocObject(&unk_10107D6C8, 40, 7);
    v66[2] = v65;
    v66[3] = v64;
    v66[4] = v63;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_10055488C, v66);
    swift_release();
    swift_release();
    v67 = swift_allocObject(&unk_10107D6F0, 32, 7);
    *(_QWORD *)(v67 + 16) = v64;
    *(_QWORD *)(v67 + 24) = v63;
    swift_retain();
    Future.addFailure(block:)(sub_100554898, v67);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_100153D94(v38, v39, v40);
  }
  else
  {
    v51 = Logger.logObject.getter(0);
    v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "#FetchLabelledLocations - failed to create request", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    swift_release();
  }
  swift_release();
  return sub_1000126B0((uint64_t)v15, type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
}

uint64_t sub_10053D37C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t MyAppURLSessionFactory;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  const char *v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  unsigned int v100;
  uint64_t v101;
  char v102;
  char v103;
  _QWORD v104[7];
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v113 = a2;
  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v107 = (char *)v104 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for Date(0);
  v112 = *(_QWORD *)(v110 - 8);
  v5 = __chkstk_darwin(v110);
  v109 = (uint64_t)v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v108 = (uint64_t)v104 - v7;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v8);
  v10 = (char *)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SecureLocationsPushAckEndpoint(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v104 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)v104 - v18;
  v20 = enum case for FMNAccountType.searchParty(_:);
  v21 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v19, v20, v21);
  sub_1008EF4B8((uint64_t)&v19[*(int *)(v11 + 20)]);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
  v24 = sub_10005972C((uint64_t)v19, (uint64_t)v17, type metadata accessor for SecureLocationsPushAckEndpoint);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v106 = a1;
    v27 = swift_slowAlloc(12, -1);
    v105 = v10;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc(32, -1);
    v111 = v19;
    v30 = v29;
    v116 = v29;
    *(_DWORD *)v28 = 136315138;
    sub_10005972C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocationsPushAckEndpoint);
    v31 = String.init<A>(describing:)(v14, v11);
    v114 = sub_100016940(v31, v32, &v116);
    a1 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocationsPushAckEndpoint);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "PushAck endpoint %s", v28, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    v33 = v30;
    v19 = v111;
    swift_slowDealloc(v33, -1, -1);
    v34 = v28;
    v10 = v105;
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocationsPushAckEndpoint);
  }

  MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0);
  swift_allocObject(MyAppURLSessionFactory, *(unsigned int *)(MyAppURLSessionFactory + 48), *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
  v36 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v10, 1, 1, v36);
  v37 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v10);
  v38 = type metadata accessor for ServerInteractionController(0);
  v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  sub_10005972C((uint64_t)v19, (uint64_t)v14, type metadata accessor for SecureLocationsPushAckEndpoint);
  swift_retain();
  v40 = sub_10041D90C((uint64_t)v14, v37, v39);
  v41 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v41
    && (v42 = v41,
        v43 = objc_msgSend(v41, "uniqueDeviceIdentifier"),
        v42,
        v43))
  {
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

    v47 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_100553E20, a1, v47);
    if (v117)
    {
      v104[6] = 0;
      v104[3] = v117;
      v104[2] = v116;
      v48 = sub_10001A9A8(&qword_1011063B0);
      unsafeFromAsyncTask<A>(_:)(&v116, &unk_1010FEE98, 0, v48);
      v49 = v116;
      swift_bridgeObjectRetain(v116);
      v50 = v113;
      sub_10055437C(v113);
      sub_10055437C(v50);
      swift_bridgeObjectRetain(v49);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      v54 = os_log_type_enabled(v52, v53);
      v106 = v49;
      v105 = (char *)v37;
      v104[1] = v40;
      v104[5] = v46;
      v104[4] = v44;
      if (v54)
      {
        v55 = swift_slowAlloc(42, -1);
        v56 = swift_slowAlloc(64, -1);
        v116 = v56;
        *(_DWORD *)v55 = 141558787;
        v114 = 1752392040;
        v104[0] = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 4, v55 + 12);
        *(_WORD *)(v55 + 12) = 2081;
        v57 = v113[12];
        if (v57)
          v58 = (_QWORD *)v113[12];
        else
          v58 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v57);
        v59 = Array.description.getter(v58, &type metadata for String);
        v61 = v60;
        swift_bridgeObjectRelease();
        v114 = sub_100016940(v59, v61, &v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 14, v55 + 22);
        swift_bridgeObjectRelease();
        sub_1005542CC(v113);
        sub_1005542CC(v113);
        *(_WORD *)(v55 + 22) = 2160;
        v114 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 24, v55 + 32);
        *(_WORD *)(v55 + 32) = 2081;
        swift_bridgeObjectRetain(v106);
        v62 = Array.description.getter(v106, &type metadata for String);
        v64 = v63;
        swift_bridgeObjectRelease();
        v114 = sub_100016940(v62, v64, &v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v55 + 34, v55 + 42);
        swift_bridgeObjectRelease_n(v106, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Watch Monitoring: Watches to check connection got through Server are %{private,mask.hash}s. Watches connected now sending to pushAck are %{private,mask.hash}s", (uint8_t *)v55, 0x2Au);
        swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
        v65 = v56;
        v50 = v113;
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v55, -1, -1);

      }
      else
      {
        sub_1005542CC(v50);
        sub_1005542CC(v50);

        v66 = swift_bridgeObjectRelease_n(v49, 2);
      }
      v73 = v110;
      if (qword_1010EA428 != -1)
        v66 = swift_once(&qword_1010EA428, sub_100C48554);
      v74 = qword_1011B7F60;
      __chkstk_darwin(v66);
      v104[-2] = v74;
      LOBYTE(v104[-1]) = 1;
      swift_retain();
      v75 = sub_10001A9A8(&qword_1010FEEA0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100554720, &v104[-4], v75);
      swift_release();
      v76 = *v50;
      v77 = v50[1];
      v78 = HIBYTE(v77) & 0xF;
      v79 = v76 & 0xFFFFFFFFFFFFLL;
      if ((v77 & 0x2000000000000000) != 0)
        v80 = HIBYTE(v77) & 0xF;
      else
        v80 = v76 & 0xFFFFFFFFFFFFLL;
      if (!v80)
        goto LABEL_57;
      if ((v77 & 0x1000000000000000) != 0)
      {
        swift_bridgeObjectRetain(v77);
        sub_100C717F4(v76, v77, 10);
        v103 = v102;
        swift_bridgeObjectRelease();
        if ((v103 & 1) == 0)
          goto LABEL_58;
      }
      else
      {
        if ((v77 & 0x2000000000000000) != 0)
        {
          v116 = v76;
          v117 = v77 & 0xFFFFFFFFFFFFFFLL;
          if (v76 == 43)
          {
            if (v78)
            {
              if (v78 != 1 && (BYTE1(v76) - 48) <= 9u)
              {
                v88 = (BYTE1(v76) - 48);
                v89 = v78 - 2;
                if (v78 == 2)
                  goto LABEL_58;
                v90 = (unsigned __int8 *)&v116 + 2;
                while (1)
                {
                  v91 = *v90 - 48;
                  if (v91 > 9)
                    break;
                  v92 = 10 * v88;
                  if ((unsigned __int128)(v88 * (__int128)10) >> 64 != (10 * v88) >> 63)
                    break;
                  v88 = v92 + v91;
                  if (__OFADD__(v92, v91))
                    break;
                  ++v90;
                  if (!--v89)
                    goto LABEL_58;
                }
              }
              goto LABEL_57;
            }
          }
          else
          {
            if (v76 != 45)
            {
              if (v78 && (v76 - 48) <= 9u)
              {
                v97 = (v76 - 48);
                v98 = v78 - 1;
                if (v78 == 1)
                  goto LABEL_58;
                v99 = (unsigned __int8 *)&v116 + 1;
                while (1)
                {
                  v100 = *v99 - 48;
                  if (v100 > 9)
                    break;
                  v101 = 10 * v97;
                  if ((unsigned __int128)(v97 * (__int128)10) >> 64 != (10 * v97) >> 63)
                    break;
                  v97 = v101 + v100;
                  if (__OFADD__(v101, v100))
                    break;
                  ++v99;
                  if (!--v98)
                    goto LABEL_58;
                }
              }
              goto LABEL_57;
            }
            if (v78)
            {
              if (v78 != 1 && (BYTE1(v76) - 48) <= 9u)
              {
                v83 = -(uint64_t)(BYTE1(v76) - 48);
                v84 = v78 - 2;
                if (v78 == 2)
                  goto LABEL_58;
                v85 = (unsigned __int8 *)&v116 + 2;
                while (1)
                {
                  v86 = *v85 - 48;
                  if (v86 > 9)
                    break;
                  v87 = 10 * v83;
                  if ((unsigned __int128)(v83 * (__int128)10) >> 64 != (10 * v83) >> 63)
                    break;
                  v83 = v87 - v86;
                  if (__OFSUB__(v87, v86))
                    break;
                  ++v85;
                  if (!--v84)
                    goto LABEL_58;
                }
              }
              goto LABEL_57;
            }
            __break(1u);
          }
          __break(1u);
          JUMPOUT(0x10053E5D0);
        }
        if ((v76 & 0x1000000000000000) != 0)
          v81 = (unsigned __int8 *)((v77 & 0xFFFFFFFFFFFFFFFLL) + 32);
        else
          v81 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v76, v77);
        sub_100C715FC(v81, v79, 10);
        if ((v82 & 1) == 0)
        {
LABEL_58:
          v95 = v109;
          v96 = static Date.trustedNow.getter(v109);
          Date.epoch.getter(v96);
          (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v95, v73);
          __asm { BR              X12 }
        }
      }
LABEL_57:
      v93 = v108;
      v94 = static Date.trustedNow.getter(v108);
      Date.epoch.getter(v94);
      (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v93, v73);
      goto LABEL_58;
    }
    v72 = swift_bridgeObjectRelease();
    v67 = Logger.logObject.getter(v72);
    v68 = static os_log_type_t.error.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      v70 = "No APS token. Not proceeding with PushAck";
      goto LABEL_16;
    }
  }
  else
  {
    v67 = Logger.logObject.getter(v41);
    v68 = static os_log_type_t.error.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      v70 = "Unable to get device identifier for server PushAck";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v67, v68, v70, v69, 2u);
      swift_slowDealloc(v69, -1, -1);
    }
  }

  swift_release();
  swift_release();
  return sub_1000126B0((uint64_t)v19, type metadata accessor for SecureLocationsPushAckEndpoint);
}

uint64_t sub_10053E5E8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = a1;
  return swift_task_switch(sub_10053E600, 0, 0);
}

uint64_t sub_10053E600()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = type metadata accessor for PairedAutoMeCapableWatches();
  v2 = swift_allocObject(v1, 120, 15);
  v0[8] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (objc_class *)type metadata accessor for BluetoothConnectionObserver();
  v4 = objc_msgSend(objc_allocWithZone(v3), "init");
  v0[5] = v3;
  v0[6] = &off_10107A580;
  v0[2] = v4;
  v5 = type metadata accessor for PairedBluetoothState(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v7 = sub_10009F5D0((uint64_t)(v0 + 2), (uint64_t)v3);
  v8 = *((_QWORD *)v3 - 1);
  v9 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, objc_class *))(v8 + 16))(v9, v7, v3);
  v10 = *v9;
  v11 = v4;
  v12 = sub_100545E84(v10, v6);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);

  swift_task_dealloc(v9);
  *(_QWORD *)(v2 + 112) = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_1010EFFCC);
  v0[9] = v13;
  *v13 = v0;
  v13[1] = sub_10053E734;
  return sub_100146D2C();
}

uint64_t sub_10053E734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(sub_10053E798, 0, 0);
}

uint64_t sub_10053E798()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 56) = *(_QWORD *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10053E7AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7A18);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    v11 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v10);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v13 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "PushAck received status %ld", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

}

void sub_10053E94C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  NSObject *oslog;
  uint64_t v11;
  uint64_t v12;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
  swift_errorRetain(a1);
  v3 = swift_errorRetain(a1);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v11 = a1;
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_errorRetain(a1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(&v11, v7);
    v11 = sub_100016940(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "PushAck request failed %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
}

uint64_t sub_10053EB28(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint8_t *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  void (*v43)(_QWORD, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v44 = a2;
  v45 = a4;
  v43 = a3;
  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v42[0] = v13;
    v18 = v17;
    v42[1] = a1;
    *(_DWORD *)v17 = 134217984;
    v19 = v17 + 12;
    v20 = v17 + 4;
    v21 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v17);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v46 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v20, v19);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "FetchLabelledLocations - response code %ld", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  v23 = FMNServerInteractionController.FMNResponseFields.data.getter(v22);
  v25 = v24;
  static String.Encoding.utf8.getter(v23);
  v26 = String.init(data:encoding:)(v23, v25, v7);
  v28 = v27;
  sub_10001BC14(v23, v25);
  swift_bridgeObjectRetain(v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v47 = v28;
    v48 = v33;
    *(_DWORD *)v32 = 136315138;
    v46 = v26;
    swift_bridgeObjectRetain(v28);
    v34 = sub_10001A9A8(&qword_1010F6350);
    v35 = String.init<A>(describing:)(&v46, v34);
    v46 = sub_100016940(v35, v36, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "FetchLabelledLocations %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    v37 = swift_bridgeObjectRelease_n(v28, 2);
  }
  v38 = FMNServerInteractionController.FMNResponseFields.data.getter(v37);
  v40 = v39;
  sub_10053EEB4(v38, v39, v43);
  return sub_10001BC14(v38, v40);
}

uint64_t sub_10053EEB4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD);
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = v3;
  v8 = type metadata accessor for JSONDecoder(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  JSONDecoder.init()(v9);
  v10 = sub_1005548A0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for SecureLocationLoadLabelledLocationsResponse, a1, a2, &type metadata for SecureLocationLoadLabelledLocationsResponse, v10);
  v11 = v33;
  if (v33)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(v33, 3);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(32, -1);
      v33 = v30;
      *(_DWORD *)v16 = 134218242;
      v31 = *(_QWORD *)(v11 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain(v11);
      v18 = a3;
      v19 = Array.description.getter(v17, &type metadata for SecureLocationLabel);
      v21 = v20;
      swift_bridgeObjectRelease();
      v22 = v19;
      a3 = v18;
      v31 = sub_100016940(v22, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "FetchLabelledLocations - fetched labels %ld %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v33, 3);
    }
    v28 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain(v11);
    swift_retain();
    sub_100448CA8(v11, v28, v4, v11);
    swift_release();
    swift_bridgeObjectRelease();
    a3(v11, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "FetchLabelledLocations Error decoding labels", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    a3(_swiftEmptyArrayStorage, 0);
  }
  return swift_release();
}

uint64_t sub_10053F418(uint64_t a1, uint64_t (*a2)(_QWORD *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = a1;
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_errorRetain(a1);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(&v14, v10);
    v14 = sub_100016940(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "FetchLabelledLocations - error fetching labels %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return a2(_swiftEmptyArrayStorage, a1);
}

void sub_10053F5F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10054715C(a2, a3);
}

uint64_t sub_10053F604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  swift_retain();
  sub_100551B44(a3, 0, a2, a1, a2);
  swift_release();
  return swift_release();
}

uint64_t sub_10053F66C(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, _QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  double v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  __n128 v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t, _QWORD);
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  char *v129;
  __n128 v130;
  int v131;
  id v132;
  char *v133;
  id v134;
  int v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  double *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _OWORD v150[13];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;

  v113 = a4;
  v114 = a3;
  v135 = a2;
  v115 = a1;
  v5 = type metadata accessor for SecureLocation(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v8 = __chkstk_darwin(v7);
  v117 = (uint64_t *)((char *)&v111 - v9);
  v10 = __chkstk_darwin(v8);
  v137 = (unint64_t *)((char *)v111.n128_u64 - v11);
  v12 = __chkstk_darwin(v10);
  v133 = (char *)&v111 - v13;
  v14 = __chkstk_darwin(v12);
  v15 = __chkstk_darwin(v14);
  v119 = (char *)&v111 - v16;
  v17 = __chkstk_darwin(v15);
  v21 = (double *)((char *)v111.n128_f64 - v20);
  v124 = v4;
  if (*(_QWORD *)(*(_QWORD *)(v4 + 104) + 16))
  {
    v143 = v19;
    v118 = v18;
    v116 = v17;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v22 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v22, &type metadata for SecureLocationsConfig);
    swift_release();
    v161 = v150[10];
    v162 = v150[11];
    v163 = v150[12];
    v157 = v150[6];
    v158 = v150[7];
    v159 = v150[8];
    v160 = v150[9];
    v153 = v150[2];
    v154 = v150[3];
    v155 = v150[4];
    v156 = v150[5];
    v151 = v150[0];
    v152 = v150[1];
    sub_1003D09E0(&v151);
    v123 = *(_QWORD *)(v115 + 16);
    if (v123)
    {
      v23 = *(double *)&v152;
      v122 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v121 = v115 + v122;
      v24 = *(_QWORD *)(v6 + 72);
      v112 = &v147;
      v25 = swift_bridgeObjectRetain(v115);
      v26 = 0;
      v27 = _swiftEmptyArrayStorage;
      v25.n128_u64[0] = 136315906;
      v130 = v25;
      v129 = (char *)&type metadata for Any + 8;
      v25.n128_u64[0] = 136315650;
      v128 = v25;
      v25.n128_u64[0] = 136315394;
      v111 = v25;
      v28 = v118;
      v29 = (uint64_t)v119;
      v139 = v21;
      v120 = v24;
      while (1)
      {
        v127 = v26;
        sub_10005972C(v121 + v24 * v26, (uint64_t)v21, type metadata accessor for SecureLocation);
        sub_10005972C((uint64_t)v21, v29, type metadata accessor for SecureLocation);
        v30 = *(_QWORD *)(v124 + 104);
        if (!*(_QWORD *)(v30 + 16))
          goto LABEL_50;
        v141 = *(_QWORD *)(v30 + 16);
        v125 = v27;
        swift_bridgeObjectRetain(v30);
        v126 = v31;
        v32 = (unint64_t *)(v31 + 56);
        while (1)
        {
          v34 = *(v32 - 2);
          v33 = *(v32 - 1);
          v35 = *v32;
          v36 = *((double *)v32 + 3);
          v37 = *((double *)v32 + 4);
          v38 = v32[5];
          v39 = v32[7];
          v142 = v32[6];
          v40 = v32[2];
          v41 = qword_1010EA098;
          swift_bridgeObjectRetain(v34);
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v40);
          swift_bridgeObjectRetain(v39);
          if (v41 != -1)
            swift_once(&qword_1010EA098, sub_10098F7D8);
          v42 = type metadata accessor for Logger(0);
          v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B7A18);
          v44 = (uint64_t)v21;
          v45 = v143;
          sub_10005972C(v44, (uint64_t)v143, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v34, 4);
          swift_bridgeObjectRetain_n(v35, 4);
          swift_bridgeObjectRetain_n(v40, 4);
          swift_bridgeObjectRetain_n(v39, 4);
          v140 = v43;
          v47 = Logger.logObject.getter(v46);
          v48 = static os_log_type_t.info.getter(v47);
          LODWORD(v144) = v48;
          v49 = os_log_type_enabled(v47, v48);
          v145 = v34;
          v136 = v33;
          if (v49)
          {
            v50 = swift_slowAlloc(42, -1);
            v138 = swift_slowAlloc(96, -1);
            v146 = v138;
            *(_DWORD *)v50 = v130.n128_u32[0];
            swift_bridgeObjectRetain(v35);
            *(_QWORD *)(v50 + 4) = sub_100016940(v33, v35, &v146);
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 12) = 2080;
            if (v39)
              v51 = v142;
            else
              v51 = 1818848800;
            if (v39)
              v52 = v39;
            else
              v52 = 0xE400000000000000;
            swift_bridgeObjectRetain(v39);
            *(_QWORD *)(v50 + 14) = sub_100016940(v51, v52, &v146);
            swift_bridgeObjectRelease_n(v39, 2);
            swift_bridgeObjectRelease_n(v40, 2);
            swift_bridgeObjectRelease_n(v35, 2);
            swift_bridgeObjectRelease_n(v34, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v50 + 22) = 2080;
            v53 = *v143;
            v54 = v143[1];
            swift_bridgeObjectRetain(v54);
            *(_QWORD *)(v50 + 24) = sub_100016940(v53, v54, &v146);
            swift_bridgeObjectRelease();
            sub_1000126B0((uint64_t)v143, type metadata accessor for SecureLocation);
            *(_WORD *)(v50 + 32) = 2048;
            *(_QWORD *)(v50 + 34) = v38;
            swift_bridgeObjectRelease_n(v39, 2);
            v55 = v40;
            swift_bridgeObjectRelease_n(v40, 2);
            swift_bridgeObjectRelease_n(v35, 2);
            swift_bridgeObjectRelease_n(v34, 2);
            _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v144, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v50, 0x2Au);
            v56 = v138;
            swift_arrayDestroy(v138, 3, v129);
            v57 = v56;
            v58 = (uint64_t)v133;
            swift_slowDealloc(v57, -1, -1);
            v59 = v50;
            v21 = v139;
            swift_slowDealloc(v59, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n(v39, 2);
            swift_bridgeObjectRelease_n(v40, 2);
            swift_bridgeObjectRelease_n(v35, 2);
            swift_bridgeObjectRelease_n(v34, 2);
            sub_1000126B0((uint64_t)v45, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v39, 2);
            v55 = v40;
            swift_bridgeObjectRelease_n(v40, 2);
            swift_bridgeObjectRelease_n(v35, 2);
            swift_bridgeObjectRelease_n(v34, 2);
            v58 = (uint64_t)v133;
            v21 = v139;
          }
          sub_10005972C((uint64_t)v21, v58, type metadata accessor for SecureLocation);
          v144 = v39;
          if (!v39 && (v135 & 1) != 0)
          {
            v138 = v55;
            sub_1000126B0(v58, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          sub_10005972C(v58, (uint64_t)v137, type metadata accessor for SecureLocation);
          if ((v135 & 1) == 0)
            break;
          sub_1000126B0((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_1000126B0(v58, type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 += 11;
          if (!--v141)
          {
            swift_bridgeObjectRelease();
            v28 = v118;
            v29 = (uint64_t)v119;
            goto LABEL_49;
          }
        }
        v138 = v55;
        v80 = v35;
        v81 = v137[1];
        v82 = v144;
        if (!v144)
        {
          swift_bridgeObjectRetain(v137[1]);
          sub_1000126B0((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_1000126B0(v58, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v145 = v81;
          goto LABEL_10;
        }
        if (v142 == *v137 && v144 == v81)
        {
          swift_bridgeObjectRetain(v144);
          sub_1000126B0((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_1000126B0(v58, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          v35 = v80;
        }
        else
        {
          v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v142, v144, *v137, v137[1], 0);
          swift_bridgeObjectRetain(v82);
          sub_1000126B0((uint64_t)v137, type metadata accessor for SecureLocation);
          sub_1000126B0(v58, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          v35 = v80;
          if ((v83 & 1) == 0)
            goto LABEL_9;
        }
LABEL_25:
        v60 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v36, v37);
        v134 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v21[3], v21[2]);
        objc_msgSend(v60, "distanceFromLocation:");
        v62 = v61;
        v63 = v145;
        swift_bridgeObjectRetain_n(v145, 2);
        swift_bridgeObjectRetain_n(v35, 2);
        v64 = v138;
        swift_bridgeObjectRetain_n(v138, 2);
        v65 = v144;
        swift_bridgeObjectRetain_n(v144, 2);
        v67 = Logger.logObject.getter(v66);
        v68 = static os_log_type_t.info.getter(v67);
        v69 = v68;
        if (os_log_type_enabled(v67, v68))
        {
          v70 = swift_slowAlloc(32, -1);
          v71 = v64;
          v132 = v60;
          v72 = v70;
          v73 = swift_slowAlloc(64, -1);
          v131 = v69;
          v74 = v35;
          v75 = v73;
          v146 = v73;
          *(_DWORD *)v72 = v128.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(_QWORD *)(v72 + 4) = sub_100016940(v136, v74, &v146);
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 12) = 2080;
          if (v65)
            v76 = v142;
          else
            v76 = 0x206C696E20;
          if (v65)
            v77 = v65;
          else
            v77 = 0xE500000000000000;
          swift_bridgeObjectRetain(v65);
          *(_QWORD *)(v72 + 14) = sub_100016940(v76, v77, &v146);
          swift_bridgeObjectRelease_n(v65, 2);
          swift_bridgeObjectRelease_n(v71, 2);
          swift_bridgeObjectRelease_n(v74, 2);
          swift_bridgeObjectRelease_n(v145, 2);
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 22) = 2048;
          *(double *)(v72 + 24) = v62;
          _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v131, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v72, 0x20u);
          swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
          v78 = v75;
          v35 = v74;
          swift_slowDealloc(v78, -1, -1);
          v79 = v72;
          v60 = v132;
          swift_slowDealloc(v79, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v65, 2);
          swift_bridgeObjectRelease_n(v64, 2);
          swift_bridgeObjectRelease_n(v35, 2);
          swift_bridgeObjectRelease_n(v63, 2);
        }
        v21 = v139;
        if (v62 > v23)
        {

          goto LABEL_9;
        }
        v132 = v60;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = (uint64_t)v119;
        swift_beginAccess(v119, &v149, 1, 0);
        v84 = v116;
        v85 = (_QWORD *)(v29 + *(int *)(v116 + 64));
        *v85 = v136;
        v85[1] = v35;
        swift_bridgeObjectRelease();
        v86 = v117;
        v87 = sub_10005972C((uint64_t)v21, (uint64_t)v117, type metadata accessor for SecureLocation);
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.default.getter(v88);
        if (os_log_type_enabled(v88, v89))
        {
          v90 = swift_slowAlloc(22, -1);
          v145 = swift_slowAlloc(64, -1);
          v148 = v145;
          *(_DWORD *)v90 = v111.n128_u32[0];
          v91 = (uint64_t *)&v119[*(int *)(v84 + 64)];
          v92 = v91[1];
          v146 = *v91;
          v147 = v92;
          swift_bridgeObjectRetain(v92);
          v93 = sub_10001A9A8(&qword_1010F6350);
          v94 = String.init<A>(describing:)(&v146, v93);
          v146 = sub_100016940(v94, v95, &v148);
          v96 = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v112, v90 + 4, v90 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v90 + 12) = 2080;
          v97 = *v86;
          v98 = v86[1];
          swift_bridgeObjectRetain(v98);
          v146 = sub_100016940(v97, v98, &v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v96, v90 + 14, v90 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v86, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "LabelledLocations Adding label %s to location %s", (uint8_t *)v90, 0x16u);
          v99 = v145;
          swift_arrayDestroy(v145, 2, (char *)&type metadata for Any + 8);
          v29 = (uint64_t)v119;
          swift_slowDealloc(v99, -1, -1);
          swift_slowDealloc(v90, -1, -1);
        }
        else
        {
          sub_1000126B0((uint64_t)v86, type metadata accessor for SecureLocation);
        }

        v28 = v118;
LABEL_49:
        v27 = v125;
LABEL_50:
        swift_beginAccess(v29, v150, 0, 0);
        sub_10005972C(v29, v28, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
          v27 = (_QWORD *)sub_1007C9DB4(0, v27[2] + 1, 1, (unint64_t)v27);
        v101 = v27[2];
        v100 = v27[3];
        v102 = (uint64_t)v27;
        if (v101 >= v100 >> 1)
          v102 = sub_1007C9DB4(v100 > 1, v101 + 1, 1, (unint64_t)v27);
        v103 = v127 + 1;
        *(_QWORD *)(v102 + 16) = v101 + 1;
        v27 = (_QWORD *)v102;
        v104 = v102 + v122 + v101 * v120;
        v24 = v120;
        sub_1000126EC(v28, v104, type metadata accessor for SecureLocation);
        sub_1000126B0((uint64_t)v21, type metadata accessor for SecureLocation);
        sub_1000126B0(v29, type metadata accessor for SecureLocation);
        v26 = v103;
        if (v103 == v123)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }
    v27 = _swiftEmptyArrayStorage;
LABEL_62:
    v114((uint64_t)v27, 0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v105 = type metadata accessor for Logger(0);
    v106 = sub_10001A9E8(v105, (uint64_t)qword_1011B7A18);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "LabelledLocations - No labels - nothing to resolve", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
    }

    return v114(v115, 0);
  }
}

uint64_t sub_100540474(uint64_t a1, uint64_t a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint8_t *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[2];
  void (*v28)(id);
  uint64_t v29;
  uint64_t v30;

  v28 = a3;
  v7 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v27[0] = a1;
    v16 = v15;
    v27[1] = a2;
    v17 = a4;
    *(_DWORD *)v15 = 134217984;
    v18 = v15 + 12;
    v19 = v15 + 4;
    v20 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v15);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v29 = v20;
    v21 = v18;
    a4 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "FetchConfig - response code %ld", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  v23 = FMNServerInteractionController.FMNResponseFields.data.getter(v22);
  v25 = v24;
  sub_100540660(v23, v24, v28, a4);
  return sub_10001BC14(v23, v25);
}

void sub_100540660(uint64_t a1, uint64_t a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v4;
  void *v8;
  Class isa;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  NSString v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint8_t *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  uint8_t *v158;
  uint64_t v159;
  uint64_t v160;
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  NSObject *v166;
  os_log_type_t v167;
  uint8_t *v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t My;
  _QWORD *v175;
  Class v176;
  id v177;
  id v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  void (*v185)(id);
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  uint8_t *v190;
  void *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  os_log_type_t v196;
  uint8_t *v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint8_t *v202;
  id v203;
  NSString v204;
  id v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  uint8_t *v211;
  unint64_t v212;
  uint8_t *v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  NSObject *v217;
  os_log_type_t v218;
  _BOOL4 v219;
  uint64_t v220;
  uint8_t *v221;
  _BYTE v222[16];
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  void (*v227)(id);
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  id v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  int v245;
  int v246;
  uint64_t v247;
  void *v248;
  id v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  BOOL v253;
  uint64_t v254;
  uint64_t v255;
  _BYTE v256[7];
  _BYTE v257[7];
  _DWORD v258[2];
  _DWORD v259[2];
  uint64_t v260;
  unsigned __int8 v261;
  _BYTE v262[7];
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unsigned __int8 v268;
  _BYTE v269[7];
  void *v270;
  uint64_t v271;
  unsigned __int8 v272;
  _BYTE v273[7];
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned __int8 v278;
  unsigned __int8 v279;
  unsigned __int8 v280;
  unsigned __int8 v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unsigned __int8 v286;
  _BYTE v287[7];
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  char v309;
  char v310;
  char v311;
  int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  _BYTE v317[7];
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  id v321;
  uint64_t v322;
  uint64_t v323;

  v252 = a4;
  v8 = (void *)objc_opt_self(NSJSONSerialization);
  v250 = a1;
  v251 = a2;
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v294 = 0;
  v249 = v8;
  v10 = objc_msgSend(v8, "JSONObjectWithData:options:error:", isa, 0, &v294);

  v11 = v294;
  if (v10)
  {
    v12 = (id)v294;
    _bridgeAnyObjectToAny(_:)(&v294, v10);
    swift_unknownObjectRelease(v10);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
    if (swift_dynamicCast(&v260, &v294, (char *)&type metadata for Any + 8, v13, 6))
    {
      v14 = v260;
      v224 = *(_QWORD *)(v4 + 16);
      v225 = v13;
      sub_100446994((uint64_t)&v260);
      v242 = v260;
      v243 = v261;
      v259[0] = *(_DWORD *)v262;
      *(_DWORD *)((char *)v259 + 3) = *(_DWORD *)&v262[3];
      v16 = v263;
      v15 = v264;
      v244 = v265;
      v18 = v266;
      v17 = v267;
      v258[0] = *(_DWORD *)v269;
      *(_DWORD *)((char *)v258 + 3) = *(_DWORD *)&v269[3];
      v19 = v271;
      v245 = v268;
      v246 = v272;
      *(_DWORD *)&v257[3] = *(_DWORD *)&v273[3];
      *(_DWORD *)v257 = *(_DWORD *)v273;
      v20 = v274;
      v247 = v275;
      v248 = v270;
      v22 = v276;
      v21 = v277;
      v230 = v279;
      v231 = v278;
      v228 = v281;
      v229 = v280;
      v226 = v282;
      v233 = v285;
      v234 = v284;
      v232 = v286;
      *(_DWORD *)&v256[3] = *(_DWORD *)&v287[3];
      *(_DWORD *)v256 = *(_DWORD *)v287;
      v237 = v290;
      v238 = v288;
      v240 = v291;
      v241 = v289;
      v235 = v283;
      v236 = v292;
      v239 = v293;
      v23 = *(_QWORD *)(v14 + 16);
      v227 = a3;
      if (v23
        && (v24 = sub_100518DA0(0x6556747065636361, 0xED00006E6F697372), (v25 & 1) != 0)
        && (sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v24, (uint64_t)&v294),
            (swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0))
      {
        v26 = 0;
        v242 = v254;
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      else
      {
        if (qword_1010EA098 != -1)
          swift_once(&qword_1010EA098, sub_10098F7D8);
        v48 = type metadata accessor for Logger(0);
        v49 = sub_10001A9E8(v48, (uint64_t)qword_1011B7A18);
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.error.getter(v50);
        if (os_log_type_enabled(v50, v51))
        {
          v52 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "FetchConfig Unable to parse acceptVersion from config response", v52, 2u);
          swift_slowDealloc(v52, -1, -1);
        }

        v26 = 1;
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_26;
      }
      v53 = sub_100518DA0(0x4565727574616566, 0xEE0064656C62616ELL);
      if ((v54 & 1) != 0)
      {
        sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v53, (uint64_t)&v294);
        if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
        {
          v243 = v254;
          if (!*(_QWORD *)(v14 + 16))
            goto LABEL_46;
LABEL_31:
          v60 = sub_100518DA0(0xD00000000000001ELL, 0x8000000100EC3150);
          if ((v61 & 1) == 0)
            goto LABEL_46;
          sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v60, (uint64_t)&v294);
          v62 = swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for String, 6);
          if ((v62 & 1) == 0)
            goto LABEL_46;
          v63 = v255;
          v254 = 0;
          v64 = __chkstk_darwin(v62);
          v223 = &v254;
          if ((v63 & 0x1000000000000000) != 0 || !(v63 & 0x2000000000000000 | v65 & 0x1000000000000000))
          {
            _StringGuts._slowWithCString<A>(_:)(&v253, sub_100555E18, v222, v65, v63, &type metadata for Bool);
          }
          else
          {
            __chkstk_darwin(v64);
            if ((v63 & 0x2000000000000000) != 0)
            {
              *(_QWORD *)&v294 = v66;
              *((_QWORD *)&v294 + 1) = v63 & 0xFFFFFFFFFFFFFFLL;
              sub_100D7C59C(&v294, &v253);
              swift_bridgeObjectRelease();
LABEL_44:
              if (v253)
              {
                v16 = v254;
                goto LABEL_51;
              }
LABEL_46:
              if (qword_1010EA098 != -1)
                swift_once(&qword_1010EA098, sub_10098F7D8);
              v69 = type metadata accessor for Logger(0);
              v70 = sub_10001A9E8(v69, (uint64_t)qword_1011B7A18);
              v71 = Logger.logObject.getter(v70);
              v72 = static os_log_type_t.error.getter(v71);
              if (os_log_type_enabled(v71, v72))
              {
                v73 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v73 = 0;
                _os_log_impl((void *)&_mh_execute_header, v71, v72, "FetchConfig Unable to parse labelDistanceThreshold from server config response", v73, 2u);
                swift_slowDealloc(v73, -1, -1);
              }

              v26 = 1;
LABEL_51:
              if (*(_QWORD *)(v14 + 16)
                && (v74 = sub_100518DA0(0xD00000000000001CLL, 0x8000000100EC3190), (v75 & 1) != 0)
                && (sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v74, (uint64_t)&v294),
                    (swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0))
              {
                v244 = v254;
                if (!*(_QWORD *)(v14 + 16))
                  goto LABEL_74;
              }
              else
              {
                if (qword_1010EA098 != -1)
                  swift_once(&qword_1010EA098, sub_10098F7D8);
                v76 = type metadata accessor for Logger(0);
                v77 = sub_10001A9E8(v76, (uint64_t)qword_1011B7A18);
                v78 = Logger.logObject.getter(v77);
                v79 = static os_log_type_t.error.getter(v78);
                if (os_log_type_enabled(v78, v79))
                {
                  v80 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v80 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v78, v79, "FetchConfig unable to parse maxAllowedSenderSessions from server config response", v80, 2u);
                  swift_slowDealloc(v80, -1, -1);
                }

                v26 = 1;
                if (!*(_QWORD *)(v14 + 16))
                  goto LABEL_74;
              }
              v81 = sub_100518DA0(0xD00000000000001ELL, 0x8000000100EC3170);
              if ((v82 & 1) == 0)
                goto LABEL_74;
              sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v81, (uint64_t)&v294);
              v83 = swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for String, 6);
              if ((v83 & 1) == 0)
                goto LABEL_74;
              v84 = v255;
              v254 = 0;
              v85 = __chkstk_darwin(v83);
              v223 = &v254;
              if ((v84 & 0x1000000000000000) != 0 || !(v84 & 0x2000000000000000 | v86 & 0x1000000000000000))
              {
                _StringGuts._slowWithCString<A>(_:)(&v253, sub_100555E18, v222, v86, v84, &type metadata for Bool);
              }
              else
              {
                __chkstk_darwin(v85);
                if ((v84 & 0x2000000000000000) != 0)
                {
                  *(_QWORD *)&v294 = v87;
                  *((_QWORD *)&v294 + 1) = v84 & 0xFFFFFFFFFFFFFFLL;
                  sub_100D7C59C(&v294, &v253);
                  swift_bridgeObjectRelease();
LABEL_72:
                  if (v253)
                  {
                    v15 = v254;
                    goto LABEL_79;
                  }
LABEL_74:
                  if (qword_1010EA098 != -1)
                    swift_once(&qword_1010EA098, sub_10098F7D8);
                  v90 = type metadata accessor for Logger(0);
                  v91 = sub_10001A9E8(v90, (uint64_t)qword_1011B7A18);
                  v92 = Logger.logObject.getter(v91);
                  v93 = static os_log_type_t.error.getter(v92);
                  if (os_log_type_enabled(v92, v93))
                  {
                    v94 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v94 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v92, v93, "FetchConfig unable to parse locationCacheValidityThreshold from server config response", v94, 2u);
                    swift_slowDealloc(v94, -1, -1);
                  }

                  v26 = 1;
LABEL_79:
                  if (!*(_QWORD *)(v14 + 16))
                    goto LABEL_93;
                  v95 = sub_100518DA0(0xD000000000000016, 0x8000000100EC31B0);
                  if ((v96 & 1) == 0)
                    goto LABEL_93;
                  sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v95, (uint64_t)&v294);
                  v97 = swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for String, 6);
                  if ((v97 & 1) == 0)
                    goto LABEL_93;
                  v98 = v255;
                  v254 = 0;
                  v99 = __chkstk_darwin(v97);
                  v223 = &v254;
                  if ((v98 & 0x1000000000000000) != 0 || !(v98 & 0x2000000000000000 | v100 & 0x1000000000000000))
                  {
                    _StringGuts._slowWithCString<A>(_:)(&v253, sub_100555E18, v222, v100, v98, &type metadata for Bool);
                  }
                  else
                  {
                    __chkstk_darwin(v99);
                    if ((v98 & 0x2000000000000000) != 0)
                    {
                      *(_QWORD *)&v294 = v101;
                      *((_QWORD *)&v294 + 1) = v98 & 0xFFFFFFFFFFFFFFLL;
                      sub_100D7C59C(&v294, &v253);
                      swift_bridgeObjectRelease();
LABEL_91:
                      if (v253)
                      {
                        v18 = v254;
                        goto LABEL_98;
                      }
LABEL_93:
                      if (qword_1010EA098 != -1)
                        swift_once(&qword_1010EA098, sub_10098F7D8);
                      v104 = type metadata accessor for Logger(0);
                      v105 = sub_10001A9E8(v104, (uint64_t)qword_1011B7A18);
                      v106 = Logger.logObject.getter(v105);
                      v107 = static os_log_type_t.error.getter(v106);
                      if (os_log_type_enabled(v106, v107))
                      {
                        v108 = (uint8_t *)swift_slowAlloc(2, -1);
                        *(_WORD *)v108 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v106, v107, "FetchConfig unable to parse locationAgingThreshold from server config response", v108, 2u);
                        swift_slowDealloc(v108, -1, -1);
                      }

                      v26 = 1;
LABEL_98:
                      if (!*(_QWORD *)(v14 + 16))
                        goto LABEL_112;
                      v109 = sub_100518DA0(0xD000000000000019, 0x8000000100EC31D0);
                      if ((v110 & 1) == 0)
                        goto LABEL_112;
                      sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v109, (uint64_t)&v294);
                      v111 = swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for String, 6);
                      if ((v111 & 1) == 0)
                        goto LABEL_112;
                      v112 = v255;
                      v254 = 0;
                      v113 = __chkstk_darwin(v111);
                      v223 = &v254;
                      if ((v112 & 0x1000000000000000) != 0
                        || !(v112 & 0x2000000000000000 | v114 & 0x1000000000000000))
                      {
                        _StringGuts._slowWithCString<A>(_:)(&v253, sub_100555E18, v222, v114, v112, &type metadata for Bool);
                      }
                      else
                      {
                        __chkstk_darwin(v113);
                        if ((v112 & 0x2000000000000000) != 0)
                        {
                          *(_QWORD *)&v294 = v115;
                          *((_QWORD *)&v294 + 1) = v112 & 0xFFFFFFFFFFFFFFLL;
                          sub_100D7C59C(&v294, &v253);
                          swift_bridgeObjectRelease();
LABEL_110:
                          if (v253)
                          {
                            v17 = v254;
                            goto LABEL_117;
                          }
LABEL_112:
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v118 = type metadata accessor for Logger(0);
                          v119 = sub_10001A9E8(v118, (uint64_t)qword_1011B7A18);
                          v120 = Logger.logObject.getter(v119);
                          v121 = static os_log_type_t.error.getter(v120);
                          if (os_log_type_enabled(v120, v121))
                          {
                            v122 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v122 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v120, v121, "FetchConfig unable to parse subscriptionThrottleInSec from server config response ", v122, 2u);
                            swift_slowDealloc(v122, -1, -1);
                          }

LABEL_117:
                          if (*(_QWORD *)(v14 + 16)
                            && (v123 = sub_100518DA0(0xD00000000000001ELL, 0x8000000100EC31F0), (v124 & 1) != 0)
                            && (sub_100016A30(*(_QWORD *)(v14 + 56) + 32 * v123, (uint64_t)&v294),
                                (swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0))
                          {
                            v245 = v254;
                          }
                          else
                          {
                            if (qword_1010EA098 != -1)
                              swift_once(&qword_1010EA098, sub_10098F7D8);
                            v125 = type metadata accessor for Logger(0);
                            v126 = sub_10001A9E8(v125, (uint64_t)qword_1011B7A18);
                            v127 = Logger.logObject.getter(v126);
                            v128 = static os_log_type_t.error.getter(v127);
                            if (os_log_type_enabled(v127, v128))
                            {
                              v129 = (uint8_t *)swift_slowAlloc(2, -1);
                              *(_WORD *)v129 = 0;
                              _os_log_impl((void *)&_mh_execute_header, v127, v128, "FetchConfig unable to parse overridePendingKeyRequestCheck from server config response", v129, 2u);
                              swift_slowDealloc(v129, -1, -1);
                            }

                            v26 = 1;
                          }
                          sub_100BBE22C(0xD00000000000001DLL, 0x8000000100EC3210, v14, &v294);
                          if (v296)
                          {
                            v130 = sub_10001A9A8(&qword_1011063B0);
                            if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, v130, 6) & 1) != 0)
                            {
                              v131 = sub_100CA7D78(v254);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              v248 = (void *)v131;
                              goto LABEL_135;
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v132 = type metadata accessor for Logger(0);
                          v133 = sub_10001A9E8(v132, (uint64_t)qword_1011B7A18);
                          v134 = Logger.logObject.getter(v133);
                          v135 = static os_log_type_t.error.getter(v134);
                          if (os_log_type_enabled(v134, v135))
                          {
                            v136 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v136 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v134, v135, "FetchConfig unable to parse ownerProactiveSupportedModels from server config response", v136, 2u);
                            swift_slowDealloc(v136, -1, -1);
                          }

                          v26 = 1;
LABEL_135:
                          sub_100BBE22C(0xD000000000000017, 0x8000000100EC3230, v14, &v294);
                          if (v296)
                          {
                            v137 = swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for String, 6);
                            if ((v137 & 1) != 0)
                            {
                              v138 = v255;
                              v254 = 0;
                              v139 = __chkstk_darwin(v137);
                              v223 = &v254;
                              if ((v138 & 0x1000000000000000) != 0
                                || !(v138 & 0x2000000000000000 | v140 & 0x1000000000000000))
                              {
                                _StringGuts._slowWithCString<A>(_:)(&v253, sub_100553C94, v222, v140, v138, &type metadata for Bool);
                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                __chkstk_darwin(v139);
                                if ((v138 & 0x2000000000000000) != 0)
                                {
                                  *(_QWORD *)&v294 = v141;
                                  *((_QWORD *)&v294 + 1) = v138 & 0xFFFFFFFFFFFFFFLL;
                                  sub_100D7C59C(&v294, &v253);
                                  swift_bridgeObjectRelease();
                                }
                                else
                                {
                                  if ((v141 & 0x1000000000000000) != 0)
                                  {
                                    v142 = (v138 & 0xFFFFFFFFFFFFFFFLL) + 32;
                                    v143 = v141 & 0xFFFFFFFFFFFFLL;
                                  }
                                  else
                                  {
                                    v142 = _StringObject.sharedUTF8.getter(v141, v138);
                                  }
                                  v253 = sub_100D7C548(v142, v143, (void (*)(uint64_t *__return_ptr))sub_100553CAC) & 1;
                                  swift_bridgeObjectRelease();
                                }
                              }
                              if (v253)
                              {
                                v19 = v254;
                                goto LABEL_152;
                              }
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v144 = type metadata accessor for Logger(0);
                          v145 = sub_10001A9E8(v144, (uint64_t)qword_1011B7A18);
                          v146 = Logger.logObject.getter(v145);
                          v147 = static os_log_type_t.error.getter(v146);
                          if (os_log_type_enabled(v146, v147))
                          {
                            v148 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v148 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v146, v147, "FetchConfig unable to parse keyDistributionThrottle from server config response", v148, 2u);
                            swift_slowDealloc(v148, -1, -1);
                          }

                          v26 = 1;
LABEL_152:
                          sub_100BBE22C(0xD00000000000001DLL, 0x8000000100EC3250, v14, &v294);
                          if (v296)
                          {
                            if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
                            {
                              v246 = v254;
                              goto LABEL_161;
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v149 = type metadata accessor for Logger(0);
                          v150 = sub_10001A9E8(v149, (uint64_t)qword_1011B7A18);
                          v151 = Logger.logObject.getter(v150);
                          v152 = static os_log_type_t.error.getter(v151);
                          if (os_log_type_enabled(v151, v152))
                          {
                            v153 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v153 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v151, v152, "FetchConfig unable to parse offlineLocationsUploadEnabled from server config response", v153, 2u);
                            swift_slowDealloc(v153, -1, -1);
                          }

                          v26 = 1;
LABEL_161:
                          sub_100BBE22C(0xD000000000000020, 0x8000000100EC3270, v14, &v294);
                          if (v296)
                          {
                            if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
                            {
                              v20 = v254;
                              goto LABEL_170;
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v154 = type metadata accessor for Logger(0);
                          v155 = sub_10001A9E8(v154, (uint64_t)qword_1011B7A18);
                          v156 = Logger.logObject.getter(v155);
                          v157 = static os_log_type_t.error.getter(v156);
                          if (os_log_type_enabled(v156, v157))
                          {
                            v158 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v158 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v156, v157, "FetchConfig unable to parse offlineProactiveAlertIntervalSec from server config response", v158, 2u);
                            swift_slowDealloc(v158, -1, -1);
                          }

                          v26 = 1;
LABEL_170:
                          sub_100BBE22C(0xD000000000000025, 0x8000000100EC32A0, v14, &v294);
                          if (v296)
                          {
                            if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) != 0)
                            {
                              v247 = v254;
                              goto LABEL_179;
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v159 = type metadata accessor for Logger(0);
                          v160 = sub_10001A9E8(v159, (uint64_t)qword_1011B7A18);
                          v161 = Logger.logObject.getter(v160);
                          v162 = static os_log_type_t.error.getter(v161);
                          if (os_log_type_enabled(v161, v162))
                          {
                            v163 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v163 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v161, v162, "FetchConfig unable to parse offlineProactiveAlertNoOfTimesDisplay from server config response", v163, 2u);
                            swift_slowDealloc(v163, -1, -1);
                          }

                          v26 = 1;
LABEL_179:
                          sub_100BBE22C(0xD00000000000001FLL, 0x8000000100EC32D0, v14, &v294);
                          if (v296)
                          {
                            if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
                            {
                              v22 = v254;
                              goto LABEL_188;
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v164 = type metadata accessor for Logger(0);
                          v165 = sub_10001A9E8(v164, (uint64_t)qword_1011B7A18);
                          v166 = Logger.logObject.getter(v165);
                          v167 = static os_log_type_t.error.getter(v166);
                          if (os_log_type_enabled(v166, v167))
                          {
                            v168 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v168 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v166, v167, "FetchConfig unable to parse offlineLocationsPublishThrottle from server config response", v168, 2u);
                            swift_slowDealloc(v168, -1, -1);
                          }

                          v26 = 1;
LABEL_188:
                          sub_100BBE22C(0xD00000000000002ELL, 0x8000000100EC32F0, v14, &v294);
                          if (v296)
                          {
                            if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
                            {
                              v21 = v254;
                              goto LABEL_197;
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          if (qword_1010EA098 != -1)
                            swift_once(&qword_1010EA098, sub_10098F7D8);
                          v169 = type metadata accessor for Logger(0);
                          v170 = sub_10001A9E8(v169, (uint64_t)qword_1011B7A18);
                          v171 = Logger.logObject.getter(v170);
                          v172 = static os_log_type_t.error.getter(v171);
                          if (os_log_type_enabled(v171, v172))
                          {
                            v173 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v173 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v171, v172, "FetchConfig unable to parse offlineProactiveAlertDistanceThresholdInMeters from server config response", v173, 2u);
                            swift_slowDealloc(v173, -1, -1);
                          }

                          v26 = 1;
LABEL_197:
                          My = type metadata accessor for Feature.FindMy(0);
                          v296 = My;
                          v297 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
                          v175 = sub_100018F08(&v294);
                          (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v175, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
                          LOBYTE(My) = isFeatureEnabled(_:)(&v294);
                          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v294);
                          if ((My & 1) == 0)
                          {
                            swift_bridgeObjectRelease();
                            if ((v26 & 1) == 0)
                            {
LABEL_225:
                              if (qword_1010EA098 != -1)
                                swift_once(&qword_1010EA098, sub_10098F7D8);
                              v215 = type metadata accessor for Logger(0);
                              v216 = sub_10001A9E8(v215, (uint64_t)qword_1011B7A18);
                              v217 = Logger.logObject.getter(v216);
                              v218 = static os_log_type_t.default.getter(v217);
                              v219 = os_log_type_enabled(v217, v218);
                              v220 = (uint64_t)v227;
                              if (v219)
                              {
                                v221 = (uint8_t *)swift_slowAlloc(2, -1);
                                *(_WORD *)v221 = 0;
                                _os_log_impl((void *)&_mh_execute_header, v217, v218, "FetchConfig successfully updated config values from server. Now saving config", v221, 2u);
                                swift_slowDealloc(v221, -1, -1);
                              }

                              *(_QWORD *)&v294 = v242;
                              BYTE8(v294) = v243;
                              *(_DWORD *)((char *)&v294 + 9) = v259[0];
                              HIDWORD(v294) = *(_DWORD *)((char *)v259 + 3);
                              v295 = v16;
                              v296 = v15;
                              v297 = v244;
                              v298 = v18;
                              v299 = v17;
                              LOBYTE(v300) = v245;
                              *(_DWORD *)((char *)&v300 + 1) = v258[0];
                              HIDWORD(v300) = *(_DWORD *)((char *)v258 + 3);
                              v301 = v248;
                              v302 = v19;
                              LOBYTE(v303) = v246;
                              HIDWORD(v303) = *(_DWORD *)&v257[3];
                              *(_DWORD *)((char *)&v303 + 1) = *(_DWORD *)v257;
                              v304 = v20;
                              v305 = v247;
                              v306 = v22;
                              v307 = v21;
                              v308 = v231;
                              v309 = v230;
                              v310 = v229;
                              v311 = v228;
                              v312 = v226;
                              v313 = v235;
                              v314 = v234;
                              v315 = v233;
                              v316 = v232;
                              *(_DWORD *)&v317[3] = *(_DWORD *)&v256[3];
                              *(_DWORD *)v317 = *(_DWORD *)v256;
                              v318 = v238;
                              v319 = v241;
                              v320 = v237;
                              v321 = v240;
                              v322 = v236;
                              v323 = v239;
                              sub_1004F1D0C(&v294);
                              sub_100CAA434((uint64_t)&v294, (uint64_t)sub_100446D84, 0);
                              sub_100553954(&v294, v250, v251, v220, v252);
                              sub_1003D09E0(&v294);
LABEL_230:
                              sub_1003D09E0(&v294);
                              return;
                            }
                            goto LABEL_203;
                          }
                          sub_100BBE22C(0xD000000000000012, 0x8000000100EC3320, v14, &v294);
                          swift_bridgeObjectRelease();
                          if (v296)
                          {
                            if ((swift_dynamicCast(&v254, &v294, (char *)&type metadata for Any + 8, v225, 6) & 1) != 0)
                            {
                              v176 = Dictionary._bridgeToObjectiveC()().super.isa;
                              swift_bridgeObjectRelease();
                              *(_QWORD *)&v294 = 0;
                              v177 = objc_msgSend(v249, "dataWithJSONObject:options:error:", v176, 0, &v294, v224);

                              v178 = (id)v294;
                              if (v177)
                              {
                                v179 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v177);
                                v181 = v180;

                                v182 = type metadata accessor for JSONDecoder(0);
                                v183 = swift_allocObject(v182, *(unsigned int *)(v182 + 48), *(unsigned __int16 *)(v182 + 52));
                                JSONDecoder.init()(v183);
                                v184 = sub_1004F1CC8();
                                dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for OwnedDeviceConfig, v179, v181, &type metadata for OwnedDeviceConfig, v184);
                                v230 = BYTE1(v294);
                                v231 = v294;
                                v228 = BYTE3(v294);
                                v229 = BYTE2(v294);
                                v233 = v296;
                                v234 = v295;
                                v232 = v297;
                                v206 = v299;
                                v237 = v300;
                                v238 = v298;
                                v249 = v301;
                                v235 = *((_QWORD *)&v294 + 1);
                                v236 = v302;
                                v225 = v303;
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if (qword_1010EA620 != -1)
                                  swift_once(&qword_1010EA620, sub_100DC7BE8);
                                v207 = type metadata accessor for Logger(0);
                                v208 = sub_10001A9E8(v207, (uint64_t)qword_1011B8520);
                                v209 = Logger.logObject.getter(v208);
                                v210 = static os_log_type_t.default.getter(v209);
                                if (os_log_type_enabled(v209, v210))
                                {
                                  v211 = (uint8_t *)swift_slowAlloc(2, -1);
                                  v241 = v206;
                                  v212 = v181;
                                  v213 = v211;
                                  *(_WORD *)v211 = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v209, v210, "FetchConfig successfully parse the ownedDeviceConfig", v211, 2u);
                                  v214 = v213;
                                  v181 = v212;
                                  v206 = v241;
                                  swift_slowDealloc(v214, -1, -1);
                                }
                                swift_release();
                                sub_10001BC14(v179, v181);

                                v240 = v249;
                                v241 = v206;
                                v239 = v225;
                                if ((v26 & 1) == 0)
                                  goto LABEL_225;
LABEL_203:
                                v185 = v227;
LABEL_215:
                                if (qword_1010EA098 != -1)
                                  swift_once(&qword_1010EA098, sub_10098F7D8);
                                v198 = type metadata accessor for Logger(0);
                                v199 = sub_10001A9E8(v198, (uint64_t)qword_1011B7A18);
                                v200 = Logger.logObject.getter(v199);
                                v201 = static os_log_type_t.default.getter(v200);
                                if (os_log_type_enabled(v200, v201))
                                {
                                  v202 = (uint8_t *)swift_slowAlloc(2, -1);
                                  *(_WORD *)v202 = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v200, v201, "FetchConfig update failed - not saving configs", v202, 2u);
                                  swift_slowDealloc(v202, -1, -1);
                                }

                                static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
                                v203 = objc_allocWithZone((Class)NSError);
                                v204 = String._bridgeToObjectiveC()();
                                swift_bridgeObjectRelease();
                                v205 = objc_msgSend(v203, "initWithDomain:code:userInfo:", v204, 5, 0);

                                v185(v205);
                                *(_QWORD *)&v294 = v242;
                                BYTE8(v294) = v243;
                                *(_DWORD *)((char *)&v294 + 9) = v259[0];
                                HIDWORD(v294) = *(_DWORD *)((char *)v259 + 3);
                                v295 = v16;
                                v296 = v15;
                                v297 = v244;
                                v298 = v18;
                                v299 = v17;
                                LOBYTE(v300) = v245;
                                *(_DWORD *)((char *)&v300 + 1) = v258[0];
                                HIDWORD(v300) = *(_DWORD *)((char *)v258 + 3);
                                v301 = v248;
                                v302 = v19;
                                LOBYTE(v303) = v246;
                                HIDWORD(v303) = *(_DWORD *)&v257[3];
                                *(_DWORD *)((char *)&v303 + 1) = *(_DWORD *)v257;
                                v304 = v20;
                                v305 = v247;
                                v306 = v22;
                                v307 = v21;
                                v308 = v231;
                                v309 = v230;
                                v310 = v229;
                                v311 = v228;
                                v312 = v226;
                                v313 = v235;
                                v314 = v234;
                                v315 = v233;
                                v316 = v232;
                                *(_DWORD *)&v317[3] = *(_DWORD *)&v256[3];
                                *(_DWORD *)v317 = *(_DWORD *)v256;
                                v318 = v238;
                                v319 = v241;
                                v320 = v237;
                                v321 = v240;
                                v322 = v236;
                                v323 = v239;
                                goto LABEL_230;
                              }
                              v191 = v178;
                              v192 = _convertNSErrorToError(_:)(v178);

                              swift_willThrow(v193);
                              v185 = v227;
                              if (qword_1010EA620 != -1)
                                swift_once(&qword_1010EA620, sub_100DC7BE8);
                              v194 = type metadata accessor for Logger(0);
                              v195 = sub_10001A9E8(v194, (uint64_t)qword_1011B8520);
                              v188 = Logger.logObject.getter(v195);
                              v196 = static os_log_type_t.error.getter(v188);
                              if (os_log_type_enabled(v188, v196))
                              {
                                v197 = (uint8_t *)swift_slowAlloc(2, -1);
                                *(_WORD *)v197 = 0;
                                _os_log_impl((void *)&_mh_execute_header, v188, v196, "FetchConfig unable to parse ownedDeviceConfig from server config response.", v197, 2u);
                                swift_slowDealloc(v197, -1, -1);
                              }
                              swift_errorRelease(v192);
LABEL_214:

                              goto LABEL_215;
                            }
                          }
                          else
                          {
                            sub_100004048((uint64_t)&v294, (uint64_t *)&unk_1010F6390);
                          }
                          v185 = v227;
                          if (qword_1010EA620 != -1)
                            swift_once(&qword_1010EA620, sub_100DC7BE8);
                          v186 = type metadata accessor for Logger(0);
                          v187 = sub_10001A9E8(v186, (uint64_t)qword_1011B8520);
                          v188 = Logger.logObject.getter(v187);
                          v189 = static os_log_type_t.error.getter(v188);
                          if (os_log_type_enabled(v188, v189))
                          {
                            v190 = (uint8_t *)swift_slowAlloc(2, -1);
                            *(_WORD *)v190 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v188, v189, "FetchConfig unable to parse ownedDeviceConfig from server config response.", v190, 2u);
                            swift_slowDealloc(v190, -1, -1);
                          }
                          goto LABEL_214;
                        }
                        if ((v115 & 0x1000000000000000) != 0)
                        {
                          v116 = (v112 & 0xFFFFFFFFFFFFFFFLL) + 32;
                          v117 = v115 & 0xFFFFFFFFFFFFLL;
                        }
                        else
                        {
                          v116 = _StringObject.sharedUTF8.getter(v115, v112);
                        }
                        v253 = sub_100D7C548(v116, v117, (void (*)(uint64_t *__return_ptr))sub_100555C08) & 1;
                      }
                      swift_bridgeObjectRelease();
                      goto LABEL_110;
                    }
                    if ((v101 & 0x1000000000000000) != 0)
                    {
                      v102 = (v98 & 0xFFFFFFFFFFFFFFFLL) + 32;
                      v103 = v101 & 0xFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      v102 = _StringObject.sharedUTF8.getter(v101, v98);
                    }
                    v253 = sub_100D7C548(v102, v103, (void (*)(uint64_t *__return_ptr))sub_100555C08) & 1;
                  }
                  swift_bridgeObjectRelease();
                  goto LABEL_91;
                }
                if ((v87 & 0x1000000000000000) != 0)
                {
                  v88 = (v84 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  v89 = v87 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  v88 = _StringObject.sharedUTF8.getter(v87, v84);
                }
                v253 = sub_100D7C548(v88, v89, (void (*)(uint64_t *__return_ptr))sub_100555C08) & 1;
              }
              swift_bridgeObjectRelease();
              goto LABEL_72;
            }
            if ((v66 & 0x1000000000000000) != 0)
            {
              v67 = (v63 & 0xFFFFFFFFFFFFFFFLL) + 32;
              v68 = v66 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              v67 = _StringObject.sharedUTF8.getter(v66, v63);
            }
            v253 = sub_100D7C548(v67, v68, (void (*)(uint64_t *__return_ptr))sub_100555C08) & 1;
          }
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
LABEL_26:
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v55 = type metadata accessor for Logger(0);
      v56 = sub_10001A9E8(v55, (uint64_t)qword_1011B7A18);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "FetchConfig Unable to parse featureEnabled flag from server config response", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }

      v26 = 1;
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_46;
      goto LABEL_31;
    }
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B7A18);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "FetchConfig - unable to parse config data", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v44 = objc_allocWithZone((Class)NSError);
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v46 = objc_msgSend(v44, "initWithDomain:code:userInfo:", v45, 5, 0);

    v47 = v46;
    a3(v46);

  }
  else
  {
    v27 = (id)v294;
    v28 = _convertNSErrorToError(_:)(v11);

    swift_willThrow(v29);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v30 = type metadata accessor for Logger(0);
    sub_10001A9E8(v30, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v28);
    v31 = swift_errorRetain(v28);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v294 = v35;
      *(_DWORD *)v34 = 136315138;
      v260 = v28;
      swift_errorRetain(v28);
      v36 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v37 = String.init<A>(describing:)(&v260, v36);
      v260 = sub_100016940(v37, v38, (uint64_t *)&v294);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v28);
      swift_errorRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "FetchConfig - error decoding config information %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_errorRelease(v28);
      swift_errorRelease(v28);
    }

    swift_errorRetain(v28);
    a3((id)v28);
    swift_errorRelease(v28);
    swift_errorRelease(v28);
  }
}

uint64_t sub_100542B38(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v17 = a1;
    v18 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_errorRetain(a1);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v14 = String.init<A>(describing:)(&v17, v13);
    v17 = sub_100016940(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return a2(a1);
}

void sub_100542D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = swift_slowAlloc(22, -1);
      v8 = swift_slowAlloc(32, -1);
      v13 = a2;
      v14 = v8;
      *(_DWORD *)v7 = 134218242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 4, v7 + 12);
      *(_WORD *)(v7 + 12) = 2080;
      v13 = a1;
      swift_errorRetain(a1);
      v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v10 = String.init<A>(describing:)(&v13, v9);
      v13 = sub_100016940(v10, v11, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v7 + 14, v7 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "FetchConfig - error fetching configs after checking response version %ld  %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_100542F28(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "FetchConfig updated fmd with new config", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return a2(0);
}

uint64_t sub_100543010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];
  _QWORD *v32;

  v27[0] = a6;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v30 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v28 = *(_QWORD *)(v16 - 8);
  v29 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[1] = *(_QWORD *)(a2 + 144);
  v19 = (_QWORD *)swift_allocObject(&unk_10107DA10, 72, 7);
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a5;
  v19[6] = v27[0];
  v19[7] = a7;
  v19[8] = a1;
  aBlock[4] = sub_100554F0C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107DA28;
  v20 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a4);
  v21 = a5;
  swift_retain();
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v13, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v15, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v29);
  return swift_release();
}

uint64_t sub_10054324C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;
  id v15;

  if (qword_1010EA428 != -1)
    swift_once(&qword_1010EA428, sub_100C48554);
  swift_retain();
  sub_100C48DE0();
  swift_release();
  v14 = (_QWORD *)swift_allocObject(&unk_10107DA60, 72, 7);
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  v14[6] = a5;
  v14[7] = a6;
  v14[8] = a7;
  swift_retain();
  swift_bridgeObjectRetain(a3);
  v15 = a4;
  swift_retain();
  swift_retain();
  sub_1008AA8D4(a2, a3, v15, (uint64_t)sub_100554F68, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_100543358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v16;
  id v17;

  v16 = (_QWORD *)swift_allocObject(&unk_10107DA88, 80, 7);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a5;
  v16[7] = a6;
  v16[8] = a7;
  v16[9] = a8;
  swift_bridgeObjectRetain(a4);
  swift_errorRetain(a1);
  swift_retain();
  v17 = a5;
  swift_retain();
  swift_retain();
  sub_100441EA8(a3, a4, (uint64_t)sub_100554FC8, (uint64_t)v16);
  return swift_release();
}

void sub_100543424(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t), uint64_t a8, _QWORD *a9)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  unint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  id v37;
  Class isa;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(id, uint64_t);
  uint64_t v67;
  uint64_t v68;

  v63 = a5;
  v64 = a6;
  v14 = a9;
  v65 = *a9;
  v66 = a7;
  v15 = sub_10001A9A8(&qword_101119450);
  __chkstk_darwin(v15);
  v17 = (char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SecureLocation(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100553D34(a1, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_101119450);
  }
  else
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v21, type metadata accessor for SecureLocation);
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    swift_retain();
    v22 = sub_100995F58((uint64_t)v21);
    swift_release();
    if ((v22 & 1) != 0)
    {
      v23 = sub_10001A9A8(&qword_10111BE20);
      v24 = swift_allocObject(v23, 40, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100E22D10;
      v25 = sub_100AA6310();
      *(_QWORD *)(v24 + 32) = v25;
      v68 = v24;
      specialized Array._endMutation()(v25);
      if (qword_1010E9B48 != -1)
        swift_once(&qword_1010E9B48, sub_100308748);
      v26 = type metadata accessor for Logger(0);
      sub_10001A9E8(v26, (uint64_t)qword_1011B6D08);
      swift_bridgeObjectRetain_n(a3, 2);
      v28 = Logger.logObject.getter(v27);
      v29 = a3;
      v30 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v30))
      {
        v31 = swift_slowAlloc(12, -1);
        v61 = a8;
        v32 = (uint8_t *)v31;
        v33 = swift_slowAlloc(32, -1);
        v62 = a9;
        v60 = a2;
        v34 = v33;
        v68 = v33;
        *(_DWORD *)v32 = 136315138;
        swift_bridgeObjectRetain(v29);
        v67 = sub_100016940(v60, v29, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v32 + 4, v32 + 12);
        swift_bridgeObjectRelease_n(v29, 3);
        _os_log_impl((void *)&_mh_execute_header, v28, v30, "SubscribeAndFetch - livelocations returning cached location for %s in completion", v32, 0xCu);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        v35 = v34;
        a2 = v60;
        v14 = v62;
        swift_slowDealloc(v35, -1, -1);
        v36 = v32;
        a8 = v61;
        swift_slowDealloc(v36, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v29, 2);
      }

      sub_1000126B0((uint64_t)v21, type metadata accessor for SecureLocation);
      a3 = v29;
    }
    else
    {
      sub_1000126B0((uint64_t)v21, type metadata accessor for SecureLocation);
    }
  }
  v37 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v39 = objc_msgSend(v37, "initWithExpiryTime:locations:", isa, 120.0);

  if (a4)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v62 = v14;
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a4);
    v41 = swift_errorRetain(a4);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v61 = a8;
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v60 = a3;
      v46 = v45;
      v67 = a4;
      v68 = v45;
      *(_DWORD *)v44 = 136315138;
      swift_errorRetain(a4);
      v47 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
      v48 = String.init<A>(describing:)(&v67, v47);
      v67 = sub_100016940(v48, v49, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a4);
      swift_errorRelease(a4);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "analytics: Error occurred during startLive %s", v44, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      v50 = v46;
      a3 = v60;
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      swift_errorRelease(a4);
      swift_errorRelease(a4);
    }

    __chkstk_darwin(v58);
    *(&v60 - 4) = v63;
    *(&v60 - 3) = a2;
    v59 = v64;
    *(&v60 - 2) = a3;
    *(&v60 - 1) = v59;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe", 61, 2, sub_100555BD8, &v60 - 6, &type metadata for () + 1);
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v51 = type metadata accessor for Logger(0);
    sub_10001A9E8(v51, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain_n(a3, 2);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.debug.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc(22, -1);
      v56 = swift_slowAlloc(32, -1);
      v60 = a2;
      v65 = v56;
      *(_DWORD *)v55 = 141558275;
      v67 = 1752392040;
      v68 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2081;
      swift_bridgeObjectRetain(a3);
      v67 = sub_100016940(v60, a3, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "analytics: startlive success for %{private,mask.hash}s", (uint8_t *)v55, 0x16u);
      v57 = v65;
      swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
  }
  v66(v39, a4);
  Transaction.capture()();

}

uint64_t sub_100543B9C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  _QWORD v5[6];
  _OWORD v6[3];
  uint64_t v7;

  v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  v6[2] = *(_OWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 48);
  type metadata accessor for Transaction(0);
  v5[2] = a2;
  v5[3] = v6;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.locationPayloadReceived", 69, 2, sub_100555774, v5, &type metadata for () + 1);
}

uint64_t sub_100543C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD aBlock[6];
  _QWORD *v24;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(a2 + 144);
  v13 = swift_allocObject(&unk_10107E0F0, 88, 7);
  v14 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)a3;
  *(_QWORD *)(v13 + 16) = a2;
  *(_OWORD *)(v13 + 40) = v14;
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v13 + 72) = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(v13 + 80) = a1;
  aBlock[4] = sub_1005557D0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107E108;
  v15 = _Block_copy(aBlock);
  swift_retain();
  sub_1003D84A8((uint64_t *)a3);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v6, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

void sub_100543E50(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t inited;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _BYTE v21[88];

  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6D08);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received live location in sink", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = sub_10001A9A8(&qword_1010FA518);
  inited = swift_initStackObject(v11, v21);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v14 = a2[1];
  v13 = a2[2];
  v15 = *a2;
  *(_QWORD *)(inited + 80) = *((_QWORD *)a2 + 6);
  *(_OWORD *)(inited + 48) = v14;
  *(_OWORD *)(inited + 64) = v13;
  *(_OWORD *)(inited + 32) = v15;
  sub_1003D84A8((uint64_t *)a2);
  v16 = sub_100444148(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for SecureLocationsEncodedPayload);
  if (v16[2])
  {
    swift_retain();
    swift_retain();
    sub_100552A80((uint64_t)v16, 0, a1, a1, a3);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    v17 = swift_bridgeObjectRelease();
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "LiveLocations: Not able to decode locations", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    Transaction.capture()();
  }
}

void sub_100544084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD v15[6];
  NSObject *v16;

  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a2 + 40);
    v5 = swift_allocObject(&unk_10107E190, 32, 7);
    *(_QWORD *)(v5 + 16) = a1;
    *(_QWORD *)(v5 + 24) = a2;
    v15[2] = v4;
    v15[3] = sub_10055580C;
    v15[4] = __chkstk_darwin(v5);
    v15[5] = a1;
    swift_bridgeObjectRetain(a1);
    swift_retain();
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.receivedUpdatedLocations", 70, 2, sub_100555BC4, v15, &type metadata for () + 1);
    swift_release();
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6D08);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Called client session with location updates", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C48D90();
    swift_release();
    Transaction.capture()();
  }
  else
  {
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B6D08);
    v16 = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v13, "saved locations is empty", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
}

void sub_100544330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  NSString v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  if (a1)
  {
    v22 = a1;
    swift_errorRetain(a1);
    v5 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    type metadata accessor for SecureLocationsError(0);
    v7 = v6;
    if ((swift_dynamicCast(&v21, &v22, v5, v6, 6) & 1) != 0)
    {
      v8 = v21;
      v9 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.code.getter(&v22, v7, v9);
      if (v22 != 8)
        goto LABEL_10;
      if (qword_1010E9B48 != -1)
        swift_once(&qword_1010E9B48, sub_100308748);
      v10 = type metadata accessor for Logger(0);
      v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6D08);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "No client sessions. Unsubscribing from live locations", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

      if (*(_QWORD *)(a2 + 16))
      {
        v15 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SecureLocation(0) - 8) + 80);
        v16 = (uint64_t *)(a2 + ((v15 + 32) & ~v15));
        v17 = objc_msgSend(objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext), "init");
        objc_msgSend(v17, "setSubscriptionMode:", 2);
        v18 = String._bridgeToObjectiveC()();
        objc_msgSend(v17, "setClientApp:", v18);

        v19 = *v16;
        v20 = (void *)v16[1];
        swift_bridgeObjectRetain(v20);
        sub_100533B68(v19, v20, v17, a3);

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_10:

      }
    }
  }
}

uint64_t sub_10054455C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[6];

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)a1;
  LOBYTE(a1) = *(_BYTE *)(a1 + 8);
  v23 = *(_QWORD *)(a2 + 144);
  v17 = swift_allocObject(&unk_10107D970, 64, 7);
  *(_QWORD *)(v17 + 16) = v16;
  *(_BYTE *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a2;
  *(_QWORD *)(v17 + 40) = a3;
  *(_QWORD *)(v17 + 48) = a4;
  *(_QWORD *)(v17 + 56) = a5;
  aBlock[4] = sub_100554EF0;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107D988;
  v18 = _Block_copy(aBlock);
  sub_100336050(v16, a1);
  swift_retain();
  swift_bridgeObjectRetain(a4);
  static DispatchQoS.unspecified.getter(a5);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v10, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v24);
  return swift_release();
}

uint64_t sub_100544788(unint64_t a1, int a2, uint64_t a3, uint8_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  _QWORD v34[6];
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v38 = a5;
  LODWORD(v9) = a2;
  if ((a2 & 1) != 0)
  {
    v41[0] = 0;
    v41[1] = 0xE000000000000000;
    sub_100165D28(a1);
    _StringGuts.grow(_:)(57);
    v11._object = (void *)0x8000000100EDA6B0;
    v11._countAndFlagsBits = 0xD000000000000037;
    String.append(_:)(v11);
    v12._countAndFlagsBits = sub_100165B94(a1);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v37 = 0;
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B6D08);
    swift_bridgeObjectRetain_n(0xE000000000000000, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v35 = a4;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = a6;
      v18 = swift_slowAlloc(32, -1);
      v41[0] = v18;
      *(_DWORD *)v17 = 136446210;
      swift_bridgeObjectRetain(0xE000000000000000);
      v39 = sub_100016940(v37, 0xE000000000000000, v41);
      a4 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease_n(0xE000000000000000, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "LiveLocations: %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      v19 = v18;
      a6 = v36;
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(0xE000000000000000, 2);
    }
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C4892C(0, v37, 0xE000000000000000);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v20 = qword_1010E9B48;
    swift_retain();
    if (v20 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B6D08);
    sub_100336050(a1, 0);
    v22 = swift_retain();
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v36 = a6;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v41[0] = v26;
      *(_DWORD *)v25 = 136446210;
      v35 = v25 + 4;
      swift_retain();
      v27 = sub_10037F868();
      LODWORD(v37) = v9;
      v9 = a3;
      v28 = a4;
      v30 = v29;
      sub_100336044(a1, 0);
      v39 = sub_100016940(v27, v30, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 4, v25 + 12);
      a4 = v28;
      a3 = v9;
      LOBYTE(v9) = v37;
      swift_bridgeObjectRelease();
      sub_100336044(a1, 0);
      sub_100336044(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "LiveLocations: Ending session: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v31 = v25;
      a6 = v36;
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_100336044(a1, 0);
      sub_100336044(a1, 0);
    }

    sub_100382394();
    objc_msgSend(*(id *)(a1 + 56), "endSession");
    sub_100381524(a1);
  }
  sub_100336044(a1, v9 & 1);
  v32 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v32);
  v34[2] = a3;
  v34[3] = a4;
  v34[4] = v38;
  v34[5] = a6;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe", 61, 2, sub_100555BD8, v34, &type metadata for () + 1);
}

uint64_t sub_100544C74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = sub_10001A9A8(&qword_101106C20);
  v10 = swift_allocObject(v9, 48, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v10 + 32) = a3;
  *(_QWORD *)(v10 + 40) = a4;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  sub_1005304A0(v10, a5, (uint64_t)j___s10FindMyBase11TransactionC7captureyyF, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_100544D28(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6D08);
  swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    *(_DWORD *)v10 = 136315394;
    swift_bridgeObjectRetain(a2);
    v15 = sub_100016940(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v10 + 12) = 2080;
    __asm { BR              X10 }
  }

  v11 = swift_bridgeObjectRelease_n(a2, 2);
  if (a3 == 2)
  {
    sub_10054F6F0(a1, a2, 1702259052, 0xE400000000000000, 0);
  }
  else if (a3)
  {
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (_DWORD *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *v14 = 136315138;
      __asm { BR              X10 }
    }

  }
  else
  {
    sub_1005479A0(a1, a2, 1702259052, 0xE400000000000000, 0);
  }
}

void sub_100545184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v2 = type metadata accessor for Logger(0);
    sub_10001A9E8(v2, (uint64_t)qword_1011B7A18);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v11 = a1;
      v12 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_errorRetain(a1);
      v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v9 = String.init<A>(describing:)(&v11, v8);
      v11 = sub_100016940(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "CheckAndFetchConfig: Error fetching config when feature disabled to check if that has changed %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  Transaction.capture()();
}

Swift::Int sub_100545370(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  double v13;
  double v14;
  double *v15;
  double v16;
  double v17;
  uint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  double v78;
  Swift::Int v79;
  uint64_t v80;
  _OWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  double v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  Swift::Int v116;
  _QWORD *v117;
  _QWORD *v118;
  Swift::Int v119;
  Swift::Int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  double *v125;
  char *v126;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if ((unint64_t)v3 >= 2)
    {
      v91 = *v2;
      v92 = *v2 + 160;
      v93 = -1;
      for (i = 1; i != v3; ++i)
      {
        v95 = *(double *)(v91 + 88 * i + 64);
        v96 = v93;
        v97 = v92;
        do
        {
          if (*(double *)(v97 - 96) >= v95)
            break;
          if (!v91)
            goto LABEL_143;
          v98 = (_OWORD *)(v97 - 72);
          v99 = *(_QWORD *)(v97 - 72);
          v100 = *(_QWORD *)(v97 - 64);
          result = *(_QWORD *)(v97 - 56);
          v101 = *(_QWORD *)(v97 - 48);
          v102 = *(_OWORD *)(v97 - 24);
          v103 = *(_OWORD *)(v97 - 40);
          v104 = *(_OWORD *)v97;
          v105 = *(_OWORD *)(v97 - 112);
          v98[2] = *(_OWORD *)(v97 - 128);
          v98[3] = v105;
          v98[4] = *(_OWORD *)(v97 - 96);
          *(_QWORD *)(v97 + 8) = *(_QWORD *)(v97 - 80);
          v106 = *(_OWORD *)(v97 - 144);
          *v98 = *(_OWORD *)(v97 - 160);
          v98[1] = v106;
          *(_OWORD *)(v97 - 88) = v104;
          v97 -= 88;
          *(_QWORD *)(v97 - 72) = v99;
          *(_QWORD *)(v97 - 64) = v100;
          *(_QWORD *)(v97 - 56) = result;
          *(_QWORD *)(v97 - 48) = v101;
          *(_OWORD *)(v97 - 40) = v103;
          *(_OWORD *)(v97 - 24) = v102;
          *(double *)(v97 - 8) = v95;
        }
        while (!__CFADD__(v96++, 1));
        v92 += 88;
        --v93;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_148;
  v119 = result;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v125 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v108 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      v118 = v8;
      if (v11 >= 2)
      {
        v109 = *v2;
        do
        {
          v110 = v11 - 2;
          if (v11 < 2)
            goto LABEL_134;
          if (!v109)
            goto LABEL_147;
          v111 = v108;
          v112 = *(_QWORD *)&v108[16 * v110 + 32];
          v113 = *(_QWORD *)&v108[16 * v11 + 24];
          sub_100545B40((double *)(v109 + 88 * v112), (double *)(v109 + 88 * *(_QWORD *)&v108[16 * v11 + 16]), v109 + 88 * v113, v125);
          if (v1)
            break;
          if (v113 < v112)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0)
            v111 = sub_10088F088((uint64_t)v111);
          if (v110 >= *((_QWORD *)v111 + 2))
            goto LABEL_136;
          v114 = &v111[16 * v110 + 32];
          *(_QWORD *)v114 = v112;
          *((_QWORD *)v114 + 1) = v113;
          v115 = *((_QWORD *)v111 + 2);
          if (v11 > v115)
            goto LABEL_137;
          memmove(&v111[16 * v11 + 16], &v111[16 * v11 + 32], 16 * (v115 - v11));
          v108 = v111;
          *((_QWORD *)v111 + 2) = v115 - 1;
          v11 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      v118[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v118 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SecureLocationLabel);
    *(_QWORD *)(v7 + 16) = v6;
    v118 = (_QWORD *)v7;
    v125 = (double *)(v7 + 32);
  }
  v9 = 0;
  v117 = v2;
  v10 = *v2;
  v126 = (char *)_swiftEmptyArrayStorage;
  v120 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(double *)(v10 + 88 * v9 + 64);
      v14 = *(double *)(v10 + 88 * v12 + 64);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (double *)(v10 + 240 + 88 * v12);
        v16 = v13;
        while (1)
        {
          v17 = v16;
          v16 = *v15;
          if (v14 < v13 == v17 >= *v15)
            break;
          ++v9;
          v15 += 11;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v13)
      {
        if (v9 < v12)
          goto LABEL_140;
        if (v12 < v9)
        {
          v18 = 88 * v9;
          v19 = v9;
          v20 = v12;
          v116 = v12;
          v21 = 88 * v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_146;
              v22 = v10 + v18;
              v23 = *(_QWORD *)(v10 + v21 + 16);
              v24 = *(_QWORD *)(v10 + v21 + 24);
              v25 = *(_QWORD *)(v10 + v21 + 64);
              v123 = *(_OWORD *)(v10 + v21 + 48);
              v124 = *(_OWORD *)(v10 + v21);
              v121 = *(_OWORD *)(v10 + v21 + 32);
              v122 = *(_OWORD *)(v10 + v21 + 72);
              memmove((void *)(v10 + v21), (const void *)(v10 + v18 - 88), 0x58uLL);
              *(_OWORD *)(v22 - 88) = v124;
              *(_QWORD *)(v22 - 72) = v23;
              *(_QWORD *)(v22 - 64) = v24;
              *(_OWORD *)(v22 - 56) = v121;
              *(_OWORD *)(v22 - 40) = v123;
              *(_QWORD *)(v22 - 24) = v25;
              *(_OWORD *)(v22 - 16) = v122;
            }
            ++v20;
            v18 -= 88;
            v21 += 88;
          }
          while (v20 < v19);
          v3 = v120;
          v12 = v116;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_138;
    if (v9 - v12 >= v119)
      goto LABEL_39;
    v26 = v12 + v119;
    if (__OFADD__(v12, v119))
      goto LABEL_141;
    if (v26 >= v3)
      v26 = v3;
    if (v26 < v12)
      break;
    if (v9 != v26)
    {
      v77 = v10 + 72 + 88 * v9;
      v27 = v126;
      do
      {
        v78 = *(double *)(v10 + 88 * v9 + 64);
        v79 = v12;
        v80 = v77;
        do
        {
          if (*(double *)(v80 - 96) >= v78)
            break;
          if (!v10)
            goto LABEL_144;
          v81 = (_OWORD *)(v80 - 72);
          v82 = *(_QWORD *)(v80 - 72);
          v83 = *(_QWORD *)(v80 - 64);
          v84 = *(_QWORD *)(v80 - 56);
          v85 = *(_QWORD *)(v80 - 48);
          v86 = *(_OWORD *)(v80 - 24);
          v87 = *(_OWORD *)(v80 - 40);
          v88 = *(_OWORD *)v80;
          v89 = *(_OWORD *)(v80 - 112);
          v81[2] = *(_OWORD *)(v80 - 128);
          v81[3] = v89;
          v81[4] = *(_OWORD *)(v80 - 96);
          *(_QWORD *)(v80 + 8) = *(_QWORD *)(v80 - 80);
          v90 = *(_OWORD *)(v80 - 144);
          *v81 = *(_OWORD *)(v80 - 160);
          v81[1] = v90;
          *(_OWORD *)(v80 - 88) = v88;
          v80 -= 88;
          *(_QWORD *)(v80 - 72) = v82;
          *(_QWORD *)(v80 - 64) = v83;
          *(_QWORD *)(v80 - 56) = v84;
          *(_QWORD *)(v80 - 48) = v85;
          *(_OWORD *)(v80 - 40) = v87;
          *(_OWORD *)(v80 - 24) = v86;
          ++v79;
          *(double *)(v80 - 8) = v78;
        }
        while (v9 != v79);
        ++v9;
        v77 += 88;
      }
      while (v9 != v26);
      v9 = v26;
      if (v26 < v12)
        goto LABEL_133;
      goto LABEL_40;
    }
LABEL_39:
    v27 = v126;
    if (v9 < v12)
      goto LABEL_133;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      v27 = sub_10088E710(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v29 = *((_QWORD *)v27 + 2);
    v28 = *((_QWORD *)v27 + 3);
    v11 = v29 + 1;
    if (v29 >= v28 >> 1)
      v27 = sub_10088E710((char *)(v28 > 1), v29 + 1, 1, v27);
    *((_QWORD *)v27 + 2) = v11;
    v30 = v27 + 32;
    v31 = &v27[16 * v29 + 32];
    *(_QWORD *)v31 = v12;
    *((_QWORD *)v31 + 1) = v9;
    v126 = v27;
    if (v29)
    {
      while (1)
      {
        v32 = v11 - 1;
        if (v11 >= 4)
        {
          v37 = &v30[16 * v11];
          v38 = *((_QWORD *)v37 - 8);
          v39 = *((_QWORD *)v37 - 7);
          v43 = __OFSUB__(v39, v38);
          v40 = v39 - v38;
          if (v43)
            goto LABEL_122;
          v42 = *((_QWORD *)v37 - 6);
          v41 = *((_QWORD *)v37 - 5);
          v43 = __OFSUB__(v41, v42);
          v35 = v41 - v42;
          v36 = v43;
          if (v43)
            goto LABEL_123;
          v44 = v11 - 2;
          v45 = &v30[16 * v11 - 32];
          v47 = *(_QWORD *)v45;
          v46 = *((_QWORD *)v45 + 1);
          v43 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          if (v43)
            goto LABEL_125;
          v43 = __OFADD__(v35, v48);
          v49 = v35 + v48;
          if (v43)
            goto LABEL_128;
          if (v49 >= v40)
          {
            v67 = &v30[16 * v32];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v43 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v43)
              goto LABEL_132;
            v60 = v35 < v70;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v61 = *((_QWORD *)v27 + 4);
            v62 = *((_QWORD *)v27 + 5);
            v43 = __OFSUB__(v62, v61);
            v54 = v62 - v61;
            v55 = v43;
            goto LABEL_70;
          }
          v34 = *((_QWORD *)v27 + 4);
          v33 = *((_QWORD *)v27 + 5);
          v43 = __OFSUB__(v33, v34);
          v35 = v33 - v34;
          v36 = v43;
        }
        if ((v36 & 1) != 0)
          goto LABEL_124;
        v44 = v11 - 2;
        v50 = &v30[16 * v11 - 32];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v53 = __OFSUB__(v51, v52);
        v54 = v51 - v52;
        v55 = v53;
        if (v53)
          goto LABEL_127;
        v56 = &v30[16 * v32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v43 = __OFSUB__(v57, v58);
        v59 = v57 - v58;
        if (v43)
          goto LABEL_130;
        if (__OFADD__(v54, v59))
          goto LABEL_131;
        if (v54 + v59 >= v35)
        {
          v60 = v35 < v59;
LABEL_76:
          if (v60)
            v32 = v44;
          goto LABEL_78;
        }
LABEL_70:
        if ((v55 & 1) != 0)
          goto LABEL_126;
        v63 = &v30[16 * v32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v43 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v43)
          goto LABEL_129;
        if (v66 < v54)
          goto LABEL_15;
LABEL_78:
        v71 = v32 - 1;
        if (v32 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_145;
        v72 = &v30[16 * v71];
        v73 = *(_QWORD *)v72;
        v74 = &v30[16 * v32];
        v75 = *((_QWORD *)v74 + 1);
        sub_100545B40((double *)(v10 + 88 * *(_QWORD *)v72), (double *)(v10 + 88 * *(_QWORD *)v74), v10 + 88 * v75, v125);
        if (v1)
          goto LABEL_95;
        if (v75 < v73)
          goto LABEL_119;
        if (v32 > *((_QWORD *)v126 + 2))
          goto LABEL_120;
        *(_QWORD *)v72 = v73;
        *(_QWORD *)&v30[16 * v71 + 8] = v75;
        v76 = *((_QWORD *)v126 + 2);
        if (v32 >= v76)
          goto LABEL_121;
        v27 = v126;
        v11 = v76 - 1;
        memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
        *((_QWORD *)v126 + 2) = v76 - 1;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v120;
    if (v9 >= v120)
    {
      v8 = v118;
      v108 = v126;
      v2 = v117;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100545B40(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t result;
  char *v21;
  double *v22;
  double *v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 88;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 88;
  v23 = __dst;
  v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -87)
    {
      if (a4 != __src || &__src[11 * v11] <= a4)
        memmove(a4, __src, 88 * v11);
      v16 = &v4[11 * v11];
      v21 = (char *)v16;
      v23 = v6;
      if (v7 < v6 && v10 >= 88)
      {
        v17 = (double *)(a3 - 88);
        do
        {
          v18 = v17 + 11;
          if (*(v6 - 3) >= *(v16 - 3))
          {
            v21 = (char *)(v16 - 11);
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 11, 0x58uLL);
            v19 = v6;
            v16 -= 11;
            if (v6 <= v7)
              break;
          }
          else
          {
            v19 = v6 - 11;
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 11, 0x58uLL);
            v23 = v6 - 11;
            if (v19 <= v7)
              break;
          }
          v17 -= 11;
          v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_10088EB88((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -87)
  {
    if (a4 != __dst || &__dst[11 * v9] <= a4)
      memmove(a4, __dst, 88 * v9);
    v12 = &v4[11 * v9];
    v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 88)
    {
      v13 = v4;
      while (1)
      {
        if (v13[8] >= v6[8])
        {
          v4 = v13 + 11;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 11;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 11;
          }
        }
        else
        {
          v14 = v6 + 11;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        memmove(v7, v15, 0x58uLL);
LABEL_18:
        v7 += 11;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v22 = v4;
        v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_100545DFC(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100545E84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _UNKNOWN **v15;

  v4 = type metadata accessor for UUID(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BluetoothConnectionObserver();
  v15 = &off_10107A580;
  *(_QWORD *)&v13 = a1;
  swift_defaultActor_initialize(a2);
  v7 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v7);
  *(_QWORD *)(a2 + 152) = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000033, 0x8000000100EDA380, v6);
  v8 = a2 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations) = _swiftEmptyArrayStorage;
  v10 = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected;
  *(_QWORD *)(a2 + v10) = sub_1006B9570((uint64_t)_swiftEmptyArrayStorage);
  sub_10000F9FC(&v13, a2 + 112);
  return a2;
}

_QWORD *sub_100545FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v31 = a2;
  v4 = type metadata accessor for SecureLocation(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (double *)((char *)&v27 - v9);
  __chkstk_darwin(v8);
  v13 = (char *)&v27 - v12;
  result = _swiftEmptyArrayStorage;
  v32 = _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v27 = v2;
    v16 = *(_QWORD *)(v11 + 72);
    v30 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v30;
    v18 = _swiftEmptyArrayStorage;
    v28 = v10;
    v29 = v16;
    while (1)
    {
      sub_10005972C(v17, (uint64_t)v13, type metadata accessor for SecureLocation);
      v19 = *((double *)v13 + 2);
      sub_10005972C((uint64_t)v13, (uint64_t)v10, type metadata accessor for SecureLocation);
      if (v19 != 0.0)
        break;
      v20 = v10[3];
      sub_1000126B0((uint64_t)v10, type metadata accessor for SecureLocation);
      if (v20 != 0.0)
        goto LABEL_9;
      sub_1000126B0((uint64_t)v13, type metadata accessor for SecureLocation);
LABEL_4:
      v17 += v16;
      if (!--v15)
        return v32;
    }
    sub_1000126B0((uint64_t)v10, type metadata accessor for SecureLocation);
LABEL_9:
    v22 = *(_QWORD *)v13;
    v21 = *((_QWORD *)v13 + 1);
    swift_bridgeObjectRetain(v21);
    sub_100C8346C(v22, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = (uint64_t)v7;
    sub_1000126EC((uint64_t)v13, (uint64_t)v7, type metadata accessor for SecureLocation);
    if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
      sub_10009B160(0, v18[2] + 1, 1);
    v18 = v32;
    v25 = v32[2];
    v24 = v32[3];
    if (v25 >= v24 >> 1)
    {
      sub_10009B160(v24 > 1, v25 + 1, 1);
      v18 = v32;
    }
    v18[2] = v25 + 1;
    v16 = v29;
    v26 = (uint64_t)v18 + v30 + v25 * v29;
    v7 = (char *)v23;
    sub_1000126EC(v23, v26, type metadata accessor for SecureLocation);
    v10 = v28;
    goto LABEL_4;
  }
  return result;
}

_QWORD *sub_1005461F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD aBlock[6];
  _QWORD *v58;

  v51 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin(v4);
  v48 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v45 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SecureLocation(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v14 = (uint64_t *)((char *)&v41 - v13);
  v15 = _swiftEmptyArrayStorage;
  v58 = _swiftEmptyArrayStorage;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v41 = v2;
    v42 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v17 = a1 + v42;
    v18 = &qword_1010EA000;
    v19 = *(_QWORD *)(v12 + 72);
    v43 = (uint64_t *)((char *)&v41 - v13);
    v44 = v11;
    v55 = v19;
    do
    {
      sub_10005972C(v17, (uint64_t)v14, type metadata accessor for SecureLocation);
      if (v18[21] != -1)
        swift_once(&qword_1010EA0A8, sub_10098F82C);
      swift_retain();
      v21 = sub_100995F58((uint64_t)v14);
      swift_release();
      if ((v21 & 1) != 0)
      {
        v54 = v16;
        if (qword_1010EA428 != -1)
          swift_once(&qword_1010EA428, sub_100C48554);
        v22 = qword_1011B7F60;
        v23 = *v14;
        v24 = v14[1];
        v52 = *(_QWORD *)(qword_1011B7F60 + 16);
        v53 = v23;
        v25 = swift_allocObject(&unk_10107DF38, 41, 7);
        *(_QWORD *)(v25 + 16) = v22;
        *(_QWORD *)(v25 + 24) = v23;
        *(_QWORD *)(v25 + 32) = v24;
        *(_BYTE *)(v25 + 40) = 1;
        aBlock[4] = sub_100555C00;
        aBlock[5] = v25;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_10107DF50;
        v26 = _Block_copy(aBlock);
        swift_retain_n(v22, 2);
        swift_bridgeObjectRetain(v24);
        v27 = v45;
        static DispatchQoS.unspecified.getter(v28);
        v56 = _swiftEmptyArrayStorage;
        v29 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v32 = v48;
        v33 = v50;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v30, v31, v50, v29);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v27, v32, v26);
        _Block_release(v26);
        (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v33);
        v34 = v27;
        v14 = v43;
        (*(void (**)(char *, uint64_t))(v46 + 8))(v34, v47);
        swift_release();
        swift_release();
        swift_bridgeObjectRetain(v24);
        sub_100C8346C(v53, v24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v35 = (uint64_t)v44;
        sub_1000126EC((uint64_t)v14, (uint64_t)v44, type metadata accessor for SecureLocation);
        v36 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
        {
          sub_10009B160(0, v36[2] + 1, 1);
          v36 = v58;
        }
        v38 = v36[2];
        v37 = v36[3];
        v18 = &qword_1010EA000;
        if (v38 >= v37 >> 1)
        {
          sub_10009B160(v37 > 1, v38 + 1, 1);
          v36 = v58;
        }
        v36[2] = v38 + 1;
        v39 = (char *)v36 + v42;
        v20 = v55;
        sub_1000126EC(v35, (uint64_t)&v39[v38 * v55], type metadata accessor for SecureLocation);
        v16 = v54;
      }
      else
      {
        sub_1000126B0((uint64_t)v14, type metadata accessor for SecureLocation);
        v20 = v55;
      }
      v17 += v20;
      --v16;
    }
    while (v16);
    return v58;
  }
  return v15;
}

_QWORD *sub_100546668(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v38 = a2;
  v4 = type metadata accessor for SecureLocation(0);
  v5 = __chkstk_darwin(v4);
  v45 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v44 = (uint64_t)&v37 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v37 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (double *)((char *)&v37 - v13);
  __chkstk_darwin(v12);
  v17 = (double *)((char *)&v37 - v16);
  result = _swiftEmptyArrayStorage;
  v46 = _swiftEmptyArrayStorage;
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v20 = *(unsigned __int8 *)(v15 + 80);
    v39 = v2;
    v40 = (v20 + 32) & ~v20;
    v21 = a1 + v40;
    v22 = _swiftEmptyArrayStorage;
    v37 = &type metadata for () + 1;
    v23 = *(_QWORD *)(v15 + 72);
    v41 = v11;
    v42 = v4;
    v43 = v23;
    while (1)
    {
      sub_10005972C(v21, (uint64_t)v17, type metadata accessor for SecureLocation);
      v24 = v17[2];
      sub_10005972C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocation);
      if (v24 != 0.0)
        break;
      v25 = v14[3];
      sub_1000126B0((uint64_t)v14, type metadata accessor for SecureLocation);
      if (v25 != 0.0)
        goto LABEL_9;
      sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocation);
LABEL_4:
      v21 += v23;
      if (!--v19)
        return v46;
    }
    sub_1000126B0((uint64_t)v14, type metadata accessor for SecureLocation);
LABEL_9:
    v26 = *(_QWORD *)((char *)v17 + *(int *)(v4 + 60));
    sub_10005972C((uint64_t)v17, (uint64_t)v11, type metadata accessor for SecureLocation);
    if (v26 == 1)
    {
      sub_1000126B0((uint64_t)v11, type metadata accessor for SecureLocation);
      sub_10005972C((uint64_t)v17, v44, type metadata accessor for SecureLocation);
    }
    else
    {
      v27 = *(_QWORD *)&v11[*(int *)(v4 + 60)];
      sub_1000126B0((uint64_t)v11, type metadata accessor for SecureLocation);
      sub_10005972C((uint64_t)v17, v44, type metadata accessor for SecureLocation);
      if (v27 != 3)
      {
        sub_1000126B0(v44, type metadata accessor for SecureLocation);
LABEL_17:
        v23 = v43;
        sub_1000126EC((uint64_t)v17, v45, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
        {
          sub_10009B160(0, v22[2] + 1, 1);
          v23 = v43;
        }
        v22 = v46;
        v36 = v46[2];
        v35 = v46[3];
        if (v36 >= v35 >> 1)
        {
          sub_10009B160(v35 > 1, v36 + 1, 1);
          v23 = v43;
          v22 = v46;
        }
        v22[2] = v36 + 1;
        sub_1000126EC(v45, (uint64_t)v22 + v40 + v36 * v23, type metadata accessor for SecureLocation);
        v11 = v41;
        v4 = v42;
        goto LABEL_4;
      }
    }
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    swift_retain();
    v28 = v44;
    v29 = sub_100996350(v44);
    swift_release();
    sub_1000126B0(v28, type metadata accessor for SecureLocation);
    if ((v29 & 1) != 0)
    {
      v30 = *(_QWORD **)v17;
      v31 = (_QWORD *)*((_QWORD *)v17 + 1);
      v32 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v32);
      v33 = v37;
      *(&v37 - 4) = v38;
      *(&v37 - 3) = v30;
      *(&v37 - 2) = v31;
      v34 = v39;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocationsSubscribeExpiringLocation", 70, 2, sub_100555DD0, &v37 - 6, v33);
      v39 = v34;
      v22 = v46;
    }
    goto LABEL_17;
  }
  return result;
}

id sub_100546A18()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  if ((_DWORD)v2)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "FetchConfig: simulateFeatureDisabled is ON. secureLocations will be disabled";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
    v5 = Logger.logObject.getter(v10);
    v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "FetchConfig: simulateFeatureDisabled is false";
      goto LABEL_10;
    }
  }

  return v2;
}

uint64_t sub_100546BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  void (*v16)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(_BYTE *, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Class isa;
  NSString v33;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = __chkstk_darwin(v2);
  v7 = &v35[-v6];
  v8 = __chkstk_darwin(v5);
  v10 = &v35[-v9];
  __chkstk_darwin(v8);
  v12 = &v35[-v11];
  v13 = sub_100545DFC(0x20000000000001uLL);
  if (v13 == 0x20000000000000)
    v14 = 950400.0;
  else
    v14 = ((double)v13 * 1.11022302e-16 * 4.0 + 7.0) * 86400.0;
  if ((sub_100546A18() & 1) != 0)
    v14 = 60.0;
  static Date.trustedNow.getter((uint64_t)v12);
  Date.addingTimeInterval(_:)(v14);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
  v16 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v1 + 16);
  v16(v7, v10, v0);
  v17 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v16)(v4, v12, v0);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(22, -1);
    v39 = v10;
    v22 = v21;
    v37 = swift_slowAlloc(64, -1);
    v41 = v37;
    *(_DWORD *)v22 = 136315394;
    v38 = v12;
    v23 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v36 = v20;
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v0, v23);
    v40 = sub_100016940(v24, v25, &v41);
    v12 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    v26 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
    v26(v7, v0);
    *(_WORD *)(v22 + 12) = 2080;
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v0, v23);
    v40 = sub_100016940(v27, v28, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    v26(v4, v0);
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v36, "CheckAndFetchConfig: Setting up next check data %s  CurrentTime %s", (uint8_t *)v22, 0x16u);
    v29 = v37;
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v22;
    v10 = v39;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    v26 = *(void (**)(_BYTE *, uint64_t))(v1 + 8);
    v26(v7, v0);
    v26(v4, v0);
  }

  v31 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  Date.timeIntervalSince1970.getter(v31);
  isa = Double._bridgeToObjectiveC()().super.super.isa;
  v33 = String._bridgeToObjectiveC()();
  objc_msgSend(v31, "setValue:forKey:", isa, v33);

  v26(v10, v0);
  return ((uint64_t (*)(_BYTE *, uint64_t))v26)(v12, v0);
}

void sub_100546FC8(char a1)
{
  id v2;
  Class isa;
  NSString v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;
  int v10;
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setValue:forKey:", isa, v4);

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7A18);
  oslog = Logger.logObject.getter(v6);
  v7 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "LabelledLocations - Updating fetch done to %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
}

void sub_10054715C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;
  uint64_t v8;

  v8 = a2;
  swift_bridgeObjectRetain(a2);
  sub_10051FF88(&v8);
  *(_QWORD *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  sub_100546FC8(1);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7A18);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "FetchLabelledLocations - Completed fetching location labels using decoder and saving them", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

}

uint64_t sub_100547274(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (uint64_t)sub_10001AA44(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v15, v3, v4);
  if (!v1)
  {
    v6 = v16;
    v7 = v17;
    sub_10001AA44(v15, v16);
    v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7);
    v10 = v8;
    v11 = v9;
    v12 = v8 == 0x76697463616F7270 && v9 == 0xE900000000000065;
    if (v12
      || (_stringCompareWithSmolCheck(_:_:expecting:)(0x76697463616F7270, 0xE900000000000065, v8, v9, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v10 == 0x776F6C6C616873 && v11 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x776F6C6C616873, 0xE700000000000000, v10, v11, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v5 = 1;
        goto LABEL_10;
      }
      if (v10 == 1702259052 && v11 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1702259052, 0xE400000000000000, v10, v11, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v5 = 2;
        goto LABEL_10;
      }
      if (v10 == 0xD000000000000013 && v11 == 0x8000000100ED9D40)
      {
        swift_bridgeObjectRelease();
        v5 = 5;
        goto LABEL_10;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100ED9D40, v10, v11, 0);
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
      {
        v5 = 5;
        goto LABEL_10;
      }
    }
    v5 = 0;
LABEL_10:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v5;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v5;
}

uint64_t type metadata accessor for SecureLocationsCoordinator()
{
  return objc_opt_self(_TtC12searchpartyd26SecureLocationsCoordinator);
}

uint64_t destroy for SecureLocationsCoordinator.SecureLocationsCommandPayload(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 88);
  v17 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v16);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v18);
  return a1;
}

__n128 initializeWithTake for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  v8 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v10 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCoordinator.SecureLocationsCommandPayload()
{
  return &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushCommands(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1005478D8 + 4 * byte_100E43005[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10054790C + 4 * byte_100E43000[v4]))();
}

uint64_t sub_10054790C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100547914(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10054791CLL);
  return result;
}

uint64_t sub_100547928(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100547930);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100547934(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10054793C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushCommands()
{
  return &type metadata for SecureLocationsPushCommands;
}

unint64_t sub_10054795C()
{
  unint64_t result;

  result = qword_1010FEE18;
  if (!qword_1010FEE18)
  {
    result = swift_getWitnessTable(aU_19, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1010FEE18);
  }
  return result;
}

void sub_1005479A0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t My;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  const char *v22;
  uint64_t v23;
  _QWORD v24[6];
  char v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _OWORD v42[14];

  v27 = a5;
  v28 = a3;
  v26 = a1;
  if (qword_1010E9CD8 != -1)
    swift_once(&qword_1010E9CD8, sub_1005201AC);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1010FE9B0);
  swift_bridgeObjectRetain_n(a2, 2);
  swift_bridgeObjectRetain_n(a4, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(38, -1);
    v12 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v42[0] = v12;
    *(_DWORD *)v11 = 141558787;
    *(_QWORD *)&v29 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 8, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    swift_bridgeObjectRetain(a2);
    *(_QWORD *)&v29 = sub_100016940(v26, a2, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 8, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v11 + 22) = 2082;
    swift_bridgeObjectRetain(a4);
    *(_QWORD *)&v29 = sub_100016940(v28, a4, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 8, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease_n(a4, 3);
    *(_WORD *)(v11 + 32) = 1026;
    LODWORD(v29) = v27 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, (char *)&v29 + 4, v11 + 34, v11 + 38);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "startLocationMonitoring findmyId: %{private,mask.hash}s. Policy: %{public}s. forcePublish: %{BOOL,public}d", (uint8_t *)v11, 0x26u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    if ((sub_100546A18() & 1) != 0)
      goto LABEL_16;
  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
    if ((sub_100546A18() & 1) != 0)
    {
LABEL_16:
      if (qword_1010EA098 != -1)
        swift_once(&qword_1010EA098, sub_10098F7D8);
      v18 = sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      if (!os_log_type_enabled(v19, v20))
        goto LABEL_21;
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      v22 = "LocationMonitor: secureLocations feature is disabled. Not proceeding with starting monitor";
      goto LABEL_20;
    }
  }
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v13 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v13, &type metadata for SecureLocationsConfig);
  swift_release();
  v42[10] = v39;
  v42[11] = v40;
  v42[12] = v41;
  v42[6] = v35;
  v42[7] = v36;
  v42[8] = v37;
  v42[9] = v38;
  v42[2] = v31;
  v42[3] = v32;
  v42[4] = v33;
  v42[5] = v34;
  v42[0] = v29;
  v42[1] = v30;
  sub_1003D09E0(v42);
  if ((BYTE8(v42[0]) & 1) == 0)
    goto LABEL_16;
  swift_retain();
  v14 = sub_10000D338();
  swift_release();
  if ((v14 & 1) == 0)
    return;
  if ((v28 != 0x6F725072656E776FLL || a4 != 0xEE00657669746361)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v28, a4, 0x6F725072656E776FLL, 0xEE00657669746361, 0) & 1) == 0
    || (My = type metadata accessor for Feature.FindMy(0),
        *((_QWORD *)&v30 + 1) = My,
        *(_QWORD *)&v31 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy), v16 = sub_100018F08(&v29), (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v16, enum case for Feature.FindMy.fmOwnerProactive(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(&v29), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v29), (My & 1) != 0))
  {
    v17 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v17);
    v24[2] = v26;
    v24[3] = a2;
    v24[4] = v28;
    v24[5] = a4;
    v25 = v27 & 1;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.startMonitor", 58, 2, sub_10055461C, v24, &type metadata for () + 1);
    return;
  }
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v23 = sub_10001A9E8(v7, (uint64_t)qword_1011B7A18);
  v19 = Logger.logObject.getter(v23);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    v22 = "ownerProactive feature is disabled";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v22, v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }
LABEL_21:

}

void sub_100547F60(uint64_t *a1, uint64_t a2, uint64_t isEscapingClosureAtFileLocation, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v49;
  uint64_t aBlock[5];
  uint64_t v51;

  v6 = a4;
  if (!a1)
    goto LABEL_20;
  v8 = a1;
  v46 = a5;
  swift_errorRetain(a1);
  if (qword_1010EA098 != -1)
    goto LABEL_27;
  while (1)
  {
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7A18);
    swift_errorRetain(v8);
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v49 = (uint64_t)v8;
      aBlock[0] = v14;
      *(_DWORD *)v13 = 136315138;
      swift_errorRetain(v8);
      v15 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v16 = String.init<A>(describing:)(&v49, v15);
      v49 = sub_100016940(v16, v17, aBlock);
      v6 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error while resubscribing after receiving key update %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);
    }

    swift_errorRetain(v8);
    v18 = swift_errorRetain(v8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(64, -1);
      aBlock[0] = v22;
      *(_DWORD *)v21 = 136446466;
      v23 = 0xE900000000000065;
      v24 = 0x76697463616F7270;
      switch(isEscapingClosureAtFileLocation)
      {
        case 0:
          break;
        case 1:
          v23 = 0xE700000000000000;
          v24 = 0x776F6C6C616873;
          break;
        case 2:
          v23 = 0xE400000000000000;
          v24 = 1702259052;
          break;
        case 3:
          v23 = 0xE500000000000000;
          v24 = 0x72656E776FLL;
          break;
        case 4:
          v23 = 0xEE00657669746361;
          v24 = 0x6F725072656E776FLL;
          break;
        case 5:
          v23 = 0x8000000100ED9D40;
          v24 = 0xD000000000000013;
          break;
        default:
          v23 = 0xE700000000000000;
          v24 = 0x6E776F6E6B6E75;
          break;
      }
      v49 = sub_100016940(v24, v23, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      v49 = (uint64_t)v8;
      swift_errorRetain(v8);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v26 = String.init<A>(describing:)(&v49, v25);
      v49 = sub_100016940(v26, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error while resubscribing in %{public}s after receiving key update %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v6 = a4;
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);

    }
    swift_bridgeObjectRetain_n(v6, 2);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      aBlock[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v6 = a4;
      swift_bridgeObjectRetain(a4);
      v34 = Array.description.getter(v33, &type metadata for String);
      v36 = v35;
      swift_bridgeObjectRelease();
      v49 = sub_100016940(v34, v36, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, aBlock, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(a4, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "submit subscription error for %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      swift_errorRelease(v8);

      swift_bridgeObjectRelease_n(v6, 2);
    }
    a5 = v46;
LABEL_20:
    v37 = *(_QWORD *)(v6 + 16);
    if (!v37)
      break;
    v38 = *(_QWORD *)(a5 + 48);
    swift_bridgeObjectRetain(v6);
    v8 = (uint64_t *)(v6 + 40);
    while (1)
    {
      v39 = *(v8 - 1);
      v40 = *v8;
      v41 = *(NSObject **)(v38 + 16);
      v42 = (_QWORD *)swift_allocObject(&unk_10107E398, 48, 7);
      v42[2] = v38;
      v42[3] = v39;
      v42[4] = v40;
      v42[5] = a6;
      v43 = swift_allocObject(&unk_10107E3C0, 32, 7);
      *(_QWORD *)(v43 + 16) = sub_100555C04;
      *(_QWORD *)(v43 + 24) = v42;
      aBlock[4] = (uint64_t)sub_10005CBA4;
      v51 = v43;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10001D8B8;
      aBlock[3] = (uint64_t)&unk_10107E3D8;
      v44 = _Block_copy(aBlock);
      v6 = v51;
      swift_bridgeObjectRetain_n(v40, 2);
      swift_retain();
      v45 = a6;
      swift_retain();
      swift_release();
      dispatch_sync(v41, v44);
      _Block_release(v44);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v43, "", 120, 116, 35, 1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        break;
      v8 += 2;
      if (!--v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    swift_once(&qword_1010EA098, sub_10098F7D8);
  }
LABEL_25:
  Transaction.capture()();
}

void sub_100548664(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  os_log_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  id v62;
  Class isa;
  id v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  id v73;
  NSString v74;
  id v75;
  id v76;
  Class v77;
  id v78;
  id v79;
  uint64_t v80;
  os_log_t v81;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  _QWORD *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _OWORD v112[14];

  v87 = a4;
  LODWORD(v94) = a3;
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v92 = *(_QWORD *)(v15 - 8);
  v93 = v15;
  __chkstk_darwin(v15);
  v91 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v89 = *(_QWORD *)(v17 - 8);
  v90 = v17;
  __chkstk_darwin(v17);
  v88 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (_QWORD *)swift_allocObject(&unk_10107E320, 56, 7);
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a7;
  v19[5] = a8;
  v19[6] = a9;
  v20 = qword_1010EA098;
  swift_retain();
  swift_bridgeObjectRetain(a7);
  v97 = a8;
  swift_retain();
  v96 = a9;
  if (v20 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a1, 2);
  v23 = a2;
  v95 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = v25;
  v27 = a1;
  if (os_log_type_enabled(v24, v25))
  {
    v28 = swift_slowAlloc(38, -1);
    v83 = v26;
    v29 = v28;
    v82 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v112[0] = v82;
    *(_DWORD *)v29 = 134218754;
    *(_QWORD *)&v99 = *(_QWORD *)(a1 + 16);
    v86 = a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2080;
    v30 = objc_msgSend(v23, "clientApp");
    v84 = v19;
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v81 = v24;
    v33 = v32;
    v85 = a6;
    v35 = v34;

    *(_QWORD *)&v99 = sub_100016940(v33, v35, (uint64_t *)v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8, v29 + 14, v29 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    v37 = Array.description.getter(v36, &type metadata for String);
    v39 = v38;
    swift_bridgeObjectRelease();
    v40 = v37;
    v19 = v84;
    *(_QWORD *)&v99 = sub_100016940(v40, v39, (uint64_t *)v112);
    a7 = v86;
    v27 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 8, v29 + 24, v29 + 32);
    swift_bridgeObjectRelease_n(a1, 2);
    a6 = v85;
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 32) = 1024;
    LODWORD(v99) = v94 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 4, v29 + 34, v29 + 38);
    v41 = v81;
    _os_log_impl((void *)&_mh_execute_header, v81, (os_log_type_t)v83, "SubscribeAndFetch location for %ld IDs for clientApp %s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v29, 0x26u);
    v42 = v82;
    swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    v43 = sub_100546A18();
    if ((v43 & 1) != 0)
      goto LABEL_12;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v43 = sub_100546A18();
    if ((v43 & 1) != 0)
    {
LABEL_12:
      v59 = Logger.logObject.getter(v43);
      v60 = static os_log_type_t.default.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v61, 2u);
        swift_slowDealloc(v61, -1, -1);
      }

      objc_msgSend(v23, "subscriptionMode");
      v62 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v64 = objc_msgSend(v62, "initWithExpiryTime:locations:", isa, 15.0);

      type metadata accessor for SecureLocationsError(0);
      v66 = v65;
      *(_QWORD *)&v99 = 6;
      v67 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v68 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(v112, &v99, v67, v66, v68);
      v69 = *(void **)&v112[0];
      sub_100547F60(*(uint64_t **)&v112[0], a5, a6, a7, v97, v96);
      swift_release();

      return;
    }
  }
  v44 = v27;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v45 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v45, &type metadata for SecureLocationsConfig);
  swift_release();
  v112[10] = v109;
  v112[11] = v110;
  v112[12] = v111;
  v112[6] = v105;
  v112[7] = v106;
  v112[8] = v107;
  v112[9] = v108;
  v112[2] = v101;
  v112[3] = v102;
  v112[4] = v103;
  v112[5] = v104;
  v112[0] = v99;
  v112[1] = v100;
  v43 = sub_1003D09E0(v112);
  if ((BYTE8(v112[0]) & 1) == 0)
    goto LABEL_12;
  if (*(_QWORD *)(v44 + 16))
  {
    v46 = v87;
    v47 = swift_allocObject(&unk_10107E348, 64, 7);
    *(_QWORD *)(v47 + 16) = v44;
    *(_QWORD *)(v47 + 24) = v46;
    *(_QWORD *)(v47 + 32) = v23;
    *(_BYTE *)(v47 + 40) = v94 & 1;
    *(_QWORD *)(v47 + 48) = sub_100555958;
    *(_QWORD *)(v47 + 56) = v19;
    *(_QWORD *)&v101 = sub_100553DC0;
    *((_QWORD *)&v101 + 1) = v47;
    *(_QWORD *)&v99 = _NSConcreteStackBlock;
    *((_QWORD *)&v99 + 1) = 1107296256;
    *(_QWORD *)&v100 = sub_100016FB8;
    *((_QWORD *)&v100 + 1) = &unk_10107E360;
    v48 = v23;
    v49 = _Block_copy(&v99);
    swift_bridgeObjectRetain(v44);
    v50 = v48;
    swift_retain();
    v51 = swift_retain();
    v52 = v88;
    static DispatchQoS.unspecified.getter(v51);
    v98 = _swiftEmptyArrayStorage;
    v53 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v54 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v55 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v56 = v91;
    v57 = v54;
    v58 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v98, v57, v55, v93, v53);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v52, v56, v49);
    _Block_release(v49);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v56, v58);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v52, v90);
    swift_release();
    swift_release();
  }
  else
  {
    v94 = v23;
    v70 = Logger.logObject.getter(v43);
    v71 = static os_log_type_t.default.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "No findMyIds specified for SubscribeAndFetch - not proceeding", v72, 2u);
      swift_slowDealloc(v72, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v73 = objc_allocWithZone((Class)NSError);
    v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v75 = objc_msgSend(v73, "initWithDomain:code:userInfo:", v74, 0, 0);

    objc_msgSend(v94, "subscriptionMode");
    v76 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
    v77 = Array._bridgeToObjectiveC()().super.isa;
    v78 = objc_msgSend(v76, "initWithExpiryTime:locations:", v77, 15.0);

    v79 = v75;
    sub_100547F60((uint64_t *)v75, a5, a6, a7, v97, v96);
    swift_release();

  }
}

void sub_100548F50(uint64_t a1, void *a2, int a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  id v54;
  Class isa;
  id v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  NSString v67;
  id v68;
  id v69;
  Class v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(void *, uint64_t);
  _QWORD *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[14];

  v79 = a4;
  v85 = a3;
  v78 = type metadata accessor for DispatchWorkItemFlags(0);
  v84 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v83 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v81 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  __chkstk_darwin(v13);
  v80 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (_QWORD *)swift_allocObject(&unk_10107D218, 40, 7);
  v88 = a5;
  v15[2] = a5;
  v15[3] = a6;
  v15[4] = a7;
  v16 = qword_1010EA098;
  v86 = a6;
  swift_retain();
  swift_retain();
  if (v16 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a1, 2);
  v19 = a2;
  v87 = v18;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(38, -1);
    v75 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v103[0] = v75;
    *(_DWORD *)v22 = 134218754;
    *(_QWORD *)&v90 = *(_QWORD *)(a1 + 16);
    v76 = a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    v74 = v22 + 14;
    v23 = objc_msgSend(v19, "clientApp");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v77 = v15;
    v25 = v24;
    v26 = v19;
    v28 = v27;

    *(_QWORD *)&v90 = sub_100016940(v25, v28, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v74, v22 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(a1);
    v30 = Array.description.getter(v29, &type metadata for String);
    v32 = v31;
    swift_bridgeObjectRelease();
    v33 = v30;
    v19 = v26;
    *(_QWORD *)&v90 = sub_100016940(v33, v32, (uint64_t *)v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 8, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(a1, 2);
    v15 = v77;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 1024;
    LODWORD(v90) = v85 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, (char *)&v90 + 4, v22 + 34, v22 + 38);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "SubscribeAndFetch location for %ld IDs for clientApp %s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v22, 0x26u);
    v34 = v75;
    swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v35 = sub_100546A18();
    if ((v35 & 1) != 0)
      goto LABEL_12;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v35 = sub_100546A18();
    if ((v35 & 1) != 0)
    {
LABEL_12:
      v51 = Logger.logObject.getter(v35);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
      }

      objc_msgSend(v19, "subscriptionMode");
      v54 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v56 = objc_msgSend(v54, "initWithExpiryTime:locations:", isa, 15.0);

      type metadata accessor for SecureLocationsError(0);
      v58 = v57;
      *(_QWORD *)&v90 = 6;
      v59 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v60 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(v103, &v90, v59, v58, v60);
      v61 = *(void **)&v103[0];
      sub_10052CAA4(v56, *(uint64_t *)&v103[0], v88);
      swift_release();

      return;
    }
  }
  v36 = a1;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v37 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v37, &type metadata for SecureLocationsConfig);
  swift_release();
  v103[10] = v100;
  v103[11] = v101;
  v103[12] = v102;
  v103[6] = v96;
  v103[7] = v97;
  v103[8] = v98;
  v103[9] = v99;
  v103[2] = v92;
  v103[3] = v93;
  v103[4] = v94;
  v103[5] = v95;
  v103[0] = v90;
  v103[1] = v91;
  v35 = sub_1003D09E0(v103);
  if ((BYTE8(v103[0]) & 1) == 0)
    goto LABEL_12;
  if (*(_QWORD *)(v36 + 16))
  {
    v38 = v79;
    v39 = swift_allocObject(&unk_10107D240, 64, 7);
    *(_QWORD *)(v39 + 16) = v36;
    *(_QWORD *)(v39 + 24) = v38;
    *(_QWORD *)(v39 + 32) = v19;
    *(_BYTE *)(v39 + 40) = v85 & 1;
    *(_QWORD *)(v39 + 48) = sub_10055422C;
    *(_QWORD *)(v39 + 56) = v15;
    *(_QWORD *)&v92 = sub_100553DC0;
    *((_QWORD *)&v92 + 1) = v39;
    *(_QWORD *)&v90 = _NSConcreteStackBlock;
    *((_QWORD *)&v90 + 1) = 1107296256;
    *(_QWORD *)&v91 = sub_100016FB8;
    *((_QWORD *)&v91 + 1) = &unk_10107D258;
    v40 = v19;
    v41 = _Block_copy(&v90);
    swift_bridgeObjectRetain(v36);
    v42 = v40;
    swift_retain();
    v43 = swift_retain();
    v44 = v80;
    static DispatchQoS.unspecified.getter(v43);
    v89 = _swiftEmptyArrayStorage;
    v45 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v46 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v47 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v48 = v83;
    v49 = v46;
    v50 = v78;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v89, v49, v47, v78, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v48, v41);
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v84 + 8))(v48, v50);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v44, v82);
    swift_release();
    swift_release();
  }
  else
  {
    v62 = v19;
    v63 = Logger.logObject.getter(v35);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "No findMyIds specified for SubscribeAndFetch - not proceeding", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v66 = objc_allocWithZone((Class)NSError);
    v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v68 = objc_msgSend(v66, "initWithDomain:code:userInfo:", v67, 0, 0);

    objc_msgSend(v62, "subscriptionMode");
    v69 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
    v70 = Array._bridgeToObjectiveC()().super.isa;
    v71 = objc_msgSend(v69, "initWithExpiryTime:locations:", v70, 15.0);

    v72 = v68;
    sub_10052CAA4(v71, (uint64_t)v68, v88);
    swift_release();

  }
}

void sub_100549814(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  os_log_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  const void *v44;
  id v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  id v55;
  Class isa;
  id v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  id v66;
  NSString v67;
  id v68;
  id v69;
  Class v70;
  id v71;
  id v72;
  os_log_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD v99[14];

  v83 = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v82 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v80 = *(_QWORD *)(v12 - 8);
  v81 = v12;
  __chkstk_darwin(v12);
  v79 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = qword_1010EA098;
  swift_retain();
  if (v14 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
  swift_bridgeObjectRetain_n(a1, 2);
  v17 = a2;
  v84 = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(38, -1);
    v75 = v20;
    v22 = v21;
    v74 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v99[0] = v74;
    *(_DWORD *)v22 = 134218754;
    *(_QWORD *)&v86 = *(_QWORD *)(a1 + 16);
    v77 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 8, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    v23 = objc_msgSend(v17, "clientApp");
    v73 = v18;
    v24 = a1;
    v25 = v10;
    v26 = v17;
    v27 = v23;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v76 = a4;
    v29 = v28;
    v78 = a5;
    v31 = v30;

    v17 = v26;
    v10 = v25;
    a1 = v24;
    *(_QWORD *)&v86 = sub_100016940(v29, v31, (uint64_t *)v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 8, v22 + 14, v22 + 22);

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    swift_bridgeObjectRetain(v24);
    v33 = Array.description.getter(v32, &type metadata for String);
    v35 = v34;
    swift_bridgeObjectRelease();
    v36 = v33;
    a4 = v76;
    *(_QWORD *)&v86 = sub_100016940(v36, v35, (uint64_t *)v99);
    v9 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 8, v22 + 24, v22 + 32);
    swift_bridgeObjectRelease_n(v24, 2);
    a5 = v78;
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 1024;
    LODWORD(v86) = v83 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 4, v22 + 34, v22 + 38);
    v37 = v73;
    _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v75, "SubscribeAndFetch location for %ld IDs for clientApp %s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v22, 0x26u);
    v38 = v74;
    swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v39 = sub_100546A18();
    if ((v39 & 1) != 0)
      goto LABEL_12;
  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    v39 = sub_100546A18();
    if ((v39 & 1) != 0)
    {
LABEL_12:
      v52 = Logger.logObject.getter(v39);
      v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v54, 2u);
        swift_slowDealloc(v54, -1, -1);
      }

      objc_msgSend(v17, "subscriptionMode");
      v55 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      v57 = objc_msgSend(v55, "initWithExpiryTime:locations:", isa, 15.0);

      type metadata accessor for SecureLocationsError(0);
      v59 = v58;
      *(_QWORD *)&v86 = 6;
      v60 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v61 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
      _BridgedStoredNSError.init(_:userInfo:)(v99, &v86, v60, v59, v61);
      v62 = *(void **)&v99[0];
      Transaction.capture()();
      swift_release();

      return;
    }
  }
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v40 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v40, &type metadata for SecureLocationsConfig);
  swift_release();
  v99[10] = v96;
  v99[11] = v97;
  v99[12] = v98;
  v99[6] = v92;
  v99[7] = v93;
  v99[8] = v94;
  v99[9] = v95;
  v99[2] = v88;
  v99[3] = v89;
  v99[4] = v90;
  v99[5] = v91;
  v99[0] = v86;
  v99[1] = v87;
  v39 = sub_1003D09E0(v99);
  if ((BYTE8(v99[0]) & 1) == 0)
    goto LABEL_12;
  if (*(_QWORD *)(a1 + 16))
  {
    v84 = *(_QWORD *)(a4 + 296);
    v41 = swift_allocObject(&unk_10107CE58, 64, 7);
    *(_QWORD *)(v41 + 16) = a1;
    *(_QWORD *)(v41 + 24) = a4;
    *(_QWORD *)(v41 + 32) = v17;
    *(_BYTE *)(v41 + 40) = v83 & 1;
    *(_QWORD *)(v41 + 48) = j___s10FindMyBase11TransactionC7captureyyF;
    *(_QWORD *)(v41 + 56) = a5;
    *(_QWORD *)&v88 = sub_100553DC0;
    *((_QWORD *)&v88 + 1) = v41;
    *(_QWORD *)&v86 = _NSConcreteStackBlock;
    *((_QWORD *)&v86 + 1) = 1107296256;
    *(_QWORD *)&v87 = sub_100016FB8;
    *((_QWORD *)&v87 + 1) = &unk_10107CE70;
    v42 = _Block_copy(&v86);
    v43 = a1;
    v44 = v42;
    swift_bridgeObjectRetain(v43);
    v45 = v17;
    swift_retain();
    v46 = swift_retain();
    v47 = v79;
    static DispatchQoS.unspecified.getter(v46);
    v85 = _swiftEmptyArrayStorage;
    v48 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v49 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v50 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v51 = v82;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v85, v49, v50, v9, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v47, v51, v44);
    _Block_release(v44);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v51, v9);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v47, v81);
    swift_release();
    swift_release();
  }
  else
  {
    v63 = Logger.logObject.getter(v39);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "No findMyIds specified for SubscribeAndFetch - not proceeding", v65, 2u);
      swift_slowDealloc(v65, -1, -1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v66 = objc_allocWithZone((Class)NSError);
    v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v68 = objc_msgSend(v66, "initWithDomain:code:userInfo:", v67, 0, 0);

    objc_msgSend(v17, "subscriptionMode");
    v69 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10000F4A0(0, (unint64_t *)&qword_1010F1598, SPSecureLocation_ptr);
    v70 = Array._bridgeToObjectiveC()().super.isa;
    v71 = objc_msgSend(v69, "initWithExpiryTime:locations:", v70, 15.0);

    v72 = v68;
    Transaction.capture()();
    swift_release();

  }
}

uint64_t sub_10054A084(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  id v21;

  v14 = objc_msgSend(a2, "clientApp");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  if (v15 == 0xD000000000000017 && v17 == 0x8000000100ED6940)
  {
    swift_bridgeObjectRelease();
    v18 = 1;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, 0xD000000000000017, 0x8000000100ED6940, 0);
    swift_bridgeObjectRelease();
  }
  v19 = swift_allocObject(&unk_10107DF10, 72, 7);
  v20 = v18 & 1;
  *(_BYTE *)(v19 + 16) = v20;
  *(_QWORD *)(v19 + 24) = a3;
  *(_QWORD *)(v19 + 32) = a4;
  *(_QWORD *)(v19 + 40) = a2;
  *(_QWORD *)(v19 + 48) = a5;
  *(_QWORD *)(v19 + 56) = a6;
  *(_QWORD *)(v19 + 64) = a7;
  swift_retain();
  swift_retain();
  v21 = a2;
  swift_retain();
  swift_retain();
  sub_10044036C(a1, v20, (uint64_t)sub_1005555CC, v19);
  return swift_release();
}

uint64_t sub_10054A1D8(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  double v44;
  double v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  id v62;
  id v63;
  double v64;
  double v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  unint64_t v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  id v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  __n128 v106;
  uint64_t *v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  __n128 v127;
  char *v128;
  __n128 v129;
  id v130;
  id v131;
  char *v132;
  id v133;
  int v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _OWORD v149[13];
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;

  v112 = a7;
  v113 = a8;
  v111 = a6;
  v108 = a4;
  v109 = a5;
  v134 = a2;
  v114 = a1;
  v110 = a9;
  v10 = type metadata accessor for SecureLocation(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v13 = __chkstk_darwin(v12);
  v136 = (unint64_t *)((char *)v106.n128_u64 - v14);
  v15 = __chkstk_darwin(v13);
  v132 = (char *)&v106 - v16;
  v17 = __chkstk_darwin(v15);
  v144 = (uint64_t *)((char *)&v106 - v18);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v106 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v106 - v23;
  v25 = __chkstk_darwin(v22);
  v123 = a3;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
  {
    v138 = (uint64_t)&v106 - v26;
    v115 = (uint64_t *)v27;
    v116 = v25;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v28 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v28, &type metadata for SecureLocationsConfig);
    swift_release();
    v160 = v149[10];
    v161 = v149[11];
    v162 = v149[12];
    v156 = v149[6];
    v157 = v149[7];
    v158 = v149[8];
    v159 = v149[9];
    v152 = v149[2];
    v153 = v149[3];
    v154 = v149[4];
    v155 = v149[5];
    v150 = v149[0];
    v151 = v149[1];
    sub_1003D09E0(&v150);
    v122 = *(_QWORD *)(v114 + 16);
    if (v122)
    {
      v29 = *(double *)&v151;
      v120 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      v119 = v114 + v120;
      v30 = *(_QWORD *)(v11 + 72);
      v107 = &v146;
      v31 = swift_bridgeObjectRetain(v114);
      v32 = 0;
      v33 = _swiftEmptyArrayStorage;
      v31.n128_u64[0] = 136315906;
      v129 = v31;
      v128 = (char *)&type metadata for Any + 8;
      v31.n128_u64[0] = 136315650;
      v127 = v31;
      v31.n128_u64[0] = 136315394;
      v106 = v31;
      v34 = (uint64_t)v132;
      v35 = v138;
      v117 = v21;
      v118 = v24;
      v121 = v30;
      while (1)
      {
        v126 = v32;
        sub_10005972C(v119 + v30 * v32, v35, type metadata accessor for SecureLocation);
        sub_10005972C(v35, (uint64_t)v24, type metadata accessor for SecureLocation);
        v36 = *(_QWORD *)(v123 + 104);
        if (!*(_QWORD *)(v36 + 16))
          goto LABEL_48;
        v140 = *(_QWORD *)(v36 + 16);
        v124 = v33;
        swift_bridgeObjectRetain(v36);
        v125 = v37;
        v38 = (unint64_t *)(v37 + 56);
        while (1)
        {
          v39 = v34;
          v40 = v35;
          v42 = *(v38 - 2);
          v41 = *(v38 - 1);
          v43 = *v38;
          v44 = *((double *)v38 + 3);
          v45 = *((double *)v38 + 4);
          v46 = v38[5];
          v47 = v38[7];
          v141 = v38[6];
          v139 = v38;
          v48 = v38[2];
          v49 = qword_1010EA098;
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v43);
          swift_bridgeObjectRetain(v48);
          swift_bridgeObjectRetain(v47);
          if (v49 != -1)
            swift_once(&qword_1010EA098, sub_10098F7D8);
          v50 = type metadata accessor for Logger(0);
          v51 = sub_10001A9E8(v50, (uint64_t)qword_1011B7A18);
          sub_10005972C(v40, (uint64_t)v144, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v42, 4);
          swift_bridgeObjectRetain_n(v43, 4);
          swift_bridgeObjectRetain_n(v48, 4);
          swift_bridgeObjectRetain_n(v47, 4);
          v137 = v51;
          v53 = Logger.logObject.getter(v52);
          v54 = static os_log_type_t.info.getter(v53);
          v55 = os_log_type_enabled(v53, v54);
          v142 = v48;
          v143 = v42;
          v135 = v41;
          if (v55)
          {
            v56 = swift_slowAlloc(42, -1);
            v133 = (id)swift_slowAlloc(96, -1);
            v145 = (uint64_t)v133;
            *(_DWORD *)v56 = v129.n128_u32[0];
            swift_bridgeObjectRetain(v43);
            *(_QWORD *)(v56 + 4) = sub_100016940(v41, v43, &v145);
            swift_bridgeObjectRelease();
            *(_WORD *)(v56 + 12) = 2080;
            if (v47)
              v57 = v141;
            else
              v57 = 1818848800;
            if (v47)
              v58 = v47;
            else
              v58 = 0xE400000000000000;
            swift_bridgeObjectRetain(v47);
            *(_QWORD *)(v56 + 14) = sub_100016940(v57, v58, &v145);
            swift_bridgeObjectRelease_n(v47, 2);
            swift_bridgeObjectRelease_n(v48, 2);
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v56 + 22) = 2080;
            v59 = *v144;
            v60 = v144[1];
            swift_bridgeObjectRetain(v60);
            *(_QWORD *)(v56 + 24) = sub_100016940(v59, v60, &v145);
            v61 = v132;
            swift_bridgeObjectRelease();
            sub_1000126B0((uint64_t)v144, type metadata accessor for SecureLocation);
            *(_WORD *)(v56 + 32) = 2048;
            *(_QWORD *)(v56 + 34) = v46;
            swift_bridgeObjectRelease_n(v47, 2);
            swift_bridgeObjectRelease_n(v48, 2);
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            v34 = (uint64_t)v61;
            v35 = v138;
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v56, 0x2Au);
            v62 = v133;
            swift_arrayDestroy(v133, 3, v128);
            swift_slowDealloc(v62, -1, -1);
            swift_slowDealloc(v56, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n(v47, 2);
            swift_bridgeObjectRelease_n(v48, 2);
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            sub_1000126B0((uint64_t)v144, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v47, 2);
            swift_bridgeObjectRelease_n(v48, 2);
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            v35 = v40;
            v34 = v39;
          }
          sub_10005972C(v35, v34, type metadata accessor for SecureLocation);
          if (!v47 && (v134 & 1) != 0)
          {
            sub_1000126B0(v34, type metadata accessor for SecureLocation);
            goto LABEL_24;
          }
          sub_10005972C(v34, (uint64_t)v136, type metadata accessor for SecureLocation);
          if ((v134 & 1) != 0)
          {
            sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
            sub_1000126B0(v34, type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }
          if (v47)
            break;
          swift_bridgeObjectRetain(v136[1]);
          sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_1000126B0(v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v38 = v139 + 11;
          if (!--v140)
          {
            swift_bridgeObjectRelease();
            v21 = v117;
            v24 = v118;
            v33 = v124;
            goto LABEL_48;
          }
        }
        if (v141 == *v136 && v47 == v136[1])
        {
          swift_bridgeObjectRetain(v47);
          sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_1000126B0(v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
        }
        else
        {
          v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v141, v47, *v136, v136[1], 0);
          swift_bridgeObjectRetain(v47);
          sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_1000126B0(v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          if ((v78 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v35 = v138;
            goto LABEL_9;
          }
        }
LABEL_24:
        v63 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v44, v45);
        v133 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(v138 + 24), *(double *)(v138 + 16));
        objc_msgSend(v63, "distanceFromLocation:");
        v65 = v64;
        v66 = v143;
        swift_bridgeObjectRetain_n(v143, 2);
        swift_bridgeObjectRetain_n(v43, 2);
        v67 = v142;
        swift_bridgeObjectRetain_n(v142, 2);
        swift_bridgeObjectRetain_n(v47, 2);
        v69 = Logger.logObject.getter(v68);
        v70 = v43;
        v71 = static os_log_type_t.info.getter(v69);
        if (os_log_type_enabled(v69, v71))
        {
          v72 = swift_slowAlloc(32, -1);
          v131 = v63;
          v73 = v72;
          v130 = (id)swift_slowAlloc(64, -1);
          v145 = (uint64_t)v130;
          *(_DWORD *)v73 = v127.n128_u32[0];
          swift_bridgeObjectRetain(v70);
          *(_QWORD *)(v73 + 4) = sub_100016940(v135, v70, &v145);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 12) = 2080;
          if (v47)
            v74 = v141;
          else
            v74 = 0x206C696E20;
          if (v47)
            v75 = v47;
          else
            v75 = 0xE500000000000000;
          swift_bridgeObjectRetain(v47);
          *(_QWORD *)(v73 + 14) = sub_100016940(v74, v75, &v145);
          swift_bridgeObjectRelease_n(v47, 2);
          swift_bridgeObjectRelease_n(v67, 2);
          swift_bridgeObjectRelease_n(v70, 2);
          swift_bridgeObjectRelease_n(v66, 2);
          v34 = (uint64_t)v132;
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 22) = 2048;
          *(double *)(v73 + 24) = v65;
          _os_log_impl((void *)&_mh_execute_header, v69, v71, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v73, 0x20u);
          v76 = v130;
          swift_arrayDestroy(v130, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1, -1);
          v77 = v73;
          v63 = v131;
          swift_slowDealloc(v77, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v47, 2);
          swift_bridgeObjectRelease_n(v67, 2);
          swift_bridgeObjectRelease_n(v70, 2);
          swift_bridgeObjectRelease_n(v66, 2);
        }
        if (v65 > v29)
        {

          swift_bridgeObjectRelease();
          v35 = v138;
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v24 = v118;
        swift_beginAccess(v118, &v148, 1, 0);
        v79 = v116;
        v80 = &v24[*(int *)(v116 + 64)];
        *(_QWORD *)v80 = v135;
        *((_QWORD *)v80 + 1) = v70;
        swift_bridgeObjectRelease();
        v81 = v115;
        v82 = sub_10005972C(v138, (uint64_t)v115, type metadata accessor for SecureLocation);
        v83 = Logger.logObject.getter(v82);
        v84 = static os_log_type_t.default.getter(v83);
        if (os_log_type_enabled(v83, v84))
        {
          v85 = swift_slowAlloc(22, -1);
          v143 = swift_slowAlloc(64, -1);
          v147 = v143;
          *(_DWORD *)v85 = v106.n128_u32[0];
          v86 = (uint64_t *)&v24[*(int *)(v79 + 64)];
          v87 = v86[1];
          v145 = *v86;
          v146 = v87;
          swift_bridgeObjectRetain(v87);
          v88 = sub_10001A9A8(&qword_1010F6350);
          v89 = String.init<A>(describing:)(&v145, v88);
          v145 = sub_100016940(v89, v90, &v147);
          v91 = v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v107, v85 + 4, v85 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v85 + 12) = 2080;
          v92 = *v81;
          v93 = v81[1];
          swift_bridgeObjectRetain(v93);
          v145 = sub_100016940(v92, v93, &v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v91, v85 + 14, v85 + 22);
          v24 = v118;
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v81, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "LabelledLocations Adding label %s to location %s", (uint8_t *)v85, 0x16u);
          v94 = v143;
          swift_arrayDestroy(v143, 2, (char *)&type metadata for Any + 8);
          v34 = (uint64_t)v132;
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v85, -1, -1);
        }
        else
        {
          sub_1000126B0((uint64_t)v81, type metadata accessor for SecureLocation);
        }

        v21 = v117;
        v33 = v124;
LABEL_48:
        swift_beginAccess(v24, v149, 0, 0);
        sub_10005972C((uint64_t)v24, (uint64_t)v21, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
          v33 = (_QWORD *)sub_1007C9DB4(0, v33[2] + 1, 1, (unint64_t)v33);
        v96 = v33[2];
        v95 = v33[3];
        v97 = v33;
        v30 = v121;
        if (v96 >= v95 >> 1)
        {
          v99 = sub_1007C9DB4(v95 > 1, v96 + 1, 1, (unint64_t)v33);
          v30 = v121;
          v97 = (_QWORD *)v99;
        }
        v98 = v126 + 1;
        v97[2] = v96 + 1;
        v33 = v97;
        sub_1000126EC((uint64_t)v21, (uint64_t)v97 + v120 + v96 * v30, type metadata accessor for SecureLocation);
        v35 = v138;
        sub_1000126B0(v138, type metadata accessor for SecureLocation);
        sub_1000126B0((uint64_t)v24, type metadata accessor for SecureLocation);
        v32 = v98;
        if (v98 == v122)
        {
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
      }
    }
    v33 = _swiftEmptyArrayStorage;
LABEL_60:
    sub_10054A084((uint64_t)v33, v108, v109, v111, v112, v113, v110);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v100 = type metadata accessor for Logger(0);
    v101 = sub_10001A9E8(v100, (uint64_t)qword_1011B7A18);
    v102 = Logger.logObject.getter(v101);
    v103 = static os_log_type_t.info.getter(v102);
    if (os_log_type_enabled(v102, v103))
    {
      v104 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v104 = 0;
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "LabelledLocations - No labels - nothing to resolve", v104, 2u);
      swift_slowDealloc(v104, -1, -1);
    }

    return sub_10054A084(v114, v108, v109, v111, v112, v113, v110);
  }
}

uint64_t sub_10054B044(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v16;
  void *v17;
  id v18;
  NSString v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  uint64_t v33;
  id v34;
  uint64_t v35;
  _QWORD *v37;

  v16 = (_QWORD *)swift_allocObject(&unk_10107DEC0, 64, 7);
  v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v35 = a7;
  v16[6] = a8;
  v16[7] = a9;
  v17 = (void *)objc_opt_self(NSUserDefaults);
  v34 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v18 = objc_msgSend(v17, "standardUserDefaults");
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "BOOLForKey:", v19);

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v33 = a5;
    v25 = a6;
    v26 = a8;
    v27 = a1;
    v28 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 67109120;
    LODWORD(v37) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, (char *)&v37 + 4, v28 + 4, v28 + 8);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v28, 8u);
    v29 = v28;
    a1 = v27;
    a8 = v26;
    a6 = v25;
    a5 = v33;
    swift_slowDealloc(v29, -1, -1);
  }

  if (v20)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
    {
      v37 = sub_10088A6A4();
      swift_bridgeObjectRetain(v37);
      sub_10051FF88((uint64_t *)&v37);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 104) = v37;
      swift_bridgeObjectRelease();
    }
    v30 = v34;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10054A1D8(a1, a2 & 1, a3, v30, a5, a6, v35, a8, a9);
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    v31 = swift_allocObject(&unk_10107DEE8, 56, 7);
    *(_QWORD *)(v31 + 16) = a3;
    *(_QWORD *)(v31 + 24) = a1;
    *(_BYTE *)(v31 + 32) = a2 & 1;
    *(_QWORD *)(v31 + 40) = sub_100555514;
    *(_QWORD *)(v31 + 48) = v16;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_retain();
    sub_10053CB1C((uint64_t)sub_1005549DC, v31);
  }
  swift_release();
  return swift_release();
}

void sub_10054B3CC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t aBlock[6];

  if (qword_1010E9CD8 != -1)
    swift_once(&qword_1010E9CD8, sub_1005201AC);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010FE9B0);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    aBlock[0] = v5;
    *(_DWORD *)v4 = 136446210;
    v8 = sub_100016940(0xD000000000000018, 0x8000000100EDA5F0, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, aBlock, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v6 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
  aBlock[4] = (uint64_t)sub_10053661C;
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100555E2C;
  aBlock[3] = (uint64_t)&unk_10107D910;
  v7 = _Block_copy(aBlock);
  objc_msgSend(v6, "stopLocationMonitoring:", v7);
  _Block_release(v7);

}

void sub_10054B5BC(uint64_t a1, int a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  id v43;
  NSString v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  BOOL v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  id v90;
  NSString v91;
  id v92;
  id v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  id v100;
  NSString v101;
  id v102;
  id v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v112 = a2;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v7);
  v107 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for SecureLocationsSubmitEndpoint(0);
  v9 = __chkstk_darwin(v114);
  v116 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v106 = (uint64_t)&v105 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v105 - v13;
  v115 = type metadata accessor for SecureLocation(0);
  v15 = __chkstk_darwin(v115);
  v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v105 - v18;
  v20 = swift_allocObject(&unk_10107D858, 24, 7);
  *(_QWORD *)(v20 + 16) = a4;
  _Block_copy(a4);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v110 = a3;
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7A18);
  sub_10005972C(a1, (uint64_t)v19, type metadata accessor for SecureLocation);
  v23 = sub_10005972C(a1, (uint64_t)v17, type metadata accessor for SecureLocation);
  v113 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(22, -1);
    v111 = v14;
    v27 = v26;
    v28 = swift_slowAlloc(64, -1);
    v108 = v20;
    v29 = v28;
    v119 = v28;
    *(_DWORD *)v27 = 136446466;
    v30 = sub_100AA723C(*(_QWORD *)&v19[*(int *)(v115 + 60)]);
    v109 = a1;
    v117 = sub_100016940(v30, v31, &v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v19, type metadata accessor for SecureLocation);
    *(_WORD *)(v27 + 12) = 2080;
    v32 = sub_100AA64E4();
    v117 = sub_100016940(v32, v33, &v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease();
    a1 = v109;
    sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "publishLocation with reason %{public}s location: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    v34 = v29;
    v20 = v108;
    swift_slowDealloc(v34, -1, -1);
    v35 = v27;
    v14 = v111;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v19, type metadata accessor for SecureLocation);
    sub_1000126B0((uint64_t)v17, type metadata accessor for SecureLocation);
  }

  v36 = (uint64_t)v116;
  v37 = v114;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v38 = sub_10000D338();
  v39 = swift_release();
  if ((v38 & 1) != 0 || (v112 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + *(int *)(v115 + 60)) == 8)
    {
      v48 = v110;
      if (*(_QWORD *)(v110 + 344))
      {
        swift_retain();
        DispatchTimer.cancel()();
        swift_release();
        *(_QWORD *)(v48 + 344) = 0;
        swift_release();
      }
      sub_100BFDB8C(a1);
      a4[2](a4, 0);
    }
    else
    {
      v49 = enum case for FMNAccountType.searchParty(_:);
      v50 = type metadata accessor for FMNAccountType(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v14, v49, v50);
      sub_10024F1F0((uint64_t)&v14[*(int *)(v37 + 20)]);
      v51 = v106;
      v52 = sub_10005972C((uint64_t)v14, v106, type metadata accessor for SecureLocationsSubmitEndpoint);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      v55 = os_log_type_enabled(v53, v54);
      v109 = a1;
      if (v55)
      {
        v108 = v20;
        v56 = swift_slowAlloc(12, -1);
        v111 = v14;
        v57 = (uint8_t *)v56;
        v58 = v37;
        v59 = swift_slowAlloc(32, -1);
        v119 = v59;
        *(_DWORD *)v57 = 136315138;
        sub_10005972C(v51, v36, type metadata accessor for SecureLocationsSubmitEndpoint);
        v60 = String.init<A>(describing:)(v36, v58);
        v117 = sub_100016940(v60, v61, &v119);
        v20 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v57 + 4, v57 + 12);
        v36 = (uint64_t)v116;
        swift_bridgeObjectRelease();
        sub_1000126B0(v51, type metadata accessor for SecureLocationsSubmitEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "SubmitLocation endpoint %s", v57, 0xCu);
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        v62 = v57;
        v14 = v111;
        swift_slowDealloc(v62, -1, -1);
      }
      else
      {
        sub_1000126B0(v51, type metadata accessor for SecureLocationsSubmitEndpoint);
      }

      v63 = type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject(v63, *(unsigned int *)(v63 + 48), *(unsigned __int16 *)(v63 + 52));
      v64 = type metadata accessor for FMNMockingPreferences(0);
      v65 = v107;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v107, 1, 1, v64);
      v66 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v65);
      v67 = type metadata accessor for ServerInteractionController(0);
      v68 = swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
      sub_10005972C((uint64_t)v14, v36, type metadata accessor for SecureLocationsSubmitEndpoint);
      v69 = sub_10041D8D4(v36, v66, v68);
      v70 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
      if (v70
        && (v71 = v70,
            v72 = objc_msgSend(v70, "uniqueDeviceIdentifier"),
            v71,
            v72))
      {
        v111 = v14;
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v75 = v74;

        v76 = v110;
        v77 = sub_10001A9A8(&qword_1010F6350);
        OS_dispatch_queue.sync<A>(execute:)(sub_100553E20, v76, v77);
        v78 = v120;
        if (v120)
        {
          v114 = v119;
          v79 = swift_allocBox(v115);
          v81 = (_QWORD *)v80;
          v116 = 0;
          v82 = v69;
          v83 = v109;
          sub_10005972C(v109, v80, type metadata accessor for SecureLocation);
          *v81 = v73;
          v81[1] = v75;
          swift_bridgeObjectRetain(v75);
          swift_bridgeObjectRelease();
          v84 = type metadata accessor for Transaction(0);
          __chkstk_darwin(v84);
          *(&v105 - 10) = v76;
          *(&v105 - 9) = v79;
          *(&v105 - 8) = (uint64_t)sub_10001D1EC;
          *(&v105 - 7) = v20;
          v85 = v114;
          *(&v105 - 6) = v83;
          *(&v105 - 5) = v85;
          *(&v105 - 4) = v78;
          *(&v105 - 3) = v73;
          *(&v105 - 2) = v75;
          *(&v105 - 1) = v82;
          static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.publishEncodedPayload", 51, 2, sub_100554A04, &v105 - 12, &type metadata for () + 1);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v111, type metadata accessor for SecureLocationsSubmitEndpoint);
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        v96 = swift_bridgeObjectRelease();
        v97 = Logger.logObject.getter(v96);
        v98 = static os_log_type_t.error.getter(v97);
        if (os_log_type_enabled(v97, v98))
        {
          v99 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v99 = 0;
          _os_log_impl((void *)&_mh_execute_header, v97, v98, "No APS token. Not proceeding", v99, 2u);
          swift_slowDealloc(v99, -1, -1);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v100 = objc_allocWithZone((Class)NSError);
        v101 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v102 = objc_msgSend(v100, "initWithDomain:code:userInfo:", v101, 13, 0);

        v103 = v102;
        v104 = (void *)_convertErrorToNSError(_:)(v103);
        ((void (**)(_QWORD, void *))a4)[2](a4, v104);

        swift_release();
        v95 = (uint64_t)v111;
      }
      else
      {
        v86 = v14;
        v87 = Logger.logObject.getter(v70);
        v88 = static os_log_type_t.error.getter(v87);
        if (os_log_type_enabled(v87, v88))
        {
          v89 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v89 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "Unable to get device identifier for server SubscribeAndFetch", v89, 2u);
          swift_slowDealloc(v89, -1, -1);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v90 = objc_allocWithZone((Class)NSError);
        v91 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v92 = objc_msgSend(v90, "initWithDomain:code:userInfo:", v91, 0, 0);

        v93 = v92;
        v94 = (void *)_convertErrorToNSError(_:)(v93);
        ((void (**)(_QWORD, void *))a4)[2](a4, v94);

        swift_release();
        v95 = (uint64_t)v86;
      }
      sub_1000126B0(v95, type metadata accessor for SecureLocationsSubmitEndpoint);
    }
    swift_release();
  }
  else
  {
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Not a location publishing device. Not publishing location", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    sub_10054B3CC();
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v43 = objc_allocWithZone((Class)NSError);
    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v45 = objc_msgSend(v43, "initWithDomain:code:userInfo:", v44, 12, 0);

    v46 = v45;
    v47 = (void *)_convertErrorToNSError(_:)(v46);
    ((void (**)(_QWORD, void *))a4)[2](a4, v47);
    swift_release();

  }
}

void sub_10054C134(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  double v65;
  double v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (**v103)(_QWORD, _QWORD);
  void (**v104)(_QWORD, _QWORD);
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  void *v117;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  const void *v122;
  __n128 v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t v139;
  __n128 v140;
  char *v141;
  __n128 v142;
  id v143;
  uint64_t v144;
  char *v145;
  id v146;
  id v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _OWORD v161[13];
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;

  v125 = a4;
  v148 = a2;
  v127 = a1;
  v7 = type metadata accessor for SecureLocation(0);
  v126 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v9 = __chkstk_darwin(v8);
  v149 = (uint64_t *)((char *)&v121 - v10);
  v11 = __chkstk_darwin(v9);
  v145 = (char *)&v121 - v12;
  v13 = __chkstk_darwin(v11);
  v155 = (uint64_t *)((char *)&v121 - v14);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v121 - v16;
  v18 = __chkstk_darwin(v15);
  v19 = __chkstk_darwin(v18);
  v23 = (char *)&v121 - v22;
  v136 = a3;
  v24 = &qword_1010EA000;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
  {
    v131 = v21;
    v128 = (uint64_t *)v20;
    v129 = v19;
    _Block_copy(a5);
    v122 = a5;
    _Block_copy(a5);
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v25 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v25, &type metadata for SecureLocationsConfig);
    swift_release();
    v172 = v161[10];
    v173 = v161[11];
    v174 = v161[12];
    v168 = v161[6];
    v169 = v161[7];
    v170 = v161[8];
    v171 = v161[9];
    v164 = v161[2];
    v165 = v161[3];
    v166 = v161[4];
    v167 = v161[5];
    v162 = v161[0];
    v163 = v161[1];
    sub_1003D09E0(&v162);
    v135 = *(_QWORD *)(v127 + 16);
    if (v135)
    {
      v26 = *(double *)&v163;
      v134 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
      v133 = v127 + v134;
      v27 = *(_QWORD *)(v126 + 72);
      v124 = &v158;
      v28 = swift_bridgeObjectRetain(v127);
      v29 = 0;
      v30 = (uint64_t)v23;
      v31 = _swiftEmptyArrayStorage;
      v28.n128_u64[0] = 136315906;
      v142 = v28;
      v141 = (char *)&type metadata for Any + 8;
      v28.n128_u64[0] = 136315650;
      v140 = v28;
      v28.n128_u64[0] = 136315394;
      v123 = v28;
      v32 = v131;
      v130 = v17;
      v151 = v30;
      v132 = v27;
      while (1)
      {
        v139 = v29;
        sub_10005972C(v133 + v27 * v29, v30, type metadata accessor for SecureLocation);
        sub_10005972C(v30, v32, type metadata accessor for SecureLocation);
        v33 = *(_QWORD *)(v136 + 104);
        v34 = (uint64_t)v155;
        if (!*(_QWORD *)(v33 + 16))
          goto LABEL_49;
        v153 = *(_QWORD *)(v33 + 16);
        v138 = v31;
        swift_bridgeObjectRetain(v33);
        v137 = v35;
        v36 = (unint64_t *)(v35 + 56);
        v37 = v151;
        while (1)
        {
          v38 = *(v36 - 2);
          v152 = *(v36 - 1);
          v39 = *v36;
          v40 = *((double *)v36 + 3);
          v41 = *((double *)v36 + 4);
          v42 = v36[5];
          v43 = v36[7];
          v154 = v36[6];
          v44 = v24[19];
          v45 = v36[2];
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(v39);
          swift_bridgeObjectRetain(v45);
          swift_bridgeObjectRetain(v43);
          if (v44 != -1)
            swift_once(&qword_1010EA098, sub_10098F7D8);
          v46 = type metadata accessor for Logger(0);
          v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B7A18);
          sub_10005972C(v37, v34, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v38, 4);
          swift_bridgeObjectRetain_n(v39, 4);
          swift_bridgeObjectRetain_n(v45, 4);
          swift_bridgeObjectRetain_n(v43, 4);
          v150 = v47;
          v49 = Logger.logObject.getter(v48);
          v50 = static os_log_type_t.info.getter(v49);
          v51 = v50;
          v52 = os_log_type_enabled(v49, v50);
          v156 = v45;
          if (v52)
          {
            v53 = swift_slowAlloc(42, -1);
            v147 = (id)swift_slowAlloc(96, -1);
            v157 = (uint64_t)v147;
            *(_DWORD *)v53 = v142.n128_u32[0];
            swift_bridgeObjectRetain(v39);
            *(_QWORD *)(v53 + 4) = sub_100016940(v152, v39, &v157);
            swift_bridgeObjectRelease();
            *(_WORD *)(v53 + 12) = 2080;
            if (v43)
              v54 = v154;
            else
              v54 = 1818848800;
            LODWORD(v146) = v51;
            if (v43)
              v55 = v43;
            else
              v55 = 0xE400000000000000;
            swift_bridgeObjectRetain(v43);
            *(_QWORD *)(v53 + 14) = sub_100016940(v54, v55, &v157);
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v45, 2);
            swift_bridgeObjectRelease_n(v39, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v53 + 22) = 2080;
            v56 = *v155;
            v57 = v155[1];
            swift_bridgeObjectRetain(v57);
            v58 = v56;
            v34 = (uint64_t)v155;
            *(_QWORD *)(v53 + 24) = sub_100016940(v58, v57, &v157);
            swift_bridgeObjectRelease();
            sub_1000126B0(v34, type metadata accessor for SecureLocation);
            *(_WORD *)(v53 + 32) = 2048;
            *(_QWORD *)(v53 + 34) = v42;
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v156, 2);
            v59 = v39;
            swift_bridgeObjectRelease_n(v39, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v146, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v53, 0x2Au);
            v60 = v147;
            swift_arrayDestroy(v147, 3, v141);
            swift_slowDealloc(v60, -1, -1);
            v61 = (uint64_t)v145;
            swift_slowDealloc(v53, -1, -1);

            v62 = v38;
          }
          else
          {
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v45, 2);
            swift_bridgeObjectRelease_n(v39, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            sub_1000126B0(v34, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v45, 2);
            v59 = v39;
            swift_bridgeObjectRelease_n(v39, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            v62 = v38;
            v61 = (uint64_t)v145;
          }
          v37 = v151;
          sub_10005972C(v151, v61, type metadata accessor for SecureLocation);
          if (!v43 && (v148 & 1) != 0)
          {
            sub_1000126B0(v61, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          sub_10005972C(v61, (uint64_t)v149, type metadata accessor for SecureLocation);
          if ((v148 & 1) != 0)
          {
            sub_1000126B0((uint64_t)v149, type metadata accessor for SecureLocation);
            sub_1000126B0(v61, type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }
          if (!v43)
          {
            swift_bridgeObjectRetain(v149[1]);
            sub_1000126B0((uint64_t)v149, type metadata accessor for SecureLocation);
            sub_1000126B0(v61, type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v156 = v59;
            goto LABEL_9;
          }
          if (v154 == *v149 && v43 == v149[1])
            break;
          v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v154, v43, *v149, v149[1], 0);
          swift_bridgeObjectRetain(v43);
          sub_1000126B0((uint64_t)v149, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          if ((v80 & 1) != 0)
            goto LABEL_25;
          swift_bridgeObjectRelease();
          v34 = (uint64_t)v155;
LABEL_9:
          v24 = &qword_1010EA000;
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v36 += 11;
          if (!--v153)
          {
            swift_bridgeObjectRelease();
            v31 = v138;
            v17 = v130;
            v32 = v131;
            goto LABEL_49;
          }
        }
        swift_bridgeObjectRetain(v43);
        sub_1000126B0((uint64_t)v149, type metadata accessor for SecureLocation);
        sub_1000126B0(v61, type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease();
LABEL_25:
        v63 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v40, v41);
        v64 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(v37 + 24), *(double *)(v37 + 16));
        v147 = v63;
        objc_msgSend(v63, "distanceFromLocation:", v64);
        v66 = v65;
        swift_bridgeObjectRetain_n(v62, 2);
        v67 = v59;
        swift_bridgeObjectRetain_n(v59, 2);
        v68 = v156;
        swift_bridgeObjectRetain_n(v156, 2);
        swift_bridgeObjectRetain_n(v43, 2);
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.info.getter(v70);
        v72 = os_log_type_enabled(v70, v71);
        v146 = v64;
        if (v72)
        {
          v73 = swift_slowAlloc(32, -1);
          v144 = v62;
          v74 = v73;
          v143 = (id)swift_slowAlloc(64, -1);
          v157 = (uint64_t)v143;
          *(_DWORD *)v74 = v140.n128_u32[0];
          swift_bridgeObjectRetain(v67);
          *(_QWORD *)(v74 + 4) = sub_100016940(v152, v67, &v157);
          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2080;
          if (v43)
            v75 = v154;
          else
            v75 = 0x206C696E20;
          v76 = v68;
          if (v43)
            v77 = v43;
          else
            v77 = 0xE500000000000000;
          swift_bridgeObjectRetain(v43);
          *(_QWORD *)(v74 + 14) = sub_100016940(v75, v77, &v157);
          swift_bridgeObjectRelease_n(v43, 2);
          swift_bridgeObjectRelease_n(v76, 2);
          swift_bridgeObjectRelease_n(v67, 2);
          swift_bridgeObjectRelease_n(v144, 2);
          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 22) = 2048;
          *(double *)(v74 + 24) = v66;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v74, 0x20u);
          v78 = v143;
          swift_arrayDestroy(v143, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v78, -1, -1);
          v24 = &qword_1010EA000;
          swift_slowDealloc(v74, -1, -1);

          v79 = v67;
        }
        else
        {

          swift_bridgeObjectRelease_n(v43, 2);
          swift_bridgeObjectRelease_n(v68, 2);
          swift_bridgeObjectRelease_n(v67, 2);
          swift_bridgeObjectRelease_n(v62, 2);
          v79 = v67;
          v24 = &qword_1010EA000;
        }
        v34 = (uint64_t)v155;
        v37 = v151;
        if (v66 > v26)
        {

          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v32 = v131;
        swift_beginAccess(v131, &v160, 1, 0);
        v81 = v129;
        v82 = (_QWORD *)(v32 + *(int *)(v129 + 64));
        *v82 = v152;
        v82[1] = v79;
        swift_bridgeObjectRelease();
        v83 = v128;
        v84 = sub_10005972C(v37, (uint64_t)v128, type metadata accessor for SecureLocation);
        v85 = Logger.logObject.getter(v84);
        v86 = static os_log_type_t.default.getter(v85);
        if (os_log_type_enabled(v85, v86))
        {
          v87 = swift_slowAlloc(22, -1);
          v156 = swift_slowAlloc(64, -1);
          v159 = v156;
          *(_DWORD *)v87 = v123.n128_u32[0];
          v88 = (uint64_t *)(v32 + *(int *)(v81 + 64));
          v89 = v88[1];
          v157 = *v88;
          v158 = v89;
          swift_bridgeObjectRetain(v89);
          v90 = sub_10001A9A8(&qword_1010F6350);
          v91 = String.init<A>(describing:)(&v157, v90);
          v157 = sub_100016940(v91, v92, &v159);
          v93 = v124;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v124, v87 + 4, v87 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v87 + 12) = 2080;
          v94 = *v83;
          v95 = v83[1];
          swift_bridgeObjectRetain(v95);
          v157 = sub_100016940(v94, v95, &v159);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v93, v87 + 14, v87 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v83, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "LabelledLocations Adding label %s to location %s", (uint8_t *)v87, 0x16u);
          v96 = v156;
          swift_arrayDestroy(v156, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v87, -1, -1);
        }
        else
        {
          sub_1000126B0((uint64_t)v83, type metadata accessor for SecureLocation);
        }

        v24 = &qword_1010EA000;
        v31 = v138;
        v17 = v130;
LABEL_49:
        swift_beginAccess(v32, v161, 0, 0);
        sub_10005972C(v32, (uint64_t)v17, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
          v31 = (_QWORD *)sub_1007C9DB4(0, v31[2] + 1, 1, (unint64_t)v31);
        v98 = v31[2];
        v97 = v31[3];
        v99 = v139;
        if (v98 >= v97 >> 1)
        {
          v101 = sub_1007C9DB4(v97 > 1, v98 + 1, 1, (unint64_t)v31);
          v99 = v139;
          v31 = (_QWORD *)v101;
        }
        v29 = v99 + 1;
        v31[2] = v98 + 1;
        v100 = (uint64_t)v31 + v134 + v98 * v132;
        v27 = v132;
        sub_1000126EC((uint64_t)v17, v100, type metadata accessor for SecureLocation);
        v30 = v151;
        sub_1000126B0(v151, type metadata accessor for SecureLocation);
        sub_1000126B0(v32, type metadata accessor for SecureLocation);
        if (v29 == v135)
        {
          swift_bridgeObjectRelease();
          if (v31[2])
            goto LABEL_55;
LABEL_63:
          v111 = v122;
          _Block_copy(v122);
          _Block_copy(v111);
          if (v24[19] != -1)
            swift_once(&qword_1010EA098, sub_10098F7D8);
          v112 = type metadata accessor for Logger(0);
          v113 = sub_10001A9E8(v112, (uint64_t)qword_1011B7A18);
          v114 = Logger.logObject.getter(v113);
          v115 = static os_log_type_t.error.getter(v114);
          if (os_log_type_enabled(v114, v115))
          {
            v116 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v116 = 0;
            _os_log_impl((void *)&_mh_execute_header, v114, v115, "Got empty locations after resolving labels. This shouldn't happen", v116, 2u);
            swift_slowDealloc(v116, -1, -1);
          }

          v103 = (void (**)(_QWORD, _QWORD))v122;
          _Block_release(v122);
          goto LABEL_68;
        }
      }
    }
    v31 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2])
      goto LABEL_63;
LABEL_55:
    v102 = (uint64_t)v31
         + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    v103 = (void (**)(_QWORD, _QWORD))v122;
    _Block_copy(v122);
    sub_10054B5BC(v102, 0, v125, v103);
LABEL_68:
    _Block_release(v103);
    swift_bridgeObjectRelease();
  }
  else
  {
    _Block_copy(a5);
    v104 = (void (**)(_QWORD, _QWORD))a5;
    _Block_copy(a5);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v105 = type metadata accessor for Logger(0);
    v106 = sub_10001A9E8(v105, (uint64_t)qword_1011B7A18);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "LabelledLocations - No labels - nothing to resolve", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
    }

    if (*(_QWORD *)(v127 + 16))
    {
      v110 = v127 + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
      v103 = v104;
      _Block_copy(v104);
      sub_10054B5BC(v110, 0, v125, v104);
    }
    else
    {
      v103 = (void (**)(_QWORD, _QWORD))a5;
      _Block_copy(a5);
      v117 = _Block_copy(a5);
      v118 = Logger.logObject.getter(v117);
      v119 = static os_log_type_t.error.getter(v118);
      if (os_log_type_enabled(v118, v119))
      {
        v120 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v120 = 0;
        _os_log_impl((void *)&_mh_execute_header, v118, v119, "Got empty locations after resolving labels. This shouldn't happen", v120, 2u);
        swift_slowDealloc(v120, -1, -1);
      }

      _Block_release(v104);
    }
    _Block_release(v103);
  }
  swift_release();
  _Block_release(v103);
  _Block_release(v103);
}

uint64_t sub_10054D19C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  NSString v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  const void *v20;
  uint64_t v21;
  char v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD *v27;

  v10 = swift_allocObject(&unk_10107D7E0, 24, 7);
  *(_QWORD *)(v10 + 16) = a5;
  v11 = (_QWORD *)swift_allocObject(&unk_10107D808, 40, 7);
  v11[2] = a4;
  v11[3] = sub_10001D1EC;
  v11[4] = v10;
  v12 = (void *)objc_opt_self(NSUserDefaults);
  _Block_copy(a5);
  swift_retain();
  swift_retain();
  v13 = objc_msgSend(v12, "standardUserDefaults");
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "BOOLForKey:", v14);

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7A18);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = a5;
    v21 = a4;
    v22 = a2;
    v23 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v23 = 67109120;
    LODWORD(v27) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 4, v23 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v23, 8u);
    v24 = v23;
    a2 = v22;
    a4 = v21;
    a5 = v20;
    swift_slowDealloc(v24, -1, -1);
  }

  if (v15)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
    {
      v27 = sub_10088A6A4();
      swift_bridgeObjectRetain(v27);
      sub_10051FF88((uint64_t *)&v27);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 104) = v27;
      swift_bridgeObjectRelease();
    }
    _Block_copy(a5);
    swift_retain();
    swift_retain();
    sub_10054C134(a1, a2 & 1, a3, a4, a5);
    _Block_release(a5);
    swift_release();
    swift_release();
  }
  else
  {
    v25 = swift_allocObject(&unk_10107D830, 56, 7);
    *(_QWORD *)(v25 + 16) = a3;
    *(_QWORD *)(v25 + 24) = a1;
    *(_BYTE *)(v25 + 32) = a2 & 1;
    *(_QWORD *)(v25 + 40) = sub_1005549F4;
    *(_QWORD *)(v25 + 48) = v11;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_retain();
    sub_10053CB1C((uint64_t)sub_1005549DC, v25);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void sub_10054D4F0(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  objc_class *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  _QWORD v26[3];
  char *v27;
  __n128 v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint8_t *v32;
  Class isa;
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for SecureLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  isa = a1[2].isa;
  if (isa)
  {
    v26[1] = a2;
    v26[2] = a3;
    v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v11 = qword_1010EA098;
    v12 = swift_bridgeObjectRetain(a1);
    if (v11 != -1)
LABEL_12:
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v13 = 0;
    v26[0] = a1;
    v14 = (char *)a1 + v10;
    v29 = &v35;
    v12.n128_u64[0] = 136315138;
    v28 = v12;
    v27 = (char *)&type metadata for Any + 8;
    v30 = (char *)a1 + v10;
    v31 = v7;
    do
    {
      v15 = (objc_class *)(v13 + 1);
      if (__OFADD__(v13, 1))
      {
        __break(1u);
        goto LABEL_12;
      }
      v16 = (uint64_t)&v14[*(_QWORD *)(v7 + 72) * v13];
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
      v19 = sub_10005972C(v16, (uint64_t)v9, type metadata accessor for SecureLocation);
      v10 = v18;
      a1 = Logger.logObject.getter(v19);
      v20 = static os_log_type_t.default.getter(a1);
      if (os_log_type_enabled(a1, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v35 = v22;
        *(_DWORD *)v21 = v28.n128_u32[0];
        v32 = v21 + 4;
        v23 = sub_100AA64E4();
        v10 = v24;
        v34 = sub_100016940(v23, v24, &v35);
        v7 = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v29, v32, v21 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v9, type metadata accessor for SecureLocation);
        _os_log_impl((void *)&_mh_execute_header, a1, v20, "Received location via push %s", v21, 0xCu);
        swift_arrayDestroy(v22, 1, v27);
        swift_slowDealloc(v22, -1, -1);
        v25 = v21;
        v14 = v30;
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {
        sub_1000126B0((uint64_t)v9, type metadata accessor for SecureLocation);
      }

      ++v13;
    }
    while (v15 != isa);
    a1 = v26[0];
    swift_bridgeObjectRelease();
  }
  sub_100539334((uint64_t)a1, 1);
  Transaction.capture()();
}

void sub_10054D788(NSObject *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  __n128 v28;
  Class v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  objc_class *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  __n128 v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  Class isa;
  uint64_t v123;
  NSObject *v124;
  uint64_t v125;
  objc_class *v126;
  __n128 v127;
  char *v128;
  __n128 v129;
  id v130;
  uint64_t v131;
  double *v132;
  id v133;
  int v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _OWORD v147[13];
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;

  v112 = a4;
  v113 = a5;
  v134 = a2;
  v114 = a1;
  v6 = type metadata accessor for SecureLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v9 = __chkstk_darwin(v8);
  v136 = (unint64_t *)((char *)v110.n128_u64 - v10);
  v11 = __chkstk_darwin(v9);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v110 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v110 - v17;
  v19 = __chkstk_darwin(v16);
  v24 = (double *)((char *)v110.n128_f64 - v23);
  v123 = a3;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
  {
    v141 = v22;
    v131 = v21;
    v115 = (uint64_t *)v20;
    v116 = v19;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v25 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v25, &type metadata for SecureLocationsConfig);
    swift_release();
    v158 = v147[10];
    v159 = v147[11];
    v160 = v147[12];
    v154 = v147[6];
    v155 = v147[7];
    v156 = v147[8];
    v157 = v147[9];
    v150 = v147[2];
    v151 = v147[3];
    v152 = v147[4];
    v153 = v147[5];
    v148 = v147[0];
    v149 = v147[1];
    sub_1003D09E0(&v148);
    isa = v114[2].isa;
    if (isa)
    {
      v26 = *(double *)&v149;
      v121 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v120 = (char *)v114 + v121;
      v27 = *(_QWORD *)(v7 + 72);
      v111 = &v144;
      v28 = swift_bridgeObjectRetain(v114);
      v29 = 0;
      v30 = _swiftEmptyArrayStorage;
      v28.n128_u64[0] = 136315906;
      v129 = v28;
      v128 = (char *)&type metadata for Any + 8;
      v28.n128_u64[0] = 136315650;
      v127 = v28;
      v28.n128_u64[0] = 136315394;
      v110 = v28;
      v132 = v24;
      v117 = v18;
      v118 = v15;
      v119 = v27;
      while (1)
      {
        v126 = v29;
        sub_10005972C((uint64_t)&v120[v27 * (_QWORD)v29], (uint64_t)v24, type metadata accessor for SecureLocation);
        sub_10005972C((uint64_t)v24, (uint64_t)v18, type metadata accessor for SecureLocation);
        v31 = *(_QWORD *)(v123 + 104);
        v32 = (uint64_t)v141;
        if (!*(_QWORD *)(v31 + 16))
          goto LABEL_50;
        v139 = *(_QWORD *)(v31 + 16);
        v124 = v30;
        swift_bridgeObjectRetain(v31);
        v125 = v33;
        v34 = (unint64_t *)(v33 + 56);
        while (1)
        {
          v35 = *(v34 - 2);
          v36 = *(v34 - 1);
          v37 = *v34;
          v38 = *((double *)v34 + 3);
          v39 = *((double *)v34 + 4);
          v40 = v34[5];
          v41 = v34[7];
          v140 = v34[6];
          v138 = v34;
          v42 = v34[2];
          v43 = qword_1010EA098;
          v142 = v35;
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v41);
          if (v43 != -1)
            swift_once(&qword_1010EA098, sub_10098F7D8);
          v44 = type metadata accessor for Logger(0);
          v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B7A18);
          sub_10005972C((uint64_t)v24, v32, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v142, 4);
          swift_bridgeObjectRetain_n(v37, 4);
          swift_bridgeObjectRetain_n(v42, 4);
          swift_bridgeObjectRetain_n(v41, 4);
          v137 = v45;
          v47 = Logger.logObject.getter(v46);
          v48 = static os_log_type_t.info.getter(v47);
          v49 = v48;
          v50 = os_log_type_enabled(v47, v48);
          v135 = v36;
          if (v50)
          {
            v51 = swift_slowAlloc(42, -1);
            v133 = (id)swift_slowAlloc(96, -1);
            v143 = (uint64_t)v133;
            *(_DWORD *)v51 = v129.n128_u32[0];
            swift_bridgeObjectRetain(v37);
            *(_QWORD *)(v51 + 4) = sub_100016940(v36, v37, &v143);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 12) = 2080;
            if (v41)
              v52 = v140;
            else
              v52 = 1818848800;
            if (v41)
              v53 = v41;
            else
              v53 = 0xE400000000000000;
            swift_bridgeObjectRetain(v41);
            *(_QWORD *)(v51 + 14) = sub_100016940(v52, v53, &v143);
            swift_bridgeObjectRelease_n(v41, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            LODWORD(v130) = v49;
            v54 = v142;
            swift_bridgeObjectRelease_n(v142, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 22) = 2080;
            v55 = *v141;
            v56 = v141[1];
            swift_bridgeObjectRetain(v56);
            v57 = v55;
            v32 = (uint64_t)v141;
            *(_QWORD *)(v51 + 24) = sub_100016940(v57, v56, &v143);
            swift_bridgeObjectRelease();
            sub_1000126B0(v32, type metadata accessor for SecureLocation);
            *(_WORD *)(v51 + 32) = 2048;
            *(_QWORD *)(v51 + 34) = v40;
            swift_bridgeObjectRelease_n(v41, 2);
            v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            swift_bridgeObjectRelease_n(v54, 2);
            _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v130, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v51, 0x2Au);
            v59 = v133;
            swift_arrayDestroy(v133, 3, v128);
            v60 = v59;
            v61 = v131;
            swift_slowDealloc(v60, -1, -1);
            v62 = v51;
            v24 = v132;
            swift_slowDealloc(v62, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n(v41, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            v63 = v142;
            swift_bridgeObjectRelease_n(v142, 2);
            sub_1000126B0(v32, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v41, 2);
            v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            swift_bridgeObjectRelease_n(v63, 2);
            v61 = v131;
          }
          sub_10005972C((uint64_t)v24, v61, type metadata accessor for SecureLocation);
          if (!v41 && (v134 & 1) != 0)
          {
            sub_1000126B0(v61, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          sub_10005972C(v61, (uint64_t)v136, type metadata accessor for SecureLocation);
          if ((v134 & 1) == 0)
            break;
          sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v34 = v138 + 11;
          if (!--v139)
          {
            swift_bridgeObjectRelease();
            v18 = v117;
            v15 = v118;
            goto LABEL_49;
          }
        }
        v79 = v37;
        v80 = v136[1];
        if (!v41)
        {
          swift_bridgeObjectRetain(v136[1]);
          sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v142 = v80;
          goto LABEL_10;
        }
        if (v140 == *v136 && v41 == v80)
        {
          swift_bridgeObjectRetain(v41);
          sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          v37 = v79;
        }
        else
        {
          v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v140, v41, *v136, v136[1], 0);
          swift_bridgeObjectRetain(v41);
          sub_1000126B0((uint64_t)v136, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          v37 = v79;
          if ((v81 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v32 = (uint64_t)v141;
            goto LABEL_10;
          }
        }
LABEL_25:
        v64 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v38, v39);
        v133 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v24[3], v24[2]);
        objc_msgSend(v64, "distanceFromLocation:");
        v66 = v65;
        v67 = v142;
        swift_bridgeObjectRetain_n(v142, 2);
        swift_bridgeObjectRetain_n(v37, 2);
        swift_bridgeObjectRetain_n(v58, 2);
        swift_bridgeObjectRetain_n(v41, 2);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.info.getter(v69);
        if (os_log_type_enabled(v69, v70))
        {
          v71 = swift_slowAlloc(32, -1);
          v130 = v64;
          v72 = v58;
          v73 = v71;
          v74 = v37;
          v75 = (id)swift_slowAlloc(64, -1);
          v143 = (uint64_t)v75;
          *(_DWORD *)v73 = v127.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(_QWORD *)(v73 + 4) = sub_100016940(v135, v74, &v143);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 12) = 2080;
          if (v41)
            v76 = v140;
          else
            v76 = 0x206C696E20;
          if (v41)
            v77 = v41;
          else
            v77 = 0xE500000000000000;
          swift_bridgeObjectRetain(v41);
          *(_QWORD *)(v73 + 14) = sub_100016940(v76, v77, &v143);
          swift_bridgeObjectRelease_n(v41, 2);
          swift_bridgeObjectRelease_n(v72, 2);
          swift_bridgeObjectRelease_n(v74, 2);
          swift_bridgeObjectRelease_n(v142, 2);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 22) = 2048;
          *(double *)(v73 + 24) = v66;
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v73, 0x20u);
          swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
          v78 = v75;
          v37 = v74;
          swift_slowDealloc(v78, -1, -1);
          v64 = v130;
          swift_slowDealloc(v73, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v41, 2);
          swift_bridgeObjectRelease_n(v58, 2);
          swift_bridgeObjectRelease_n(v37, 2);
          swift_bridgeObjectRelease_n(v67, 2);
        }
        v32 = (uint64_t)v141;
        v24 = v132;
        if (v66 > v26)
        {

          goto LABEL_9;
        }
        v130 = v64;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = v117;
        swift_beginAccess(v117, &v146, 1, 0);
        v82 = v116;
        v83 = &v18[*(int *)(v116 + 64)];
        *(_QWORD *)v83 = v135;
        *((_QWORD *)v83 + 1) = v37;
        swift_bridgeObjectRelease();
        v84 = (uint64_t)v24;
        v85 = v115;
        v86 = sub_10005972C(v84, (uint64_t)v115, type metadata accessor for SecureLocation);
        v87 = Logger.logObject.getter(v86);
        v88 = static os_log_type_t.default.getter(v87);
        v89 = v88;
        if (os_log_type_enabled(v87, v88))
        {
          v90 = swift_slowAlloc(22, -1);
          LODWORD(v142) = v89;
          v91 = v90;
          v140 = swift_slowAlloc(64, -1);
          v145 = v140;
          *(_DWORD *)v91 = v110.n128_u32[0];
          v92 = (uint64_t *)&v18[*(int *)(v82 + 64)];
          v93 = v92[1];
          v143 = *v92;
          v144 = v93;
          swift_bridgeObjectRetain(v93);
          v94 = sub_10001A9A8(&qword_1010F6350);
          v95 = String.init<A>(describing:)(&v143, v94);
          v143 = sub_100016940(v95, v96, &v145);
          v97 = v111;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v111, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v91 + 12) = 2080;
          v98 = *v85;
          v99 = v85[1];
          swift_bridgeObjectRetain(v99);
          v143 = sub_100016940(v98, v99, &v145);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v97, v91 + 14, v91 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v85, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v142, "LabelledLocations Adding label %s to location %s", (uint8_t *)v91, 0x16u);
          v100 = v140;
          swift_arrayDestroy(v140, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v100, -1, -1);
          swift_slowDealloc(v91, -1, -1);
        }
        else
        {
          sub_1000126B0((uint64_t)v85, type metadata accessor for SecureLocation);
        }

        v15 = v118;
        v24 = v132;
LABEL_49:
        v30 = v124;
LABEL_50:
        swift_beginAccess(v18, v147, 0, 0);
        sub_10005972C((uint64_t)v18, (uint64_t)v15, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          v30 = sub_1007C9DB4(0, (int64_t)v30[2].isa + 1, 1, (unint64_t)v30);
        v102 = (unint64_t)v30[2].isa;
        v101 = (unint64_t)v30[3].isa;
        if (v102 >= v101 >> 1)
          v30 = sub_1007C9DB4(v101 > 1, v102 + 1, 1, (unint64_t)v30);
        v103 = (objc_class *)((char *)v126 + 1);
        v30[2].isa = (Class)(v102 + 1);
        v27 = v119;
        v104 = (uint64_t)v30 + v121 + v102 * v119;
        v29 = v103;
        sub_1000126EC((uint64_t)v15, v104, type metadata accessor for SecureLocation);
        sub_1000126B0((uint64_t)v24, type metadata accessor for SecureLocation);
        sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocation);
        if (v29 == isa)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }
    v30 = _swiftEmptyArrayStorage;
LABEL_62:
    sub_10054D4F0(v30, v112, v113);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v105 = type metadata accessor for Logger(0);
    v106 = sub_10001A9E8(v105, (uint64_t)qword_1011B7A18);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "LabelledLocations - No labels - nothing to resolve", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
    }

    sub_10054D4F0(v114, v112, v113);
  }
}

uint64_t sub_10054E594(NSObject *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  void *v11;
  id v12;
  NSString v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD *v22;

  v10 = swift_allocObject(&unk_10107D790, 32, 7);
  *(_QWORD *)(v10 + 16) = a4;
  *(_QWORD *)(v10 + 24) = a5;
  v11 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain();
  swift_retain();
  v12 = objc_msgSend(v11, "standardUserDefaults");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "BOOLForKey:", v13);

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7A18);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 67109120;
    LODWORD(v22) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, (char *)&v22 + 4, v19 + 4, v19 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v19, 8u);
    swift_slowDealloc(v19, -1, -1);
  }

  if (v14)
  {
    if (!*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
    {
      v22 = sub_10088A6A4();
      swift_bridgeObjectRetain(v22);
      sub_10051FF88((uint64_t *)&v22);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a3 + 104) = v22;
      swift_bridgeObjectRelease();
    }
    swift_retain();
    swift_retain();
    sub_10054D788(a1, a2 & 1, a3, a4, a5);
    swift_release();
  }
  else
  {
    v20 = swift_allocObject(&unk_10107D7B8, 56, 7);
    *(_QWORD *)(v20 + 16) = a3;
    *(_QWORD *)(v20 + 24) = a1;
    *(_BYTE *)(v20 + 32) = a2 & 1;
    *(_QWORD *)(v20 + 40) = sub_1005549D0;
    *(_QWORD *)(v20 + 48) = v10;
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_retain();
    sub_10053CB1C((uint64_t)sub_1005549DC, v20);
  }
  swift_release();
  return swift_release();
}

void sub_10054E868(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  _OWORD v32[13];
  _OWORD v33[14];

  v6 = type metadata accessor for SecureLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  if ((sub_100546A18() & 1) != 0)
    goto LABEL_10;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v10 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v10, &type metadata for SecureLocationsConfig);
  swift_release();
  v33[10] = v32[10];
  v33[11] = v32[11];
  v33[12] = v32[12];
  v33[6] = v32[6];
  v33[7] = v32[7];
  v33[8] = v32[8];
  v33[9] = v32[9];
  v33[2] = v32[2];
  v33[3] = v32[3];
  v33[4] = v32[4];
  v33[5] = v32[5];
  v33[0] = v32[0];
  v33[1] = v32[1];
  sub_1003D09E0(v33);
  if ((BYTE8(v33[0]) & 1) == 0)
  {
LABEL_10:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "publishLocation: secureLocations feature is disabled. Not publishing location", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    type metadata accessor for SecureLocationsError(0);
    v26 = v25;
    *(_QWORD *)&v32[0] = 6;
    v27 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
    _BridgedStoredNSError.init(_:userInfo:)(v33, v32, v27, v26, v28);
    v29 = *(void **)&v33[0];
    v30 = (void *)_convertErrorToNSError(_:)(*(_QWORD *)&v33[0]);
    ((void (**)(_QWORD, void *))a3)[2](a3, v30);

  }
  else
  {
    sub_100AA6EBC(a1, (uint64_t)v9);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Resolving labels for publish", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = sub_10001A9A8(&qword_1010ED490);
    v17 = *(unsigned __int8 *)(v7 + 80);
    v18 = (v17 + 32) & ~v17;
    v19 = swift_allocObject(v16, v18 + *(_QWORD *)(v7 + 72), v17 | 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v9, v19 + v18, type metadata accessor for SecureLocation);
    _Block_copy(a3);
    swift_retain();
    sub_10054D19C(v19, 1, a2, a2, a3);
    _Block_release(a3);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v9, type metadata accessor for SecureLocation);
  }
  _Block_release(a3);
}

void sub_10054EC34(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  id v45;
  NSString v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  id v86;
  NSString v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;

  v4 = a4;
  v103 = a2;
  v97 = *a4;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v7);
  v99 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for SecureLocationsSubmitEndpoint(0);
  v9 = __chkstk_darwin(v105);
  v107 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v106 = (char *)&v96 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v96 - v13;
  v15 = type metadata accessor for SecureLocation(0);
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v96 - v19;
  v21 = qword_1010EA098;
  swift_retain();
  if (v21 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7A18);
  sub_10005972C(a1, (uint64_t)v20, type metadata accessor for SecureLocation);
  v24 = sub_10005972C(a1, (uint64_t)v18, type metadata accessor for SecureLocation);
  v104 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v102 = a1;
    v28 = v27;
    v29 = swift_slowAlloc(64, -1);
    v98 = v14;
    v30 = v29;
    v110 = (char *)v29;
    *(_DWORD *)v28 = 136446466;
    v31 = sub_100AA723C(*(_QWORD *)&v20[*(int *)(v15 + 60)]);
    v100 = v4;
    v101 = a3;
    v108 = sub_100016940(v31, v32, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v20, type metadata accessor for SecureLocation);
    *(_WORD *)(v28 + 12) = 2080;
    v33 = sub_100AA64E4();
    v108 = sub_100016940(v33, v34, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    v4 = v100;
    a3 = v101;
    sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "publishLocation with reason %{public}s location: %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    v35 = v30;
    v14 = v98;
    swift_slowDealloc(v35, -1, -1);
    v36 = v28;
    a1 = v102;
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v20, type metadata accessor for SecureLocation);
    sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocation);
  }

  v37 = (uint64_t)v106;
  v38 = (uint64_t)v107;
  v39 = v105;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v40 = sub_10000D338();
  v41 = swift_release();
  if ((v40 & 1) != 0 || (v103 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + *(int *)(v15 + 60)) == 8)
    {
      if (*(_QWORD *)(a3 + 344))
      {
        swift_retain();
        DispatchTimer.cancel()();
        swift_release();
        *(_QWORD *)(a3 + 344) = 0;
        swift_release();
      }
      sub_100BFDB8C(a1);
      Transaction.capture()();
    }
    else
    {
      v102 = a1;
      v49 = enum case for FMNAccountType.searchParty(_:);
      v50 = type metadata accessor for FMNAccountType(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v14, v49, v50);
      sub_10024F1F0((uint64_t)&v14[*(int *)(v39 + 20)]);
      v51 = sub_10005972C((uint64_t)v14, v37, type metadata accessor for SecureLocationsSubmitEndpoint);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.default.getter(v52);
      v54 = os_log_type_enabled(v52, v53);
      v96 = v15;
      if (v54)
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v56 = v39;
        v57 = swift_slowAlloc(32, -1);
        v110 = (char *)v57;
        v100 = v4;
        v101 = a3;
        *(_DWORD *)v55 = 136315138;
        sub_10005972C(v37, v38, type metadata accessor for SecureLocationsSubmitEndpoint);
        v58 = String.init<A>(describing:)(v38, v56);
        v108 = sub_100016940(v58, v59, (uint64_t *)&v110);
        v4 = v100;
        a3 = v101;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v55 + 4, v55 + 12);
        v38 = (uint64_t)v107;
        swift_bridgeObjectRelease();
        sub_1000126B0(v37, type metadata accessor for SecureLocationsSubmitEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "SubmitLocation endpoint %s", v55, 0xCu);
        swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v55, -1, -1);
      }
      else
      {
        sub_1000126B0(v37, type metadata accessor for SecureLocationsSubmitEndpoint);
      }

      v60 = type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
      v61 = type metadata accessor for FMNMockingPreferences(0);
      v62 = v99;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v99, 1, 1, v61);
      v63 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v62);
      v64 = type metadata accessor for ServerInteractionController(0);
      v65 = swift_allocObject(v64, *(unsigned int *)(v64 + 48), *(unsigned __int16 *)(v64 + 52));
      sub_10005972C((uint64_t)v14, v38, type metadata accessor for SecureLocationsSubmitEndpoint);
      v66 = sub_10041D8D4(v38, v63, v65);
      v67 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
      if (v67
        && (v68 = v67,
            v69 = objc_msgSend(v67, "uniqueDeviceIdentifier"),
            v68,
            v69))
      {
        v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        v73 = sub_10001A9A8(&qword_1010F6350);
        OS_dispatch_queue.sync<A>(execute:)(sub_100553E20, a3, v73);
        v74 = v111;
        if (v111)
        {
          v98 = v14;
          v106 = v110;
          v75 = swift_allocBox(v96);
          v107 = 0;
          v76 = v75;
          v78 = (_QWORD *)v77;
          v79 = a3;
          v80 = v102;
          sub_10005972C(v102, v77, type metadata accessor for SecureLocation);
          *v78 = v70;
          v78[1] = v72;
          swift_bridgeObjectRetain(v72);
          v81 = swift_bridgeObjectRelease();
          __chkstk_darwin(v81);
          *(&v96 - 10) = v79;
          *(&v96 - 9) = v76;
          *(&v96 - 8) = (uint64_t)j___s10FindMyBase11TransactionC7captureyyF;
          *(&v96 - 7) = (uint64_t)v4;
          v82 = v106;
          *(&v96 - 6) = v80;
          *(&v96 - 5) = (uint64_t)v82;
          *(&v96 - 4) = v74;
          *(&v96 - 3) = v70;
          *(&v96 - 2) = v72;
          *(&v96 - 1) = v66;
          static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.publishEncodedPayload", 51, 2, sub_100554A04, &v96 - 12, &type metadata for () + 1);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v98, type metadata accessor for SecureLocationsSubmitEndpoint);
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        v91 = swift_bridgeObjectRelease();
        v92 = Logger.logObject.getter(v91);
        v93 = static os_log_type_t.error.getter(v92);
        if (os_log_type_enabled(v92, v93))
        {
          v94 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v94 = 0;
          _os_log_impl((void *)&_mh_execute_header, v92, v93, "No APS token. Not proceeding", v94, 2u);
          swift_slowDealloc(v94, -1, -1);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v95 = objc_allocWithZone((Class)NSError);
        v87 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v88 = objc_msgSend(v95, "initWithDomain:code:userInfo:", v87, 13, 0, v96, v97);
      }
      else
      {
        v83 = Logger.logObject.getter(v67);
        v84 = static os_log_type_t.error.getter(v83);
        if (os_log_type_enabled(v83, v84))
        {
          v85 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v85 = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "Unable to get device identifier for server SubscribeAndFetch", v85, 2u);
          swift_slowDealloc(v85, -1, -1);
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
        v86 = objc_allocWithZone((Class)NSError);
        v87 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v88 = objc_msgSend(v86, "initWithDomain:code:userInfo:", v87, 0, 0, v96, v97);
      }
      v89 = v88;

      v90 = v89;
      Transaction.capture()();

      swift_release();
      sub_1000126B0((uint64_t)v14, type metadata accessor for SecureLocationsSubmitEndpoint);
    }
    swift_release();
  }
  else
  {
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Not a location publishing device. Not publishing location", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    sub_10054B3CC();
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
    v45 = objc_allocWithZone((Class)NSError);
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v47 = objc_msgSend(v45, "initWithDomain:code:userInfo:", v46, 12, 0);

    v48 = v47;
    Transaction.capture()();
    swift_release();

  }
}

uint64_t sub_10054F6F0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[6];
  char v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27[2];

  LODWORD(v5) = a5;
  if (qword_1010E9CD8 != -1)
    swift_once(&qword_1010E9CD8, sub_1005201AC);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1010FE9B0);
  swift_bridgeObjectRetain_n(a4, 2);
  swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(38, -1);
    v23 = swift_slowAlloc(96, -1);
    v27[0] = v23;
    *(_DWORD *)v14 = 136446978;
    v25 = v5;
    v26 = sub_100016940(0xD000000000000043, 0x8000000100EDA410, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    if (a2)
      v15 = a1;
    else
      v15 = 0;
    if (a2)
      v16 = a2;
    else
      v16 = 0xE000000000000000;
    v24 = a1;
    swift_bridgeObjectRetain(a2);
    v26 = sub_100016940(v15, v16, v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 22) = 2082;
    if (a4)
      v5 = a3;
    else
      v5 = 0;
    if (a4)
      v17 = a4;
    else
      v17 = 0xE000000000000000;
    swift_bridgeObjectRetain(a4);
    v18 = v5;
    LOBYTE(v5) = v25;
    v26 = sub_100016940(v18, v17, v27);
    a1 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 32) = 1024;
    LODWORD(v26) = v5 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, (char *)&v26 + 4, v14 + 34, v14 + 38);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s findmyId: %{public}s policy: %{public}s stopMonitoringActivePolicy: %{BOOL}d.", (uint8_t *)v14, 0x26u);
    swift_arrayDestroy(v23, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  v19 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v19);
  v21[2] = a1;
  v21[3] = a2;
  v21[4] = a3;
  v21[5] = a4;
  v22 = v5 & 1;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.stopLocationMonitor", 65, 2, sub_10055473C, v21, &type metadata for () + 1);
}

uint64_t sub_10054FA10(uint64_t a1, void *a2, void *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t result;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  _BYTE *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  char v111[16];
  uint64_t v112;
  uint64_t v113;
  void *v114;
  void *v115;
  char v116[24];
  uint64_t v117;
  __int128 v118;
  _OWORD v119[2];
  _OWORD v120[2];

  v107 = a7;
  v106 = a6;
  v109 = a5;
  v103 = type metadata accessor for BeaconSharingSessionContext(0);
  __chkstk_darwin(v103);
  v104 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v12);
  v102 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EF1C0);
  __chkstk_darwin(v14);
  v16 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for SecureLocationsSubscription(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120[0] = 0uLL;
  v21 = a4;
  v112 = *((_QWORD *)a4 + 6);
  v113 = a1;
  v110 = a1;
  v108 = a2;
  v114 = a2;
  v115 = a3;
  v105 = a3;
  OS_dispatch_queue.sync<A>(execute:)(sub_100555CF0, v111, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100004048((uint64_t)v16, &qword_1010EF1C0);
LABEL_13:
    v26 = a4;
    v29 = v108;
    goto LABEL_21;
  }
  sub_1000126EC((uint64_t)v16, (uint64_t)v20, type metadata accessor for SecureLocationsSubscription);
  v22 = &v20[*(int *)(v17 + 32)];
  v23 = *((_QWORD *)v22 + 1);
  if (!v23)
  {
    sub_1000126B0((uint64_t)v20, type metadata accessor for SecureLocationsSubscription);
    goto LABEL_13;
  }
  v100 = v20;
  v101 = 0;
  v24 = *(_QWORD *)v22;
  v25 = qword_1010EA0A8;
  swift_bridgeObjectRetain(v23);
  v26 = v21;
  if (v25 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  swift_retain();
  v27 = Data.init(base64Encoded:options:)(v24, v23, 0);
  v29 = v108;
  if (v28 >> 60 == 15)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B7A18);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "failed to decode server provided push identifier", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }
    swift_release();
    swift_bridgeObjectRelease();

    v35 = 0;
    v36 = 0;
  }
  else
  {
    v37 = v27;
    v38 = v28;
    v39 = v102;
    static String.Encoding.utf8.getter(v27);
    v35 = String.init(data:encoding:)(v37, v38, v39);
    v36 = v40;
    sub_10001EF3C(v37, v38);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)&v120[0] = v35;
  *((_QWORD *)&v120[0] + 1) = v36;
  if (qword_1010E9B48 != -1)
    swift_once(&qword_1010E9B48, sub_100308748);
  v41 = type metadata accessor for Logger(0);
  sub_10001A9E8(v41, (uint64_t)qword_1011B6D08);
  swift_bridgeObjectRetain_n(v29, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = swift_slowAlloc(42, -1);
    v46 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v118 = v46;
    *(_DWORD *)v45 = 141558787;
    *(_QWORD *)&v119[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, (char *)v119 + 8, v45 + 4, v45 + 12);
    *(_WORD *)(v45 + 12) = 2081;
    swift_beginAccess(v120, v116, 0, 0);
    v119[0] = v120[0];
    swift_bridgeObjectRetain(*((_QWORD *)&v120[0] + 1));
    v47 = sub_10001A9A8(&qword_1010F6350);
    v48 = String.init<A>(describing:)(v119, v47);
    *(_QWORD *)&v119[0] = sub_100016940(v48, v49, (uint64_t *)&v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, (char *)v119 + 8, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 22) = 2160;
    *(_QWORD *)&v119[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, (char *)v119 + 8, v45 + 24, v45 + 32);
    *(_WORD *)(v45 + 32) = 2081;
    swift_bridgeObjectRetain(v29);
    *(_QWORD *)&v119[0] = sub_100016940(v110, (unint64_t)v29, (uint64_t *)&v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, (char *)v119 + 8, v45 + 34, v45 + 42);
    swift_bridgeObjectRelease_n(v29, 3);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "stopLiveLocations: Got handle from server %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v45, 0x2Au);
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v29, 2);
  }

  sub_1000126B0((uint64_t)v100, type metadata accessor for SecureLocationsSubscription);
LABEL_21:
  swift_beginAccess(v120, v119, 1, 0);
  v51 = *((_QWORD *)&v120[0] + 1);
  if (!*((_QWORD *)&v120[0] + 1))
  {
    v102 = v26;
    if (qword_1010EA0A8 != -1)
      v50 = swift_once(&qword_1010EA0A8, sub_10098F82C);
    v52 = qword_1011B7A48;
    __chkstk_darwin(v50);
    v53 = v110;
    *(&v99 - 4) = v52;
    *(&v99 - 3) = v53;
    *(&v99 - 2) = (uint64_t)v29;
    swift_retain();
    v54 = sub_10001A9A8(&qword_1010F6350);
    OS_dispatch_queue.sync<A>(execute:)(sub_100555DF8, &v99 - 6, v54);
    swift_release();
    v120[0] = v118;
    swift_bridgeObjectRelease();
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v55 = type metadata accessor for Logger(0);
    sub_10001A9E8(v55, (uint64_t)qword_1011B6D08);
    v56 = v120[0];
    swift_bridgeObjectRetain_n(*((_QWORD *)&v120[0] + 1), 2);
    swift_bridgeObjectRetain_n(v29, 2);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(42, -1);
      v61 = swift_slowAlloc(64, -1);
      *(_DWORD *)v60 = 141558787;
      v117 = v61;
      *(_QWORD *)&v118 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 8, v60 + 4, v60 + 12);
      *(_WORD *)(v60 + 12) = 2081;
      v118 = v56;
      swift_bridgeObjectRetain(*((_QWORD *)&v56 + 1));
      v62 = String.init<A>(describing:)(&v118, v54);
      *(_QWORD *)&v118 = sub_100016940(v62, v63, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 8, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v56 + 1), 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 22) = 2160;
      *(_QWORD *)&v118 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 8, v60 + 24, v60 + 32);
      *(_WORD *)(v60 + 32) = 2081;
      swift_bridgeObjectRetain(v29);
      *(_QWORD *)&v118 = sub_100016940(v110, (unint64_t)v29, &v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, (char *)&v118 + 8, v60 + 34, v60 + 42);
      swift_bridgeObjectRelease_n(v29, 3);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "stopLiveLocations: Got handle from fmf following %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v60, 0x2Au);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v29, 2);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v56 + 1), 2);
    }
    v51 = *((_QWORD *)&v120[0] + 1);
    v26 = v102;
    if (!*((_QWORD *)&v120[0] + 1))
      goto LABEL_33;
  }
  v64 = *(_QWORD *)&v120[0];
  swift_bridgeObjectRetain(v51);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v64, v51);
  if (!v67)
  {
LABEL_33:
    *(_QWORD *)&v118 = 0;
    *((_QWORD *)&v118 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v81._countAndFlagsBits = 0xD000000000000031;
    v81._object = (void *)0x8000000100EDA610;
    String.append(_:)(v81);
    v82._countAndFlagsBits = v110;
    v82._object = v29;
    String.append(_:)(v82);
    v83._object = (void *)0x8000000100EDA650;
    v83._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v83);
    v84 = v118;
    if (qword_1010E9B48 != -1)
      swift_once(&qword_1010E9B48, sub_100308748);
    v85 = type metadata accessor for Logger(0);
    sub_10001A9E8(v85, (uint64_t)qword_1011B6D08);
    swift_bridgeObjectRetain_n(*((_QWORD *)&v84 + 1), 2);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v90 = swift_slowAlloc(32, -1);
      v102 = v26;
      v91 = v90;
      *(_QWORD *)&v118 = v90;
      *(_DWORD *)v89 = 136315138;
      swift_bridgeObjectRetain(*((_QWORD *)&v84 + 1));
      v117 = sub_100016940(v84, *((unint64_t *)&v84 + 1), (uint64_t *)&v118);
      v29 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v117, &v118, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease_n(*((_QWORD *)&v84 + 1), 3);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "LiveLocations: %s", v89, 0xCu);
      swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
      v92 = v91;
      v26 = v102;
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v89, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(*((_QWORD *)&v84 + 1), 2);
    }
    v79 = v107;
    v80 = v106;
    if (qword_1010EA428 != -1)
      swift_once(&qword_1010EA428, sub_100C48554);
    swift_retain();
    sub_100C49090(v84, *((uint64_t *)&v84 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    v93 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v93);
    v94 = v110;
    *(&v99 - 4) = (uint64_t)v26;
    *(&v99 - 3) = v94;
    v95 = (uint64_t)v105;
    *(&v99 - 2) = (uint64_t)v29;
    *(&v99 - 1) = v95;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.liveUnsubscribe", 61, 2, sub_100555BD8, &v99 - 6, &type metadata for () + 1);
    goto LABEL_41;
  }
  v68 = v67;
  v69 = *((_QWORD *)v26 + 4);
  v70 = (uint64_t)v104;
  *v104 = v65;
  *(_QWORD *)(v70 + 8) = v66;
  *(_QWORD *)(v70 + 16) = v67;
  swift_storeEnumTagMultiPayload(v70, v103, 1);
  if (*(_QWORD *)(v69 + 432))
  {
    swift_bridgeObjectRetain(v68);
    swift_retain();
    v71 = dispatch thunk of AsynchronousCache.value(for:)(v70);
    swift_release();
    *(_QWORD *)&v118 = v71;
    v72 = sub_10001A9A8(&qword_1010F7980);
    v73 = sub_1000193A4(&qword_1010F7988, &qword_1010F7980, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v74 = Publisher.eraseToAnyPublisher()(v72, v73);
    swift_release();
    sub_1000126B0(v70, type metadata accessor for BeaconSharingSessionContext);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v118 = v74;
    v75 = (_QWORD *)swift_allocObject(&unk_10107E1E0, 48, 7);
    v76 = v110;
    v75[2] = v26;
    v75[3] = v76;
    v77 = v105;
    v75[4] = v29;
    v75[5] = v77;
    swift_bridgeObjectRetain(v29);
    swift_retain();
    v78 = v77;
    Publisher.oneshot(_:)(sub_100555C1C, v75, v72, v73);
    swift_release();
    swift_release();
    v79 = v107;
    v80 = v106;
LABEL_41:
    v96 = sub_10001A9A8(&qword_101106C20);
    v97 = swift_allocObject(v96, 48, 7);
    *(_OWORD *)(v97 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v97 + 32) = v80;
    *(_QWORD *)(v97 + 40) = v79;
    swift_bridgeObjectRetain(v79);
    sub_10052B438(v97);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  result = swift_release();
  __break(1u);
  return result;
}

void sub_100550788()
{
  uint64_t v0;
  char v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  __int128 aBlock;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[13];

  if ((sub_100546A18() & 1) != 0)
    goto LABEL_7;
  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v0 = qword_1011B7A48;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v0, &type metadata for SecureLocationsConfig);
  swift_release();
  v21[10] = v18;
  v21[11] = v19;
  v21[12] = v20;
  v21[6] = v14;
  v21[7] = v15;
  v21[8] = v16;
  v21[9] = v17;
  v21[2] = v10;
  v21[3] = v11;
  v21[4] = v12;
  v21[5] = v13;
  v21[0] = aBlock;
  v21[1] = v9;
  sub_1003D09E0(v21);
  if ((BYTE8(v21[0]) & 1) == 0)
  {
LABEL_7:
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7A18);
    v2 = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v6, "LocationMonitor: secureLocations feature is disabled. Not proceeding with starting monitor", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
  }
  else
  {
    swift_retain();
    v1 = sub_10000D338();
    swift_release();
    if ((v1 & 1) == 0)
      return;
    v2 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
    *(_QWORD *)&v10 = sub_1005359F8;
    *((_QWORD *)&v10 + 1) = 0;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v9 = sub_100555E2C;
    *((_QWORD *)&v9 + 1) = &unk_10107D5A0;
    v3 = _Block_copy(&aBlock);
    -[NSObject startLocationMonitoring:](v2, "startLocationMonitoring:", v3);
    _Block_release(v3);
  }

}

id sub_1005509C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for SecureLocation(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + *(int *)(v7 + 56));
  if ((unint64_t)(v10 - 1) >= 5)
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B7A18);
    v12 = sub_10005972C(a1, (uint64_t)v9, type metadata accessor for SecureLocation);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v25 = a2;
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134217984;
      v16 = *(_QWORD *)&v9[*(int *)(v6 + 56)];
      sub_1000126B0((uint64_t)v9, type metadata accessor for SecureLocation);
      v26 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unhandled Activity state:%ld", v15, 0xCu);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v9, type metadata accessor for SecureLocation);
    }

    v10 = 0;
  }
  v17 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + 24));
  v18 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)(a1 + 16));
  v19 = *(_QWORD *)(a1 + *(int *)(v6 + 64) + 8);
  v20 = objc_allocWithZone((Class)BMFindMyLocationChangeEvent);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(a3);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v23 = objc_msgSend(v20, "initWithIDSHandle:locationChangeType:motionActivityState:latitude:longitude:name:", v21, 0, v10, v17, v18, v22);

  return v23;
}

unint64_t sub_100550C80(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104ABC8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_100550CC8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104AC78, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t sub_100550D10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;

  v5 = sub_10001A9A8(&qword_1010FEE20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100551358();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys, v11, v9, v10);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v48) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    v14 = v13;
    LOBYTE(v48) = 1;
    swift_bridgeObjectRetain(v13);
    v45 = KeyedDecodingContainer.decode(_:forKey:)(&v48, v5);
    v46 = v12;
    v50 = 2;
    v16 = v15;
    v17 = sub_10055139C();
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for SecureLocationsPushCommands, &v50, v5, &type metadata for SecureLocationsPushCommands, v17);
    v47 = v16;
    LODWORD(v16) = v48;
    LOBYTE(v48) = 3;
    v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    v20 = v19;
    v42 = v18;
    v49 = v16;
    v21 = sub_10001A9A8(&qword_1011063B0);
    v50 = 4;
    v22 = sub_100365C28((unint64_t *)&qword_1010F9668, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    v44 = v20;
    swift_bridgeObjectRetain(v20);
    v43 = v22;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v50, v5, v21, v22);
    v50 = 5;
    v41 = v48;
    swift_bridgeObjectRetain(v48);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v21, &v50, v5, v21, v43);
    v39 = a2;
    v40 = v21;
    v23 = v48;
    LOBYTE(v48) = 6;
    swift_bridgeObjectRetain(v23);
    v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v5);
    v26 = v25;
    v38 = v24;
    v27 = sub_10001A9A8(&qword_1010FEE38);
    v50 = 7;
    v28 = sub_1005513E0();
    swift_bridgeObjectRetain(v26);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v50, v5, v27, v28);
    v37 = v14;
    v29 = v48;
    v50 = 8;
    swift_bridgeObjectRetain(v48);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v40, &v50, v5, v40, v43);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v30 = v48;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = v41;
    swift_bridgeObjectRelease();
    v32 = v44;
    swift_bridgeObjectRelease();
    v33 = v47;
    swift_bridgeObjectRelease();
    v34 = v37;
    result = swift_bridgeObjectRelease();
    v36 = v39;
    *v39 = v46;
    v36[1] = v34;
    v36[2] = v45;
    v36[3] = v33;
    *((_BYTE *)v36 + 32) = v49;
    v36[5] = v42;
    v36[6] = v32;
    v36[7] = v31;
    v36[8] = v23;
    v36[9] = v38;
    v36[10] = v26;
    v36[11] = v29;
    v36[12] = v30;
  }
  return result;
}

unint64_t sub_100551358()
{
  unint64_t result;

  result = qword_1010FEE28;
  if (!qword_1010FEE28)
  {
    result = swift_getWitnessTable(a1_16, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FEE28);
  }
  return result;
}

unint64_t sub_10055139C()
{
  unint64_t result;

  result = qword_1010FEE30;
  if (!qword_1010FEE30)
  {
    result = swift_getWitnessTable(byte_100E431E4, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1010FEE30);
  }
  return result;
}

unint64_t sub_1005513E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FEE40;
  if (!qword_1010FEE40)
  {
    v1 = sub_10001F784(&qword_1010FEE38);
    v2[0] = &protocol witness table for String;
    v2[1] = sub_100365C28((unint64_t *)&qword_1010F9668, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FEE40);
  }
  return result;
}

unint64_t sub_100551460()
{
  unint64_t result;

  result = qword_1010FEE50;
  if (!qword_1010FEE50)
  {
    result = swift_getWitnessTable(byte_100E431BC, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1010FEE50);
  }
  return result;
}

unint64_t sub_1005514A4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FEE60;
  if (!qword_1010FEE60)
  {
    v1 = sub_10001F784(&qword_1010FEE38);
    v2[0] = &protocol witness table for String;
    v2[1] = sub_100365C28((unint64_t *)&qword_1010F9680, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FEE60);
  }
  return result;
}

unint64_t sub_100551524()
{
  unint64_t result;

  result = qword_1010FEE68;
  if (!qword_1010FEE68)
  {
    result = swift_getWitnessTable(byte_100E4320C, &type metadata for SecureLocationsPushCommands);
    atomic_store(result, (unint64_t *)&qword_1010FEE68);
  }
  return result;
}

uint64_t sub_100551568()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_10055157C(uint64_t a1)
{
  uint64_t v1;

  return sub_100540474(a1, *(_QWORD *)(v1 + 16), *(void (**)(id))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100551588(uint64_t a1)
{
  uint64_t v1;

  return sub_100542B38(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "FetchConfig - error %s");
}

uint64_t sub_1005515A8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];

  v8 = type metadata accessor for String.Encoding(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v9);
  v12 = String.init(data:encoding:)(a1, a2, v11);
  v14 = &qword_1010EA000;
  if (v13)
  {
    v15 = v12;
    v16 = v13;
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
    swift_bridgeObjectRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v41 = a3;
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v42 = a4;
      v23 = v22;
      v45[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain(v16);
      v43 = sub_100016940(v15, v16, v45);
      a3 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(v16, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "jsonString %s", v21, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      v24 = v23;
      a4 = v42;
      swift_slowDealloc(v24, -1, -1);
      v25 = v21;
      v14 = &qword_1010EA000;
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v16, 2);
    }
  }
  v26 = type metadata accessor for JSONDecoder(0);
  v27 = swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  JSONDecoder.init()(v27);
  v28 = sub_100554968();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for SecureLocationsEncodedPushPayload, a1, a2, &type metadata for SecureLocationsEncodedPushPayload, v28);
  v29 = v45[2];
  if (v14[19] != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B7A18);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.debug.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Decoded push location payload successfully", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = sub_100444148(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  v36 = a3;
  v37 = sub_100546668((uint64_t)v35, a3);
  swift_bridgeObjectRelease();
  swift_release();
  v38 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v38);
  *(&v40 - 2) = (uint64_t)v36;
  *(&v40 - 1) = (uint64_t)v37;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.savePushedLocations", 49, 2, sub_1005549AC, &v40 - 4, &type metadata for () + 1);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD))(a4 + 16))(a4, 0);
  return swift_release();
}

void sub_100551B44(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  double *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  double v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  unint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  __n128 v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  __n128 v136;
  char *v137;
  __n128 v138;
  id v139;
  uint64_t v140;
  double *v141;
  id v142;
  int v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD v156[13];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;

  v121 = a5;
  v122 = a4;
  v143 = a2;
  v123 = a1;
  v6 = type metadata accessor for SecureLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v9 = __chkstk_darwin(v8);
  v145 = (unint64_t *)((char *)v119.n128_u64 - v10);
  v11 = __chkstk_darwin(v9);
  v12 = __chkstk_darwin(v11);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v119 - v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v119 - v17;
  v19 = __chkstk_darwin(v16);
  v24 = (double *)((char *)v119.n128_f64 - v23);
  v132 = a3;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
  {
    v150 = v22;
    v140 = v21;
    v124 = (uint64_t *)v20;
    v125 = v19;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v25 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v25, &type metadata for SecureLocationsConfig);
    swift_release();
    v167 = v156[10];
    v168 = v156[11];
    v169 = v156[12];
    v163 = v156[6];
    v164 = v156[7];
    v165 = v156[8];
    v166 = v156[9];
    v159 = v156[2];
    v160 = v156[3];
    v161 = v156[4];
    v162 = v156[5];
    v157 = v156[0];
    v158 = v156[1];
    sub_1003D09E0(&v157);
    v131 = *(_QWORD *)(v123 + 16);
    if (v131)
    {
      v26 = *(double *)&v158;
      v130 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v129 = v123 + v130;
      v27 = *(_QWORD *)(v7 + 72);
      v120 = &v153;
      v28 = swift_bridgeObjectRetain(v123);
      v29 = 0;
      v30 = _swiftEmptyArrayStorage;
      v28.n128_u64[0] = 136315906;
      v138 = v28;
      v137 = (char *)&type metadata for Any + 8;
      v28.n128_u64[0] = 136315650;
      v136 = v28;
      v28.n128_u64[0] = 136315394;
      v119 = v28;
      v141 = v24;
      v126 = v18;
      v127 = v15;
      v128 = v27;
      while (1)
      {
        v135 = v29;
        sub_10005972C(v129 + v27 * v29, (uint64_t)v24, type metadata accessor for SecureLocation);
        sub_10005972C((uint64_t)v24, (uint64_t)v18, type metadata accessor for SecureLocation);
        v31 = *(_QWORD *)(v132 + 104);
        v32 = (uint64_t)v150;
        if (!*(_QWORD *)(v31 + 16))
          goto LABEL_50;
        v148 = *(_QWORD *)(v31 + 16);
        v133 = v30;
        swift_bridgeObjectRetain(v31);
        v134 = v33;
        v34 = (unint64_t *)(v33 + 56);
        while (1)
        {
          v35 = *(v34 - 2);
          v36 = *(v34 - 1);
          v37 = *v34;
          v38 = *((double *)v34 + 3);
          v39 = *((double *)v34 + 4);
          v40 = v34[5];
          v41 = v34[7];
          v149 = v34[6];
          v147 = v34;
          v42 = v34[2];
          v43 = qword_1010EA098;
          v151 = v35;
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v42);
          swift_bridgeObjectRetain(v41);
          if (v43 != -1)
            swift_once(&qword_1010EA098, sub_10098F7D8);
          v44 = type metadata accessor for Logger(0);
          v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B7A18);
          sub_10005972C((uint64_t)v24, v32, type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n(v151, 4);
          swift_bridgeObjectRetain_n(v37, 4);
          swift_bridgeObjectRetain_n(v42, 4);
          swift_bridgeObjectRetain_n(v41, 4);
          v146 = v45;
          v47 = Logger.logObject.getter(v46);
          v48 = static os_log_type_t.info.getter(v47);
          v49 = v48;
          v50 = os_log_type_enabled(v47, v48);
          v144 = v36;
          if (v50)
          {
            v51 = swift_slowAlloc(42, -1);
            v142 = (id)swift_slowAlloc(96, -1);
            v152 = (uint64_t)v142;
            *(_DWORD *)v51 = v138.n128_u32[0];
            swift_bridgeObjectRetain(v37);
            *(_QWORD *)(v51 + 4) = sub_100016940(v36, v37, &v152);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 12) = 2080;
            if (v41)
              v52 = v149;
            else
              v52 = 1818848800;
            if (v41)
              v53 = v41;
            else
              v53 = 0xE400000000000000;
            swift_bridgeObjectRetain(v41);
            *(_QWORD *)(v51 + 14) = sub_100016940(v52, v53, &v152);
            swift_bridgeObjectRelease_n(v41, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            LODWORD(v139) = v49;
            v54 = v151;
            swift_bridgeObjectRelease_n(v151, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v51 + 22) = 2080;
            v55 = *v150;
            v56 = v150[1];
            swift_bridgeObjectRetain(v56);
            v57 = v55;
            v32 = (uint64_t)v150;
            *(_QWORD *)(v51 + 24) = sub_100016940(v57, v56, &v152);
            swift_bridgeObjectRelease();
            sub_1000126B0(v32, type metadata accessor for SecureLocation);
            *(_WORD *)(v51 + 32) = 2048;
            *(_QWORD *)(v51 + 34) = v40;
            swift_bridgeObjectRelease_n(v41, 2);
            v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            swift_bridgeObjectRelease_n(v54, 2);
            _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v139, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v51, 0x2Au);
            v59 = v142;
            swift_arrayDestroy(v142, 3, v137);
            v60 = v59;
            v61 = v140;
            swift_slowDealloc(v60, -1, -1);
            v62 = v51;
            v24 = v141;
            swift_slowDealloc(v62, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n(v41, 2);
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            v63 = v151;
            swift_bridgeObjectRelease_n(v151, 2);
            sub_1000126B0(v32, type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n(v41, 2);
            v58 = v42;
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            swift_bridgeObjectRelease_n(v63, 2);
            v61 = v140;
          }
          sub_10005972C((uint64_t)v24, v61, type metadata accessor for SecureLocation);
          if (!v41 && (v143 & 1) != 0)
          {
            sub_1000126B0(v61, type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          sub_10005972C(v61, (uint64_t)v145, type metadata accessor for SecureLocation);
          if ((v143 & 1) == 0)
            break;
          sub_1000126B0((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v34 = v147 + 11;
          if (!--v148)
          {
            swift_bridgeObjectRelease();
            v18 = v126;
            v15 = v127;
            goto LABEL_49;
          }
        }
        v79 = v37;
        v80 = v145[1];
        if (!v41)
        {
          swift_bridgeObjectRetain(v145[1]);
          sub_1000126B0((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v151 = v80;
          goto LABEL_10;
        }
        if (v149 == *v145 && v41 == v80)
        {
          swift_bridgeObjectRetain(v41);
          sub_1000126B0((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          v37 = v79;
        }
        else
        {
          v81 = _stringCompareWithSmolCheck(_:_:expecting:)(v149, v41, *v145, v145[1], 0);
          swift_bridgeObjectRetain(v41);
          sub_1000126B0((uint64_t)v145, type metadata accessor for SecureLocation);
          sub_1000126B0(v61, type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          v37 = v79;
          if ((v81 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v32 = (uint64_t)v150;
            goto LABEL_10;
          }
        }
LABEL_25:
        v64 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v38, v39);
        v142 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v24[3], v24[2]);
        objc_msgSend(v64, "distanceFromLocation:");
        v66 = v65;
        v67 = v151;
        swift_bridgeObjectRetain_n(v151, 2);
        swift_bridgeObjectRetain_n(v37, 2);
        swift_bridgeObjectRetain_n(v58, 2);
        swift_bridgeObjectRetain_n(v41, 2);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.info.getter(v69);
        if (os_log_type_enabled(v69, v70))
        {
          v71 = swift_slowAlloc(32, -1);
          v139 = v64;
          v72 = v58;
          v73 = v71;
          v74 = v37;
          v75 = (id)swift_slowAlloc(64, -1);
          v152 = (uint64_t)v75;
          *(_DWORD *)v73 = v136.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(_QWORD *)(v73 + 4) = sub_100016940(v144, v74, &v152);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 12) = 2080;
          if (v41)
            v76 = v149;
          else
            v76 = 0x206C696E20;
          if (v41)
            v77 = v41;
          else
            v77 = 0xE500000000000000;
          swift_bridgeObjectRetain(v41);
          *(_QWORD *)(v73 + 14) = sub_100016940(v76, v77, &v152);
          swift_bridgeObjectRelease_n(v41, 2);
          swift_bridgeObjectRelease_n(v72, 2);
          swift_bridgeObjectRelease_n(v74, 2);
          swift_bridgeObjectRelease_n(v151, 2);
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 22) = 2048;
          *(double *)(v73 + 24) = v66;
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v73, 0x20u);
          swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
          v78 = v75;
          v37 = v74;
          swift_slowDealloc(v78, -1, -1);
          v64 = v139;
          swift_slowDealloc(v73, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v41, 2);
          swift_bridgeObjectRelease_n(v58, 2);
          swift_bridgeObjectRelease_n(v37, 2);
          swift_bridgeObjectRelease_n(v67, 2);
        }
        v32 = (uint64_t)v150;
        v24 = v141;
        if (v66 > v26)
        {

          goto LABEL_9;
        }
        v139 = v64;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v18 = v126;
        swift_beginAccess(v126, &v155, 1, 0);
        v82 = v125;
        v83 = &v18[*(int *)(v125 + 64)];
        *(_QWORD *)v83 = v144;
        *((_QWORD *)v83 + 1) = v37;
        swift_bridgeObjectRelease();
        v84 = (uint64_t)v24;
        v85 = v124;
        v86 = sub_10005972C(v84, (uint64_t)v124, type metadata accessor for SecureLocation);
        v87 = Logger.logObject.getter(v86);
        v88 = static os_log_type_t.default.getter(v87);
        v89 = v88;
        if (os_log_type_enabled(v87, v88))
        {
          v90 = swift_slowAlloc(22, -1);
          LODWORD(v151) = v89;
          v91 = v90;
          v149 = swift_slowAlloc(64, -1);
          v154 = v149;
          *(_DWORD *)v91 = v119.n128_u32[0];
          v92 = (uint64_t *)&v18[*(int *)(v82 + 64)];
          v93 = v92[1];
          v152 = *v92;
          v153 = v93;
          swift_bridgeObjectRetain(v93);
          v94 = sub_10001A9A8(&qword_1010F6350);
          v95 = String.init<A>(describing:)(&v152, v94);
          v152 = sub_100016940(v95, v96, &v154);
          v97 = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v120, v91 + 4, v91 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v91 + 12) = 2080;
          v98 = *v85;
          v99 = v85[1];
          swift_bridgeObjectRetain(v99);
          v152 = sub_100016940(v98, v99, &v154);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v97, v91 + 14, v91 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v85, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v151, "LabelledLocations Adding label %s to location %s", (uint8_t *)v91, 0x16u);
          v100 = v149;
          swift_arrayDestroy(v149, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v100, -1, -1);
          swift_slowDealloc(v91, -1, -1);
        }
        else
        {
          sub_1000126B0((uint64_t)v85, type metadata accessor for SecureLocation);
        }

        v15 = v127;
        v24 = v141;
LABEL_49:
        v30 = v133;
LABEL_50:
        swift_beginAccess(v18, v156, 0, 0);
        sub_10005972C((uint64_t)v18, (uint64_t)v15, type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          v30 = (_QWORD *)sub_1007C9DB4(0, v30[2] + 1, 1, (unint64_t)v30);
        v102 = v30[2];
        v101 = v30[3];
        if (v102 >= v101 >> 1)
          v30 = (_QWORD *)sub_1007C9DB4(v101 > 1, v102 + 1, 1, (unint64_t)v30);
        v103 = v135 + 1;
        v30[2] = v102 + 1;
        v27 = v128;
        v104 = (uint64_t)v30 + v130 + v102 * v128;
        v29 = v103;
        sub_1000126EC((uint64_t)v15, v104, type metadata accessor for SecureLocation);
        sub_1000126B0((uint64_t)v24, type metadata accessor for SecureLocation);
        sub_1000126B0((uint64_t)v18, type metadata accessor for SecureLocation);
        if (v29 == v131)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
    }
    v30 = _swiftEmptyArrayStorage;
LABEL_64:
    sub_100539334((uint64_t)v30, 1);
    sub_10052F540(0);
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v114 = type metadata accessor for Logger(0);
    v115 = sub_10001A9E8(v114, (uint64_t)qword_1011B7A18);
    v116 = Logger.logObject.getter(v115);
    v117 = static os_log_type_t.default.getter(v116);
    if (os_log_type_enabled(v116, v117))
    {
      v118 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v118 = 0;
      _os_log_impl((void *)&_mh_execute_header, v116, v117, "LabelledLocations: Completed updating locations with updated labels", v118, 2u);
      swift_slowDealloc(v118, -1, -1);
    }

    Transaction.capture()();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v105 = type metadata accessor for Logger(0);
    v106 = sub_10001A9E8(v105, (uint64_t)qword_1011B7A18);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "LabelledLocations - No labels - nothing to resolve", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
    }

    sub_100539334(v123, 1);
    sub_10052F540(0);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.default.getter(v111);
    if (os_log_type_enabled(v111, v112))
    {
      v113 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "LabelledLocations: Completed updating locations with updated labels", v113, 2u);
      swift_slowDealloc(v113, -1, -1);
    }

    Transaction.capture()();
  }
}

uint64_t sub_100552A80(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t *v36;
  NSObject *v37;
  unint64_t v38;
  double v39;
  double v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t);
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t (*v59)(uint64_t);
  NSObject *v60;
  os_log_t v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  id v68;
  id v69;
  double v70;
  double v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  id v82;
  char v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  __n128 v134;
  char *v135;
  __n128 v136;
  id v137;
  os_log_t v138;
  char *v139;
  id v140;
  int v141;
  _QWORD *v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _OWORD v155[13];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;

  v119 = a4;
  v120 = a5;
  v141 = a2;
  v121 = a1;
  v6 = type metadata accessor for SecureLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v9 = __chkstk_darwin(v8);
  v142 = (unint64_t *)((char *)v117.n128_u64 - v10);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v117 - v12;
  v14 = __chkstk_darwin(v11);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v117 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v117 - v19;
  v21 = __chkstk_darwin(v18);
  v149 = (uint64_t)&v117 - v24;
  v130 = a3;
  if (*(_QWORD *)(*(_QWORD *)(a3 + 104) + 16))
  {
    v150 = v23;
    v122 = (uint64_t *)v22;
    v123 = v21;
    if (qword_1010EA0A8 != -1)
      swift_once(&qword_1010EA0A8, sub_10098F82C);
    v25 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v25, &type metadata for SecureLocationsConfig);
    swift_release();
    v166 = v155[10];
    v167 = v155[11];
    v168 = v155[12];
    v162 = v155[6];
    v163 = v155[7];
    v164 = v155[8];
    v165 = v155[9];
    v158 = v155[2];
    v159 = v155[3];
    v160 = v155[4];
    v161 = v155[5];
    v156 = v155[0];
    v157 = v155[1];
    sub_1003D09E0(&v156);
    v129 = *(_QWORD *)(v121 + 16);
    if (v129)
    {
      v26 = *(double *)&v157;
      v128 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v127 = v121 + v128;
      v27 = *(_QWORD *)(v7 + 72);
      v118 = &v152;
      v28 = swift_bridgeObjectRetain(v121);
      v29 = 0;
      v30 = _swiftEmptyArrayStorage;
      v31 = type metadata accessor for SecureLocation;
      v28.n128_u64[0] = 136315906;
      v136 = v28;
      v135 = (char *)&type metadata for Any + 8;
      v28.n128_u64[0] = 136315650;
      v134 = v28;
      v28.n128_u64[0] = 136315394;
      v117 = v28;
      v139 = v13;
      v32 = v149;
      v124 = v20;
      v125 = v17;
      v126 = v27;
      while (1)
      {
        v133 = v29;
        sub_10005972C(v127 + v27 * v29, v32, v31);
        sub_10005972C(v32, (uint64_t)v20, v31);
        v33 = *(_QWORD *)(v130 + 104);
        v34 = v150;
        if (!*(_QWORD *)(v33 + 16))
          goto LABEL_49;
        v147 = *(_QWORD *)(v33 + 16);
        v131 = v30;
        swift_bridgeObjectRetain(v33);
        v132 = v35;
        v36 = (unint64_t *)(v35 + 56);
        while (1)
        {
          v37 = *(v36 - 2);
          v145 = *(v36 - 1);
          v38 = *v36;
          v39 = *((double *)v36 + 3);
          v40 = *((double *)v36 + 4);
          v41 = v36[5];
          v42 = v36[7];
          v148 = v36[6];
          v43 = v36[2];
          v44 = qword_1010EA098;
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(v43);
          swift_bridgeObjectRetain(v42);
          if (v44 != -1)
            swift_once(&qword_1010EA098, sub_10098F7D8);
          v45 = type metadata accessor for Logger(0);
          v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B7A18);
          sub_10005972C(v149, (uint64_t)v34, v31);
          swift_bridgeObjectRetain_n(v37, 4);
          swift_bridgeObjectRetain_n(v38, 4);
          swift_bridgeObjectRetain_n(v43, 4);
          swift_bridgeObjectRetain_n(v42, 4);
          v144 = v46;
          v48 = v31;
          v49 = Logger.logObject.getter(v47);
          v50 = static os_log_type_t.info.getter(v49);
          LODWORD(v143) = v50;
          v51 = os_log_type_enabled(v49, v50);
          v146 = v43;
          if (v51)
          {
            v52 = swift_slowAlloc(42, -1);
            v140 = (id)swift_slowAlloc(96, -1);
            v151 = (uint64_t)v140;
            *(_DWORD *)v52 = v136.n128_u32[0];
            swift_bridgeObjectRetain(v38);
            *(_QWORD *)(v52 + 4) = sub_100016940(v145, v38, &v151);
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 12) = 2080;
            if (v42)
              v53 = v148;
            else
              v53 = 1818848800;
            v138 = v49;
            v54 = v48;
            v55 = v43;
            if (v42)
              v56 = v42;
            else
              v56 = 0xE400000000000000;
            swift_bridgeObjectRetain(v42);
            *(_QWORD *)(v52 + 14) = sub_100016940(v53, v56, &v151);
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v55, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 22) = 2080;
            v57 = *v150;
            v58 = v150[1];
            swift_bridgeObjectRetain(v58);
            *(_QWORD *)(v52 + 24) = sub_100016940(v57, v58, &v151);
            swift_bridgeObjectRelease();
            v59 = v54;
            sub_1000126B0((uint64_t)v150, v54);
            *(_WORD *)(v52 + 32) = 2048;
            *(_QWORD *)(v52 + 34) = v41;
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v55, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            v60 = v37;
            swift_bridgeObjectRelease_n(v37, 2);
            v61 = v138;
            _os_log_impl((void *)&_mh_execute_header, v138, (os_log_type_t)v143, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v52, 0x2Au);
            v62 = v140;
            swift_arrayDestroy(v140, 3, v135);
            v63 = v62;
            v64 = v149;
            swift_slowDealloc(v63, -1, -1);
            v65 = v52;
            v13 = v139;
            swift_slowDealloc(v65, -1, -1);

          }
          else
          {
            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            swift_bridgeObjectRelease_n(v37, 2);
            v66 = (uint64_t)v34;
            v59 = v48;
            sub_1000126B0(v66, v48);

            swift_bridgeObjectRelease_n(v42, 2);
            swift_bridgeObjectRelease_n(v43, 2);
            swift_bridgeObjectRelease_n(v38, 2);
            v60 = v37;
            swift_bridgeObjectRelease_n(v37, 2);
            v64 = v149;
          }
          sub_10005972C(v64, (uint64_t)v13, v59);
          v31 = v59;
          if (!v42 && (v141 & 1) != 0)
          {
            sub_1000126B0((uint64_t)v13, v59);
            goto LABEL_24;
          }
          sub_10005972C((uint64_t)v13, (uint64_t)v142, v59);
          if ((v141 & 1) == 0)
            break;
          sub_1000126B0((uint64_t)v142, v59);
          sub_1000126B0((uint64_t)v13, v59);
          swift_bridgeObjectRelease();
          v34 = v150;
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v36 += 11;
          if (!--v147)
          {
            swift_bridgeObjectRelease();
            v20 = v124;
            v17 = v125;
            v30 = v131;
            v32 = v149;
            goto LABEL_49;
          }
        }
        v34 = v150;
        if (!v42)
        {
          swift_bridgeObjectRetain(v142[1]);
          sub_1000126B0((uint64_t)v142, v31);
          sub_1000126B0((uint64_t)v13, v31);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        if (v148 == *v142 && v42 == v142[1])
        {
          swift_bridgeObjectRetain(v42);
          sub_1000126B0((uint64_t)v142, v31);
          sub_1000126B0((uint64_t)v13, v31);
          swift_bridgeObjectRelease();
LABEL_24:
          v67 = v60;
        }
        else
        {
          v83 = _stringCompareWithSmolCheck(_:_:expecting:)(v148, v42, *v142, v142[1], 0);
          swift_bridgeObjectRetain(v42);
          sub_1000126B0((uint64_t)v142, v31);
          sub_1000126B0((uint64_t)v13, v31);
          swift_bridgeObjectRelease();
          v67 = v60;
          if ((v83 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            v34 = v150;
            goto LABEL_9;
          }
        }
        v68 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v39, v40);
        v69 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(v149 + 24), *(double *)(v149 + 16));
        v143 = v68;
        v140 = v69;
        objc_msgSend(v68, "distanceFromLocation:");
        v71 = v70;
        swift_bridgeObjectRetain_n(v67, 2);
        swift_bridgeObjectRetain_n(v38, 2);
        v72 = v146;
        swift_bridgeObjectRetain_n(v146, 2);
        swift_bridgeObjectRetain_n(v42, 2);
        v74 = v38;
        v75 = Logger.logObject.getter(v73);
        v76 = static os_log_type_t.info.getter(v75);
        if (os_log_type_enabled(v75, v76))
        {
          v77 = swift_slowAlloc(32, -1);
          v138 = v67;
          v78 = v77;
          v137 = (id)swift_slowAlloc(64, -1);
          v151 = (uint64_t)v137;
          *(_DWORD *)v78 = v134.n128_u32[0];
          swift_bridgeObjectRetain(v74);
          *(_QWORD *)(v78 + 4) = sub_100016940(v145, v74, &v151);
          swift_bridgeObjectRelease();
          *(_WORD *)(v78 + 12) = 2080;
          if (v42)
            v79 = v148;
          else
            v79 = 0x206C696E20;
          v80 = v72;
          if (v42)
            v81 = v42;
          else
            v81 = 0xE500000000000000;
          swift_bridgeObjectRetain(v42);
          *(_QWORD *)(v78 + 14) = sub_100016940(v79, v81, &v151);
          swift_bridgeObjectRelease_n(v42, 2);
          swift_bridgeObjectRelease_n(v80, 2);
          swift_bridgeObjectRelease_n(v74, 2);
          swift_bridgeObjectRelease_n(v138, 2);
          swift_bridgeObjectRelease();
          *(_WORD *)(v78 + 22) = 2048;
          *(double *)(v78 + 24) = v71;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v78, 0x20u);
          v82 = v137;
          swift_arrayDestroy(v137, 2, (char *)&type metadata for Any + 8);
          v31 = type metadata accessor for SecureLocation;
          swift_slowDealloc(v82, -1, -1);
          swift_slowDealloc(v78, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v42, 2);
          swift_bridgeObjectRelease_n(v72, 2);
          swift_bridgeObjectRelease_n(v74, 2);
          swift_bridgeObjectRelease_n(v67, 2);
        }
        v13 = v139;
        v34 = v150;
        if (v71 > v26)
        {

          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v20 = v124;
        swift_beginAccess(v124, &v154, 1, 0);
        v84 = v123;
        v85 = &v20[*(int *)(v123 + 64)];
        *(_QWORD *)v85 = v145;
        *((_QWORD *)v85 + 1) = v74;
        swift_bridgeObjectRelease();
        v32 = v149;
        v86 = v122;
        v87 = sub_10005972C(v149, (uint64_t)v122, v31);
        v88 = Logger.logObject.getter(v87);
        v89 = static os_log_type_t.default.getter(v88);
        if (os_log_type_enabled(v88, v89))
        {
          v90 = swift_slowAlloc(22, -1);
          v148 = swift_slowAlloc(64, -1);
          v153 = v148;
          *(_DWORD *)v90 = v117.n128_u32[0];
          v91 = (uint64_t *)&v20[*(int *)(v84 + 64)];
          v92 = v91[1];
          v151 = *v91;
          v152 = v92;
          swift_bridgeObjectRetain(v92);
          v93 = sub_10001A9A8(&qword_1010F6350);
          v94 = String.init<A>(describing:)(&v151, v93);
          v151 = sub_100016940(v94, v95, &v153);
          v96 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v118, v90 + 4, v90 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v90 + 12) = 2080;
          v97 = *v86;
          v98 = v86[1];
          swift_bridgeObjectRetain(v98);
          v151 = sub_100016940(v97, v98, &v153);
          v31 = type metadata accessor for SecureLocation;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v151, v96, v90 + 14, v90 + 22);
          swift_bridgeObjectRelease();
          sub_1000126B0((uint64_t)v86, type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "LabelledLocations Adding label %s to location %s", (uint8_t *)v90, 0x16u);
          v99 = v148;
          swift_arrayDestroy(v148, 2, (char *)&type metadata for Any + 8);
          v32 = v149;
          swift_slowDealloc(v99, -1, -1);
          swift_slowDealloc(v90, -1, -1);
        }
        else
        {
          sub_1000126B0((uint64_t)v86, v31);
        }

        v13 = v139;
        v17 = v125;
        v30 = v131;
LABEL_49:
        swift_beginAccess(v20, v155, 0, 0);
        sub_10005972C((uint64_t)v20, (uint64_t)v17, v31);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          v30 = (_QWORD *)sub_1007C9DB4(0, v30[2] + 1, 1, (unint64_t)v30);
        v101 = v30[2];
        v100 = v30[3];
        if (v101 >= v100 >> 1)
          v30 = (_QWORD *)sub_1007C9DB4(v100 > 1, v101 + 1, 1, (unint64_t)v30);
        v102 = v133 + 1;
        v30[2] = v101 + 1;
        v27 = v126;
        v103 = (uint64_t)v30 + v128 + v101 * v126;
        v29 = v102;
        sub_1000126EC((uint64_t)v17, v103, v31);
        sub_1000126B0(v32, v31);
        sub_1000126B0((uint64_t)v20, v31);
        if (v29 == v129)
        {
          swift_bridgeObjectRelease();
          v104 = v30;
          goto LABEL_61;
        }
      }
    }
    v104 = _swiftEmptyArrayStorage;
LABEL_61:
    v114 = v119;
    v115 = swift_allocObject(&unk_10107E140, 32, 7);
    v116 = v120;
    *(_QWORD *)(v115 + 16) = v114;
    *(_QWORD *)(v115 + 24) = v116;
    swift_retain();
    swift_retain();
    sub_10044036C((uint64_t)v104, 1, (uint64_t)sub_1005557EC, v115);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    if (qword_1010EA098 != -1)
      swift_once(&qword_1010EA098, sub_10098F7D8);
    v105 = type metadata accessor for Logger(0);
    v106 = sub_10001A9E8(v105, (uint64_t)qword_1011B7A18);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.info.getter(v107);
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "LabelledLocations - No labels - nothing to resolve", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
    }

    v110 = v119;
    v111 = swift_allocObject(&unk_10107E168, 32, 7);
    v112 = v120;
    *(_QWORD *)(v111 + 16) = v110;
    *(_QWORD *)(v111 + 24) = v112;
    swift_retain();
    swift_retain();
    sub_10044036C(v121, 1, (uint64_t)sub_100555E10, v111);
    return swift_release();
  }
}

void sub_100553954(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  char isEscapingClosureAtFileLocation;
  uint64_t v19;
  id v20;
  Class isa;
  uint64_t v22;
  void *v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 aBlock;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  if (qword_1010EA0A8 != -1)
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  v7 = qword_1011B7A48;
  v8 = *(NSObject **)(qword_1011B7A48 + 144);
  v9 = swift_allocObject(&unk_10107CD68, 232, 7);
  v10 = a1[8];
  *(_OWORD *)(v9 + 168) = a1[9];
  v11 = a1[11];
  *(_OWORD *)(v9 + 184) = a1[10];
  *(_OWORD *)(v9 + 200) = v11;
  *(_OWORD *)(v9 + 216) = a1[12];
  v12 = a1[4];
  *(_OWORD *)(v9 + 104) = a1[5];
  v13 = a1[7];
  *(_OWORD *)(v9 + 120) = a1[6];
  *(_OWORD *)(v9 + 136) = v13;
  *(_OWORD *)(v9 + 152) = v10;
  v14 = *a1;
  *(_OWORD *)(v9 + 40) = a1[1];
  v15 = a1[3];
  *(_OWORD *)(v9 + 56) = a1[2];
  *(_OWORD *)(v9 + 72) = v15;
  *(_OWORD *)(v9 + 88) = v12;
  *(_QWORD *)(v9 + 16) = v7;
  *(_OWORD *)(v9 + 24) = v14;
  v16 = swift_allocObject(&unk_10107CD90, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100553CC8;
  *(_QWORD *)(v16 + 24) = v9;
  *(_QWORD *)&v40 = sub_10001D850;
  *((_QWORD *)&v40 + 1) = v16;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v39 = sub_10001D8B8;
  *((_QWORD *)&v39 + 1) = &unk_10107CDA8;
  v17 = _Block_copy(&aBlock);
  swift_retain_n(v7, 2);
  sub_1004F1D0C(a1);
  swift_retain();
  swift_release();
  dispatch_sync(v8, v17);
  _Block_release(v17);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v16, "", 105, 553, 32, 1);
  swift_release();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((sub_100546A18() & 1) != 0)
      goto LABEL_6;
    v19 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v19, &type metadata for SecureLocationsConfig);
    swift_release();
    v48 = v35;
    v49 = v36;
    v50 = v37;
    v44 = v31;
    v45 = v32;
    v46 = v33;
    v47 = v34;
    v40 = v27;
    v41 = v28;
    v42 = v29;
    v43 = v30;
    aBlock = v25;
    v39 = v26;
    sub_1003D09E0(&aBlock);
    if ((BYTE8(aBlock) & 1) == 0)
LABEL_6:
      sub_100546BCC();
    v20 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
    isa = Data._bridgeToObjectiveC()().super.isa;
    v22 = swift_allocObject(&unk_10107CDE0, 32, 7);
    *(_QWORD *)(v22 + 16) = a4;
    *(_QWORD *)(v22 + 24) = a5;
    *(_QWORD *)&v40 = sub_100553CE4;
    *((_QWORD *)&v40 + 1) = v22;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    *(_QWORD *)&v39 = sub_100555E2C;
    *((_QWORD *)&v39 + 1) = &unk_10107CDF8;
    v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, "updatedConfigReceived:completion:", isa, v23);
    _Block_release(v23);

  }
}

_BYTE *sub_100553C94@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100D7C59C(a1, a2);
}

_QWORD *sub_100553CAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100D7C604(*(_QWORD *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

_QWORD *sub_100553CC8()
{
  uint64_t v0;

  return sub_1009968F4(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_100553CD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100553CE4(uint64_t a1)
{
  uint64_t v1;

  return sub_100542F28(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_100553CEC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100553D28(uint64_t a1)
{
  return sub_100553F78(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10052BC4C);
}

uint64_t sub_100553D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101119450);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100553D7C(uint64_t a1)
{
  uint64_t v1;

  return sub_10052C954(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(void *, uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100553D9C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10052CBB8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100553DC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100553DE8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_100995E5C(v1[2], v1[3], v1[4], a1);
}

void sub_100553E04(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_1005CDF8C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), a1);
}

void sub_100553E20(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1005354A8(v1, a1);
}

uint64_t sub_100553E38()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[17]);
  swift_release(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_100553E94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = v1 + 24;
  v6 = *(_QWORD *)(v1 + 144);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FEE7C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  v7[4] = v5;
  v7[5] = v6;
  v7[2] = a1;
  v7[3] = v4;
  return swift_task_switch(sub_1005264CC, 0, 0);
}

uint64_t sub_100553F0C()
{
  return sub_1005559C8(49);
}

uint64_t sub_100553F18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100553F28()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100553F6C(uint64_t a1)
{
  return sub_100553F78(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100526618);
}

uint64_t sub_100553F78(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100553F8C()
{
  return sub_100555090((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100553FA0(uint64_t a1)
{
  return sub_100554678(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1005274D8);
}

uint64_t sub_100553FAC(uint64_t a1)
{
  uint64_t *v1;

  return sub_10016B5F8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100553FC8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_10055400C()
{
  uint64_t v0;

  sub_100527700(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32), *(void **)(v0 + 40), *(void (**)(id, uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_10055401C()
{
  return sub_1005559C8(49);
}

uint64_t sub_100554024()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100554034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));

  swift_release(*(_QWORD *)(v0 + v8));
  swift_release(*(_QWORD *)(v0 + v9));
  swift_release(*(_QWORD *)(v0 + v10 + 8));
  return swift_deallocObject(v0, v10 + 16, v5);
}

void sub_1005540FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for FMNServerInteractionController.FMNResponseFields(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_100526904(v0 + v2, *(_QWORD *)(v0 + v3), *(void **)(v0 + v4), *(_QWORD *)(v0 + v5), *(_QWORD *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(id, uint64_t))(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100554170()
{
  return sub_1005559C8(49);
}

uint64_t sub_100554178()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100554188()
{
  return sub_1005559C8(49);
}

uint64_t sub_100554190()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1005541A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[14];
  swift_bridgeObjectRetain(a1[11]);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100554210()
{
  return sub_100007774(32);
}

void sub_100554218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100535770(a1, a2, a3, *(NSObject **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100554220()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

void sub_10055422C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10052CAA4(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_10055423C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  swift_release();
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100554270()
{
  return sub_100294580((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100539948);
}

unint64_t sub_10055427C()
{
  unint64_t result;

  result = qword_1010FEE90;
  if (!qword_1010FEE90)
  {
    result = swift_getWitnessTable(byte_100E432D4, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010FEE90);
  }
  return result;
}

uint64_t sub_1005542C0()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_errorRelease);
}

_QWORD *sub_1005542CC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_100554358()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_10055437C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[11];
  swift_bridgeObjectRetain(a1[12]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100554408()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

void sub_100554420()
{
  uint64_t v0;

  sub_100C4A5C4(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10055442C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10055443C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a12);
    return swift_bridgeObjectRelease(a13);
  }
  return result;
}

uint64_t sub_1005544C8(uint64_t a1)
{
  uint64_t *v1;

  return sub_10053C09C(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1005544F8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[20]);
  return swift_deallocObject(v0, 168, 7);
}

void sub_100554574(uint64_t a1)
{
  uint64_t v1;

  sub_10053C1E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (__int128 *)(v1 + 32), *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160));
}

uint64_t sub_100554588()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1005545C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1008B5790(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(uint64_t (**)(uint64_t))(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_1005545F4()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_10055460C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10055461C(uint64_t a1)
{
  return sub_100554758(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100535A1C);
}

uint64_t sub_100554638()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10055466C(uint64_t a1)
{
  return sub_100554678(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100535C28);
}

uint64_t sub_100554678(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;

  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_10055468C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1005546B0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100554714()
{
  uint64_t v0;

  return sub_10053D37C(*(_QWORD *)(v0 + 16), (uint64_t *)(v0 + 24));
}

uint64_t sub_100554720@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100C4AEA0(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_10055473C(uint64_t a1)
{
  return sub_100554758(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100535FE0);
}

uint64_t sub_100554758(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

uint64_t sub_10055477C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1005547B0(uint64_t a1)
{
  uint64_t v1;

  sub_100536210(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
}

uint64_t sub_1005547C4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_100554838(uint64_t a1)
{
  uint64_t v1;

  return sub_10053C538(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + 40, *(_QWORD *)(v1 + 144));
}

uint64_t sub_10055484C(uint64_t a1)
{
  uint64_t v1;

  return sub_10053C85C(a1, v1);
}

uint64_t sub_100554864()
{
  return sub_10000BC28((void (*)(_QWORD))&_swift_release);
}

void sub_100554870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10053C8D0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100554878()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_10055488C(uint64_t a1)
{
  uint64_t v1;

  return sub_10053EB28(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD, _QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100554898(uint64_t a1)
{
  uint64_t v1;

  return sub_10053F418(a1, *(uint64_t (**)(_QWORD *, uint64_t))(v1 + 16));
}

unint64_t sub_1005548A0()
{
  unint64_t result;

  result = qword_1010FEEA8;
  if (!qword_1010FEEA8)
  {
    result = swift_getWitnessTable(byte_100E6451C, &type metadata for SecureLocationLoadLabelledLocationsResponse);
    atomic_store(result, (unint64_t *)&qword_1010FEEA8);
  }
  return result;
}

uint64_t sub_1005548E4(uint64_t a1)
{
  uint64_t v1;

  return sub_10053F604(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1005548FC()
{
  return sub_100007774(33);
}

void sub_100554904(uint64_t a1)
{
  uint64_t v1;

  sub_100539544(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_100554910(uint64_t a1)
{
  uint64_t v1;

  return sub_100536C94(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100554928()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_10055495C()
{
  uint64_t v0;

  sub_100536EA8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_100554968()
{
  unint64_t result;

  result = qword_1010FEEB0;
  if (!qword_1010FEEB0)
  {
    result = swift_getWitnessTable(byte_100E3E578, &type metadata for SecureLocationsEncodedPushPayload);
    atomic_store(result, (unint64_t *)&qword_1010FEEB0);
  }
  return result;
}

uint64_t sub_1005549AC(uint64_t a1)
{
  uint64_t v1;

  return sub_1005392C8(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1005549C4()
{
  return sub_10000BC28((void (*)(_QWORD))&_swift_release);
}

void sub_1005549D0(NSObject *a1)
{
  uint64_t v1;

  sub_10054D4F0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1005549E0()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release, 40);
}

void sub_1005549F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10052CCE0(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100554A04(uint64_t a1)
{
  return sub_1005553C0(a1);
}

uint64_t sub_100554A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for SecureLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = (((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + *(int *)(v1 + 52);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100554B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SecureLocation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10052DD00(a1, *(void **)(v1 + 16), *(void (**)(id))(v1 + 24), *(void (**)(id))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD **)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100554BB0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100554C04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = v1 + 24;
  v6 = *(_QWORD *)(v1 + 104);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FEEC4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  v7[4] = v5;
  v7[5] = v6;
  v7[2] = a1;
  v7[3] = v4;
  return swift_task_switch(sub_10052EBDC, 0, 0);
}

uint64_t sub_100554C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for SecureLocation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(v1 + 52);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100554D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SecureLocation(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10052ECE4(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(void (**)(id))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100554DCC()
{
  return sub_1000075F4((void (*)(_QWORD))&_swift_release);
}

void sub_100554DD8(uint64_t a1)
{
  uint64_t v1;

  sub_10052F360(a1, *(void (**)(uint64_t))(v1 + 16));
}

_QWORD *sub_100554DE4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[8];
  v5 = a1[9];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_100554E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1005CEF80(*(id *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_100554E64(uint64_t a1)
{
  uint64_t v1;

  return sub_100544C74(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100554E80()
{
  return sub_1005559C8(48);
}

uint64_t sub_100554E88(uint64_t a1)
{
  uint64_t v1;

  return sub_10054455C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100554E94@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;

  return sub_100995D7C(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100554EB0()
{
  uint64_t v0;

  sub_100336044(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100554EF0()
{
  uint64_t v0;

  return sub_100544788(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(uint8_t **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100554F0C()
{
  uint64_t v0;

  return sub_10054324C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100554F24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100554F68(uint64_t a1)
{
  uint64_t v1;

  return sub_100543358(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_100554F7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_100554FC8(uint64_t a1)
{
  uint64_t v1;

  sub_100543424(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void (**)(id, uint64_t))(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD **)(v1 + 72));
}

void sub_100554FF8(uint64_t a1)
{
  uint64_t v1;

  sub_100536A28(a1, v1);
}

uint64_t sub_100555000()
{
  return sub_100555090((void (*)(_QWORD))&_swift_bridgeObjectRelease, (void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100555014()
{
  return sub_100294580((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10053092C);
}

uint64_t sub_100555020(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return sub_10001BBBC(a2, a3);
  }
  return result;
}

uint64_t sub_100555054()
{
  return sub_1005559C8(49);
}

uint64_t sub_10055505C()
{
  uint64_t v0;

  return sub_1005CE8EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_10055506C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10055507C()
{
  return sub_100555090((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_100555090(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 24));

  swift_release(*(_QWORD *)(v2 + 48));
  return swift_deallocObject(v2, 56, 7);
}

uint64_t sub_1005550DC(uint64_t a1)
{
  uint64_t v1;

  return sub_100531D18(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1005550EC()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100555100(uint64_t a1)
{
  uint64_t *v1;

  return sub_100532800(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10055510C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100C49388(v1, a1);
}

uint64_t sub_100555124@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100C4A20C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

uint64_t sub_100555140()
{
  return sub_100007810((void (*)(_QWORD))&_swift_errorRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100555158()
{
  uint64_t v0;

  return sub_100542B38(*(_QWORD *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), "Unsubscribe failed %s");
}

uint64_t sub_10055517C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6));

  swift_release(*(_QWORD *)(v0 + v8));
  swift_release(*(_QWORD *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v5);
}

void sub_100555234()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for FMNServerInteractionController.FMNResponseFields(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100531FEC(v0 + v2, *(_QWORD **)(v0 + v3), *(id *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(_QWORD))(v0+ ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void ***)(v0+ ((((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8));
}

uint64_t sub_10055529C()
{
  return sub_1005559C8(48);
}

void sub_1005552A4()
{
  uint64_t v0;

  sub_1005CED58(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1005552B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1005552C0()
{
  unint64_t result;

  result = qword_1010FEED8;
  if (!qword_1010FEED8)
  {
    result = swift_getWitnessTable(byte_100E2EC70, &type metadata for SecureLocationsSubmitResponseBody);
    atomic_store(result, (unint64_t *)&qword_1010FEED8);
  }
  return result;
}

uint64_t sub_100555304()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100555314(uint64_t a1)
{
  uint64_t v1;

  sub_100542D14(a1, *(_QWORD *)(v1 + 16));
}

void sub_10055531C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  sub_100C03058(*(char **)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_100555338()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10055535C()
{
  uint64_t v0;

  sub_10052FEE0(v0);
}

uint64_t sub_100555364(uint64_t a1)
{
  uint64_t v1;

  return sub_100BFCF58(a1, *(char **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10055537C(uint64_t a1)
{
  uint64_t v1;

  return sub_10052F77C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_10055539C()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_release, 40);
}

void sub_1005553B0(uint64_t a1)
{
  uint64_t v1;

  sub_10052F820(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD **)(v1 + 32));
}

uint64_t sub_1005553C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_10052DAF0(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t sub_100555400()
{
  return sub_100294580((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100442340);
}

uint64_t sub_10055540C(uint64_t a1)
{
  uint64_t v1;

  return sub_10016BF60(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100555424()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_10055543C()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

unint64_t sub_100555454()
{
  unint64_t result;

  result = qword_1010FEEE0;
  if (!qword_1010FEEE0)
  {
    result = swift_getWitnessTable(byte_100E3A3AC, &type metadata for SecureLocationsFetchResponseBody);
    atomic_store(result, (unint64_t *)&qword_1010FEEE0);
  }
  return result;
}

uint64_t sub_100555498(uint64_t a1)
{
  uint64_t v1;

  return sub_10052B0C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1005554B8()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_1005554D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100555514(uint64_t a1)
{
  uint64_t v1;

  return sub_10054A084(a1, *(id *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_100555528()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10055555C()
{
  uint64_t v0;

  return sub_10053F66C(*(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(uint64_t (**)(uint64_t, _QWORD))(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100555588()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

void sub_1005555CC(uint64_t a1)
{
  uint64_t v1;

  sub_10052B18C(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(void (**)(_QWORD, _QWORD))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1005555E0()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

void sub_1005555FC(uint64_t a1)
{
  sub_100521948(a1);
}

uint64_t sub_100555608()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100555618(uint64_t a1)
{
  swift_retain();
  sub_100521DA8((uint64_t)sub_100555658, a1);
  return swift_release();
}

void sub_100555658(uint64_t a1)
{
  sub_100545184(a1);
}

uint64_t sub_100555664()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[24]);
  swift_bridgeObjectRelease(v0[26]);
  swift_bridgeObjectRelease(v0[28]);
  return swift_deallocObject(v0, 232, 7);
}

uint64_t sub_1005556A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005556B8()
{
  return sub_100521230();
}

uint64_t sub_1005556C0()
{
  return sub_1005212A4();
}

unint64_t sub_1005556C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010FEF08;
  if (!qword_1010FEF08)
  {
    v1 = sub_10000F4A0(255, &qword_1010FEF00, NSRunLoop_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_1010FEF08);
  }
  return result;
}

void sub_100555720(_BYTE *a1)
{
  sub_10052131C(a1);
}

uint64_t sub_100555728(_BYTE *a1)
{
  uint64_t v1;

  return sub_100532A08(a1, v1);
}

uint64_t sub_100555730(uint64_t *a1)
{
  char *v1;

  return sub_100533918(a1, v1);
}

uint64_t sub_100555738(uint64_t a1)
{
  uint64_t v1;

  return sub_100543B9C(a1, v1);
}

void sub_100555740(uint64_t a1, unint64_t a2, char a3)
{
  sub_100544D28(a1, a2, a3);
}

uint64_t sub_100555748(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_100555774(uint64_t a1)
{
  uint64_t v1;

  return sub_100543C24(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10055578C()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, 88, 7);
}

void sub_1005557D0()
{
  uint64_t v0;

  sub_100543E50(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), *(_QWORD *)(v0 + 80));
}

uint64_t sub_1005557E0()
{
  return sub_10000BC28((void (*)(_QWORD))&_swift_release);
}

void sub_1005557EC(uint64_t a1)
{
  uint64_t v1;

  sub_100544084(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1005557F4()
{
  return sub_10000BC28((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_100555800()
{
  return sub_10000BC28((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

void sub_10055580C(uint64_t a1)
{
  uint64_t v1;

  sub_100544330(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100555814()
{
  return sub_1005559C8(48);
}

uint64_t sub_10055581C()
{
  return sub_1005559C8(48);
}

_QWORD *sub_100555824@<X0>(_QWORD *a1@<X8>)
{
  return sub_100995D44(a1);
}

uint64_t sub_100555840()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100555874()
{
  uint64_t v0;

  return sub_100527AFC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10055588C@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1005CFE7C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_1005558A8()
{
  return sub_100007810((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_1005558C0()
{
  uint64_t v0;

  return sub_100C49CBC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

void sub_1005558D0(uint64_t a1)
{
  uint64_t v1;

  sub_1005293CC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1005558EC()
{
  uint64_t v0;

  sub_1008CC790(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100555904()
{
  return sub_1005559C8(48);
}

uint64_t sub_10055590C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10055591C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

void sub_100555958(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_100547F60(a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_100555970()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1005559AC()
{
  uint64_t v0;

  sub_100523CE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_BYTE *)(v0 + 40), *(void (**)(id, uint64_t))(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1005559C0()
{
  return sub_1005559C8(48);
}

uint64_t sub_1005559C8(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));

  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100555A08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100555A18(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_10052098C(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100555A6C + 4 * byte_100E4300F[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100555AA0 + 4 * byte_100E4300A[v4]))();
}

uint64_t sub_100555AA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100555AA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100555AB0);
  return result;
}

uint64_t sub_100555ABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100555AC4);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100555AC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100555AD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys()
{
  return &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys;
}

unint64_t sub_100555AF0()
{
  unint64_t result;

  result = qword_1010FEF50;
  if (!qword_1010FEF50)
  {
    result = swift_getWitnessTable(asc_100E433D0, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FEF50);
  }
  return result;
}

unint64_t sub_100555B38()
{
  unint64_t result;

  result = qword_1010FEF58;
  if (!qword_1010FEF58)
  {
    result = swift_getWitnessTable(byte_100E43308, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FEF58);
  }
  return result;
}

unint64_t sub_100555B80()
{
  unint64_t result;

  result = qword_1010FEF60;
  if (!qword_1010FEF60)
  {
    result = swift_getWitnessTable(byte_100E43330, &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FEF60);
  }
  return result;
}

uint64_t sub_100555BC4(uint64_t a1)
{
  return sub_100553FAC(a1);
}

uint64_t sub_100555BD8(uint64_t a1)
{
  return sub_100554E64(a1);
}

void sub_100555BEC(uint64_t a1)
{
  sub_1005558D0(a1);
}

_QWORD *sub_100555C08@<X0>(_BYTE *a1@<X8>)
{
  return sub_100553CAC(a1);
}

uint64_t sub_100555CF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100554E48(a1);
}

uint64_t sub_100555D04@<X0>(char *a1@<X8>)
{
  return sub_10055588C(a1);
}

uint64_t sub_100555DD0(uint64_t a1)
{
  return sub_100553D9C(a1);
}

uint64_t sub_100555DE4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100553DE8(a1);
}

uint64_t sub_100555DF8@<X0>(_QWORD *a1@<X8>)
{
  return sub_100554E94(a1);
}

_BYTE *sub_100555E18@<X0>(_BYTE *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100553C94(a1, a2);
}

void sub_100555E2C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void *);
  id v5;

  v4 = *(void (**)(void *))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4(a2);
  swift_release(v3);

}

uint64_t sub_100555E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100555E98, 0, 0);
}

uint64_t sub_100555E98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = v0[2];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v4 = type metadata accessor for ObservedAdvertisement(0);
  v5 = sub_100006204(&qword_1010FF140, type metadata accessor for ObservedAdvertisement, (uint64_t)&unk_100E2A2BC);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  v8 = v7;
  v0[4] = v6;
  v0[5] = v7;
  swift_release();
  v9 = v0[3];
  v10 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v10;
  v10[2] = v9;
  v10[3] = v6;
  v10[4] = v8;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v11;
  *v11 = v0;
  v11[1] = sub_100555FE0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v11, 0, 0, 0x5F28747265736E69, 0xEA0000000000293ALL, sub_10055B60C, v10, &type metadata for () + 1);
}

uint64_t sub_100555FE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1005628AC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_100562938;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_10055604C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107EB08, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055AF94;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100555E2C;
  aBlock[3] = &unk_10107EB20;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "insertWithAdvertisementData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_10055619C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_1005561B4, 0, 0);
}

uint64_t sub_1005561B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = v0[3];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  v4 = sub_10001A9A8(&qword_1010FF080);
  v5 = sub_10055B2FC(&qword_1010FF138, &qword_1010FF140, (uint64_t)&unk_100E2A2BC, (const char *)&protocol conformance descriptor for <A> [A]);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[5] = v6;
  v0[6] = v7;
  v8 = v6;
  v9 = v7;
  v10 = v0[4];
  swift_release();
  v11 = (_QWORD *)swift_task_alloc(48);
  v0[7] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v12;
  *v12 = v0;
  v12[1] = sub_100556314;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, 0, 0, 0x5F286574656C6564, 0xEA0000000000293ALL, sub_10055B5F4, v11, &type metadata for () + 1);
}

uint64_t sub_100556314()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1005628A8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 56));
    v4 = sub_100562934;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_100556380(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107EAB8, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055B57C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107EAD0;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "deleteObservedAdvertisementsWithAdvertisementsData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_1005564D0(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  sub_10001EF3C((uint64_t)v4, v8);
  return swift_release();
}

uint64_t sub_100556564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_10055657C, 0, 0);
}

uint64_t sub_10055657C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = v0[3];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  v4 = sub_10001A9A8(&qword_1010FF080);
  v5 = sub_10055B2FC(&qword_1010FF138, &qword_1010FF140, (uint64_t)&unk_100E2A2BC, (const char *)&protocol conformance descriptor for <A> [A]);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[5] = v6;
  v0[6] = v7;
  v8 = v6;
  v9 = v7;
  v10 = v0[4];
  swift_release();
  v11 = (_QWORD *)swift_task_alloc(48);
  v0[7] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v12;
  *v12 = v0;
  v12[1] = sub_1005566DC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, 0, 0, 0xD000000000000011, 0x8000000100EDAD30, sub_10055B5DC, v11, &type metadata for () + 1);
}

uint64_t sub_1005566DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10055677C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 56));
    v4 = sub_100556748;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100556748()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10055677C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_10001BC14(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1005567BC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107EA68, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055B57C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107EA80;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "markObservedAdvertisementsPublishedWithAdvertisementsData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_10055690C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  if (a3)
  {
    v6 = a3;
    swift_errorRetain(a3);
    v3 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(throwing:)(&v6, v3);
  }
  else
  {
    v5 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(returning:)(v5, v5);
  }
}

uint64_t sub_100556970(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = a4;
  *(_BYTE *)(v4 + 96) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch(sub_100556990, 0, 0);
}

uint64_t sub_100556990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  *(_QWORD *)(v0 + 16) = v1;
  v4 = sub_10001A9A8(&qword_1010FF120);
  v5 = sub_10055B4A0();
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 16, v4, v5);
  *(_QWORD *)(v0 + 56) = v6;
  *(_QWORD *)(v0 + 64) = v7;
  v8 = v6;
  v9 = v7;
  v10 = *(_BYTE *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 40);
  v11 = *(_QWORD *)(v0 + 48);
  swift_release();
  v13 = swift_task_alloc(64);
  *(_QWORD *)(v0 + 72) = v13;
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v8;
  *(_QWORD *)(v13 + 32) = v9;
  *(_QWORD *)(v13 + 40) = v12;
  *(_BYTE *)(v13 + 48) = v10;
  v14 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v14;
  v15 = sub_10001A9A8(&qword_1010FF080);
  *v14 = v0;
  v14[1] = sub_100556AF4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 24, 0, 0, 0xD000000000000040, 0x8000000100EDACB0, sub_10055B51C, v13, v15);
}

uint64_t sub_100556AF4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100556B98;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
    v4 = sub_100556B60;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100556B60()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100556B98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100556BD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  _QWORD aBlock[6];

  v10 = sub_10001A9A8(&qword_1010FF088);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = swift_allocObject(&unk_10107E9C8, v15 + v12, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10055B29C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E9E0;
  v17 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "reverseChronologicalObservationsWithIdentifierData:limit:isPublished:completion:", isa, a5, a6 & 1, v17);
  _Block_release(v17);

}

uint64_t sub_100556D40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_100556D58, 0, 0);
}

uint64_t sub_100556D58()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = v0[4];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  v4 = sub_10001A9A8(&qword_1010FF0E8);
  v5 = sub_100365CCC(&qword_1010FF0F0, &qword_1010FF0E8, (uint64_t (*)(void))sub_100171744, (const char *)&protocol conformance descriptor for <> Set<A>);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[6] = v6;
  v0[7] = v7;
  v8 = v6;
  v9 = v7;
  v10 = v0[5];
  swift_release();
  v11 = (_QWORD *)swift_task_alloc(48);
  v0[8] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v12;
  v13 = sub_10001A9A8(&qword_1010FF080);
  *v12 = v0;
  v12[1] = sub_100556EC8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD00000000000001DLL, 0x8000000100EDAC90, sub_10055B488, v11, v13);
}

uint64_t sub_100556EC8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100556F6C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_100556F34;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100556F34()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100556F6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100556FAC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010FF088);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107E978, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055B29C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E990;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "observationsWithAdvertisementsData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_1005570FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_task_switch(sub_100557114, 0, 0);
}

uint64_t sub_100557114()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = v0[4];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  v4 = sub_10001A9A8(&qword_1010FF0E8);
  v5 = sub_100365CCC(&qword_1010FF0F0, &qword_1010FF0E8, (uint64_t (*)(void))sub_100171744, (const char *)&protocol conformance descriptor for <> Set<A>);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[6] = v6;
  v0[7] = v7;
  v8 = v6;
  v9 = v7;
  v10 = v0[5];
  swift_release();
  v11 = (_QWORD *)swift_task_alloc(48);
  v0[8] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v12;
  v13 = sub_10001A9A8(&qword_1010FF0F8);
  *v12 = v0;
  v12[1] = sub_100557284;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD00000000000001ALL, 0x8000000100EDAC70, sub_10055B3D8, v11, v13);
}

uint64_t sub_100557284()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1005628A4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_10056293C;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_1005572F0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010FF100);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107E928, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055B3F0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E940;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "locationsWithAdvertisementsData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_100557440(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100557458, 0, 0);
}

uint64_t sub_100557458()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = v0[2];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v4 = type metadata accessor for BeaconIdentifier(0);
  v5 = sub_100006204(&qword_1010FF010, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45CF4);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  v0[4] = v6;
  v0[5] = v7;
  v8 = v6;
  v9 = v7;
  v10 = v0[3];
  swift_release();
  v11 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v11;
  v11[2] = v10;
  v11[3] = v8;
  v11[4] = v9;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v12;
  v13 = sub_10001A9A8(&qword_1010FF0C0);
  *v12 = v0;
  v12[1] = sub_1005575B4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0xD000000000000013, 0x8000000100EDAC50, sub_10055B3AC, v11, v13);
}

uint64_t sub_1005575B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100557660;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_100557620;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100557620()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 72) | (*(unsigned __int8 *)(v0 + 73) << 8));
}

uint64_t sub_100557660()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1005576A0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010FF0C8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107E8D8, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055B3C4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E8F0;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "latestStatusWithIdentifierData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_1005577F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[2];

  if (a3)
  {
    v3 = a3;
    v4 = swift_errorRetain(a3);
LABEL_5:
    swift_willThrow(v4);
    v19[0] = v3;
    v8 = sub_10001A9A8(&qword_1010FF0C8);
    return CheckedContinuation.resume(throwing:)(v19, v8);
  }
  if (a2 >> 60 == 15)
  {
    v6 = sub_10012C690();
    v4 = swift_allocError(&type metadata for ObservationStoreService.Error, v6, 0, 0);
    v3 = v4;
    *v7 = 2;
    goto LABEL_5;
  }
  v11 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = sub_10001BBBC(a1, a2);
  PropertyListDecoder.init()(v12);
  v13 = sub_10001A9A8(&qword_1010FF0D0);
  v14 = sub_100365CCC(&qword_1010FF0D8, &qword_1010FF0D0, (uint64_t (*)(void))sub_100171678, (const char *)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v13, a1, a2, v13, v14);
  swift_release();
  v15 = *(_QWORD *)(v19[0] + 16);
  if (v15)
    v16 = *(_BYTE *)(v19[0] + 32);
  else
    v16 = 0;
  v17 = v15 == 0;
  swift_bridgeObjectRelease();
  LOBYTE(v19[0]) = v16;
  BYTE1(v19[0]) = v17;
  v18 = sub_10001A9A8(&qword_1010FF0C8);
  CheckedContinuation.resume(returning:)(v19, v18);
  return sub_10001EF3C(a1, a2);
}

uint64_t sub_1005579A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1005579C0, 0, 0);
}

uint64_t sub_1005579C0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = v0[3];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v4 = type metadata accessor for BeaconIdentifier(0);
  v5 = sub_100006204(&qword_1010FF010, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45CF4);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  v8 = v7;
  v0[5] = v6;
  v0[6] = v7;
  swift_release();
  v9 = v0[4];
  v10 = (_QWORD *)swift_task_alloc(48);
  v0[7] = v10;
  v10[2] = v9;
  v10[3] = v6;
  v10[4] = v8;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[8] = v11;
  v12 = sub_10001A9A8(&qword_1010F0F00);
  *v11 = v0;
  v11[1] = sub_100556314;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0xD000000000000013, 0x8000000100EDAC50, sub_10055B380, v10, v12);
}

void sub_100557B14(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010FF0A8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107E888, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055B398;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E8A0;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "latestObservedAdvertisementWithIdentifierData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_100557C64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];
  _QWORD v39[2];

  v8 = sub_10001A9A8(&qword_1010FF0B0);
  v9 = __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  v13 = (char *)v38 - v12;
  v14 = sub_10001A9A8(&qword_1010F0F00);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)v38 - v18;
  if (a3)
  {
    v20 = swift_errorRetain(a3);
LABEL_5:
    swift_willThrow(v20);
    v39[0] = a3;
    v23 = sub_10001A9A8(&qword_1010FF0A8);
    return CheckedContinuation.resume(throwing:)(v39, v23);
  }
  if (a2 >> 60 == 15)
  {
    v21 = sub_10012C690();
    v20 = swift_allocError(&type metadata for ObservationStoreService.Error, v21, 0, 0);
    a3 = v20;
    *v22 = 2;
    goto LABEL_5;
  }
  v38[1] = a4;
  v25 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = sub_10001BBBC(a1, a2);
  PropertyListDecoder.init()(v26);
  v27 = sub_10001A9A8(&qword_1010FF080);
  v28 = sub_10055B2FC(&qword_1010FF090, &qword_1010FF098, (uint64_t)&unk_100E2A2E4, (const char *)&protocol conformance descriptor for <A> [A]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v27, a1, a2, v27, v28);
  v38[0] = a1;
  swift_release();
  v29 = v39[0];
  v30 = *(_QWORD *)(v39[0] + 16);
  v31 = type metadata accessor for ObservedAdvertisement(0);
  v32 = v31;
  v33 = *(_QWORD *)(v31 - 8);
  if (v30)
  {
    v34 = *(_QWORD *)(v31 - 8);
    sub_10005972C(v29 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80)), (uint64_t)v19, type metadata accessor for ObservedAdvertisement);
    v33 = v34;
    v35 = 0;
  }
  else
  {
    v35 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v19, v35, 1, v32);
  swift_bridgeObjectRelease();
  sub_10000F9B8((uint64_t)v19, (uint64_t)v13, &qword_1010F0F00);
  swift_storeEnumTagMultiPayload(v13, v8, 0);
  sub_10000F9B8((uint64_t)v13, (uint64_t)v11, &qword_1010FF0B0);
  if (swift_getEnumCaseMultiPayload(v11, v8) == 1)
  {
    v39[0] = *v11;
    v36 = sub_10001A9A8(&qword_1010FF0A8);
    CheckedContinuation.resume(throwing:)(v39, v36);
  }
  else
  {
    sub_100005CF0((uint64_t)v11, (uint64_t)v17, &qword_1010F0F00);
    v37 = sub_10001A9A8(&qword_1010FF0A8);
    CheckedContinuation.resume(returning:)(v17, v37);
  }
  sub_10001EF3C(v38[0], a2);
  sub_100004048((uint64_t)v13, &qword_1010FF0B0);
  return sub_100004048((uint64_t)v19, &qword_1010F0F00);
}

uint64_t sub_100557FC8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  *(_BYTE *)(v5 + 96) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_100557FE8, 0, 0);
}

uint64_t sub_100557FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v4 = type metadata accessor for BeaconIdentifier(0);
  v5 = sub_100006204(&qword_1010FF010, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45CF4);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  v8 = v7;
  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v0 + 56) = v7;
  swift_release();
  v9 = *(unsigned __int8 *)(v0 + 96);
  if ((_DWORD)v9 == 8)
    v10 = 0;
  else
    v10 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithUnsignedInt:", v9);
  *(_QWORD *)(v0 + 64) = v10;
  v12 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 40);
  v13 = (_QWORD *)swift_task_alloc(64);
  *(_QWORD *)(v0 + 72) = v13;
  v13[2] = v11;
  v13[3] = v6;
  v13[4] = v8;
  v13[5] = v10;
  v13[6] = v12;
  v14 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v14;
  v15 = sub_10001A9A8(&qword_1010EF488);
  *v14 = v0;
  v14[1] = sub_100558184;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000029, 0x8000000100EDAB00, sub_10055AF98, v13, v15);
}

uint64_t sub_100558184()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100558234;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 72));
    v4 = sub_1005581F0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1005581F0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);

  sub_10001BC14(v2, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100558234()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);

  sub_10001BC14(v3, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100558288(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSData v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v22 = a2;
  v23 = a5;
  v8 = sub_10001A9A8(&qword_1010FF018);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14.super.isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10000F9B8(a6, (uint64_t)v13, &qword_1010ED860);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_10107E658, v19 + v10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v20 + v19, (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_10055AFB4;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E670;
  v21 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v22, "latestDeviceEventWithIdentifierData:source:attachedDevice:completion:", v14.super.isa, v23, isa, v21);
  _Block_release(v21);

}

uint64_t sub_100558484(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int EnumCaseMultiPayload;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a4;
  v7 = type metadata accessor for DeviceEvent(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EF488);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010FF020);
  v15 = __chkstk_darwin(v14);
  v17 = (uint64_t *)((char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __chkstk_darwin(v15);
  v19 = __chkstk_darwin(v18);
  v21 = (uint64_t *)((char *)&v43 - v20);
  v22 = __chkstk_darwin(v19);
  v25 = (char *)&v43 - v23;
  if (a3)
  {
    v26 = swift_errorRetain(a3);
    swift_willThrow(v26);
    v47 = a3;
    v27 = sub_10001A9A8(&qword_1010FF018);
    return CheckedContinuation.resume(throwing:)(&v47, v27);
  }
  else
  {
    v44 = v13;
    v45 = v8;
    if (a2 >> 60 == 15)
    {
      v29 = v22;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56))((char *)&v43 - v23, 1, 1, v7);
      swift_storeEnumTagMultiPayload(v25, v29, 0);
      sub_10000F9B8((uint64_t)v25, (uint64_t)v21, &qword_1010FF020);
      if (swift_getEnumCaseMultiPayload(v21, v29) == 1)
      {
        v47 = *v21;
        v30 = sub_10001A9A8(&qword_1010FF018);
        CheckedContinuation.resume(throwing:)(&v47, v30);
      }
      else
      {
        v35 = (uint64_t)v44;
        sub_100005CF0((uint64_t)v21, (uint64_t)v44, &qword_1010EF488);
        v36 = sub_10001A9A8(&qword_1010FF018);
        CheckedContinuation.resume(returning:)(v35, v36);
      }
      return sub_100004048((uint64_t)v25, &qword_1010FF020);
    }
    else
    {
      v31 = v22;
      v43 = v24;
      v32 = type metadata accessor for PropertyListDecoder(0);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      v33 = sub_10001BBBC(a1, a2);
      PropertyListDecoder.init()(v33);
      v34 = sub_100006204(&qword_1010FF028, type metadata accessor for DeviceEvent, (uint64_t)&unk_100E5F0D0);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v7, a1, a2, v7, v34);
      swift_release();
      v37 = v43;
      sub_10005972C((uint64_t)v10, v43, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v37, 0, 1, v7);
      swift_storeEnumTagMultiPayload(v37, v31, 0);
      sub_10000F9B8(v37, (uint64_t)v17, &qword_1010FF020);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v31);
      if (EnumCaseMultiPayload == 1)
      {
        v47 = *v17;
        v39 = sub_10001A9A8(&qword_1010FF018);
        CheckedContinuation.resume(throwing:)(&v47, v39);
      }
      else
      {
        v40 = (uint64_t)v17;
        v41 = (uint64_t)v44;
        sub_100005CF0(v40, (uint64_t)v44, &qword_1010EF488);
        v42 = sub_10001A9A8(&qword_1010FF018);
        CheckedContinuation.resume(returning:)(v41, v42);
      }
      sub_10001EF3C(a1, a2);
      sub_100004048(v43, &qword_1010FF020);
      return sub_1000126B0((uint64_t)v10, type metadata accessor for DeviceEvent);
    }
  }
}

uint64_t sub_100558870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100558888, 0, 0);
}

uint64_t sub_100558888()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = v0[2];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v4 = type metadata accessor for DeviceEvent(0);
  v5 = sub_100006204(&qword_1010FF000, type metadata accessor for DeviceEvent, (uint64_t)&unk_100E5F0A8);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  v8 = v7;
  v0[4] = v6;
  v0[5] = v7;
  swift_release();
  v9 = v0[3];
  v10 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v10;
  v10[2] = v9;
  v10[3] = v6;
  v10[4] = v8;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v11;
  *v11 = v0;
  v11[1] = sub_1005589D0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v11, 0, 0, 0xD000000000000013, 0x8000000100EDAAE0, sub_10055AF7C, v10, &type metadata for () + 1);
}

uint64_t sub_1005589D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 56);
  *(_QWORD *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100557660;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 48));
    v4 = sub_100558A3C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100558A3C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100558A70(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107E608, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055AF94;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100555E2C;
  aBlock[3] = &unk_10107E620;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "storeDeviceEventWithDeviceEvent:completion:", isa, v11);
  _Block_release(v11);

}

void sub_100558BC0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v6 = sub_10001A9A8(&qword_1010FF088);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v9 = *(unsigned __int8 *)(v7 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10107E838, v10 + v8, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_10055B29C;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E850;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "latestAnonymousObservationsWithLimit:completion:", a3, v12);
  _Block_release(v12);
}

uint64_t sub_100558CF8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];

  if (a3)
  {
    v3 = a3;
    v4 = swift_errorRetain(a3);
  }
  else
  {
    if (a2 >> 60 != 15)
    {
      v11 = type metadata accessor for PropertyListDecoder(0);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      v12 = sub_10001BBBC(a1, a2);
      PropertyListDecoder.init()(v12);
      v13 = sub_10001A9A8(&qword_1010FF080);
      v14 = sub_10055B2FC(&qword_1010FF090, &qword_1010FF098, (uint64_t)&unk_100E2A2E4, (const char *)&protocol conformance descriptor for <A> [A]);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v13, a1, a2, v13, v14);
      swift_release();
      swift_bridgeObjectRetain(v16[0]);
      v15 = sub_10001A9A8(&qword_1010FF088);
      CheckedContinuation.resume(returning:)(v16, v15);
      sub_10001EF3C(a1, a2);
      return swift_bridgeObjectRelease();
    }
    v6 = sub_10012C690();
    v4 = swift_allocError(&type metadata for ObservationStoreService.Error, v6, 0, 0);
    v3 = v4;
    *v7 = 2;
  }
  swift_willThrow(v4);
  v16[0] = v3;
  v8 = sub_10001A9A8(&qword_1010FF088);
  return CheckedContinuation.resume(throwing:)(v16, v8);
}

void sub_100558E98(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010FF078);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10107E798, v8 + v6, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055B17C;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002683C;
  aBlock[3] = &unk_10107E7B0;
  v10 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "anonymousObservationCountWithCompletion:", v10);
  _Block_release(v10);
}

uint64_t sub_100558FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = swift_errorRetain(a2);
    swift_willThrow(v3);
    v7 = a2;
    v4 = sub_10001A9A8(&qword_1010FF078);
    return CheckedContinuation.resume(throwing:)(&v7, v4);
  }
  else
  {
    v7 = a1;
    v6 = sub_10001A9A8(&qword_1010FF078);
    return CheckedContinuation.resume(returning:)(&v7, v6);
  }
}

void sub_100559048(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD aBlock[6];

  v12 = sub_10001A9A8(&qword_1010F8318);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(a3, v16 + v14, v15 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = a5;
  v18 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, *a6, v18);
  _Block_release(v18);
}

uint64_t sub_100559178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (a3)
  {
    v4 = swift_errorRetain(a3);
    swift_willThrow(v4);
    v8 = a3;
    v5 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(throwing:)(&v8, v5);
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(returning:)(v7, v7);
  }
}

uint64_t sub_1005591F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100559208, 0, 0);
}

uint64_t sub_100559208()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v1 = v0[2];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v4 = type metadata accessor for KeySyncMetadata(0);
  v5 = sub_100006204(&qword_1010FF070, type metadata accessor for KeySyncMetadata, (uint64_t)&unk_100E27C48);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1, v4, v5);
  v8 = v7;
  v0[4] = v6;
  v0[5] = v7;
  swift_release();
  v9 = v0[3];
  v10 = (_QWORD *)swift_task_alloc(48);
  v0[6] = v10;
  v10[2] = v9;
  v10[3] = v6;
  v10[4] = v8;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v11;
  *v11 = v0;
  v11[1] = sub_100555FE0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v11, 0, 0, 0xD000000000000017, 0x8000000100EDABA0, sub_10055B10C, v10, &type metadata for () + 1);
}

void sub_100559350(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010F8318);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107E748, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055AF94;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100555E2C;
  aBlock[3] = &unk_10107E760;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "storeWithKeySyncMetadataData:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_1005594A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v4 = a1;
    swift_errorRetain(a1);
    v1 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }
  else
  {
    v3 = sub_10001A9A8(&qword_1010F8318);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }
}

void sub_100559500(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010FF050);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_10107E6F8, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055AFE0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E710;
  v11 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "metadataWithBeaconIdentifier:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_100559644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return swift_task_switch(sub_100559660, 0, 0);
}

uint64_t sub_100559660()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = v0[5];
  v2 = type metadata accessor for PropertyListEncoder(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  PropertyListEncoder.init()(v3);
  v0[2] = v1;
  v4 = sub_10001A9A8(&qword_1010FF038);
  v5 = sub_100365CCC(&qword_1010FF040, &qword_1010FF038, (uint64_t (*)(void))sub_10012D0B4, (const char *)&protocol conformance descriptor for <A> [A]);
  v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 2, v4, v5);
  v0[7] = v6;
  v0[8] = v7;
  v8 = v6;
  v9 = v7;
  v10 = v0[6];
  v11 = v0[4];
  swift_release();
  v12 = (_QWORD *)swift_task_alloc(48);
  v0[9] = v12;
  v12[2] = v10;
  v12[3] = v11;
  v12[4] = v8;
  v12[5] = v9;
  v13 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[10] = v13;
  v14 = sub_10001A9A8(&qword_1010FF048);
  *v13 = v0;
  v13[1] = sub_100556AF4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000021, 0x8000000100EDAB50, sub_10055AFC8, v12, v14);
}

void sub_1005597E0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  Class v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _QWORD aBlock[6];

  v4 = sub_10001A9A8(&qword_1010FF050);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v8 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10107E6A8, v10 + v6, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v11 + v10, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10055AFE0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1005564D0;
  aBlock[3] = &unk_10107E6C0;
  v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, "metadataWithBeaconIdentifier:typesData:completion:", isa, v8, v12);
  _Block_release(v12);

}

uint64_t sub_10055994C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];

  if (a3)
  {
    v8 = a3;
    v9 = swift_errorRetain(a3);
  }
  else
  {
    if (a2 >> 60 != 15)
    {
      v18 = type metadata accessor for PropertyListDecoder(0);
      swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
      v19 = sub_10001BBBC(a1, a2);
      PropertyListDecoder.init()(v19);
      v20 = sub_10001A9A8(a5);
      v21 = a6();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v20, a1, a2, v20, v21);
      swift_release();
      swift_bridgeObjectRetain(v23[0]);
      v22 = sub_10001A9A8(a7);
      CheckedContinuation.resume(returning:)(v23, v22);
      sub_10001EF3C(a1, a2);
      return swift_bridgeObjectRelease();
    }
    v11 = sub_10012C690();
    v9 = swift_allocError(&type metadata for ObservationStoreService.Error, v11, 0, 0);
    v8 = v9;
    *v12 = 2;
  }
  swift_willThrow(v9);
  v23[0] = v8;
  v13 = sub_10001A9A8(a7);
  return CheckedContinuation.resume(throwing:)(v23, v13);
}

uint64_t sub_100559AD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100559B0C + 4 * byte_100E434B0[a1]))(0xD000000000000011, 0x8000000100EDAD50);
}

uint64_t sub_100559B60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FF200);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100562470();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AttachedAccessoryEventsTransport.CodingKeys, &type metadata for AttachedAccessoryEventsTransport.CodingKeys, v11, v9, v10);
  v27 = 0;
  v12 = type metadata accessor for DeviceEvent(0);
  v13 = sub_100006204(&qword_1010FF000, type metadata accessor for DeviceEvent, (uint64_t)&unk_100E5F0A8);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v27, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for AttachedAccessoryEventsTransport(0);
    v15 = v3 + v14[5];
    v26 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v26, v5, v12, v13);
    v16 = v3 + v14[6];
    v25 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v16, &v25, v5, v12, v13);
    v17 = v3 + v14[7];
    v24 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v24, v5, v12, v13);
    v18 = v3 + v14[8];
    v23 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v18, &v23, v5, v12, v13);
    v19 = v3 + v14[9];
    v22 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v22, v5, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100559D94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;

  v43 = a2;
  v3 = sub_10001A9A8(&qword_1010EF488);
  v4 = __chkstk_darwin(v3);
  v44 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v45 = (char *)&v42 - v7;
  v8 = __chkstk_darwin(v6);
  v46 = (char *)&v42 - v9;
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v42 - v14;
  __chkstk_darwin(v13);
  v47 = (char *)&v42 - v16;
  v49 = sub_10001A9A8(&qword_1010FF210);
  v17 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for AttachedAccessoryEventsTransport(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1[3];
  v24 = a1[4];
  v50 = a1;
  sub_10001AA44(a1, v23);
  v25 = sub_100562470();
  v48 = v19;
  v26 = v51;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AttachedAccessoryEventsTransport.CodingKeys, &type metadata for AttachedAccessoryEventsTransport.CodingKeys, v25, v23, v24);
  if (v26)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  v27 = (uint64_t)v12;
  v51 = v17;
  v28 = (uint64_t)v22;
  v29 = type metadata accessor for DeviceEvent(0);
  v57 = 0;
  v30 = sub_100006204(&qword_1010FF028, type metadata accessor for DeviceEvent, (uint64_t)&unk_100E5F0D0);
  v32 = v47;
  v31 = v48;
  v33 = v49;
  v42 = v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &v57, v49, v29, v30);
  v34 = (uint64_t)v32;
  v35 = v28;
  sub_100005CF0(v34, v28, &qword_1010EF488);
  v56 = 1;
  v36 = (uint64_t)v15;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &v56, v33, v29, v42);
  v37 = (int *)v20;
  sub_100005CF0(v36, v35 + *(int *)(v20 + 20), &qword_1010EF488);
  v55 = 2;
  v47 = (char *)v29;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v29, &v55, v33, v29, v42);
  sub_100005CF0(v27, v35 + *(int *)(v20 + 24), &qword_1010EF488);
  v54 = 3;
  v38 = (uint64_t)v46;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v47, &v54, v33, v47, v42);
  sub_100005CF0(v38, v35 + v37[7], &qword_1010EF488);
  v53 = 4;
  v39 = (uint64_t)v45;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v47, &v53, v33, v47, v42);
  v46 = 0;
  sub_100005CF0(v39, v35 + v37[8], &qword_1010EF488);
  v52 = 5;
  v40 = (uint64_t)v44;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v47, &v52, v33, v47, v42);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v31, v33);
  sub_100005CF0(v40, v35 + v37[9], &qword_1010EF488);
  sub_10005972C(v35, v43, type metadata accessor for AttachedAccessoryEventsTransport);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v50);
  return sub_1000126B0(v35, type metadata accessor for AttachedAccessoryEventsTransport);
}

uint64_t sub_10055A328(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF154);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100555E98, 0, 0);
}

uint64_t sub_10055A38C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF14C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch(sub_1005561B4, 0, 0);
}

uint64_t sub_10055A3F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF134);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  v5[3] = a1;
  v5[4] = v4;
  return swift_task_switch(sub_10055657C, 0, 0);
}

uint64_t sub_10055A454()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10055A470, 0, 0);
}

uint64_t sub_10055A470()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[3] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  *v3 = v0;
  v3[1] = sub_10055A508;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD000000000000020, 0x8000000100EDAD00, sub_10055B538, v2, &type metadata for () + 1);
}

uint64_t sub_10055A508()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 32);
  *(_QWORD *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100562930;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 24));
    v4 = sub_1005628F0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10055A574(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *v3;
  v9 = swift_task_alloc(dword_1010FF11C);
  *(_QWORD *)(v4 + 16) = v9;
  *(_QWORD *)v9 = v4;
  *(_QWORD *)(v9 + 8) = sub_1005628EC;
  *(_QWORD *)(v9 + 40) = a2;
  *(_QWORD *)(v9 + 48) = v8;
  *(_BYTE *)(v9 + 96) = a3;
  *(_QWORD *)(v9 + 32) = a1;
  return swift_task_switch(sub_100556990, 0, 0);
}

uint64_t sub_10055A5F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF114);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000AA8AC;
  v5[4] = a1;
  v5[5] = v4;
  return swift_task_switch(sub_100556D58, 0, 0);
}

uint64_t sub_10055A654(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF0E4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1005628EC;
  v5[4] = a1;
  v5[5] = v4;
  return swift_task_switch(sub_100557114, 0, 0);
}

uint64_t sub_10055A6B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF0BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_10055A71C;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100557458, 0, 0);
}

uint64_t sub_10055A71C(__int16 a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  swift_task_dealloc(v4);
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  else
    return (*(uint64_t (**)(_QWORD))(v5 + 8))(a1 & 0x1FF);
}

uint64_t sub_10055A790(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1010FF0A4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100004A74;
  v7[3] = a2;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_1005579C0, 0, 0);
}

uint64_t sub_10055A804(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_10055A820, 0, 0);
}

uint64_t sub_10055A820()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = v0[3];
  v1 = v0[4];
  v3 = swift_task_alloc(32);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v4;
  v5 = sub_10001A9A8(&qword_1010FF080);
  *v4 = v0;
  v4[1] = sub_10055A8D0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000023, 0x8000000100EDAC20, sub_10055B288, v3, v5);
}

uint64_t sub_10055A8D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002176D8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_1005628A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10055A93C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = *v0;
  return swift_task_switch(sub_10055A958, 0, 0);
}

uint64_t sub_10055A958()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[3] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  *v3 = v0;
  v3[1] = sub_10055A9F0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD00000000000001ELL, 0x8000000100EDAC00, sub_10055B1CC, v2, &type metadata for () + 1);
}

uint64_t sub_10055A9F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 32);
  *(_QWORD *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10055AA68;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 24));
    v4 = sub_10055AA5C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10055AA5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10055AA68()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10055AA9C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = *v0;
  return swift_task_switch(sub_10055AAB8, 0, 0);
}

uint64_t sub_10055AAB8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[3];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_10055AB60;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001BLL, 0x8000000100EDABC0, sub_10055B168, v2, &type metadata for Int64);
}

uint64_t sub_10055AB60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10055ABD8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 32));
    v4 = sub_10055ABCC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10055ABCC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10055ABD8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10055AC0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF06C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100559208, 0, 0);
}

uint64_t sub_10055AC70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_10055AC8C, 0, 0);
}

uint64_t sub_10055AC8C()
{
  uint64_t v0;
  int8x16_t *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = (int8x16_t *)swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  v3 = sub_10001A9A8(&qword_1010FF048);
  *v2 = v0;
  v2[1] = sub_10055AD40;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001BLL, 0x8000000100EDAB80, sub_10055B0F8, v1, v3);
}

uint64_t sub_10055AD40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10056289C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_1005628A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10055ADAC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1010FF034);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_1005628EC;
  v7[5] = a2;
  v7[6] = v6;
  v7[4] = a1;
  return swift_task_switch(sub_100559660, 0, 0);
}

uint64_t sub_10055AE20(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = *v4;
  v11 = swift_task_alloc(dword_1010FF00C);
  *(_QWORD *)(v5 + 16) = v11;
  *(_QWORD *)v11 = v5;
  *(_QWORD *)(v11 + 8) = sub_100004A74;
  *(_QWORD *)(v11 + 32) = a4;
  *(_QWORD *)(v11 + 40) = v10;
  *(_BYTE *)(v11 + 96) = a3;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  return swift_task_switch(sub_100557FE8, 0, 0);
}

uint64_t sub_10055AEA8()
{
  return swift_task_switch(sub_10055AEBC, 0, 0);
}

uint64_t sub_10055AEBC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  _BYTE *v3;

  v1 = sub_10012C690();
  v2 = swift_allocError(&type metadata for ObservationStoreService.Error, v1, 0, 0);
  *v3 = 0;
  swift_willThrow(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10055AF18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1010FEFFC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100558888, 0, 0);
}

void sub_10055AF7C(uint64_t a1)
{
  uint64_t v1;

  sub_100558A70(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055AF88()
{
  return sub_1000076EC(&qword_1010F8318);
}

void sub_10055AF98(uint64_t a1)
{
  uint64_t v1;

  sub_100558288(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10055AFA8()
{
  return sub_1000076EC(&qword_1010FF018);
}

uint64_t sub_10055AFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10055B224(a1, a2, a3, &qword_1010FF018, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100558484);
}

void sub_10055AFC8(uint64_t a1)
{
  uint64_t v1;

  sub_1005597E0(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055AFD4()
{
  return sub_1000076EC(&qword_1010FF050);
}

uint64_t sub_10055AFE0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10055AFFC(a1, a2, a3, &qword_1010FF050, &qword_1010FF048, (uint64_t (*)(void))sub_10055B07C);
}

uint64_t sub_10055AFFC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v6;
  uint64_t v13;

  v13 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(a4) - 8) + 80);
  return sub_10055994C(a1, a2, a3, v6 + ((v13 + 16) & ~v13), a5, a6, a4);
}

unint64_t sub_10055B07C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FF058;
  if (!qword_1010FF058)
  {
    v1 = sub_10001F784(&qword_1010FF048);
    v2 = sub_100006204(&qword_1010FF060, type metadata accessor for KeySyncMetadata, (uint64_t)&unk_100E27C70);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FF058);
  }
  return result;
}

void sub_10055B0F8(uint64_t a1)
{
  uint64_t v1;

  sub_100559500(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B100()
{
  return sub_1000076EC(&qword_1010FF050);
}

void sub_10055B10C(uint64_t a1)
{
  uint64_t v1;

  sub_100559350(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B118()
{
  return sub_1000076EC(&qword_1010F8318);
}

uint64_t sub_10055B124(uint64_t a1)
{
  sub_10001A9A8(&qword_1010F8318);
  return sub_1005594A0(a1);
}

void sub_10055B168(uint64_t a1)
{
  uint64_t v1;

  sub_100558E98(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B170()
{
  return sub_1000076EC(&qword_1010FF078);
}

uint64_t sub_10055B17C(uint64_t a1, uint64_t a2)
{
  sub_10001A9A8(&qword_1010FF078);
  return sub_100558FC8(a1, a2);
}

void sub_10055B1CC(uint64_t a1)
{
  uint64_t v1;

  sub_100559048(a1, *(void **)(v1 + 16), (uint64_t)&unk_10107E7E8, (uint64_t)sub_10055B210, (uint64_t)&unk_10107E800, (SEL *)&selRef_decimateLowValueObservationsWithCompletion_);
}

uint64_t sub_10055B204()
{
  return sub_1000076EC(&qword_1010F8318);
}

uint64_t sub_10055B210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10055B224(a1, a2, a3, &qword_1010F8318, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100559178);
}

uint64_t sub_10055B224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v9;

  v9 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(a4) - 8) + 80);
  return a5(a1, a2, a3, v5 + ((v9 + 16) & ~v9));
}

void sub_10055B288(uint64_t a1)
{
  uint64_t v1;

  sub_100558BC0(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10055B290()
{
  return sub_1000076EC(&qword_1010FF088);
}

uint64_t sub_10055B2A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10001A9A8(&qword_1010FF088);
  return sub_100558CF8(a1, a2, a3);
}

uint64_t sub_10055B2FC(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010FF080);
    v10 = sub_100006204(a2, type metadata accessor for ObservedAdvertisement, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10055B380(uint64_t a1)
{
  uint64_t v1;

  sub_100557B14(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B38C()
{
  return sub_1000076EC(&qword_1010FF0A8);
}

uint64_t sub_10055B398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10055B224(a1, a2, a3, &qword_1010FF0A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100557C64);
}

void sub_10055B3AC(uint64_t a1)
{
  uint64_t v1;

  sub_1005576A0(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B3B8()
{
  return sub_1000076EC(&qword_1010FF0C8);
}

uint64_t sub_10055B3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10055B224(a1, a2, a3, &qword_1010FF0C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1005577F0);
}

void sub_10055B3D8(uint64_t a1)
{
  uint64_t v1;

  sub_1005572F0(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B3E4()
{
  return sub_1000076EC(&qword_1010FF100);
}

uint64_t sub_10055B3F0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10055AFFC(a1, a2, a3, &qword_1010FF100, &qword_1010FF0F8, (uint64_t (*)(void))sub_10055B40C);
}

unint64_t sub_10055B40C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FF108;
  if (!qword_1010FF108)
  {
    v1 = sub_10001F784(&qword_1010FF0F8);
    v2 = sub_100006204(&qword_1010F17F0, type metadata accessor for ObservedAdvertisement.Location, (uint64_t)&unk_100E2A0FC);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, &qword_1010FF108);
  }
  return result;
}

void sub_10055B488(uint64_t a1)
{
  uint64_t v1;

  sub_100556FAC(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B494()
{
  return sub_1000076EC(&qword_1010FF088);
}

unint64_t sub_10055B4A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FF128;
  if (!qword_1010FF128)
  {
    v1 = sub_10001F784(&qword_1010FF120);
    v2 = sub_100006204(&qword_1010FF010, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45CF4);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, &qword_1010FF128);
  }
  return result;
}

void sub_10055B51C(uint64_t a1)
{
  uint64_t v1;

  sub_100556BD8(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48));
}

uint64_t sub_10055B52C()
{
  return sub_1000076EC(&qword_1010FF088);
}

void sub_10055B538(uint64_t a1)
{
  uint64_t v1;

  sub_100559048(a1, *(void **)(v1 + 16), (uint64_t)&unk_10107EA18, (uint64_t)sub_10055B57C, (uint64_t)&unk_10107EA30, (SEL *)&selRef_deleteAllAnonymousObservedAdvertisementsWithCompletion_);
}

uint64_t sub_10055B570()
{
  return sub_1000076EC(&qword_1010F8318);
}

uint64_t sub_10055B580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001A9A8(&qword_1010F8318);
  return sub_10055690C(a1, a2, a3);
}

void sub_10055B5DC(uint64_t a1)
{
  uint64_t v1;

  sub_1005567BC(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B5E8()
{
  return sub_1000076EC(&qword_1010F8318);
}

void sub_10055B5F4(uint64_t a1)
{
  uint64_t v1;

  sub_100556380(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B600()
{
  return sub_1000076EC(&qword_1010F8318);
}

void sub_10055B60C(uint64_t a1)
{
  uint64_t v1;

  sub_10055604C(a1, *(void **)(v1 + 16));
}

uint64_t sub_10055B618()
{
  return sub_1000076EC(&qword_1010F8318);
}

_WORD *sub_10055B624(_WORD *a1, _QWORD *a2, int *a3)
{
  _WORD *v3;
  int v5;
  int *v6;
  int *v7;
  unsigned int (*v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  _WORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  _WORD *v64;
  _WORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void (*v89)(char *, char *, uint64_t);
  uint64_t v90;
  uint64_t v91;
  _WORD *v92;
  _WORD *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  uint64_t v118;
  uint64_t v119;
  _WORD *v120;
  _WORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  void (*v145)(char *, char *, uint64_t);
  uint64_t v146;
  uint64_t v147;
  _WORD *v148;
  _WORD *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  void (*v155)(char *, char *, uint64_t);
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  void (*v173)(char *, char *, uint64_t);
  uint64_t v174;
  _WORD *v176;
  _WORD *v177;
  _WORD *v178;
  _WORD *v179;
  unsigned int (*v180)(_QWORD, _QWORD, _QWORD);
  int *v181;
  uint64_t v182;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (_WORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = (int *)type metadata accessor for DeviceEvent(0);
    v182 = *((_QWORD *)v7 - 1);
    v8 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v182 + 48);
    v180 = v8;
    v181 = v6;
    if (v8(v3, 1, v7))
    {
      v9 = sub_10001A9A8(&qword_1010EF488);
      memcpy(a1, v3, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)v3;
      a1[4] = v3[4];
      v11 = v7[6];
      v12 = (char *)a1 + v11;
      v13 = (char *)v3 + v11;
      v14 = type metadata accessor for Date(0);
      v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      v16 = v7[7];
      v17 = (_QWORD *)((char *)a1 + v16);
      v18 = (_QWORD *)((char *)v3 + v16);
      v19 = type metadata accessor for DeviceEvent.Location(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v17 = *(_OWORD *)v18;
        v17[2] = v18[2];
        v15((char *)v17 + *(int *)(v19 + 28), (char *)v18 + *(int *)(v19 + 28), v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v22 = v7[8];
      v23 = (char *)a1 + v22;
      v24 = (char *)v3 + v22;
      v25 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v28 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v23, v24, v28);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      v29 = v7[9];
      v30 = (char *)a1 + v29;
      v31 = (char *)v3 + v29;
      v32 = type metadata accessor for UUID(0);
      v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
      v33(v30, v31, v32);
      v34 = type metadata accessor for BeaconIdentifier(0);
      v33(&v30[*(int *)(v34 + 20)], &v31[*(int *)(v34 + 20)], v32);
      v15((char *)a1 + v7[10], (char *)v3 + v7[10], v14);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v182 + 56))(a1, 0, 1, v7);
      v8 = v180;
      v6 = v181;
    }
    v35 = v6[5];
    v36 = (_WORD *)((char *)a1 + v35);
    v37 = (_WORD *)((char *)v3 + v35);
    if (v8((char *)v3 + v35, 1, v7))
    {
      v38 = sub_10001A9A8(&qword_1010EF488);
      memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v176 = a1;
      *(_QWORD *)v36 = *(_QWORD *)v37;
      v36[4] = v37[4];
      v39 = v7[6];
      v40 = (char *)v36 + v39;
      v41 = (char *)v37 + v39;
      v42 = type metadata accessor for Date(0);
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 16);
      v43(v40, v41, v42);
      v44 = v7[7];
      v45 = (_QWORD *)((char *)v36 + v44);
      v46 = (_QWORD *)((char *)v37 + v44);
      v47 = type metadata accessor for DeviceEvent.Location(0);
      v48 = *(_QWORD *)(v47 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
      {
        v49 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v45 = *(_OWORD *)v46;
        v45[2] = v46[2];
        v43((char *)v45 + *(int *)(v47 + 28), (char *)v46 + *(int *)(v47 + 28), v42);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
      }
      v50 = v7[8];
      v51 = (char *)v36 + v50;
      v52 = (char *)v37 + v50;
      v53 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v54 = *(_QWORD *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        v55 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      }
      else
      {
        v56 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v51, v52, v56);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
      v57 = v7[9];
      v58 = (char *)v36 + v57;
      v59 = (char *)v37 + v57;
      v60 = type metadata accessor for UUID(0);
      v61 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16);
      v61(v58, v59, v60);
      v62 = type metadata accessor for BeaconIdentifier(0);
      v61(&v58[*(int *)(v62 + 20)], &v59[*(int *)(v62 + 20)], v60);
      v43((char *)v36 + v7[10], (char *)v37 + v7[10], v42);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v182 + 56))(v36, 0, 1, v7);
      v8 = v180;
      v6 = v181;
      a1 = v176;
    }
    v63 = v6[6];
    v64 = (_WORD *)((char *)a1 + v63);
    v65 = (_WORD *)((char *)v3 + v63);
    if (v8((char *)v3 + v63, 1, v7))
    {
      v66 = sub_10001A9A8(&qword_1010EF488);
      memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    }
    else
    {
      v177 = v3;
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[4] = v65[4];
      v67 = v7[6];
      v68 = (char *)v64 + v67;
      v69 = (char *)v65 + v67;
      v70 = type metadata accessor for Date(0);
      v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
      v71(v68, v69, v70);
      v72 = v7[7];
      v73 = (_QWORD *)((char *)v64 + v72);
      v74 = (_QWORD *)((char *)v65 + v72);
      v75 = type metadata accessor for DeviceEvent.Location(0);
      v76 = *(_QWORD *)(v75 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75))
      {
        v77 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v73 = *(_OWORD *)v74;
        v73[2] = v74[2];
        v71((char *)v73 + *(int *)(v75 + 28), (char *)v74 + *(int *)(v75 + 28), v70);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
      }
      v78 = v7[8];
      v79 = (char *)v64 + v78;
      v80 = (char *)v65 + v78;
      v81 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v82 = *(_QWORD *)(v81 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
      {
        v83 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        v84 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 16))(v79, v80, v84);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
      }
      v85 = v7[9];
      v86 = (char *)v64 + v85;
      v87 = (char *)v65 + v85;
      v88 = type metadata accessor for UUID(0);
      v89 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v88 - 8) + 16);
      v89(v86, v87, v88);
      v90 = type metadata accessor for BeaconIdentifier(0);
      v89(&v86[*(int *)(v90 + 20)], &v87[*(int *)(v90 + 20)], v88);
      v71((char *)v64 + v7[10], (char *)v65 + v7[10], v70);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v182 + 56))(v64, 0, 1, v7);
      v8 = v180;
      v6 = v181;
      v3 = v177;
    }
    v91 = v6[7];
    v92 = (_WORD *)((char *)a1 + v91);
    v93 = (_WORD *)((char *)v3 + v91);
    if (v8((char *)v3 + v91, 1, v7))
    {
      v94 = sub_10001A9A8(&qword_1010EF488);
      memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v94 - 8) + 64));
    }
    else
    {
      v178 = a1;
      *(_QWORD *)v92 = *(_QWORD *)v93;
      v92[4] = v93[4];
      v95 = v7[6];
      v96 = (char *)v92 + v95;
      v97 = (char *)v93 + v95;
      v98 = type metadata accessor for Date(0);
      v99 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v98 - 8) + 16);
      v99(v96, v97, v98);
      v100 = v7[7];
      v101 = (_QWORD *)((char *)v92 + v100);
      v102 = (_QWORD *)((char *)v93 + v100);
      v103 = type metadata accessor for DeviceEvent.Location(0);
      v104 = *(_QWORD *)(v103 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
      {
        v105 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v101 = *(_OWORD *)v102;
        v101[2] = v102[2];
        v99((char *)v101 + *(int *)(v103 + 28), (char *)v102 + *(int *)(v103 + 28), v98);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
      }
      v106 = v7[8];
      v107 = (char *)v92 + v106;
      v108 = (char *)v93 + v106;
      v109 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v110 = *(_QWORD *)(v109 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
      {
        v111 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
      }
      else
      {
        v112 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v112 - 8) + 16))(v107, v108, v112);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
      }
      v113 = v7[9];
      v114 = (char *)v92 + v113;
      v115 = (char *)v93 + v113;
      v116 = type metadata accessor for UUID(0);
      v117 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16);
      v117(v114, v115, v116);
      v118 = type metadata accessor for BeaconIdentifier(0);
      v117(&v114[*(int *)(v118 + 20)], &v115[*(int *)(v118 + 20)], v116);
      v99((char *)v92 + v7[10], (char *)v93 + v7[10], v98);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v182 + 56))(v92, 0, 1, v7);
      v8 = v180;
      v6 = v181;
      a1 = v178;
    }
    v119 = v6[8];
    v120 = (_WORD *)((char *)a1 + v119);
    v121 = (_WORD *)((char *)v3 + v119);
    if (v8((char *)v3 + v119, 1, v7))
    {
      v122 = sub_10001A9A8(&qword_1010EF488);
      memcpy(v120, v121, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
    }
    else
    {
      v179 = v3;
      *(_QWORD *)v120 = *(_QWORD *)v121;
      v120[4] = v121[4];
      v123 = v7[6];
      v124 = (char *)v120 + v123;
      v125 = (char *)v121 + v123;
      v126 = type metadata accessor for Date(0);
      v127 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v126 - 8) + 16);
      v127(v124, v125, v126);
      v128 = v7[7];
      v129 = (_QWORD *)((char *)v120 + v128);
      v130 = (_QWORD *)((char *)v121 + v128);
      v131 = type metadata accessor for DeviceEvent.Location(0);
      v132 = *(_QWORD *)(v131 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v132 + 48))(v130, 1, v131))
      {
        v133 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v129, v130, *(_QWORD *)(*(_QWORD *)(v133 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v129 = *(_OWORD *)v130;
        v129[2] = v130[2];
        v127((char *)v129 + *(int *)(v131 + 28), (char *)v130 + *(int *)(v131 + 28), v126);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
      }
      v134 = v7[8];
      v135 = (char *)v120 + v134;
      v136 = (char *)v121 + v134;
      v137 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v138 = *(_QWORD *)(v137 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v136, 1, v137))
      {
        v139 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v135, v136, *(_QWORD *)(*(_QWORD *)(v139 - 8) + 64));
      }
      else
      {
        v140 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v140 - 8) + 16))(v135, v136, v140);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v138 + 56))(v135, 0, 1, v137);
      }
      v141 = v7[9];
      v142 = (char *)v120 + v141;
      v143 = (char *)v121 + v141;
      v144 = type metadata accessor for UUID(0);
      v145 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v144 - 8) + 16);
      v145(v142, v143, v144);
      v146 = type metadata accessor for BeaconIdentifier(0);
      v145(&v142[*(int *)(v146 + 20)], &v143[*(int *)(v146 + 20)], v144);
      v127((char *)v120 + v7[10], (char *)v121 + v7[10], v126);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v182 + 56))(v120, 0, 1, v7);
      v8 = v180;
      v6 = v181;
      v3 = v179;
    }
    v147 = v6[9];
    v148 = (_WORD *)((char *)a1 + v147);
    v149 = (_WORD *)((char *)v3 + v147);
    if (v8(v149, 1, v7))
    {
      v150 = sub_10001A9A8(&qword_1010EF488);
      memcpy(v148, v149, *(_QWORD *)(*(_QWORD *)(v150 - 8) + 64));
    }
    else
    {
      *(_QWORD *)v148 = *(_QWORD *)v149;
      v148[4] = v149[4];
      v151 = v7[6];
      v152 = (char *)v148 + v151;
      v153 = (char *)v149 + v151;
      v154 = type metadata accessor for Date(0);
      v155 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v154 - 8) + 16);
      v155(v152, v153, v154);
      v156 = v7[7];
      v157 = (_QWORD *)((char *)v148 + v156);
      v158 = (_QWORD *)((char *)v149 + v156);
      v159 = type metadata accessor for DeviceEvent.Location(0);
      v160 = *(_QWORD *)(v159 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v160 + 48))(v158, 1, v159))
      {
        v161 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v157, v158, *(_QWORD *)(*(_QWORD *)(v161 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v157 = *(_OWORD *)v158;
        v157[2] = v158[2];
        v155((char *)v157 + *(int *)(v159 + 28), (char *)v158 + *(int *)(v159 + 28), v154);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v160 + 56))(v157, 0, 1, v159);
      }
      v162 = v7[8];
      v163 = (char *)v148 + v162;
      v164 = (char *)v149 + v162;
      v165 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v166 = *(_QWORD *)(v165 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
      {
        v167 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
      }
      else
      {
        v168 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 16))(v163, v164, v168);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v163, 0, 1, v165);
      }
      v169 = v7[9];
      v170 = (char *)v148 + v169;
      v171 = (char *)v149 + v169;
      v172 = type metadata accessor for UUID(0);
      v173 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 16);
      v173(v170, v171, v172);
      v174 = type metadata accessor for BeaconIdentifier(0);
      v173(&v170[*(int *)(v174 + 20)], &v171[*(int *)(v174 + 20)], v172);
      v155((char *)v148 + v7[10], (char *)v149 + v7[10], v154);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v182 + 56))(v148, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10055C3EC(uint64_t a1, int *a2)
{
  int *v4;
  unsigned int (*v5)(uint64_t, uint64_t, int *);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);

  v4 = (int *)type metadata accessor for DeviceEvent(0);
  v5 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v4 - 1) + 48);
  if (!v5(a1, 1, v4))
  {
    v6 = a1 + v4[6];
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v6, v7);
    v9 = a1 + v4[7];
    v10 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      v8(v9 + *(int *)(v10 + 28), v7);
    v11 = a1 + v4[8];
    v12 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
    {
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
    }
    v14 = a1 + v4[9];
    v15 = type metadata accessor for UUID(0);
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
    v16(v14, v15);
    v17 = type metadata accessor for BeaconIdentifier(0);
    v16(v14 + *(int *)(v17 + 20), v15);
    v8(a1 + v4[10], v7);
  }
  v18 = a1 + a2[5];
  if (!v5(v18, 1, v4))
  {
    v19 = v18 + v4[6];
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
    v21(v19, v20);
    v22 = v18 + v4[7];
    v23 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
      v21(v22 + *(int *)(v23 + 28), v20);
    v24 = v18 + v4[8];
    v25 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
    {
      v26 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v24, v26);
    }
    v27 = v18 + v4[9];
    v28 = type metadata accessor for UUID(0);
    v29 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 8);
    v29(v27, v28);
    v30 = type metadata accessor for BeaconIdentifier(0);
    v29(v27 + *(int *)(v30 + 20), v28);
    v21(v18 + v4[10], v20);
  }
  v31 = a1 + a2[6];
  if (!v5(v31, 1, v4))
  {
    v32 = v31 + v4[6];
    v33 = type metadata accessor for Date(0);
    v34 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 8);
    v34(v32, v33);
    v35 = v31 + v4[7];
    v36 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v35, 1, v36))
      v34(v35 + *(int *)(v36 + 28), v33);
    v37 = v31 + v4[8];
    v38 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48))(v37, 1, v38))
    {
      v39 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 8))(v37, v39);
    }
    v40 = v31 + v4[9];
    v41 = type metadata accessor for UUID(0);
    v42 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8);
    v42(v40, v41);
    v43 = type metadata accessor for BeaconIdentifier(0);
    v42(v40 + *(int *)(v43 + 20), v41);
    v34(v31 + v4[10], v33);
  }
  v44 = a1 + a2[7];
  if (!v5(v44, 1, v4))
  {
    v45 = v44 + v4[6];
    v46 = type metadata accessor for Date(0);
    v47 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 8);
    v47(v45, v46);
    v48 = v44 + v4[7];
    v49 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49))
      v47(v48 + *(int *)(v49 + 28), v46);
    v50 = v44 + v4[8];
    v51 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 48))(v50, 1, v51))
    {
      v52 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v50, v52);
    }
    v53 = v44 + v4[9];
    v54 = type metadata accessor for UUID(0);
    v55 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 8);
    v55(v53, v54);
    v56 = type metadata accessor for BeaconIdentifier(0);
    v55(v53 + *(int *)(v56 + 20), v54);
    v47(v44 + v4[10], v46);
  }
  v57 = a1 + a2[8];
  if (!v5(v57, 1, v4))
  {
    v58 = v57 + v4[6];
    v59 = type metadata accessor for Date(0);
    v60 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 8);
    v60(v58, v59);
    v61 = v57 + v4[7];
    v62 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48))(v61, 1, v62))
      v60(v61 + *(int *)(v62 + 28), v59);
    v63 = v57 + v4[8];
    v64 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v63, 1, v64))
    {
      v65 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v63, v65);
    }
    v66 = v57 + v4[9];
    v67 = type metadata accessor for UUID(0);
    v68 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 8);
    v68(v66, v67);
    v69 = type metadata accessor for BeaconIdentifier(0);
    v68(v66 + *(int *)(v69 + 20), v67);
    v60(v57 + v4[10], v59);
  }
  v70 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, int *))v5)(v70, 1, v4);
  if (!(_DWORD)result)
  {
    v72 = v70 + v4[6];
    v73 = type metadata accessor for Date(0);
    v83 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 8);
    v83(v72, v73);
    v74 = v70 + v4[7];
    v75 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 48))(v74, 1, v75))
      v83(v74 + *(int *)(v75 + 28), v73);
    v76 = v70 + v4[8];
    v77 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 48))(v76, 1, v77))
    {
      v78 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 8))(v76, v78);
    }
    v79 = v70 + v4[9];
    v80 = type metadata accessor for UUID(0);
    v81 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 8);
    v81(v79, v80);
    v82 = type metadata accessor for BeaconIdentifier(0);
    v81(v79 + *(int *)(v82 + 20), v80);
    return ((uint64_t (*)(uint64_t, uint64_t))v83)(v70 + v4[10], v73);
  }
  return result;
}

_WORD *sub_10055CB10(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  unsigned int (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  _WORD *v62;
  _WORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  _WORD *v90;
  _WORD *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  _WORD *v118;
  _WORD *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  _WORD *v146;
  _WORD *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  uint64_t v172;
  _WORD *v174;
  void (*v175)(char *, char *, uint64_t);
  _WORD *v176;
  int *v177;
  unsigned int (*v178)(_QWORD, _QWORD, _QWORD);
  uint64_t v179;

  v6 = (int *)type metadata accessor for DeviceEvent(0);
  v179 = *((_QWORD *)v6 - 1);
  v7 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v179 + 48);
  v178 = v7;
  if (v7(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010EF488);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[4] = a2[4];
    v9 = v6[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = v6[7];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for DeviceEvent.Location(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
      v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = v6[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v21, v22, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v27 = v6[9];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for UUID(0);
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
    v31(v28, v29, v30);
    v32 = type metadata accessor for BeaconIdentifier(0);
    v31(&v28[*(int *)(v32 + 20)], &v29[*(int *)(v32 + 20)], v30);
    v13((char *)a1 + v6[10], (char *)a2 + v6[10], v12);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(a1, 0, 1, v6);
    v7 = v178;
  }
  v33 = a3[5];
  v34 = (_WORD *)((char *)a1 + v33);
  v35 = (_WORD *)((char *)a2 + v33);
  v176 = a1;
  v177 = a3;
  if (v7((char *)a2 + v33, 1, v6))
  {
    v36 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[4] = v35[4];
    v37 = v6[6];
    v38 = (char *)v34 + v37;
    v39 = (char *)v35 + v37;
    v40 = type metadata accessor for Date(0);
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    v41(v38, v39, v40);
    v42 = v6[7];
    v43 = (_QWORD *)((char *)v34 + v42);
    v44 = (_QWORD *)((char *)v35 + v42);
    v45 = type metadata accessor for DeviceEvent.Location(0);
    v46 = *(_QWORD *)(v45 - 8);
    v175 = v41;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      v47 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v43 = *(_OWORD *)v44;
      v43[2] = v44[2];
      v41((char *)v43 + *(int *)(v45 + 28), (char *)v44 + *(int *)(v45 + 28), v40);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v48 = v6[8];
    v49 = (char *)v34 + v48;
    v50 = (char *)v35 + v48;
    v51 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v52 = *(_QWORD *)(v51 - 8);
    a1 = v176;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v49, v50, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    v55 = v6[9];
    v56 = (char *)v34 + v55;
    v57 = (char *)v35 + v55;
    v58 = type metadata accessor for UUID(0);
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16);
    v59(v56, v57, v58);
    v60 = type metadata accessor for BeaconIdentifier(0);
    v59(&v56[*(int *)(v60 + 20)], &v57[*(int *)(v60 + 20)], v58);
    v175((char *)v34 + v6[10], (char *)v35 + v6[10], v40);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v34, 0, 1, v6);
    a3 = v177;
    v7 = v178;
  }
  v61 = a3[6];
  v62 = (_WORD *)((char *)a1 + v61);
  v63 = (_WORD *)((char *)a2 + v61);
  if (v7((char *)a2 + v61, 1, v6))
  {
    v64 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    v174 = a2;
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v62[4] = v63[4];
    v65 = v6[6];
    v66 = (char *)v62 + v65;
    v67 = (char *)v63 + v65;
    v68 = type metadata accessor for Date(0);
    v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 16);
    v69(v66, v67, v68);
    v70 = v6[7];
    v71 = (_QWORD *)((char *)v62 + v70);
    v72 = (_QWORD *)((char *)v63 + v70);
    v73 = type metadata accessor for DeviceEvent.Location(0);
    v74 = *(_QWORD *)(v73 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      v75 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v71 = *(_OWORD *)v72;
      v71[2] = v72[2];
      v69((char *)v71 + *(int *)(v73 + 28), (char *)v72 + *(int *)(v73 + 28), v68);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
    }
    v76 = v6[8];
    v77 = (char *)v62 + v76;
    v78 = (char *)v63 + v76;
    v79 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      v81 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      v82 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v77, v78, v82);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    v83 = v6[9];
    v84 = (char *)v62 + v83;
    v85 = (char *)v63 + v83;
    v86 = type metadata accessor for UUID(0);
    v87 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 16);
    v87(v84, v85, v86);
    v88 = type metadata accessor for BeaconIdentifier(0);
    v87(&v84[*(int *)(v88 + 20)], &v85[*(int *)(v88 + 20)], v86);
    v69((char *)v62 + v6[10], (char *)v63 + v6[10], v68);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v62, 0, 1, v6);
    a3 = v177;
    v7 = v178;
    a2 = v174;
  }
  v89 = a3[7];
  v90 = (_WORD *)((char *)a1 + v89);
  v91 = (_WORD *)((char *)a2 + v89);
  if (v7((char *)a2 + v89, 1, v6))
  {
    v92 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v90 = *(_QWORD *)v91;
    v90[4] = v91[4];
    v93 = v6[6];
    v94 = (char *)v90 + v93;
    v95 = (char *)v91 + v93;
    v96 = type metadata accessor for Date(0);
    v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 16);
    v97(v94, v95, v96);
    v98 = v6[7];
    v99 = (_QWORD *)((char *)v90 + v98);
    v100 = (_QWORD *)((char *)v91 + v98);
    v101 = type metadata accessor for DeviceEvent.Location(0);
    v102 = *(_QWORD *)(v101 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
    {
      v103 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v99 = *(_OWORD *)v100;
      v99[2] = v100[2];
      v97((char *)v99 + *(int *)(v101 + 28), (char *)v100 + *(int *)(v101 + 28), v96);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
    }
    v104 = v6[8];
    v105 = (char *)v90 + v104;
    v106 = (char *)v91 + v104;
    v107 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v108 = *(_QWORD *)(v107 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
    {
      v109 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    }
    else
    {
      v110 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(v105, v106, v110);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    v111 = v6[9];
    v112 = (char *)v90 + v111;
    v113 = (char *)v91 + v111;
    v114 = type metadata accessor for UUID(0);
    v115 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 16);
    v115(v112, v113, v114);
    v116 = type metadata accessor for BeaconIdentifier(0);
    v115(&v112[*(int *)(v116 + 20)], &v113[*(int *)(v116 + 20)], v114);
    v97((char *)v90 + v6[10], (char *)v91 + v6[10], v96);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v90, 0, 1, v6);
    a3 = v177;
    v7 = v178;
    a1 = v176;
  }
  v117 = a3[8];
  v118 = (_WORD *)((char *)a1 + v117);
  v119 = (_WORD *)((char *)a2 + v117);
  if (v7((char *)a2 + v117, 1, v6))
  {
    v120 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v118 = *(_QWORD *)v119;
    v118[4] = v119[4];
    v121 = v6[6];
    v122 = (char *)v118 + v121;
    v123 = (char *)v119 + v121;
    v124 = type metadata accessor for Date(0);
    v125 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 16);
    v125(v122, v123, v124);
    v126 = v6[7];
    v127 = (_QWORD *)((char *)v118 + v126);
    v128 = (_QWORD *)((char *)v119 + v126);
    v129 = type metadata accessor for DeviceEvent.Location(0);
    v130 = *(_QWORD *)(v129 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
    {
      v131 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
      v125((char *)v127 + *(int *)(v129 + 28), (char *)v128 + *(int *)(v129 + 28), v124);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
    }
    v132 = v6[8];
    v133 = (char *)v118 + v132;
    v134 = (char *)v119 + v132;
    v135 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 16))(v133, v134, v138);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = v6[9];
    v140 = (char *)v118 + v139;
    v141 = (char *)v119 + v139;
    v142 = type metadata accessor for UUID(0);
    v143 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16);
    v143(v140, v141, v142);
    v144 = type metadata accessor for BeaconIdentifier(0);
    v143(&v140[*(int *)(v144 + 20)], &v141[*(int *)(v144 + 20)], v142);
    v125((char *)v118 + v6[10], (char *)v119 + v6[10], v124);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v118, 0, 1, v6);
    a3 = v177;
    v7 = v178;
    a1 = v176;
  }
  v145 = a3[9];
  v146 = (_WORD *)((char *)a1 + v145);
  v147 = (_WORD *)((char *)a2 + v145);
  if (v7(v147, 1, v6))
  {
    v148 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v146 = *(_QWORD *)v147;
    v146[4] = v147[4];
    v149 = v6[6];
    v150 = (char *)v146 + v149;
    v151 = (char *)v147 + v149;
    v152 = type metadata accessor for Date(0);
    v153 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 16);
    v153(v150, v151, v152);
    v154 = v6[7];
    v155 = (_QWORD *)((char *)v146 + v154);
    v156 = (_QWORD *)((char *)v147 + v154);
    v157 = type metadata accessor for DeviceEvent.Location(0);
    v158 = *(_QWORD *)(v157 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
    {
      v159 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v155 = *(_OWORD *)v156;
      v155[2] = v156[2];
      v153((char *)v155 + *(int *)(v157 + 28), (char *)v156 + *(int *)(v157 + 28), v152);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
    }
    v160 = v6[8];
    v161 = (char *)v146 + v160;
    v162 = (char *)v147 + v160;
    v163 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v164 = *(_QWORD *)(v163 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
    {
      v165 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    }
    else
    {
      v166 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v161, v162, v166);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
    }
    v167 = v6[9];
    v168 = (char *)v146 + v167;
    v169 = (char *)v147 + v167;
    v170 = type metadata accessor for UUID(0);
    v171 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 16);
    v171(v168, v169, v170);
    v172 = type metadata accessor for BeaconIdentifier(0);
    v171(&v168[*(int *)(v172 + 20)], &v169[*(int *)(v172 + 20)], v170);
    v153((char *)v146 + v6[10], (char *)v147 + v6[10], v152);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v146, 0, 1, v6);
  }
  return a1;
}

_BYTE *sub_10055D8A0(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t (*v7)(_BYTE *, uint64_t, int *);
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  int v36;
  int v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t v48;
  void (*v49)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(_BYTE *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  void (*v66)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  _BYTE *v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  void (*v78)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t (*v96)(char *, uint64_t, uint64_t);
  int v97;
  int v98;
  uint64_t v99;
  _BYTE *v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  uint64_t v109;
  void (*v110)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(_BYTE *, uint64_t, uint64_t);
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  _BYTE *v125;
  uint64_t v126;
  void (*v127)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  _BYTE *v131;
  int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  _BYTE *v137;
  uint64_t v138;
  void (*v139)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  _BYTE *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(char *, uint64_t, uint64_t);
  int v158;
  int v159;
  uint64_t v160;
  _BYTE *v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  _BYTE *v169;
  uint64_t v170;
  void (*v171)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(_BYTE *, uint64_t, uint64_t);
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  uint64_t v187;
  void (*v188)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  _BYTE *v192;
  int v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  void (*v200)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE *v210;
  _BYTE *v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t (*v218)(char *, uint64_t, uint64_t);
  int v219;
  int v220;
  uint64_t v221;
  _BYTE *v222;
  _BYTE *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _BYTE *v229;
  _BYTE *v230;
  uint64_t v231;
  void (*v232)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *v236;
  _BYTE *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t (*v240)(_BYTE *, uint64_t, uint64_t);
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _BYTE *v246;
  _BYTE *v247;
  uint64_t v248;
  void (*v249)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v250;
  uint64_t v251;
  _BYTE *v252;
  _BYTE *v253;
  int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  _BYTE *v259;
  uint64_t v260;
  void (*v261)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  _BYTE *v271;
  _BYTE *v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t (*v279)(char *, uint64_t, uint64_t);
  int v280;
  int v281;
  uint64_t v282;
  _BYTE *v283;
  _BYTE *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  _BYTE *v291;
  uint64_t v292;
  void (*v293)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _BYTE *v297;
  _BYTE *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t (*v301)(_BYTE *, uint64_t, uint64_t);
  int v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  _BYTE *v308;
  uint64_t v309;
  void (*v310)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v311;
  uint64_t v312;
  _BYTE *v313;
  _BYTE *v314;
  int v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  _BYTE *v319;
  _BYTE *v320;
  uint64_t v321;
  void (*v322)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v323;
  _QWORD *v324;
  _QWORD *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  _BYTE *v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  char *v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t (*v341)(char *, uint64_t, uint64_t);
  int v342;
  int v343;
  uint64_t v344;
  _BYTE *v345;
  _BYTE *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _BYTE *v352;
  _BYTE *v353;
  uint64_t v354;
  void (*v355)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _BYTE *v359;
  _BYTE *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t (*v363)(_BYTE *, uint64_t, uint64_t);
  int v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE *v369;
  _BYTE *v370;
  uint64_t v371;
  void (*v372)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v373;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  void (*v385)(char *, char *, uint64_t);
  void (*v386)(char *, char *, uint64_t);
  void (*v387)(char *, char *, uint64_t);
  void (*v388)(char *, char *, uint64_t);
  void (*v389)(char *, char *, uint64_t);
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  _BYTE *v395;
  int *v396;
  void (*v397)(char *, char *, uint64_t);
  _BYTE *v398;
  uint64_t v399;

  v6 = (int *)type metadata accessor for DeviceEvent(0);
  v394 = *((_QWORD *)v6 - 1);
  v7 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v394 + 48);
  v8 = v7(a1, 1, v6);
  v9 = v7(a2, 1, v6);
  v395 = a1;
  v396 = a3;
  v398 = a2;
  if (v8)
  {
    if (!v9)
    {
      v10 = *(_QWORD *)a2;
      a1[8] = a2[8];
      *(_QWORD *)a1 = v10;
      a1[9] = a2[9];
      v11 = v6[6];
      v12 = &a1[v11];
      v13 = &a2[v11];
      v14 = type metadata accessor for Date(0);
      v15 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      v16 = v6[7];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v19 = type metadata accessor for DeviceEvent.Location(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        *v17 = *v18;
        v17[1] = v18[1];
        v17[2] = v18[2];
        v15((_BYTE *)v17 + *(int *)(v19 + 28), (_BYTE *)v18 + *(int *)(v19 + 28), v14);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      v38 = v6[8];
      v39 = &a1[v38];
      v40 = &a2[v38];
      v41 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v42 = *(_QWORD *)(v41 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        v43 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v44 = type metadata accessor for UUID(0);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v39, v40, v44);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      v45 = v6[9];
      v46 = &a1[v45];
      v47 = &a2[v45];
      v48 = type metadata accessor for UUID(0);
      v49 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
      v49(v46, v47, v48);
      v50 = type metadata accessor for BeaconIdentifier(0);
      v49(&v46[*(int *)(v50 + 20)], &v47[*(int *)(v50 + 20)], v48);
      v15(&a1[v6[10]], &a2[v6[10]], v14);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v394 + 56))(a1, 0, 1, v6);
      goto LABEL_26;
    }
LABEL_7:
    v22 = sub_10001A9A8(&qword_1010EF488);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_27;
  }
  if (v9)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for DeviceEvent);
    goto LABEL_7;
  }
  v23 = *(_QWORD *)a2;
  a1[8] = a2[8];
  *(_QWORD *)a1 = v23;
  a1[9] = a2[9];
  v24 = v6[6];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for Date(0);
  v28 = a2;
  v29 = *(_QWORD *)(v27 - 8);
  v389 = *(void (**)(char *, char *, uint64_t))(v29 + 24);
  v389(v25, v26, v27);
  v30 = v6[7];
  v31 = &a1[v30];
  v32 = &v28[v30];
  v33 = type metadata accessor for DeviceEvent.Location(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  v36 = v35(v31, 1, v33);
  v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(&v31[*(int *)(v33 + 28)], &v32[*(int *)(v33 + 28)], v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v37)
  {
    sub_1000126B0((uint64_t)v31, type metadata accessor for DeviceEvent.Location);
LABEL_18:
    v51 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_19;
  }
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  *((_QWORD *)v31 + 2) = *((_QWORD *)v32 + 2);
  v389(&v31[*(int *)(v33 + 28)], &v32[*(int *)(v33 + 28)], v27);
LABEL_19:
  a1 = v395;
  v52 = v6[8];
  v53 = &v395[v52];
  v54 = &v398[v52];
  v55 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (!v59)
    {
      v375 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v375 - 8) + 24))(v53, v54, v375);
      goto LABEL_25;
    }
    sub_1000126B0((uint64_t)v53, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_24;
  }
  if (v59)
  {
LABEL_24:
    v61 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_25;
  }
  v60 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v53, v54, v60);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_25:
  a2 = v398;
  v62 = v6[9];
  v63 = &v395[v62];
  v64 = &v398[v62];
  v65 = type metadata accessor for UUID(0);
  v66 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v65 - 8) + 24);
  v66(v63, v64, v65);
  v67 = type metadata accessor for BeaconIdentifier(0);
  v66(&v63[*(int *)(v67 + 20)], &v64[*(int *)(v67 + 20)], v65);
  v389(&v395[v6[10]], &v398[v6[10]], v27);
LABEL_26:
  a3 = v396;
LABEL_27:
  v68 = a3[5];
  v69 = &a1[v68];
  v70 = &a2[v68];
  v71 = v7(&a1[v68], 1, v6);
  v72 = v7(v70, 1, v6);
  if (!v71)
  {
    if (v72)
    {
      sub_1000126B0((uint64_t)v69, type metadata accessor for DeviceEvent);
      goto LABEL_33;
    }
    v86 = *(_QWORD *)v70;
    v69[8] = v70[8];
    *(_QWORD *)v69 = v86;
    v69[9] = v70[9];
    v87 = v6[6];
    v88 = &v69[v87];
    v89 = &v70[v87];
    v90 = type metadata accessor for Date(0);
    v381 = *(_QWORD *)(v90 - 8);
    v385 = *(void (**)(char *, char *, uint64_t))(v381 + 24);
    v390 = v90;
    ((void (*)(_BYTE *, _BYTE *))v385)(v88, v89);
    v91 = v6[7];
    v92 = &v69[v91];
    v93 = &v70[v91];
    v94 = type metadata accessor for DeviceEvent.Location(0);
    v95 = *(_QWORD *)(v94 - 8);
    v96 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 48);
    v97 = v96(v92, 1, v94);
    v98 = v96(v93, 1, v94);
    if (v97)
    {
      if (!v98)
      {
        *(_QWORD *)v92 = *(_QWORD *)v93;
        *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
        *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
        (*(void (**)(char *, char *, uint64_t))(v381 + 16))(&v92[*(int *)(v94 + 28)], &v93[*(int *)(v94 + 28)], v390);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v92, 0, 1, v94);
        goto LABEL_45;
      }
    }
    else
    {
      if (!v98)
      {
        *(_QWORD *)v92 = *(_QWORD *)v93;
        *((_QWORD *)v92 + 1) = *((_QWORD *)v93 + 1);
        *((_QWORD *)v92 + 2) = *((_QWORD *)v93 + 2);
        v385(&v92[*(int *)(v94 + 28)], &v93[*(int *)(v94 + 28)], v390);
LABEL_45:
        v113 = v6[8];
        v114 = &v69[v113];
        v115 = &v70[v113];
        v116 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v117 = *(_QWORD *)(v116 - 8);
        v118 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v117 + 48);
        v119 = v118(v114, 1, v116);
        v120 = v118(v115, 1, v116);
        if (v119)
        {
          a2 = v398;
          if (!v120)
          {
            v121 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v114, v115, v121);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
LABEL_51:
            a1 = v395;
            v123 = v6[9];
            v124 = &v69[v123];
            v125 = &v70[v123];
            v126 = type metadata accessor for UUID(0);
            v127 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v126 - 8) + 24);
            v127(v124, v125, v126);
            v128 = type metadata accessor for BeaconIdentifier(0);
            v127(&v124[*(int *)(v128 + 20)], &v125[*(int *)(v128 + 20)], v126);
            v385(&v69[v6[10]], &v70[v6[10]], v390);
            a3 = v396;
            goto LABEL_52;
          }
        }
        else
        {
          a2 = v398;
          if (!v120)
          {
            v376 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v376 - 8) + 24))(v114, v115, v376);
            goto LABEL_51;
          }
          sub_1000126B0((uint64_t)v114, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v122 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
        goto LABEL_51;
      }
      sub_1000126B0((uint64_t)v92, type metadata accessor for DeviceEvent.Location);
    }
    v112 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v92, v93, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
    goto LABEL_45;
  }
  if (v72)
  {
LABEL_33:
    v85 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
    goto LABEL_52;
  }
  v73 = *(_QWORD *)v70;
  v69[8] = v70[8];
  *(_QWORD *)v69 = v73;
  v69[9] = v70[9];
  v74 = v6[6];
  v75 = &v69[v74];
  v76 = &v70[v74];
  v77 = type metadata accessor for Date(0);
  v78 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v77 - 8) + 16);
  v78(v75, v76, v77);
  v79 = v6[7];
  v80 = &v69[v79];
  v81 = &v70[v79];
  v82 = type metadata accessor for DeviceEvent.Location(0);
  v83 = *(_QWORD *)(v82 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
  {
    v84 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v80, v81, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    *v80 = *v81;
    v80[1] = v81[1];
    v80[2] = v81[2];
    v78((_BYTE *)v80 + *(int *)(v82 + 28), (_BYTE *)v81 + *(int *)(v82 + 28), v77);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
  }
  v99 = v6[8];
  v100 = &v69[v99];
  v101 = &v70[v99];
  v102 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v103 = *(_QWORD *)(v102 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
  {
    v104 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
  }
  else
  {
    v105 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v105 - 8) + 16))(v100, v101, v105);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v103 + 56))(v100, 0, 1, v102);
  }
  v106 = v6[9];
  v107 = &v69[v106];
  v108 = &v70[v106];
  v109 = type metadata accessor for UUID(0);
  v110 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v109 - 8) + 16);
  v110(v107, v108, v109);
  v111 = type metadata accessor for BeaconIdentifier(0);
  v110(&v107[*(int *)(v111 + 20)], &v108[*(int *)(v111 + 20)], v109);
  v78(&v69[v6[10]], &v70[v6[10]], v77);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v394 + 56))(v69, 0, 1, v6);
  a1 = v395;
  a3 = v396;
  a2 = v398;
LABEL_52:
  v129 = a3[6];
  v130 = &a1[v129];
  v131 = &a2[v129];
  v132 = v7(&a1[v129], 1, v6);
  v133 = v7(v131, 1, v6);
  if (!v132)
  {
    if (v133)
    {
      sub_1000126B0((uint64_t)v130, type metadata accessor for DeviceEvent);
      goto LABEL_58;
    }
    v147 = *(_QWORD *)v131;
    v130[8] = v131[8];
    *(_QWORD *)v130 = v147;
    v130[9] = v131[9];
    v148 = v6[6];
    v149 = &v130[v148];
    v150 = &v131[v148];
    v151 = type metadata accessor for Date(0);
    v382 = *(_QWORD *)(v151 - 8);
    v386 = *(void (**)(char *, char *, uint64_t))(v382 + 24);
    v391 = v151;
    ((void (*)(_BYTE *, _BYTE *))v386)(v149, v150);
    v152 = v6[7];
    v153 = &v130[v152];
    v154 = &v131[v152];
    v155 = type metadata accessor for DeviceEvent.Location(0);
    v156 = *(_QWORD *)(v155 - 8);
    v157 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v156 + 48);
    v158 = v157(v153, 1, v155);
    v159 = v157(v154, 1, v155);
    if (v158)
    {
      if (!v159)
      {
        *(_QWORD *)v153 = *(_QWORD *)v154;
        *((_QWORD *)v153 + 1) = *((_QWORD *)v154 + 1);
        *((_QWORD *)v153 + 2) = *((_QWORD *)v154 + 2);
        (*(void (**)(char *, char *, uint64_t))(v382 + 16))(&v153[*(int *)(v155 + 28)], &v154[*(int *)(v155 + 28)], v391);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
        goto LABEL_70;
      }
    }
    else
    {
      if (!v159)
      {
        *(_QWORD *)v153 = *(_QWORD *)v154;
        *((_QWORD *)v153 + 1) = *((_QWORD *)v154 + 1);
        *((_QWORD *)v153 + 2) = *((_QWORD *)v154 + 2);
        v386(&v153[*(int *)(v155 + 28)], &v154[*(int *)(v155 + 28)], v391);
LABEL_70:
        v174 = v6[8];
        v175 = &v130[v174];
        v176 = &v131[v174];
        v177 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v178 = *(_QWORD *)(v177 - 8);
        v179 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v178 + 48);
        v180 = v179(v175, 1, v177);
        v181 = v179(v176, 1, v177);
        if (v180)
        {
          a2 = v398;
          if (!v181)
          {
            v182 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v182 - 8) + 16))(v175, v176, v182);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v178 + 56))(v175, 0, 1, v177);
LABEL_76:
            a1 = v395;
            v184 = v6[9];
            v185 = &v130[v184];
            v186 = &v131[v184];
            v187 = type metadata accessor for UUID(0);
            v188 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v187 - 8) + 24);
            v188(v185, v186, v187);
            v189 = type metadata accessor for BeaconIdentifier(0);
            v188(&v185[*(int *)(v189 + 20)], &v186[*(int *)(v189 + 20)], v187);
            v386(&v130[v6[10]], &v131[v6[10]], v391);
            a3 = v396;
            goto LABEL_77;
          }
        }
        else
        {
          a2 = v398;
          if (!v181)
          {
            v377 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v377 - 8) + 24))(v175, v176, v377);
            goto LABEL_76;
          }
          sub_1000126B0((uint64_t)v175, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v183 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v175, v176, *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64));
        goto LABEL_76;
      }
      sub_1000126B0((uint64_t)v153, type metadata accessor for DeviceEvent.Location);
    }
    v173 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v153, v154, *(_QWORD *)(*(_QWORD *)(v173 - 8) + 64));
    goto LABEL_70;
  }
  if (v133)
  {
LABEL_58:
    v146 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v130, v131, *(_QWORD *)(*(_QWORD *)(v146 - 8) + 64));
    goto LABEL_77;
  }
  v134 = *(_QWORD *)v131;
  v130[8] = v131[8];
  *(_QWORD *)v130 = v134;
  v130[9] = v131[9];
  v135 = v6[6];
  v136 = &v130[v135];
  v137 = &v131[v135];
  v138 = type metadata accessor for Date(0);
  v139 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v138 - 8) + 16);
  v139(v136, v137, v138);
  v140 = v6[7];
  v141 = &v130[v140];
  v142 = &v131[v140];
  v143 = type metadata accessor for DeviceEvent.Location(0);
  v144 = *(_QWORD *)(v143 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v144 + 48))(v142, 1, v143))
  {
    v145 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
  }
  else
  {
    *v141 = *v142;
    v141[1] = v142[1];
    v141[2] = v142[2];
    v139((_BYTE *)v141 + *(int *)(v143 + 28), (_BYTE *)v142 + *(int *)(v143 + 28), v138);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v141, 0, 1, v143);
  }
  v160 = v6[8];
  v161 = &v130[v160];
  v162 = &v131[v160];
  v163 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v164 = *(_QWORD *)(v163 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
  {
    v165 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
  }
  else
  {
    v166 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v166 - 8) + 16))(v161, v162, v166);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
  }
  v167 = v6[9];
  v168 = &v130[v167];
  v169 = &v131[v167];
  v170 = type metadata accessor for UUID(0);
  v171 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v170 - 8) + 16);
  v171(v168, v169, v170);
  v172 = type metadata accessor for BeaconIdentifier(0);
  v171(&v168[*(int *)(v172 + 20)], &v169[*(int *)(v172 + 20)], v170);
  v139(&v130[v6[10]], &v131[v6[10]], v138);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v394 + 56))(v130, 0, 1, v6);
  a1 = v395;
  a3 = v396;
  a2 = v398;
LABEL_77:
  v190 = a3[7];
  v191 = &a1[v190];
  v192 = &a2[v190];
  v193 = v7(&a1[v190], 1, v6);
  v194 = v7(v192, 1, v6);
  if (!v193)
  {
    if (v194)
    {
      sub_1000126B0((uint64_t)v191, type metadata accessor for DeviceEvent);
      goto LABEL_83;
    }
    v208 = *(_QWORD *)v192;
    v191[8] = v192[8];
    *(_QWORD *)v191 = v208;
    v191[9] = v192[9];
    v209 = v6[6];
    v210 = &v191[v209];
    v211 = &v192[v209];
    v212 = type metadata accessor for Date(0);
    v383 = *(_QWORD *)(v212 - 8);
    v387 = *(void (**)(char *, char *, uint64_t))(v383 + 24);
    v392 = v212;
    ((void (*)(_BYTE *, _BYTE *))v387)(v210, v211);
    v213 = v6[7];
    v214 = &v191[v213];
    v215 = &v192[v213];
    v216 = type metadata accessor for DeviceEvent.Location(0);
    v217 = *(_QWORD *)(v216 - 8);
    v218 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v217 + 48);
    v219 = v218(v214, 1, v216);
    v220 = v218(v215, 1, v216);
    if (v219)
    {
      if (!v220)
      {
        *(_QWORD *)v214 = *(_QWORD *)v215;
        *((_QWORD *)v214 + 1) = *((_QWORD *)v215 + 1);
        *((_QWORD *)v214 + 2) = *((_QWORD *)v215 + 2);
        (*(void (**)(char *, char *, uint64_t))(v383 + 16))(&v214[*(int *)(v216 + 28)], &v215[*(int *)(v216 + 28)], v392);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
        goto LABEL_95;
      }
    }
    else
    {
      if (!v220)
      {
        *(_QWORD *)v214 = *(_QWORD *)v215;
        *((_QWORD *)v214 + 1) = *((_QWORD *)v215 + 1);
        *((_QWORD *)v214 + 2) = *((_QWORD *)v215 + 2);
        v387(&v214[*(int *)(v216 + 28)], &v215[*(int *)(v216 + 28)], v392);
LABEL_95:
        v235 = v6[8];
        v236 = &v191[v235];
        v237 = &v192[v235];
        v238 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v239 = *(_QWORD *)(v238 - 8);
        v240 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v239 + 48);
        v241 = v240(v236, 1, v238);
        v242 = v240(v237, 1, v238);
        if (v241)
        {
          a2 = v398;
          if (!v242)
          {
            v243 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v243 - 8) + 16))(v236, v237, v243);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v236, 0, 1, v238);
LABEL_101:
            a1 = v395;
            v245 = v6[9];
            v246 = &v191[v245];
            v247 = &v192[v245];
            v248 = type metadata accessor for UUID(0);
            v249 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v248 - 8) + 24);
            v249(v246, v247, v248);
            v250 = type metadata accessor for BeaconIdentifier(0);
            v249(&v246[*(int *)(v250 + 20)], &v247[*(int *)(v250 + 20)], v248);
            v387(&v191[v6[10]], &v192[v6[10]], v392);
            a3 = v396;
            goto LABEL_102;
          }
        }
        else
        {
          a2 = v398;
          if (!v242)
          {
            v378 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v378 - 8) + 24))(v236, v237, v378);
            goto LABEL_101;
          }
          sub_1000126B0((uint64_t)v236, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v244 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v236, v237, *(_QWORD *)(*(_QWORD *)(v244 - 8) + 64));
        goto LABEL_101;
      }
      sub_1000126B0((uint64_t)v214, type metadata accessor for DeviceEvent.Location);
    }
    v234 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
    goto LABEL_95;
  }
  if (v194)
  {
LABEL_83:
    v207 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v191, v192, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
    goto LABEL_102;
  }
  v195 = *(_QWORD *)v192;
  v191[8] = v192[8];
  *(_QWORD *)v191 = v195;
  v191[9] = v192[9];
  v196 = v6[6];
  v197 = &v191[v196];
  v198 = &v192[v196];
  v199 = type metadata accessor for Date(0);
  v200 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v199 - 8) + 16);
  v200(v197, v198, v199);
  v201 = v6[7];
  v202 = &v191[v201];
  v203 = &v192[v201];
  v204 = type metadata accessor for DeviceEvent.Location(0);
  v205 = *(_QWORD *)(v204 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v205 + 48))(v203, 1, v204))
  {
    v206 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v206 - 8) + 64));
  }
  else
  {
    *v202 = *v203;
    v202[1] = v203[1];
    v202[2] = v203[2];
    v200((_BYTE *)v202 + *(int *)(v204 + 28), (_BYTE *)v203 + *(int *)(v204 + 28), v199);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v205 + 56))(v202, 0, 1, v204);
  }
  v221 = v6[8];
  v222 = &v191[v221];
  v223 = &v192[v221];
  v224 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v225 = *(_QWORD *)(v224 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v225 + 48))(v223, 1, v224))
  {
    v226 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
  }
  else
  {
    v227 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v227 - 8) + 16))(v222, v223, v227);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v225 + 56))(v222, 0, 1, v224);
  }
  v228 = v6[9];
  v229 = &v191[v228];
  v230 = &v192[v228];
  v231 = type metadata accessor for UUID(0);
  v232 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v231 - 8) + 16);
  v232(v229, v230, v231);
  v233 = type metadata accessor for BeaconIdentifier(0);
  v232(&v229[*(int *)(v233 + 20)], &v230[*(int *)(v233 + 20)], v231);
  v200(&v191[v6[10]], &v192[v6[10]], v199);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v394 + 56))(v191, 0, 1, v6);
  a1 = v395;
  a3 = v396;
  a2 = v398;
LABEL_102:
  v251 = a3[8];
  v252 = &a1[v251];
  v253 = &a2[v251];
  v254 = v7(&a1[v251], 1, v6);
  v255 = v7(v253, 1, v6);
  if (!v254)
  {
    if (v255)
    {
      sub_1000126B0((uint64_t)v252, type metadata accessor for DeviceEvent);
      goto LABEL_108;
    }
    v269 = *(_QWORD *)v253;
    v252[8] = v253[8];
    *(_QWORD *)v252 = v269;
    v252[9] = v253[9];
    v270 = v6[6];
    v271 = &v252[v270];
    v272 = &v253[v270];
    v273 = type metadata accessor for Date(0);
    v384 = *(_QWORD *)(v273 - 8);
    v388 = *(void (**)(char *, char *, uint64_t))(v384 + 24);
    v393 = v273;
    ((void (*)(_BYTE *, _BYTE *))v388)(v271, v272);
    v274 = v6[7];
    v275 = &v252[v274];
    v276 = &v253[v274];
    v277 = type metadata accessor for DeviceEvent.Location(0);
    v278 = *(_QWORD *)(v277 - 8);
    v279 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v278 + 48);
    v280 = v279(v275, 1, v277);
    v281 = v279(v276, 1, v277);
    if (v280)
    {
      if (!v281)
      {
        *(_QWORD *)v275 = *(_QWORD *)v276;
        *((_QWORD *)v275 + 1) = *((_QWORD *)v276 + 1);
        *((_QWORD *)v275 + 2) = *((_QWORD *)v276 + 2);
        (*(void (**)(char *, char *, uint64_t))(v384 + 16))(&v275[*(int *)(v277 + 28)], &v276[*(int *)(v277 + 28)], v393);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v278 + 56))(v275, 0, 1, v277);
        goto LABEL_120;
      }
    }
    else
    {
      if (!v281)
      {
        *(_QWORD *)v275 = *(_QWORD *)v276;
        *((_QWORD *)v275 + 1) = *((_QWORD *)v276 + 1);
        *((_QWORD *)v275 + 2) = *((_QWORD *)v276 + 2);
        v388(&v275[*(int *)(v277 + 28)], &v276[*(int *)(v277 + 28)], v393);
LABEL_120:
        v296 = v6[8];
        v297 = &v252[v296];
        v298 = &v253[v296];
        v299 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v300 = *(_QWORD *)(v299 - 8);
        v301 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v300 + 48);
        v302 = v301(v297, 1, v299);
        v303 = v301(v298, 1, v299);
        if (v302)
        {
          if (!v303)
          {
            v304 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v304 - 8) + 16))(v297, v298, v304);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v300 + 56))(v297, 0, 1, v299);
LABEL_126:
            a1 = v395;
            v306 = v6[9];
            v307 = &v252[v306];
            v308 = &v253[v306];
            v309 = type metadata accessor for UUID(0);
            v310 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v309 - 8) + 24);
            v310(v307, v308, v309);
            v311 = type metadata accessor for BeaconIdentifier(0);
            v310(&v307[*(int *)(v311 + 20)], &v308[*(int *)(v311 + 20)], v309);
            v388(&v252[v6[10]], &v253[v6[10]], v393);
            a3 = v396;
            goto LABEL_127;
          }
        }
        else
        {
          if (!v303)
          {
            v379 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v379 - 8) + 24))(v297, v298, v379);
            goto LABEL_126;
          }
          sub_1000126B0((uint64_t)v297, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v305 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v297, v298, *(_QWORD *)(*(_QWORD *)(v305 - 8) + 64));
        goto LABEL_126;
      }
      sub_1000126B0((uint64_t)v275, type metadata accessor for DeviceEvent.Location);
    }
    v295 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v275, v276, *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64));
    goto LABEL_120;
  }
  if (v255)
  {
LABEL_108:
    v268 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v252, v253, *(_QWORD *)(*(_QWORD *)(v268 - 8) + 64));
    goto LABEL_127;
  }
  v256 = *(_QWORD *)v253;
  v252[8] = v253[8];
  *(_QWORD *)v252 = v256;
  v252[9] = v253[9];
  v257 = v6[6];
  v258 = &v252[v257];
  v259 = &v253[v257];
  v260 = type metadata accessor for Date(0);
  v261 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v260 - 8) + 16);
  v261(v258, v259, v260);
  v262 = v6[7];
  v263 = &v252[v262];
  v264 = &v253[v262];
  v265 = type metadata accessor for DeviceEvent.Location(0);
  v266 = *(_QWORD *)(v265 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v266 + 48))(v264, 1, v265))
  {
    v267 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v263, v264, *(_QWORD *)(*(_QWORD *)(v267 - 8) + 64));
  }
  else
  {
    *v263 = *v264;
    v263[1] = v264[1];
    v263[2] = v264[2];
    v261((_BYTE *)v263 + *(int *)(v265 + 28), (_BYTE *)v264 + *(int *)(v265 + 28), v260);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v266 + 56))(v263, 0, 1, v265);
  }
  v282 = v6[8];
  v283 = &v252[v282];
  v284 = &v253[v282];
  v285 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v286 = *(_QWORD *)(v285 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v286 + 48))(v284, 1, v285))
  {
    v287 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v283, v284, *(_QWORD *)(*(_QWORD *)(v287 - 8) + 64));
  }
  else
  {
    v288 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v288 - 8) + 16))(v283, v284, v288);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v286 + 56))(v283, 0, 1, v285);
  }
  v289 = v6[9];
  v290 = &v252[v289];
  v291 = &v253[v289];
  v292 = type metadata accessor for UUID(0);
  v293 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v292 - 8) + 16);
  v293(v290, v291, v292);
  v294 = type metadata accessor for BeaconIdentifier(0);
  v293(&v290[*(int *)(v294 + 20)], &v291[*(int *)(v294 + 20)], v292);
  v261(&v252[v6[10]], &v253[v6[10]], v260);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v394 + 56))(v252, 0, 1, v6);
  a1 = v395;
  a3 = v396;
LABEL_127:
  v312 = a3[9];
  v313 = &a1[v312];
  v314 = &v398[v312];
  v315 = v7(&a1[v312], 1, v6);
  v316 = v7(v314, 1, v6);
  if (!v315)
  {
    if (v316)
    {
      sub_1000126B0((uint64_t)v313, type metadata accessor for DeviceEvent);
      goto LABEL_133;
    }
    v330 = *(_QWORD *)v314;
    v313[8] = v314[8];
    *(_QWORD *)v313 = v330;
    v313[9] = v314[9];
    v331 = v6[6];
    v332 = &v313[v331];
    v333 = &v314[v331];
    v334 = type metadata accessor for Date(0);
    v335 = *(_QWORD *)(v334 - 8);
    v397 = *(void (**)(char *, char *, uint64_t))(v335 + 24);
    v399 = v334;
    ((void (*)(_BYTE *, _BYTE *))v397)(v332, v333);
    v336 = v6[7];
    v337 = &v313[v336];
    v338 = &v314[v336];
    v339 = type metadata accessor for DeviceEvent.Location(0);
    v340 = *(_QWORD *)(v339 - 8);
    v341 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v340 + 48);
    v342 = v341(v337, 1, v339);
    v343 = v341(v338, 1, v339);
    if (v342)
    {
      if (!v343)
      {
        *(_QWORD *)v337 = *(_QWORD *)v338;
        *((_QWORD *)v337 + 1) = *((_QWORD *)v338 + 1);
        *((_QWORD *)v337 + 2) = *((_QWORD *)v338 + 2);
        (*(void (**)(char *, char *, uint64_t))(v335 + 16))(&v337[*(int *)(v339 + 28)], &v338[*(int *)(v339 + 28)], v399);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v340 + 56))(v337, 0, 1, v339);
        goto LABEL_145;
      }
    }
    else
    {
      if (!v343)
      {
        *(_QWORD *)v337 = *(_QWORD *)v338;
        *((_QWORD *)v337 + 1) = *((_QWORD *)v338 + 1);
        *((_QWORD *)v337 + 2) = *((_QWORD *)v338 + 2);
        v397(&v337[*(int *)(v339 + 28)], &v338[*(int *)(v339 + 28)], v399);
LABEL_145:
        a1 = v395;
        v358 = v6[8];
        v359 = &v313[v358];
        v360 = &v314[v358];
        v361 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v362 = *(_QWORD *)(v361 - 8);
        v363 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v362 + 48);
        v364 = v363(v359, 1, v361);
        v365 = v363(v360, 1, v361);
        if (v364)
        {
          if (!v365)
          {
            v366 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v366 - 8) + 16))(v359, v360, v366);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v362 + 56))(v359, 0, 1, v361);
LABEL_151:
            v368 = v6[9];
            v369 = &v313[v368];
            v370 = &v314[v368];
            v371 = type metadata accessor for UUID(0);
            v372 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v371 - 8) + 24);
            v372(v369, v370, v371);
            v373 = type metadata accessor for BeaconIdentifier(0);
            v372(&v369[*(int *)(v373 + 20)], &v370[*(int *)(v373 + 20)], v371);
            v397(&v313[v6[10]], &v314[v6[10]], v399);
            return a1;
          }
        }
        else
        {
          if (!v365)
          {
            v380 = type metadata accessor for UUID(0);
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v380 - 8) + 24))(v359, v360, v380);
            goto LABEL_151;
          }
          sub_1000126B0((uint64_t)v359, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v367 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v359, v360, *(_QWORD *)(*(_QWORD *)(v367 - 8) + 64));
        goto LABEL_151;
      }
      sub_1000126B0((uint64_t)v337, type metadata accessor for DeviceEvent.Location);
    }
    v357 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v337, v338, *(_QWORD *)(*(_QWORD *)(v357 - 8) + 64));
    goto LABEL_145;
  }
  if (v316)
  {
LABEL_133:
    v329 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v313, v314, *(_QWORD *)(*(_QWORD *)(v329 - 8) + 64));
    return a1;
  }
  v317 = *(_QWORD *)v314;
  v313[8] = v314[8];
  *(_QWORD *)v313 = v317;
  v313[9] = v314[9];
  v318 = v6[6];
  v319 = &v313[v318];
  v320 = &v314[v318];
  v321 = type metadata accessor for Date(0);
  v322 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v321 - 8) + 16);
  v322(v319, v320, v321);
  v323 = v6[7];
  v324 = &v313[v323];
  v325 = &v314[v323];
  v326 = type metadata accessor for DeviceEvent.Location(0);
  v327 = *(_QWORD *)(v326 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v327 + 48))(v325, 1, v326))
  {
    v328 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v324, v325, *(_QWORD *)(*(_QWORD *)(v328 - 8) + 64));
  }
  else
  {
    *v324 = *v325;
    v324[1] = v325[1];
    v324[2] = v325[2];
    v322((_BYTE *)v324 + *(int *)(v326 + 28), (_BYTE *)v325 + *(int *)(v326 + 28), v321);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v327 + 56))(v324, 0, 1, v326);
  }
  v344 = v6[8];
  v345 = &v313[v344];
  v346 = &v314[v344];
  v347 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v348 = *(_QWORD *)(v347 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v348 + 48))(v346, 1, v347))
  {
    v349 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v345, v346, *(_QWORD *)(*(_QWORD *)(v349 - 8) + 64));
  }
  else
  {
    v350 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v350 - 8) + 16))(v345, v346, v350);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v348 + 56))(v345, 0, 1, v347);
  }
  v351 = v6[9];
  v352 = &v313[v351];
  v353 = &v314[v351];
  v354 = type metadata accessor for UUID(0);
  v355 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v354 - 8) + 16);
  v355(v352, v353, v354);
  v356 = type metadata accessor for BeaconIdentifier(0);
  v355(&v352[*(int *)(v356 + 20)], &v353[*(int *)(v356 + 20)], v354);
  v322(&v313[v6[10]], &v314[v6[10]], v321);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v394 + 56))(v313, 0, 1, v6);
  return a1;
}

_WORD *sub_10055F710(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  unsigned int (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  _WORD *v62;
  _WORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  _WORD *v90;
  _WORD *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  _WORD *v118;
  _WORD *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  void (*v125)(char *, char *, uint64_t);
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  void (*v143)(char *, char *, uint64_t);
  uint64_t v144;
  uint64_t v145;
  _WORD *v146;
  _WORD *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  void (*v153)(char *, char *, uint64_t);
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  uint64_t v170;
  void (*v171)(char *, char *, uint64_t);
  uint64_t v172;
  _WORD *v174;
  void (*v175)(char *, char *, uint64_t);
  _WORD *v176;
  int *v177;
  unsigned int (*v178)(_QWORD, _QWORD, _QWORD);
  uint64_t v179;

  v6 = (int *)type metadata accessor for DeviceEvent(0);
  v179 = *((_QWORD *)v6 - 1);
  v7 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v179 + 48);
  v178 = v7;
  if (v7(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010EF488);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1[4] = a2[4];
    v9 = v6[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
    v13(v10, v11, v12);
    v14 = v6[7];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for DeviceEvent.Location(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
      v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v20 = v6[8];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v24 = *(_QWORD *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      v25 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v26 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v27 = v6[9];
    v28 = (char *)a1 + v27;
    v29 = (char *)a2 + v27;
    v30 = type metadata accessor for UUID(0);
    v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32);
    v31(v28, v29, v30);
    v32 = type metadata accessor for BeaconIdentifier(0);
    v31(&v28[*(int *)(v32 + 20)], &v29[*(int *)(v32 + 20)], v30);
    v13((char *)a1 + v6[10], (char *)a2 + v6[10], v12);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(a1, 0, 1, v6);
    v7 = v178;
  }
  v33 = a3[5];
  v34 = (_WORD *)((char *)a1 + v33);
  v35 = (_WORD *)((char *)a2 + v33);
  v176 = a1;
  v177 = a3;
  if (v7((char *)a2 + v33, 1, v6))
  {
    v36 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v34 = *(_QWORD *)v35;
    v34[4] = v35[4];
    v37 = v6[6];
    v38 = (char *)v34 + v37;
    v39 = (char *)v35 + v37;
    v40 = type metadata accessor for Date(0);
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 32);
    v41(v38, v39, v40);
    v42 = v6[7];
    v43 = (_QWORD *)((char *)v34 + v42);
    v44 = (_QWORD *)((char *)v35 + v42);
    v45 = type metadata accessor for DeviceEvent.Location(0);
    v46 = *(_QWORD *)(v45 - 8);
    v175 = v41;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      v47 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v43 = *(_OWORD *)v44;
      v43[2] = v44[2];
      v41((char *)v43 + *(int *)(v45 + 28), (char *)v44 + *(int *)(v45 + 28), v40);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v48 = v6[8];
    v49 = (char *)v34 + v48;
    v50 = (char *)v35 + v48;
    v51 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v52 = *(_QWORD *)(v51 - 8);
    a1 = v176;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
    {
      v53 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      v54 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v49, v50, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
    }
    v55 = v6[9];
    v56 = (char *)v34 + v55;
    v57 = (char *)v35 + v55;
    v58 = type metadata accessor for UUID(0);
    v59 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32);
    v59(v56, v57, v58);
    v60 = type metadata accessor for BeaconIdentifier(0);
    v59(&v56[*(int *)(v60 + 20)], &v57[*(int *)(v60 + 20)], v58);
    v175((char *)v34 + v6[10], (char *)v35 + v6[10], v40);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v34, 0, 1, v6);
    a3 = v177;
    v7 = v178;
  }
  v61 = a3[6];
  v62 = (_WORD *)((char *)a1 + v61);
  v63 = (_WORD *)((char *)a2 + v61);
  if (v7((char *)a2 + v61, 1, v6))
  {
    v64 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    v174 = a2;
    *(_QWORD *)v62 = *(_QWORD *)v63;
    v62[4] = v63[4];
    v65 = v6[6];
    v66 = (char *)v62 + v65;
    v67 = (char *)v63 + v65;
    v68 = type metadata accessor for Date(0);
    v69 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
    v69(v66, v67, v68);
    v70 = v6[7];
    v71 = (_QWORD *)((char *)v62 + v70);
    v72 = (_QWORD *)((char *)v63 + v70);
    v73 = type metadata accessor for DeviceEvent.Location(0);
    v74 = *(_QWORD *)(v73 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73))
    {
      v75 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v71, v72, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v71 = *(_OWORD *)v72;
      v71[2] = v72[2];
      v69((char *)v71 + *(int *)(v73 + 28), (char *)v72 + *(int *)(v73 + 28), v68);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v73);
    }
    v76 = v6[8];
    v77 = (char *)v62 + v76;
    v78 = (char *)v63 + v76;
    v79 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v80 = *(_QWORD *)(v79 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      v81 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
    }
    else
    {
      v82 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v82 - 8) + 32))(v77, v78, v82);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
    }
    v83 = v6[9];
    v84 = (char *)v62 + v83;
    v85 = (char *)v63 + v83;
    v86 = type metadata accessor for UUID(0);
    v87 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v86 - 8) + 32);
    v87(v84, v85, v86);
    v88 = type metadata accessor for BeaconIdentifier(0);
    v87(&v84[*(int *)(v88 + 20)], &v85[*(int *)(v88 + 20)], v86);
    v69((char *)v62 + v6[10], (char *)v63 + v6[10], v68);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v62, 0, 1, v6);
    a3 = v177;
    v7 = v178;
    a2 = v174;
  }
  v89 = a3[7];
  v90 = (_WORD *)((char *)a1 + v89);
  v91 = (_WORD *)((char *)a2 + v89);
  if (v7((char *)a2 + v89, 1, v6))
  {
    v92 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v90, v91, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v90 = *(_QWORD *)v91;
    v90[4] = v91[4];
    v93 = v6[6];
    v94 = (char *)v90 + v93;
    v95 = (char *)v91 + v93;
    v96 = type metadata accessor for Date(0);
    v97 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v96 - 8) + 32);
    v97(v94, v95, v96);
    v98 = v6[7];
    v99 = (_QWORD *)((char *)v90 + v98);
    v100 = (_QWORD *)((char *)v91 + v98);
    v101 = type metadata accessor for DeviceEvent.Location(0);
    v102 = *(_QWORD *)(v101 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101))
    {
      v103 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v99 = *(_OWORD *)v100;
      v99[2] = v100[2];
      v97((char *)v99 + *(int *)(v101 + 28), (char *)v100 + *(int *)(v101 + 28), v96);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v102 + 56))(v99, 0, 1, v101);
    }
    v104 = v6[8];
    v105 = (char *)v90 + v104;
    v106 = (char *)v91 + v104;
    v107 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v108 = *(_QWORD *)(v107 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v106, 1, v107))
    {
      v109 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v105, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    }
    else
    {
      v110 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 32))(v105, v106, v110);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v105, 0, 1, v107);
    }
    v111 = v6[9];
    v112 = (char *)v90 + v111;
    v113 = (char *)v91 + v111;
    v114 = type metadata accessor for UUID(0);
    v115 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v114 - 8) + 32);
    v115(v112, v113, v114);
    v116 = type metadata accessor for BeaconIdentifier(0);
    v115(&v112[*(int *)(v116 + 20)], &v113[*(int *)(v116 + 20)], v114);
    v97((char *)v90 + v6[10], (char *)v91 + v6[10], v96);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v90, 0, 1, v6);
    a3 = v177;
    v7 = v178;
    a1 = v176;
  }
  v117 = a3[8];
  v118 = (_WORD *)((char *)a1 + v117);
  v119 = (_WORD *)((char *)a2 + v117);
  if (v7((char *)a2 + v117, 1, v6))
  {
    v120 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v118, v119, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v118 = *(_QWORD *)v119;
    v118[4] = v119[4];
    v121 = v6[6];
    v122 = (char *)v118 + v121;
    v123 = (char *)v119 + v121;
    v124 = type metadata accessor for Date(0);
    v125 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v124 - 8) + 32);
    v125(v122, v123, v124);
    v126 = v6[7];
    v127 = (_QWORD *)((char *)v118 + v126);
    v128 = (_QWORD *)((char *)v119 + v126);
    v129 = type metadata accessor for DeviceEvent.Location(0);
    v130 = *(_QWORD *)(v129 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v130 + 48))(v128, 1, v129))
    {
      v131 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v127, v128, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v127[2] = v128[2];
      v125((char *)v127 + *(int *)(v129 + 28), (char *)v128 + *(int *)(v129 + 28), v124);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
    }
    v132 = v6[8];
    v133 = (char *)v118 + v132;
    v134 = (char *)v119 + v132;
    v135 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v136 = *(_QWORD *)(v135 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v136 + 48))(v134, 1, v135))
    {
      v137 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v133, v134, *(_QWORD *)(*(_QWORD *)(v137 - 8) + 64));
    }
    else
    {
      v138 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v138 - 8) + 32))(v133, v134, v138);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v136 + 56))(v133, 0, 1, v135);
    }
    v139 = v6[9];
    v140 = (char *)v118 + v139;
    v141 = (char *)v119 + v139;
    v142 = type metadata accessor for UUID(0);
    v143 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 32);
    v143(v140, v141, v142);
    v144 = type metadata accessor for BeaconIdentifier(0);
    v143(&v140[*(int *)(v144 + 20)], &v141[*(int *)(v144 + 20)], v142);
    v125((char *)v118 + v6[10], (char *)v119 + v6[10], v124);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v118, 0, 1, v6);
    a3 = v177;
    v7 = v178;
    a1 = v176;
  }
  v145 = a3[9];
  v146 = (_WORD *)((char *)a1 + v145);
  v147 = (_WORD *)((char *)a2 + v145);
  if (v7(v147, 1, v6))
  {
    v148 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v146 = *(_QWORD *)v147;
    v146[4] = v147[4];
    v149 = v6[6];
    v150 = (char *)v146 + v149;
    v151 = (char *)v147 + v149;
    v152 = type metadata accessor for Date(0);
    v153 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v152 - 8) + 32);
    v153(v150, v151, v152);
    v154 = v6[7];
    v155 = (_QWORD *)((char *)v146 + v154);
    v156 = (_QWORD *)((char *)v147 + v154);
    v157 = type metadata accessor for DeviceEvent.Location(0);
    v158 = *(_QWORD *)(v157 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
    {
      v159 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v155 = *(_OWORD *)v156;
      v155[2] = v156[2];
      v153((char *)v155 + *(int *)(v157 + 28), (char *)v156 + *(int *)(v157 + 28), v152);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
    }
    v160 = v6[8];
    v161 = (char *)v146 + v160;
    v162 = (char *)v147 + v160;
    v163 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v164 = *(_QWORD *)(v163 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v162, 1, v163))
    {
      v165 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v161, v162, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    }
    else
    {
      v166 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v166 - 8) + 32))(v161, v162, v166);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v164 + 56))(v161, 0, 1, v163);
    }
    v167 = v6[9];
    v168 = (char *)v146 + v167;
    v169 = (char *)v147 + v167;
    v170 = type metadata accessor for UUID(0);
    v171 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v170 - 8) + 32);
    v171(v168, v169, v170);
    v172 = type metadata accessor for BeaconIdentifier(0);
    v171(&v168[*(int *)(v172 + 20)], &v169[*(int *)(v172 + 20)], v170);
    v153((char *)v146 + v6[10], (char *)v147 + v6[10], v152);
    (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v179 + 56))(v146, 0, 1, v6);
  }
  return a1;
}

_WORD *sub_1005604A0(_WORD *a1, _WORD *a2, int *a3)
{
  int *v6;
  uint64_t (*v7)(_WORD *, uint64_t, int *);
  int v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  _WORD *v67;
  _WORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  int v93;
  int v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  void (*v106)(char *, char *, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  _WORD *v126;
  _WORD *v127;
  int v128;
  int v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  void (*v134)(char *, char *, uint64_t);
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(char *, uint64_t, uint64_t);
  int v152;
  int v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  char *v163;
  uint64_t v164;
  void (*v165)(char *, char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(char *, uint64_t, uint64_t);
  int v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  uint64_t v184;
  _WORD *v185;
  _WORD *v186;
  int v187;
  int v188;
  uint64_t v189;
  char *v190;
  char *v191;
  uint64_t v192;
  void (*v193)(char *, char *, uint64_t);
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t (*v210)(char *, uint64_t, uint64_t);
  int v211;
  int v212;
  uint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  void (*v224)(char *, char *, uint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t (*v232)(char *, uint64_t, uint64_t);
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  void (*v241)(char *, char *, uint64_t);
  uint64_t v242;
  uint64_t v243;
  _WORD *v244;
  _WORD *v245;
  int v246;
  int v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  void (*v252)(char *, char *, uint64_t);
  uint64_t v253;
  _QWORD *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t (*v269)(char *, uint64_t, uint64_t);
  int v270;
  int v271;
  uint64_t v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  void (*v283)(char *, char *, uint64_t);
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t (*v291)(char *, uint64_t, uint64_t);
  int v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  uint64_t v299;
  void (*v300)(char *, char *, uint64_t);
  uint64_t v301;
  uint64_t v302;
  _WORD *v303;
  _WORD *v304;
  int v305;
  int v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  void (*v311)(char *, char *, uint64_t);
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t (*v329)(char *, uint64_t, uint64_t);
  int v330;
  int v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  uint64_t v342;
  void (*v343)(char *, char *, uint64_t);
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t (*v351)(char *, uint64_t, uint64_t);
  int v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  void (*v360)(char *, char *, uint64_t);
  uint64_t v361;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  void (*v373)(char *, char *);
  void (*v374)(char *, char *);
  void (*v375)(char *, char *);
  void (*v376)(char *, char *);
  void (*v377)(char *, char *, uint64_t);
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _WORD *v383;
  int *v384;
  void (*v385)(char *, char *);
  _WORD *v386;
  uint64_t v387;

  v6 = (int *)type metadata accessor for DeviceEvent(0);
  v382 = *((_QWORD *)v6 - 1);
  v7 = *(uint64_t (**)(_WORD *, uint64_t, int *))(v382 + 48);
  v8 = v7(a1, 1, v6);
  v9 = v7(a2, 1, v6);
  v383 = a1;
  v384 = a3;
  v386 = a2;
  if (v8)
  {
    if (!v9)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[4] = a2[4];
      v10 = v6[6];
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for Date(0);
      v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
      v14(v11, v12, v13);
      v15 = v6[7];
      v16 = (_QWORD *)((char *)a1 + v15);
      v17 = (_QWORD *)((char *)a2 + v15);
      v18 = type metadata accessor for DeviceEvent.Location(0);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        v20 = sub_10001A9A8(&qword_1011003F0);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v16 = *(_OWORD *)v17;
        v16[2] = v17[2];
        v14((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v13);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      v36 = v6[8];
      v37 = (char *)a1 + v36;
      v38 = (char *)a2 + v36;
      v39 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      v40 = *(_QWORD *)(v39 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
      {
        v41 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      else
      {
        v42 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 32))(v37, v38, v42);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
      }
      v43 = v6[9];
      v44 = (char *)a1 + v43;
      v45 = (char *)a2 + v43;
      v46 = type metadata accessor for UUID(0);
      v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 32);
      v47(v44, v45, v46);
      v48 = type metadata accessor for BeaconIdentifier(0);
      v47(&v44[*(int *)(v48 + 20)], &v45[*(int *)(v48 + 20)], v46);
      v14((char *)a1 + v6[10], (char *)a2 + v6[10], v13);
      (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v382 + 56))(a1, 0, 1, v6);
      goto LABEL_26;
    }
LABEL_7:
    v21 = sub_10001A9A8(&qword_1010EF488);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_27;
  }
  if (v9)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for DeviceEvent);
    goto LABEL_7;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  a1[4] = a2[4];
  v22 = v6[6];
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = type metadata accessor for Date(0);
  v26 = a2;
  v27 = *(_QWORD *)(v25 - 8);
  v377 = *(void (**)(char *, char *, uint64_t))(v27 + 40);
  v377(v23, v24, v25);
  v28 = v6[7];
  v29 = (char *)a1 + v28;
  v30 = (char *)v26 + v28;
  v31 = type metadata accessor for DeviceEvent.Location(0);
  v32 = *(_QWORD *)(v31 - 8);
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  v34 = v33(v29, 1, v31);
  v35 = v33(v30, 1, v31);
  if (v34)
  {
    if (!v35)
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
      *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(&v29[*(int *)(v31 + 28)], &v30[*(int *)(v31 + 28)], v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v35)
  {
    sub_1000126B0((uint64_t)v29, type metadata accessor for DeviceEvent.Location);
LABEL_18:
    v49 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_19;
  }
  *(_OWORD *)v29 = *(_OWORD *)v30;
  *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
  v377(&v29[*(int *)(v31 + 28)], &v30[*(int *)(v31 + 28)], v25);
LABEL_19:
  a1 = v383;
  v50 = v6[8];
  v51 = (char *)v383 + v50;
  v52 = (char *)v386 + v50;
  v53 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
  v56 = v55(v51, 1, v53);
  v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      v363 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v363 - 8) + 40))(v51, v52, v363);
      goto LABEL_25;
    }
    sub_1000126B0((uint64_t)v51, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_24;
  }
  if (v57)
  {
LABEL_24:
    v59 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_25;
  }
  v58 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 32))(v51, v52, v58);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_25:
  a2 = v386;
  v60 = v6[9];
  v61 = (char *)v383 + v60;
  v62 = (char *)v386 + v60;
  v63 = type metadata accessor for UUID(0);
  v64 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 40);
  v64(v61, v62, v63);
  v65 = type metadata accessor for BeaconIdentifier(0);
  v64(&v61[*(int *)(v65 + 20)], &v62[*(int *)(v65 + 20)], v63);
  v377((char *)v383 + v6[10], (char *)v386 + v6[10], v25);
LABEL_26:
  a3 = v384;
LABEL_27:
  v66 = a3[5];
  v67 = (_WORD *)((char *)a1 + v66);
  v68 = (_WORD *)((char *)a2 + v66);
  v69 = v7((_WORD *)((char *)a1 + v66), 1, v6);
  v70 = v7(v68, 1, v6);
  if (!v69)
  {
    if (v70)
    {
      sub_1000126B0((uint64_t)v67, type metadata accessor for DeviceEvent);
      goto LABEL_33;
    }
    *(_QWORD *)v67 = *(_QWORD *)v68;
    v67[4] = v68[4];
    v83 = v6[6];
    v84 = (char *)v67 + v83;
    v85 = (char *)v68 + v83;
    v86 = type metadata accessor for Date(0);
    v369 = *(_QWORD *)(v86 - 8);
    v373 = *(void (**)(char *, char *))(v369 + 40);
    v378 = v86;
    v373(v84, v85);
    v87 = v6[7];
    v88 = (char *)v67 + v87;
    v89 = (char *)v68 + v87;
    v90 = type metadata accessor for DeviceEvent.Location(0);
    v91 = *(_QWORD *)(v90 - 8);
    v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48);
    v93 = v92(v88, 1, v90);
    v94 = v92(v89, 1, v90);
    if (v93)
    {
      if (!v94)
      {
        *(_OWORD *)v88 = *(_OWORD *)v89;
        *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
        (*(void (**)(char *, char *, uint64_t))(v369 + 32))(&v88[*(int *)(v90 + 28)], &v89[*(int *)(v90 + 28)], v378);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
        goto LABEL_45;
      }
    }
    else
    {
      if (!v94)
      {
        *(_OWORD *)v88 = *(_OWORD *)v89;
        *((_QWORD *)v88 + 2) = *((_QWORD *)v89 + 2);
        ((void (*)(char *, char *, uint64_t))v373)(&v88[*(int *)(v90 + 28)], &v89[*(int *)(v90 + 28)], v378);
LABEL_45:
        v109 = v6[8];
        v110 = (char *)v67 + v109;
        v111 = (char *)v68 + v109;
        v112 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v113 = *(_QWORD *)(v112 - 8);
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v113 + 48);
        v115 = v114(v110, 1, v112);
        v116 = v114(v111, 1, v112);
        if (v115)
        {
          a2 = v386;
          if (!v116)
          {
            v117 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v117 - 8) + 32))(v110, v111, v117);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
LABEL_51:
            a1 = v383;
            v119 = v6[9];
            v120 = (char *)v67 + v119;
            v121 = (char *)v68 + v119;
            v122 = type metadata accessor for UUID(0);
            v123 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v122 - 8) + 40);
            v123(v120, v121, v122);
            v124 = type metadata accessor for BeaconIdentifier(0);
            v123(&v120[*(int *)(v124 + 20)], &v121[*(int *)(v124 + 20)], v122);
            ((void (*)(char *, char *, uint64_t))v373)((char *)v67 + v6[10], (char *)v68 + v6[10], v378);
            a3 = v384;
            goto LABEL_52;
          }
        }
        else
        {
          a2 = v386;
          if (!v116)
          {
            v364 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v364 - 8) + 40))(v110, v111, v364);
            goto LABEL_51;
          }
          sub_1000126B0((uint64_t)v110, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v118 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
        goto LABEL_51;
      }
      sub_1000126B0((uint64_t)v88, type metadata accessor for DeviceEvent.Location);
    }
    v108 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
    goto LABEL_45;
  }
  if (v70)
  {
LABEL_33:
    v82 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    goto LABEL_52;
  }
  *(_QWORD *)v67 = *(_QWORD *)v68;
  v67[4] = v68[4];
  v71 = v6[6];
  v72 = (char *)v67 + v71;
  v73 = (char *)v68 + v71;
  v74 = type metadata accessor for Date(0);
  v75 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v74 - 8) + 32);
  v75(v72, v73, v74);
  v76 = v6[7];
  v77 = (_QWORD *)((char *)v67 + v76);
  v78 = (_QWORD *)((char *)v68 + v76);
  v79 = type metadata accessor for DeviceEvent.Location(0);
  v80 = *(_QWORD *)(v79 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
  {
    v81 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v77 = *(_OWORD *)v78;
    v77[2] = v78[2];
    v75((char *)v77 + *(int *)(v79 + 28), (char *)v78 + *(int *)(v79 + 28), v74);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
  }
  v95 = v6[8];
  v96 = (char *)v67 + v95;
  v97 = (char *)v68 + v95;
  v98 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v99 = *(_QWORD *)(v98 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
  {
    v100 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v96, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
  }
  else
  {
    v101 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v101 - 8) + 32))(v96, v97, v101);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
  }
  v102 = v6[9];
  v103 = (char *)v67 + v102;
  v104 = (char *)v68 + v102;
  v105 = type metadata accessor for UUID(0);
  v106 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v105 - 8) + 32);
  v106(v103, v104, v105);
  v107 = type metadata accessor for BeaconIdentifier(0);
  v106(&v103[*(int *)(v107 + 20)], &v104[*(int *)(v107 + 20)], v105);
  v75((char *)v67 + v6[10], (char *)v68 + v6[10], v74);
  (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v382 + 56))(v67, 0, 1, v6);
  a1 = v383;
  a3 = v384;
  a2 = v386;
LABEL_52:
  v125 = a3[6];
  v126 = (_WORD *)((char *)a1 + v125);
  v127 = (_WORD *)((char *)a2 + v125);
  v128 = v7((_WORD *)((char *)a1 + v125), 1, v6);
  v129 = v7(v127, 1, v6);
  if (!v128)
  {
    if (v129)
    {
      sub_1000126B0((uint64_t)v126, type metadata accessor for DeviceEvent);
      goto LABEL_58;
    }
    *(_QWORD *)v126 = *(_QWORD *)v127;
    v126[4] = v127[4];
    v142 = v6[6];
    v143 = (char *)v126 + v142;
    v144 = (char *)v127 + v142;
    v145 = type metadata accessor for Date(0);
    v370 = *(_QWORD *)(v145 - 8);
    v374 = *(void (**)(char *, char *))(v370 + 40);
    v379 = v145;
    v374(v143, v144);
    v146 = v6[7];
    v147 = (char *)v126 + v146;
    v148 = (char *)v127 + v146;
    v149 = type metadata accessor for DeviceEvent.Location(0);
    v150 = *(_QWORD *)(v149 - 8);
    v151 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v150 + 48);
    v152 = v151(v147, 1, v149);
    v153 = v151(v148, 1, v149);
    if (v152)
    {
      if (!v153)
      {
        *(_OWORD *)v147 = *(_OWORD *)v148;
        *((_QWORD *)v147 + 2) = *((_QWORD *)v148 + 2);
        (*(void (**)(char *, char *, uint64_t))(v370 + 32))(&v147[*(int *)(v149 + 28)], &v148[*(int *)(v149 + 28)], v379);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
        goto LABEL_70;
      }
    }
    else
    {
      if (!v153)
      {
        *(_OWORD *)v147 = *(_OWORD *)v148;
        *((_QWORD *)v147 + 2) = *((_QWORD *)v148 + 2);
        ((void (*)(char *, char *, uint64_t))v374)(&v147[*(int *)(v149 + 28)], &v148[*(int *)(v149 + 28)], v379);
LABEL_70:
        v168 = v6[8];
        v169 = (char *)v126 + v168;
        v170 = (char *)v127 + v168;
        v171 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v172 = *(_QWORD *)(v171 - 8);
        v173 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 48);
        v174 = v173(v169, 1, v171);
        v175 = v173(v170, 1, v171);
        if (v174)
        {
          a2 = v386;
          if (!v175)
          {
            v176 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 32))(v169, v170, v176);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v172 + 56))(v169, 0, 1, v171);
LABEL_76:
            a1 = v383;
            v178 = v6[9];
            v179 = (char *)v126 + v178;
            v180 = (char *)v127 + v178;
            v181 = type metadata accessor for UUID(0);
            v182 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v181 - 8) + 40);
            v182(v179, v180, v181);
            v183 = type metadata accessor for BeaconIdentifier(0);
            v182(&v179[*(int *)(v183 + 20)], &v180[*(int *)(v183 + 20)], v181);
            ((void (*)(char *, char *, uint64_t))v374)((char *)v126 + v6[10], (char *)v127 + v6[10], v379);
            a3 = v384;
            goto LABEL_77;
          }
        }
        else
        {
          a2 = v386;
          if (!v175)
          {
            v365 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v365 - 8) + 40))(v169, v170, v365);
            goto LABEL_76;
          }
          sub_1000126B0((uint64_t)v169, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v177 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v169, v170, *(_QWORD *)(*(_QWORD *)(v177 - 8) + 64));
        goto LABEL_76;
      }
      sub_1000126B0((uint64_t)v147, type metadata accessor for DeviceEvent.Location);
    }
    v167 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
    goto LABEL_70;
  }
  if (v129)
  {
LABEL_58:
    v141 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v126, v127, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
    goto LABEL_77;
  }
  *(_QWORD *)v126 = *(_QWORD *)v127;
  v126[4] = v127[4];
  v130 = v6[6];
  v131 = (char *)v126 + v130;
  v132 = (char *)v127 + v130;
  v133 = type metadata accessor for Date(0);
  v134 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 32);
  v134(v131, v132, v133);
  v135 = v6[7];
  v136 = (_QWORD *)((char *)v126 + v135);
  v137 = (_QWORD *)((char *)v127 + v135);
  v138 = type metadata accessor for DeviceEvent.Location(0);
  v139 = *(_QWORD *)(v138 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v139 + 48))(v137, 1, v138))
  {
    v140 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v140 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v136 = *(_OWORD *)v137;
    v136[2] = v137[2];
    v134((char *)v136 + *(int *)(v138 + 28), (char *)v137 + *(int *)(v138 + 28), v133);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
  }
  v154 = v6[8];
  v155 = (char *)v126 + v154;
  v156 = (char *)v127 + v154;
  v157 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v158 = *(_QWORD *)(v157 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v158 + 48))(v156, 1, v157))
  {
    v159 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
  }
  else
  {
    v160 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v160 - 8) + 32))(v155, v156, v160);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v158 + 56))(v155, 0, 1, v157);
  }
  v161 = v6[9];
  v162 = (char *)v126 + v161;
  v163 = (char *)v127 + v161;
  v164 = type metadata accessor for UUID(0);
  v165 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v164 - 8) + 32);
  v165(v162, v163, v164);
  v166 = type metadata accessor for BeaconIdentifier(0);
  v165(&v162[*(int *)(v166 + 20)], &v163[*(int *)(v166 + 20)], v164);
  v134((char *)v126 + v6[10], (char *)v127 + v6[10], v133);
  (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v382 + 56))(v126, 0, 1, v6);
  a1 = v383;
  a3 = v384;
  a2 = v386;
LABEL_77:
  v184 = a3[7];
  v185 = (_WORD *)((char *)a1 + v184);
  v186 = (_WORD *)((char *)a2 + v184);
  v187 = v7((_WORD *)((char *)a1 + v184), 1, v6);
  v188 = v7(v186, 1, v6);
  if (!v187)
  {
    if (v188)
    {
      sub_1000126B0((uint64_t)v185, type metadata accessor for DeviceEvent);
      goto LABEL_83;
    }
    *(_QWORD *)v185 = *(_QWORD *)v186;
    v185[4] = v186[4];
    v201 = v6[6];
    v202 = (char *)v185 + v201;
    v203 = (char *)v186 + v201;
    v204 = type metadata accessor for Date(0);
    v371 = *(_QWORD *)(v204 - 8);
    v375 = *(void (**)(char *, char *))(v371 + 40);
    v380 = v204;
    v375(v202, v203);
    v205 = v6[7];
    v206 = (char *)v185 + v205;
    v207 = (char *)v186 + v205;
    v208 = type metadata accessor for DeviceEvent.Location(0);
    v209 = *(_QWORD *)(v208 - 8);
    v210 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 48);
    v211 = v210(v206, 1, v208);
    v212 = v210(v207, 1, v208);
    if (v211)
    {
      if (!v212)
      {
        *(_OWORD *)v206 = *(_OWORD *)v207;
        *((_QWORD *)v206 + 2) = *((_QWORD *)v207 + 2);
        (*(void (**)(char *, char *, uint64_t))(v371 + 32))(&v206[*(int *)(v208 + 28)], &v207[*(int *)(v208 + 28)], v380);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v209 + 56))(v206, 0, 1, v208);
        goto LABEL_95;
      }
    }
    else
    {
      if (!v212)
      {
        *(_OWORD *)v206 = *(_OWORD *)v207;
        *((_QWORD *)v206 + 2) = *((_QWORD *)v207 + 2);
        ((void (*)(char *, char *, uint64_t))v375)(&v206[*(int *)(v208 + 28)], &v207[*(int *)(v208 + 28)], v380);
LABEL_95:
        v227 = v6[8];
        v228 = (char *)v185 + v227;
        v229 = (char *)v186 + v227;
        v230 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v231 = *(_QWORD *)(v230 - 8);
        v232 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v231 + 48);
        v233 = v232(v228, 1, v230);
        v234 = v232(v229, 1, v230);
        if (v233)
        {
          a2 = v386;
          if (!v234)
          {
            v235 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v235 - 8) + 32))(v228, v229, v235);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v231 + 56))(v228, 0, 1, v230);
LABEL_101:
            a1 = v383;
            v237 = v6[9];
            v238 = (char *)v185 + v237;
            v239 = (char *)v186 + v237;
            v240 = type metadata accessor for UUID(0);
            v241 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v240 - 8) + 40);
            v241(v238, v239, v240);
            v242 = type metadata accessor for BeaconIdentifier(0);
            v241(&v238[*(int *)(v242 + 20)], &v239[*(int *)(v242 + 20)], v240);
            ((void (*)(char *, char *, uint64_t))v375)((char *)v185 + v6[10], (char *)v186 + v6[10], v380);
            a3 = v384;
            goto LABEL_102;
          }
        }
        else
        {
          a2 = v386;
          if (!v234)
          {
            v366 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v366 - 8) + 40))(v228, v229, v366);
            goto LABEL_101;
          }
          sub_1000126B0((uint64_t)v228, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v236 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v228, v229, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
        goto LABEL_101;
      }
      sub_1000126B0((uint64_t)v206, type metadata accessor for DeviceEvent.Location);
    }
    v226 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v206, v207, *(_QWORD *)(*(_QWORD *)(v226 - 8) + 64));
    goto LABEL_95;
  }
  if (v188)
  {
LABEL_83:
    v200 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v200 - 8) + 64));
    goto LABEL_102;
  }
  *(_QWORD *)v185 = *(_QWORD *)v186;
  v185[4] = v186[4];
  v189 = v6[6];
  v190 = (char *)v185 + v189;
  v191 = (char *)v186 + v189;
  v192 = type metadata accessor for Date(0);
  v193 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v192 - 8) + 32);
  v193(v190, v191, v192);
  v194 = v6[7];
  v195 = (_QWORD *)((char *)v185 + v194);
  v196 = (_QWORD *)((char *)v186 + v194);
  v197 = type metadata accessor for DeviceEvent.Location(0);
  v198 = *(_QWORD *)(v197 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v198 + 48))(v196, 1, v197))
  {
    v199 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v195 = *(_OWORD *)v196;
    v195[2] = v196[2];
    v193((char *)v195 + *(int *)(v197 + 28), (char *)v196 + *(int *)(v197 + 28), v192);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v198 + 56))(v195, 0, 1, v197);
  }
  v213 = v6[8];
  v214 = (char *)v185 + v213;
  v215 = (char *)v186 + v213;
  v216 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v217 = *(_QWORD *)(v216 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v217 + 48))(v215, 1, v216))
  {
    v218 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v218 - 8) + 64));
  }
  else
  {
    v219 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v219 - 8) + 32))(v214, v215, v219);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v217 + 56))(v214, 0, 1, v216);
  }
  v220 = v6[9];
  v221 = (char *)v185 + v220;
  v222 = (char *)v186 + v220;
  v223 = type metadata accessor for UUID(0);
  v224 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v223 - 8) + 32);
  v224(v221, v222, v223);
  v225 = type metadata accessor for BeaconIdentifier(0);
  v224(&v221[*(int *)(v225 + 20)], &v222[*(int *)(v225 + 20)], v223);
  v193((char *)v185 + v6[10], (char *)v186 + v6[10], v192);
  (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v382 + 56))(v185, 0, 1, v6);
  a1 = v383;
  a3 = v384;
  a2 = v386;
LABEL_102:
  v243 = a3[8];
  v244 = (_WORD *)((char *)a1 + v243);
  v245 = (_WORD *)((char *)a2 + v243);
  v246 = v7((_WORD *)((char *)a1 + v243), 1, v6);
  v247 = v7(v245, 1, v6);
  if (!v246)
  {
    if (v247)
    {
      sub_1000126B0((uint64_t)v244, type metadata accessor for DeviceEvent);
      goto LABEL_108;
    }
    *(_QWORD *)v244 = *(_QWORD *)v245;
    v244[4] = v245[4];
    v260 = v6[6];
    v261 = (char *)v244 + v260;
    v262 = (char *)v245 + v260;
    v263 = type metadata accessor for Date(0);
    v372 = *(_QWORD *)(v263 - 8);
    v376 = *(void (**)(char *, char *))(v372 + 40);
    v381 = v263;
    v376(v261, v262);
    v264 = v6[7];
    v265 = (char *)v244 + v264;
    v266 = (char *)v245 + v264;
    v267 = type metadata accessor for DeviceEvent.Location(0);
    v268 = *(_QWORD *)(v267 - 8);
    v269 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v268 + 48);
    v270 = v269(v265, 1, v267);
    v271 = v269(v266, 1, v267);
    if (v270)
    {
      if (!v271)
      {
        *(_OWORD *)v265 = *(_OWORD *)v266;
        *((_QWORD *)v265 + 2) = *((_QWORD *)v266 + 2);
        (*(void (**)(char *, char *, uint64_t))(v372 + 32))(&v265[*(int *)(v267 + 28)], &v266[*(int *)(v267 + 28)], v381);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v268 + 56))(v265, 0, 1, v267);
        goto LABEL_120;
      }
    }
    else
    {
      if (!v271)
      {
        *(_OWORD *)v265 = *(_OWORD *)v266;
        *((_QWORD *)v265 + 2) = *((_QWORD *)v266 + 2);
        ((void (*)(char *, char *, uint64_t))v376)(&v265[*(int *)(v267 + 28)], &v266[*(int *)(v267 + 28)], v381);
LABEL_120:
        v286 = v6[8];
        v287 = (char *)v244 + v286;
        v288 = (char *)v245 + v286;
        v289 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v290 = *(_QWORD *)(v289 - 8);
        v291 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v290 + 48);
        v292 = v291(v287, 1, v289);
        v293 = v291(v288, 1, v289);
        if (v292)
        {
          if (!v293)
          {
            v294 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v294 - 8) + 32))(v287, v288, v294);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v290 + 56))(v287, 0, 1, v289);
LABEL_126:
            a1 = v383;
            v296 = v6[9];
            v297 = (char *)v244 + v296;
            v298 = (char *)v245 + v296;
            v299 = type metadata accessor for UUID(0);
            v300 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v299 - 8) + 40);
            v300(v297, v298, v299);
            v301 = type metadata accessor for BeaconIdentifier(0);
            v300(&v297[*(int *)(v301 + 20)], &v298[*(int *)(v301 + 20)], v299);
            ((void (*)(char *, char *, uint64_t))v376)((char *)v244 + v6[10], (char *)v245 + v6[10], v381);
            a3 = v384;
            goto LABEL_127;
          }
        }
        else
        {
          if (!v293)
          {
            v367 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v367 - 8) + 40))(v287, v288, v367);
            goto LABEL_126;
          }
          sub_1000126B0((uint64_t)v287, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v295 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v287, v288, *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64));
        goto LABEL_126;
      }
      sub_1000126B0((uint64_t)v265, type metadata accessor for DeviceEvent.Location);
    }
    v285 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v265, v266, *(_QWORD *)(*(_QWORD *)(v285 - 8) + 64));
    goto LABEL_120;
  }
  if (v247)
  {
LABEL_108:
    v259 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v244, v245, *(_QWORD *)(*(_QWORD *)(v259 - 8) + 64));
    goto LABEL_127;
  }
  *(_QWORD *)v244 = *(_QWORD *)v245;
  v244[4] = v245[4];
  v248 = v6[6];
  v249 = (char *)v244 + v248;
  v250 = (char *)v245 + v248;
  v251 = type metadata accessor for Date(0);
  v252 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v251 - 8) + 32);
  v252(v249, v250, v251);
  v253 = v6[7];
  v254 = (_QWORD *)((char *)v244 + v253);
  v255 = (_QWORD *)((char *)v245 + v253);
  v256 = type metadata accessor for DeviceEvent.Location(0);
  v257 = *(_QWORD *)(v256 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v257 + 48))(v255, 1, v256))
  {
    v258 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v254, v255, *(_QWORD *)(*(_QWORD *)(v258 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v254 = *(_OWORD *)v255;
    v254[2] = v255[2];
    v252((char *)v254 + *(int *)(v256 + 28), (char *)v255 + *(int *)(v256 + 28), v251);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v257 + 56))(v254, 0, 1, v256);
  }
  v272 = v6[8];
  v273 = (char *)v244 + v272;
  v274 = (char *)v245 + v272;
  v275 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v276 = *(_QWORD *)(v275 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v276 + 48))(v274, 1, v275))
  {
    v277 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v273, v274, *(_QWORD *)(*(_QWORD *)(v277 - 8) + 64));
  }
  else
  {
    v278 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v278 - 8) + 32))(v273, v274, v278);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v276 + 56))(v273, 0, 1, v275);
  }
  v279 = v6[9];
  v280 = (char *)v244 + v279;
  v281 = (char *)v245 + v279;
  v282 = type metadata accessor for UUID(0);
  v283 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v282 - 8) + 32);
  v283(v280, v281, v282);
  v284 = type metadata accessor for BeaconIdentifier(0);
  v283(&v280[*(int *)(v284 + 20)], &v281[*(int *)(v284 + 20)], v282);
  v252((char *)v244 + v6[10], (char *)v245 + v6[10], v251);
  (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v382 + 56))(v244, 0, 1, v6);
  a1 = v383;
  a3 = v384;
LABEL_127:
  v302 = a3[9];
  v303 = (_WORD *)((char *)a1 + v302);
  v304 = (_WORD *)((char *)v386 + v302);
  v305 = v7((_WORD *)((char *)a1 + v302), 1, v6);
  v306 = v7(v304, 1, v6);
  if (!v305)
  {
    if (v306)
    {
      sub_1000126B0((uint64_t)v303, type metadata accessor for DeviceEvent);
      goto LABEL_133;
    }
    *(_QWORD *)v303 = *(_QWORD *)v304;
    v303[4] = v304[4];
    v319 = v6[6];
    v320 = (char *)v303 + v319;
    v321 = (char *)v304 + v319;
    v322 = type metadata accessor for Date(0);
    v323 = *(_QWORD *)(v322 - 8);
    v385 = *(void (**)(char *, char *))(v323 + 40);
    v387 = v322;
    v385(v320, v321);
    v324 = v6[7];
    v325 = (char *)v303 + v324;
    v326 = (char *)v304 + v324;
    v327 = type metadata accessor for DeviceEvent.Location(0);
    v328 = *(_QWORD *)(v327 - 8);
    v329 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v328 + 48);
    v330 = v329(v325, 1, v327);
    v331 = v329(v326, 1, v327);
    if (v330)
    {
      if (!v331)
      {
        *(_OWORD *)v325 = *(_OWORD *)v326;
        *((_QWORD *)v325 + 2) = *((_QWORD *)v326 + 2);
        (*(void (**)(char *, char *, uint64_t))(v323 + 32))(&v325[*(int *)(v327 + 28)], &v326[*(int *)(v327 + 28)], v387);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v328 + 56))(v325, 0, 1, v327);
        goto LABEL_145;
      }
    }
    else
    {
      if (!v331)
      {
        *(_OWORD *)v325 = *(_OWORD *)v326;
        *((_QWORD *)v325 + 2) = *((_QWORD *)v326 + 2);
        ((void (*)(char *, char *, uint64_t))v385)(&v325[*(int *)(v327 + 28)], &v326[*(int *)(v327 + 28)], v387);
LABEL_145:
        a1 = v383;
        v346 = v6[8];
        v347 = (char *)v303 + v346;
        v348 = (char *)v304 + v346;
        v349 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        v350 = *(_QWORD *)(v349 - 8);
        v351 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v350 + 48);
        v352 = v351(v347, 1, v349);
        v353 = v351(v348, 1, v349);
        if (v352)
        {
          if (!v353)
          {
            v354 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v354 - 8) + 32))(v347, v348, v354);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v350 + 56))(v347, 0, 1, v349);
LABEL_151:
            v356 = v6[9];
            v357 = (char *)v303 + v356;
            v358 = (char *)v304 + v356;
            v359 = type metadata accessor for UUID(0);
            v360 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v359 - 8) + 40);
            v360(v357, v358, v359);
            v361 = type metadata accessor for BeaconIdentifier(0);
            v360(&v357[*(int *)(v361 + 20)], &v358[*(int *)(v361 + 20)], v359);
            ((void (*)(char *, char *, uint64_t))v385)((char *)v303 + v6[10], (char *)v304 + v6[10], v387);
            return a1;
          }
        }
        else
        {
          if (!v353)
          {
            v368 = type metadata accessor for UUID(0);
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v368 - 8) + 40))(v347, v348, v368);
            goto LABEL_151;
          }
          sub_1000126B0((uint64_t)v347, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        v355 = sub_10001A9A8(&qword_1010EF480);
        memcpy(v347, v348, *(_QWORD *)(*(_QWORD *)(v355 - 8) + 64));
        goto LABEL_151;
      }
      sub_1000126B0((uint64_t)v325, type metadata accessor for DeviceEvent.Location);
    }
    v345 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v325, v326, *(_QWORD *)(*(_QWORD *)(v345 - 8) + 64));
    goto LABEL_145;
  }
  if (v306)
  {
LABEL_133:
    v318 = sub_10001A9A8(&qword_1010EF488);
    memcpy(v303, v304, *(_QWORD *)(*(_QWORD *)(v318 - 8) + 64));
    return a1;
  }
  *(_QWORD *)v303 = *(_QWORD *)v304;
  v303[4] = v304[4];
  v307 = v6[6];
  v308 = (char *)v303 + v307;
  v309 = (char *)v304 + v307;
  v310 = type metadata accessor for Date(0);
  v311 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v310 - 8) + 32);
  v311(v308, v309, v310);
  v312 = v6[7];
  v313 = (_QWORD *)((char *)v303 + v312);
  v314 = (_QWORD *)((char *)v304 + v312);
  v315 = type metadata accessor for DeviceEvent.Location(0);
  v316 = *(_QWORD *)(v315 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v316 + 48))(v314, 1, v315))
  {
    v317 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v313, v314, *(_QWORD *)(*(_QWORD *)(v317 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v313 = *(_OWORD *)v314;
    v313[2] = v314[2];
    v311((char *)v313 + *(int *)(v315 + 28), (char *)v314 + *(int *)(v315 + 28), v310);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v316 + 56))(v313, 0, 1, v315);
  }
  v332 = v6[8];
  v333 = (char *)v303 + v332;
  v334 = (char *)v304 + v332;
  v335 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v336 = *(_QWORD *)(v335 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v336 + 48))(v334, 1, v335))
  {
    v337 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v333, v334, *(_QWORD *)(*(_QWORD *)(v337 - 8) + 64));
  }
  else
  {
    v338 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v338 - 8) + 32))(v333, v334, v338);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v336 + 56))(v333, 0, 1, v335);
  }
  v339 = v6[9];
  v340 = (char *)v303 + v339;
  v341 = (char *)v304 + v339;
  v342 = type metadata accessor for UUID(0);
  v343 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v342 - 8) + 32);
  v343(v340, v341, v342);
  v344 = type metadata accessor for BeaconIdentifier(0);
  v343(&v340[*(int *)(v344 + 20)], &v341[*(int *)(v344 + 20)], v342);
  v311((char *)v303 + v6[10], (char *)v304 + v6[10], v310);
  (*(void (**)(_WORD *, _QWORD, uint64_t, int *))(v382 + 56))(v303, 0, 1, v6);
  return a1;
}

uint64_t sub_100562220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10056222C);
}

uint64_t sub_10056222C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EF488);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_10056226C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100562278);
}

uint64_t sub_100562278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EF488);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AttachedAccessoryEventsTransport(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FF1B0;
  if (!qword_1010FF1B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttachedAccessoryEventsTransport);
  return result;
}

void sub_1005622F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_100562368(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = v4[0];
    v4[3] = v4[0];
    v4[4] = v4[0];
    v4[5] = v4[0];
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

void sub_100562368(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1010FF1C0)
  {
    v2 = type metadata accessor for DeviceEvent(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1010FF1C0);
  }
}

ValueMetadata *type metadata accessor for ObservationServiceClientTrampoline()
{
  return &type metadata for ObservationServiceClientTrampoline;
}

uint64_t sub_1005623CC()
{
  unsigned __int8 *v0;

  return sub_100559AD4(*v0);
}

uint64_t sub_1005623D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100562658(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005623F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100562470();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100562420(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100562470();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100562448@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100559D94(a1, a2);
}

uint64_t sub_10056245C(_QWORD *a1)
{
  return sub_100559B60(a1);
}

unint64_t sub_100562470()
{
  unint64_t result;

  result = qword_1010FF208;
  if (!qword_1010FF208)
  {
    result = swift_getWitnessTable(asc_100E43644, &type metadata for AttachedAccessoryEventsTransport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FF208);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AttachedAccessoryEventsTransport.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100562500 + 4 * byte_100E434BB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100562534 + 4 * byte_100E434B6[v4]))();
}

uint64_t sub_100562534(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10056253C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100562544);
  return result;
}

uint64_t sub_100562550(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100562558);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10056255C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100562564(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachedAccessoryEventsTransport.CodingKeys()
{
  return &type metadata for AttachedAccessoryEventsTransport.CodingKeys;
}

unint64_t sub_100562584()
{
  unint64_t result;

  result = qword_1010FF218;
  if (!qword_1010FF218)
  {
    result = swift_getWitnessTable(aU_20, &type metadata for AttachedAccessoryEventsTransport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FF218);
  }
  return result;
}

unint64_t sub_1005625CC()
{
  unint64_t result;

  result = qword_1010FF220;
  if (!qword_1010FF220)
  {
    result = swift_getWitnessTable(byte_100E4358C, &type metadata for AttachedAccessoryEventsTransport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FF220);
  }
  return result;
}

unint64_t sub_100562614()
{
  unint64_t result;

  result = qword_1010FF228;
  if (!qword_1010FF228)
  {
    result = swift_getWitnessTable(byte_100E435B4, &type metadata for AttachedAccessoryEventsTransport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FF228);
  }
  return result;
}

uint64_t sub_100562658(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x8000000100EDAD50;
    if (a2 == 0x8000000100EDAD50)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EDAD50, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v6 = 0x8000000100EDAD70;
    if (a2 == 0x8000000100EDAD70)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EDAD70, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x8000000100EDAD90)
  {
    v7 = 0x8000000100EDAD90;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100EDAD90, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_16;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100EDADB0)
  {
    v8 = 0x8000000100EDADB0;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100EDADB0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100EDADD0)
  {
    v9 = 0x8000000100EDADD0;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EDADD0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x8000000100EDADF0)
  {
    swift_bridgeObjectRelease(0x8000000100EDADF0);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x8000000100EDADF0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100562940@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v48 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v3);
  v50 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v5);
  v46 = (uint64_t)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WildModeAssociationRecord(0);
  v47 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v42 - v12;
  __chkstk_darwin(v11);
  v45 = (uint64_t)v42 - v14;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v15);
  v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for MACAddress(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = objc_msgSend(a1, "address");
  v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);

  MACAddress.init(data:type:)(v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010F9890);
    v24 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v48, 1, 1, v24);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    v26 = sub_10081BF2C();
    v27 = v26[2];
    v43 = v19;
    v44 = v18;
    if (v27)
    {
      v28 = *(unsigned __int8 *)(v47 + 80);
      v42[1] = v26;
      v29 = (uint64_t)v26 + ((v28 + 32) & ~v28);
      v30 = *(_QWORD *)(v47 + 72);
      v49 = v30;
      v31 = (uint64_t)v50;
      do
      {
        sub_10005972C(v29, (uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
        v32 = static MACAddress.== infix(_:_:)(&v13[*(int *)(v7 + 28)], v21);
        sub_10005972C((uint64_t)v13, (uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
        if ((v32 & 1) != 0)
        {
          sub_10000F9B8((uint64_t)&v10[*(int *)(v7 + 44)], v31, (uint64_t *)&unk_1010EA690);
          sub_1000126B0((uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
          v33 = type metadata accessor for Date(0);
          v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v31, 1, v33);
          v30 = v49;
          sub_100004048(v31, (uint64_t *)&unk_1010EA690);
          if (v34 != 1)
          {
            v35 = v46;
            sub_1000126EC((uint64_t)v13, v46, type metadata accessor for WildModeAssociationRecord);
            v36 = 0;
            v37 = v48;
            goto LABEL_12;
          }
        }
        else
        {
          sub_1000126B0((uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
        }
        sub_1000126B0((uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
        v29 += v30;
        --v27;
      }
      while (v27);
      v36 = 1;
      v37 = v48;
      v35 = v46;
    }
    else
    {
      v36 = 1;
      v37 = v48;
      v35 = v46;
    }
LABEL_12:
    v38 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v35, v36, 1, v7);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v21, v44);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v35, 1, v7) == 1)
    {
      sub_100004048(v35, &qword_101102FB0);
      v39 = type metadata accessor for Date(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 1, 1, v39);
    }
    else
    {
      v40 = v35;
      v41 = v45;
      sub_1000126EC(v40, v45, type metadata accessor for WildModeAssociationRecord);
      sub_10000F9B8(v41 + *(int *)(v7 + 44), v37, (uint64_t *)&unk_1010EA690);
      return sub_1000126B0(v41, type metadata accessor for WildModeAssociationRecord);
    }
  }
}

Swift::Int sub_100562DB0(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int result;
  _QWORD v8[2];

  v4 = *(_QWORD *)(type metadata accessor for WildModeTrackingLocation(0) - 8);
  v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v5 = a2(v5);
  v6 = *(_QWORD *)(v5 + 16);
  v8[0] = v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  result = sub_100573FBC(v8);
  *a1 = v5;
  return result;
}

uint64_t sub_100562E3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v58 = a1;
  v1 = type metadata accessor for Calendar.SearchDirection(0);
  v56 = *(_QWORD *)(v1 - 8);
  v57 = v1;
  __chkstk_darwin(v1);
  v55 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Calendar.RepeatedTimePolicy(0);
  v49 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v48 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for Calendar.MatchingPolicy(0);
  v44 = *(_QWORD *)(v59 - 8);
  v4 = v44;
  __chkstk_darwin(v59);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FF5A8);
  __chkstk_darwin(v7);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FF5B0);
  __chkstk_darwin(v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DateComponents(0);
  v52 = *(_QWORD *)(v13 - 8);
  v53 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v16 - 8);
  v51 = v16;
  __chkstk_darwin(v16);
  v45 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Calendar(0);
  v19 = *(_QWORD *)(v18 - 8);
  v46 = v18;
  v47 = v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = static Calendar.current.getter(v20);
  Date.init()(v23);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v12, 1, 1, v18);
  v24 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v9, 1, 1, v24);
  v43 = 1;
  v42 = 1;
  v41 = 1;
  v40 = 1;
  v39 = 1;
  v38 = 1;
  v37 = 1;
  v36 = 1;
  v35 = 1;
  v34 = 0;
  v33 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v12, v9, 0, 1, 0, 1, 0, 1, 0, v33, 4, v34, 0, v35, 0, v36, 0, v37, 0,
    v38,
    0,
    v39,
    0,
    v40,
    0,
    v41,
    0,
    v42,
    0,
    v43);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Calendar.MatchingPolicy.nextTime(_:), v59);
  v25 = v48;
  v26 = v49;
  v27 = v54;
  (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v48, enum case for Calendar.RepeatedTimePolicy.first(_:), v54);
  v29 = v55;
  v28 = v56;
  v30 = v57;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for Calendar.SearchDirection.forward(_:), v57);
  v31 = v45;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v45, v15, v6, v25, v29);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v27);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v59);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v15, v53);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v22, v46);
}

uint64_t sub_100563220()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7148);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7148);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100EDB410);
}

uint64_t sub_1005632A4(char a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  Swift::String v9;
  uint64_t v11;

  if (a1 == 6)
  {
    _StringGuts.grow(_:)(16);
    v4 = sub_10058A148();
    v5 = CustomStringConvertible.typeDescription.getter(&type metadata for UnauthorizedTrackingAdvertisementType, v4);
    swift_bridgeObjectRelease();
    v11 = v5;
    v2 = 0x7070416E6F6E2E20;
    v3 = 0xEE0068736F50656CLL;
  }
  else if (a1 == 5)
  {
    v6 = sub_10058A148();
    v11 = CustomStringConvertible.typeDescription.getter(&type metadata for UnauthorizedTrackingAdvertisementType, v6);
    v2 = 0x50656C7070612E20;
    v3 = 0xEB0000000068736FLL;
  }
  else
  {
    if (a1 != 4)
    {
      _StringGuts.grow(_:)(27);
      v8 = sub_10058A148();
      CustomStringConvertible.typeDescription.getter(&type metadata for UnauthorizedTrackingAdvertisementType, v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x8000000100EDB230;
      v9._countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v9);
      __asm { BR              X10 }
    }
    v1 = sub_10058A148();
    v11 = CustomStringConvertible.typeDescription.getter(&type metadata for UnauthorizedTrackingAdvertisementType, v1);
    v2 = 0x776F6E6B6E752E20;
    v3 = 0xE90000000000006ELL;
  }
  String.append(_:)(*(Swift::String *)&v2);
  return v11;
}

uint64_t sub_1005634D8()
{
  char *v0;

  return sub_1005632A4(*v0);
}

uint64_t sub_1005634E0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;

  v12 = a1;
  type metadata accessor for TrackingAvoidanceError(0);
  v3 = v2;
  v4 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  _BridgedStoredNSError.code.getter(&v13, v3, v4);
  result = 2;
  switch(v13)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_2;
    case 5:
      result = 1;
      break;
    case 7:
      return result;
    case 8:
      result = 4;
      break;
    case 11:
      result = 3;
      break;
    default:
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v6 = type metadata accessor for Logger(0);
      sub_10001A9E8(v6, (uint64_t)qword_1011B7148);
      v7 = a1;
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter(v8);
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v10 = 134217984;
        v12 = v7;
        _BridgedStoredNSError.code.getter(&v11, v3, v4);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v10 + 4, v10 + 12);

        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unexpected TrackingAvoidanceError %ld!", v10, 0xCu);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

      }
LABEL_2:
      result = 0;
      break;
  }
  return result;
}

uint64_t SPUnauthorizedTrackingObservationType.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[5];

  if (!a1)
    return 0x746C75616665642ELL;
  if (a1 == 1)
    return 0x4D6E4F706565622ELL;
  v8[1] = v2;
  v8[2] = v1;
  v8[3] = v3;
  v8[4] = v4;
  type metadata accessor for TrackingObservationType(0);
  v8[0] = a1;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v7, v8, v7, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_10056374C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t result;
  uint64_t v3;

  if (!*v1)
    return 0x746C75616665642ELL;
  if (*v1 == 1)
    return 0x4D6E4F706565622ELL;
  v3 = *v1;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(a1, &v3, a1, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t SPUnauthorizedTrackingObservationAction.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x6465676174732ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x796669746F6E2ELL;
      break;
    case 2:
      result = 0x6574616470752ELL;
      break;
    case 3:
      result = 0x65676174736E752ELL;
      break;
    case 4:
      result = 0x617264687469772ELL;
      break;
    default:
      result = 0x6E776F6E6B6E752ELL;
      break;
  }
  return result;
}

uint64_t sub_10056387C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x6465676174732ELL;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 0x796669746F6E2ELL;
      break;
    case 2:
      result = 0x6574616470752ELL;
      break;
    case 3:
      result = 0x65676174736E752ELL;
      break;
    case 4:
      result = 0x617264687469772ELL;
      break;
    default:
      result = 0x6E776F6E6B6E752ELL;
      break;
  }
  return result;
}

uint64_t sub_100563934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010FF230);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010FF230);
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7148);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

_QWORD *sub_1005639C4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;

  v3 = v2;
  v22 = a2;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000041, 0x8000000100EDAE50, v10, v7, v14, 0);
  v3[2] = a1;
  v3[3] = v19;
  v20 = v22;
  v3[4] = &_swiftEmptySetSingleton;
  v3[5] = v20;
  return v3;
}

void sub_100563BB4(void *a1, uint64_t a2, void (*a3)(uint64_t, void *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  id v17;
  Class v18;
  Class v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  Class v28;
  Class v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  Class isa;
  Class v38;
  id v39;
  uint64_t v40;
  uint64_t inited;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  char v47[40];
  char v48[40];
  void *v49;
  uint64_t v50;
  char v51[40];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v47[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a2
    && (v50 = a2,
        swift_errorRetain(a2),
        v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0),
        type metadata accessor for TrackingAvoidanceError(0),
        (swift_dynamicCast(&v49, &v50, v10, v11, 6) & 1) != 0))
  {
    v12 = v49;
    v13 = sub_1005634E0(v49);
    if ((v14 & 1) != 0)
    {
      v35 = objc_msgSend(a1, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

      v36 = objc_allocWithZone((Class)SPTrackingAvoidanceResult);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      sub_10000F4A0(0, &qword_1010FF5A0, SPTrackingAvoidancePolicy_ptr);
      v38 = Array._bridgeToObjectiveC()().super.isa;
      v39 = objc_msgSend(v36, "initWithIdentifier:type:policies:", isa, 5, v38);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v40 = sub_10001A9A8(&qword_10111BE20);
      inited = swift_initStackObject(v40, v48);
      *(_OWORD *)(inited + 16) = xmmword_100E22D10;
      *(_QWORD *)(inited + 32) = v39;
      v50 = inited;
      specialized Array._endMutation()(inited);
      v42 = v50;
      v43 = v39;
      v44 = sub_100CA8BB4(v42);
      swift_bridgeObjectRelease();
      v45 = v12;
      a3(v44, v12);

      swift_bridgeObjectRelease();
      return;
    }
    v15 = v13;
    v16 = objc_msgSend(a1, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

    v17 = objc_allocWithZone((Class)SPTrackingAvoidanceResult);
    v18 = UUID._bridgeToObjectiveC()().super.isa;
    sub_10000F4A0(0, &qword_1010FF5A0, SPTrackingAvoidancePolicy_ptr);
    v19 = Array._bridgeToObjectiveC()().super.isa;
    v20 = objc_msgSend(v17, "initWithIdentifier:type:policies:", v18, v15, v19);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v21 = sub_10001A9A8(&qword_10111BE20);
    v22 = swift_initStackObject(v21, v47);
    *(_OWORD *)(v22 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v22 + 32) = v20;
    v50 = v22;
    specialized Array._endMutation()(v22);
    v23 = v50;
    v24 = v20;
    v25 = sub_100CA8BB4(v23);
    swift_bridgeObjectRelease();
    a3(v25, 0);

  }
  else
  {
    v26 = objc_msgSend(a1, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v27 = objc_allocWithZone((Class)SPTrackingAvoidanceResult);
    v28 = UUID._bridgeToObjectiveC()().super.isa;
    sub_10000F4A0(0, &qword_1010FF5A0, SPTrackingAvoidancePolicy_ptr);
    v29 = Array._bridgeToObjectiveC()().super.isa;
    v30 = objc_msgSend(v27, "initWithIdentifier:type:policies:", v28, 0, v29);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v31 = sub_10001A9A8(&qword_10111BE20);
    v32 = swift_initStackObject(v31, v51);
    *(_OWORD *)(v32 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v32 + 32) = v30;
    v50 = v32;
    specialized Array._endMutation()(v32);
    v33 = v50;
    v24 = v30;
    v34 = sub_100CA8BB4(v33);
    swift_bridgeObjectRelease();
    a3(v34, (void *)a2);
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_100563FD4@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  id v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  SEL *v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  id v71;
  id v72;
  id v73;
  void *v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t inited;
  uint64_t v82;
  unint64_t v83;
  const char *v84;
  char v85;
  uint64_t v86;
  id v87;
  id v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  _DWORD *v98;
  uint64_t v99;
  SEL *v100;
  uint64_t v101;
  id v102;
  unsigned int v103;
  id v104;
  NSString v105;
  unsigned int v106;
  uint64_t v107;
  double v108;
  double v109;
  double v110;
  double v111;
  void *v112;
  id v113;
  void *v114;
  void *v115;
  id v116;
  unsigned __int8 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  id v124;
  id v125;
  unsigned int v126;
  id v127;
  unsigned int v128;
  id v129;
  unsigned int v130;
  uint64_t v131;
  char v132;
  char v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  NSObject *v144;
  NSObject *v145;
  os_log_type_t v146;
  uint64_t v147;
  id v148;
  unsigned int v149;
  id v150;
  unsigned __int8 v151;
  id v152;
  unsigned __int8 v153;
  id v154;
  id v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  uint8_t *v164;
  uint64_t v165;
  unint64_t v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  char *v177;
  uint8_t *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  void (*v182)(char *, uint64_t);
  uint64_t v183;
  os_log_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  void (*v198)(char *, uint64_t);
  int *v199;
  uint64_t v200;
  _QWORD *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  id v224;
  char *v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  char *v241;
  char *v242;
  os_log_t v243;
  void (*v244)(char *, uint64_t);
  __int128 v245;
  _QWORD *v246;
  id v247;
  uint64_t v248;
  uint64_t v249;
  char v250[80];
  uint64_t v251;
  uint64_t v252[4];

  v246 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v4);
  v229 = (char *)&v221 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SharedBeaconRecord(0);
  v236 = *(_QWORD *)(v6 - 8);
  v237 = v6;
  v7 = __chkstk_darwin(v6);
  v226 = (char *)&v221 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v227 = (char *)&v221 - v10;
  __chkstk_darwin(v9);
  v228 = (char *)&v221 - v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v12);
  v230 = (char *)&v221 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v14);
  v233 = (char *)&v221 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v232 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v231 = (char *)&v221 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v18 = __chkstk_darwin(v17);
  v243 = (os_log_t)((char *)&v221 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __chkstk_darwin(v18);
  v225 = (char *)&v221 - v21;
  __chkstk_darwin(v20);
  v241 = (char *)&v221 - v22;
  v23 = type metadata accessor for MACAddress(0);
  v239 = *(_QWORD *)(v23 - 8);
  v240 = v23;
  v24 = __chkstk_darwin(v23);
  v242 = (char *)&v221 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v238 = (char *)&v221 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v27);
  v29 = (char *)&v221 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for Date(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v221 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  v36 = (char *)&v221 - v35;
  v247 = a1;
  v37 = objc_msgSend(a1, "trackingIdentifier");
  v235 = v2;
  sub_100562940(v37, (uint64_t)v29);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_100004048((uint64_t)v29, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v36, v29, v30);
    static Date.trustedNow.getter((uint64_t)v34);
    v38 = static Date.> infix(_:_:)(v36, v34);
    v39 = *(void (**)(char *, uint64_t))(v31 + 8);
    v39(v34, v30);
    if ((v38 & 1) != 0)
    {
      v244 = v39;
      v40 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v41 = swift_allocObject(v40, 72, 7);
      v245 = xmmword_100E22B00;
      *(_OWORD *)(v41 + 16) = xmmword_100E22B00;
      v42 = objc_msgSend(v247, "trackingIdentifier");
      v43 = objc_msgSend(v42, "advertisementData");

      v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v46 = v45;

      v47 = Data.hexString.getter(v44, v46);
      v49 = v48;
      sub_10001BC14(v44, v46);
      *(_QWORD *)(v41 + 56) = &type metadata for String;
      v50 = sub_10001AA00();
      *(_QWORD *)(v41 + 64) = v50;
      *(_QWORD *)(v41 + 32) = v47;
      *(_QWORD *)(v41 + 40) = v49;
      v51 = String.init(format:_:)(0xD00000000000003CLL, 0x8000000100EDB1F0, v41);
      v53 = v52;
      v54 = static os_log_type_t.default.getter(v51);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      v55 = qword_1011B7DD8;
      v56 = swift_allocObject(v40, 72, 7);
      *(_OWORD *)(v56 + 16) = v245;
      *(_QWORD *)(v56 + 56) = &type metadata for String;
      *(_QWORD *)(v56 + 64) = v50;
      *(_QWORD *)(v56 + 32) = v51;
      *(_QWORD *)(v56 + 40) = v53;
      *(_QWORD *)&v57 = swift_bridgeObjectRetain(v53).n128_u64[0];
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v55, "%@", 2, 2, v56, v57);
      swift_bridgeObjectRelease();
      type metadata accessor for TrackingAvoidanceError(0);
      v59 = v58;
      v251 = 7;
      v60 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      v61 = swift_allocObject(v60, 80, 7);
      *(_OWORD *)(v61 + 16) = v245;
      *(_QWORD *)(v61 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(v61 + 40) = v62;
      *(_QWORD *)(v61 + 72) = &type metadata for String;
      *(_QWORD *)(v61 + 48) = v51;
      *(_QWORD *)(v61 + 56) = v53;
      v63 = sub_1006B8B10(v61);
      v64 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
      _BridgedStoredNSError.init(_:userInfo:)(v252, &v251, v63, v59, v64);
      v244(v36, v30);
      goto LABEL_93;
    }
    v39(v36, v30);
  }
  v65 = (SEL *)&selRef_setDateFormat_;
  v66 = objc_msgSend(v247, "observedLocations");
  v67 = (void *)sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
  v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v66, v67);

  if ((unint64_t)v68 >> 62)
    goto LABEL_86;
  v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v69)
  {
LABEL_90:
    v209 = swift_bridgeObjectRelease();
    v210 = static os_log_type_t.error.getter(v209);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v210, &_mh_execute_header, qword_1011B7DD8, "There is no location", 20, 2, _swiftEmptyArrayStorage);
    type metadata accessor for TrackingAvoidanceError(0);
    v212 = v211;
    v251 = 4;
    v213 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v214 = swift_allocObject(v213, 80, 7);
    *(_OWORD *)(v214 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v214 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v214 + 40) = v215;
    *(_QWORD *)(v214 + 72) = &type metadata for String;
    *(_QWORD *)(v214 + 48) = 0xD000000000000027;
    *(_QWORD *)(v214 + 56) = 0x8000000100EDB1C0;
    v216 = sub_1006B8B10(v214);
    v217 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v252, &v251, v216, v212, v217);
LABEL_93:
    v218 = v246;
    *v246 = v252[0];
    v205 = sub_10001A9A8(&qword_1010FF538);
    v206 = v218;
    v207 = 1;
    return swift_storeEnumTagMultiPayload(v206, v205, v207);
  }
  while (1)
  {
    v70 = v69 - 1;
    if (__OFSUB__(v69, 1))
    {
      __break(1u);
LABEL_96:
      v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v70, v68);
      goto LABEL_15;
    }
    if ((v68 & 0xC000000000000001) != 0)
      goto LABEL_96;
    if ((v70 & 0x8000000000000000) != 0)
      break;
    if (v70 >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_104;
    }
    v71 = *(id *)(v68 + 8 * v70 + 32);
LABEL_15:
    v224 = v71;
    swift_bridgeObjectRelease();
    v72 = objc_msgSend(v247, v65[48]);
    v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v72, v67);

    if ((unint64_t)v68 >> 62)
      goto LABEL_98;
    v69 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v68);
    if (!v69)
      goto LABEL_25;
LABEL_17:
    *(_QWORD *)&v245 = v68 & 0xC000000000000001;
    if ((v68 & 0xC000000000000001) == 0)
    {
      v73 = *(id *)(v68 + 32);
      goto LABEL_19;
    }
LABEL_104:
    v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v68);
LABEL_19:
    v74 = v73;
    v75 = sub_100B8C778();

    if ((v75 & 1) != 0)
    {
LABEL_20:
      v76 = swift_bridgeObjectRelease_n(v68, 2);
LABEL_21:
      v77 = static os_log_type_t.error.getter(v76);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, qword_1011B7DD8, "received locations within blocked regions", 41, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v79 = v78;
      v251 = 11;
      v80 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      inited = swift_allocObject(v80, 80, 7);
      *(_OWORD *)(inited + 16) = xmmword_100E22B00;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v82;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v83 = 0xD00000000000001CLL;
      v84 = "Locations in blocked regions";
      goto LABEL_56;
    }
    if (v69 == 1)
      goto LABEL_25;
    v244 = (void (*)(char *, uint64_t))objc_opt_self(FMSystemInfo);
    v99 = 5;
    v222 = 0x8000000100EDB150;
    v223 = 0xD000000000000013;
    v67 = &unk_1010F4000;
    while (1)
    {
      v100 = (_QWORD)v245
           ? (SEL *)specialized _ArrayBuffer._getElementSlowPath(_:)(v99 - 4, v68)
           : (SEL *)*(id *)(v68 + 8 * v99);
      v65 = v100;
      v101 = v99 - 3;
      if (__OFADD__(v99 - 4, 1))
        break;
      v102 = objc_msgSend(v244, "sharedInstance");
      v103 = objc_msgSend(v102, "isInternalBuild");

      if (v103)
      {
        v104 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v105 = String._bridgeToObjectiveC()();
        v106 = objc_msgSend(v104, "BOOLForKey:", v105);

        if (v106)
        {
          v186 = static os_log_type_t.default.getter(v107);
          v187 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
          v188 = (void *)static OS_os_log.default.getter(v187);
          os_log(_:dso:log:_:_:)(v186, &_mh_execute_header, v188, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);
          swift_bridgeObjectRelease_n(v68, 2);

          goto LABEL_21;
        }
      }
      -[SEL latitude](v65, "latitude");
      v109 = v108;
      -[SEL longitude](v65, "longitude");
      v111 = v110;
      if (qword_1010E9AD8 != -1)
        swift_once(&qword_1010E9AD8, sub_100264FD8);
      if (objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v109, v111))
      {
        v112 = (void *)qword_1010F46B0;
        if (qword_1010F46B0)
        {
          v113 = (id)qword_1010F46B0;
        }
        else
        {
          v114 = (void *)sub_100265274();
          v115 = (void *)qword_1010F46B0;
          qword_1010F46B0 = (uint64_t)v114;
          v113 = v114;

          v112 = 0;
        }
        v116 = v112;
        v117 = objc_msgSend(v113, "containsCoordinate:", v109, v111);

        if ((v117 & 1) != 0)
          goto LABEL_20;
      }
      else
      {

      }
      ++v99;
      if (v101 == v69)
        goto LABEL_25;
    }
    __break(1u);
LABEL_86:
    if (v68 < 0)
      v208 = v68;
    else
      v208 = v68 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v68);
    v69 = _CocoaArrayWrapper.endIndex.getter(v208);
    swift_bridgeObjectRelease();
    if (!v69)
      goto LABEL_90;
  }
  __break(1u);
LABEL_98:
  if (v68 < 0)
    v220 = v68;
  else
    v220 = v68 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v68);
  v69 = _CocoaArrayWrapper.endIndex.getter(v220);
  if (v69)
    goto LABEL_17;
LABEL_25:
  swift_bridgeObjectRelease_n(v68, 2);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v85 = sub_100C1B408(v252[0]);
  swift_bridgeObjectRelease();
  if ((v85 & 1) == 0)
  {
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    v252[0] = 0x7365547265646E75;
    v252[1] = 0xE900000000000074;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v251, v252, sub_10001F628, 0, &type metadata for Bool);
    v86 = swift_bridgeObjectRelease();
    if (v251 != 1)
    {
      v118 = static os_log_type_t.error.getter(v86);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v118, &_mh_execute_header, qword_1011B7DD8, "UT notifications are disabled. Not triggering any UT.", 53, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v79 = v119;
      v251 = 5;
      v120 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      inited = swift_initStackObject(v120, v250);
      *(_OWORD *)(inited + 16) = xmmword_100E22B00;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v121;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v83 = 0xD000000000000029;
      v84 = "UT notifications are disabled by settings";
LABEL_56:
      *(_QWORD *)(inited + 48) = v83;
      *(_QWORD *)(inited + 56) = (unint64_t)(v84 - 32) | 0x8000000000000000;
      v122 = sub_1006B8B10(inited);
      v123 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
      _BridgedStoredNSError.init(_:userInfo:)(v252, &v251, v122, v79, v123);
LABEL_82:

      goto LABEL_93;
    }
  }
  v87 = objc_msgSend(v247, "trackingIdentifier");
  v88 = objc_msgSend(v87, "data");

  v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v88);
  v91 = v90;

  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  v92 = type metadata accessor for Logger(0);
  v93 = sub_10001A9E8(v92, (uint64_t)qword_1010FF230);
  sub_10001BBBC(v89, v91);
  v94 = sub_10001BBBC(v89, v91);
  *(_QWORD *)&v245 = v93;
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.default.getter(v95);
  v97 = os_log_type_enabled(v95, v96);
  v222 = 0;
  v223 = v91 >> 62;
  if (v97)
  {
    v98 = (_DWORD *)swift_slowAlloc(22, -1);
    v252[0] = swift_slowAlloc(32, -1);
    *v98 = 134218242;
    __asm { BR              X11 }
  }
  sub_10001BC14(v89, v91);
  sub_10001BC14(v89, v91);

  v124 = v247;
  v125 = objc_msgSend(v247, "trackingIdentifier");
  v126 = objc_msgSend(v125, "isPosh");

  v127 = objc_msgSend(v124, "trackingIdentifier");
  v128 = objc_msgSend(v127, "networkID");

  v129 = objc_msgSend(v124, "trackingIdentifier");
  v130 = objc_msgSend(v129, "status");

  if (v128 == 1)
    v132 = 5;
  else
    v132 = 6;
  if (v126)
    v133 = v132;
  else
    v133 = (v130 >> 4) & 3;
  v134 = Logger.logObject.getter(v131);
  v135 = static os_log_type_t.default.getter(v134);
  if (os_log_type_enabled(v134, v135))
  {
    v136 = (uint8_t *)swift_slowAlloc(12, -1);
    v137 = swift_slowAlloc(32, -1);
    v244 = (void (*)(char *, uint64_t))v91;
    v138 = v137;
    v252[0] = v137;
    *(_DWORD *)v136 = 136446210;
    v139 = sub_1005632A4(v133);
    v251 = sub_100016940(v139, v140, v252);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v136 + 4, v136 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v134, v135, "UnauthorizedTrackingAdvertisementType: %{public}s", v136, 0xCu);
    swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
    v141 = v138;
    v91 = (unint64_t)v244;
    swift_slowDealloc(v141, -1, -1);
    swift_slowDealloc(v136, -1, -1);
  }

  v142 = v242;
  v143 = (uint64_t)v241;
  if (v133 == 4)
  {
    v144 = v247;
    v145 = Logger.logObject.getter(v144);
    v146 = static os_log_type_t.error.getter(v145);
    if (os_log_type_enabled(v145, v146))
    {
      v147 = swift_slowAlloc(14, -1);
      *(_DWORD *)v147 = 67109632;
      v148 = -[NSObject trackingIdentifier](v144, "trackingIdentifier");
      v149 = objc_msgSend(v148, "isPosh");

      LODWORD(v252[0]) = v149;
      v244 = (void (*)(char *, uint64_t))v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v252, (char *)v252 + 4, v147 + 4, v147 + 8);

      *(_WORD *)(v147 + 8) = 256;
      v150 = -[NSObject trackingIdentifier](v144, "trackingIdentifier");
      v151 = objc_msgSend(v150, "networkID");

      LOBYTE(v252[0]) = v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v252, (char *)v252 + 1, v147 + 10, v147 + 11);

      *(_WORD *)(v147 + 11) = 256;
      v152 = -[NSObject trackingIdentifier](v144, "trackingIdentifier");
      v153 = objc_msgSend(v152, "status");

      LOBYTE(v252[0]) = v153;
      v91 = (unint64_t)v244;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v252, (char *)v252 + 1, v147 + 13, v147 + 14);

      _os_log_impl((void *)&_mh_execute_header, v145, v146, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v147, 0xEu);
      swift_slowDealloc(v147, -1, -1);
    }
    else
    {

      v145 = v144;
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v169 = v168;
    v251 = 6;
    v170 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v171 = swift_initStackObject(v170, &v249);
    *(_OWORD *)(v171 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v171 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v171 + 40) = v172;
    *(_QWORD *)(v171 + 72) = &type metadata for String;
    *(_QWORD *)(v171 + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(v171 + 56) = 0x8000000100EDB020;
    v196 = sub_1006B8B10(v171);
    v197 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v252, &v251, v196, v169, v197);
    sub_10001BC14(v89, v91);
    goto LABEL_82;
  }
  if (v133 != 6)
  {
    if (v133 == 5)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  v154 = objc_msgSend(v247, "trackingIdentifier");
  v155 = objc_msgSend(v154, "address");

  v156 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v155);
  v158 = v157;

  sub_10001BBBC(v156, v158);
  MACAddress.init(data:type:)(v156);
  v160 = v239;
  v159 = v240;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v239 + 48))(v143, 1, v240) == 1)
  {
    sub_100004048(v143, (uint64_t *)&unk_1010F9890);
    sub_10001BBBC(v156, v158);
    v161 = sub_10001BBBC(v156, v158);
    v162 = Logger.logObject.getter(v161);
    v163 = static os_log_type_t.error.getter(v162);
    if (os_log_type_enabled(v162, v163))
    {
      v244 = (void (*)(char *, uint64_t))v91;
      v164 = (uint8_t *)swift_slowAlloc(12, -1);
      v247 = (id)swift_slowAlloc(32, -1);
      v252[0] = (uint64_t)v247;
      *(_DWORD *)v164 = 136446210;
      v165 = Data.hexString.getter(v156, v158);
      v251 = sub_100016940(v165, v166, v252);
      v91 = (unint64_t)v244;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v164 + 4, v164 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v156, v158);
      sub_10001BC14(v156, v158);
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "Invalid MAC address %{public}s", v164, 0xCu);
      v167 = v247;
      swift_arrayDestroy(v247, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v167, -1, -1);
      swift_slowDealloc(v164, -1, -1);
    }
    else
    {
      sub_10001BC14(v156, v158);
      sub_10001BC14(v156, v158);
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v190 = v189;
    v251 = 3;
    v191 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v192 = swift_initStackObject(v191, &v248);
    *(_OWORD *)(v192 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v192 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v192 + 40) = v193;
    *(_QWORD *)(v192 + 72) = &type metadata for String;
    *(_QWORD *)(v192 + 48) = 0xD00000000000001FLL;
    *(_QWORD *)(v192 + 56) = 0x8000000100EDB040;
    v194 = sub_1006B8B10(v192);
    v195 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v252, &v251, v194, v190, v195);
    sub_10001BC14(v89, v91);

    sub_10001BC14(v156, v158);
    goto LABEL_93;
  }
  v173 = v238;
  v247 = *(id *)(v160 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v247)(v238, v143, v159);
  v174 = (*(uint64_t (**)(char *, char *, uint64_t))(v160 + 16))(v142, v173, v159);
  v175 = Logger.logObject.getter(v174);
  v176 = static os_log_type_t.default.getter(v175);
  if (os_log_type_enabled(v175, v176))
  {
    v243 = v175;
    v177 = v142;
    v178 = (uint8_t *)swift_slowAlloc(12, -1);
    v242 = (char *)swift_slowAlloc(32, -1);
    v252[0] = (uint64_t)v242;
    v244 = (void (*)(char *, uint64_t))v91;
    *(_QWORD *)&v245 = v89;
    *(_DWORD *)v178 = 136446210;
    v241 = (char *)(v178 + 4);
    v179 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v180 = dispatch thunk of CustomStringConvertible.description.getter(v159, v179);
    v251 = sub_100016940(v180, v181, v252);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v251, v252, v241, v178 + 12);
    swift_bridgeObjectRelease();
    v182 = *(void (**)(char *, uint64_t))(v160 + 8);
    v183 = v159;
    v182(v177, v159);
    v184 = v243;
    _os_log_impl((void *)&_mh_execute_header, v243, v176, "Posh address: %{public}s", v178, 0xCu);
    v185 = v242;
    swift_arrayDestroy(v242, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v185, -1, -1);
    swift_slowDealloc(v178, -1, -1);

    sub_10001BC14(v156, v158);
    sub_10001BC14(v245, (unint64_t)v244);
  }
  else
  {
    sub_10001BC14(v89, v91);
    sub_10001BC14(v156, v158);
    v198 = *(void (**)(char *, uint64_t))(v160 + 8);
    v183 = v159;
    v198(v142, v159);

  }
  v199 = (int *)sub_10001A9A8(&qword_1010FF530);
  v200 = v199[12];
  v201 = v246;
  v202 = (char *)v246 + v199[16];
  v203 = v199[20];
  v204 = v199[24];
  ((void (*)(_QWORD *, char *, uint64_t))v247)(v246, v238, v183);
  *(_OWORD *)((char *)v201 + v200) = xmmword_100E3F4B0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v236 + 56))(v202, 1, 1, v237);
  *(_QWORD *)((char *)v201 + v203) = v224;
  *((_BYTE *)v201 + v204) = 4;
  v205 = sub_10001A9A8(&qword_1010FF538);
  v206 = v201;
  v207 = 0;
  return swift_storeEnumTagMultiPayload(v206, v205, v207);
}

uint64_t sub_100566780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;

  v82 = a1;
  v1 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v1);
  v74 = (uint64_t)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v75 = v3;
  v76 = v4;
  v5 = __chkstk_darwin(v3);
  v73 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v72 = (char *)&v70 - v7;
  v8 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v8);
  v10 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v81 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v14);
  v77 = (uint64_t)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for WildModeAssociationRecord(0);
  v16 = *(_QWORD *)(v83 - 8);
  v17 = __chkstk_darwin(v83);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v70 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v70 - v24;
  __chkstk_darwin(v23);
  v79 = (uint64_t)&v70 - v26;
  v27 = sub_10081BF2C();
  v28 = v27[2];
  v78 = v27;
  if (v28)
  {
    v70 = v16;
    v71 = v19;
    v29 = (uint64_t)v27 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v30 = *(_QWORD *)(v16 + 72);
    v80 = v30;
    do
    {
      sub_10005972C(v29, (uint64_t)v25, type metadata accessor for WildModeAssociationRecord);
      sub_10000F9B8((uint64_t)&v25[*(int *)(v83 + 20)], (uint64_t)v10, &qword_1010ED860);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_100004048((uint64_t)v10, &qword_1010ED860);
      }
      else
      {
        v31 = v81;
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v81, v10, v11);
        v32 = static UUID.== infix(_:_:)(v31, v82);
        sub_10005972C((uint64_t)v25, (uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
        if ((v32 & 1) != 0)
        {
          v33 = v22[*(int *)(v83 + 36)];
          sub_1000126B0((uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
          v30 = v80;
          if (v33 == 2)
          {
            v34 = v77;
            sub_1000126EC((uint64_t)v25, v77, type metadata accessor for WildModeAssociationRecord);
            v35 = 0;
            v16 = v70;
            v19 = v71;
            goto LABEL_12;
          }
        }
        else
        {
          sub_1000126B0((uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v31, v11);
          v30 = v80;
        }
      }
      sub_1000126B0((uint64_t)v25, type metadata accessor for WildModeAssociationRecord);
      v29 += v30;
      --v28;
    }
    while (v28);
    v35 = 1;
    v16 = v70;
    v19 = v71;
    v34 = v77;
  }
  else
  {
    v35 = 1;
    v34 = v77;
  }
LABEL_12:
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v37 = v16;
  v38 = v83;
  v36(v34, v35, 1, v83);
  swift_bridgeObjectRelease();
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v34, 1, v38);
  v40 = v79;
  if (v39 == 1)
  {
    v41 = &qword_101102FB0;
    v42 = v34;
  }
  else
  {
    v43 = sub_1000126EC(v34, v79, type metadata accessor for WildModeAssociationRecord);
    v44 = static os_log_type_t.default.getter(v43);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v45 = qword_1011B7DD8;
    v46 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v47 = swift_allocObject(v46, 72, 7);
    *(_OWORD *)(v47 + 16) = xmmword_100E22B00;
    sub_10005972C(v40, (uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
    v48 = v83;
    v49 = String.init<A>(describing:)(v19, v83);
    v51 = v50;
    *(_QWORD *)(v47 + 56) = &type metadata for String;
    v52 = sub_10001AA00();
    *(_QWORD *)(v47 + 64) = v52;
    *(_QWORD *)(v47 + 32) = v49;
    *(_QWORD *)(v47 + 40) = v51;
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Found ignored shared beacon record %@.", 38, 2, v47);
    swift_bridgeObjectRelease();
    v53 = v74;
    sub_10000F9B8(v40 + *(int *)(v48 + 44), v74, (uint64_t *)&unk_1010EA690);
    v54 = v75;
    v55 = v76;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v53, 1, v75) != 1)
    {
      v57 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v72, v53, v54);
      v58 = v73;
      v59 = static Date.trustedNow.getter(v73);
      v60 = static os_log_type_t.default.getter(v59);
      v61 = qword_1011B7DD8;
      v62 = swift_allocObject(v46, 112, 7);
      *(_OWORD *)(v62 + 16) = xmmword_100E22B10;
      v63 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v54, v63);
      *(_QWORD *)(v62 + 56) = &type metadata for String;
      *(_QWORD *)(v62 + 64) = v52;
      *(_QWORD *)(v62 + 32) = v64;
      *(_QWORD *)(v62 + 40) = v65;
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v54, v63);
      *(_QWORD *)(v62 + 96) = &type metadata for String;
      *(_QWORD *)(v62 + 104) = v52;
      *(_QWORD *)(v62 + 72) = v66;
      *(_QWORD *)(v62 + 80) = v67;
      os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v61, "ignoresUntilDate %@. now %@.", 28, 2, v62);
      swift_bridgeObjectRelease();
      v56 = static Date.> infix(_:_:)(v57, v58);
      v68 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
      v68(v58, v54);
      v68((uint64_t)v57, v54);
      sub_1000126B0(v79, type metadata accessor for WildModeAssociationRecord);
      return v56 & 1;
    }
    sub_1000126B0(v40, type metadata accessor for WildModeAssociationRecord);
    v41 = (uint64_t *)&unk_1010EA690;
    v42 = v53;
  }
  sub_100004048(v42, v41);
  v56 = 0;
  return v56 & 1;
}

uint64_t sub_100566DE4(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  id v75;
  id v76;
  unsigned int v77;
  uint64_t v78;
  id v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  _BOOL4 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, char *, uint64_t);
  id v158;
  unint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t (*v172)(uint64_t);
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  os_log_type_t v180;
  uint8_t *v181;
  uint64_t v182;
  unint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint8_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t *v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t, unint64_t, uint64_t);
  uint64_t v200;
  uint64_t v201;
  unsigned int (*v202)(uint64_t, uint64_t, uint64_t);
  uint64_t v203;
  uint64_t v204;
  id v205;
  uint64_t v206;
  void (*v207)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  id v215;
  id v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  id v222;
  unsigned __int8 v223;
  id v224;
  unsigned __int16 v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  char *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  char *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  char *v289;
  unint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  unint64_t v293;
  id v294;
  uint64_t v295;
  id v296;
  uint64_t v297;
  char v298[8];
  uint64_t v299;
  char v300[8];

  v290 = a8;
  v259 = a7;
  v263 = a6;
  v293 = a4;
  v294 = a3;
  v278 = a1;
  v17 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v17);
  v272 = (char *)&v235 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v20 = __chkstk_darwin(v19);
  v270 = (char *)&v235 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v269 = (char *)&v235 - v23;
  __chkstk_darwin(v22);
  v289 = (char *)&v235 - v24;
  v265 = type metadata accessor for Date(0);
  v262 = *(_QWORD *)(v265 - 8);
  __chkstk_darwin(v265);
  v288 = (uint64_t)&v235 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v26);
  v287 = (uint64_t)&v235 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for WildModeAssociationRecord(0);
  v266 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v268 = (uint64_t)&v235 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v267 = v30;
  __chkstk_darwin(v29);
  v271 = (uint64_t)&v235 - v31;
  v32 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v257 = *(_QWORD *)(v32 - 8);
  v33 = __chkstk_darwin(v32);
  v260 = (uint64_t)&v235 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v255 = (char *)&v235 - v36;
  v258 = v37;
  __chkstk_darwin(v35);
  v283 = (uint64_t)&v235 - v38;
  v39 = type metadata accessor for MACAddress(0);
  v292 = *(_QWORD **)(v39 - 8);
  v40 = v292[8];
  v41 = __chkstk_darwin(v39);
  v286 = (uint64_t)&v235 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v41);
  v282 = (char *)&v235 - v43;
  __chkstk_darwin(v42);
  v281 = (char *)&v235 - v44;
  v45 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v45);
  v244 = (char *)&v235 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = sub_10001A9A8(&qword_10111C0E0);
  v246 = *(_QWORD *)(v247 - 8);
  __chkstk_darwin(v247);
  v245 = (char *)&v235 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v250 = sub_10001A9A8(&qword_1010FF548);
  v249 = *(_QWORD *)(v250 - 8);
  __chkstk_darwin(v250);
  v248 = (char *)&v235 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v253 = sub_10001A9A8(&qword_1010FF550);
  v252 = *(_QWORD *)(v253 - 8);
  __chkstk_darwin(v253);
  v251 = (char *)&v235 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v256 = sub_10001A9A8(&qword_1010FF558);
  v254 = *(_QWORD *)(v256 - 8);
  __chkstk_darwin(v256);
  v280 = (char *)&v235 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_10001A9A8(&qword_101115E60);
  v52 = __chkstk_darwin(v51);
  v261 = (uint64_t)&v235 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  v275 = (uint64_t)&v235 - v54;
  v295 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v295 - 8);
  v56 = *(_QWORD *)(v55 + 64);
  v57 = __chkstk_darwin(v295);
  v284 = (uint64_t)&v235 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __chkstk_darwin(v57);
  v60 = (char *)&v235 - v59;
  v61 = __chkstk_darwin(v58);
  v279 = (char *)&v235 - v62;
  __chkstk_darwin(v61);
  v64 = (char *)&v235 - v63;
  v273 = type metadata accessor for AccessoryMetadata(0);
  v274 = *(_QWORD *)(v273 - 8);
  __chkstk_darwin(v273);
  v291 = (uint64_t)&v235 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_10001A9A8(&qword_1010FD188);
  __chkstk_darwin(v66);
  v68 = (uint64_t *)((char *)&v235 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  v264 = a5;
  v285 = swift_projectBox(a5);
  swift_beginAccess(a2, v300, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v241 = v39;
    v277 = result;
    v242 = a14;
    v239 = a13;
    v238 = a12;
    v240 = a10;
    v237 = a9;
    sub_10000F9B8(v278, (uint64_t)v68, &qword_1010FD188);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v68, v66);
    v243 = a15;
    v276 = a11;
    if (EnumCaseMultiPayload != 1)
    {
      sub_1000126EC((uint64_t)v68, v291, type metadata accessor for AccessoryMetadata);
      v75 = v294;
      v76 = objc_msgSend(v294, "trackingIdentifier");
      v77 = objc_msgSend(v76, "isPosh");

      v78 = v295;
      if (v77)
      {
        v79 = objc_msgSend(v75, "trackingIdentifier");
        v80 = objc_msgSend(v79, "networkID");

        v81 = 2 * (v80 == 2);
        if (v80 == 1)
          v81 = 1;
      }
      else
      {
        v81 = 3;
      }
      LODWORD(v288) = v81;
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v95 = type metadata accessor for Logger(0);
      sub_10001A9E8(v95, (uint64_t)qword_1011B7148);
      v289 = *(char **)(v55 + 16);
      v96 = ((uint64_t (*)(char *, unint64_t, uint64_t))v289)(v64, v293, v78);
      v97 = Logger.logObject.getter(v96);
      v98 = static os_log_type_t.default.getter(v97);
      v99 = os_log_type_enabled(v97, v98);
      v236 = v55;
      if (v99)
      {
        v100 = swift_slowAlloc(15, -1);
        v101 = swift_slowAlloc(32, -1);
        v299 = v101;
        *(_DWORD *)v100 = 136446466;
        v102 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v103 = dispatch thunk of CustomStringConvertible.description.getter(v295, v102);
        v297 = sub_100016940(v103, v104, &v299);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v100 + 4, v100 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v64, v295);
        *(_WORD *)(v100 + 12) = 256;
        v105 = v288;
        if ((_DWORD)v288 == 3)
          v106 = 0;
        else
          v106 = v288;
        LOBYTE(v297) = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, (char *)&v297 + 1, v100 + 14, v100 + 15);
        _os_log_impl((void *)&_mh_execute_header, v97, v98, "Successfully fetched metadata for %{public}s. NetworkID: %hhu", (uint8_t *)v100, 0xFu);
        swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
        v107 = v101;
        v78 = v295;
        swift_slowDealloc(v107, -1, -1);
        swift_slowDealloc(v100, -1, -1);

      }
      else
      {
        (*(void (**)(char *, uint64_t))(v55 + 8))(v64, v78);

        v105 = v288;
      }
      v108 = v291;
      v109 = v275;
      sub_10005972C(v291, v275, type metadata accessor for AccessoryMetadata);
      v110 = v274;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v274 + 56))(v109, 0, 1, v273);
      v111 = v285;
      swift_beginAccess(v285, &v299, 1, 0);
      sub_100004084(v109, v111, &qword_101115E60);
      v112 = v277;
      v113 = sub_10001A9A8(&qword_1010FBA60);
      v114 = *(_QWORD *)(v110 + 72);
      v115 = *(unsigned __int8 *)(v110 + 80);
      v116 = (v115 + 32) & ~v115;
      v117 = swift_allocObject(v113, v116 + v114, v115 | 7);
      *(_OWORD *)(v117 + 16) = xmmword_100E22B00;
      sub_10005972C(v108, v117 + v116, type metadata accessor for AccessoryMetadata);
      swift_retain();
      v118 = sub_100222868(v117, v105);
      swift_release();
      swift_bridgeObjectRelease();
      v120 = v112;
      v296 = *(id *)(v112 + 24);
      v119 = v296;
      v297 = v118;
      v121 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
      v122 = (uint64_t)v244;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v244, 1, 1, v121);
      v123 = v119;
      v124 = sub_10001A9A8((uint64_t *)&unk_10111C130);
      v125 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v126 = sub_1000193A4(&qword_1010FF450, (uint64_t *)&unk_10111C130, (const char *)&protocol conformance descriptor for Future<A, B>);
      v127 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
      v128 = v245;
      Publisher.receive<A>(on:options:)(&v296, v122, v124, v125, v126, v127);
      sub_100004048(v122, &qword_1010EECC8);

      swift_release();
      v129 = *(_QWORD *)(v120 + 24);
      v130 = sub_1000193A4(&qword_10111C140, &qword_10111C0E0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v131 = v248;
      v132 = v129;
      v133 = v247;
      Publisher.timeout(_:queue:customError:)(v132, sub_1005687E4, 0, v247, v130, 60.0);
      (*(void (**)(char *, uint64_t))(v246 + 8))(v128, v133);
      v134 = sub_10001A9A8(&qword_1010F37F0);
      v135 = sub_1000193A4(&qword_1010FF570, &qword_1010FF548, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      v136 = v251;
      v137 = v250;
      Publisher.map<A>(_:)(sub_100568814, 0, v250, v134, v135);
      (*(void (**)(char *, uint64_t))(v249 + 8))(v131, v137);
      v138 = sub_10001A9A8(&qword_1010FF468);
      v139 = sub_1000193A4(&qword_1010FF578, &qword_1010FF550, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
      v140 = sub_1000193A4(&qword_1010FF478, &qword_1010FF468, (const char *)&protocol conformance descriptor for Just<A>);
      v141 = v253;
      Publisher.catch<A>(_:)(sub_100568818, 0, v253, v138, v139, v140);
      (*(void (**)(char *, uint64_t))(v252 + 8))(v136, v141);
      v288 = swift_allocObject(&unk_10107EF08, 24, 7);
      swift_weakInit(v288 + 16, v120);
      ((void (*)(char *, unint64_t, uint64_t))v289)(v279, v293, v78);
      v142 = (void (*)(char *, uint64_t, uint64_t))v292[2];
      v143 = v292;
      v144 = v241;
      v142(v281, v259, v241);
      sub_10000F9B8(v290, v283, (uint64_t *)&unk_1010EE180);
      v142(v282, v237, v144);
      v145 = v236;
      v146 = *(unsigned __int8 *)(v236 + 80);
      v147 = (v146 + 24) & ~v146;
      v148 = (v56 + v147 + 7) & 0xFFFFFFFFFFFFFFF8;
      v149 = *((unsigned __int8 *)v143 + 80);
      v150 = (v149 + 8 + v148) & ~v149;
      v151 = *(unsigned __int8 *)(v257 + 80);
      v152 = (v40 + v151 + v150) & ~v151;
      v153 = (v258 + v152 + 7) & 0xFFFFFFFFFFFFFFF8;
      v154 = (v149 + 8 + v153) & ~v149;
      v293 = (v154 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      v290 = (v154 + v40 + 23) & 0xFFFFFFFFFFFFFFF8;
      v155 = (v290 + 15) & 0xFFFFFFFFFFFFFFF8;
      v289 = (char *)((v155 + 23) & 0xFFFFFFFFFFFFFFF8);
      v156 = swift_allocObject(&unk_10107F070, v289 + 16, v146 | v149 | v151 | 7);
      *(_QWORD *)(v156 + 16) = v288;
      (*(void (**)(uint64_t, char *, uint64_t))(v145 + 32))(v156 + v147, v279, v295);
      *(_QWORD *)(v156 + v148) = v263;
      v157 = (void (*)(uint64_t, char *, uint64_t))v292[4];
      v157(v156 + v150, v281, v144);
      sub_10058A200(v283, v156 + v152);
      v158 = v294;
      *(_QWORD *)(v156 + v153) = v294;
      v157(v156 + v154, v282, v144);
      v159 = v156 + v293;
      v160 = v240;
      *(_QWORD *)v159 = v240;
      *(_BYTE *)(v159 + 8) = v276;
      *(_QWORD *)(v156 + v290) = v264;
      v161 = (_QWORD *)(v156 + v155);
      v162 = v238;
      v163 = v239;
      *v161 = v238;
      v161[1] = v163;
      v164 = &v289[v156];
      v165 = v243;
      *(_QWORD *)v164 = v242;
      *((_QWORD *)v164 + 1) = v165;
      swift_retain();
      v166 = v158;
      swift_bridgeObjectRetain(v160);
      swift_retain();
      sub_1001DD474(v162, v163);
      v167 = sub_1000193A4(&qword_1010FF580, &qword_1010FF558, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
      swift_retain();
      v168 = v256;
      v169 = v280;
      Publisher<>.sink(receiveValue:)(sub_10058AB8C, v156, v256, v167);
      swift_release();
      (*(void (**)(char *, uint64_t))(v254 + 8))(v169, v168);
      v170 = v277;
      swift_beginAccess(v277 + 32, &v297, 33, 0);
      AnyCancellable.store(in:)(v170 + 32);
      swift_endAccess(&v297);
      swift_release();
      swift_release();
      v171 = v291;
      v172 = type metadata accessor for AccessoryMetadata;
      return sub_1000126B0(v171, v172);
    }
    v299 = *v68;
    v71 = v299;
    swift_errorRetain(v299);
    v72 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v73 = swift_dynamicCast(&v297, &v299, v72, &type metadata for UTError, 6);
    v74 = v295;
    v291 = v71;
    if (v73 && v297 == 4)
    {
      LODWORD(v283) = 0;
    }
    else
    {
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v82 = type metadata accessor for Logger(0);
      sub_10001A9E8(v82, (uint64_t)qword_1011B7148);
      (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v60, v293, v74);
      swift_errorRetain(v71);
      v83 = swift_errorRetain(v71);
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.error.getter(v84);
      if (os_log_type_enabled(v84, v85))
      {
        v86 = swift_slowAlloc(22, -1);
        v87 = swift_slowAlloc(64, -1);
        v299 = v87;
        *(_DWORD *)v86 = 136446466;
        v88 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v89 = dispatch thunk of CustomStringConvertible.description.getter(v295, v88);
        v297 = sub_100016940(v89, v90, &v299);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v86 + 4, v86 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v55 + 8))(v60, v295);
        *(_WORD *)(v86 + 12) = 2082;
        v297 = v71;
        swift_errorRetain(v71);
        v91 = String.init<A>(describing:)(&v297, v72);
        v297 = sub_100016940(v91, v92, &v299);
        v93 = v276;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v297, v298, v86 + 14, v86 + 22);
        swift_bridgeObjectRelease();
        swift_errorRelease(v71);
        swift_errorRelease(v71);
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Failed to fetch metadata for %{public}s. Error %{public}s", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy(v87, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v86, -1, -1);

        LODWORD(v283) = 1;
        v94 = v55;
LABEL_25:
        v173 = v285;
        v174 = (uint64_t)v255;
        v175 = v290;
        if (v93 == 3)
        {
          if (qword_1010E9D08 != -1)
            swift_once(&qword_1010E9D08, sub_10059A6E0);
          OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
          v176 = sub_100C1B604(v299);
          swift_bridgeObjectRelease();
          if ((v176 & 1) != 0)
          {
            if (qword_1010E9CE0 != -1)
              swift_once(&qword_1010E9CE0, sub_100563220);
            v177 = type metadata accessor for Logger(0);
            v178 = sub_10001A9E8(v177, (uint64_t)qword_1011B7148);
            v179 = Logger.logObject.getter(v178);
            v180 = static os_log_type_t.default.getter(v179);
            if (os_log_type_enabled(v179, v180))
            {
              v181 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v181 = 0;
              _os_log_impl((void *)&_mh_execute_header, v179, v180, "HELE is AirPods. Stubbing metadata with default values", v181, 2u);
              v175 = v290;
              swift_slowDealloc(v181, -1, -1);
            }

            v182 = sub_1001EE37C(76, 8211);
            if (v183 >> 60 == 15)
            {
              v184 = Logger.logObject.getter(v182);
              v185 = static os_log_type_t.error.getter(v184);
              if (os_log_type_enabled(v184, v185))
              {
                v186 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v186 = 0;
                _os_log_impl((void *)&_mh_execute_header, v184, v185, "Unable to init fallbackAirPodsProductData", v186, 2u);
                swift_slowDealloc(v186, -1, -1);
              }

            }
            else
            {
              v187 = v182;
              v188 = v183;
              v189 = v275;
              (*(void (**)(uint64_t, unint64_t, uint64_t))(v94 + 16))(v275, v293, v295);
              v190 = (int *)v273;
              v191 = v189 + *(int *)(v273 + 40);
              *(_QWORD *)v191 = 0;
              *(_QWORD *)(v191 + 8) = 0;
              *(_BYTE *)(v191 + 16) = 1;
              v192 = (_QWORD *)(v189 + v190[15]);
              *v192 = 0;
              v192[1] = 0xE000000000000000;
              v193 = (uint64_t *)(v189 + v190[5]);
              *v193 = v187;
              v193[1] = v188;
              *(_DWORD *)(v189 + v190[8]) = 16842753;
              v194 = (_QWORD *)(v189 + v190[7]);
              *v194 = 0;
              v194[1] = 0;
              v195 = (_QWORD *)(v189 + v190[6]);
              *v195 = 0;
              v195[1] = 0;
              v196 = v189 + v190[9];
              *(_DWORD *)v196 = 0;
              *(_BYTE *)(v196 + 4) = 1;
              v197 = v189 + v190[11];
              *(_QWORD *)v197 = 0;
              *(_BYTE *)(v197 + 8) = 1;
              v198 = v189 + v190[12];
              *(_DWORD *)v198 = 1025;
              *(_BYTE *)(v198 + 4) = 0;
              *(_BYTE *)(v189 + v190[13]) = 4;
              *(_BYTE *)(v189 + v190[14]) = 5;
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v274 + 56))(v189, 0, 1);
              swift_beginAccess(v173, &v297, 1, 0);
              sub_100004084(v189, v173, &qword_101115E60);
            }
          }
        }
        v199 = *(void (**)(uint64_t, unint64_t, uint64_t))(v94 + 16);
        v200 = v295;
        v199(v284, v293, v295);
        sub_10000F9B8(v175, v174, (uint64_t *)&unk_1010EE180);
        v201 = type metadata accessor for SharedBeaconRecord(0);
        v202 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v201 - 8) + 48);
        if (v202(v174, 1, v201) == 1)
        {
          sub_100004048(v174, (uint64_t *)&unk_1010EE180);
          v203 = 1;
          v204 = v287;
        }
        else
        {
          v204 = v287;
          v199(v287, v174 + *(int *)(v201 + 20), v200);
          sub_1000126B0(v174, type metadata accessor for SharedBeaconRecord);
          v203 = 0;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v204, v203, 1, v200);
        v205 = objc_msgSend(v294, "type");
        if (v205)
        {
          v206 = (uint64_t)v205;
          if (v205 != (id)1)
          {
            type metadata accessor for TrackingObservationType(0);
            v299 = v206;
            result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v232, &v299, v232, &type metadata for Int);
            __break(1u);
            return result;
          }
          LODWORD(v295) = 1;
        }
        else
        {
          LODWORD(v295) = 0;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t))v292[2])(v286, v237, v241);
        static Date.trustedNow.getter(v288);
        v207 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v262 + 56);
        v208 = v265;
        v207(v289, 1, 1, v265);
        v209 = v260;
        sub_10000F9B8(v175, v260, (uint64_t *)&unk_1010EE180);
        if (v202(v209, 1, v201) == 1)
        {
          sub_100004048(v209, (uint64_t *)&unk_1010EE180);
          v292 = 0;
          v293 = 0;
          v290 = 0;
        }
        else
        {
          v210 = (unsigned __int8 *)(v209 + *(int *)(v201 + 28));
          v293 = *v210;
          v211 = *((_QWORD *)v210 + 2);
          v292 = (_QWORD *)*((_QWORD *)v210 + 1);
          v290 = v211;
          swift_bridgeObjectRetain(v211);
          sub_1000126B0(v209, type metadata accessor for SharedBeaconRecord);
        }
        swift_beginAccess(v173, &v299, 0, 0);
        v212 = v261;
        sub_10000F9B8(v173, v261, &qword_101115E60);
        v213 = type metadata accessor for AccessoryProductInfo(0);
        v214 = (uint64_t)v272;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v213 - 8) + 56))(v272, 1, 1, v213);
        v215 = v294;
        v216 = objc_msgSend(v294, "action");
        if ((unint64_t)v216 < 5)
          v217 = (_DWORD)v216 + 1;
        else
          v217 = 0;
        LODWORD(v285) = v217;
        v218 = (uint64_t)v269;
        v207(v269, 1, 1, v208);
        v219 = (uint64_t)v270;
        v207(v270, 1, 1, v208);
        v220 = v238;
        v221 = v239;
        sub_1001DD474(v238, v239);
        v222 = objc_msgSend(v215, "trackingIdentifier");
        v223 = objc_msgSend(v222, "isPosh");

        v224 = objc_msgSend(v215, "trackingIdentifier");
        v225 = (unsigned __int16)objc_msgSend(v224, "networkID");

        v226 = v240;
        swift_bridgeObjectRetain(v240);
        v234 = v221;
        *((_QWORD *)&v233 + 1) = v292;
        *(_QWORD *)&v233 = v293;
        v227 = v271;
        sub_1001D7FD4(v284, v287, v295, v286, v226, 0, v288, (uint64_t)v289, v271, v233, v290, v276, v212, v214, v285, v218, v219, v220, v234,
          v223,
          v225);
        sub_100570670(v227, v242, v243);
        type metadata accessor for Transaction(0);
        v228 = v268;
        sub_10005972C(v227, v268, type metadata accessor for WildModeAssociationRecord);
        v229 = *(unsigned __int8 *)(v266 + 80);
        v230 = (v229 + 17) & ~v229;
        v231 = swift_allocObject(&unk_10107F048, v230 + v267, v229 | 7);
        *(_BYTE *)(v231 + 16) = v283;
        sub_1000126EC(v228, v231 + v230, type metadata accessor for WildModeAssociationRecord);
        static Transaction.asyncTask(name:block:)("UTAlertAnalytics", 16, 2, &unk_1010FF568, v231);
        swift_release();
        swift_release();
        swift_errorRelease(v291);
        v171 = v227;
        v172 = type metadata accessor for WildModeAssociationRecord;
        return sub_1000126B0(v171, v172);
      }
      (*(void (**)(char *, uint64_t))(v55 + 8))(v60, v74);
      swift_errorRelease(v71);
      swift_errorRelease(v71);

      LODWORD(v283) = 1;
    }
    v94 = v55;
    v93 = a11;
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_1005687E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  return swift_storeEnumTagMultiPayload(a1, v2, 9);
}

uint64_t sub_10056881C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t result;
  uint64_t v60;
  int EnumCaseMultiPayload;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  unsigned int (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  id v117;
  void *v118;
  void (*v119)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  id v128;
  id v129;
  int v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  unsigned __int8 v136;
  id v137;
  unsigned __int16 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t, uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  _BYTE v179[16];
  uint64_t v180;
  _BYTE v181[8];
  void *v182;
  _BYTE v183[8];

  v159 = a8;
  v178 = a7;
  v161 = a6;
  v151 = a5;
  v172 = a3;
  v152 = a1;
  v17 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v17);
  v169 = (uint64_t)&v148 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v20 = __chkstk_darwin(v19);
  v168 = (char *)&v148 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v167 = (char *)&v148 - v23;
  __chkstk_darwin(v22);
  v177 = (uint64_t)&v148 - v24;
  v162 = type metadata accessor for Date(0);
  v157 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v176 = (uint64_t)&v148 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for MACAddress(0);
  v170 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v175 = (uint64_t)&v148 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v28 = __chkstk_darwin(v27);
  v158 = (uint64_t)&v148 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v154 = (unint64_t)&v148 - v30;
  v31 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v31);
  v174 = (uint64_t)&v148 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for WildModeAssociationRecord(0);
  v163 = *(_QWORD *)(v33 - 8);
  v34 = __chkstk_darwin(v33);
  v165 = (uint64_t)&v148 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = v35;
  __chkstk_darwin(v34);
  v166 = (uint64_t)&v148 - v36;
  v37 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  v38 = __chkstk_darwin(v37);
  v40 = (char *)&v148 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v153 = (uint64_t)&v148 - v41;
  v42 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v43 = __chkstk_darwin(v42);
  v160 = (uint64_t)&v148 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  v46 = (char *)&v148 - v45;
  v47 = type metadata accessor for UUID(0);
  v171 = *(_QWORD *)(v47 - 8);
  v48 = __chkstk_darwin(v47);
  v173 = (char *)&v148 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __chkstk_darwin(v48);
  v52 = (char *)&v148 - v51;
  __chkstk_darwin(v50);
  v54 = (char *)&v148 - v53;
  v55 = sub_10001A9A8(&qword_1010F37F0);
  __chkstk_darwin(v55);
  v57 = (uint64_t *)((char *)&v148 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  v155 = swift_projectBox(a4);
  v58 = swift_projectBox(a11);
  swift_beginAccess(a2, v183, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v60 = result;
    sub_10000F9B8(v152, (uint64_t)v57, &qword_1010F37F0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v57, v55);
    v152 = v60;
    v150 = v58;
    if (EnumCaseMultiPayload == 1)
    {
      v62 = v153;
      sub_1000126EC((uint64_t)v57, v153, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v63 = type metadata accessor for Logger(0);
      sub_10001A9E8(v63, (uint64_t)qword_1011B7148);
      v64 = v171;
      v149 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 16);
      v149(v52, v172, v47);
      v65 = sub_10005972C(v62, (uint64_t)v40, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.error.getter(v66);
      if (os_log_type_enabled(v66, v67))
      {
        v68 = swift_slowAlloc(22, -1);
        v69 = (void *)swift_slowAlloc(64, -1);
        v182 = v69;
        *(_DWORD *)v68 = 136446466;
        v70 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v71 = dispatch thunk of CustomStringConvertible.description.getter(v47, v70);
        v180 = sub_100016940(v71, v72, (uint64_t *)&v182);
        v64 = v171;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, v181, v68 + 4, v68 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v52, v47);
        *(_WORD *)(v68 + 12) = 2082;
        sub_100D07804();
        v180 = sub_100016940(v73, v74, (uint64_t *)&v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, v181, v68 + 14, v68 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v40, type metadata accessor for BluetoothCommunicationCoordinator.Error);
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to fetch product info for %{public}s. Error %{public}s", (uint8_t *)v68, 0x16u);
        swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v68, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v64 + 8))(v52, v47);
        sub_1000126B0((uint64_t)v40, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      }

      __chkstk_darwin(v86);
      v87 = v151;
      sub_10001A9A8(&qword_101110700);
      Lock.callAsFunction<A>(_:)(sub_1000FA494);
      v88 = v182;
      v89 = v156;
      if (v182)
      {
        v182 = (void *)sub_100E08534(v182);
        v90 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
        v91 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
        Publisher.oneshot(_:)(sub_10022260C, 0, v90, v91);
        swift_release();

      }
      else
      {
        v98 = type metadata accessor for AccessoryMetadataManager.Error(0);
        v99 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
        v100 = (void *)swift_allocError(v98, v99, 0, 0);
        v102 = v101;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 16))(v101, v87, v89);
        swift_storeEnumTagMultiPayload(v102, v98, 1);
        v182 = v100;
        swift_errorRetain(v100);
        v103 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v104 = swift_willThrowTypedImpl(&v182, v103, &protocol self-conformance witness table for Error);
        v105 = static os_log_type_t.error.getter(v104);
        if (qword_1010EA2F8 != -1)
          swift_once(&qword_1010EA2F8, sub_100B5E19C);
        v106 = qword_1011B7DD8;
        v107 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v108 = swift_allocObject(v107, 72, 7);
        *(_OWORD *)(v108 + 16) = xmmword_100E22B00;
        v109 = _convertErrorToNSError(_:)(v100);
        *(_QWORD *)(v108 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
        *(_QWORD *)(v108 + 64) = sub_10001AC90((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr, (const char *)&protocol conformance descriptor for NSObject);
        *(_QWORD *)(v108 + 32) = v109;
        os_log(_:dso:log:_:_:)(v105, &_mh_execute_header, v106, "Error from cancelConnection: %@", 31, 2, v108);
        swift_bridgeObjectRelease();
        swift_errorRelease(v100);
        swift_errorRelease(v100);
        v64 = v171;
      }
      v92 = v89;
      sub_1000126B0(v153, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      v110 = v174;
      v111 = v161;
      v112 = v155;
      v96 = v154;
    }
    else
    {
      v75 = *v57;
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v76 = type metadata accessor for Logger(0);
      sub_10001A9E8(v76, (uint64_t)qword_1011B7148);
      v64 = v171;
      v149 = *(void (**)(char *, uint64_t, uint64_t))(v171 + 16);
      v77 = ((uint64_t (*)(char *, uint64_t, uint64_t))v149)(v54, v172, v47);
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.default.getter(v78);
      if (os_log_type_enabled(v78, v79))
      {
        v80 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = (void *)swift_slowAlloc(32, -1);
        v182 = v81;
        v153 = v75;
        *(_DWORD *)v80 = 136446210;
        v82 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v83 = dispatch thunk of CustomStringConvertible.description.getter(v47, v82);
        v180 = sub_100016940(v83, v84, (uint64_t *)&v182);
        v75 = v153;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v180, v181, v80 + 4, v80 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v171 + 8))(v54, v47);
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Successfully fetched product info for %{public}s", v80, 0xCu);
        swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        v85 = v80;
        v64 = v171;
        swift_slowDealloc(v85, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v64 + 8))(v54, v47);
      }

      v92 = v156;
      v93 = *(_QWORD *)(v75 + 16);
      v94 = type metadata accessor for AccessoryProductInfo(0);
      v95 = *(_QWORD *)(v94 - 8);
      v96 = v154;
      if (v93)
      {
        sub_10005972C(v75 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80)), (uint64_t)v46, type metadata accessor for AccessoryProductInfo);
        v97 = 0;
      }
      else
      {
        v97 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v46, v97, 1, v94);
      swift_bridgeObjectRelease();
      v112 = v155;
      swift_beginAccess(v155, v179, 1, 0);
      sub_100004084((uint64_t)v46, v112, (uint64_t *)&unk_10111C0A0);
      v110 = v174;
      v111 = v161;
    }
    v113 = (void (*)(uint64_t, uint64_t, uint64_t))v149;
    v149(v173, v172, v47);
    sub_10000F9B8(v111, v96, (uint64_t *)&unk_1010EE180);
    v114 = type metadata accessor for SharedBeaconRecord(0);
    v115 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 48);
    if (v115(v96, 1, v114) == 1)
    {
      sub_100004048(v96, (uint64_t *)&unk_1010EE180);
      v116 = 1;
    }
    else
    {
      v113(v110, v96 + *(int *)(v114 + 20), v47);
      sub_1000126B0(v96, type metadata accessor for SharedBeaconRecord);
      v116 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v110, v116, 1, v47);
    v117 = objc_msgSend(v178, "type");
    if (v117)
    {
      v118 = v117;
      if (v117 != (id)1)
      {
        type metadata accessor for TrackingObservationType(0);
        v182 = v118;
        result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v145, &v182, v145, &type metadata for Int);
        __break(1u);
        return result;
      }
      LODWORD(v156) = 1;
    }
    else
    {
      LODWORD(v156) = 0;
    }
    v171 = a15;
    v161 = a14;
    v155 = a9;
    v154 = a13;
    v153 = a12;
    LODWORD(v172) = a10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 16))(v175, v159, v92);
    static Date.trustedNow.getter(v176);
    v119 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v157 + 56);
    v120 = v162;
    v119(v177, 1, 1, v162);
    v121 = v158;
    sub_10000F9B8(v111, v158, (uint64_t *)&unk_1010EE180);
    if (v115(v121, 1, v114) == 1)
    {
      sub_100004048(v121, (uint64_t *)&unk_1010EE180);
      v170 = 0;
      v159 = 0;
      v157 = 0;
    }
    else
    {
      v122 = (unsigned __int8 *)(v121 + *(int *)(v114 + 28));
      v170 = *v122;
      v123 = *((_QWORD *)v122 + 2);
      v159 = *((_QWORD *)v122 + 1);
      v157 = v123;
      swift_bridgeObjectRetain(v123);
      sub_1000126B0(v121, type metadata accessor for SharedBeaconRecord);
    }
    v124 = v150;
    swift_beginAccess(v150, &v182, 0, 0);
    v125 = v124;
    v126 = v169;
    sub_10000F9B8(v125, v169, &qword_101115E60);
    swift_beginAccess(v112, &v180, 0, 0);
    v127 = v160;
    sub_10000F9B8(v112, v160, (uint64_t *)&unk_10111C0A0);
    v128 = v178;
    v129 = objc_msgSend(v178, "action");
    if ((unint64_t)v129 < 5)
      v130 = (_DWORD)v129 + 1;
    else
      v130 = 0;
    LODWORD(v158) = v130;
    v131 = (uint64_t)v167;
    v119((uint64_t)v167, 1, 1, v120);
    v132 = v168;
    v119((uint64_t)v168, 1, 1, v120);
    v133 = v153;
    v134 = v154;
    sub_1001DD474(v153, v154);
    v135 = objc_msgSend(v128, "trackingIdentifier");
    v136 = objc_msgSend(v135, "isPosh");

    v137 = objc_msgSend(v128, "trackingIdentifier");
    v138 = (unsigned __int16)objc_msgSend(v137, "networkID");

    v139 = v155;
    swift_bridgeObjectRetain(v155);
    v147 = (uint64_t)v132;
    LOBYTE(v137) = v172;
    *((_QWORD *)&v146 + 1) = v159;
    *(_QWORD *)&v146 = v170;
    v140 = v166;
    sub_1001D7FD4((uint64_t)v173, v174, v156, v175, v139, 0, v176, v177, v166, v146, v157, v172, v126, v127, v158, v131, v147, v133, v134,
      v136,
      v138);
    sub_100570670(v140, v161, v171);
    type metadata accessor for Transaction(0);
    v141 = v165;
    sub_10005972C(v140, v165, type metadata accessor for WildModeAssociationRecord);
    v142 = *(unsigned __int8 *)(v163 + 80);
    v143 = (v142 + 17) & ~v142;
    v144 = swift_allocObject(&unk_10107F098, v143 + v164, v142 | 7);
    *(_BYTE *)(v144 + 16) = (_BYTE)v137;
    sub_1000126EC(v141, v144 + v143, type metadata accessor for WildModeAssociationRecord);
    static Transaction.asyncTask(name:block:)("UTAlertAnalytics", 16, 2, &unk_1010FF590, v144);
    swift_release();
    swift_release();
    return sub_1000126B0(v140, type metadata accessor for WildModeAssociationRecord);
  }
  return result;
}

uint64_t sub_10056991C(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  *(_BYTE *)(v2 + 56) = a1;
  return swift_task_switch(sub_100569938, 0, 0);
}

uint64_t sub_100569938()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 56);
  v3 = type metadata accessor for AnalyticsEvent(0);
  v4 = (char *)swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 24) = v4;
  swift_defaultActor_initialize(v4);
  v5 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v4 + 14) = v5;
  UUID.init()(v5);
  v6 = &v4[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v8(&v4[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v7);
  *((_QWORD *)v4 + 15) = 0xD00000000000002FLL;
  *((_QWORD *)v4 + 16) = 0x8000000100EDB5F0;
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v9;
  *(_BYTE *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = v1;
  return swift_task_switch(sub_100569A50, v4, 0);
}

uint64_t sub_100569A50()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_10058B328);
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_100569ACC, 0, 0);
}

uint64_t sub_100569ACC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[5] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[6] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100569B38;
  return sub_100CD63AC(v0[3]);
}

uint64_t sub_100569B38()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_release();
  return swift_task_switch(sub_10048B59C, 0, 0);
}

void sub_100569B94(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v9[4];

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for AccessoryProductInfo(0);
  v9[1] = *(_QWORD *)(v4 - 8);
  v9[2] = v4;
  __chkstk_darwin(v4);
  v9[0] = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v6);
  v7 = type metadata accessor for AccessoryMetadata(0);
  __chkstk_darwin(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v9[3] = _swiftEmptyDictionarySingleton;
  sub_10010AC08(0, 1, 0xD000000000000010, 0x8000000100EDB620, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_100569D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  NSString v16;
  char v17;
  NSString v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  NSString v23;
  char v24;
  uint64_t v25;
  _BOOL8 v26;
  char v27;
  uint64_t v28;
  Class isa;
  char v30;
  uint64_t v31;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v8 - 88) = v1;
  sub_10010AC08((uint64_t)v9, 0, 0x7954656369766564, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v11 = *(_QWORD *)(v8 - 88);
  swift_bridgeObjectRelease();
  v12 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  sub_10000F9B8(v0 + v12[14], v7, &qword_101115E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v7, 1, v6) == 1)
  {
    sub_100004048(v7, &qword_101115E60);
    v13 = *(_QWORD *)(v8 - 96);
  }
  else
  {
    sub_1000126EC(v7, v5, type metadata accessor for AccessoryMetadata);
    v14 = swift_isUniquelyReferenced_nonNull_native(v11);
    *(_QWORD *)(v8 - 88) = v11;
    sub_10010AC08(1, 1, 0x6863746546736961, 0xEF73736563637553, v14);
    v15 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    sub_10072CDE0();
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v17 = swift_isUniquelyReferenced_nonNull_native(v15);
    *(_QWORD *)(v8 - 88) = v15;
    sub_10010AC08((uint64_t)v16, 0, 0x6F69737265566D66, 0xEA0000000000736ELL, v17);
    v11 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v5 + *(int *)(v6 + 36) + 4) & 1) == 0)
    {
      sub_10072CDE0();
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v19 = swift_isUniquelyReferenced_nonNull_native(v11);
      *(_QWORD *)(v8 - 88) = v11;
      sub_10010AC08((uint64_t)v18, 0, 0x69737265566E6D66, 0xEA00000000006E6FLL, v19);
      v11 = *(_QWORD *)(v8 - 88);
      swift_bridgeObjectRelease();
    }
    v13 = *(_QWORD *)(v8 - 96);
    sub_1000126B0(v5, type metadata accessor for AccessoryMetadata);
  }
  sub_10000F9B8(v0 + v12[15], v4, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 104) + 48))(v4, 1, v13) == 1)
  {
    sub_100004048(v4, (uint64_t *)&unk_10111C0A0);
  }
  else
  {
    v20 = *(_QWORD *)(v8 - 112);
    sub_1000126EC(v4, v20, type metadata accessor for AccessoryProductInfo);
    v21 = swift_isUniquelyReferenced_nonNull_native(v11);
    *(_QWORD *)(v8 - 88) = v11;
    sub_10010AC08(1, 1, 0xD000000000000014, 0x8000000100EDB660, v21);
    v22 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(*(_QWORD *)(v20 + *(int *)(v13 + 32) + 8));
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v24 = swift_isUniquelyReferenced_nonNull_native(v22);
    *(_QWORD *)(v8 - 88) = v22;
    sub_10010AC08((uint64_t)v23, 0, 0x49746375646F7270, 0xE900000000000064, v24);
    v11 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    sub_1000126B0(v20, type metadata accessor for AccessoryProductInfo);
  }
  sub_10000F9B8(v0 + v12[5], v2, &qword_1010ED860);
  v25 = type metadata accessor for UUID(0);
  v26 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v2, 1, v25) != 1;
  sub_100004048(v2, &qword_1010ED860);
  v27 = swift_isUniquelyReferenced_nonNull_native(v11);
  *(_QWORD *)(v8 - 88) = v11;
  sub_10010AC08(v26, 1, 0x796C696D61467369, 0xEE006E6F63616542, v27);
  v28 = *(_QWORD *)(v8 - 88);
  swift_bridgeObjectRelease();
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v30 = swift_isUniquelyReferenced_nonNull_native(v28);
  *(_QWORD *)(v8 - 88) = v28;
  sub_10010AC08((uint64_t)isa, 0, 0xD000000000000015, 0x8000000100EDB640, v30);
  v31 = *(_QWORD *)(v8 - 88);
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_10056A1C4(char a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a2;
  *(_BYTE *)(v2 + 56) = a1;
  return swift_task_switch(sub_10056A1E0, 0, 0);
}

uint64_t sub_10056A1E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 56);
  v3 = type metadata accessor for AnalyticsEvent(0);
  v4 = (char *)swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 24) = v4;
  swift_defaultActor_initialize(v4);
  v5 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v4 + 14) = v5;
  UUID.init()(v5);
  v6 = &v4[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  v8(&v4[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v7);
  *((_QWORD *)v4 + 15) = 0xD00000000000002FLL;
  *((_QWORD *)v4 + 16) = 0x8000000100EDB5F0;
  v9 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 32) = v9;
  *(_BYTE *)(v9 + 16) = v2;
  *(_QWORD *)(v9 + 24) = v1;
  return swift_task_switch(sub_10056A2F8, v4, 0);
}

uint64_t sub_10056A2F8()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_10058B334);
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_100569ACC, 0, 0);
}

void sub_10056A374(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  char *v11;
  uint64_t v12;
  _QWORD v13[5];
  _QWORD *v14;

  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v5 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for AccessoryProductInfo(0);
  v13[2] = *(_QWORD *)(v6 - 8);
  v13[3] = v6;
  __chkstk_darwin(v6);
  v13[1] = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v8);
  v9 = type metadata accessor for AccessoryMetadata(0);
  __chkstk_darwin(v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  if ((a1 & 1) != 0)
  {
    v14 = _swiftEmptyDictionarySingleton;
    sub_10010AC08(1, 1, 0xD000000000000010, 0x8000000100EDB620, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    v11 = (char *)&loc_10056A54C
        + 4
        * word_100E436C6[*(unsigned __int8 *)(a2
                                            + *(int *)(type metadata accessor for WildModeAssociationRecord(0) + 52))];
    __asm { BR              X10 }
  }
  v14 = _swiftEmptyDictionarySingleton;
  sub_10010AC08(0, 1, 0xD000000000000010, 0x8000000100EDB620, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v12 = *(int *)(type metadata accessor for WildModeAssociationRecord(0) + 52);
  v13[4] = a2;
  __asm { BR              X10 }
}

uint64_t sub_10056A5CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  NSString v16;
  char v17;
  NSString v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  NSString v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  char v28;
  uint64_t v29;
  Class isa;
  char v31;
  uint64_t v32;

  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v8 - 88) = v1;
  sub_10010AC08((uint64_t)v9, 0, 0x7954656369766564, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v11 = *(_QWORD *)(v8 - 88);
  swift_bridgeObjectRelease();
  v12 = *(_QWORD *)(v8 - 96);
  sub_10000F9B8(v12 + v3[14], v4, &qword_101115E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 48))(v4, 1, v7) == 1)
  {
    sub_100004048(v4, &qword_101115E60);
    v13 = *(_QWORD *)(v8 - 104);
  }
  else
  {
    sub_1000126EC(v4, v6, type metadata accessor for AccessoryMetadata);
    v14 = swift_isUniquelyReferenced_nonNull_native(v11);
    *(_QWORD *)(v8 - 88) = v11;
    sub_10010AC08(1, 1, 0x6863746546736961, 0xEF73736563637553, v14);
    v15 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    sub_10072CDE0();
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v17 = swift_isUniquelyReferenced_nonNull_native(v15);
    *(_QWORD *)(v8 - 88) = v15;
    sub_10010AC08((uint64_t)v16, 0, 0x6F69737265566D66, 0xEA0000000000736ELL, v17);
    v11 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    if ((*(_BYTE *)(v6 + *(int *)(v7 + 36) + 4) & 1) == 0)
    {
      sub_10072CDE0();
      v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v19 = swift_isUniquelyReferenced_nonNull_native(v11);
      *(_QWORD *)(v8 - 88) = v11;
      sub_10010AC08((uint64_t)v18, 0, 0x69737265566E6D66, 0xEA00000000006E6FLL, v19);
      v11 = *(_QWORD *)(v8 - 88);
      swift_bridgeObjectRelease();
    }
    v13 = *(_QWORD *)(v8 - 104);
    sub_1000126B0(v6, type metadata accessor for AccessoryMetadata);
    v12 = *(_QWORD *)(v8 - 96);
  }
  sub_10000F9B8(v12 + v3[15], v5, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 112) + 48))(v5, 1, v13) == 1)
  {
    sub_100004048(v5, (uint64_t *)&unk_10111C0A0);
  }
  else
  {
    v20 = *(_QWORD *)(v8 - 120);
    sub_1000126EC(v5, v20, type metadata accessor for AccessoryProductInfo);
    v21 = swift_isUniquelyReferenced_nonNull_native(v11);
    *(_QWORD *)(v8 - 88) = v11;
    sub_10010AC08(1, 1, 0xD000000000000014, 0x8000000100EDB660, v21);
    v22 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(*(_QWORD *)(v20 + *(int *)(v13 + 32) + 8));
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v24 = swift_isUniquelyReferenced_nonNull_native(v22);
    *(_QWORD *)(v8 - 88) = v22;
    v25 = (uint64_t)v23;
    v12 = *(_QWORD *)(v8 - 96);
    sub_10010AC08(v25, 0, 0x49746375646F7270, 0xE900000000000064, v24);
    v11 = *(_QWORD *)(v8 - 88);
    swift_bridgeObjectRelease();
    sub_1000126B0(v20, type metadata accessor for AccessoryProductInfo);
  }
  type metadata accessor for WildModeAssociationRecord(0);
  sub_10000F9B8(v12 + v3[5], v2, &qword_1010ED860);
  v26 = type metadata accessor for UUID(0);
  v27 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v2, 1, v26) != 1;
  sub_100004048(v2, &qword_1010ED860);
  v28 = swift_isUniquelyReferenced_nonNull_native(v11);
  *(_QWORD *)(v8 - 88) = v11;
  sub_10010AC08(v27, 1, 0x796C696D61467369, 0xEE006E6F63616542, v28);
  v29 = *(_QWORD *)(v8 - 88);
  swift_bridgeObjectRelease();
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v31 = swift_isUniquelyReferenced_nonNull_native(v29);
  *(_QWORD *)(v8 - 88) = v29;
  sub_10010AC08((uint64_t)isa, 0, 0xD000000000000015, 0x8000000100EDB640, v31);
  v32 = *(_QWORD *)(v8 - 88);
  swift_bridgeObjectRelease();
  return v32;
}

void sub_10056A5E0()
{
  uint64_t v0;
  uint64_t v1;
  NSString v2;
  uint64_t isUniquelyReferenced_nonNull_native;

  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE400000000000000);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  *(_QWORD *)(v1 - 88) = v0;
  sub_10010AC08(v2, 0, 0x7954656369766564, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  JUMPOUT(0x10056A9B8);
}

void sub_10056A5F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  uint64_t v29;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE400000000000000);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  *(_QWORD *)(v7 - 88) = v1;
  sub_10010AC08(v8, 0, 0x7954656369766564, 0xEA00000000006570, isUniquelyReferenced_nonNull_native);
  v10 = *(_QWORD *)(v7 - 88);
  swift_bridgeObjectRelease(0x8000000000000000);
  v11 = *(_QWORD *)(v7 - 96);
  sub_10000F9B8(v11 + *(int *)(v2 + 56), v3, &unk_101115E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 48))(v3, 1, v6) == 1)
  {
    sub_100004048(v3, &unk_101115E60);
    v12 = *(_QWORD *)(v7 - 104);
  }
  else
  {
    sub_1000126EC(v3, v5, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryMetadata);
    v13 = swift_isUniquelyReferenced_nonNull_native(v10);
    *(_QWORD *)(v7 - 88) = v10;
    sub_10010AC08(1, 1, 0x6863746546736961, 0xEF73736563637553, v13);
    v14 = *(_QWORD *)(v7 - 88);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10072CDE0(*(unsigned int *)(v5 + *(int *)(v6 + 32)));
    v16 = v15;
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v18 = swift_isUniquelyReferenced_nonNull_native(v14);
    *(_QWORD *)(v7 - 88) = v14;
    sub_10010AC08(v17, 0, 0x6F69737265566D66, 0xEA0000000000736ELL, v18);
    v10 = *(_QWORD *)(v7 - 88);
    swift_bridgeObjectRelease(0x8000000000000000);
    v19 = (unsigned int *)(v5 + *(int *)(v6 + 36));
    if ((v19[1] & 1) == 0)
    {
      sub_10072CDE0(*v19);
      v21 = v20;
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21);
      v23 = swift_isUniquelyReferenced_nonNull_native(v10);
      *(_QWORD *)(v7 - 88) = v10;
      sub_10010AC08(v22, 0, 0x69737265566E6D66, 0xEA00000000006E6FLL, v23);
      v10 = *(_QWORD *)(v7 - 88);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v12 = *(_QWORD *)(v7 - 104);
    sub_1000126B0(v5, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryMetadata);
    v11 = *(_QWORD *)(v7 - 96);
  }
  sub_10000F9B8(v11 + *(int *)(v2 + 60), v4, &unk_10111C0A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 112) + 48))(v4, 1, v12) == 1)
  {
    sub_100004048(v4, &unk_10111C0A0);
  }
  else
  {
    v24 = *(_QWORD *)(v7 - 120);
    sub_1000126EC(v4, v24, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryProductInfo);
    v25 = swift_isUniquelyReferenced_nonNull_native(v10);
    *(_QWORD *)(v7 - 88) = v10;
    sub_10010AC08(1, 1, 0xD000000000000014, 0x8000000100EDB660, v25);
    v26 = *(_QWORD *)(v7 - 88);
    swift_bridgeObjectRelease(0x8000000000000000);
    v27 = *(_QWORD *)(v24 + *(int *)(v12 + 32) + 8);
    swift_bridgeObjectRetain(v27);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v27);
    v29 = swift_isUniquelyReferenced_nonNull_native(v26);
    *(_QWORD *)(v7 - 88) = v26;
    sub_10010AC08(v28, 0, 0x49746375646F7270, 0xE900000000000064, v29);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_1000126B0(v24, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryProductInfo);
  }
  JUMPOUT(0x10056A9B8);
}

void sub_10056A600()
{
  JUMPOUT(0x10056A614);
}

void sub_10056A67C()
{
  JUMPOUT(0x10056A690);
}

uint64_t sub_10056AAD4(uint64_t a1, Swift::UInt8 a2, uint64_t a3, char a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  unsigned int v22;
  NSString v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  void (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v72 = a3;
  v75 = a5;
  v76 = a6;
  v77 = a1;
  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v71 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10001A9A8(&qword_1010FD188);
  __chkstk_darwin(v69);
  v70 = (uint64_t *)((char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for MACAddress(0);
  v74 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v74 + 64);
  v13 = __chkstk_darwin(v11);
  v14 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v68 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v68 - v18;
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v20 = (void *)qword_1011B7C08;
  v21 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v22 = objc_msgSend(v21, "isInternalBuild");

  if (v22
    && (v23 = String._bridgeToObjectiveC()(),
        v24 = objc_msgSend(v20, "BOOLForKey:", v23),
        v23,
        v24))
  {
    if (qword_1010E9CE8 != -1)
      swift_once(&qword_1010E9CE8, sub_100563934);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001A9E8(v25, (uint64_t)qword_1010FF230);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v79 = v30;
      *(_DWORD *)v29 = 136446210;
      v78 = sub_100016940(0xD000000000000043, 0x8000000100EDB3C0, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v29 + 4, v29 + 12);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%{public}s ForceReadingHawkeyeAIS is enabled!", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }

    return sub_10056B3D0(v77, 2u, v72, v75, v76);
  }
  else if ((a4 & 1) != 0)
  {
    v32 = v74;
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B7148);
    v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 16);
    v35 = v34(v17, v77, v11);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v73 = v34;
      v39 = v38;
      v72 = swift_slowAlloc(64, -1);
      v79 = v72;
      *(_DWORD *)v39 = 136446466;
      v78 = sub_100016940(0xD000000000000043, 0x8000000100EDB3C0, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2082;
      v40 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v11, v40);
      v78 = sub_100016940(v41, v42, &v79);
      v32 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v11);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%{public}s for Posh accessory with %{public}s", (uint8_t *)v39, 0x16u);
      v43 = v72;
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      v44 = v39;
      v34 = v73;
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v11);
    }

    v55 = type metadata accessor for TaskPriority(0);
    v56 = (uint64_t)v71;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v71, 1, 1, v55);
    v34(v14, v77, v11);
    v57 = *(unsigned __int8 *)(v32 + 80);
    v58 = (v57 + 32) & ~v57;
    v59 = (v12 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
    v60 = swift_allocObject(&unk_10107F520, v59 + 16, v57 | 7);
    *(_QWORD *)(v60 + 16) = 0;
    *(_QWORD *)(v60 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v60 + v58, v14, v11);
    v61 = (_QWORD *)(v60 + v59);
    v62 = v76;
    *v61 = v75;
    v61[1] = v62;
    swift_retain();
    sub_100691AC0(v56, (uint64_t)&unk_1010FF5B8, v60);
    return swift_release();
  }
  else
  {
    v45 = v74;
    if (a2 == 4)
    {
      if (qword_1010E9CE8 != -1)
        swift_once(&qword_1010E9CE8, sub_100563934);
      v46 = type metadata accessor for Logger(0);
      sub_10001A9E8(v46, (uint64_t)qword_1010FF230);
      v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 16))(v19, v77, v11);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.error.getter(v48);
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc(22, -1);
        v51 = swift_slowAlloc(64, -1);
        v79 = v51;
        *(_DWORD *)v50 = 136446466;
        v78 = sub_100016940(0xD000000000000043, 0x8000000100EDB3C0, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v50 + 4, v50 + 12);
        *(_WORD *)(v50 + 12) = 2082;
        v52 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v53 = dispatch thunk of CustomStringConvertible.description.getter(v11, v52);
        v78 = sub_100016940(v53, v54, &v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v50 + 14, v50 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v11);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%{public}s for %{public}s with no device type!", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v50, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v11);
      }

      v63 = sub_10058A1B8();
      v64 = swift_allocError(&type metadata for UTError, v63, 0, 0);
      *v65 = 3;
      v66 = v69;
      v67 = (uint64_t)v70;
      *v70 = v64;
      swift_storeEnumTagMultiPayload(v67, v66, 1);
      v75(v67);
      return sub_100004048(v67, &qword_1010FD188);
    }
    else
    {
      return sub_10056B3D0(v77, a2, v72, v75, v76);
    }
  }
}

uint64_t sub_10056B314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v6[2] = a5;
  v6[3] = a6;
  v8 = sub_10001A9A8(&qword_1010FD188);
  v6[4] = v8;
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessoryMetadata(0);
  v10 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[6] = v10;
  type metadata accessor for AccessoryMetadataManager();
  v11 = (_QWORD *)swift_task_alloc(dword_1010F382C);
  v6[7] = v11;
  *v11 = v6;
  v11[1] = sub_1004A45D4;
  return sub_10021759C(v10, a4);
}

uint64_t sub_10056B3D0(uint64_t a1, Swift::UInt8 a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  BOOL v34;
  Swift::UInt8 v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t);
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[8];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _BYTE v97[8];

  v90 = a4;
  v91 = a5;
  v87 = a3;
  v88 = a1;
  v71 = sub_10001A9A8(&qword_1010FF4C8);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v69 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_10001A9A8(&qword_1010FF4D0);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v72 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_10001A9A8(&qword_1010FF4D8);
  v80 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v78 = (char *)v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for MACAddress(0);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v65 = v9;
  v66 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_10001A9A8(&qword_1010FF4E0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v73 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_10001A9A8(&qword_1010FF4E8);
  v81 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v79 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10001A9A8(&qword_1010FF4C0);
  v60[2] = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v60[1] = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_10001A9A8(&qword_1010FD188);
  __chkstk_darwin(v85);
  v86 = (uint64_t)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v14);
  v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for AccessoryMetadata(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v64 = (uint64_t)v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v20);
  v22 = (char *)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SharedBeaconRecord(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23);
  v62 = (uint64_t)v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)v60 - v28;
  v30 = __chkstk_darwin(v27);
  v63 = (uint64_t)v60 - v31;
  __chkstk_darwin(v30);
  v84 = (uint64_t)v60 - v32;
  v33 = sub_1003D7D50((uint64_t)&off_10104AD70);
  v34 = sub_100A08088(a2, v33);
  swift_bridgeObjectRelease();
  if (v34)
LABEL_16:
    __asm { BR              X10 }
  v35 = a2;
  sub_10000F9B8(v87, (uint64_t)v22, (uint64_t *)&unk_1010EE180);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010EE180);
LABEL_15:
    a2 = v35;
    goto LABEL_16;
  }
  v36 = v84;
  sub_1000126EC((uint64_t)v22, v84, type metadata accessor for SharedBeaconRecord);
  v94 = v23;
  v95 = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v37 = sub_100018F08(&v92);
  sub_10005972C(v36, (uint64_t)v37, type metadata accessor for SharedBeaconRecord);
  sub_10099E8C4(&v92, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100004048((uint64_t)v16, &qword_101115E60);
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v38 = type metadata accessor for Logger(0);
    sub_10001A9E8(v38, (uint64_t)qword_1011B7148);
    sub_10005972C(v36, (uint64_t)v29, type metadata accessor for SharedBeaconRecord);
    v39 = v62;
    v40 = sub_10005972C(v36, v62, type metadata accessor for SharedBeaconRecord);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      *(_DWORD *)v43 = 134218240;
      v44 = *(_QWORD *)&v29[*(int *)(v23 + 48)];
      sub_1000126B0((uint64_t)v29, type metadata accessor for SharedBeaconRecord);
      v92 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2048;
      v45 = *(_QWORD *)(v39 + *(int *)(v23 + 44));
      v36 = v84;
      sub_1000126B0(v39, type metadata accessor for SharedBeaconRecord);
      v92 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v43 + 14, v43 + 22);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid product data from shared beacon %ld-%ld", (uint8_t *)v43, 0x16u);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      sub_1000126B0(v39, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0((uint64_t)v29, type metadata accessor for SharedBeaconRecord);
    }

    sub_1000126B0(v36, type metadata accessor for SharedBeaconRecord);
    goto LABEL_15;
  }
  v46 = v64;
  sub_1000126EC((uint64_t)v16, v64, type metadata accessor for AccessoryMetadata);
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v47 = type metadata accessor for Logger(0);
  sub_10001A9E8(v47, (uint64_t)qword_1011B7148);
  v48 = v63;
  v49 = sub_10005972C(v36, v63, type metadata accessor for SharedBeaconRecord);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(32, -1);
    v92 = v53;
    *(_DWORD *)v52 = 141558275;
    v96 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v52 + 4, v52 + 12);
    *(_WORD *)(v52 + 12) = 2081;
    v89 = v52 + 14;
    v54 = type metadata accessor for UUID(0);
    v55 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v54, v55);
    v96 = sub_100016940(v56, v57, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v89, v52 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v48, type metadata accessor for SharedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Skipping AIS fetch for family beacon %{private,mask.hash}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    sub_1000126B0(v48, type metadata accessor for SharedBeaconRecord);
  }

  v58 = v86;
  sub_10005972C(v46, v86, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload(v58, v85, 0);
  v90(v58);
  sub_100004048(v58, &qword_1010FD188);
  sub_1000126B0(v46, type metadata accessor for AccessoryMetadata);
  return sub_1000126B0(v36, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_10056C550@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  v5 = sub_100006204((unint64_t *)&unk_101108330, type metadata accessor for BluetoothCommunicationCoordinator.Error, (uint64_t)&unk_100E6DF38);
  *a2 = swift_allocError(v4, v5, 0, 0);
  return sub_10005972C(a1, v6, type metadata accessor for BluetoothCommunicationCoordinator.Error);
}

uint64_t sub_10056C5C8(uint64_t a1, void (*a2)(char *))
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  void (*v36)(char *);
  uint64_t v37;
  uint64_t v38;

  v36 = a2;
  v3 = sub_10001A9A8(&qword_1010FF528);
  __chkstk_darwin(v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F39C8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v33 - v10;
  v12 = type metadata accessor for AccessoryMetadata(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010FD188);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v17, &qword_1010FD188);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    v18 = *v17;
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v19 = type metadata accessor for Logger(0);
    sub_10001A9E8(v19, (uint64_t)qword_1011B7148);
    swift_errorRetain(v18);
    v20 = swift_errorRetain(v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v35 = v6;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v37 = v18;
      v38 = v24;
      *(_DWORD *)v23 = 136446210;
      v34 = v23 + 4;
      swift_errorRetain(v18);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v26 = String.init<A>(describing:)(&v37, v25);
      v37 = sub_100016940(v26, v27, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v34, v23 + 12);
      v6 = v35;
      swift_bridgeObjectRelease();
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "readMetadataCombine failed due to %{public}s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    v38 = v18;
    swift_errorRetain(v18);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v30 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    v31 = swift_dynamicCast(v5, &v38, v29, v30, 6);
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
    if (v31)
    {
      v32(v5, 0, 1, v30);
      sub_1000126EC((uint64_t)v5, (uint64_t)v9, type metadata accessor for BluetoothCommunicationCoordinator.Error);
    }
    else
    {
      v32(v5, 1, 1, v30);
      swift_storeEnumTagMultiPayload(v9, v30, 3);
      sub_100004048((uint64_t)v5, &qword_1010FF528);
    }
    swift_storeEnumTagMultiPayload(v9, v6, 1);
    v36(v9);
    swift_errorRelease(v18);
    return sub_100004048((uint64_t)v9, &qword_1010F39C8);
  }
  else
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v14, type metadata accessor for AccessoryMetadata);
    sub_10005972C((uint64_t)v14, (uint64_t)v11, type metadata accessor for AccessoryMetadata);
    swift_storeEnumTagMultiPayload(v11, v6, 0);
    v36(v11);
    sub_100004048((uint64_t)v11, &qword_1010F39C8);
    return sub_1000126B0((uint64_t)v14, type metadata accessor for AccessoryMetadata);
  }
}

void sub_10056CA20(void *a1, void (*a2)(void), void *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  id v51;
  char *v52;
  uint64_t v53;
  char v54;
  void (*v55)(uint64_t, char *);
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t inited;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  id v88;
  void *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void *v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  _BOOL4 v118;
  _DWORD *v119;
  unint64_t v120;
  char *v121;
  uint64_t v122;
  id v123;
  unsigned int v124;
  id v125;
  NSString v126;
  unsigned int v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  void *v133;
  id v134;
  void *v135;
  void *v136;
  id v137;
  unsigned __int8 v138;
  void *v139;
  id v140;
  unsigned int v141;
  id v142;
  unsigned int v143;
  id v144;
  unsigned int v145;
  uint64_t v146;
  char v147;
  char v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  NSObject *v155;
  NSObject *v156;
  os_log_type_t v157;
  uint64_t v158;
  id v159;
  unsigned int v160;
  id v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  id v164;
  unsigned __int8 v165;
  id v166;
  id v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  os_log_type_t v191;
  uint8_t *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  void (*v198)(char *, uint64_t);
  uint8_t *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _QWORD v219[9];
  uint64_t v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t *v234;
  char *v235;
  uint64_t v236;
  char *v237;
  void *v238;
  void (*v239)(void);
  __int128 v240;
  void *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245[13];
  uint64_t v246;
  char v247[80];
  uint64_t v248;
  uint64_t v249;

  v238 = a3;
  v239 = a2;
  v241 = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v4);
  v219[7] = (char *)v219 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v220 = type metadata accessor for SharedBeaconRecord(0);
  v219[6] = *(_QWORD *)(v220 - 8);
  v6 = __chkstk_darwin(v220);
  v219[4] = (char *)v219 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v219[5] = (char *)v219 - v9;
  __chkstk_darwin(v8);
  v219[8] = (char *)v219 - v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v223 = (char *)v219 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v13);
  v227 = (char *)v219 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v225 = *(_QWORD *)(v15 - 8);
  v226 = v15;
  __chkstk_darwin(v15);
  v228 = (char *)v219 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v17);
  v229 = (char *)v219 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v20 = __chkstk_darwin(v19);
  v221 = (char *)v219 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v219[2] = (char *)v219 - v23;
  __chkstk_darwin(v22);
  v230 = (char *)v219 - v24;
  v25 = type metadata accessor for MACAddress(0);
  v232 = *(_QWORD *)(v25 - 8);
  v233 = v25;
  v26 = __chkstk_darwin(v25);
  v222 = (char *)v219 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v219[3] = (char *)v219 - v29;
  v30 = __chkstk_darwin(v28);
  v224 = (char *)v219 - v31;
  __chkstk_darwin(v30);
  v231 = (uint64_t)v219 - v32;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v33);
  v35 = (uint64_t)v219 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (char *)type metadata accessor for Date(0);
  v37 = *((_QWORD *)v36 - 1);
  v38 = __chkstk_darwin(v36);
  v235 = (char *)v219 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v237 = (char *)v219 - v41;
  LODWORD(v240) = static os_log_type_t.default.getter(v40);
  if (qword_1010EA270 != -1)
    goto LABEL_78;
  while (1)
  {
    v42 = qword_1011B7D50;
    v236 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v43 = swift_allocObject(v236, 112, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100E22B10;
    v245[0] = *v3;
    v44 = sub_10001A9A8(&qword_1010FF3D8);
    v45 = String.init<A>(describing:)(v245, v44);
    v47 = v46;
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    v48 = sub_10001AA00();
    *(_QWORD *)(v43 + 32) = v45;
    *(_QWORD *)(v43 + 40) = v47;
    *(_QWORD *)(v43 + 96) = &type metadata for String;
    *(_QWORD *)(v43 + 104) = v48;
    v49 = v48;
    *(_QWORD *)(v43 + 64) = v48;
    *(_QWORD *)(v43 + 72) = 0xD000000000000039;
    *(_QWORD *)(v43 + 80) = 0x8000000100EDAFE0;
    os_log(_:dso:log:_:_:)(v240, &_mh_execute_header, v42, "%{public}@: %{public}@", 22, 2, v43);
    swift_bridgeObjectRelease();
    v50 = v241;
    v51 = objc_msgSend(v241, "trackingIdentifier");
    v234 = v3;
    sub_100562940(v51, v35);

    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v37 + 48))(v35, 1, v36) == 1)
    {
      sub_100004048(v35, (uint64_t *)&unk_1010EA690);
    }
    else
    {
      v52 = v237;
      (*(void (**)(char *, uint64_t, char *))(v37 + 32))(v237, v35, v36);
      v53 = (uint64_t)v235;
      static Date.trustedNow.getter((uint64_t)v235);
      v54 = static Date.> infix(_:_:)(v52, v53);
      v55 = *(void (**)(uint64_t, char *))(v37 + 8);
      v55(v53, v36);
      if ((v54 & 1) != 0)
      {
        v235 = v36;
        v56 = v236;
        v57 = swift_allocObject(v236, 72, 7);
        v240 = xmmword_100E22B00;
        *(_OWORD *)(v57 + 16) = xmmword_100E22B00;
        v58 = objc_msgSend(v50, "trackingIdentifier");
        v59 = objc_msgSend(v58, "advertisementData");

        v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v62 = v61;

        v63 = Data.hexString.getter(v60, v62);
        v65 = v64;
        sub_10001BC14(v60, v62);
        *(_QWORD *)(v57 + 56) = &type metadata for String;
        *(_QWORD *)(v57 + 64) = v49;
        *(_QWORD *)(v57 + 32) = v63;
        *(_QWORD *)(v57 + 40) = v65;
        v66 = String.init(format:_:)(0xD00000000000003CLL, 0x8000000100EDB1F0, v57);
        v68 = v67;
        v69 = static os_log_type_t.default.getter(v66);
        if (qword_1010EA2F8 != -1)
          swift_once(&qword_1010EA2F8, sub_100B5E19C);
        v70 = qword_1011B7DD8;
        v71 = swift_allocObject(v56, 72, 7);
        *(_OWORD *)(v71 + 16) = v240;
        *(_QWORD *)(v71 + 56) = &type metadata for String;
        *(_QWORD *)(v71 + 64) = v49;
        *(_QWORD *)(v71 + 32) = v66;
        *(_QWORD *)(v71 + 40) = v68;
        *(_QWORD *)&v72 = swift_bridgeObjectRetain(v68).n128_u64[0];
        os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "%@", 2, 2, v71, v72);
        swift_bridgeObjectRelease();
        type metadata accessor for TrackingAvoidanceError(0);
        v74 = v73;
        v248 = 7;
        v75 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
        inited = swift_initStackObject(v75, &v242);
        *(_OWORD *)(inited + 16) = v240;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(inited + 40) = v77;
        *(_QWORD *)(inited + 72) = &type metadata for String;
        *(_QWORD *)(inited + 48) = v66;
        *(_QWORD *)(inited + 56) = v68;
        v78 = sub_1006B8B10(inited);
        v79 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
        _BridgedStoredNSError.init(_:userInfo:)(v245, &v248, v78, v74, v79);
        v80 = (void *)v245[0];
        ((void (*)(uint64_t))v239)(v245[0]);

        v55((uint64_t)v237, v235);
        return;
      }
      v55((uint64_t)v52, v36);
    }
    v81 = objc_msgSend(v50, "observedLocations");
    v82 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
    v83 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v81, v82);

    if ((unint64_t)v83 >> 62)
    {
      if (v83 < 0)
        v217 = v83;
      else
        v217 = v83 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v83);
      v84 = _CocoaArrayWrapper.endIndex.getter(v217);
      swift_bridgeObjectRelease();
    }
    else
    {
      v84 = *(_QWORD *)((v83 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v85 = swift_bridgeObjectRelease();
    if (!v84)
    {
      v100 = static os_log_type_t.error.getter(v85);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v100, &_mh_execute_header, qword_1011B7DD8, "There is no location", 20, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v94 = v101;
      v248 = 4;
      v102 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      v96 = swift_initStackObject(v102, &v243);
      *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v96 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(v96 + 40) = v103;
      *(_QWORD *)(v96 + 72) = &type metadata for String;
      v98 = 0xD000000000000027;
      v99 = "location was not present in the request";
      goto LABEL_24;
    }
    v86 = objc_msgSend(v50, "observedLocations", v49);
    v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v86, v82);

    if ((unint64_t)v37 >> 62)
      break;
    v87 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v37);
    if (!v87)
      goto LABEL_26;
LABEL_14:
    *(_QWORD *)&v240 = v37 & 0xC000000000000001;
    if ((v37 & 0xC000000000000001) != 0)
      v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v37);
    else
      v88 = *(id *)(v37 + 32);
    v89 = v88;
    v90 = sub_100B8C778();

    if ((v90 & 1) != 0)
    {
LABEL_17:
      v91 = swift_bridgeObjectRelease_n(v37, 2);
LABEL_18:
      v92 = static os_log_type_t.error.getter(v91);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v92, &_mh_execute_header, qword_1011B7DD8, "received locations within blocked regions", 41, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v94 = v93;
      v248 = 11;
      v95 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      v96 = swift_initStackObject(v95, &v244);
      *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v96 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(v96 + 40) = v97;
      *(_QWORD *)(v96 + 72) = &type metadata for String;
      v98 = 0xD00000000000001CLL;
      v99 = "Locations in blocked regions";
LABEL_24:
      *(_QWORD *)(v96 + 48) = v98;
      *(_QWORD *)(v96 + 56) = (unint64_t)(v99 - 32) | 0x8000000000000000;
      v104 = sub_1006B8B10(v96);
      v105 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
      _BridgedStoredNSError.init(_:userInfo:)(v245, &v248, v104, v94, v105);
      v106 = (void *)v245[0];
      ((void (*)(uint64_t))v239)(v245[0]);
      goto LABEL_74;
    }
    if (v87 == 1)
      goto LABEL_26;
    v237 = (char *)objc_opt_self(FMSystemInfo);
    v35 = 5;
    v235 = (char *)0xD000000000000013;
    v219[1] = 0x8000000100EDB150;
    v3 = (uint64_t *)&unk_1010F4000;
    while (1)
    {
      v121 = (_QWORD)v240
           ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v35 - 4, v37)
           : (char *)*(id *)(v37 + 8 * v35);
      v36 = v121;
      v122 = v35 - 3;
      if (__OFADD__(v35 - 4, 1))
        break;
      v123 = objc_msgSend(v237, "sharedInstance");
      v124 = objc_msgSend(v123, "isInternalBuild");

      if (v124)
      {
        v125 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v126 = String._bridgeToObjectiveC()();
        v127 = objc_msgSend(v125, "BOOLForKey:", v126);

        if (v127)
        {
          v200 = static os_log_type_t.default.getter(v128);
          v201 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
          v202 = (void *)static OS_os_log.default.getter(v201);
          os_log(_:dso:log:_:_:)(v200, &_mh_execute_header, v202, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);
          swift_bridgeObjectRelease_n(v37, 2);

          goto LABEL_18;
        }
      }
      objc_msgSend(v36, "latitude");
      v130 = v129;
      objc_msgSend(v36, "longitude");
      v132 = v131;
      if (qword_1010E9AD8 != -1)
        swift_once(&qword_1010E9AD8, sub_100264FD8);
      if (objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v130, v132))
      {
        v133 = (void *)qword_1010F46B0;
        if (qword_1010F46B0)
        {
          v134 = (id)qword_1010F46B0;
        }
        else
        {
          v135 = (void *)sub_100265274();
          v136 = (void *)qword_1010F46B0;
          qword_1010F46B0 = (uint64_t)v135;
          v134 = v135;

          v133 = 0;
        }
        v137 = v133;
        v138 = objc_msgSend(v134, "containsCoordinate:", v130, v132);

        if ((v138 & 1) != 0)
          goto LABEL_17;
      }
      else
      {

      }
      ++v35;
      if (v122 == v87)
        goto LABEL_26;
    }
    __break(1u);
LABEL_78:
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  }
  if (v37 < 0)
    v218 = v37;
  else
    v218 = v37 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v37);
  v87 = _CocoaArrayWrapper.endIndex.getter(v218);
  if (v87)
    goto LABEL_14;
LABEL_26:
  swift_bridgeObjectRelease_n(v37, 2);
  v107 = objc_msgSend(v241, "trackingIdentifier");
  v108 = objc_msgSend(v107, "data");

  v109 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v108);
  *(_QWORD *)&v240 = v110;

  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  v111 = type metadata accessor for Logger(0);
  v112 = (char *)sub_10001A9E8(v111, (uint64_t)qword_1010FF230);
  v113 = v240;
  v114 = (unint64_t)v240 >> 62;
  sub_10001BBBC(v109, v240);
  v115 = sub_10001BBBC(v109, v113);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.default.getter(v116);
  v118 = os_log_type_enabled(v116, v117);
  v237 = v112;
  v235 = (char *)v114;
  if (v118)
  {
    v119 = (_DWORD *)swift_slowAlloc(22, -1);
    v245[0] = swift_slowAlloc(32, -1);
    *v119 = 134218242;
    __asm { BR              X11 }
  }
  v120 = v240;
  sub_10001BC14(v109, v240);
  sub_10001BC14(v109, v120);

  v139 = v241;
  v140 = objc_msgSend(v241, "trackingIdentifier");
  v141 = objc_msgSend(v140, "isPosh");

  v142 = objc_msgSend(v139, "trackingIdentifier");
  v143 = objc_msgSend(v142, "networkID");

  v144 = objc_msgSend(v139, "trackingIdentifier");
  v145 = objc_msgSend(v144, "status");

  if (v143 == 1)
    v147 = 5;
  else
    v147 = 6;
  if (v141)
    v148 = v147;
  else
    v148 = (v145 >> 4) & 3;
  v149 = Logger.logObject.getter(v146);
  v150 = static os_log_type_t.default.getter(v149);
  if (os_log_type_enabled(v149, v150))
  {
    v151 = (uint8_t *)swift_slowAlloc(12, -1);
    v152 = swift_slowAlloc(32, -1);
    v245[0] = v152;
    *(_DWORD *)v151 = 136446210;
    v153 = sub_1005632A4(v148);
    v248 = sub_100016940(v153, v154, v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v151 + 4, v151 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v149, v150, "UnauthorizedTrackingAdvertisementType: %{public}s", v151, 0xCu);
    swift_arrayDestroy(v152, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v152, -1, -1);
    swift_slowDealloc(v151, -1, -1);
  }

  if (v148 == 4)
  {
    v155 = v241;
    v156 = Logger.logObject.getter(v155);
    v157 = static os_log_type_t.error.getter(v156);
    if (os_log_type_enabled(v156, v157))
    {
      v158 = swift_slowAlloc(14, -1);
      *(_DWORD *)v158 = 67109632;
      v159 = -[NSObject trackingIdentifier](v155, "trackingIdentifier");
      v160 = objc_msgSend(v159, "isPosh");

      LODWORD(v245[0]) = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v245, (char *)v245 + 4, v158 + 4, v158 + 8);

      *(_WORD *)(v158 + 8) = 256;
      v161 = -[NSObject trackingIdentifier](v155, "trackingIdentifier");
      v162 = objc_msgSend(v161, "networkID");
      v236 = v109;
      v163 = v162;

      LOBYTE(v245[0]) = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v245, (char *)v245 + 1, v158 + 10, v158 + 11);

      *(_WORD *)(v158 + 11) = 256;
      v164 = -[NSObject trackingIdentifier](v155, "trackingIdentifier");
      v165 = objc_msgSend(v164, "status");

      v109 = v236;
      LOBYTE(v245[0]) = v165;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v245, (char *)v245 + 1, v158 + 13, v158 + 14);

      _os_log_impl((void *)&_mh_execute_header, v156, v157, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v158, 0xEu);
      swift_slowDealloc(v158, -1, -1);
    }
    else
    {

      v156 = v155;
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v182 = v181;
    v248 = 6;
    v183 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v184 = swift_initStackObject(v183, v247);
    *(_OWORD *)(v184 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v184 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v184 + 40) = v185;
    *(_QWORD *)(v184 + 72) = &type metadata for String;
    *(_QWORD *)(v184 + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(v184 + 56) = 0x8000000100EDB020;
    v210 = sub_1006B8B10(v184);
    v211 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v245, &v248, v210, v182, v211);
    v106 = (void *)v245[0];
    ((void (*)(uint64_t))v239)(v245[0]);
    v212 = v109;
    v213 = v240;
LABEL_73:
    sub_10001BC14(v212, v213);
LABEL_74:

    return;
  }
  if (v148 != 6)
  {
    if (v148 == 5)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  v166 = objc_msgSend(v241, "trackingIdentifier");
  v167 = objc_msgSend(v166, "address");

  v168 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v167);
  v170 = v169;

  sub_10001BBBC(v168, v170);
  v171 = (uint64_t)v230;
  MACAddress.init(data:type:)(v168);
  v172 = v232;
  v173 = v233;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v232 + 48))(v171, 1, v233) == 1)
  {
    sub_100004048(v171, (uint64_t *)&unk_1010F9890);
    sub_10001BBBC(v168, v170);
    v174 = sub_10001BBBC(v168, v170);
    v175 = Logger.logObject.getter(v174);
    v176 = static os_log_type_t.error.getter(v175);
    if (os_log_type_enabled(v175, v176))
    {
      v177 = (uint8_t *)swift_slowAlloc(12, -1);
      v178 = swift_slowAlloc(32, -1);
      v245[0] = v178;
      v236 = v109;
      *(_DWORD *)v177 = 136446210;
      v179 = Data.hexString.getter(v168, v170);
      v248 = sub_100016940(v179, v180, v245);
      v109 = v236;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v177 + 4, v177 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v168, v170);
      sub_10001BC14(v168, v170);
      _os_log_impl((void *)&_mh_execute_header, v175, v176, "Invalid MAC address %{public}s", v177, 0xCu);
      swift_arrayDestroy(v178, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v178, -1, -1);
      swift_slowDealloc(v177, -1, -1);
    }
    else
    {
      sub_10001BC14(v168, v170);
      sub_10001BC14(v168, v170);
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v204 = v203;
    v248 = 3;
    v205 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v206 = swift_initStackObject(v205, &v246);
    *(_OWORD *)(v206 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v206 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v206 + 40) = v207;
    *(_QWORD *)(v206 + 72) = &type metadata for String;
    *(_QWORD *)(v206 + 48) = 0xD00000000000001FLL;
    *(_QWORD *)(v206 + 56) = 0x8000000100EDB040;
    v208 = sub_1006B8B10(v206);
    v209 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v245, &v248, v208, v204, v209);
    v106 = (void *)v245[0];
    ((void (*)(uint64_t))v239)(v245[0]);
    sub_10001BC14(v109, v240);
    v212 = v168;
    v213 = v170;
    goto LABEL_73;
  }
  v236 = v109;
  v186 = v231;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 32))(v231, v171, v173);
  v187 = v224;
  v188 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 16))(v224, v186, v173);
  v189 = v172;
  v190 = Logger.logObject.getter(v188);
  v191 = static os_log_type_t.default.getter(v190);
  if (os_log_type_enabled(v190, v191))
  {
    v192 = (uint8_t *)swift_slowAlloc(12, -1);
    v193 = v187;
    v194 = swift_slowAlloc(32, -1);
    v245[0] = v194;
    *(_DWORD *)v192 = 136446210;
    v237 = (char *)(v192 + 4);
    v195 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v196 = dispatch thunk of CustomStringConvertible.description.getter(v233, v195);
    v248 = sub_100016940(v196, v197, v245);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v237, v192 + 12);
    swift_bridgeObjectRelease();
    v198 = *(void (**)(char *, uint64_t))(v232 + 8);
    v198(v193, v233);
    _os_log_impl((void *)&_mh_execute_header, v190, v191, "Posh address: %{public}s", v192, 0xCu);
    swift_arrayDestroy(v194, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v194, -1, -1);
    v199 = v192;
    v173 = v233;
    swift_slowDealloc(v199, -1, -1);
  }
  else
  {
    v198 = *(void (**)(char *, uint64_t))(v189 + 8);
    v198(v187, v173);
  }

  v214 = type metadata accessor for UUID(0);
  v215 = (uint64_t)v229;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v214 - 8) + 56))(v229, 1, 1, v214);
  v216 = v231;
  sub_10056EED8(v231, v215, v241, 0, 0, 0, v239, v238);
  sub_10001BC14(v168, v170);
  sub_10001BC14(v236, v240);
  sub_100004048(v215, &qword_1010ED860);
  v198((char *)v216, v173);
}

void sub_10056EED8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void *a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  os_log_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  id v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  os_log_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void *v87;
  void (*v88)(void);
  void *v89;
  uint64_t v90;
  char v91[80];
  uint64_t v92;
  uint64_t v93[2];

  v88 = a7;
  v89 = a8;
  v81 = a6;
  v80 = a5;
  v79 = a4;
  v87 = a3;
  v90 = type metadata accessor for WildModeTrackingLocation(0);
  v11 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v13 = (os_log_t *)((char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v84 = type metadata accessor for MACAddress(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v85 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v15);
  v17 = (char *)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for WildModeAssociationRecord(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v76 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v24 = (char *)&v76 - v23;
  v86 = a1;
  v82 = v8;
  sub_100570340(a1, a2, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
    v35 = (uint64_t)v24;
    if (qword_1010E9CE8 != -1)
      swift_once(&qword_1010E9CE8, sub_100563934);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1010FF230);
    sub_10005972C((uint64_t)v24, (uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
    v37 = v83;
    v38 = v85;
    v39 = v84;
    v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 16))(v85, v86, v84);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      v44 = swift_slowAlloc(22, -1);
      v78 = swift_slowAlloc(64, -1);
      v93[0] = v78;
      *(_DWORD *)v44 = 136315394;
      v76 = (os_log_t)(v44 + 4);
      v45 = type metadata accessor for UUID(0);
      v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v77 = v43;
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
      v92 = sub_100016940(v47, v48, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v76, v44 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
      *(_WORD *)(v44 + 12) = 2080;
      v49 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v76 = v41;
      v50 = v35;
      v51 = v85;
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v39, v49);
      v92 = sub_100016940(v52, v53, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v44 + 14, v44 + 22);
      swift_bridgeObjectRelease();
      v54 = v51;
      v35 = v50;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v54, v39);
      v55 = v76;
      _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v77, "update: found UT record UUID %s address %s.", (uint8_t *)v44, 0x16u);
      v56 = v78;
      swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {
      sub_1000126B0((uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v39);

    }
    v57 = objc_msgSend(v87, "observedLocations");
    v58 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
    v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v57, v58);

    if ((unint64_t)v59 >> 62)
    {
      if (v59 < 0)
        v74 = v59;
      else
        v74 = v59 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v59);
      v60 = _CocoaArrayWrapper.endIndex.getter(v74);
      swift_bridgeObjectRelease();
      if (v60)
        goto LABEL_12;
    }
    else
    {
      v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v60)
      {
LABEL_12:
        v93[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_10009AED0(0, v60 & ~(v60 >> 63), 0);
        if (v60 < 0)
        {
          __break(1u);
          return;
        }
        v85 = (char *)v35;
        v61 = 0;
        v62 = (_QWORD *)v93[0];
        do
        {
          if ((v59 & 0xC000000000000001) != 0)
            v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v61, v59);
          else
            v63 = *(id *)(v59 + 8 * v61 + 32);
          v64 = v63;
          objc_msgSend(v63, "latitude");
          v66 = v65;
          objc_msgSend(v64, "longitude");
          v68 = v67;
          objc_msgSend(v64, "horizontalAccuracy");
          v70 = v69;
          v71 = objc_msgSend(v64, "timestamp");
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

          *v13 = v66;
          v13[1] = v68;
          v13[2] = v70;
          v93[0] = (uint64_t)v62;
          v73 = v62[2];
          v72 = v62[3];
          if (v73 >= v72 >> 1)
          {
            sub_10009AED0(v72 > 1, v73 + 1, 1);
            v62 = (_QWORD *)v93[0];
          }
          ++v61;
          v62[2] = v73 + 1;
          sub_1000126EC((uint64_t)v13, (uint64_t)v62+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v73, type metadata accessor for WildModeTrackingLocation);
        }
        while (v60 != v61);
        swift_bridgeObjectRelease();
        v35 = (uint64_t)v85;
LABEL_26:
        v75 = v89;
        swift_retain();
        sub_10057CFA0(v35, v87, v86, v79, v80, v81, (uint64_t)v62, v82, v88, v75);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1000126B0(v35, type metadata accessor for WildModeAssociationRecord);
        return;
      }
    }
    swift_bridgeObjectRelease();
    v62 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v25 = sub_100004048((uint64_t)v17, &qword_101102FB0);
  v26 = static os_log_type_t.error.getter(v25);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7DD8, "No wildModeAssociationRecord found", 34, 2, _swiftEmptyArrayStorage);
  type metadata accessor for TrackingAvoidanceError(0);
  v28 = v27;
  v92 = 3;
  v29 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v29, v91);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v31;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD000000000000027;
  *(_QWORD *)(inited + 56) = 0x8000000100EDB2D0;
  v32 = sub_1006B8B10(inited);
  v33 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  _BridgedStoredNSError.init(_:userInfo:)(v93, &v92, v32, v28, v33);
  v34 = (void *)v93[0];
  ((void (*)(uint64_t))v88)(v93[0]);

}

uint64_t sub_10056F6E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;

  if (!a2)
  {
    v5 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, qword_1011B7DD8, "Successfully updated existing UT record.", 40, 2, _swiftEmptyArrayStorage);
  }
  return a3(a2);
}

uint64_t sub_10056F77C(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  void (*v48)(void);
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  void (*v67)(void);
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  void (*v87)(void);
  uint64_t v88;

  v5 = v4;
  v81 = a4;
  v87 = (void (*)(void))a3;
  v75 = a2;
  v7 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v7);
  v79 = (uint64_t)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for WildModeAssociationRecord(0);
  v77 = *(_QWORD *)(v9 - 8);
  v78 = v9;
  __chkstk_darwin(v9);
  v74 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v11);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for MACAddress(0);
  v14 = *(_QWORD *)(v86 - 8);
  v15 = __chkstk_darwin(v86);
  v80 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = static os_log_type_t.default.getter(v15);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v84 = qword_1011B7D50;
  v82 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v17 = swift_allocObject(v82, 152, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100E221E0;
  v88 = *v5;
  v18 = sub_10001A9A8(&qword_1010FF3D8);
  v19 = String.init<A>(describing:)(&v88, v18);
  v76 = v5;
  v20 = v19;
  v22 = v21;
  *(_QWORD *)(v17 + 56) = &type metadata for String;
  v23 = sub_10001AA00();
  *(_QWORD *)(v17 + 32) = v20;
  *(_QWORD *)(v17 + 40) = v22;
  *(_QWORD *)(v17 + 96) = &type metadata for String;
  *(_QWORD *)(v17 + 104) = v23;
  *(_QWORD *)(v17 + 64) = v23;
  *(_QWORD *)(v17 + 72) = 0xD00000000000002FLL;
  *(_QWORD *)(v17 + 80) = 0x8000000100EDB8D0;
  v24 = objc_msgSend(a1, "data");
  v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = Data.hexString.getter(v25, v27);
  v30 = v29;
  sub_10001BC14(v25, v27);
  *(_QWORD *)(v17 + 136) = &type metadata for String;
  *(_QWORD *)(v17 + 144) = v23;
  v83 = v23;
  *(_QWORD *)(v17 + 112) = v28;
  *(_QWORD *)(v17 + 120) = v30;
  os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v84, "%{public}@: %{public}@ ignoring device %@", 41, 2, v17);
  swift_bridgeObjectRelease();
  v31 = a1;
  v32 = objc_msgSend(a1, "address");
  v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v32);

  MACAddress.init(data:type:)(v33);
  v34 = v86;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v86) == 1)
  {
    v35 = sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010F9890);
    v36 = static os_log_type_t.default.getter(v35);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v37 = qword_1011B7DD8;
    v38 = swift_allocObject(v82, 72, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
    v39 = objc_msgSend(a1, "data");
    v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v42 = v41;

    v43 = Data.hexString.getter(v40, v42);
    v45 = v44;
    sub_10001BC14(v40, v42);
    v46 = v83;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    *(_QWORD *)(v38 + 64) = v46;
    *(_QWORD *)(v38 + 32) = v43;
    *(_QWORD *)(v38 + 40) = v45;
    os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Invalid advertisement: %@", 25, 2, v38);
    result = swift_bridgeObjectRelease();
    v48 = v87;
    if (v87)
    {
      v49 = sub_10058A1B8();
      v50 = swift_allocError(&type metadata for UTError, v49, 0, 0);
      *v51 = 1;
      v48();
      return swift_errorRelease(v50);
    }
  }
  else
  {
    v52 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v80, v13, v34);
    v53 = v79;
    sub_100D82548(v52, v79);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v53, 1, v78) == 1)
    {
      v54 = v14;
      v55 = sub_100004048(v53, &qword_101102FB0);
      v56 = static os_log_type_t.default.getter(v55);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      v57 = qword_1011B7DD8;
      v58 = swift_allocObject(v82, 72, 7);
      *(_OWORD *)(v58 + 16) = xmmword_100E22B00;
      v59 = objc_msgSend(v31, "data");
      v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
      v62 = v61;

      v63 = Data.hexString.getter(v60, v62);
      v65 = v64;
      sub_10001BC14(v60, v62);
      v66 = v83;
      *(_QWORD *)(v58 + 56) = &type metadata for String;
      *(_QWORD *)(v58 + 64) = v66;
      *(_QWORD *)(v58 + 32) = v63;
      *(_QWORD *)(v58 + 40) = v65;
      os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v57, "WildModeAssociationRecord not found for advertisement: %@", 57, 2, v58);
      swift_bridgeObjectRelease();
      v67 = v87;
      if (v87)
      {
        v68 = sub_10058A1B8();
        v69 = swift_allocError(&type metadata for UTError, v68, 0, 0);
        *v70 = 0;
        v67();
        swift_errorRelease(v69);
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 8))(v52, v34);
    }
    else
    {
      v71 = v53;
      v72 = v74;
      sub_1000126EC(v71, v74, type metadata accessor for WildModeAssociationRecord);
      sub_100573498(v72, v75, (void (*)(uint64_t))v87, v81);
      sub_1000126B0(v72, type metadata accessor for WildModeAssociationRecord);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v52, v34);
    }
  }
  return result;
}

uint64_t sub_10056FD90(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;

  v31 = a2;
  v32 = a4;
  v35 = a1;
  v36 = (void (*)(void))a3;
  v5 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for WildModeAssociationRecord(0);
  v8 = *(_QWORD *)(v34 - 8);
  v9 = __chkstk_darwin(v34);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v12 = qword_1011B7D50;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 152, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E221E0;
  v37 = *v4;
  v15 = sub_10001A9A8(&qword_1010FF3D8);
  v16 = String.init<A>(describing:)(&v37, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 72) = 0xD00000000000002ALL;
  *(_QWORD *)(v14 + 80) = 0x8000000100EDB850;
  v20 = v35;
  v21 = UUID.uuidString.getter(v19);
  *(_QWORD *)(v14 + 136) = &type metadata for String;
  *(_QWORD *)(v14 + 144) = v19;
  *(_QWORD *)(v14 + 112) = v21;
  *(_QWORD *)(v14 + 120) = v22;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v12, "%{public}@: %{public}@ ignoring device %@", 41, 2, v14);
  swift_bridgeObjectRelease();
  sub_10081C45C(v20, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v34) == 1)
  {
    v23 = sub_100004048((uint64_t)v7, &qword_101102FB0);
    v24 = static os_log_type_t.default.getter(v23);
    v25 = v36;
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    result = os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7DD8, "No UT found for the given beacon UUID.", 38, 2, _swiftEmptyArrayStorage);
    if (v25)
    {
      v27 = sub_10058A1B8();
      v28 = swift_allocError(&type metadata for UTError, v27, 0, 0);
      *v29 = 0;
      v25();
      return swift_errorRelease(v28);
    }
  }
  else
  {
    sub_1000126EC((uint64_t)v7, (uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
    sub_100572EFC((uint64_t)v11, v31, (void (*)(uint64_t))v36, v32);
    return sub_1000126B0((uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
  }
  return result;
}

uint64_t sub_100570068(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t result;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  uint64_t v37;

  v31 = a2;
  v32 = a4;
  v35 = a1;
  v36 = (void (*)(void))a3;
  v5 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for WildModeAssociationRecord(0);
  v8 = *(_QWORD *)(v34 - 8);
  v9 = __chkstk_darwin(v34);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v12 = qword_1011B7D50;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 152, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E221E0;
  v37 = *v4;
  v15 = sub_10001A9A8(&qword_1010FF3D8);
  v16 = String.init<A>(describing:)(&v37, v15);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(v14 + 64) = v19;
  *(_QWORD *)(v14 + 72) = 0xD00000000000002ALL;
  *(_QWORD *)(v14 + 80) = 0x8000000100EDB850;
  v20 = v35;
  v21 = UUID.uuidString.getter(v19);
  *(_QWORD *)(v14 + 136) = &type metadata for String;
  *(_QWORD *)(v14 + 144) = v19;
  *(_QWORD *)(v14 + 112) = v21;
  *(_QWORD *)(v14 + 120) = v22;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v12, "%{public}@: %{public}@ ignoring device %@", 41, 2, v14);
  swift_bridgeObjectRelease();
  sub_10081C0CC(v20, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v34) == 1)
  {
    v23 = sub_100004048((uint64_t)v7, &qword_101102FB0);
    v24 = static os_log_type_t.default.getter(v23);
    v25 = v36;
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    result = os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, qword_1011B7DD8, "No UT found for the UUID.", 25, 2, _swiftEmptyArrayStorage);
    if (v25)
    {
      v27 = sub_10058A1B8();
      v28 = swift_allocError(&type metadata for UTError, v27, 0, 0);
      *v29 = 0;
      v25();
      return swift_errorRelease(v28);
    }
  }
  else
  {
    sub_1000126EC((uint64_t)v7, (uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
    sub_100573498((uint64_t)v11, v31, (void (*)(uint64_t))v36, v32);
    return sub_1000126B0((uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
  }
  return result;
}

uint64_t sub_100570340@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v36 = a3;
  v4 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v4);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WildModeAssociationRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v34 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a2, (uint64_t)v12, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v12, &qword_1010ED860);
    return sub_100D82548(v35, v36);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    sub_10081C45C((uint64_t)v16, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      sub_100004048((uint64_t)v6, &qword_101102FB0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v36, 1, 1, v7);
    }
    else
    {
      v35 = v8;
      v18 = v34;
      v19 = sub_1000126EC((uint64_t)v6, v34, type metadata accessor for WildModeAssociationRecord);
      v33 = static os_log_type_t.default.getter(v19);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      v32 = qword_1011B7DD8;
      v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v21 = swift_allocObject(v20, 152, 7);
      *(_OWORD *)(v21 + 16) = xmmword_100E221E0;
      v22 = UUID.uuidString.getter(v21);
      v24 = v23;
      *(_QWORD *)(v21 + 56) = &type metadata for String;
      v25 = sub_10001AA00();
      *(_QWORD *)(v21 + 64) = v25;
      *(_QWORD *)(v21 + 32) = v22;
      *(_QWORD *)(v21 + 40) = v24;
      v26 = UUID.uuidString.getter(v25);
      *(_QWORD *)(v21 + 96) = &type metadata for String;
      *(_QWORD *)(v21 + 104) = v25;
      *(_QWORD *)(v21 + 72) = v26;
      *(_QWORD *)(v21 + 80) = v27;
      v28 = MACAddress.description.getter(v26);
      *(_QWORD *)(v21 + 136) = &type metadata for String;
      *(_QWORD *)(v21 + 144) = v25;
      *(_QWORD *)(v21 + 112) = v28;
      *(_QWORD *)(v21 + 120) = v29;
      os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v32, "Existing Family UT record %@ beacon %@ address %@.", 50, 2, v21);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v30 = v36;
      sub_1000126EC(v18, v36, type metadata accessor for WildModeAssociationRecord);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v35 + 56))(v30, 0, 1, v7);
    }
  }
}

uint64_t sub_100570670(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;

  v19 = *v3;
  v20 = a2;
  v6 = type metadata accessor for WildModeAssociationRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v9, v10);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 16) & ~v11;
  v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_10107F368, v15 + 8, v11 | 7);
  sub_1000126EC((uint64_t)v9, v16 + v12, type metadata accessor for WildModeAssociationRecord);
  *(_QWORD *)(v16 + v13) = v3;
  v17 = (_QWORD *)(v16 + v14);
  *v17 = v20;
  v17[1] = a3;
  *(_QWORD *)(v16 + v15) = v19;
  swift_retain();
  swift_retain();
  sub_100CAA3C8(a1, (uint64_t)sub_10058BA10, v16);
  return swift_release();
}

void sub_1005707A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  int *v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void *v58;
  id v59;
  unsigned int v60;
  NSString v61;
  unsigned int v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  int v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *);
  uint64_t v98;
  char *aBlock;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v96 = a5;
  v97 = a4;
  v91 = a3;
  v89 = type metadata accessor for UnwantedTrackingUserNotification(0);
  __chkstk_darwin(v89);
  v90 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v11);
  v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for WildModeAssociationRecord(0);
  v14 = __chkstk_darwin(v98);
  v94 = (uint64_t)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v93 = (uint64_t)&v86 - v17;
  v18 = __chkstk_darwin(v16);
  v92 = (char *)&v86 - v19;
  v20 = __chkstk_darwin(v18);
  v95 = (char *)&v86 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v86 - v23;
  v25 = __chkstk_darwin(v22);
  v27 = (char *)&v86 - v26;
  __chkstk_darwin(v25);
  v29 = (char *)&v86 - v28;
  v30 = sub_10001A9A8((uint64_t *)&unk_10111C090);
  __chkstk_darwin(v30);
  v32 = (uint64_t *)((char *)&v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v32, (uint64_t *)&unk_10111C090);
  if (swift_getEnumCaseMultiPayload(v32, v30) == 1)
  {
    v33 = *v32;
    if (qword_1010E9CE8 != -1)
      swift_once(&qword_1010E9CE8, sub_100563934);
    v34 = type metadata accessor for Logger(0);
    sub_10001A9E8(v34, (uint64_t)qword_1010FF230);
    swift_errorRetain(v33);
    v35 = swift_errorRetain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v38 = 138543362;
      swift_errorRetain(v33);
      v40 = _swift_stdlib_bridgeErrorToNSError(v33);
      aBlock = (char *)v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v100, v38 + 4, v38 + 12);
      *v39 = v40;
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error saving UT alert record %{public}@", v38, 0xCu);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v39, 1, v41);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_errorRelease(v33);
      swift_errorRelease(v33);
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v51 = v50;
    v101 = 1;
    v52 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v53 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v101, v52, v51, v53);
    v54 = aBlock;
    v97(aBlock);
    swift_errorRelease(v33);

    return;
  }
  v87 = v29;
  sub_1000126EC((uint64_t)v32, (uint64_t)v29, type metadata accessor for WildModeAssociationRecord);
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  v42 = type metadata accessor for Logger(0);
  v43 = sub_10001A9E8(v42, (uint64_t)qword_1010FF230);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "UT alert saved successfully.", v46, 2u);
    swift_slowDealloc(v46, -1, -1);
  }

  v47 = (int *)v98;
  v48 = *(unsigned __int8 *)(a2 + *(int *)(v98 + 64));
  if (v48 != 8)
  {
    if ((v48 & 0xFA) != 0)
      sub_1007F4EB8();
    if (v48 > 6 || v48 == 2)
      sub_1007F77E0();
  }
  v49 = *(unsigned __int8 *)(a2 + v47[13]);
  if (v49 == 4)
  {
    sub_10005972C(a2, (uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
  }
  else
  {
    sub_10005972C(a2, (uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
    if (v49 == 1)
    {
      sub_1000126B0((uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
LABEL_26:
      v63 = 0;
      v57 = (uint64_t)v95;
      goto LABEL_29;
    }
  }
  sub_10000F9B8((uint64_t)&v27[v47[14]], (uint64_t)v13, &qword_101115E60);
  sub_1000126B0((uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
  v55 = type metadata accessor for AccessoryMetadata(0);
  v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v13, 1, v55);
  sub_100004048((uint64_t)v13, &qword_101115E60);
  if (v56 != 1)
    goto LABEL_26;
  v57 = (uint64_t)v95;
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v58 = (void *)qword_1011B7C08;
  v59 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v60 = objc_msgSend(v59, "isInternalBuild");

  if (v60)
  {
    v61 = String._bridgeToObjectiveC()();
    v62 = objc_msgSend(v58, "BOOLForKey:", v61);

    v63 = v62 ^ 1;
  }
  else
  {
    v63 = 1;
  }
  v47 = (int *)v98;
LABEL_29:
  sub_10000F9B8(a2 + v47[15], (uint64_t)v10, (uint64_t *)&unk_10111C0A0);
  v64 = type metadata accessor for AccessoryProductInfo(0);
  v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 48))(v10, 1, v64);
  v88 = v43;
  if (v65 == 1)
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_10111C0A0);
    sub_10005972C(a2, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
    goto LABEL_34;
  }
  v66 = v10[*(int *)(v64 + 180)];
  sub_1000126B0((uint64_t)v10, type metadata accessor for AccessoryProductInfo);
  sub_10005972C(a2, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
  if (v66 == 2 || (v66 & 1) != 0)
LABEL_34:
    __asm { BR              X10 }
  v67 = (uint64_t)v92;
  sub_1000126B0((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
  sub_10005972C(a2, v57, type metadata accessor for WildModeAssociationRecord);
  sub_10005972C(a2, v67, type metadata accessor for WildModeAssociationRecord);
  v68 = v93;
  sub_10005972C(a2, v93, type metadata accessor for WildModeAssociationRecord);
  v69 = v94;
  v70 = sub_10005972C(a2, v94, type metadata accessor for WildModeAssociationRecord);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.default.getter(v71);
  if (os_log_type_enabled(v71, (os_log_type_t)v72))
  {
    LODWORD(v95) = v72;
    v74 = swift_slowAlloc(54, -1);
    v92 = (char *)swift_slowAlloc(128, -1);
    aBlock = v92;
    *(_DWORD *)v74 = 136447490;
    v75 = v57;
    v76 = type metadata accessor for UUID(0);
    v77 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v78 = dispatch thunk of CustomStringConvertible.description.getter(v76, v77);
    v101 = sub_100016940(v78, v79, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v75, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v74 + 12) = 1024;
    LODWORD(v101) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v74 + 14, v74 + 18);
    *(_WORD *)(v74 + 18) = 1024;
    LODWORD(v101) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v74 + 20, v74 + 24);
    *(_WORD *)(v74 + 24) = 2082;
    __asm { BR              X10 }
  }
  sub_1000126B0(v57, type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v67, type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v68, type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v69, type metadata accessor for WildModeAssociationRecord);

  v80 = (uint64_t)v87;
  v82 = Logger.logObject.getter(v81);
  v83 = static os_log_type_t.default.getter(v82);
  if (os_log_type_enabled(v82, v83))
  {
    v85 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v85 = 0;
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "Done waiting for user input", v85, 2u);
    swift_slowDealloc(v85, -1, -1);
  }

  v97(0);
  sub_1000126B0(v80, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_10057177C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t *v21;
  char v22[24];

  v21 = a4;
  v7 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v7);
  v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for WildModeAssociationRecord(0);
  v11 = swift_projectBox(a2);
  sub_10005972C(a1, (uint64_t)v9, type metadata accessor for AccessoryMetadata);
  v12 = type metadata accessor for AccessoryMetadata(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  swift_beginAccess(v11, v22, 1, 0);
  sub_100004084((uint64_t)v9, v11 + *(int *)(v10 + 56), &qword_101115E60);
  v14 = sub_10001A9A8(&qword_1010FBA60);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(v14, v17 + v15, v16 | 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  sub_10005972C(a1, v18 + v17, type metadata accessor for AccessoryMetadata);
  v19 = sub_100222868(v18, a3);
  result = swift_bridgeObjectRelease();
  *v21 = v19;
  return result;
}

double sub_1005718F4@<D0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;

  v3 = *a1;
  *a2 = *a1;
  v4 = sub_10001A9A8(&qword_1010F37F0);
  swift_storeEnumTagMultiPayload(a2, v4, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v3).n128_u64[0];
  return result;
}

uint64_t sub_100571938(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_10001A9A8(&qword_1010F37F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(a1, (uint64_t)v4, type metadata accessor for BluetoothCommunicationCoordinator.Error);
  swift_storeEnumTagMultiPayload(v4, v2, 1);
  return Just.init(_:)(v4, v2);
}

uint64_t sub_1005719D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, __n128);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint8_t *v58;
  uint64_t v59;
  __n128 v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_type_t v73;
  int v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t, __n128);
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint8_t *v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[24];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112[4];

  v107 = a3;
  v5 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v5);
  v7 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  v9 = __chkstk_darwin(v8);
  v103 = (uint64_t)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v102 = (uint64_t)&v97 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v97 - v13;
  v15 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v15);
  v17 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v105 = *(_QWORD *)(v18 - 8);
  v106 = v18;
  __chkstk_darwin(v18);
  v104 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010F37F0);
  __chkstk_darwin(v20);
  v22 = (uint64_t *)((char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = type metadata accessor for WildModeAssociationRecord(0);
  v24 = a2;
  v25 = swift_projectBox(a2);
  sub_10000F9B8(a1, (uint64_t)v22, &qword_1010F37F0);
  if (swift_getEnumCaseMultiPayload(v22, v20) == 1)
  {
    sub_1000126EC((uint64_t)v22, (uint64_t)v14, type metadata accessor for BluetoothCommunicationCoordinator.Error);
    swift_beginAccess(v25, v112, 0, 0);
    sub_10000F9B8(v25 + *(int *)(v23 + 56), (uint64_t)v7, &qword_101115E60);
    v26 = type metadata accessor for AccessoryMetadata(0);
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v7, 1, v26);
    sub_100004048((uint64_t)v7, &qword_101115E60);
    if (v27 == 1)
    {
      v28 = v24;
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v29 = type metadata accessor for Logger(0);
      sub_10001A9E8(v29, (uint64_t)qword_1011B7148);
      v30 = v102;
      sub_10005972C((uint64_t)v14, v102, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      v31 = swift_retain_n(v24, 2);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      v34 = v33;
      if (os_log_type_enabled(v32, v33))
      {
        v35 = swift_slowAlloc(22, -1);
        v103 = swift_slowAlloc(64, -1);
        v110 = v103;
        *(_DWORD *)v35 = 136446466;
        v101 = v28;
        v99 = (uint8_t *)(v35 + 4);
        v36 = swift_beginAccess(v25, v109, 0, 0);
        v37 = v105;
        v38 = v106;
        v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v105 + 16);
        LODWORD(v100) = v34;
        v40 = v104;
        v39(v104, v25, v106, v36);
        v41 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v42 = dispatch thunk of CustomStringConvertible.description.getter(v38, v41);
        v43 = v25;
        v45 = v44;
        (*(void (**)(char *, uint64_t))(v37 + 8))(v40, v38);
        v108 = sub_100016940(v42, v45, &v110);
        v46 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109, v99, v35 + 12);
        swift_release_n(v101, 2);
        v25 = v43;
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2082;
        sub_100D07804();
        v108 = sub_100016940(v47, v48, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109, v35 + 14, v35 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v30, type metadata accessor for BluetoothCommunicationCoordinator.Error);
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v100, "Failed to fetch metadata for %{public}s.\nError %{public}s", (uint8_t *)v35, 0x16u);
        v49 = v103;
        swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        v50 = v35;
LABEL_15:
        swift_slowDealloc(v50, -1, -1);

        v89 = (uint64_t)v46;
LABEL_24:
        sub_1000126B0(v89, type metadata accessor for BluetoothCommunicationCoordinator.Error);
        goto LABEL_25;
      }

      sub_1000126B0(v30, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      v95 = v24;
    }
    else
    {
      if (qword_1010E9CE0 != -1)
        swift_once(&qword_1010E9CE0, sub_100563220);
      v70 = type metadata accessor for Logger(0);
      sub_10001A9E8(v70, (uint64_t)qword_1011B7148);
      v71 = v103;
      sub_10005972C((uint64_t)v14, v103, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      v72 = swift_retain_n(v24, 2);
      v32 = Logger.logObject.getter(v72);
      v73 = static os_log_type_t.default.getter(v32);
      v74 = v73;
      if (os_log_type_enabled(v32, v73))
      {
        v75 = swift_slowAlloc(22, -1);
        v102 = swift_slowAlloc(64, -1);
        v110 = v102;
        *(_DWORD *)v75 = 136446466;
        v101 = v24;
        v99 = (uint8_t *)(v75 + 4);
        v76 = swift_beginAccess(v25, v109, 0, 0);
        v78 = v105;
        v77 = v106;
        v79 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v105 + 16);
        LODWORD(v100) = v74;
        v80 = v104;
        v79(v104, v25, v106, v76);
        v81 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v82 = dispatch thunk of CustomStringConvertible.description.getter(v77, v81);
        v83 = v25;
        v85 = v84;
        (*(void (**)(char *, uint64_t))(v78 + 8))(v80, v77);
        v108 = sub_100016940(v82, v85, &v110);
        v46 = v14;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109, v99, v75 + 12);
        swift_release_n(v101, 2);
        v25 = v83;
        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2082;
        sub_100D07804();
        v108 = sub_100016940(v86, v87, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109, v75 + 14, v75 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v71, type metadata accessor for BluetoothCommunicationCoordinator.Error);
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v100, "Failed to fetch product info for %{public}s.\nError %{public}s", (uint8_t *)v75, 0x16u);
        v88 = v102;
        swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1, -1);
        v50 = v75;
        goto LABEL_15;
      }

      sub_1000126B0(v71, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      v95 = v24;
    }
    swift_release_n(v95, 2);
    v89 = (uint64_t)v14;
    goto LABEL_24;
  }
  v102 = v23;
  v103 = v25;
  v51 = *v22;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v52 = type metadata accessor for Logger(0);
  sub_10001A9E8(v52, (uint64_t)qword_1011B7148);
  v53 = v24;
  v54 = swift_retain_n(v24, 2);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(12, -1);
    v100 = swift_slowAlloc(32, -1);
    v112[0] = v100;
    v101 = v53;
    *(_DWORD *)v57 = 136446210;
    v58 = v57 + 12;
    v98 = v57 + 4;
    v99 = v57;
    v59 = v103;
    v60 = swift_beginAccess(v103, v109, 0, 0);
    v61 = v104;
    v62 = v105;
    v63 = v106;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v105 + 16))(v104, v59, v106, v60);
    v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v63, v64);
    v67 = v66;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v63);
    v110 = sub_100016940(v65, v67, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v98, v58);
    swift_release_n(v101, 2);
    swift_bridgeObjectRelease();
    v68 = v99;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Successfully fetched product info for %{public}s", v99, 0xCu);
    v69 = v100;
    swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v68, -1, -1);

  }
  else
  {

    swift_release_n(v53, 2);
  }
  v90 = v102;
  v91 = *(_QWORD *)(v51 + 16);
  v92 = type metadata accessor for AccessoryProductInfo(0);
  v93 = *(_QWORD *)(v92 - 8);
  if (v91)
  {
    sub_10005972C(v51 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80)), (uint64_t)v17, type metadata accessor for AccessoryProductInfo);
    v94 = 0;
  }
  else
  {
    v94 = 1;
  }
  v25 = v103;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v93 + 56))(v17, v94, 1, v92);
  swift_bridgeObjectRelease();
  swift_beginAccess(v25, v112, 1, 0);
  sub_100004084((uint64_t)v17, v25 + *(int *)(v90 + 60), (uint64_t *)&unk_10111C0A0);
LABEL_25:
  swift_beginAccess(v25, &v110, 0, 0);
  return sub_10005972C(v25, v107, type metadata accessor for WildModeAssociationRecord);
}

void sub_1005723B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, void *), uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, void *);
  char v32[16];
  uint64_t v33;
  char *v34;

  v31 = a8;
  v28 = a4;
  v29 = a5;
  v27 = a3;
  v30 = sub_10001A9A8((uint64_t *)&unk_10111C090);
  __chkstk_darwin(v30);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WildModeAssociationRecord(0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v26 - v20;
  v22 = *(_QWORD *)(a2 + 16);
  sub_10005972C(a10, (uint64_t)&v26 - v20, type metadata accessor for WildModeAssociationRecord);
  sub_10005972C(a1, (uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  swift_retain();
  v23 = v27;
  v24 = v28;
  v25 = v29;
  v28 = a7;
  v29 = a6;
  sub_1005726E8((uint64_t)v19, v23, v24, v25, a6, a7, a1);
  v33 = *(_QWORD *)(v22 + 160);
  v34 = v19;
  OS_dispatch_queue.sync<A>(execute:)(sub_10058A26C, v32, &type metadata for () + 1);
  sub_1007F4EB8();
  sub_10005972C((uint64_t)v19, (uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload(v15, v30, 0);
  sub_100572C88((uint64_t)v15, v31, a9, (uint64_t)v21);
  sub_100004048((uint64_t)v15, (uint64_t *)&unk_10111C090);
  sub_1000126B0((uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
  swift_release();
  sub_1000126B0((uint64_t)v21, type metadata accessor for WildModeAssociationRecord);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

uint64_t sub_1005726E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  int *v22;
  char v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t v35;
  id v36;
  unsigned int v37;
  id v38;
  NSString v39;
  unsigned int v40;
  uint64_t v41;
  double v42;
  double v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  id v48;
  unsigned __int8 v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  int *v65;
  uint64_t v66;
  id v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;

  v66 = a7;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v13);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for WildModeTrackingLocation(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v72 = (uint64_t)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (double *)((char *)&v63 - v20);
  v22 = (int *)objc_msgSend(a2, "type");
  v67 = a2;
  v68 = v15;
  if (v22)
  {
    v24 = (uint64_t)v22;
    if (v22 != (int *)1)
      goto LABEL_31;
    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  v24 = type metadata accessor for WildModeAssociationRecord(0);
  *(_BYTE *)(a1 + *(int *)(v24 + 24)) = v23;
  v25 = (_QWORD *)(a1 + *(int *)(v24 + 48));
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease();
  *v25 = a3;
  v25[1] = a4;
  v25[2] = a5;
  v65 = (int *)v24;
  v26 = *(int *)(v24 + 32);
  v69 = a1;
  v27 = (uint64_t *)(a1 + v26);
  v73 = *(_QWORD **)(a1 + v26);
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(a6);
  sub_1003046C0(a6);
  v28 = sub_100CA8670((uint64_t)v73);
  swift_bridgeObjectRelease();
  v29 = sub_1005090C0(v28);
  swift_bridgeObjectRelease();
  v30 = _swiftEmptyArrayStorage;
  v73 = _swiftEmptyArrayStorage;
  v71 = v29[2];
  if (!v71)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    *v27 = (uint64_t)v30;
    sub_100562DB0(v27, (uint64_t (*)(uint64_t))sub_1008C5E4C);
    v54 = v65;
    v53 = v66;
    v55 = v69;
    sub_1000F8EF4(v66 + v65[14], v69 + v65[14], &qword_101115E60);
    sub_1000F8EF4(v53 + v54[15], v55 + v54[15], (uint64_t *)&unk_10111C0A0);
    *(_BYTE *)(v55 + v54[9]) = 0;
    v56 = objc_msgSend(v67, "action");
    if ((unint64_t)v56 < 5)
      v57 = ((_DWORD)v56 + 1);
    else
      v57 = 0;
    v58 = (uint64_t)v68;
    static Date.trustedNow.getter((uint64_t)v68);
    v59 = type metadata accessor for Date(0);
    v60 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
    v60(v58, 0, 1, v59);
    sub_100004084(v58, v55 + v54[18], (uint64_t *)&unk_1010EA690);
    static Date.trustedNow.getter(v58);
    v60(v58, 0, 1, v59);
    result = sub_1000FF098(v58, v57);
    *(_BYTE *)(v55 + v54[16]) = v57;
    return result;
  }
  v64 = v27;
  v31 = 0;
  v70 = 0x8000000100EDB150;
  while (v31 < v29[2])
  {
    v35 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v24 = *(_QWORD *)(v17 + 72);
    sub_10005972C((uint64_t)v29 + v35 + v24 * v31, (uint64_t)v21, type metadata accessor for WildModeTrackingLocation);
    v36 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v37 = objc_msgSend(v36, "isInternalBuild");

    if (v37
      && (v38 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
          v39 = String._bridgeToObjectiveC()(),
          v40 = objc_msgSend(v38, "BOOLForKey:", v39),
          v38,
          v39,
          v40))
    {
      v32 = static os_log_type_t.default.getter(v41);
      v33 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v34 = (void *)static OS_os_log.default.getter(v33);
      os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v34, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);

    }
    else
    {
      v42 = *v21;
      v43 = v21[1];
      if (qword_1010E9AD8 != -1)
        swift_once(&qword_1010E9AD8, sub_100264FD8);
      if (!objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v42, v43))
        goto LABEL_20;
      v44 = (void *)qword_1010F46B0;
      if (qword_1010F46B0)
      {
        v45 = (id)qword_1010F46B0;
      }
      else
      {
        v46 = (void *)sub_100265274();
        v47 = (void *)qword_1010F46B0;
        qword_1010F46B0 = (uint64_t)v46;
        v45 = v46;

        v44 = 0;
      }
      v48 = v44;
      v49 = objc_msgSend(v45, "containsCoordinate:", v42, v43);

      if ((v49 & 1) == 0)
      {
LABEL_20:
        sub_1000126EC((uint64_t)v21, v72, type metadata accessor for WildModeTrackingLocation);
        v50 = v73;
        if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
        {
          sub_10009AED0(0, v50[2] + 1, 1);
          v50 = v73;
        }
        v52 = v50[2];
        v51 = v50[3];
        if (v52 >= v51 >> 1)
        {
          sub_10009AED0(v51 > 1, v52 + 1, 1);
          v50 = v73;
        }
        v50[2] = v52 + 1;
        sub_1000126EC(v72, (uint64_t)v50 + v35 + v52 * v24, type metadata accessor for WildModeTrackingLocation);
        goto LABEL_9;
      }
    }
    sub_1000126B0((uint64_t)v21, type metadata accessor for WildModeTrackingLocation);
LABEL_9:
    if (v71 == ++v31)
    {
      v30 = v73;
      v27 = v64;
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_31:
  type metadata accessor for TrackingObservationType(0);
  v73 = (_QWORD *)v24;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v62, &v73, v62, &type metadata for Int);
  __break(1u);
  return result;
}

void sub_100572C88(uint64_t a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t EnumCaseMultiPayload;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;

  v7 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_10111C090);
  __chkstk_darwin(v10);
  v12 = (void **)((char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v12, (uint64_t *)&unk_10111C090);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v14 = *v12;
    v15 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v16 = qword_1011B7DD8;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    v29 = v14;
    swift_errorRetain(v14);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v20 = String.init<A>(describing:)(&v29, v19);
    v22 = v21;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    *(_QWORD *)(v18 + 64) = sub_10001AA00();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Failed to update existing UT record. Error - %@", 47, 2, v18);
    swift_bridgeObjectRelease();
    type metadata accessor for TrackingAvoidanceError(0);
    v24 = v23;
    v28 = 1;
    v25 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v26 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(&v29, &v28, v25, v24, v26);
    v27 = v29;
    a2(a4, v29);
    swift_errorRelease(v14);

  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
    a2((uint64_t)v9, 0);
    sub_1000126B0((uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
  }
}

uint64_t sub_100572EFC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;

  v5 = v4;
  v50 = a3;
  v51 = a4;
  v48 = sub_10001A9A8((uint64_t *)&unk_10111C090);
  __chkstk_darwin(v48);
  v49 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v10 = __chkstk_darwin(v9);
  v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v44 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v44 - v15;
  v17 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v44 = (char *)&v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v25 = (char *)&v44 - v24;
  v46 = *(_QWORD *)(v5 + 16);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v26((char *)&v44 - v24, a2, v20);
  sub_10005972C(a1, (uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
  v19[v17[9]] = 2;
  v27 = (uint64_t)&v19[v17[11]];
  sub_10001D898((uint64_t)v50, v51);
  sub_100004048(v27, (uint64_t *)&unk_1010EA690);
  v47 = v25;
  v26((char *)v27, (uint64_t)v25, v20);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v28(v27, 0, 1, v20);
  static Date.trustedNow.getter((uint64_t)v16);
  v28((uint64_t)v16, 0, 1, v20);
  sub_100004084((uint64_t)v16, (uint64_t)&v19[v17[18]], (uint64_t *)&unk_1010EA690);
  static Date.trustedNow.getter((uint64_t)v14);
  v28((uint64_t)v14, 0, 1, v20);
  v29 = v17[17];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20) == 1)
  {
    sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010EA690);
    swift_bridgeObjectRetain(*(_QWORD *)&v19[v29]);
    v30 = sub_100518D70(6);
    v32 = v31;
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v19[v29]);
      v34 = *(_QWORD *)&v19[v29];
      v52 = v34;
      *(_QWORD *)&v19[v29] = 0x8000000000000000;
      v35 = (uint64_t)v45;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100A9B690();
        v34 = v52;
      }
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v21 + 32))(v35, *(_QWORD *)(v34 + 56) + *(_QWORD *)(v21 + 72) * v30, v20);
      sub_100105FD0(v30, v34);
      *(_QWORD *)&v19[v29] = v34;
      swift_bridgeObjectRelease();
      v36 = 0;
    }
    else
    {
      v36 = 1;
      v35 = (uint64_t)v45;
    }
    v28(v35, v36, 1, v20);
    v39 = sub_100004048(v35, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v37 = (uint64_t)v44;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v44, v14, v20);
    v38 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v19[v29]);
    v52 = *(_QWORD *)&v19[v29];
    *(_QWORD *)&v19[v29] = 0x8000000000000000;
    sub_10010AD50(v37, 6, v38);
    *(_QWORD *)&v19[v29] = v52;
    v39 = swift_bridgeObjectRelease();
  }
  v19[v17[16]] = 6;
  __chkstk_darwin(v39);
  *(&v44 - 2) = v40;
  *(&v44 - 1) = v19;
  OS_dispatch_queue.sync<A>(execute:)(sub_10058C8C0, &v44 - 4, &type metadata for () + 1);
  sub_1007F4EB8();
  v41 = v49;
  sub_10005972C((uint64_t)v19, v49, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload(v41, v48, 0);
  v42 = v50;
  sub_100573C78(v41, v50);
  sub_100004048(v41, (uint64_t *)&unk_10111C090);
  sub_1000126B0((uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
  sub_10001D8A8((uint64_t)v42, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v47, v20);
}

uint64_t sub_100573498(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61;
  char v62[24];

  v56 = a1;
  v60 = a3;
  v57 = sub_10001A9A8((uint64_t *)&unk_10111C090);
  __chkstk_darwin(v57);
  v58 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v53 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v52 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v52 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v52 - v23;
  v59 = v8;
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v26 = v25((char *)&v52 - v23, 1, 1, v7);
  v54 = v16;
  if (a2)
  {
    if (a2 == 2)
    {
      v30 = static os_log_type_t.default.getter(v26);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      v28 = 2;
      v31 = os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7DD8, "Got request to ignore forever.", 30, 2, _swiftEmptyArrayStorage);
      static Date.distantFuture.getter(v31);
      v25(v22, 0, 1, v7);
      goto LABEL_13;
    }
    if (a2 == 1)
    {
      v27 = static os_log_type_t.default.getter(v26);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      v28 = 2;
      os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, qword_1011B7DD8, "Got request to ignore till end of day.", 38, 2, _swiftEmptyArrayStorage);
      sub_100562E3C((uint64_t)v22);
LABEL_13:
      sub_100004084((uint64_t)v22, (uint64_t)v24, (uint64_t *)&unk_1010EA690);
      goto LABEL_17;
    }
    v32 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7DD8, "No valid option to ignore until.", 32, 2, _swiftEmptyArrayStorage);
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010EA690);
    v25(v24, 1, 1, v7);
    v28 = 4;
  }
  else
  {
    v29 = static os_log_type_t.default.getter(v26);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, qword_1011B7DD8, "Got request to not ignore this UT. Clearing out ignore.", 55, 2, _swiftEmptyArrayStorage);
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010EA690);
    v28 = 1;
    v25(v24, 1, 1, v7);
  }
LABEL_17:
  v55 = *(_QWORD *)(v55 + 16);
  sub_10005972C(v56, (uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
  v12[v10[9]] = v28;
  swift_beginAccess(v24, v62, 0, 0);
  v33 = (uint64_t)&v12[v10[11]];
  v34 = a4;
  sub_10001D898((uint64_t)v60, a4);
  sub_100004048(v33, (uint64_t *)&unk_1010EA690);
  sub_10000F9B8((uint64_t)v24, v33, (uint64_t *)&unk_1010EA690);
  static Date.trustedNow.getter((uint64_t)v22);
  v25(v22, 0, 1, v7);
  sub_100004084((uint64_t)v22, (uint64_t)&v12[v10[18]], (uint64_t *)&unk_1010EA690);
  static Date.trustedNow.getter((uint64_t)v19);
  v25(v19, 0, 1, v7);
  v35 = v10[17];
  v36 = v59;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v19, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
    swift_bridgeObjectRetain(*(_QWORD *)&v12[v35]);
    v37 = sub_100518D70(6);
    v39 = v38;
    swift_bridgeObjectRelease();
    if ((v39 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v12[v35]);
      v41 = *(_QWORD *)&v12[v35];
      v61 = v41;
      *(_QWORD *)&v12[v35] = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100A9B690();
        v41 = v61;
      }
      v42 = (uint64_t)v54;
      (*(void (**)(char *, unint64_t, uint64_t))(v59 + 32))(v54, *(_QWORD *)(v41 + 56) + *(_QWORD *)(v59 + 72) * v37, v7);
      sub_100105FD0(v37, v41);
      *(_QWORD *)&v12[v35] = v41;
      swift_bridgeObjectRelease();
      v43 = 0;
    }
    else
    {
      v43 = 1;
      v42 = (uint64_t)v54;
    }
    v25((char *)v42, v43, 1, v7);
    v47 = sub_100004048(v42, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v44 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
    v45 = (uint64_t)v53;
    v44(v53, v19, v7);
    v46 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v12[v35]);
    v61 = *(_QWORD *)&v12[v35];
    *(_QWORD *)&v12[v35] = 0x8000000000000000;
    sub_10010AD50(v45, 6, v46);
    *(_QWORD *)&v12[v35] = v61;
    v47 = swift_bridgeObjectRelease();
  }
  v12[v10[16]] = 6;
  __chkstk_darwin(v47);
  *(&v52 - 2) = v48;
  *(&v52 - 1) = (uint64_t)v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_10058C8C0, &v52 - 4, &type metadata for () + 1);
  sub_1007F4EB8();
  v49 = v58;
  sub_10005972C((uint64_t)v12, v58, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload(v49, v57, 0);
  v50 = v60;
  sub_100573C78(v49, v60);
  sub_100004048(v49, (uint64_t *)&unk_10111C090);
  sub_1000126B0((uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
  sub_10001D8A8((uint64_t)v50, v34);
  return sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_100573C78(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_10001A9A8((uint64_t *)&unk_10111C090);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v6, (uint64_t *)&unk_10111C090);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v8 = *v6;
    v9 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v10 = qword_1011B7DD8;
    v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
    v20 = v8;
    swift_errorRetain(v8);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v14 = String.init<A>(describing:)(&v20, v13);
    v16 = v15;
    *(_QWORD *)(v12 + 56) = &type metadata for String;
    *(_QWORD *)(v12 + 64) = sub_10001AA00();
    *(_QWORD *)(v12 + 32) = v14;
    *(_QWORD *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Failed to ignore beacon record. Error - %@", 42, 2, v12);
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_errorRetain(v8);
      a2(v8);
      swift_errorRelease(v8);
    }
    return swift_errorRelease(v8);
  }
  else
  {
    v18 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, qword_1011B7DD8, "Successfully ignored beacon record.", 35, 2, _swiftEmptyArrayStorage);
    if (a2)
      a2(0);
    return sub_100004048((uint64_t)v6, (uint64_t *)&unk_10111C090);
  }
}

uint64_t sub_100573E9C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for UnauthorizedTracking()
{
  return objc_opt_self(_TtC12searchpartyd20UnauthorizedTracking);
}

void sub_100573EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSSet v5;
  uint64_t v6;
  id v7;

  sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
  sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
  v5.super.isa = Set._bridgeToObjectiveC()().super.isa;
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

Swift::Int sub_100573FBC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for WildModeTrackingLocation(0);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_1005749B8(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v112 = v16;
      if (v18 >= 2)
      {
        v113 = *v133;
        do
        {
          v114 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v113)
            goto LABEL_146;
          v115 = *(_QWORD *)&v112[16 * v114 + 32];
          v116 = *(_QWORD *)&v112[16 * v18 + 24];
          v117 = v128;
          sub_100574BF4(v113 + *(_QWORD *)(v127 + 72) * v115, v113 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v112[16 * v18 + 16], v113 + *(_QWORD *)(v127 + 72) * v116, v126);
          v128 = v117;
          if (v117)
            break;
          if (v116 < v115)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
            v112 = sub_10088F088((uint64_t)v112);
          if (v114 >= *((_QWORD *)v112 + 2))
            goto LABEL_136;
          v118 = &v112[16 * v114 + 32];
          *(_QWORD *)v118 = v115;
          *((_QWORD *)v118 + 1) = v116;
          v119 = *((_QWORD *)v112 + 2);
          if (v18 > v119)
            goto LABEL_137;
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((_QWORD *)v112 + 2) = v119 - 1;
          v18 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v121[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_10005972C(*v133 + v22 * v20, v131, type metadata accessor for WildModeTrackingLocation);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_10005972C(v24, v132, type metadata accessor for WildModeTrackingLocation);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 28), v25 + *(int *)(v134 + 28));
    sub_1000126B0(v25, type metadata accessor for WildModeTrackingLocation);
    sub_1000126B0(v23, type metadata accessor for WildModeTrackingLocation);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_10005972C(v28 + v30, v131, type metadata accessor for WildModeTrackingLocation);
      v33 = v132;
      sub_10005972C(v28 + v27, v132, type metadata accessor for WildModeTrackingLocation);
      v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 28), v33 + *(int *)(v134 + 28));
      sub_1000126B0(v33, type metadata accessor for WildModeTrackingLocation);
      sub_1000126B0(v32, type metadata accessor for WildModeTrackingLocation);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_10088E710(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_10088E710((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_100574BF4(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1000126EC(v129 + v56, v124, type metadata accessor for WildModeTrackingLocation);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1000126EC(v124, v59, type metadata accessor for WildModeTrackingLocation);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_10005972C(v44, v131, type metadata accessor for WildModeTrackingLocation);
          v47 = v132;
          sub_10005972C(v136 + v40 + v42, v132, type metadata accessor for WildModeTrackingLocation);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 28), v47 + *(int *)(v134 + 28));
          sub_1000126B0(v47, type metadata accessor for WildModeTrackingLocation);
          sub_1000126B0(v45, type metadata accessor for WildModeTrackingLocation);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1000126EC(v49, v135, type metadata accessor for WildModeTrackingLocation);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_1000126EC(v135, v50, type metadata accessor for WildModeTrackingLocation);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1005749B8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = type metadata accessor for WildModeTrackingLocation(0);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10005972C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for WildModeTrackingLocation);
      v19 = v27;
      sub_10005972C(v33 + v16 + v18, v27, type metadata accessor for WildModeTrackingLocation);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 28)], v19 + *(int *)(v30 + 28));
      sub_1000126B0(v19, type metadata accessor for WildModeTrackingLocation);
      result = sub_1000126B0((uint64_t)v14, type metadata accessor for WildModeTrackingLocation);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_1000126EC(v22, v31, type metadata accessor for WildModeTrackingLocation);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v30);
      result = sub_1000126EC(v31, v23, type metadata accessor for WildModeTrackingLocation);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100574BF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for WildModeTrackingLocation(0);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10005972C(v25 + v27, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_10005972C(a2 + v27, v44, type metadata accessor for WildModeTrackingLocation);
          v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 28), v32 + *(int *)(v45 + 28));
          v34 = v32;
          v11 = (char *)v31;
          sub_1000126B0(v34, type metadata accessor for WildModeTrackingLocation);
          sub_1000126B0(v31, type metadata accessor for WildModeTrackingLocation);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_10005972C(a2, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
        sub_10005972C(a4, v20, type metadata accessor for WildModeTrackingLocation);
        v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 28)], v20 + *(int *)(v45 + 28));
        sub_1000126B0(v20, type metadata accessor for WildModeTrackingLocation);
        sub_1000126B0((uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_10088E9FC(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_1005750A4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v3);
  v4 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v5);
  v6 = objc_msgSend(a1, "data");
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  __asm { BR              X10 }
}

void sub_1005751FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  if (BYTE6(v5) == 28)
  {
    *(_QWORD *)(v9 - 216) = v1;
    *(_QWORD *)(v9 - 208) = v4;
    v10 = *(_QWORD *)(*(_QWORD *)(v9 - 192) + 16);
    v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    v12 = type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v10, v11, &type metadata for () + 1, v12);
    sub_100DCF760(v6, v5, v3);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v0) == 1)
    {
      sub_100004048(v3, &qword_1011091A0);
    }
    else
    {
      sub_1000126EC(v3, v8, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_10080B950(v8, v7);
      v24 = type metadata accessor for OwnedBeaconRecord(0);
      v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v7, 1, v24);
      sub_100004048(v7, (uint64_t *)&unk_1010F47C0);
      if (v25 != 1)
      {
        (*(void (**)(void))(*(_QWORD *)(v9 - 208) + 16))();
        sub_10001BC14(v6, v5);
        sub_1000126B0(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
        return;
      }
      sub_1000126B0(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    }
    v27 = *(_QWORD *)(v9 - 216);
    v26 = *(_QWORD *)(v9 - 208);
    sub_100562940(*(void **)(v9 - 200), v27);
    v28 = type metadata accessor for Date(0);
    v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28);
    sub_100004048(v27, (uint64_t *)&unk_1010EA690);
    if (v29 == 1)
      v30 = 3;
    else
      v30 = 2;
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v26 + 16))(v26, v30, 0);
    sub_10001BC14(v6, v5);
  }
  else
  {
    v13 = sub_10001BC14(v6, v5);
    v14 = static os_log_type_t.error.getter(v13);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, qword_1011B7DD8, "received an advertisement of unexpected length or format", 56, 2, _swiftEmptyArrayStorage);
    type metadata accessor for TrackingAvoidanceError(0);
    v16 = v15;
    *(_QWORD *)(v9 - 96) = 3;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    inited = swift_initStackObject(v17, v9 - 176);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v19;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(inited + 56) = 0x8000000100EDAEE0;
    v20 = sub_1006B8B10(inited);
    v21 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v9 - 88), v9 - 96, v20, v16, v21);
    v22 = *(void **)(v9 - 88);
    v23 = (void *)_convertErrorToNSError(_:)(v22);
    (*(void (**)(uint64_t, uint64_t, void *))(v4 + 16))(v4, 3, v23);

  }
}

void sub_100575568(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  char *v56;
  uint8_t *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  id v63;
  void (**v64)(const void *, Class, void *);
  uint64_t v65;
  Class v66;
  void (**v67)(const void *, Class, void *);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  id v78;
  Class v79;
  void *v80;
  void (**v81)(const void *, Class, void *);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t inited;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void *v96;
  void (**v97)(const void *, Class, void *);
  Class isa;
  void *v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (**v118)(const void *, Class, void *);
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char v125[48];
  char v126[8];
  uint64_t v127;
  void *v128;

  v110 = type metadata accessor for UnwantedTrackingUserNotification(0);
  __chkstk_darwin(v110);
  v7 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for URL(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109);
  v107 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v9);
  v115 = (uint64_t)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for WildModeAssociationRecord(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v124 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v12);
  v14 = (char *)&v101 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for MACAddress(0);
  v122 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117);
  v123 = (char *)&v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  _Block_copy(a3);
  v118 = (void (**)(const void *, Class, void *))a3;
  v16 = _Block_copy(a3);
  v17 = static os_log_type_t.default.getter(v16);
  if (qword_1010EA270 != -1)
LABEL_43:
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v18 = qword_1011B7D50;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 112, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E22B10;
  v116 = a2;
  v128 = *(void **)a2;
  v21 = sub_10001A9A8(&qword_1010FF3D8);
  v22 = String.init<A>(describing:)(&v128, v21);
  v24 = v23;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v25 = sub_10001AA00();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v25;
  v102 = v25;
  *(_QWORD *)(v20 + 64) = v25;
  *(_QWORD *)(v20 + 72) = 0xD00000000000003BLL;
  *(_QWORD *)(v20 + 80) = 0x8000000100EDAF00;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "%{public}@: %{public}@", 22, 2, v20);
  v26 = swift_bridgeObjectRelease();
  v27 = static os_log_type_t.default.getter(v26);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v28 = qword_1011B7DD8;
  v29 = swift_allocObject(v19, 72, 7);
  v103 = xmmword_100E22B00;
  *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
  v30 = v19;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v100 = a1;
    else
      v100 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v31 = _CocoaArrayWrapper.endIndex.getter(v100);
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v29 + 56) = &type metadata for Int;
  *(_QWORD *)(v29 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v29 + 32) = v31;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "withdrew %d unauthorized tracking observation(s)", v101);
  swift_bridgeObjectRelease();
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v33 = a1;
    else
      v33 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v32 = _CocoaArrayWrapper.endIndex.getter(v33);
  }
  else
  {
    v32 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
  }
  v17 = v117;
  if (v32)
  {
    v112 = a1 & 0xC000000000000001;
    a2 = 4;
    v111 = a1;
    v106 = v14;
    v105 = v30;
    v104 = v32;
    while (1)
    {
      if (v112)
        v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, a1);
      else
        v34 = *(id *)(a1 + 8 * a2);
      a1 = (uint64_t)v7;
      v35 = a2 - 3;
      v7 = v124;
      if (__OFADD__(a2 - 4, 1))
      {
        __break(1u);
        goto LABEL_43;
      }
      v120 = a2;
      v121 = v34;
      v36 = objc_msgSend(v34, "trackingIdentifier");
      v37 = objc_msgSend(v36, "address");

      v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v39 = v122;
      MACAddress.init(data:type:)(v38);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v14, 1, v17) == 1)
        break;
      v119 = v35;
      v40 = (uint64_t)v123;
      (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v123, v14, v17);
      v41 = *(_QWORD *)(v116 + 16);
      v42 = v115;
      sub_100D82548(v40, v115);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v42, 1, v114) == 1)
      {
        swift_bridgeObjectRelease();
        v82 = sub_100004048(v42, &qword_101102FB0);
        v83 = static os_log_type_t.error.getter(v82);
        v84 = qword_1011B7DD8;
        v85 = swift_allocObject(v30, 72, 7);
        *(_OWORD *)(v85 + 16) = v103;
        v86 = MACAddress.description.getter(v85);
        v87 = v102;
        *(_QWORD *)(v85 + 56) = &type metadata for String;
        *(_QWORD *)(v85 + 64) = v87;
        *(_QWORD *)(v85 + 32) = v86;
        *(_QWORD *)(v85 + 40) = v88;
        os_log(_:dso:log:_:_:)(v83, &_mh_execute_header, v84, "wild mode association record for %@ not found!", 46, 2, v85);
        swift_bridgeObjectRelease();
        type metadata accessor for TrackingAvoidanceError(0);
        v90 = v89;
        v127 = 10;
        v91 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
        inited = swift_initStackObject(v91, v125);
        *(_OWORD *)(inited + 16) = v103;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(inited + 40) = v93;
        *(_QWORD *)(inited + 72) = &type metadata for String;
        *(_QWORD *)(inited + 48) = 0xD000000000000021;
        *(_QWORD *)(inited + 56) = 0x8000000100EDAFB0;
        v94 = sub_1006B8B10(inited);
        v95 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
        _BridgedStoredNSError.init(_:userInfo:)(&v128, &v127, v94, v90, v95);
        v96 = v128;
        v97 = v118;
        _Block_copy(v118);
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
        {
          sub_1003D79D0((uint64_t)_swiftEmptyArrayStorage);
        }
        sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
        sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
        isa = Set._bridgeToObjectiveC()().super.isa;
        v99 = (void *)_convertErrorToNSError(_:)(v96);
        v97[2](v97, isa, v99);
        swift_bridgeObjectRelease();

        _Block_release(v97);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v123, v117);
        _Block_release(v97);
        _Block_release(v97);
        v81 = v97;
        goto LABEL_41;
      }
      v43 = (char *)a1;
      sub_1000126EC(v42, (uint64_t)v7, type metadata accessor for WildModeAssociationRecord);
      v44 = *(_QWORD *)(v41 + 160);
      v45 = v7;
      if (qword_1010E99F8 != -1)
        swift_once(&qword_1010E99F8, sub_1001D7F04);
      v46 = v109;
      v47 = sub_10001A9E8(v109, (uint64_t)qword_1011B6A48);
      v48 = v108;
      v49 = v107;
      v50 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v108 + 16))(v107, v47, v46);
      __chkstk_darwin(v50);
      *((_QWORD *)&v101 - 4) = v44;
      *((_QWORD *)&v101 - 3) = v45;
      *((_QWORD *)&v101 - 2) = v49;
      OS_dispatch_queue.sync<A>(execute:)(sub_10044AB30, &v101 - 12, &type metadata for Bool);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v46);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v51 = type metadata accessor for Logger(0);
      v52 = sub_10001A9E8(v51, (uint64_t)qword_1011B77E8);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.default.getter(v53);
      v55 = os_log_type_enabled(v53, v54);
      v56 = v43;
      v30 = v105;
      if (v55)
      {
        v57 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Requesting SPUnknownBeaconsChangedNotification to be posted before rate limit.", v57, 2u);
        swift_slowDealloc(v57, -1, -1);
      }

      v58 = dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.default.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "Requesting SPUnknownBeaconsSetChangedNotification to be posted before rate limit.", v61, 2u);
        swift_slowDealloc(v61, -1, -1);
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
      v62 = v122;
      v63 = v121;
      v64 = v118;
      v65 = v110;
      sub_10005972C((uint64_t)v124, (uint64_t)&v56[*(int *)(v110 + 20)], type metadata accessor for WildModeAssociationRecord);
      *v56 = 2;
      v56[*(int *)(v65 + 24)] = 66;
      if (qword_1010EA140 != -1)
        swift_once(&qword_1010EA140, sub_100A3A528);
      sub_100C0B334((uint64_t)v56);
      _Block_copy(v64);
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1003D79D0((uint64_t)_swiftEmptyArrayStorage);
      }
      sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
      sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
      v66 = Set._bridgeToObjectiveC()().super.isa;
      v64[2](v64, v66, 0);
      swift_bridgeObjectRelease();

      _Block_release(v64);
      v7 = v56;
      sub_1000126B0((uint64_t)v56, type metadata accessor for UnwantedTrackingUserNotification);
      sub_1000126B0((uint64_t)v124, type metadata accessor for WildModeAssociationRecord);
      v17 = v117;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v123, v117);
      a2 = v120 + 1;
      a1 = v111;
      v14 = v106;
      if (v119 == v104)
        goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    v68 = sub_100004048((uint64_t)v14, (uint64_t *)&unk_1010F9890);
    v69 = static os_log_type_t.error.getter(v68);
    os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, qword_1011B7DD8, "received an advertisement of unexpected length or format", 56, 2, _swiftEmptyArrayStorage);
    type metadata accessor for TrackingAvoidanceError(0);
    v71 = v70;
    v127 = 3;
    v72 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v73 = swift_initStackObject(v72, v126);
    *(_OWORD *)(v73 + 16) = v103;
    *(_QWORD *)(v73 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v73 + 40) = v74;
    *(_QWORD *)(v73 + 72) = &type metadata for String;
    *(_QWORD *)(v73 + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(v73 + 56) = 0x8000000100EDAEE0;
    v75 = sub_1006B8B10(v73);
    v76 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(&v128, &v127, v75, v71, v76);
    v77 = v128;
    _Block_copy(v118);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1003D79D0((uint64_t)_swiftEmptyArrayStorage);
    }
    v78 = v121;
    sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
    sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
    v79 = Set._bridgeToObjectiveC()().super.isa;
    v80 = (void *)_convertErrorToNSError(_:)(v77);
    v67 = v118;
    v118[2](v118, v79, v80);
    swift_bridgeObjectRelease();

    _Block_release(v67);
  }
  else
  {
LABEL_35:
    swift_bridgeObjectRelease();
    v67 = v118;
  }
  _Block_release(v67);
  _Block_release(v67);
  v81 = v67;
LABEL_41:
  _Block_release(v81);
}

void sub_1005763A4(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  id v52;
  uint8_t *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t inited;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t (**v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void **v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  void **v112;
  uint64_t v113;
  char v114[56];
  char v115[8];
  uint64_t v116;
  void *v117;

  v107 = a3;
  v101 = type metadata accessor for UnwantedTrackingUserNotification(0);
  __chkstk_darwin(v101);
  v100 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for URL(0);
  v98 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v7);
  v105 = (uint64_t)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = type metadata accessor for WildModeAssociationRecord(0);
  v103 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104);
  v112 = (void **)((char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v10);
  v108 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for MACAddress(0);
  v12 = *(_QWORD *)(v113 - 8);
  v13 = __chkstk_darwin(v113);
  v15 = (void (**)(char *, uint64_t))((char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v111) = static os_log_type_t.default.getter(v13);
  if (qword_1010EA270 != -1)
    goto LABEL_36;
  while (1)
  {
    v16 = qword_1011B7D50;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v18 = swift_allocObject(v17, 112, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
    v106 = a2;
    v117 = *a2;
    v19 = sub_10001A9A8(&qword_1010FF3D8);
    v20 = String.init<A>(describing:)(&v117, v19);
    v22 = v21;
    *(_QWORD *)(v18 + 56) = &type metadata for String;
    v23 = sub_10001AA00();
    *(_QWORD *)(v18 + 32) = v20;
    *(_QWORD *)(v18 + 40) = v22;
    *(_QWORD *)(v18 + 96) = &type metadata for String;
    *(_QWORD *)(v18 + 104) = v23;
    v92 = v23;
    *(_QWORD *)(v18 + 64) = v23;
    *(_QWORD *)(v18 + 72) = 0xD00000000000003BLL;
    *(_QWORD *)(v18 + 80) = 0x8000000100EDAF00;
    os_log(_:dso:log:_:_:)(v111, &_mh_execute_header, v16, "%{public}@: %{public}@", 22, 2, v18);
    v24 = swift_bridgeObjectRelease();
    v25 = static os_log_type_t.default.getter(v24);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v26 = qword_1011B7DD8;
    v27 = swift_allocObject(v17, 72, 7);
    v93 = xmmword_100E22B00;
    *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
    v28 = (void (**)(char *, uint64_t))v17;
    if ((unint64_t)a1 >> 62)
    {
      v90 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      a2 = (void **)_CocoaArrayWrapper.endIndex.getter(v90);
      swift_bridgeObjectRelease();
    }
    else
    {
      a2 = *(void ***)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)(v27 + 56) = &type metadata for Int;
    *(_QWORD *)(v27 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v27 + 32) = a2;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "withdrew %d unauthorized tracking observation(s)", (_DWORD)v91);
    swift_bridgeObjectRelease();
    if ((unint64_t)a1 >> 62)
      break;
    v29 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v29)
      goto LABEL_34;
LABEL_8:
    v30 = (uint64_t)v15;
    v15 = v28;
    v31 = v12;
    v109 = a1;
    v102 = a1 & 0xC000000000000001;
    a1 = 4;
    v96 = v30;
    v95 = v12;
    v91 = (char *)v15;
    v94 = v29;
    while (1)
    {
      v32 = v102
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a1 - 4, v109)
          : *(id *)(v109 + 8 * a1);
      v33 = v32;
      v12 = v31;
      if (__OFADD__(a1 - 4, 1))
        break;
      v111 = a1 - 3;
      v34 = objc_msgSend(v32, "trackingIdentifier");
      v35 = objc_msgSend(v34, "address");

      v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v37 = (uint64_t)v108;
      MACAddress.init(data:type:)(v36);
      v38 = v113;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v37, 1, v113) == 1)
      {
        swift_bridgeObjectRelease();
        v63 = sub_100004048(v37, (uint64_t *)&unk_1010F9890);
        v64 = static os_log_type_t.error.getter(v63);
        os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, qword_1011B7DD8, "received an advertisement of unexpected length or format", 56, 2, _swiftEmptyArrayStorage, v91);
        type metadata accessor for TrackingAvoidanceError(0);
        v66 = v65;
        v116 = 3;
        v67 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
        inited = swift_initStackObject(v67, v115);
        *(_OWORD *)(inited + 16) = v93;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(inited + 40) = v69;
        *(_QWORD *)(inited + 72) = &type metadata for String;
        *(_QWORD *)(inited + 48) = 0xD00000000000001ALL;
        *(_QWORD *)(inited + 56) = 0x8000000100EDAEE0;
        v70 = sub_1006B8B10(inited);
        v71 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
        _BridgedStoredNSError.init(_:userInfo:)(&v117, &v116, v70, v66, v71);
        v72 = v117;
        v73 = (void *)_convertErrorToNSError(_:)(v117);
        (*(void (**)(uint64_t, void *))(v107 + 16))(v107, v73);

        return;
      }
      v110 = v33;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v30, v37, v38);
      v39 = v106[2];
      v40 = v105;
      sub_100D82548(v30, v105);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v40, 1, v104) == 1)
      {
        swift_bridgeObjectRelease();
        v74 = sub_100004048(v40, &qword_101102FB0);
        v75 = static os_log_type_t.error.getter(v74);
        v76 = qword_1011B7DD8;
        v77 = swift_allocObject(v91, 72, 7);
        *(_OWORD *)(v77 + 16) = v93;
        v78 = MACAddress.description.getter(v77);
        v79 = v92;
        *(_QWORD *)(v77 + 56) = &type metadata for String;
        *(_QWORD *)(v77 + 64) = v79;
        *(_QWORD *)(v77 + 32) = v78;
        *(_QWORD *)(v77 + 40) = v80;
        os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v76, "wild mode association record for %@ not found!", 46, 2, v77);
        swift_bridgeObjectRelease();
        type metadata accessor for TrackingAvoidanceError(0);
        v82 = v81;
        v116 = 10;
        v83 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
        v84 = swift_initStackObject(v83, v114);
        *(_OWORD *)(v84 + 16) = v93;
        *(_QWORD *)(v84 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(v84 + 40) = v85;
        *(_QWORD *)(v84 + 72) = &type metadata for String;
        *(_QWORD *)(v84 + 48) = 0xD000000000000021;
        *(_QWORD *)(v84 + 56) = 0x8000000100EDAFB0;
        v86 = sub_1006B8B10(v84);
        v87 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
        _BridgedStoredNSError.init(_:userInfo:)(&v117, &v116, v86, v82, v87);
        v88 = v117;
        v89 = (void *)_convertErrorToNSError(_:)(v117);
        (*(void (**)(uint64_t, void *))(v107 + 16))(v107, v89);

        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v38);
        return;
      }
      v41 = (uint64_t)v112;
      sub_1000126EC(v40, (uint64_t)v112, type metadata accessor for WildModeAssociationRecord);
      v42 = (char *)*((_QWORD *)v39 + 20);
      if (qword_1010E99F8 != -1)
        swift_once(&qword_1010E99F8, sub_1001D7F04);
      v43 = v99;
      v44 = sub_10001A9E8(v99, (uint64_t)qword_1011B6A48);
      v15 = (void (**)(char *, uint64_t))v98;
      v45 = v97;
      v46 = v98[2](v97, v44, v43);
      __chkstk_darwin(v46);
      *(&v91 - 4) = v42;
      *(&v91 - 3) = (char *)v41;
      *(&v91 - 2) = v45;
      OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v91 - 6, &type metadata for Bool);
      v15[1](v45, v43);
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v47 = type metadata accessor for Logger(0);
      v48 = sub_10001A9E8(v47, (uint64_t)qword_1011B77E8);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.default.getter(v49);
      v51 = os_log_type_enabled(v49, v50);
      v52 = v110;
      if (v51)
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Requesting SPUnknownBeaconsChangedNotification to be posted before rate limit.", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
      }

      v54 = dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.default.getter(v55);
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Requesting SPUnknownBeaconsSetChangedNotification to be posted before rate limit.", v57, 2u);
        swift_slowDealloc(v57, -1, -1);
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
      v58 = v113;
      v31 = v95;
      v59 = v100;
      a2 = v112;
      v60 = v101;
      sub_10005972C((uint64_t)v112, (uint64_t)&v100[*(int *)(v101 + 20)], type metadata accessor for WildModeAssociationRecord);
      *v59 = 2;
      v59[*(int *)(v60 + 24)] = 66;
      v61 = v96;
      if (qword_1010EA140 != -1)
        swift_once(&qword_1010EA140, sub_100A3A528);
      sub_100C0B334((uint64_t)v59);
      (*(void (**)(uint64_t, _QWORD))(v107 + 16))(v107, 0);

      sub_1000126B0((uint64_t)v59, type metadata accessor for UnwantedTrackingUserNotification);
      sub_1000126B0((uint64_t)a2, type metadata accessor for WildModeAssociationRecord);
      v30 = v61;
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v61, v58);
      ++a1;
      if (v111 == v94)
        goto LABEL_34;
    }
    __break(1u);
LABEL_36:
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  }
  if (a1 < 0)
    v62 = a1;
  else
    v62 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v29 = _CocoaArrayWrapper.endIndex.getter(v62);
  if (v29)
    goto LABEL_8;
LABEL_34:
  swift_bridgeObjectRelease();
}

uint64_t sub_100576F70(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unsigned int v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  void *v42;
  id v43;
  unsigned int v44;
  NSString v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  char v78[24];
  uint64_t aBlock;
  uint64_t v80;
  uint64_t v81;

  v10 = type metadata accessor for UnwantedTrackingUserNotification(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v13);
  v15 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WildModeAssociationRecord(0);
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v23 = __chkstk_darwin(v22);
  v24 = __chkstk_darwin(v23);
  Strong = __chkstk_darwin(v24);
  v32 = (char *)&v68 - v31;
  if (a2)
    return a3(a2);
  v72 = v27;
  v71 = v26;
  v73 = v30;
  v70 = v12;
  v74 = v29;
  v75 = v28;
  v76 = a4;
  v77 = a3;
  v34 = *(unsigned __int8 *)(a1 + *(int *)(Strong + 64));
  v35 = (int *)Strong;
  v36 = a1;
  if (v34 > 8 || ((1 << v34) & 0x17B) == 0)
  {
    swift_beginAccess(a5 + 16, v78, 0, 0);
    Strong = swift_weakLoadStrong(a5 + 16);
    if (Strong)
    {
      swift_retain();
      swift_release();
      sub_1007F77E0();
      Strong = swift_release();
    }
  }
  v37 = static os_log_type_t.default.getter(Strong);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, qword_1011B7DD8, "Successfully updated existing UT record.", 40, 2, _swiftEmptyArrayStorage);
  v38 = *(unsigned __int8 *)(a1 + v35[13]);
  if (v38 == 4)
  {
    sub_10005972C(a1, (uint64_t)v32, type metadata accessor for WildModeAssociationRecord);
  }
  else
  {
    sub_10005972C(a1, (uint64_t)v32, type metadata accessor for WildModeAssociationRecord);
    if (v38 == 1)
    {
      sub_1000126B0((uint64_t)v32, type metadata accessor for WildModeAssociationRecord);
      v39 = 0;
      goto LABEL_18;
    }
  }
  sub_10000F9B8((uint64_t)&v32[v35[14]], (uint64_t)v18, &qword_101115E60);
  sub_1000126B0((uint64_t)v32, type metadata accessor for WildModeAssociationRecord);
  v40 = type metadata accessor for AccessoryMetadata(0);
  v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v18, 1, v40);
  sub_100004048((uint64_t)v18, &qword_101115E60);
  if (v41 == 1)
  {
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v42 = (void *)qword_1011B7C08;
    v43 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v44 = objc_msgSend(v43, "isInternalBuild");

    if (v44)
    {
      v45 = String._bridgeToObjectiveC()();
      v46 = objc_msgSend(v42, "BOOLForKey:", v45);

      v39 = v46 ^ 1;
    }
    else
    {
      v39 = 1;
    }
  }
  else
  {
    v39 = 0;
  }
LABEL_18:
  v47 = v72;
  sub_10000F9B8(v36 + v35[15], (uint64_t)v15, (uint64_t *)&unk_10111C0A0);
  v48 = type metadata accessor for AccessoryProductInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 48))(v15, 1, v48) == 1)
  {
    sub_100004048((uint64_t)v15, (uint64_t *)&unk_10111C0A0);
    sub_10005972C(v36, v47, type metadata accessor for WildModeAssociationRecord);
    goto LABEL_23;
  }
  v49 = v15[*(int *)(v48 + 180)];
  sub_1000126B0((uint64_t)v15, type metadata accessor for AccessoryProductInfo);
  sub_10005972C(v36, v47, type metadata accessor for WildModeAssociationRecord);
  if (v49 == 2 || (v49 & 1) != 0)
LABEL_23:
    __asm { BR              X10 }
  sub_1000126B0(v47, type metadata accessor for WildModeAssociationRecord);
  LODWORD(v72) = v39;
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  v50 = type metadata accessor for Logger(0);
  sub_10001A9E8(v50, (uint64_t)qword_1010FF230);
  v51 = v36;
  v52 = v36;
  v53 = v71;
  sub_10005972C(v51, v71, type metadata accessor for WildModeAssociationRecord);
  v54 = v73;
  sub_10005972C(v52, v73, type metadata accessor for WildModeAssociationRecord);
  v55 = v74;
  sub_10005972C(v52, v74, type metadata accessor for WildModeAssociationRecord);
  v56 = v75;
  v57 = sub_10005972C(v52, v75, type metadata accessor for WildModeAssociationRecord);
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.default.getter(v58);
  if (os_log_type_enabled(v58, (os_log_type_t)v59))
  {
    LODWORD(v70) = v59;
    v60 = swift_slowAlloc(54, -1);
    v69 = swift_slowAlloc(128, -1);
    aBlock = v69;
    *(_DWORD *)v60 = 136447490;
    v61 = type metadata accessor for UUID(0);
    v62 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v63 = dispatch thunk of CustomStringConvertible.description.getter(v61, v62);
    v80 = sub_100016940(v63, v64, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v60 + 4, v60 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v53, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v60 + 12) = 1024;
    LODWORD(v80) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 4, v60 + 14, v60 + 18);
    *(_WORD *)(v60 + 18) = 1024;
    LODWORD(v80) = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 4, v60 + 20, v60 + 24);
    *(_WORD *)(v60 + 24) = 2082;
    __asm { BR              X10 }
  }
  sub_1000126B0(v53, type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v54, type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v55, type metadata accessor for WildModeAssociationRecord);
  sub_1000126B0(v56, type metadata accessor for WildModeAssociationRecord);

  v65 = v77;
  v67 = static os_log_type_t.default.getter(v66);
  os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, qword_1011B7DD8, "Done waiting for user input", 27, 2, _swiftEmptyArrayStorage);
  return v65(0);
}

uint64_t sub_100577CAC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  BOOL v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  double v85;
  uint64_t v86;
  id v87;
  id v88;
  unsigned __int8 v89;
  id v90;
  unsigned int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  void (*v168)(void);
  id v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  void (*v193)(char *, uint64_t, uint64_t);
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  id v207;
  uint64_t v208;
  uint64_t v209;
  id v210;
  char v211[8];

  v207 = a2;
  v208 = a8;
  v202 = a6;
  v203 = a7;
  v200 = a4;
  v201 = a5;
  v204 = a12;
  v13 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v13);
  v170 = (char *)&v160 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = sub_10001A9A8(&qword_1010FF3F0);
  v172 = *(_QWORD *)(v173 - 8);
  __chkstk_darwin(v173);
  v171 = (char *)&v160 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_10001A9A8(&qword_1010FF3F8);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v174 = (char *)&v160 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_10001A9A8(&qword_1010FF400);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_10001A9A8(&qword_1010FF408);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v160 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_10001A9A8(&qword_1010FF410);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v183 = (char *)&v160 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_10001A9A8(&qword_1010FF418);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v184 = (char *)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_10001A9A8(&qword_1010FF420);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v160 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v164 = *(_QWORD *)(v22 - 8);
  v23 = __chkstk_darwin(v22);
  v166 = (uint64_t)&v160 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = v24;
  __chkstk_darwin(v23);
  v167 = (char *)&v160 - v25;
  v26 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v26);
  v194 = (uint64_t)&v160 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for MACAddress(0);
  v205 = *(_QWORD *)(v197 - 8);
  v28 = __chkstk_darwin(v197);
  v163 = (char *)&v160 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = v29;
  __chkstk_darwin(v28);
  v196 = (char *)&v160 - v30;
  v31 = type metadata accessor for WildModeAssociationRecord(0);
  v198 = *(_QWORD *)(v31 - 8);
  v32 = __chkstk_darwin(v31);
  v193 = (void (*)(char *, uint64_t, uint64_t))((char *)&v160 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = __chkstk_darwin(v32);
  v192 = (uint64_t)&v160 - v35;
  v199 = v36;
  __chkstk_darwin(v34);
  v38 = (char *)&v160 - v37;
  v39 = sub_10001A9A8(&qword_1010FF428);
  v195 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v41 = (char *)&v160 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v42);
  v44 = (char *)&v160 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = (_QWORD *)swift_allocObject(&unk_10107EF30, 48, 7);
  v168 = a9;
  v45[2] = a9;
  v45[3] = a10;
  v206 = v45;
  v46 = v204;
  v45[4] = a11;
  v45[5] = v46;
  sub_10000F9B8(a1 + *(int *)(v31 + 56), (uint64_t)v44, &qword_101115E60);
  v47 = type metadata accessor for AccessoryMetadata(0);
  v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 48))(v44, 1, v47);
  v169 = a10;
  swift_retain();
  swift_retain();
  sub_100004048((uint64_t)v44, &qword_101115E60);
  if (v48 != 1)
  {
    sub_10005972C(a1, (uint64_t)v38, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)(v38, v31);
    v63 = sub_1000193A4(&qword_1010FF4A8, &qword_1010FF428, (const char *)&protocol conformance descriptor for Just<A>);
    v64 = Publisher.eraseToAnyPublisher()(v39, v63);
    (*(void (**)(char *, uint64_t))(v195 + 8))(v41, v39);
LABEL_33:
    v209 = v64;
    sub_10005972C(a1, (uint64_t)v38, type metadata accessor for WildModeAssociationRecord);
    v147 = *(unsigned __int8 *)(v198 + 80);
    v148 = (v147 + 80) & ~v147;
    v149 = (_QWORD *)swift_allocObject(&unk_10107EFA8, v148 + v199, v147 | 7);
    v151 = v207;
    v150 = v208;
    v149[2] = v208;
    v149[3] = v151;
    v152 = v201;
    v153 = v202;
    v149[4] = v200;
    v149[5] = v152;
    v154 = v203;
    v149[6] = v153;
    v149[7] = v154;
    v155 = v206;
    v149[8] = sub_10058A394;
    v149[9] = v155;
    sub_1000126EC((uint64_t)v38, (uint64_t)v149 + v148, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain(v153);
    swift_bridgeObjectRetain(v154);
    swift_retain();
    swift_retain();
    swift_retain();
    v156 = v151;
    v157 = sub_10001A9A8(&qword_1010FF498);
    v158 = sub_1000193A4(&qword_1010FF4A0, &qword_1010FF498, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_10058A268, v149, v157, v158);
    swift_release();
    swift_release();
    swift_beginAccess(v150 + 32, &v209, 33, 0);
    AnyCancellable.store(in:)(v150 + 32);
    swift_endAccess(&v209);
    swift_release();
    swift_release();
    return swift_release();
  }
  v195 = v31;
  v161 = v38;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v49 = type metadata accessor for Logger(0);
  sub_10001A9E8(v49, (uint64_t)qword_1011B7148);
  v50 = a1;
  v51 = v192;
  v52 = sub_10005972C(a1, v192, type metadata accessor for WildModeAssociationRecord);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  v55 = os_log_type_enabled(v53, v54);
  v204 = a1;
  v56 = v205;
  if (v55)
  {
    v57 = (uint8_t *)swift_slowAlloc(12, -1);
    v58 = swift_slowAlloc(32, -1);
    v209 = v58;
    *(_DWORD *)v57 = 136446210;
    v59 = type metadata accessor for UUID(0);
    v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v59, v60);
    v210 = (id)sub_100016940(v61, v62, &v209);
    v56 = v205;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v57 + 4, v57 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Record %{public}s is missing metadata. Attempting to fetch again...", v57, 0xCu);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    v50 = v204;
    swift_slowDealloc(v57, -1, -1);
  }
  else
  {
    sub_1000126B0(v51, type metadata accessor for WildModeAssociationRecord);
  }

  v65 = v197;
  v66 = (uint64_t)v193;
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  sub_10001A9E8(v49, (uint64_t)qword_1010FF230);
  v67 = sub_10005972C(v50, v66, type metadata accessor for WildModeAssociationRecord);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.default.getter(v68);
  if (!os_log_type_enabled(v68, v69))
  {
    sub_1000126B0(v66, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  v70 = swift_slowAlloc(22, -1);
  v71 = swift_slowAlloc(64, -1);
  v209 = v71;
  *(_DWORD *)v70 = 136315394;
  v210 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v209);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v70 + 4, v70 + 12);
  *(_WORD *)(v70 + 12) = 2082;
  v72 = (_BYTE *)(v66 + *(int *)(v195 + 88));
  if ((v72[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v66 + *(int *)(v195 + 84)) & 1) != 0)
      goto LABEL_19;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v66 + *(int *)(v195 + 84)) & 1) == 0)
  {
LABEL_16:
    v73 = *(_BYTE *)(v66 + *(int *)(v195 + 52));
    goto LABEL_20;
  }
  if (*v72 != 1)
  {
LABEL_19:
    v73 = 6;
    goto LABEL_20;
  }
  v73 = 5;
LABEL_20:
  v74 = sub_1005632A4(v73);
  v210 = (id)sub_100016940(v74, v75, &v209);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v70 + 14, v70 + 22);
  swift_bridgeObjectRelease();
  sub_1000126B0(v66, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s Advertisement type: %{public}s", (uint8_t *)v70, 0x16u);
  swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v71, -1, -1);
  swift_slowDealloc(v70, -1, -1);

  v50 = v204;
LABEL_21:
  v76 = v194;
  sub_1001DBC34(v194);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v76, 1, v65) != 1)
  {
    v193 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 32);
    v193(v196, v76, v65);
    LODWORD(v169) = *(unsigned __int8 *)(v50 + *(int *)(v195 + 52));
    if ((_DWORD)v169 == 3)
      v85 = 180.0;
    else
      v85 = 60.0;
    v194 = swift_allocBox(v195);
    sub_10005972C(v50, v86, type metadata accessor for WildModeAssociationRecord);
    v87 = v207;
    v88 = objc_msgSend(v207, "trackingIdentifier");
    v89 = objc_msgSend(v88, "isPosh");

    if ((v89 & 1) != 0)
    {
      v90 = objc_msgSend(v87, "trackingIdentifier");
      v91 = objc_msgSend(v90, "networkID");

      v92 = 2 * (v91 == 2);
      if (v91 == 1)
        v92 = 1;
    }
    else
    {
      v92 = 3;
    }
    LODWORD(v192) = v92;
    v93 = type metadata accessor for SharedBeaconRecord(0);
    v94 = (uint64_t)v167;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v167, 1, 1, v93);
    LODWORD(v168) = *(_BYTE *)(v204 + *(int *)(v195 + 84)) & 1;
    v95 = v163;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v163, v196, v65);
    v96 = v166;
    sub_10000F9B8(v94, v166, (uint64_t *)&unk_1010EE180);
    v97 = *(unsigned __int8 *)(v56 + 80);
    v98 = (v97 + 24) & ~v97;
    v99 = v98 + v162;
    v100 = *(unsigned __int8 *)(v164 + 80);
    v101 = (v100 + v98 + v162 + 1) & ~v100;
    v102 = v101 + v165;
    v103 = swift_allocObject(&unk_10107EF58, v101 + v165 + 1, v97 | v100 | 7);
    v104 = v208;
    *(_QWORD *)(v103 + 16) = v208;
    v193((char *)(v103 + v98), (uint64_t)v95, v65);
    *(_BYTE *)(v103 + v99) = (_BYTE)v169;
    sub_10058A200(v96, v103 + v101);
    *(_BYTE *)(v103 + v102) = (_BYTE)v168;
    v105 = sub_10001A9A8(&qword_1010F3978);
    swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
    swift_retain();
    v209 = Future.init(_:)(sub_10058A248, v103, v106);
    v107 = sub_1000193A4((unint64_t *)&unk_10111C230, &qword_1010F3978, (const char *)&protocol conformance descriptor for Future<A, B>);
    v108 = Publisher.eraseToAnyPublisher()(v105, v107);
    v193 = (void (*)(char *, uint64_t, uint64_t))v108;
    swift_release();
    sub_100004048(v94, (uint64_t *)&unk_1010EE180);
    v209 = v108;
    v210 = *(id *)(v104 + 24);
    v109 = v210;
    v110 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v111 = (uint64_t)v170;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v170, 1, 1, v110);
    v169 = v109;
    v112 = sub_10001A9A8(&qword_1010FF438);
    v113 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v114 = sub_1000193A4((unint64_t *)&unk_10111C240, &qword_1010FF438, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v115 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v116 = v171;
    Publisher.receive<A>(on:options:)(&v210, v111, v112, v113, v114, v115);
    sub_100004048(v111, &qword_1010EECC8);

    v117 = swift_allocObject(&unk_10107EF80, 33, 7);
    v118 = v194;
    *(_QWORD *)(v117 + 16) = v194;
    *(_QWORD *)(v117 + 24) = v104;
    *(_BYTE *)(v117 + 32) = v192;
    swift_retain();
    v119 = swift_retain();
    v120 = static Subscribers.Demand.unlimited.getter(v119);
    v121 = sub_10001A9A8(&qword_1010FF440);
    v122 = sub_10001A9A8((uint64_t *)&unk_10111C130);
    v123 = sub_1000193A4(&qword_1010FF448, &qword_1010FF3F0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v124 = sub_1000193A4(&qword_1010FF450, (uint64_t *)&unk_10111C130, (const char *)&protocol conformance descriptor for Future<A, B>);
    v125 = v174;
    v126 = v173;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v120, sub_10058C8D4, v117, v173, v121, v122, v123, v124);
    swift_release();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v116, v126);
    v127 = sub_1000193A4(&qword_1010FF458, &qword_1010FF3F8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v128 = v177;
    v129 = v176;
    Publisher.timeout(_:queue:customError:)(v169, sub_10058C860, 0, v176, v127, v85);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v125, v129);
    v130 = sub_10001A9A8(&qword_1010F37F0);
    v131 = sub_1000193A4(&qword_1010FF460, &qword_1010FF400, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v132 = v180;
    v133 = v179;
    Publisher.map<A>(_:)(sub_100568814, 0, v179, v130, v131);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v128, v133);
    v134 = sub_10001A9A8(&qword_1010FF468);
    v135 = sub_1000193A4(&qword_1010FF470, &qword_1010FF408, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v136 = sub_1000193A4(&qword_1010FF478, &qword_1010FF468, (const char *)&protocol conformance descriptor for Just<A>);
    v137 = v183;
    v138 = v182;
    Publisher.catch<A>(_:)(sub_100568818, 0, v182, v134, v135, v136);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v132, v138);
    v139 = sub_1000193A4(&qword_1010FF480, &qword_1010FF410, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    v140 = v184;
    v141 = v186;
    Publisher.map<A>(_:)(sub_10058A25C, v118, v186, v195, v139);
    swift_release();
    (*(void (**)(char *, uint64_t))(v185 + 8))(v137, v141);
    v142 = sub_1000193A4(&qword_1010FF488, &qword_1010FF418, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v143 = v189;
    a1 = v204;
    v144 = v188;
    Publisher.replaceError(with:)(v204, v188, v142);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v140, v144);
    v145 = sub_1000193A4(&qword_1010FF490, &qword_1010FF420, (const char *)&protocol conformance descriptor for Publishers.ReplaceError<A>);
    v146 = v191;
    v64 = Publisher.eraseToAnyPublisher()(v191, v145);
    swift_release();
    (*(void (**)(char *, uint64_t))(v190 + 8))(v143, v146);
    (*(void (**)(char *, uint64_t))(v205 + 8))(v196, v197);
    swift_release();
    v38 = v161;
    goto LABEL_33;
  }
  v77 = sub_100004048(v76, (uint64_t *)&unk_1010F9890);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.error.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc(12, -1);
    v81 = swift_slowAlloc(32, -1);
    v209 = v81;
    *(_DWORD *)v80 = 136315138;
    v210 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v209);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v211, v80 + 4, v80 + 12);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "%s unexpected advertisement type!", v80, 0xCu);
    swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1, -1);
    swift_slowDealloc(v80, -1, -1);
  }

  v82 = sub_10058A1B8();
  v83 = swift_allocError(&type metadata for UTError, v82, 0, 0);
  *v84 = 1;
  v168();
  swift_errorRelease(v83);
  return swift_release();
}

uint64_t sub_1005790B4(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, void (*a7)(_QWORD *), uint64_t a8)
{
  uint64_t *v8;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double *v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t v68;
  id v69;
  unsigned int v70;
  id v71;
  NSString v72;
  unsigned int v73;
  uint64_t v74;
  double v75;
  double v76;
  void *v77;
  id v78;
  void *v79;
  void *v80;
  id v81;
  _QWORD *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  double *v88;
  uint64_t v89;
  char *v90;
  NSObject *v91;
  NSObject *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  id v102;
  unsigned int v103;
  id v104;
  unsigned int v105;
  id v106;
  unsigned int v107;
  char v108;
  char v109;
  id v110;
  id v111;
  double *v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  _BOOL4 v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  void *v121;
  id v122;
  unsigned int v123;
  NSString v124;
  unsigned int v125;
  uint64_t v126;
  NSObject *v127;
  os_log_type_t v128;
  uint8_t *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  uint8_t *v142;
  _QWORD *v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  void (*v152)(char *, char *, uint64_t);
  char *v153;
  char *v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  _BOOL4 v158;
  uint8_t *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  os_log_type_t v170;
  _QWORD *v171;
  uint64_t v172;
  unint64_t v173;
  void (*v174)(_QWORD *);
  uint64_t (*v175)(char *, uint64_t);
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  void (*v182)(char *, char *, uint64_t);
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, unint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  void (*v206)(unint64_t, char *, uint64_t);
  uint64_t v207;
  unint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  unint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  id v214;
  id v215;
  uint64_t v216;
  uint64_t v217;
  _QWORD *v218;
  int v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  void (*v224)(char *, char *, uint64_t);
  char *v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  NSObject *v242;
  double *v243;
  void (*v244)(_QWORD *);
  char *v245;
  unint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  void (*v253)(char *, uint64_t);
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  char v257[8];
  _QWORD *v258;

  v244 = a7;
  v240 = a6;
  v237 = a4;
  v232 = a3;
  v231 = a2;
  v246 = a1;
  v230 = *v8;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v228 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v229 = v12;
  v236 = (uint64_t)&v218 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v14 = __chkstk_darwin(v13);
  v223 = (char *)&v218 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v218 - v17;
  __chkstk_darwin(v16);
  v225 = (char *)&v218 - v19;
  v248 = type metadata accessor for MACAddress(0);
  v250 = *(_QWORD *)(v248 - 8);
  v20 = __chkstk_darwin(v248);
  v235 = (char *)&v218 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v234 = (char *)&v218 - v23;
  v24 = __chkstk_darwin(v22);
  v221 = (char *)&v218 - v25;
  v26 = __chkstk_darwin(v24);
  v222 = (char *)&v218 - v27;
  v28 = __chkstk_darwin(v26);
  v239 = (char *)&v218 - v29;
  v227 = v30;
  __chkstk_darwin(v28);
  v243 = (double *)((char *)&v218 - v31);
  v251 = type metadata accessor for UUID(0);
  v247 = *(_QWORD *)(v251 - 8);
  v32 = __chkstk_darwin(v251);
  v233 = (char *)&v218 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v36 = (char *)&v218 - v35;
  v226 = v37;
  __chkstk_darwin(v34);
  v249 = (char *)&v218 - v38;
  v254 = (_QWORD *)type metadata accessor for WildModeTrackingLocation(0);
  v39 = *(v254 - 1);
  v40 = __chkstk_darwin(v254);
  v255 = (uint64_t)&v218 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v44 = (double *)((char *)&v218 - v43);
  __chkstk_darwin(v42);
  v46 = (_QWORD **)((char *)&v218 - v45);
  v242 = a5;
  v47 = -[NSObject observedLocations](a5, "observedLocations");
  v48 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
  v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, v48);

  v220 = v18;
  if ((unint64_t)v49 >> 62)
    goto LABEL_82;
  v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  v241 = a8;
  v245 = v36;
  if (v50)
  {
    v258 = _swiftEmptyArrayStorage;
    sub_10009AED0(0, v50 & ~(v50 >> 63), 0);
    if (v50 < 0)
    {
      __break(1u);
LABEL_87:
      swift_once(&qword_1010EA198, sub_100ACDE4C);
      goto LABEL_53;
    }
    v51 = 0;
    v52 = v258;
    do
    {
      if ((v49 & 0xC000000000000001) != 0)
        v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v51, v49);
      else
        v53 = *(id *)(v49 + 8 * v51 + 32);
      v54 = v53;
      objc_msgSend(v53, "latitude");
      v56 = v55;
      objc_msgSend(v54, "longitude");
      v58 = v57;
      objc_msgSend(v54, "horizontalAccuracy");
      v60 = v59;
      v61 = objc_msgSend(v54, "timestamp");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v61);

      *v46 = v56;
      v46[1] = v58;
      v46[2] = v60;
      v258 = v52;
      v63 = v52[2];
      v62 = v52[3];
      if (v63 >= v62 >> 1)
      {
        sub_10009AED0(v62 > 1, v63 + 1, 1);
        v52 = v258;
      }
      ++v51;
      v52[2] = v63 + 1;
      sub_1000126EC((uint64_t)v46, (uint64_t)v52+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v63, type metadata accessor for WildModeTrackingLocation);
    }
    while (v50 != v51);
    swift_bridgeObjectRelease();
    v36 = v245;
  }
  else
  {
    swift_bridgeObjectRelease();
    v52 = _swiftEmptyArrayStorage;
  }
  v64 = sub_100CA8670((uint64_t)v52);
  swift_bridgeObjectRelease();
  a8 = (uint64_t)sub_1005090C0(v64);
  swift_bridgeObjectRelease();
  v258 = (_QWORD *)a8;
  swift_retain();
  sub_100562DB0((uint64_t *)&v258, (uint64_t (*)(uint64_t))sub_10088F1DC);
  swift_release();
  v46 = v258;
  v258 = _swiftEmptyArrayStorage;
  v254 = (_QWORD *)v46[2];
  if (v254)
  {
    v65 = 0;
    v252 = (char *)0x8000000100EDB150;
    v253 = (void (*)(char *, uint64_t))0xD000000000000013;
    v36 = (char *)&unk_1010F4000;
    while (1)
    {
      if (v65 >= v46[2])
      {
        __break(1u);
LABEL_82:
        if (v49 < 0)
          v217 = v49;
        else
          v217 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v49);
        v50 = _CocoaArrayWrapper.endIndex.getter(v217);
        swift_bridgeObjectRelease();
        goto LABEL_3;
      }
      v68 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v49 = *(_QWORD *)(v39 + 72);
      sub_10005972C((uint64_t)v46 + v68 + v49 * v65, (uint64_t)v44, type metadata accessor for WildModeTrackingLocation);
      v69 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v70 = objc_msgSend(v69, "isInternalBuild");

      if (v70
        && (v71 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults"),
            v72 = String._bridgeToObjectiveC()(),
            v73 = objc_msgSend(v71, "BOOLForKey:", v72),
            v71,
            v72,
            v73))
      {
        a8 = static os_log_type_t.default.getter(v74);
        v66 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
        v67 = (void *)static OS_os_log.default.getter(v66);
        os_log(_:dso:log:_:_:)(a8, &_mh_execute_header, v67, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);

      }
      else
      {
        v75 = *v44;
        v76 = v44[1];
        if (qword_1010E9AD8 != -1)
          swift_once(&qword_1010E9AD8, sub_100264FD8);
        if (!objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v75, v76))
          goto LABEL_29;
        v77 = (void *)qword_1010F46B0;
        if (qword_1010F46B0)
        {
          v78 = (id)qword_1010F46B0;
        }
        else
        {
          v79 = (void *)sub_100265274();
          v80 = (void *)qword_1010F46B0;
          qword_1010F46B0 = (uint64_t)v79;
          v78 = v79;

          v77 = 0;
        }
        v81 = v77;
        a8 = (uint64_t)objc_msgSend(v78, "containsCoordinate:", v75, v76);

        if ((a8 & 1) == 0)
        {
LABEL_29:
          sub_1000126EC((uint64_t)v44, v255, type metadata accessor for WildModeTrackingLocation);
          v82 = v258;
          if ((swift_isUniquelyReferenced_nonNull_native(v258) & 1) == 0)
          {
            sub_10009AED0(0, v82[2] + 1, 1);
            v82 = v258;
          }
          v84 = v82[2];
          v83 = v82[3];
          a8 = v84 + 1;
          if (v84 >= v83 >> 1)
          {
            sub_10009AED0(v83 > 1, v84 + 1, 1);
            v82 = v258;
          }
          v82[2] = a8;
          sub_1000126EC(v255, (uint64_t)v82 + v68 + v84 * v49, type metadata accessor for WildModeTrackingLocation);
          goto LABEL_18;
        }
      }
      sub_1000126B0((uint64_t)v44, type metadata accessor for WildModeTrackingLocation);
LABEL_18:
      if (v254 == (_QWORD *)++v65)
      {
        v254 = v258;
        v36 = v245;
        goto LABEL_36;
      }
    }
  }
  v254 = _swiftEmptyArrayStorage;
LABEL_36:
  v85 = swift_release();
  v86 = v249;
  UUID.init()(v85);
  v39 = v250;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v255 = type metadata accessor for Logger(0);
  sub_10001A9E8(v255, (uint64_t)qword_1011B7148);
  v87 = v247;
  v224 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
  v224(v36, v86, v251);
  v88 = v243;
  v89 = v248;
  v252 = *(char **)(v39 + 16);
  ((void (*)(double *, unint64_t, uint64_t))v252)(v243, v246, v248);
  v90 = v36;
  v91 = v242;
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.default.getter(v92);
  if (os_log_type_enabled(v92, (os_log_type_t)v93))
  {
    v219 = v93;
    v242 = v92;
    v94 = swift_slowAlloc(41, -1);
    v218 = (_QWORD *)swift_slowAlloc(96, -1);
    v258 = v218;
    *(_DWORD *)v94 = 136447234;
    v95 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v96 = v251;
    v97 = dispatch thunk of CustomStringConvertible.description.getter(v251, v95);
    v256 = sub_100016940(v97, v98, (uint64_t *)&v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v94 + 4, v94 + 12);
    swift_bridgeObjectRelease();
    v253 = *(void (**)(char *, uint64_t))(v87 + 8);
    v253(v90, v96);
    *(_WORD *)(v94 + 12) = 2082;
    v99 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v100 = dispatch thunk of CustomStringConvertible.description.getter(v89, v99);
    v256 = sub_100016940(v100, v101, (uint64_t *)&v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v94 + 14, v94 + 22);
    swift_bridgeObjectRelease();
    v243 = *(double **)(v250 + 8);
    ((void (*)(double *, uint64_t))v243)(v88, v89);
    *(_WORD *)(v94 + 22) = 2082;
    __asm { BR              X10 }
  }

  v253 = *(void (**)(char *, uint64_t))(v87 + 8);
  v253(v90, v251);
  v243 = *(double **)(v39 + 8);
  ((void (*)(double *, uint64_t))v243)(v88, v89);

  v102 = -[NSObject trackingIdentifier](v91, "trackingIdentifier");
  v103 = objc_msgSend(v102, "isPosh");

  v104 = -[NSObject trackingIdentifier](v91, "trackingIdentifier");
  v105 = objc_msgSend(v104, "networkID");

  v106 = -[NSObject trackingIdentifier](v91, "trackingIdentifier");
  v107 = objc_msgSend(v106, "status");

  if (v105 == 1)
    v108 = 5;
  else
    v108 = 6;
  if (v103)
    v109 = v108;
  else
    v109 = (v107 >> 4) & 3;
  v245 = (char *)v91;
  v110 = -[NSObject trackingIdentifier](v91, "trackingIdentifier");
  v111 = objc_msgSend(v110, "address");

  v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v111);
  v44 = v112;

  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  v113 = sub_10001A9E8(v255, (uint64_t)qword_1010FF230);
  v114 = Logger.logObject.getter(v113);
  v115 = static os_log_type_t.default.getter(v114);
  v116 = os_log_type_enabled(v114, v115);
  v255 = v50;
  if (v116)
  {
    v117 = swift_slowAlloc(22, -1);
    v118 = (_QWORD *)swift_slowAlloc(64, -1);
    v258 = v118;
    *(_DWORD *)v117 = 136315394;
    v256 = sub_100016940(0xD00000000000006DLL, 0x8000000100EDB560, (uint64_t *)&v258);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v117 + 4, v117 + 12);
    *(_WORD *)(v117 + 12) = 2082;
    v119 = sub_1005632A4(v109);
    v256 = sub_100016940(v119, v120, (uint64_t *)&v258);
    v50 = v255;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v117 + 14, v117 + 22);
    v39 = v250;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "%s Advertisement type: %{public}s", (uint8_t *)v117, 0x16u);
    swift_arrayDestroy(v118, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1, -1);
    swift_slowDealloc(v117, -1, -1);
  }

  if (v109 == 4)
  {
    v133 = swift_release();
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.error.getter(v134);
    if (!os_log_type_enabled(v134, v135))
    {
LABEL_77:

      v174 = v244;
      v175 = (uint64_t (*)(char *, uint64_t))v253;
      type metadata accessor for TrackingAvoidanceError(0);
      v177 = v176;
      v256 = 1;
      v178 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v179 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
      _BridgedStoredNSError.init(_:userInfo:)(&v258, &v256, v178, v177, v179);
      v180 = v258;
      v174(v258);

      sub_10001BC14(v50, (unint64_t)v44);
      return v175(v249, v251);
    }
    v136 = (uint8_t *)swift_slowAlloc(12, -1);
    v137 = (_QWORD *)swift_slowAlloc(32, -1);
    v258 = v137;
    *(_DWORD *)v136 = 136315138;
    v256 = sub_100016940(0xD00000000000006DLL, 0x8000000100EDB560, (uint64_t *)&v258);
    v50 = v255;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v136 + 4, v136 + 12);
    _os_log_impl((void *)&_mh_execute_header, v134, v135, "%s unexpected advertisement type!", v136, 0xCu);
    swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
    v138 = v137;
LABEL_75:
    swift_slowDealloc(v138, -1, -1);
    swift_slowDealloc(v136, -1, -1);
    goto LABEL_77;
  }
  if (v109 != 6)
  {
    sub_10001BBBC(v50, (unint64_t)v44);
    v139 = sub_10001BBBC(v50, (unint64_t)v44);
    v140 = Logger.logObject.getter(v139);
    v141 = static os_log_type_t.default.getter(v140);
    if (os_log_type_enabled(v140, v141))
    {
      v142 = (uint8_t *)swift_slowAlloc(12, -1);
      v143 = (_QWORD *)swift_slowAlloc(32, -1);
      v258 = v143;
      *(_DWORD *)v142 = 136446210;
      v144 = Data.hexString.getter(v50, v44);
      v256 = sub_100016940(v144, v145, (uint64_t *)&v258);
      v39 = v250;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v142 + 4, v142 + 12);
      v50 = v255;
      swift_bridgeObjectRelease();
      sub_10001BC14(v50, (unint64_t)v44);
      sub_10001BC14(v50, (unint64_t)v44);
      _os_log_impl((void *)&_mh_execute_header, v140, v141, "Sanitizing MAC address: %{public}s", v142, 0xCu);
      swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1, -1);
      swift_slowDealloc(v142, -1, -1);
    }
    else
    {
      sub_10001BC14(v50, (unint64_t)v44);
      sub_10001BC14(v50, (unint64_t)v44);
    }

    v150 = v225;
    sub_10001BBBC(v50, (unint64_t)v44);
    MACAddress.init(addressToSanitize:type:)(v50, v44, 1);
    v147 = v248;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v150, 1, v248) == 1)
    {
      swift_release();
      v151 = (uint64_t)v150;
LABEL_73:
      sub_100004048(v151, (uint64_t *)&unk_1010F9890);
      sub_10001BBBC(v50, (unint64_t)v44);
      v169 = sub_10001BBBC(v50, (unint64_t)v44);
      v134 = Logger.logObject.getter(v169);
      v170 = static os_log_type_t.error.getter(v134);
      if (!os_log_type_enabled(v134, v170))
      {
        sub_10001BC14(v50, (unint64_t)v44);
        sub_10001BC14(v50, (unint64_t)v44);
        goto LABEL_77;
      }
      v136 = (uint8_t *)swift_slowAlloc(12, -1);
      v171 = (_QWORD *)swift_slowAlloc(32, -1);
      v258 = v171;
      *(_DWORD *)v136 = 136315138;
      v172 = Data.hexString.getter(v255, v44);
      v256 = sub_100016940(v172, v173, (uint64_t *)&v258);
      v50 = v255;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v136 + 4, v136 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v50, (unint64_t)v44);
      sub_10001BC14(v50, (unint64_t)v44);
      _os_log_impl((void *)&_mh_execute_header, v134, v170, "Invalid address %s!", v136, 0xCu);
      swift_arrayDestroy(v171, 1, (char *)&type metadata for Any + 8);
      v138 = v171;
      goto LABEL_75;
    }
    v152 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v153 = v222;
    v152(v222, v150, v147);
    v154 = v221;
    v155 = ((uint64_t (*)(char *, char *, uint64_t))v252)(v221, v153, v147);
    v156 = Logger.logObject.getter(v155);
    v157 = static os_log_type_t.default.getter(v156);
    v158 = os_log_type_enabled(v156, v157);
    v253 = (void (*)(char *, uint64_t))v152;
    if (v158)
    {
      v159 = (uint8_t *)swift_slowAlloc(12, -1);
      v160 = v147;
      v161 = (_QWORD *)swift_slowAlloc(32, -1);
      v258 = v161;
      *(_DWORD *)v159 = 136446210;
      v242 = (v159 + 4);
      v162 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v163 = dispatch thunk of CustomStringConvertible.description.getter(v160, v162);
      v256 = sub_100016940(v163, v164, (uint64_t *)&v258);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v242, v159 + 12);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t))v243)(v154, v160);
      _os_log_impl((void *)&_mh_execute_header, v156, v157, "Sanitized MAC address: %{public}s", v159, 0xCu);
      swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
      v165 = v161;
      v147 = v160;
      v152 = (void (*)(char *, char *, uint64_t))v253;
      swift_slowDealloc(v165, -1, -1);
      swift_slowDealloc(v159, -1, -1);
    }
    else
    {
      ((void (*)(char *, uint64_t))v243)(v154, v147);
    }

    v149 = v249;
    v148 = (uint64_t)v239;
    v166 = v247;
    v167 = v226;
    v243 = v44;
    v152(v239, v153, v147);
    v39 = v250;
    goto LABEL_80;
  }
  if (qword_1010EA198 != -1)
    goto LABEL_87;
LABEL_53:
  v121 = (void *)qword_1011B7C08;
  v122 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v123 = objc_msgSend(v122, "isInternalBuild");

  if (v123
    && (v124 = String._bridgeToObjectiveC()(),
        v125 = objc_msgSend(v121, "BOOLForKey:", v124),
        v124,
        v125))
  {
    sub_10001BBBC(v50, (unint64_t)v44);
    v126 = sub_10001BBBC(v50, (unint64_t)v44);
    v127 = Logger.logObject.getter(v126);
    v128 = static os_log_type_t.default.getter(v127);
    if (os_log_type_enabled(v127, v128))
    {
      v129 = (uint8_t *)swift_slowAlloc(12, -1);
      v130 = (_QWORD *)swift_slowAlloc(32, -1);
      v258 = v130;
      *(_DWORD *)v129 = 136446210;
      v131 = Data.hexString.getter(v50, v44);
      v256 = sub_100016940(v131, v132, (uint64_t *)&v258);
      v39 = v250;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v129 + 4, v129 + 12);
      v50 = v255;
      swift_bridgeObjectRelease();
      sub_10001BC14(v50, (unint64_t)v44);
      sub_10001BC14(v50, (unint64_t)v44);
      _os_log_impl((void *)&_mh_execute_header, v127, v128, "ForceReadingHawkeyeAIS is enabled. Sanitizing MAC address: %{public}s", v129, 0xCu);
      swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v130, -1, -1);
      swift_slowDealloc(v129, -1, -1);
    }
    else
    {
      sub_10001BC14(v50, (unint64_t)v44);
      sub_10001BC14(v50, (unint64_t)v44);
    }

    v149 = v249;
    v146 = v220;
    sub_10001BBBC(v50, (unint64_t)v44);
    MACAddress.init(addressToSanitize:type:)(v50, v44, 1);
    v147 = v248;
    v168 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v146, 1, v248);
    v148 = (uint64_t)v239;
    if (v168 == 1)
      goto LABEL_72;
    v243 = v44;
    v253 = *(void (**)(char *, uint64_t))(v39 + 32);
    ((void (*)(char *, char *, uint64_t))v253)(v239, v146, v147);
  }
  else
  {
    sub_10001BBBC(v50, (unint64_t)v44);
    v146 = v223;
    MACAddress.init(data:type:)(v50);
    v147 = v248;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v146, 1, v248) == 1)
    {
LABEL_72:
      swift_release();
      v151 = (uint64_t)v146;
      goto LABEL_73;
    }
    v243 = v44;
    v148 = (uint64_t)v239;
    v253 = *(void (**)(char *, uint64_t))(v39 + 32);
    ((void (*)(char *, char *, uint64_t))v253)(v239, v146, v147);
    v149 = v249;
  }
  v166 = v247;
  v167 = v226;
LABEL_80:
  v182 = v224;
  v183 = sub_10001A9A8(&qword_101115E60);
  v242 = swift_allocBox(v183);
  v185 = v184;
  v186 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 56))(v185, 1, 1, v186);
  v187 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v226 = swift_allocBox(v187);
  v189 = v188;
  v190 = type metadata accessor for AccessoryProductInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v190 - 8) + 56))(v189, 1, 1, v190);
  v225 = (char *)swift_allocObject(&unk_10107EF08, 24, 7);
  swift_weakInit(v225 + 16, v238);
  v191 = v251;
  v182(v233, v149, v251);
  v192 = (void (*)(char *, unint64_t, uint64_t))v252;
  ((void (*)(char *, uint64_t, uint64_t))v252)(v234, v148, v147);
  sub_10000F9B8(v237, v236, (uint64_t *)&unk_1010EE180);
  v192(v235, v246, v147);
  v193 = *(unsigned __int8 *)(v166 + 80);
  v194 = (v193 + 32) & ~v193;
  v195 = (v167 + v194 + 7) & 0xFFFFFFFFFFFFFFF8;
  v196 = (v195 + 15) & 0xFFFFFFFFFFFFFFF8;
  v197 = *(unsigned __int8 *)(v39 + 80);
  v198 = v191;
  v199 = (v197 + v196 + 8) & ~v197;
  v200 = *(unsigned __int8 *)(v228 + 80);
  v201 = (v227 + v200 + v199) & ~v200;
  v202 = (v229 + v197 + v201) & ~v197;
  v229 = (v202 + v227 + 7) & 0xFFFFFFFFFFFFFFF8;
  v228 = (v202 + v227 + 23) & 0xFFFFFFFFFFFFFFF8;
  v246 = (v228 + 23) & 0xFFFFFFFFFFFFFFF8;
  v252 = (char *)((v246 + 23) & 0xFFFFFFFFFFFFFFF8);
  v203 = swift_allocObject(&unk_10107F020, v252 + 8, v193 | v197 | v200 | 7);
  v204 = v245;
  *(_QWORD *)(v203 + 16) = v225;
  *(_QWORD *)(v203 + 24) = v204;
  (*(void (**)(uint64_t, char *, uint64_t))(v166 + 32))(v203 + v194, v233, v198);
  *(_QWORD *)(v203 + v195) = v242;
  *(_QWORD *)(v203 + v196) = v226;
  v205 = v248;
  v206 = (void (*)(unint64_t, char *, uint64_t))v253;
  ((void (*)(uint64_t, char *, uint64_t))v253)(v203 + v199, v234, v248);
  sub_10058A200(v236, v203 + v201);
  v207 = v205;
  v206(v203 + v202, v235, v205);
  v208 = v203 + v229;
  *(_QWORD *)v208 = v254;
  LOBYTE(v195) = v240;
  *(_BYTE *)(v208 + 8) = v240;
  v209 = (uint64_t *)(v203 + v228);
  v210 = v231;
  v211 = v232;
  *v209 = v231;
  v209[1] = v211;
  v212 = (_QWORD *)(v203 + v246);
  v213 = v241;
  *v212 = v244;
  v212[1] = v213;
  *(_QWORD *)&v252[v203] = v230;
  v214 = v204;
  swift_retain();
  swift_retain();
  sub_1001DD474(v210, v211);
  swift_retain();
  v215 = objc_msgSend(v214, "trackingIdentifier");
  LOBYTE(v211) = objc_msgSend(v215, "isPosh");

  v216 = (uint64_t)v239;
  sub_10056AAD4((uint64_t)v239, v195, v237, v211, (void (*)(uint64_t))sub_10058A6BC, v203);
  swift_release();
  sub_10001BC14(v255, (unint64_t)v243);
  (*(void (**)(uint64_t, uint64_t))(v250 + 8))(v216, v207);
  (*(void (**)(char *, uint64_t))(v247 + 8))(v249, v251);
  swift_release();
  return swift_release();
}

uint64_t sub_10057ACCC(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, NSObject *a5, uint64_t a6, void (*a7)(_QWORD *), uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  void (*v53)(_QWORD *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  NSObject *v59;
  uint64_t v60;

  v9 = v8;
  v53 = a7;
  v54 = a8;
  v55 = a6;
  v59 = a5;
  v48 = a2;
  v49 = a3;
  v47 = *v8;
  v46 = type metadata accessor for WildModeTrackingLocation(0);
  v60 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v13 = __chkstk_darwin(v12);
  v52 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v45 - v15;
  v17 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v17);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v20);
  v22 = (char *)&v45 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for WildModeAssociationRecord(0);
  v23 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = a4;
  sub_10000F9B8(a4, (uint64_t)v16, (uint64_t *)&unk_1010EE180);
  v26 = type metadata accessor for SharedBeaconRecord(0);
  v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48);
  v27 = v50(v16, 1, v26);
  v58 = v9;
  v51 = v26;
  if (v27 == 1)
  {
    sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010EE180);
    v28 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v19, 1, 1, v28);
    v29 = (uint64_t)v25;
  }
  else
  {
    v30 = &v16[*(int *)(v26 + 20)];
    v31 = a1;
    v32 = type metadata accessor for UUID(0);
    v33 = *(_QWORD *)(v32 - 8);
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v19, v30, v32);
    sub_1000126B0((uint64_t)v16, type metadata accessor for SharedBeaconRecord);
    v34 = v32;
    a1 = v31;
    v29 = (uint64_t)v25;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v19, 0, 1, v34);
  }
  sub_100570340(a1, (uint64_t)v19, (uint64_t)v22);
  sub_100004048((uint64_t)v19, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v57) != 1)
  {
    v57 = a1;
    v36 = sub_1000126EC((uint64_t)v22, v29, type metadata accessor for WildModeAssociationRecord);
    static os_log_type_t.default.getter(v36);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v38 = swift_allocObject(v37, 152, 7);
    *(_OWORD *)(v38 + 16) = xmmword_100E221E0;
    v39 = UUID.uuidString.getter(v38);
    v41 = v40;
    *(_QWORD *)(v38 + 56) = &type metadata for String;
    v42 = sub_10001AA00();
    *(_QWORD *)(v38 + 64) = v42;
    *(_QWORD *)(v38 + 32) = v39;
    *(_QWORD *)(v38 + 40) = v41;
    v43 = MACAddress.description.getter(v42);
    *(_QWORD *)(v38 + 96) = &type metadata for String;
    *(_QWORD *)(v38 + 104) = v42;
    *(_QWORD *)(v38 + 72) = v43;
    *(_QWORD *)(v38 + 80) = v44;
    __asm { BR              X12 }
  }
  sub_100004048((uint64_t)v22, &qword_101102FB0);
  return sub_1005790B4(a1, v48, v49, v56, v59, v55, v53, v54);
}

uint64_t sub_10057B494(uint64_t a1, uint64_t *a2, void *a3, void (*a4)(uint64_t, void *), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  NSString v32;
  unsigned __int8 v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  int v56;
  int *v57;
  void (*v58)(uint64_t, void *);
  char *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  v57 = (int *)sub_10001A9A8(&qword_1010FF530);
  __chkstk_darwin(v57);
  v59 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10001A9A8(&qword_1010FF538);
  v11 = __chkstk_darwin(v62);
  v63 = (uint64_t *)((char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  v66 = (_QWORD *)((char *)&v56 - v13);
  v14 = swift_allocObject(&unk_10107F0E8, 32, 7);
  v58 = a4;
  *(_QWORD *)(v14 + 16) = a4;
  *(_QWORD *)(v14 + 24) = a5;
  v15 = (_QWORD *)swift_allocObject(&unk_10107F110, 40, 7);
  v15[2] = sub_10058B348;
  v15[3] = v14;
  v64 = v15;
  v15[4] = a3;
  v61 = a5;
  swift_retain();
  v65 = v14;
  swift_retain();
  v60 = a3;
  v16 = static os_log_type_t.default.getter(v60);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v17 = qword_1011B7D50;
  v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v19 = swift_allocObject(v18, 112, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E22B10;
  v67 = *a2;
  v20 = sub_10001A9A8(&qword_1010FF3D8);
  v21 = String.init<A>(describing:)(&v67, v20);
  v23 = v22;
  *(_QWORD *)(v19 + 56) = &type metadata for String;
  v24 = sub_10001AA00();
  *(_QWORD *)(v19 + 32) = v21;
  *(_QWORD *)(v19 + 40) = v23;
  *(_QWORD *)(v19 + 96) = &type metadata for String;
  *(_QWORD *)(v19 + 104) = v24;
  *(_QWORD *)(v19 + 64) = v24;
  *(_QWORD *)(v19 + 72) = 0xD000000000000039;
  *(_QWORD *)(v19 + 80) = 0x8000000100EDB460;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "%{public}@: %{public}@", 22, 2, v19);
  v25 = swift_bridgeObjectRelease();
  v26 = static os_log_type_t.default.getter(v25);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v27 = qword_1011B7DD8;
  v28 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v55 = a1;
    else
      v55 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v29 = _CocoaArrayWrapper.endIndex.getter(v55);
    swift_bridgeObjectRelease();
  }
  else
  {
    v29 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v28 + 56) = &type metadata for Int;
  *(_QWORD *)(v28 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v28 + 32) = v29;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "received %d unauthorized tracking observation(s)", v56);
  swift_bridgeObjectRelease();
  v30 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (!v30)
    goto LABEL_30;
  v31 = v30;
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v31, "applicationIsInstalled:", v32);

  v34 = v66;
  if ((v33 & 1) == 0)
  {
    sub_10000A430();
    swift_bridgeObjectRelease();
    sub_1007F77E0();
  }
  if (!((unint64_t)a1 >> 62))
  {
    v35 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v35)
      goto LABEL_12;
LABEL_21:
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  if (a1 < 0)
    v39 = a1;
  else
    v39 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v39))
    goto LABEL_21;
LABEL_12:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_15;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_30:

    swift_release();
    result = swift_release();
    __break(1u);
    return result;
  }
  v36 = *(id *)(a1 + 32);
LABEL_15:
  swift_bridgeObjectRelease();
  sub_100563FD4(v36, v34);
  v37 = v63;
  sub_10000F9B8((uint64_t)v34, (uint64_t)v63, &qword_1010FF538);
  if (swift_getEnumCaseMultiPayload(v37, v62) == 1)
  {
    v38 = *v37;
    swift_retain();
    swift_errorRetain(v38);
    sub_100563BB4(v60, v38, v58);

    swift_release();
    swift_errorRelease(v38);
    swift_errorRelease(v38);
    sub_100004048((uint64_t)v34, &qword_1010FF538);
  }
  else
  {
    v41 = v57[12];
    v42 = (unint64_t)v59;
    v43 = (uint64_t *)&v59[v41];
    v44 = v57[16];
    v45 = (uint64_t)&v59[v44];
    v46 = v57[20];
    v47 = v57[24];
    v48 = (uint64_t *)((char *)v37 + v41);
    v62 = (uint64_t)v37 + v44;
    v49 = type metadata accessor for MACAddress(0);
    (*(void (**)(unint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v49 - 8) + 32))(v42, v37, v49);
    v50 = *v48;
    v51 = v48[1];
    *v43 = v50;
    v43[1] = v51;
    sub_10058A200(v62, v45);
    v52 = *(void **)((char *)v37 + v46);
    *(_QWORD *)(v42 + v46) = v52;
    v53 = *((unsigned __int8 *)v37 + v47);
    *(_BYTE *)(v42 + v47) = v53;
    sub_1001DD474(v50, v51);
    v54 = v52;
    sub_10057ACCC(v42, v50, v51, v45, v36, v53, (void (*)(_QWORD *))sub_10058B354, (uint64_t)v64);

    sub_1001DAFB8(v50, v51);
    sub_100004048(v42, &qword_1010FF530);
    sub_100004048((uint64_t)v66, &qword_1010FF538);
  }
  swift_release();
  return swift_release();
}

uint64_t sub_10057BA9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (*a10)(uint64_t, void *), void *a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  BOOL v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  id v92;
  double v93;
  uint64_t v94;
  id v95;
  unsigned __int8 v96;
  id v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  id v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  void (*v174)(uint64_t, void *);
  id v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t);
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  id v218;
  char v219[8];

  v210 = a7;
  v211 = a8;
  v208 = a5;
  v209 = a6;
  v207 = a4;
  v216 = a2;
  v12 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v12);
  v176 = (char *)&v166 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_10001A9A8(&qword_1010FF3F0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_10001A9A8(&qword_1010FF3F8);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v166 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_10001A9A8(&qword_1010FF400);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_10001A9A8(&qword_1010FF408);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v186 = (char *)&v166 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_10001A9A8(&qword_1010FF410);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v189 = (char *)&v166 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_10001A9A8(&qword_1010FF418);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v190 = (char *)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_10001A9A8(&qword_1010FF420);
  v196 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v195 = (char *)&v166 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v170 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v172 = (uint64_t)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = v23;
  __chkstk_darwin(v22);
  v173 = (char *)&v166 - v24;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v25);
  v200 = (uint64_t)&v166 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = type metadata accessor for MACAddress(0);
  v212 = *(_QWORD *)(v203 - 8);
  v27 = __chkstk_darwin(v203);
  v169 = (char *)&v166 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = v28;
  __chkstk_darwin(v27);
  v202 = (char *)&v166 - v29;
  v30 = type metadata accessor for WildModeAssociationRecord(0);
  v204 = *(_QWORD *)(v30 - 8);
  v31 = __chkstk_darwin(v30);
  v199 = (void (*)(char *, uint64_t, uint64_t))((char *)&v166 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = __chkstk_darwin(v31);
  v198 = (uint64_t)&v166 - v34;
  v205 = v35;
  __chkstk_darwin(v33);
  v37 = (char *)&v166 - v36;
  v206 = sub_10001A9A8(&qword_1010FF428);
  v201 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v39 = (char *)&v166 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v40);
  v42 = (char *)&v166 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = swift_allocObject(&unk_10107F138, 32, 7);
  v174 = a10;
  *(_QWORD *)(v43 + 16) = a10;
  *(_QWORD *)(v43 + 24) = a11;
  v44 = (_QWORD *)swift_allocObject(&unk_10107F160, 40, 7);
  v44[2] = sub_10058C8B8;
  v44[3] = v43;
  v44[4] = a9;
  v45 = swift_allocObject(&unk_10107F188, 32, 7);
  *(_QWORD *)(v45 + 16) = sub_10058B354;
  *(_QWORD *)(v45 + 24) = v44;
  v213 = v45;
  sub_10000F9B8(a1 + *(int *)(v30 + 56), (uint64_t)v42, &qword_101115E60);
  v46 = type metadata accessor for AccessoryMetadata(0);
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v42, 1, v46);
  v175 = a11;
  swift_retain();
  v215 = v43;
  swift_retain();
  v48 = a9;
  v214 = v44;
  swift_retain();
  sub_100004048((uint64_t)v42, &qword_101115E60);
  if (v47 != 1)
  {
    v63 = a1;
    sub_10005972C(a1, (uint64_t)v37, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)(v37, v30);
    v64 = sub_1000193A4(&qword_1010FF4A8, &qword_1010FF428, (const char *)&protocol conformance descriptor for Just<A>);
    v65 = v206;
    v66 = Publisher.eraseToAnyPublisher()(v206, v64);
    (*(void (**)(char *, uint64_t))(v201 + 8))(v39, v65);
    v67 = v211;
    v68 = v216;
LABEL_33:
    v217 = v66;
    sub_10005972C(v63, (uint64_t)v37, type metadata accessor for WildModeAssociationRecord);
    v155 = *(unsigned __int8 *)(v204 + 80);
    v156 = (v155 + 80) & ~v155;
    v157 = (_QWORD *)swift_allocObject(&unk_10107F200, v156 + v205, v155 | 7);
    v157[2] = v67;
    v157[3] = v68;
    v158 = v208;
    v159 = v209;
    v157[4] = v207;
    v157[5] = v158;
    v160 = v210;
    v157[6] = v159;
    v157[7] = v160;
    v161 = v213;
    v157[8] = sub_10058C8BC;
    v157[9] = v161;
    sub_1000126EC((uint64_t)v37, (uint64_t)v157 + v156, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v160);
    swift_retain();
    swift_retain();
    swift_retain();
    v162 = v68;
    v163 = sub_10001A9A8(&qword_1010FF498);
    v164 = sub_1000193A4(&qword_1010FF4A0, &qword_1010FF498, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_10058A268, v157, v163, v164);
    swift_release();
    swift_release();
    swift_beginAccess(v67 + 32, &v217, 33, 0);
    AnyCancellable.store(in:)(v67 + 32);
    swift_endAccess(&v217);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v201 = v30;
  v167 = v37;
  v206 = a1;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v49 = type metadata accessor for Logger(0);
  sub_10001A9E8(v49, (uint64_t)qword_1011B7148);
  v50 = v206;
  v51 = v198;
  v52 = sub_10005972C(v206, v198, type metadata accessor for WildModeAssociationRecord);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  v55 = os_log_type_enabled(v53, v54);
  v166 = v48;
  if (v55)
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    v217 = v57;
    *(_DWORD *)v56 = 136446210;
    v58 = type metadata accessor for UUID(0);
    v59 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v60 = v58;
    v50 = v206;
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v60, v59);
    v218 = (id)sub_100016940(v61, v62, &v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v56 + 4, v56 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Record %{public}s is missing metadata. Attempting to fetch again...", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    sub_1000126B0(v51, type metadata accessor for WildModeAssociationRecord);
  }

  v69 = v203;
  v70 = (uint64_t)v199;
  v71 = v216;
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  sub_10001A9E8(v49, (uint64_t)qword_1010FF230);
  v72 = sub_10005972C(v50, v70, type metadata accessor for WildModeAssociationRecord);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.default.getter(v73);
  if (!os_log_type_enabled(v73, v74))
  {
    sub_1000126B0(v70, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  v75 = swift_slowAlloc(22, -1);
  v76 = swift_slowAlloc(64, -1);
  v217 = v76;
  *(_DWORD *)v75 = 136315394;
  v218 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v217);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v75 + 4, v75 + 12);
  *(_WORD *)(v75 + 12) = 2082;
  v77 = (_BYTE *)(v70 + *(int *)(v201 + 88));
  if ((v77[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v70 + *(int *)(v201 + 84)) & 1) != 0)
      goto LABEL_19;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v70 + *(int *)(v201 + 84)) & 1) == 0)
  {
LABEL_16:
    v78 = *(_BYTE *)(v70 + *(int *)(v201 + 52));
    goto LABEL_20;
  }
  if (*v77 != 1)
  {
LABEL_19:
    v78 = 6;
    goto LABEL_20;
  }
  v78 = 5;
LABEL_20:
  v79 = sub_1005632A4(v78);
  v218 = (id)sub_100016940(v79, v80, &v217);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v75 + 14, v75 + 22);
  swift_bridgeObjectRelease();
  sub_1000126B0(v70, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v73, v74, "%s Advertisement type: %{public}s", (uint8_t *)v75, 0x16u);
  swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v76, -1, -1);
  swift_slowDealloc(v75, -1, -1);

  v50 = v206;
LABEL_21:
  v81 = v200;
  sub_1001DBC34(v200);
  v82 = v212;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v81, 1, v69) != 1)
  {
    v199 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
    v199(v202, v81, v69);
    LODWORD(v175) = *(unsigned __int8 *)(v50 + *(int *)(v201 + 52));
    if ((_DWORD)v175 == 3)
      v93 = 180.0;
    else
      v93 = 60.0;
    v200 = swift_allocBox(v201);
    sub_10005972C(v50, v94, type metadata accessor for WildModeAssociationRecord);
    v95 = objc_msgSend(v71, "trackingIdentifier");
    v96 = objc_msgSend(v95, "isPosh");

    if ((v96 & 1) != 0)
    {
      v97 = objc_msgSend(v71, "trackingIdentifier");
      v98 = objc_msgSend(v97, "networkID");

      v99 = 2 * (v98 == 2);
      if (v98 == 1)
        v99 = 1;
    }
    else
    {
      v99 = 3;
    }
    LODWORD(v198) = v99;
    v100 = type metadata accessor for SharedBeaconRecord(0);
    v101 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v173, 1, 1, v100);
    LODWORD(v174) = *(_BYTE *)(v50 + *(int *)(v201 + 84)) & 1;
    v102 = v212;
    v103 = v169;
    (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v169, v202, v69);
    v104 = v172;
    sub_10000F9B8(v101, v172, (uint64_t *)&unk_1010EE180);
    v105 = *(unsigned __int8 *)(v102 + 80);
    v106 = (v105 + 24) & ~v105;
    v107 = v106 + v168;
    v108 = *(unsigned __int8 *)(v170 + 80);
    v109 = (v108 + v106 + v168 + 1) & ~v108;
    v110 = v109 + v171;
    v111 = swift_allocObject(&unk_10107F1B0, v109 + v171 + 1, v105 | v108 | 7);
    v112 = v211;
    *(_QWORD *)(v111 + 16) = v211;
    v199((char *)(v111 + v106), (uint64_t)v103, v69);
    *(_BYTE *)(v111 + v107) = (_BYTE)v175;
    sub_10058A200(v104, v111 + v109);
    *(_BYTE *)(v111 + v110) = (_BYTE)v174;
    v113 = sub_10001A9A8(&qword_1010F3978);
    swift_allocObject(v113, *(unsigned int *)(v113 + 48), *(unsigned __int16 *)(v113 + 52));
    swift_retain();
    v217 = Future.init(_:)(sub_10058A248, v111, v114);
    v115 = sub_1000193A4((unint64_t *)&unk_10111C230, &qword_1010F3978, (const char *)&protocol conformance descriptor for Future<A, B>);
    v116 = Publisher.eraseToAnyPublisher()(v113, v115);
    v199 = (void (*)(char *, uint64_t, uint64_t))v116;
    swift_release();
    sub_100004048(v101, (uint64_t *)&unk_1010EE180);
    v217 = v116;
    v218 = *(id *)(v112 + 24);
    v117 = v218;
    v118 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v119 = (uint64_t)v176;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v176, 1, 1, v118);
    v175 = v117;
    v120 = sub_10001A9A8(&qword_1010FF438);
    v121 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v122 = sub_1000193A4((unint64_t *)&unk_10111C240, &qword_1010FF438, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v123 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v124 = v177;
    Publisher.receive<A>(on:options:)(&v218, v119, v120, v121, v122, v123);
    sub_100004048(v119, &qword_1010EECC8);

    v125 = swift_allocObject(&unk_10107F1D8, 33, 7);
    *(_QWORD *)(v125 + 16) = v200;
    *(_QWORD *)(v125 + 24) = v112;
    *(_BYTE *)(v125 + 32) = v198;
    swift_retain();
    v126 = swift_retain();
    v127 = static Subscribers.Demand.unlimited.getter(v126);
    v128 = sub_10001A9A8(&qword_1010FF440);
    v129 = sub_10001A9A8((uint64_t *)&unk_10111C130);
    v130 = sub_1000193A4(&qword_1010FF448, &qword_1010FF3F0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v131 = sub_1000193A4(&qword_1010FF450, (uint64_t *)&unk_10111C130, (const char *)&protocol conformance descriptor for Future<A, B>);
    v132 = v180;
    v133 = v179;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v127, sub_10058C8D4, v125, v179, v128, v129, v130, v131);
    v67 = v112;
    v63 = v206;
    swift_release();
    (*(void (**)(char *, uint64_t))(v178 + 8))(v124, v133);
    v134 = sub_1000193A4(&qword_1010FF458, &qword_1010FF3F8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v135 = v183;
    v136 = v182;
    Publisher.timeout(_:queue:customError:)(v175, sub_10058C860, 0, v182, v134, v93);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v132, v136);
    v137 = sub_10001A9A8(&qword_1010F37F0);
    v138 = sub_1000193A4(&qword_1010FF460, &qword_1010FF400, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v139 = v186;
    v140 = v185;
    Publisher.map<A>(_:)(sub_100568814, 0, v185, v137, v138);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v135, v140);
    v141 = sub_10001A9A8(&qword_1010FF468);
    v142 = sub_1000193A4(&qword_1010FF470, &qword_1010FF408, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v143 = sub_1000193A4(&qword_1010FF478, &qword_1010FF468, (const char *)&protocol conformance descriptor for Just<A>);
    v144 = v189;
    v145 = v188;
    Publisher.catch<A>(_:)(sub_100568818, 0, v188, v141, v142, v143);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v139, v145);
    v146 = sub_1000193A4(&qword_1010FF480, &qword_1010FF410, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v147 = v200;
    swift_retain();
    v148 = v190;
    v149 = v192;
    Publisher.map<A>(_:)(sub_10058A25C, v147, v192, v201, v146);
    swift_release();
    (*(void (**)(char *, uint64_t))(v191 + 8))(v144, v149);
    v150 = sub_1000193A4(&qword_1010FF488, &qword_1010FF418, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v151 = v195;
    v152 = v194;
    Publisher.replaceError(with:)(v63, v194, v150);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v148, v152);
    v153 = sub_1000193A4(&qword_1010FF490, &qword_1010FF420, (const char *)&protocol conformance descriptor for Publishers.ReplaceError<A>);
    v154 = v197;
    v66 = Publisher.eraseToAnyPublisher()(v197, v153);
    swift_release();
    (*(void (**)(char *, uint64_t))(v196 + 8))(v151, v154);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v202, v203);
    swift_release();
    v68 = v216;
    v37 = v167;
    goto LABEL_33;
  }
  v83 = sub_100004048(v81, (uint64_t *)&unk_1010F9890);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.error.getter(v84);
  if (os_log_type_enabled(v84, v85))
  {
    v86 = (uint8_t *)swift_slowAlloc(12, -1);
    v87 = swift_slowAlloc(32, -1);
    v217 = v87;
    *(_DWORD *)v86 = 136315138;
    v218 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v86 + 4, v86 + 12);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "%s unexpected advertisement type!", v86, 0xCu);
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v86, -1, -1);
  }

  v88 = v166;
  v89 = sub_10058A1B8();
  v90 = swift_allocError(&type metadata for UTError, v89, 0, 0);
  *v91 = 1;
  swift_retain();
  swift_retain();
  v92 = v88;
  sub_100563BB4(v92, v90, v174);
  swift_release();

  swift_release();
  swift_errorRelease(v90);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10057CFA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), void *a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  double v84;
  uint64_t v85;
  id v86;
  id v87;
  unsigned __int8 v88;
  id v89;
  unsigned int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  void (*v171)(void);
  id v172;
  char *v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(char *, uint64_t, uint64_t);
  int *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  uint64_t v210;
  uint64_t v211;
  id v212;
  char v213[8];

  v209 = a2;
  v210 = a8;
  v205 = a6;
  v206 = a7;
  v203 = a4;
  v204 = a5;
  v11 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v11);
  v173 = (char *)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_10001A9A8(&qword_1010FF3F0);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v174 = (char *)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_10001A9A8(&qword_1010FF3F8);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_10001A9A8(&qword_1010FF400);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v162 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_10001A9A8(&qword_1010FF408);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_10001A9A8(&qword_1010FF410);
  v188 = *(_QWORD *)(v189 - 8);
  __chkstk_darwin(v189);
  v186 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = sub_10001A9A8(&qword_1010FF418);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v187 = (char *)&v162 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_10001A9A8(&qword_1010FF420);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v192 = (char *)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v167 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v169 = (uint64_t)&v162 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = v22;
  __chkstk_darwin(v21);
  v170 = (char *)&v162 - v23;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v24);
  v198 = (char *)&v162 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for MACAddress(0);
  v207 = *(_QWORD *)(v200 - 8);
  v26 = __chkstk_darwin(v200);
  v166 = (char *)&v162 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = v27;
  __chkstk_darwin(v26);
  v199 = (char *)&v162 - v28;
  v29 = type metadata accessor for WildModeAssociationRecord(0);
  v201 = *(_QWORD *)(v29 - 8);
  v30 = __chkstk_darwin(v29);
  v196 = (void (*)(char *, uint64_t, uint64_t))((char *)&v162 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = __chkstk_darwin(v30);
  v195 = (uint64_t)&v162 - v33;
  v202 = v34;
  __chkstk_darwin(v32);
  v36 = (char *)&v162 - v35;
  v37 = sub_10001A9A8(&qword_1010FF428);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v40 = (char *)&v162 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v41);
  v43 = (char *)&v162 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = swift_allocObject(&unk_10107F3E0, 32, 7);
  v171 = a9;
  *(_QWORD *)(v44 + 16) = a9;
  *(_QWORD *)(v44 + 24) = a10;
  v208 = v44;
  sub_10000F9B8(a1 + *(int *)(v29 + 56), (uint64_t)v43, &qword_101115E60);
  v45 = type metadata accessor for AccessoryMetadata(0);
  v46 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v43, 1, v45);
  v172 = a10;
  swift_retain();
  sub_100004048((uint64_t)v43, &qword_101115E60);
  if (v46 != 1)
  {
    sub_10005972C(a1, (uint64_t)v36, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)(v36, v29);
    v59 = sub_1000193A4(&qword_1010FF4A8, &qword_1010FF428, (const char *)&protocol conformance descriptor for Just<A>);
    v60 = Publisher.eraseToAnyPublisher()(v37, v59);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
    v61 = a1;
LABEL_33:
    v211 = v60;
    sub_10005972C(v61, (uint64_t)v36, type metadata accessor for WildModeAssociationRecord);
    v149 = *(unsigned __int8 *)(v201 + 80);
    v150 = (v149 + 80) & ~v149;
    v151 = (_QWORD *)swift_allocObject(&unk_10107F458, v150 + v202, v149 | 7);
    v152 = v209;
    v153 = v210;
    v151[2] = v210;
    v151[3] = v152;
    v154 = v204;
    v155 = v205;
    v151[4] = v203;
    v151[5] = v154;
    v156 = v206;
    v151[6] = v155;
    v151[7] = v156;
    v157 = v208;
    v151[8] = sub_10058C8BC;
    v151[9] = v157;
    sub_1000126EC((uint64_t)v36, (uint64_t)v151 + v150, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRetain(v156);
    swift_retain();
    swift_retain();
    swift_retain();
    v158 = v152;
    v159 = sub_10001A9A8(&qword_1010FF498);
    v160 = sub_1000193A4(&qword_1010FF4A0, &qword_1010FF498, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_10058A268, v151, v159, v160);
    swift_release();
    swift_release();
    swift_beginAccess(v153 + 32, &v211, 33, 0);
    AnyCancellable.store(in:)(v153 + 32);
    swift_endAccess(&v211);
    swift_release();
    swift_release();
    return swift_release();
  }
  v197 = (int *)v29;
  v164 = v36;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v47 = type metadata accessor for Logger(0);
  sub_10001A9E8(v47, (uint64_t)qword_1011B7148);
  v48 = a1;
  v49 = v195;
  v50 = sub_10005972C(a1, v195, type metadata accessor for WildModeAssociationRecord);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v211 = v54;
    v162 = v47;
    *(_DWORD *)v53 = 136446210;
    v55 = type metadata accessor for UUID(0);
    v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v55, v56);
    v212 = (id)sub_100016940(v57, v58, &v211);
    v47 = v162;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v49, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Record %{public}s is missing metadata. Attempting to fetch again...", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    sub_1000126B0(v49, type metadata accessor for WildModeAssociationRecord);
  }

  v62 = v207;
  v63 = (uint64_t)v198;
  v64 = (uint64_t)v196;
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  sub_10001A9E8(v47, (uint64_t)qword_1010FF230);
  v65 = sub_10005972C(v48, v64, type metadata accessor for WildModeAssociationRecord);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter(v66);
  if (!os_log_type_enabled(v66, v67))
  {
    sub_1000126B0(v64, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  v68 = swift_slowAlloc(22, -1);
  v69 = swift_slowAlloc(64, -1);
  v211 = v69;
  *(_DWORD *)v68 = 136315394;
  v212 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v211);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v68 + 4, v68 + 12);
  *(_WORD *)(v68 + 12) = 2082;
  v70 = (_BYTE *)(v64 + v197[22]);
  if ((v70[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v64 + v197[21]) & 1) != 0)
      goto LABEL_19;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v64 + v197[21]) & 1) == 0)
  {
LABEL_16:
    v71 = v48;
    v72 = *(_BYTE *)(v64 + v197[13]);
    goto LABEL_20;
  }
  if (*v70 != 1)
  {
LABEL_19:
    v71 = v48;
    v72 = 6;
    goto LABEL_20;
  }
  v71 = v48;
  v72 = 5;
LABEL_20:
  v73 = sub_1005632A4(v72);
  v212 = (id)sub_100016940(v73, v74, &v211);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v68 + 14, v68 + 22);
  swift_bridgeObjectRelease();
  sub_1000126B0(v64, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v66, v67, "%s Advertisement type: %{public}s", (uint8_t *)v68, 0x16u);
  swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v69, -1, -1);
  swift_slowDealloc(v68, -1, -1);

  v48 = v71;
  v63 = (uint64_t)v198;
LABEL_21:
  sub_1001DBC34(v63);
  v75 = v200;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v200) != 1)
  {
    v196 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 32);
    v196(v199, v63, v75);
    LODWORD(v172) = *(unsigned __int8 *)(v48 + v197[13]);
    if ((_DWORD)v172 == 3)
      v84 = 180.0;
    else
      v84 = 60.0;
    v198 = (char *)swift_allocBox(v197);
    sub_10005972C(v48, v85, type metadata accessor for WildModeAssociationRecord);
    v86 = v209;
    v87 = objc_msgSend(v209, "trackingIdentifier");
    v88 = objc_msgSend(v87, "isPosh");

    if ((v88 & 1) != 0)
    {
      v89 = objc_msgSend(v86, "trackingIdentifier");
      v90 = objc_msgSend(v89, "networkID");

      v91 = 2 * (v90 == 2);
      if (v90 == 1)
        v91 = 1;
    }
    else
    {
      v91 = 3;
    }
    LODWORD(v195) = v91;
    v92 = type metadata accessor for SharedBeaconRecord(0);
    v93 = (uint64_t)v170;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v92 - 8) + 56))(v170, 1, 1, v92);
    v94 = v197[21];
    v163 = v48;
    LODWORD(v171) = *(_BYTE *)(v48 + v94) & 1;
    v95 = v207;
    v96 = v166;
    (*(void (**)(char *, char *, uint64_t))(v207 + 16))(v166, v199, v75);
    v97 = v169;
    sub_10000F9B8(v93, v169, (uint64_t *)&unk_1010EE180);
    v98 = *(unsigned __int8 *)(v95 + 80);
    v99 = (v98 + 24) & ~v98;
    v100 = v99 + v165;
    v101 = *(unsigned __int8 *)(v167 + 80);
    v102 = (v101 + v99 + v165 + 1) & ~v101;
    v103 = v102 + v168;
    v104 = swift_allocObject(&unk_10107F408, v102 + v168 + 1, v98 | v101 | 7);
    v105 = v210;
    *(_QWORD *)(v104 + 16) = v210;
    v196((char *)(v104 + v99), (uint64_t)v96, v75);
    *(_BYTE *)(v104 + v100) = (_BYTE)v172;
    sub_10058A200(v97, v104 + v102);
    *(_BYTE *)(v104 + v103) = (_BYTE)v171;
    v106 = sub_10001A9A8(&qword_1010F3978);
    swift_allocObject(v106, *(unsigned int *)(v106 + 48), *(unsigned __int16 *)(v106 + 52));
    swift_retain();
    v211 = Future.init(_:)(sub_10058A248, v104, v107);
    v108 = sub_1000193A4((unint64_t *)&unk_10111C230, &qword_1010F3978, (const char *)&protocol conformance descriptor for Future<A, B>);
    v109 = Publisher.eraseToAnyPublisher()(v106, v108);
    v196 = (void (*)(char *, uint64_t, uint64_t))v109;
    swift_release();
    sub_100004048(v93, (uint64_t *)&unk_1010EE180);
    v211 = v109;
    v212 = *(id *)(v105 + 24);
    v110 = v212;
    v111 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v112 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v111 - 8) + 56))(v173, 1, 1, v111);
    v172 = v110;
    v113 = sub_10001A9A8(&qword_1010FF438);
    v114 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v115 = sub_1000193A4((unint64_t *)&unk_10111C240, &qword_1010FF438, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v116 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v117 = v174;
    Publisher.receive<A>(on:options:)(&v212, v112, v113, v114, v115, v116);
    sub_100004048(v112, &qword_1010EECC8);

    v118 = swift_allocObject(&unk_10107F430, 33, 7);
    v119 = v198;
    *(_QWORD *)(v118 + 16) = v198;
    *(_QWORD *)(v118 + 24) = v105;
    *(_BYTE *)(v118 + 32) = v195;
    swift_retain();
    v120 = swift_retain();
    v121 = static Subscribers.Demand.unlimited.getter(v120);
    v122 = sub_10001A9A8(&qword_1010FF440);
    v123 = sub_10001A9A8((uint64_t *)&unk_10111C130);
    v124 = sub_1000193A4(&qword_1010FF448, &qword_1010FF3F0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v125 = sub_1000193A4(&qword_1010FF450, (uint64_t *)&unk_10111C130, (const char *)&protocol conformance descriptor for Future<A, B>);
    v126 = v177;
    v127 = v176;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v121, sub_10058C8D4, v118, v176, v122, v123, v124, v125);
    swift_release();
    (*(void (**)(char *, uint64_t))(v175 + 8))(v117, v127);
    v128 = sub_1000193A4(&qword_1010FF458, &qword_1010FF3F8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v129 = v180;
    v130 = v179;
    Publisher.timeout(_:queue:customError:)(v172, sub_10058C860, 0, v179, v128, v84);
    (*(void (**)(char *, uint64_t))(v178 + 8))(v126, v130);
    v131 = sub_10001A9A8(&qword_1010F37F0);
    v132 = sub_1000193A4(&qword_1010FF460, &qword_1010FF400, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v133 = v183;
    v134 = v182;
    Publisher.map<A>(_:)(sub_100568814, 0, v182, v131, v132);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v129, v134);
    v135 = sub_10001A9A8(&qword_1010FF468);
    v136 = sub_1000193A4(&qword_1010FF470, &qword_1010FF408, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v137 = sub_1000193A4(&qword_1010FF478, &qword_1010FF468, (const char *)&protocol conformance descriptor for Just<A>);
    v138 = v186;
    v139 = v185;
    v140 = v135;
    v61 = v163;
    Publisher.catch<A>(_:)(sub_100568818, 0, v185, v140, v136, v137);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v133, v139);
    v141 = sub_1000193A4(&qword_1010FF480, &qword_1010FF410, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    v142 = v187;
    v143 = v189;
    Publisher.map<A>(_:)(sub_10058A25C, v119, v189, v197, v141);
    swift_release();
    (*(void (**)(char *, uint64_t))(v188 + 8))(v138, v143);
    v144 = sub_1000193A4(&qword_1010FF488, &qword_1010FF418, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v145 = v192;
    v146 = v191;
    Publisher.replaceError(with:)(v61, v191, v144);
    (*(void (**)(char *, uint64_t))(v190 + 8))(v142, v146);
    v147 = sub_1000193A4(&qword_1010FF490, &qword_1010FF420, (const char *)&protocol conformance descriptor for Publishers.ReplaceError<A>);
    v148 = v194;
    v60 = Publisher.eraseToAnyPublisher()(v194, v147);
    swift_release();
    (*(void (**)(char *, uint64_t))(v193 + 8))(v145, v148);
    (*(void (**)(char *, uint64_t))(v207 + 8))(v199, v200);
    swift_release();
    v36 = v164;
    goto LABEL_33;
  }
  v76 = sub_100004048(v63, (uint64_t *)&unk_1010F9890);
  v77 = Logger.logObject.getter(v76);
  v78 = static os_log_type_t.error.getter(v77);
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc(12, -1);
    v80 = swift_slowAlloc(32, -1);
    v211 = v80;
    *(_DWORD *)v79 = 136315138;
    v212 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v212, v213, v79 + 4, v79 + 12);
    _os_log_impl((void *)&_mh_execute_header, v77, v78, "%s unexpected advertisement type!", v79, 0xCu);
    swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v79, -1, -1);
  }

  v81 = sub_10058A1B8();
  v82 = swift_allocError(&type metadata for UTError, v81, 0, 0);
  *v83 = 1;
  v171();
  swift_errorRelease(v82);
  return swift_release();
}

uint64_t sub_10057E394(NSObject *a1, void (*a2)(uint64_t, void *), void *a3, void (*a4)(uint64_t, void *), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void (*v81)(uint64_t, void *);
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93[2];

  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v10);
  v83 = (uint64_t)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v12);
  v84 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v14);
  v85 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (int *)sub_10001A9A8(&qword_1010FF530);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v88 = (uint64_t)&v75 - v20;
  v86 = sub_10001A9A8(&qword_1010FF538);
  v21 = __chkstk_darwin(v86);
  v23 = (uint64_t *)((char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v25 = (uint64_t *)((char *)&v75 - v24);
  v26 = swift_allocObject(&unk_10107F228, 32, 7);
  v81 = a4;
  *(_QWORD *)(v26 + 16) = a4;
  *(_QWORD *)(v26 + 24) = a5;
  v27 = (_QWORD *)swift_allocObject(&unk_10107F250, 40, 7);
  v27[2] = sub_10058C8B8;
  v27[3] = v26;
  v89 = v27;
  v27[4] = a3;
  v28 = qword_1010EA320;
  swift_retain();
  v90 = v26;
  swift_retain();
  v29 = a3;
  if (v28 != -1)
    swift_once(&qword_1010EA320, sub_100B5E35C);
  v30 = type metadata accessor for Logger(0);
  sub_10001A9E8(v30, (uint64_t)qword_1011B7E10);
  v31 = swift_retain_n(a2, 2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = os_log_type_enabled(v32, v33);
  v91 = a1;
  v87 = v25;
  v82 = v19;
  if (v34)
  {
    v35 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v92 = (uint64_t)a2;
    v93[0] = v36;
    *(_DWORD *)v35 = 136446466;
    v79 = v29;
    v37 = type metadata accessor for UnauthorizedTracking();
    v80 = a5;
    v38 = v37;
    swift_retain();
    v39 = String.init<A>(describing:)(&v92, v38);
    v92 = sub_100016940(v39, v40, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v35 + 4, v35 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2082;
    v92 = sub_100016940(0xD000000000000038, 0x8000000100EDB680, v93);
    a1 = v91;
    v29 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v35 + 14, v35 + 22);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s: %{public}s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    v41 = v35;
    v25 = v87;
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
  sub_100563FD4(a1, v25);
  sub_10000F9B8((uint64_t)v25, (uint64_t)v23, &qword_1010FF538);
  if (swift_getEnumCaseMultiPayload(v23, v86) == 1)
  {
    v42 = *v23;
    swift_retain();
    swift_errorRetain(v42);
    sub_100563BB4(v29, v42, v81);
    swift_release();
    swift_errorRelease(v42);
    swift_errorRelease(v42);
    sub_100004048((uint64_t)v25, &qword_1010FF538);
  }
  else
  {
    v81 = a2;
    v43 = v16[12];
    v44 = v88;
    v45 = (uint64_t *)(v88 + v43);
    v46 = v16[16];
    v47 = v88 + v46;
    v86 = v88 + v46;
    v48 = v16[20];
    v49 = v16[24];
    v50 = (uint64_t *)((char *)v23 + v43);
    v78 = (uint64_t)v23 + v46;
    v51 = type metadata accessor for MACAddress(0);
    v52 = *(_QWORD *)(v51 - 8);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v52 + 32))(v44, v23, v51);
    v53 = *v50;
    v79 = (id)v50[1];
    v54 = (uint64_t)v79;
    v80 = v53;
    *v45 = v53;
    v45[1] = v54;
    v76 = v45;
    sub_10058A200(v78, v47);
    v55 = *(uint64_t *)((char *)v23 + v48);
    *(_QWORD *)(v44 + v48) = v55;
    LOBYTE(v48) = *((_BYTE *)v23 + v49);
    v75 = v49;
    *(_BYTE *)(v44 + v49) = v48;
    v56 = v82;
    v57 = &v82[v16[12]];
    v58 = (uint64_t)&v82[v16[16]];
    v59 = v16[20];
    v77 = v16[24];
    v78 = v59;
    v60 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v82, v44, v51);
    v61 = v79;
    *(_QWORD *)v57 = v80;
    *((_QWORD *)v57 + 1) = v61;
    sub_10000F9B8(v86, v58, (uint64_t *)&unk_1010EE180);
    *(_QWORD *)&v56[v78] = v55;
    v56[v77] = v48;
    v62 = v83;
    sub_10058A200(v58, v83);
    v63 = type metadata accessor for SharedBeaconRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63) == 1)
    {
      (*(void (**)(char *, uint64_t))(v52 + 8))(v56, v51);
      sub_100004048(v62, (uint64_t *)&unk_1010EE180);
      v64 = type metadata accessor for UUID(0);
      v65 = (uint64_t)v84;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v84, 1, 1, v64);
    }
    else
    {
      v66 = v62 + *(int *)(v63 + 20);
      v67 = type metadata accessor for UUID(0);
      v68 = *(_QWORD *)(v67 - 8);
      v65 = (uint64_t)v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v84, v66, v67);
      sub_1000126B0(v62, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(v65, 0, 1, v67);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v56, v51);
    }
    v69 = v85;
    v70 = v88;
    sub_100570340(v88, v65, v85);
    sub_100004048(v65, &qword_1010ED860);
    v71 = type metadata accessor for WildModeAssociationRecord(0);
    v72 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v69, 1, v71);
    sub_100004048(v69, &qword_101102FB0);
    v73 = (uint64_t)v87;
    if (v72 == 1)
      sub_1005790B4(v70, *v76, v76[1], v86, v91, *(unsigned __int8 *)(v70 + v75), (void (*)(_QWORD *))sub_10058B354, (uint64_t)v89);
    else
      sub_10056CA20(v91, (void (*)(void))sub_10058B354, v89);
    sub_100004048(v73, &qword_1010FF538);
    sub_100004048(v70, &qword_1010FF530);
  }
  swift_release();
  return swift_release();
}

uint64_t sub_10057EAE4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (*a10)(uint64_t, void *), void *a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  BOOL v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  char v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  id v92;
  double v93;
  uint64_t v94;
  id v95;
  unsigned __int8 v96;
  id v97;
  unsigned int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  id v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  void (*v174)(uint64_t, void *);
  id v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(char *, uint64_t, uint64_t);
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  uint64_t v215;
  void *v216;
  uint64_t v217;
  id v218;
  char v219[8];

  v210 = a7;
  v211 = a8;
  v208 = a5;
  v209 = a6;
  v207 = a4;
  v216 = a2;
  v12 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v12);
  v176 = (char *)&v166 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_10001A9A8(&qword_1010FF3F0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v166 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = sub_10001A9A8(&qword_1010FF3F8);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182);
  v180 = (char *)&v166 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_10001A9A8(&qword_1010FF400);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185);
  v183 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = sub_10001A9A8(&qword_1010FF408);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v186 = (char *)&v166 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_10001A9A8(&qword_1010FF410);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192);
  v189 = (char *)&v166 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_10001A9A8(&qword_1010FF418);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v190 = (char *)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = sub_10001A9A8(&qword_1010FF420);
  v196 = *(_QWORD *)(v197 - 8);
  __chkstk_darwin(v197);
  v195 = (char *)&v166 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v170 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v172 = (uint64_t)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = v23;
  __chkstk_darwin(v22);
  v173 = (char *)&v166 - v24;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v25);
  v200 = (uint64_t)&v166 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = type metadata accessor for MACAddress(0);
  v212 = *(_QWORD *)(v203 - 8);
  v27 = __chkstk_darwin(v203);
  v169 = (char *)&v166 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = v28;
  __chkstk_darwin(v27);
  v202 = (char *)&v166 - v29;
  v30 = type metadata accessor for WildModeAssociationRecord(0);
  v204 = *(_QWORD *)(v30 - 8);
  v31 = __chkstk_darwin(v30);
  v199 = (void (*)(char *, uint64_t, uint64_t))((char *)&v166 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = __chkstk_darwin(v31);
  v198 = (uint64_t)&v166 - v34;
  v205 = v35;
  __chkstk_darwin(v33);
  v37 = (char *)&v166 - v36;
  v206 = sub_10001A9A8(&qword_1010FF428);
  v201 = *(_QWORD *)(v206 - 8);
  __chkstk_darwin(v206);
  v39 = (char *)&v166 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v40);
  v42 = (char *)&v166 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = swift_allocObject(&unk_10107F278, 32, 7);
  v174 = a10;
  *(_QWORD *)(v43 + 16) = a10;
  *(_QWORD *)(v43 + 24) = a11;
  v44 = (_QWORD *)swift_allocObject(&unk_10107F2A0, 40, 7);
  v44[2] = sub_10058C8B8;
  v44[3] = v43;
  v44[4] = a9;
  v45 = swift_allocObject(&unk_10107F2C8, 32, 7);
  *(_QWORD *)(v45 + 16) = sub_10058B354;
  *(_QWORD *)(v45 + 24) = v44;
  v213 = v45;
  sub_10000F9B8(a1 + *(int *)(v30 + 56), (uint64_t)v42, &qword_101115E60);
  v46 = type metadata accessor for AccessoryMetadata(0);
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v42, 1, v46);
  v175 = a11;
  swift_retain();
  v215 = v43;
  swift_retain();
  v48 = a9;
  v214 = v44;
  swift_retain();
  sub_100004048((uint64_t)v42, &qword_101115E60);
  if (v47 != 1)
  {
    v63 = a1;
    sub_10005972C(a1, (uint64_t)v37, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)(v37, v30);
    v64 = sub_1000193A4(&qword_1010FF4A8, &qword_1010FF428, (const char *)&protocol conformance descriptor for Just<A>);
    v65 = v206;
    v66 = Publisher.eraseToAnyPublisher()(v206, v64);
    (*(void (**)(char *, uint64_t))(v201 + 8))(v39, v65);
    v67 = v211;
    v68 = v216;
LABEL_33:
    v217 = v66;
    sub_10005972C(v63, (uint64_t)v37, type metadata accessor for WildModeAssociationRecord);
    v155 = *(unsigned __int8 *)(v204 + 80);
    v156 = (v155 + 80) & ~v155;
    v157 = (_QWORD *)swift_allocObject(&unk_10107F340, v156 + v205, v155 | 7);
    v157[2] = v67;
    v157[3] = v68;
    v158 = v208;
    v159 = v209;
    v157[4] = v207;
    v157[5] = v158;
    v160 = v210;
    v157[6] = v159;
    v157[7] = v160;
    v161 = v213;
    v157[8] = sub_10058C8BC;
    v157[9] = v161;
    sub_1000126EC((uint64_t)v37, (uint64_t)v157 + v156, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain(v159);
    swift_bridgeObjectRetain(v160);
    swift_retain();
    swift_retain();
    swift_retain();
    v162 = v68;
    v163 = sub_10001A9A8(&qword_1010FF498);
    v164 = sub_1000193A4(&qword_1010FF4A0, &qword_1010FF498, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_10058A268, v157, v163, v164);
    swift_release();
    swift_release();
    swift_beginAccess(v67 + 32, &v217, 33, 0);
    AnyCancellable.store(in:)(v67 + 32);
    swift_endAccess(&v217);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v201 = v30;
  v167 = v37;
  v206 = a1;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v49 = type metadata accessor for Logger(0);
  sub_10001A9E8(v49, (uint64_t)qword_1011B7148);
  v50 = v206;
  v51 = v198;
  v52 = sub_10005972C(v206, v198, type metadata accessor for WildModeAssociationRecord);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  v55 = os_log_type_enabled(v53, v54);
  v166 = v48;
  if (v55)
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    v217 = v57;
    *(_DWORD *)v56 = 136446210;
    v58 = type metadata accessor for UUID(0);
    v59 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v60 = v58;
    v50 = v206;
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v60, v59);
    v218 = (id)sub_100016940(v61, v62, &v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v56 + 4, v56 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Record %{public}s is missing metadata. Attempting to fetch again...", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    sub_1000126B0(v51, type metadata accessor for WildModeAssociationRecord);
  }

  v69 = v203;
  v70 = (uint64_t)v199;
  v71 = v216;
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  sub_10001A9E8(v49, (uint64_t)qword_1010FF230);
  v72 = sub_10005972C(v50, v70, type metadata accessor for WildModeAssociationRecord);
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.default.getter(v73);
  if (!os_log_type_enabled(v73, v74))
  {
    sub_1000126B0(v70, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  v75 = swift_slowAlloc(22, -1);
  v76 = swift_slowAlloc(64, -1);
  v217 = v76;
  *(_DWORD *)v75 = 136315394;
  v218 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v217);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v75 + 4, v75 + 12);
  *(_WORD *)(v75 + 12) = 2082;
  v77 = (_BYTE *)(v70 + *(int *)(v201 + 88));
  if ((v77[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v70 + *(int *)(v201 + 84)) & 1) != 0)
      goto LABEL_19;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v70 + *(int *)(v201 + 84)) & 1) == 0)
  {
LABEL_16:
    v78 = *(_BYTE *)(v70 + *(int *)(v201 + 52));
    goto LABEL_20;
  }
  if (*v77 != 1)
  {
LABEL_19:
    v78 = 6;
    goto LABEL_20;
  }
  v78 = 5;
LABEL_20:
  v79 = sub_1005632A4(v78);
  v218 = (id)sub_100016940(v79, v80, &v217);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v75 + 14, v75 + 22);
  swift_bridgeObjectRelease();
  sub_1000126B0(v70, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v73, v74, "%s Advertisement type: %{public}s", (uint8_t *)v75, 0x16u);
  swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v76, -1, -1);
  swift_slowDealloc(v75, -1, -1);

  v50 = v206;
LABEL_21:
  v81 = v200;
  sub_1001DBC34(v200);
  v82 = v212;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v81, 1, v69) != 1)
  {
    v199 = *(void (**)(char *, uint64_t, uint64_t))(v82 + 32);
    v199(v202, v81, v69);
    LODWORD(v175) = *(unsigned __int8 *)(v50 + *(int *)(v201 + 52));
    if ((_DWORD)v175 == 3)
      v93 = 180.0;
    else
      v93 = 60.0;
    v200 = swift_allocBox(v201);
    sub_10005972C(v50, v94, type metadata accessor for WildModeAssociationRecord);
    v95 = objc_msgSend(v71, "trackingIdentifier");
    v96 = objc_msgSend(v95, "isPosh");

    if ((v96 & 1) != 0)
    {
      v97 = objc_msgSend(v71, "trackingIdentifier");
      v98 = objc_msgSend(v97, "networkID");

      v99 = 2 * (v98 == 2);
      if (v98 == 1)
        v99 = 1;
    }
    else
    {
      v99 = 3;
    }
    LODWORD(v198) = v99;
    v100 = type metadata accessor for SharedBeaconRecord(0);
    v101 = (uint64_t)v173;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v173, 1, 1, v100);
    LODWORD(v174) = *(_BYTE *)(v50 + *(int *)(v201 + 84)) & 1;
    v102 = v212;
    v103 = v169;
    (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v169, v202, v69);
    v104 = v172;
    sub_10000F9B8(v101, v172, (uint64_t *)&unk_1010EE180);
    v105 = *(unsigned __int8 *)(v102 + 80);
    v106 = (v105 + 24) & ~v105;
    v107 = v106 + v168;
    v108 = *(unsigned __int8 *)(v170 + 80);
    v109 = (v108 + v106 + v168 + 1) & ~v108;
    v110 = v109 + v171;
    v111 = swift_allocObject(&unk_10107F2F0, v109 + v171 + 1, v105 | v108 | 7);
    v112 = v211;
    *(_QWORD *)(v111 + 16) = v211;
    v199((char *)(v111 + v106), (uint64_t)v103, v69);
    *(_BYTE *)(v111 + v107) = (_BYTE)v175;
    sub_10058A200(v104, v111 + v109);
    *(_BYTE *)(v111 + v110) = (_BYTE)v174;
    v113 = sub_10001A9A8(&qword_1010F3978);
    swift_allocObject(v113, *(unsigned int *)(v113 + 48), *(unsigned __int16 *)(v113 + 52));
    swift_retain();
    v217 = Future.init(_:)(sub_10058A248, v111, v114);
    v115 = sub_1000193A4((unint64_t *)&unk_10111C230, &qword_1010F3978, (const char *)&protocol conformance descriptor for Future<A, B>);
    v116 = Publisher.eraseToAnyPublisher()(v113, v115);
    v199 = (void (*)(char *, uint64_t, uint64_t))v116;
    swift_release();
    sub_100004048(v101, (uint64_t *)&unk_1010EE180);
    v217 = v116;
    v218 = *(id *)(v112 + 24);
    v117 = v218;
    v118 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v119 = (uint64_t)v176;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 56))(v176, 1, 1, v118);
    v175 = v117;
    v120 = sub_10001A9A8(&qword_1010FF438);
    v121 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v122 = sub_1000193A4((unint64_t *)&unk_10111C240, &qword_1010FF438, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v123 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v124 = v177;
    Publisher.receive<A>(on:options:)(&v218, v119, v120, v121, v122, v123);
    sub_100004048(v119, &qword_1010EECC8);

    v125 = swift_allocObject(&unk_10107F318, 33, 7);
    *(_QWORD *)(v125 + 16) = v200;
    *(_QWORD *)(v125 + 24) = v112;
    *(_BYTE *)(v125 + 32) = v198;
    swift_retain();
    v126 = swift_retain();
    v127 = static Subscribers.Demand.unlimited.getter(v126);
    v128 = sub_10001A9A8(&qword_1010FF440);
    v129 = sub_10001A9A8((uint64_t *)&unk_10111C130);
    v130 = sub_1000193A4(&qword_1010FF448, &qword_1010FF3F0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v131 = sub_1000193A4(&qword_1010FF450, (uint64_t *)&unk_10111C130, (const char *)&protocol conformance descriptor for Future<A, B>);
    v132 = v180;
    v133 = v179;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v127, sub_10058C8D4, v125, v179, v128, v129, v130, v131);
    v67 = v112;
    v63 = v206;
    swift_release();
    (*(void (**)(char *, uint64_t))(v178 + 8))(v124, v133);
    v134 = sub_1000193A4(&qword_1010FF458, &qword_1010FF3F8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v135 = v183;
    v136 = v182;
    Publisher.timeout(_:queue:customError:)(v175, sub_10058C860, 0, v182, v134, v93);
    (*(void (**)(char *, uint64_t))(v181 + 8))(v132, v136);
    v137 = sub_10001A9A8(&qword_1010F37F0);
    v138 = sub_1000193A4(&qword_1010FF460, &qword_1010FF400, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v139 = v186;
    v140 = v185;
    Publisher.map<A>(_:)(sub_100568814, 0, v185, v137, v138);
    (*(void (**)(char *, uint64_t))(v184 + 8))(v135, v140);
    v141 = sub_10001A9A8(&qword_1010FF468);
    v142 = sub_1000193A4(&qword_1010FF470, &qword_1010FF408, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v143 = sub_1000193A4(&qword_1010FF478, &qword_1010FF468, (const char *)&protocol conformance descriptor for Just<A>);
    v144 = v189;
    v145 = v188;
    Publisher.catch<A>(_:)(sub_100568818, 0, v188, v141, v142, v143);
    (*(void (**)(char *, uint64_t))(v187 + 8))(v139, v145);
    v146 = sub_1000193A4(&qword_1010FF480, &qword_1010FF410, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v147 = v200;
    swift_retain();
    v148 = v190;
    v149 = v192;
    Publisher.map<A>(_:)(sub_10058A25C, v147, v192, v201, v146);
    swift_release();
    (*(void (**)(char *, uint64_t))(v191 + 8))(v144, v149);
    v150 = sub_1000193A4(&qword_1010FF488, &qword_1010FF418, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v151 = v195;
    v152 = v194;
    Publisher.replaceError(with:)(v63, v194, v150);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v148, v152);
    v153 = sub_1000193A4(&qword_1010FF490, &qword_1010FF420, (const char *)&protocol conformance descriptor for Publishers.ReplaceError<A>);
    v154 = v197;
    v66 = Publisher.eraseToAnyPublisher()(v197, v153);
    swift_release();
    (*(void (**)(char *, uint64_t))(v196 + 8))(v151, v154);
    (*(void (**)(char *, uint64_t))(v212 + 8))(v202, v203);
    swift_release();
    v68 = v216;
    v37 = v167;
    goto LABEL_33;
  }
  v83 = sub_100004048(v81, (uint64_t *)&unk_1010F9890);
  v84 = Logger.logObject.getter(v83);
  v85 = static os_log_type_t.error.getter(v84);
  if (os_log_type_enabled(v84, v85))
  {
    v86 = (uint8_t *)swift_slowAlloc(12, -1);
    v87 = swift_slowAlloc(32, -1);
    v217 = v87;
    *(_DWORD *)v86 = 136315138;
    v218 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v217);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v86 + 4, v86 + 12);
    _os_log_impl((void *)&_mh_execute_header, v84, v85, "%s unexpected advertisement type!", v86, 0xCu);
    swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v87, -1, -1);
    swift_slowDealloc(v86, -1, -1);
  }

  v88 = v166;
  v89 = sub_10058A1B8();
  v90 = swift_allocError(&type metadata for UTError, v89, 0, 0);
  *v91 = 1;
  swift_retain();
  swift_retain();
  v92 = v88;
  sub_100563BB4(v92, v90, v174);
  swift_release();

  swift_release();
  swift_errorRelease(v90);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_10057FFE8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void (*a9)(uint64_t, void *), uint64_t a10, void (*a11)(char *, id, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, id, void (*)(uint64_t, void *), uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t inited;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  os_log_t v82;
  int v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void (*v95)(uint64_t, void *);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99[80];
  uint64_t v100;
  uint64_t v101[2];

  v88 = a6;
  v87 = a5;
  v86 = a4;
  v97 = a2;
  v94 = a3;
  v95 = a9;
  v98 = type metadata accessor for WildModeTrackingLocation(0);
  v14 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v16 = (uint64_t *)((char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v92 = type metadata accessor for MACAddress(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v18);
  v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for WildModeAssociationRecord(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = __chkstk_darwin(v21);
  v89 = (uint64_t)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v80 - v25;
  v96 = a10;
  swift_retain_n(a10, 2);
  v27 = a8;
  v93 = a1;
  v28 = v97;
  v97 = a7;
  sub_100570340(a1, v28, (uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
  {
    v85 = v27;
    sub_1000126EC((uint64_t)v20, (uint64_t)v26, type metadata accessor for WildModeAssociationRecord);
    if (qword_1010E9CE8 != -1)
      swift_once(&qword_1010E9CE8, sub_100563934);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1010FF230);
    v41 = v89;
    sub_10005972C((uint64_t)v26, v89, type metadata accessor for WildModeAssociationRecord);
    v42 = v91;
    v43 = v90;
    v44 = v92;
    v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 16))(v90, v93, v92);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.default.getter(v46);
    v48 = v47;
    if (os_log_type_enabled(v46, v47))
    {
      v49 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(64, -1);
      v101[0] = v84;
      *(_DWORD *)v49 = 136315394;
      v81 = v49 + 4;
      v50 = type metadata accessor for UUID(0);
      v83 = v48;
      v51 = v50;
      v52 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v82 = v46;
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
      v100 = sub_100016940(v53, v54, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v81, v49 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v41, type metadata accessor for WildModeAssociationRecord);
      *(_WORD *)(v49 + 12) = 2080;
      v55 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v44, v55);
      v100 = sub_100016940(v56, v57, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
      v46 = v82;
      _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "update: found UT record UUID %s address %s.", (uint8_t *)v49, 0x16u);
      v58 = v84;
      swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_1000126B0(v41, type metadata accessor for WildModeAssociationRecord);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
    }

    v59 = objc_msgSend(v94, "observedLocations");
    v60 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
    v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v60);

    v62 = v85;
    if ((unint64_t)v61 >> 62)
    {
      if (v61 < 0)
        v77 = v61;
      else
        v77 = v61 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v61);
      v63 = _CocoaArrayWrapper.endIndex.getter(v77);
      swift_bridgeObjectRelease();
      if (v63)
        goto LABEL_12;
    }
    else
    {
      v63 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v63)
      {
LABEL_12:
        v101[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_10009AED0(0, v63 & ~(v63 >> 63), 0);
        if (v63 < 0)
        {
          __break(1u);
          return;
        }
        v92 = (uint64_t)v26;
        v64 = 0;
        v65 = (_QWORD *)v101[0];
        do
        {
          if ((v61 & 0xC000000000000001) != 0)
            v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v61);
          else
            v66 = *(id *)(v61 + 8 * v64 + 32);
          v67 = v66;
          objc_msgSend(v66, "latitude");
          v69 = v68;
          objc_msgSend(v67, "longitude");
          v71 = v70;
          objc_msgSend(v67, "horizontalAccuracy");
          v73 = v72;
          v74 = objc_msgSend(v67, "timestamp");
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v74);

          *v16 = v69;
          v16[1] = v71;
          v16[2] = v73;
          v101[0] = (uint64_t)v65;
          v76 = v65[2];
          v75 = v65[3];
          if (v76 >= v75 >> 1)
          {
            sub_10009AED0(v75 > 1, v76 + 1, 1);
            v65 = (_QWORD *)v101[0];
          }
          ++v64;
          v65[2] = v76 + 1;
          sub_1000126EC((uint64_t)v16, (uint64_t)v65+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v76, type metadata accessor for WildModeTrackingLocation);
        }
        while (v63 != v64);
        swift_bridgeObjectRelease();
        v62 = v85;
        v26 = (char *)v92;
LABEL_26:
        v78 = v96;
        swift_retain();
        v79 = v62;
        a11(v26, v94, v93, v86, v87, v88, v65, v97, v79, v95, v78);
        swift_bridgeObjectRelease();

        swift_release();
        sub_1000126B0((uint64_t)v26, type metadata accessor for WildModeAssociationRecord);
        swift_release_n(v78, 2);

        return;
      }
    }
    swift_bridgeObjectRelease();
    v65 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v29 = sub_100004048((uint64_t)v20, &qword_101102FB0);
  v30 = static os_log_type_t.error.getter(v29);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7DD8, "No wildModeAssociationRecord found", 34, 2, _swiftEmptyArrayStorage);
  type metadata accessor for TrackingAvoidanceError(0);
  v32 = v31;
  v100 = 3;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  inited = swift_initStackObject(v33, v99);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(inited + 40) = v35;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = 0xD000000000000027;
  *(_QWORD *)(inited + 56) = 0x8000000100EDB2D0;
  v36 = sub_1006B8B10(inited);
  v37 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  _BridgedStoredNSError.init(_:userInfo:)(v101, &v100, v36, v32, v37);
  v38 = (void *)v101[0];
  v39 = v96;
  swift_retain();
  sub_100563BB4(v27, (uint64_t)v38, v95);

  swift_release_n(v39, 3);
}

uint64_t sub_100580878(void *a1, uint64_t *a2, void *a3, void (*a4)(uint64_t, void *), uint64_t a5, uint64_t a6, void (*a7)(char *, id, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, id, void (*)(uint64_t, void *), uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  id v57;
  char *v58;
  uint64_t v59;
  char v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  void *v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t inited;
  uint64_t v105;
  unint64_t v106;
  const char *v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  _BOOL4 v119;
  _DWORD *v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  id v124;
  unsigned int v125;
  id v126;
  NSString v127;
  unsigned int v128;
  uint64_t v129;
  double v130;
  double v131;
  double v132;
  double v133;
  void *v134;
  id v135;
  void *v136;
  void *v137;
  id v138;
  unsigned int v139;
  void *v140;
  id v141;
  unsigned int v142;
  id v143;
  unsigned int v144;
  id v145;
  unsigned int v146;
  uint64_t v147;
  char v148;
  char v149;
  NSObject *v150;
  os_log_type_t v151;
  uint8_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  NSObject *v159;
  NSObject *v160;
  os_log_type_t v161;
  uint64_t v162;
  id v163;
  unsigned int v164;
  id v165;
  unsigned __int8 v166;
  id v167;
  unsigned __int8 v168;
  id v169;
  id v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  NSObject *v178;
  os_log_type_t v179;
  uint8_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  NSObject *v192;
  os_log_type_t v193;
  uint8_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  void (*v199)(char *, uint64_t);
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  void *v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  id v220;
  void *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v229;
  uint64_t v230;
  _QWORD v231[7];
  uint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  char *v240;
  void (*v241)(char *, id, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, id, void (*)(uint64_t, void *), uint64_t);
  char *v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  void (*v254)(uint64_t, void *);
  id v255;
  uint64_t v256;
  __int128 v257;
  void *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262[13];
  uint64_t v263;
  char v264[80];
  uint64_t v265;
  uint64_t v266;

  v241 = a7;
  v239 = a6;
  v254 = a4;
  v258 = a1;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v242 = (char *)v231 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v12);
  v231[5] = (char *)v231 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for SharedBeaconRecord(0);
  v231[4] = *(_QWORD *)(v232 - 8);
  v14 = __chkstk_darwin(v232);
  v231[3] = (char *)v231 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v249 = (char *)v231 - v17;
  __chkstk_darwin(v16);
  v231[6] = (char *)v231 - v18;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v19);
  v235 = (char *)v231 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v21);
  v238 = (char *)v231 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v236 = *(_QWORD *)(v23 - 8);
  v237 = v23;
  __chkstk_darwin(v23);
  v240 = (char *)v231 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v26 = __chkstk_darwin(v25);
  v231[1] = (char *)v231 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v233 = (char *)v231 - v29;
  __chkstk_darwin(v28);
  v243 = (char *)v231 - v30;
  v31 = type metadata accessor for MACAddress(0);
  v32 = *(_QWORD *)(v31 - 8);
  v245 = v31;
  v246 = v32;
  v33 = __chkstk_darwin(v31);
  v250 = (char *)v231 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33);
  v231[2] = (char *)v231 - v36;
  v37 = __chkstk_darwin(v35);
  v234 = (char *)v231 - v38;
  __chkstk_darwin(v37);
  v244 = (uint64_t)v231 - v39;
  v40 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v40);
  v42 = (char *)v231 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for Date(0);
  v44 = *(_QWORD *)(v43 - 8);
  v45 = __chkstk_darwin(v43);
  v251 = (uint64_t)v231 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45);
  v253 = (char *)v231 - v47;
  v256 = a5;
  swift_retain_n(a5, 13);
  v255 = a3;
  LODWORD(v257) = static os_log_type_t.default.getter(v255);
  if (qword_1010EA270 != -1)
    goto LABEL_79;
  while (1)
  {
    v48 = qword_1011B7D50;
    v252 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v49 = swift_allocObject(v252, 112, 7);
    *(_OWORD *)(v49 + 16) = xmmword_100E22B10;
    v262[0] = *a2;
    v50 = sub_10001A9A8(&qword_1010FF3D8);
    v51 = a2;
    v52 = String.init<A>(describing:)(v262, v50);
    v54 = v53;
    *(_QWORD *)(v49 + 56) = &type metadata for String;
    v55 = sub_10001AA00();
    *(_QWORD *)(v49 + 32) = v52;
    *(_QWORD *)(v49 + 40) = v54;
    *(_QWORD *)(v49 + 96) = &type metadata for String;
    *(_QWORD *)(v49 + 104) = v55;
    v248 = v55;
    *(_QWORD *)(v49 + 64) = v55;
    *(_QWORD *)(v49 + 72) = 0xD000000000000039;
    *(_QWORD *)(v49 + 80) = 0x8000000100EDAFE0;
    os_log(_:dso:log:_:_:)(v257, &_mh_execute_header, v48, "%{public}@: %{public}@", 22, 2, v49);
    swift_bridgeObjectRelease();
    v56 = v258;
    v57 = objc_msgSend(v258, "trackingIdentifier");
    v247 = (uint64_t)v51;
    sub_100562940(v57, (uint64_t)v42);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) == 1)
    {
      sub_100004048((uint64_t)v42, (uint64_t *)&unk_1010EA690);
      goto LABEL_9;
    }
    v58 = v253;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v253, v42, v43);
    v59 = v251;
    static Date.trustedNow.getter(v251);
    v60 = static Date.> infix(_:_:)(v58, v59);
    v61 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v61(v59, v43);
    if ((v60 & 1) != 0)
      break;
    v61((uint64_t)v58, v43);
LABEL_9:
    v90 = objc_msgSend(v56, "observedLocations", v231[0]);
    v91 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
    v92 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v90, v91);

    if ((unint64_t)v92 >> 62)
    {
      if (v92 < 0)
        v229 = v92;
      else
        v229 = v92 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v92);
      v93 = _CocoaArrayWrapper.endIndex.getter(v229);
      swift_bridgeObjectRelease();
    }
    else
    {
      v93 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v94 = swift_bridgeObjectRelease();
    if (!v93)
    {
      v100 = static os_log_type_t.error.getter(v94);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v100, &_mh_execute_header, qword_1011B7DD8, "There is no location", 20, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v102 = v101;
      v265 = 4;
      v103 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      inited = swift_initStackObject(v103, &v260);
      *(_OWORD *)(inited + 16) = xmmword_100E22B00;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v105;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v106 = 0xD000000000000027;
      v107 = "location was not present in the request";
LABEL_70:
      *(_QWORD *)(inited + 48) = v106;
      *(_QWORD *)(inited + 56) = (unint64_t)(v107 - 32) | 0x8000000000000000;
      v207 = sub_1006B8B10(inited);
      v208 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
      _BridgedStoredNSError.init(_:userInfo:)(v262, &v265, v207, v102, v208);
      v209 = (void *)v262[0];
      v88 = v256;
      swift_retain();
      v210 = v255;
      sub_100563BB4(v255, (uint64_t)v209, v254);

      swift_release_n(v88, 3);
      return swift_release_n(v88, 11);
    }
    v95 = objc_msgSend(v56, "observedLocations");
    v43 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v95, v91);

    if ((unint64_t)v43 >> 62)
    {
      if (v43 < 0)
        v230 = v43;
      else
        v230 = v43 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v43);
      a2 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v230);
      if (!a2)
      {
LABEL_22:
        swift_bridgeObjectRelease_n(v43, 2);
        v108 = objc_msgSend(v258, "trackingIdentifier");
        v109 = objc_msgSend(v108, "data");

        v110 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v109);
        *(_QWORD *)&v257 = v111;

        if (qword_1010E9CE8 != -1)
          swift_once(&qword_1010E9CE8, sub_100563934);
        v112 = type metadata accessor for Logger(0);
        v113 = (char *)sub_10001A9E8(v112, (uint64_t)qword_1010FF230);
        v114 = v257;
        v115 = (unint64_t)v257 >> 62;
        sub_10001BBBC(v110, v257);
        v116 = sub_10001BBBC(v110, v114);
        v117 = Logger.logObject.getter(v116);
        v118 = static os_log_type_t.default.getter(v117);
        v119 = os_log_type_enabled(v117, v118);
        v253 = v113;
        v251 = v114 >> 62;
        if (v119)
        {
          v120 = (_DWORD *)swift_slowAlloc(22, -1);
          v262[0] = swift_slowAlloc(32, -1);
          *v120 = 134218242;
          __asm { BR              X11 }
        }
        v121 = v257;
        sub_10001BC14(v110, v257);
        sub_10001BC14(v110, v121);

        v140 = v258;
        v141 = objc_msgSend(v258, "trackingIdentifier");
        v142 = objc_msgSend(v141, "isPosh");

        v143 = objc_msgSend(v140, "trackingIdentifier");
        v144 = objc_msgSend(v143, "networkID");

        v145 = objc_msgSend(v140, "trackingIdentifier");
        v146 = objc_msgSend(v145, "status");

        if (v144 == 1)
          v148 = 5;
        else
          v148 = 6;
        if (v142)
          v149 = v148;
        else
          v149 = (v146 >> 4) & 3;
        v150 = Logger.logObject.getter(v147);
        v151 = static os_log_type_t.default.getter(v150);
        if (os_log_type_enabled(v150, v151))
        {
          v152 = (uint8_t *)swift_slowAlloc(12, -1);
          v153 = v110;
          v154 = swift_slowAlloc(32, -1);
          v262[0] = v154;
          *(_DWORD *)v152 = 136446210;
          v155 = sub_1005632A4(v149);
          v265 = sub_100016940(v155, v156, v262);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v152 + 4, v152 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v150, v151, "UnauthorizedTrackingAdvertisementType: %{public}s", v152, 0xCu);
          swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
          v157 = v154;
          v110 = v153;
          swift_slowDealloc(v157, -1, -1);
          swift_slowDealloc(v152, -1, -1);
        }

        v158 = v250;
        if (v149 == 4)
        {
          v159 = v258;
          v160 = Logger.logObject.getter(v159);
          v161 = static os_log_type_t.error.getter(v160);
          if (os_log_type_enabled(v160, v161))
          {
            v162 = swift_slowAlloc(14, -1);
            *(_DWORD *)v162 = 67109632;
            v163 = -[NSObject trackingIdentifier](v159, "trackingIdentifier");
            v164 = objc_msgSend(v163, "isPosh");

            LODWORD(v262[0]) = v164;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v262, (char *)v262 + 4, v162 + 4, v162 + 8);

            v252 = v110;
            *(_WORD *)(v162 + 8) = 256;
            v165 = -[NSObject trackingIdentifier](v159, "trackingIdentifier");
            v166 = objc_msgSend(v165, "networkID");

            LOBYTE(v262[0]) = v166;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v262, (char *)v262 + 1, v162 + 10, v162 + 11);

            *(_WORD *)(v162 + 11) = 256;
            v167 = -[NSObject trackingIdentifier](v159, "trackingIdentifier");
            v168 = objc_msgSend(v167, "status");

            LOBYTE(v262[0]) = v168;
            v110 = v252;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v262, (char *)v262 + 1, v162 + 13, v162 + 14);

            _os_log_impl((void *)&_mh_execute_header, v160, v161, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v162, 0xEu);
            swift_slowDealloc(v162, -1, -1);
          }
          else
          {

            v160 = v159;
          }

          type metadata accessor for TrackingAvoidanceError(0);
          v185 = v184;
          v265 = 6;
          v186 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
          v187 = swift_initStackObject(v186, v264);
          *(_OWORD *)(v187 + 16) = xmmword_100E22B00;
          *(_QWORD *)(v187 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
          *(_QWORD *)(v187 + 40) = v188;
          *(_QWORD *)(v187 + 72) = &type metadata for String;
          *(_QWORD *)(v187 + 48) = 0xD00000000000001ALL;
          *(_QWORD *)(v187 + 56) = 0x8000000100EDB020;
          v218 = sub_1006B8B10(v187);
          v219 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
          _BridgedStoredNSError.init(_:userInfo:)(v262, &v265, v218, v185, v219);
          v220 = (id)v262[0];
          v88 = v256;
          swift_retain();
          v221 = v255;
          sub_100563BB4(v255, (uint64_t)v220, v254);
          swift_release();
          v222 = v110;
          v223 = v257;
LABEL_73:
          sub_10001BC14(v222, v223);
          swift_release_n(v88, 2);

        }
        else
        {
          if (v149 != 6)
          {
            if (v149 == 5)
              __asm { BR              X10 }
            __asm { BR              X10 }
          }
          v169 = objc_msgSend(v258, "trackingIdentifier");
          v170 = objc_msgSend(v169, "address");

          v171 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v170);
          v173 = v172;

          sub_10001BBBC(v171, v173);
          v174 = (uint64_t)v243;
          MACAddress.init(data:type:)(v171);
          v176 = v245;
          v175 = v246;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v246 + 48))(v174, 1, v245) == 1)
          {
            sub_100004048(v174, (uint64_t *)&unk_1010F9890);
            sub_10001BBBC(v171, v173);
            v177 = sub_10001BBBC(v171, v173);
            v178 = Logger.logObject.getter(v177);
            v179 = static os_log_type_t.error.getter(v178);
            if (os_log_type_enabled(v178, v179))
            {
              v252 = v110;
              v180 = (uint8_t *)swift_slowAlloc(12, -1);
              v181 = swift_slowAlloc(32, -1);
              v262[0] = v181;
              *(_DWORD *)v180 = 136446210;
              v182 = Data.hexString.getter(v171, v173);
              v265 = sub_100016940(v182, v183, v262);
              v110 = v252;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v180 + 4, v180 + 12);
              swift_bridgeObjectRelease();
              sub_10001BC14(v171, v173);
              sub_10001BC14(v171, v173);
              _os_log_impl((void *)&_mh_execute_header, v178, v179, "Invalid MAC address %{public}s", v180, 0xCu);
              swift_arrayDestroy(v181, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v181, -1, -1);
              swift_slowDealloc(v180, -1, -1);
            }
            else
            {
              sub_10001BC14(v171, v173);
              sub_10001BC14(v171, v173);
            }

            type metadata accessor for TrackingAvoidanceError(0);
            v212 = v211;
            v265 = 3;
            v213 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
            v214 = swift_initStackObject(v213, &v263);
            *(_OWORD *)(v214 + 16) = xmmword_100E22B00;
            *(_QWORD *)(v214 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
            *(_QWORD *)(v214 + 40) = v215;
            *(_QWORD *)(v214 + 72) = &type metadata for String;
            *(_QWORD *)(v214 + 48) = 0xD00000000000001FLL;
            *(_QWORD *)(v214 + 56) = 0x8000000100EDB040;
            v216 = sub_1006B8B10(v214);
            v217 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
            _BridgedStoredNSError.init(_:userInfo:)(v262, &v265, v216, v212, v217);
            v220 = (id)v262[0];
            v88 = v256;
            swift_retain();
            v221 = v255;
            sub_100563BB4(v255, (uint64_t)v220, v254);
            swift_release();
            sub_10001BC14(v110, v257);
            v222 = v171;
            v223 = v173;
            goto LABEL_73;
          }
          v252 = v110;
          v189 = v244;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v175 + 32))(v244, v174, v176);
          v190 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v175 + 16))(v158, v189, v176);
          v191 = v175;
          v192 = Logger.logObject.getter(v190);
          v193 = static os_log_type_t.default.getter(v192);
          if (os_log_type_enabled(v192, v193))
          {
            v194 = (uint8_t *)swift_slowAlloc(12, -1);
            v195 = swift_slowAlloc(32, -1);
            v262[0] = v195;
            *(_DWORD *)v194 = 136446210;
            v253 = (char *)(v194 + 4);
            v196 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
            v197 = dispatch thunk of CustomStringConvertible.description.getter(v176, v196);
            v265 = sub_100016940(v197, v198, v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, &v266, v253, v194 + 12);
            swift_bridgeObjectRelease();
            v199 = *(void (**)(char *, uint64_t))(v246 + 8);
            v199(v250, v176);
            _os_log_impl((void *)&_mh_execute_header, v192, v193, "Posh address: %{public}s", v194, 0xCu);
            swift_arrayDestroy(v195, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v195, -1, -1);
            swift_slowDealloc(v194, -1, -1);
          }
          else
          {
            v199 = *(void (**)(char *, uint64_t))(v191 + 8);
            v199(v158, v176);
          }

          v88 = v256;
          v224 = v247;
          v225 = type metadata accessor for UUID(0);
          v226 = (uint64_t)v242;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v225 - 8) + 56))(v242, 1, 1, v225);
          swift_retain();
          v220 = v255;
          v227 = v244;
          sub_10057FFE8(v244, v226, v258, 0, 0, 0, v224, v220, v254, v88, v241);

          swift_release();
          sub_10001BC14(v171, v173);
          sub_10001BC14(v252, v257);
          sub_100004048(v226, &qword_1010ED860);
          v199((char *)v227, v176);
          swift_release_n(v88, 2);

        }
        return swift_release_n(v88, 11);
      }
    }
    else
    {
      a2 = *(uint64_t **)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v43);
      if (!a2)
        goto LABEL_22;
    }
    *(_QWORD *)&v257 = v43 & 0xC000000000000001;
    if ((v43 & 0xC000000000000001) != 0)
      v96 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v43);
    else
      v96 = *(id *)(v43 + 32);
    v97 = v96;
    v98 = sub_100B8C778();

    if ((v98 & 1) != 0)
    {
LABEL_17:
      v99 = swift_bridgeObjectRelease_n(v43, 2);
LABEL_67:
      v203 = static os_log_type_t.error.getter(v99);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v203, &_mh_execute_header, qword_1011B7DD8, "received locations within blocked regions", 41, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v102 = v204;
      v265 = 11;
      v205 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      inited = swift_initStackObject(v205, &v261);
      *(_OWORD *)(inited + 16) = xmmword_100E22B00;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v206;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      v106 = 0xD00000000000001CLL;
      v107 = "Locations in blocked regions";
      goto LABEL_70;
    }
    if (a2 == (uint64_t *)1)
      goto LABEL_22;
    v253 = (char *)objc_opt_self(FMSystemInfo);
    v122 = 5;
    v251 = 0xD000000000000013;
    v231[0] = 0x8000000100EDB150;
    while (1)
    {
      v123 = (_QWORD)v257
           ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v122 - 4, v43)
           : (char *)*(id *)(v43 + 8 * v122);
      v42 = v123;
      v44 = v122 - 3;
      if (__OFADD__(v122 - 4, 1))
        break;
      v124 = objc_msgSend(v253, "sharedInstance", v231[0]);
      v125 = objc_msgSend(v124, "isInternalBuild");

      if (v125)
      {
        v126 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v127 = String._bridgeToObjectiveC()();
        v128 = objc_msgSend(v126, "BOOLForKey:", v127);

        if (v128)
        {
          v200 = static os_log_type_t.default.getter(v129);
          v201 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
          v202 = (void *)static OS_os_log.default.getter(v201);
          os_log(_:dso:log:_:_:)(v200, &_mh_execute_header, v202, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);
          swift_bridgeObjectRelease_n(v43, 2);

          goto LABEL_67;
        }
      }
      objc_msgSend(v42, "latitude");
      v131 = v130;
      objc_msgSend(v42, "longitude");
      v133 = v132;
      if (qword_1010E9AD8 != -1)
        swift_once(&qword_1010E9AD8, sub_100264FD8);
      if (objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v131, v133))
      {
        v134 = (void *)qword_1010F46B0;
        if (qword_1010F46B0)
        {
          v135 = (id)qword_1010F46B0;
        }
        else
        {
          v136 = (void *)sub_100265274();
          v137 = (void *)qword_1010F46B0;
          qword_1010F46B0 = (uint64_t)v136;
          v135 = v136;

          v134 = 0;
        }
        v138 = v134;
        v139 = objc_msgSend(v135, "containsCoordinate:", v131, v133);

        if (v139)
          goto LABEL_17;
      }
      else
      {

      }
      ++v122;
      if ((uint64_t *)v44 == a2)
        goto LABEL_22;
    }
    __break(1u);
LABEL_79:
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  }
  v251 = v43;
  v62 = v252;
  v63 = swift_allocObject(v252, 72, 7);
  v257 = xmmword_100E22B00;
  *(_OWORD *)(v63 + 16) = xmmword_100E22B00;
  v64 = objc_msgSend(v56, "trackingIdentifier");
  v65 = objc_msgSend(v64, "advertisementData");

  v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
  v68 = v67;

  v69 = Data.hexString.getter(v66, v68);
  v71 = v70;
  sub_10001BC14(v66, v68);
  v72 = v248;
  *(_QWORD *)(v63 + 56) = &type metadata for String;
  *(_QWORD *)(v63 + 64) = v72;
  *(_QWORD *)(v63 + 32) = v69;
  *(_QWORD *)(v63 + 40) = v71;
  v73 = String.init(format:_:)(0xD00000000000003CLL, 0x8000000100EDB1F0, v63);
  v75 = v74;
  v76 = static os_log_type_t.default.getter(v73);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v77 = qword_1011B7DD8;
  v78 = swift_allocObject(v62, 72, 7);
  *(_OWORD *)(v78 + 16) = v257;
  *(_QWORD *)(v78 + 56) = &type metadata for String;
  *(_QWORD *)(v78 + 64) = v72;
  *(_QWORD *)(v78 + 32) = v73;
  *(_QWORD *)(v78 + 40) = v75;
  *(_QWORD *)&v79 = swift_bridgeObjectRetain(v75).n128_u64[0];
  os_log(_:dso:log:_:_:)(v76, &_mh_execute_header, v77, "%@", 2, 2, v78, v79);
  swift_bridgeObjectRelease();
  type metadata accessor for TrackingAvoidanceError(0);
  v81 = v80;
  v265 = 7;
  v82 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
  v83 = swift_initStackObject(v82, &v259);
  *(_OWORD *)(v83 + 16) = v257;
  *(_QWORD *)(v83 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(_QWORD *)(v83 + 40) = v84;
  *(_QWORD *)(v83 + 72) = &type metadata for String;
  *(_QWORD *)(v83 + 48) = v73;
  *(_QWORD *)(v83 + 56) = v75;
  v85 = sub_1006B8B10(v83);
  v86 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  _BridgedStoredNSError.init(_:userInfo:)(v262, &v265, v85, v81, v86);
  v87 = (void *)v262[0];
  v88 = v256;
  swift_retain();
  v89 = v255;
  sub_100563BB4(v255, (uint64_t)v87, v254);

  swift_release();
  v61((uint64_t)v253, v251);
  swift_release_n(v88, 2);

  return swift_release_n(v88, 11);
}

void sub_100582FD0(uint64_t a1, void (*a2)(uint64_t, void *), void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void (*v14)(char *);
  id v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  id v29;
  NSSet v30;
  void *v31;
  id v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t My;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t **v63;
  NSObject *v64;
  uint64_t (*v65)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, void (*)(uint64_t, void *), void *);
  uint64_t v66;
  uint64_t **v67;
  id v68;
  NSObject *v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  const void *v80;
  uint64_t v81;
  id v82;
  void (*v83)(uint64_t, void *);
  uint64_t v84;
  void *v85;
  uint64_t v86;
  int v87;
  id v88;
  _QWORD v89[4];
  uint64_t v90;
  uint64_t v91;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_allocObject(&unk_10107F0C0, 24, 7);
  *(_QWORD *)(v10 + 16) = a3;
  swift_retain_n(v10, 4);
  _Block_copy(a3);
  swift_retain();
  _Block_copy(a3);
  swift_bridgeObjectRetain(a1);
  v12 = (void *)sub_1000FC638(v11);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v21 = sub_10001A9E8(v6, (uint64_t)qword_1011B7148);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Empty observations!", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1003D79D0((uint64_t)_swiftEmptyArrayStorage);
    }
    type metadata accessor for TrackingAvoidanceError(0);
    v26 = v25;
    v90 = 1;
    v27 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(&v88, &v90, v27, v26, v28);
    v29 = v88;
    sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
    sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
    v30.super.isa = Set._bridgeToObjectiveC()().super.isa;
    v31 = (void *)_convertErrorToNSError(_:)(v29);
    (*((void (**)(void *, Class, void *))a3 + 2))(a3, v30.super.isa, v31);

    goto LABEL_40;
  }
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v13 = sub_10001A9E8(v6, (uint64_t)qword_1011B7148);
  v14 = *(void (**)(char *))(v7 + 16);
  v86 = v13;
  v14(v9);
  v15 = v12;
  swift_bridgeObjectRetain(a1);
  v16 = v15;
  v17 = Logger.logObject.getter(v16);
  v87 = static os_log_type_t.default.getter(v17);
  if (!os_log_type_enabled(v17, (os_log_type_t)v87))
  {

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_29:
    if (objc_msgSend(v16, "type") != (id)1)
    {
LABEL_34:
      switch((unint64_t)objc_msgSend(v16, "action"))
      {
        case 0uLL:
          swift_retain();
          v45 = v16;
          sub_10057E394(v45, a2, v45, (void (*)(uint64_t, void *))sub_10058B340, v10);
          goto LABEL_50;
        case 1uLL:
          swift_bridgeObjectRetain(a1);
          v67 = sub_1005090D4(v66);
          swift_bridgeObjectRelease();
          swift_retain();
          v68 = v16;
          sub_10057B494((uint64_t)v67, (uint64_t *)a2, v68, (void (*)(uint64_t, void *))sub_10058B340, v10);
          swift_release();

          break;
        case 2uLL:
          swift_retain();
          v64 = v16;
          v45 = v64;
          v65 = sub_10057BA9C;
          goto LABEL_49;
        case 3uLL:
          swift_retain();
          v64 = v16;
          v45 = v64;
          v65 = sub_10057EAE4;
LABEL_49:
          sub_100580878(v64, (uint64_t *)a2, v64, (void (*)(uint64_t, void *))sub_10058B340, v10, (uint64_t)sub_10021724C, (void (*)(char *, id, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, id, void (*)(uint64_t, void *), uint64_t))v65);
LABEL_50:

          break;
        case 4uLL:
          swift_bridgeObjectRetain(a1);
          v63 = sub_1005090D4(v62);
          swift_bridgeObjectRelease();
          swift_retain();
          _Block_copy(a3);
          sub_100575568((uint64_t)v63, (uint64_t)a2, a3);
          _Block_release(a3);
          swift_release();

          break;
        default:
          v69 = v16;
          v70 = Logger.logObject.getter(v69);
          v71 = static os_log_type_t.error.getter(v70);
          if (os_log_type_enabled(v70, v71))
          {
            v72 = (uint8_t *)swift_slowAlloc(12, -1);
            *(_DWORD *)v72 = 134217984;
            v88 = -[NSObject action](v69, "action");
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v72 + 4, v72 + 12);

            _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unknown action %ld", v72, 0xCu);
            swift_slowDealloc(v72, -1, -1);
          }
          else
          {

            v70 = v69;
          }

          if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
          {
            if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
              sub_1003D79D0((uint64_t)_swiftEmptyArrayStorage);
          }
          type metadata accessor for TrackingAvoidanceError(0);
          v74 = v73;
          v90 = 1;
          v75 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
          v76 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
          _BridgedStoredNSError.init(_:userInfo:)(&v88, &v90, v75, v74, v76);
          v77 = v88;
          sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
          sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
          v30.super.isa = Set._bridgeToObjectiveC()().super.isa;
          v31 = (void *)_convertErrorToNSError(_:)(v77);
          (*((void (**)(void *, Class, void *))a3 + 2))(a3, v30.super.isa, v31);

          goto LABEL_40;
      }
      swift_release_n(v10, 7);
      goto LABEL_53;
    }
    My = type metadata accessor for Feature.FindMy(0);
    v89[2] = My;
    v89[3] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v41 = sub_100018F08(&v88);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v41, enum case for Feature.FindMy.beepOnMove(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)(&v88);
    v42 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v88);
    if ((My & 1) != 0)
    {
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v43 = sub_100C1B61C((uint64_t)v88);
      v44 = swift_bridgeObjectRelease();
      if ((v43 & 1) != 0)
        goto LABEL_34;
      v54 = Logger.logObject.getter(v44);
      v55 = static os_log_type_t.error.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "isBeepOnMoveEnabled is false. Skipping observations.", v56, 2u);
        swift_slowDealloc(v56, -1, -1);
      }

      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_1003D79D0((uint64_t)_swiftEmptyArrayStorage);
      }
      type metadata accessor for TrackingAvoidanceError(0);
      v58 = v57;
      v90 = 6;
      v59 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v60 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
      _BridgedStoredNSError.init(_:userInfo:)(&v88, &v90, v59, v58, v60);
      v61 = v88;
      sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
      sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
      v30.super.isa = Set._bridgeToObjectiveC()().super.isa;
      v31 = (void *)_convertErrorToNSError(_:)(v61);
      (*((void (**)(void *, Class, void *))a3 + 2))(a3, v30.super.isa, v31);

      swift_release_n(v10, 6);
      swift_bridgeObjectRelease();
LABEL_41:

LABEL_53:
      _Block_release(a3);
      return;
    }
    v46 = Logger.logObject.getter(v42);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Internal Settings -> Feature Flags -> FindMy -> beepOnMove is disabled.", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1003D79D0((uint64_t)_swiftEmptyArrayStorage);
    }
    type metadata accessor for TrackingAvoidanceError(0);
    v50 = v49;
    v90 = 6;
    v51 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v52 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(&v88, &v90, v51, v50, v52);
    v53 = v88;
    sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
    sub_10001AC90(&qword_1010FF598, &qword_1010FA558, SPTrackingAvoidanceResult_ptr, (const char *)&protocol conformance descriptor for NSObject);
    v30.super.isa = Set._bridgeToObjectiveC()().super.isa;
    v31 = (void *)_convertErrorToNSError(_:)(v53);
    (*((void (**)(void *, Class, void *))a3 + 2))(a3, v30.super.isa, v31);

LABEL_40:
    swift_bridgeObjectRelease();
    swift_release_n(v10, 6);
    goto LABEL_41;
  }
  v84 = v10;
  v18 = swift_slowAlloc(32, -1);
  v82 = (id)swift_slowAlloc(64, -1);
  v88 = v82;
  *(_DWORD *)v18 = 134218498;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    v20 = __CocoaSet.count.getter(v19);
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 16);
  }
  v83 = a2;
  v90 = v20;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v18 + 4, v18 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v18 + 12) = 2082;
  v32 = objc_msgSend(v16, "action");
  v85 = a3;
  v33 = 0xE700000000000000;
  v34 = 0x6465676174732ELL;
  switch((unint64_t)v32)
  {
    case 0uLL:
      break;
    case 1uLL:
      v34 = 0x796669746F6E2ELL;
      break;
    case 2uLL:
      v34 = 0x6574616470752ELL;
      break;
    case 3uLL:
      v34 = 0x65676174736E752ELL;
      v33 = 0xE900000000000064;
      break;
    case 4uLL:
      v33 = 0xE900000000000077;
      v34 = 0x617264687469772ELL;
      break;
    default:
      v33 = 0xE800000000000000;
      v34 = 0x6E776F6E6B6E752ELL;
      break;
  }
  v90 = sub_100016940(v34, v33, (uint64_t *)&v88);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v18 + 14, v18 + 22);

  swift_bridgeObjectRelease();
  *(_WORD *)(v18 + 22) = 2082;
  v35 = objc_msgSend(v16, "type");
  if (!v35)
  {
    v36 = 0xE800000000000000;
    v37 = 0x746C75616665642ELL;
LABEL_28:
    v90 = sub_100016940(v37, v36, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v18 + 24, v18 + 32);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v87, "Observed [%ld] observations. Action: %{public}s. Type: %{public}s.", (uint8_t *)v18, 0x20u);
    v39 = v82;
    swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v10 = v84;
    a3 = v85;
    a2 = v83;
    goto LABEL_29;
  }
  v38 = (uint64_t)v35;
  if (v35 == (id)1)
  {
    v36 = 0xEB0000000065766FLL;
    v37 = 0x4D6E4F706565622ELL;
    goto LABEL_28;
  }

  swift_release_n(v84, 6);
  type metadata accessor for TrackingObservationType(0);
  v79 = v78;
  v80 = v85;
  _Block_release(v85);
  _Block_release(v80);
  v90 = v38;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v79, &v90, v79, &type metadata for Int);
  __break(1u);
}

void sub_100583DC4(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  NSString v29;
  unsigned __int8 v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  int *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;

  v54 = (int *)sub_10001A9A8(&qword_1010FF530);
  __chkstk_darwin(v54);
  v55 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_10001A9A8(&qword_1010FF538);
  v7 = __chkstk_darwin(v57);
  v58 = (int **)((char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v59 = (int **)((char *)&v54 - v9);
  v60 = swift_allocObject(&unk_10107EEE0, 24, 7);
  *(_QWORD *)(v60 + 16) = a3;
  v56 = a3;
  v10 = _Block_copy(a3);
  v11 = static os_log_type_t.default.getter(v10);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v12 = qword_1011B7D50;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 112, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B10;
  v15 = a2;
  v61 = *a2;
  v16 = sub_10001A9A8(&qword_1010FF3D8);
  v17 = String.init<A>(describing:)(&v61, v16);
  v19 = v18;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v17;
  *(_QWORD *)(v14 + 40) = v19;
  *(_QWORD *)(v14 + 96) = &type metadata for String;
  *(_QWORD *)(v14 + 104) = v20;
  *(_QWORD *)(v14 + 64) = v20;
  *(_QWORD *)(v14 + 72) = 0xD000000000000039;
  *(_QWORD *)(v14 + 80) = 0x8000000100EDB460;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%{public}@: %{public}@", 22, 2, v14);
  v21 = swift_bridgeObjectRelease();
  v22 = static os_log_type_t.default.getter(v21);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v23 = qword_1011B7DD8;
  v24 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v53 = a1;
    else
      v53 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v25 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v26 = (uint64_t)v15;
  *(_QWORD *)(v24 + 56) = &type metadata for Int;
  *(_QWORD *)(v24 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v24 + 32) = v25;
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "received %d unauthorized tracking observation(s)", (_DWORD)v54);
  swift_bridgeObjectRelease();
  v27 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (!v27)
    goto LABEL_30;
  v28 = v27;
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "applicationIsInstalled:", v29);

  if ((v30 & 1) == 0)
  {
    sub_10000A430();
    swift_bridgeObjectRelease();
    sub_1007F77E0();
  }
  if (!((unint64_t)a1 >> 62))
  {
    v31 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v31)
      goto LABEL_12;
LABEL_21:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (a1 < 0)
    v38 = a1;
  else
    v38 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v38))
    goto LABEL_21;
LABEL_12:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    goto LABEL_15;
  }
  if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_30:
    _Block_release(v56);
    __break(1u);
    return;
  }
  v32 = *(id *)(a1 + 32);
LABEL_15:
  v33 = v32;
  swift_bridgeObjectRelease();
  v34 = v59;
  sub_100563FD4(v33, v59);
  v35 = v58;
  sub_10000F9B8((uint64_t)v34, (uint64_t)v58, &qword_1010FF538);
  if (swift_getEnumCaseMultiPayload(v35, v57) == 1)
  {
    v36 = *v35;
    swift_errorRetain(*v35);
    v37 = (void *)_convertErrorToNSError(_:)(v36);
    (*((void (**)(char *, void *))v56 + 2))(v56, v37);

    swift_errorRelease(v36);
    swift_errorRelease(v36);
  }
  else
  {
    v39 = (unint64_t)v55;
    v40 = v54[12];
    v57 = v26;
    v41 = (uint64_t *)&v55[v40];
    v42 = v54[16];
    v43 = (uint64_t)&v55[v42];
    v44 = v54[20];
    v45 = v54[24];
    v46 = (_QWORD *)((char *)v35 + v40);
    v56 = (char *)v35 + v42;
    v47 = type metadata accessor for MACAddress(0);
    (*(void (**)(unint64_t, _QWORD *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v39, v35, v47);
    v48 = *v46;
    v49 = v46[1];
    *v41 = v48;
    v41[1] = v49;
    sub_10058A200((uint64_t)v56, v43);
    v50 = *(void **)((char *)v35 + v44);
    *(_QWORD *)(v39 + v44) = v50;
    v51 = *((unsigned __int8 *)v35 + v45);
    *(_BYTE *)(v39 + v45) = v51;
    sub_1001DD474(v48, v49);
    v52 = v50;
    sub_10057ACCC(v39, v48, v49, v43, v33, v51, (void (*)(_QWORD *))sub_10001D1EC, v60);

    sub_1001DAFB8(v48, v49);
    sub_100004048(v39, &qword_1010FF530);
  }
  sub_100004048((uint64_t)v34, &qword_1010FF538);
  swift_release();
}

uint64_t sub_100584354(uint64_t a1, Swift::UInt8 a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::Int v37;
  BOOL v38;
  Swift::UInt8 v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[8];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[8];

  v95 = a1;
  v96 = a4;
  v94 = a3;
  v9 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v9);
  v11 = (char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AccessoryMetadata(0);
  v87 = *(_QWORD *)(v12 - 8);
  v88 = v12;
  __chkstk_darwin(v12);
  v67 = (uint64_t)v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10001A9A8(&qword_1010FD188);
  __chkstk_darwin(v90);
  v91 = (uint64_t)v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10001A9A8(&qword_1010FF4C0);
  v64[2] = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v64[1] = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_10001A9A8(&qword_1010FF4C8);
  v73 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v72 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_10001A9A8(&qword_1010FF4D0);
  v77 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v75 = (char *)v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_10001A9A8(&qword_1010FF4D8);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v81 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for MACAddress(0);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v68 = v19;
  v69 = (char *)v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_10001A9A8(&qword_1010FF4E0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v76 = (char *)v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_10001A9A8(&qword_1010FF4E8);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v82 = (char *)v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v22);
  v24 = (char *)v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for SharedBeaconRecord(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27);
  v32 = (char *)v64 - v31;
  v33 = __chkstk_darwin(v30);
  v66 = (uint64_t)v64 - v34;
  __chkstk_darwin(v33);
  v89 = (uint64_t)v64 - v35;
  v36 = swift_allocObject(&unk_10107EDF0, 32, 7);
  v92 = a5;
  *(_QWORD *)(v36 + 16) = a5;
  *(_QWORD *)(v36 + 24) = a6;
  v97 = v36;
  v37 = sub_1003D7D50((uint64_t)&off_10104AD98);
  v38 = sub_100A08088(a2, v37);
  v93 = a6;
  swift_retain();
  swift_bridgeObjectRelease();
  if (v38)
LABEL_16:
    __asm { BR              X10 }
  v39 = a2;
  sub_10000F9B8(v94, (uint64_t)v24, (uint64_t *)&unk_1010EE180);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_100004048((uint64_t)v24, (uint64_t *)&unk_1010EE180);
LABEL_15:
    a2 = v39;
    goto LABEL_16;
  }
  v40 = v89;
  sub_1000126EC((uint64_t)v24, v89, type metadata accessor for SharedBeaconRecord);
  v100 = v25;
  v101 = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v41 = sub_100018F08(&v98);
  sub_10005972C(v40, (uint64_t)v41, type metadata accessor for SharedBeaconRecord);
  sub_10099E8C4(&v98, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v11, 1, v88) == 1)
  {
    sub_100004048((uint64_t)v11, &qword_101115E60);
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v42 = type metadata accessor for Logger(0);
    sub_10001A9E8(v42, (uint64_t)qword_1011B7148);
    sub_10005972C(v40, (uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    v43 = sub_10005972C(v40, (uint64_t)v29, type metadata accessor for SharedBeaconRecord);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(22, -1);
      *(_DWORD *)v46 = 134218240;
      v47 = *(_QWORD *)&v32[*(int *)(v25 + 48)];
      sub_1000126B0((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
      v98 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2048;
      v48 = *(_QWORD *)&v29[*(int *)(v25 + 44)];
      v40 = v89;
      sub_1000126B0((uint64_t)v29, type metadata accessor for SharedBeaconRecord);
      v98 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99, v46 + 14, v46 + 22);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Invalid product data from shared beacon %ld-%ld", (uint8_t *)v46, 0x16u);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v29, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    }

    sub_1000126B0(v40, type metadata accessor for SharedBeaconRecord);
    goto LABEL_15;
  }
  v49 = v67;
  sub_1000126EC((uint64_t)v11, v67, type metadata accessor for AccessoryMetadata);
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v50 = type metadata accessor for Logger(0);
  sub_10001A9E8(v50, (uint64_t)qword_1011B7148);
  v51 = v66;
  v52 = sub_10005972C(v40, v66, type metadata accessor for SharedBeaconRecord);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc(22, -1);
    v56 = swift_slowAlloc(32, -1);
    v98 = v56;
    *(_DWORD *)v55 = 141558275;
    v102 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v55 + 4, v55 + 12);
    *(_WORD *)(v55 + 12) = 2081;
    v57 = type metadata accessor for UUID(0);
    v58 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v59 = dispatch thunk of CustomStringConvertible.description.getter(v57, v58);
    v102 = sub_100016940(v59, v60, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v51, type metadata accessor for SharedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Skipping AIS fetch for family beacon %{private,mask.hash}s", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    v61 = v56;
    v40 = v89;
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v55, -1, -1);
  }
  else
  {
    sub_1000126B0(v51, type metadata accessor for SharedBeaconRecord);
  }

  v62 = v91;
  sub_10005972C(v49, v91, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload(v62, v90, 0);
  sub_10056C5C8(v62, v92);
  sub_100004048(v62, &qword_1010FD188);
  sub_1000126B0(v49, type metadata accessor for AccessoryMetadata);
  sub_1000126B0(v40, type metadata accessor for SharedBeaconRecord);
  return swift_release();
}

uint64_t sub_100585558(uint64_t a1, Swift::UInt8 a2, uint64_t a3, char a4, uint64_t a5, void (*a6)(char *), uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  unsigned int v27;
  NSString v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt8 v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t (**v66)(uint64_t);
  uint64_t (*v67)(uint64_t);
  unint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v78 = a3;
  v79 = a5;
  v84 = a1;
  v75 = sub_10001A9A8(&qword_1010FD188);
  __chkstk_darwin(v75);
  v76 = (uint64_t *)((char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v12);
  v77 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MACAddress(0);
  v81 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v81 + 64);
  v16 = __chkstk_darwin(v14);
  v17 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v75 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v75 - v21;
  v23 = swift_allocObject(&unk_10107EDA0, 32, 7);
  v80 = a6;
  *(_QWORD *)(v23 + 16) = a6;
  *(_QWORD *)(v23 + 24) = a7;
  v82 = v23;
  v83 = a7;
  v24 = qword_1010EA198;
  swift_retain_n(a7, 3);
  if (v24 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v25 = (void *)qword_1011B7C08;
  v26 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v27 = objc_msgSend(v26, "isInternalBuild");

  if (v27)
  {
    v28 = String._bridgeToObjectiveC()();
    v29 = objc_msgSend(v25, "BOOLForKey:", v28);

    if (v29)
    {
      if (qword_1010E9CE8 != -1)
        swift_once(&qword_1010E9CE8, sub_100563934);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_10001A9E8(v30, (uint64_t)qword_1010FF230);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(12, -1);
        v35 = swift_slowAlloc(32, -1);
        v86 = v35;
        *(_DWORD *)v34 = 136446210;
        v85 = sub_100016940(0xD000000000000043, 0x8000000100EDB3C0, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v34 + 4, v34 + 12);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "%{public}s ForceReadingHawkeyeAIS is enabled!", v34, 0xCu);
        swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1, -1);
        swift_slowDealloc(v34, -1, -1);
      }

      v36 = v83;
      swift_retain();
      v37 = v84;
      v38 = 2;
      goto LABEL_23;
    }
  }
  if ((a4 & 1) != 0)
  {
    v39 = v81;
    if (qword_1010E9CE0 != -1)
      swift_once(&qword_1010E9CE0, sub_100563220);
    v40 = type metadata accessor for Logger(0);
    sub_10001A9E8(v40, (uint64_t)qword_1011B7148);
    v41 = *(void (**)(char *))(v39 + 16);
    v42 = ((uint64_t (*)(char *, uint64_t, uint64_t))v41)(v22, v84, v14);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v79 = swift_slowAlloc(64, -1);
      v86 = v79;
      *(_DWORD *)v45 = 136446466;
      v85 = sub_100016940(0xD000000000000043, 0x8000000100EDB3C0, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2082;
      v80 = v41;
      v46 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v14, v46);
      v85 = sub_100016940(v47, v48, &v86);
      v41 = v80;
      v39 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v14);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s for Posh accessory with %{public}s", (uint8_t *)v45, 0x16u);
      v49 = v79;
      swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v39 + 8))(v22, v14);
    }

    v60 = type metadata accessor for TaskPriority(0);
    v61 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v77, 1, 1, v60);
    ((void (*)(char *, uint64_t, uint64_t))v41)(v20, v84, v14);
    v62 = *(unsigned __int8 *)(v39 + 80);
    v63 = (v62 + 32) & ~v62;
    v64 = (v15 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    v65 = swift_allocObject(&unk_10107EDC8, v64 + 16, v62 | 7);
    *(_QWORD *)(v65 + 16) = 0;
    *(_QWORD *)(v65 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v65 + v63, v20, v14);
    v66 = (uint64_t (**)(uint64_t))(v65 + v64);
    v67 = (uint64_t (*)(uint64_t))v82;
    *v66 = sub_10058A284;
    v66[1] = v67;
    swift_retain();
    sub_100691AC0(v61, (uint64_t)&unk_1010FF4B8, v65);
    swift_release_n(v83, 2);
    swift_release();
  }
  else
  {
    v50 = v81;
    if (a2 != 4)
    {
      v36 = v83;
      swift_retain();
      v37 = v84;
      v38 = a2;
LABEL_23:
      sub_100584354(v37, v38, v78, v79, v80, v36);
      swift_release();
      return swift_release_n(v36, 3);
    }
    if (qword_1010E9CE8 != -1)
      swift_once(&qword_1010E9CE8, sub_100563934);
    v51 = type metadata accessor for Logger(0);
    sub_10001A9E8(v51, (uint64_t)qword_1010FF230);
    v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 16))(v17, v84, v14);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc(22, -1);
      v56 = swift_slowAlloc(64, -1);
      v86 = v56;
      *(_DWORD *)v55 = 136446466;
      v85 = sub_100016940(0xD000000000000043, 0x8000000100EDB3C0, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2082;
      v57 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v14, v57);
      v85 = sub_100016940(v58, v59, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v17, v14);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "%{public}s for %{public}s with no device type!", (uint8_t *)v55, 0x16u);
      swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v50 + 8))(v17, v14);
    }

    v69 = sub_10058A1B8();
    v70 = swift_allocError(&type metadata for UTError, v69, 0, 0);
    *v71 = 3;
    v72 = v75;
    v73 = (uint64_t)v76;
    *v76 = v70;
    swift_storeEnumTagMultiPayload(v73, v72, 1);
    v74 = v83;
    sub_10056C5C8(v73, v80);
    sub_100004048(v73, &qword_1010FD188);
    swift_release_n(v74, 2);
  }
  return swift_release();
}

uint64_t sub_100585E0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(id, void *))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  BOOL v52;
  void *v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  void (**v88)(id, void *);
  void *v89;
  double v90;
  uint64_t v91;
  id v92;
  unsigned __int8 v93;
  id v94;
  unsigned int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  void (**v177)(id, void *);
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(char *, uint64_t, uint64_t);
  int *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  uint64_t v218;
  id v219;
  char v220[8];

  v216 = a8;
  v217 = a2;
  v211 = a6;
  v212 = a7;
  v209 = a4;
  v210 = a5;
  v10 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v10);
  v178 = (char *)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_10001A9A8(&qword_1010FF3F0);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v179 = (char *)&v169 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_10001A9A8(&qword_1010FF3F8);
  v183 = *(_QWORD *)(v184 - 8);
  __chkstk_darwin(v184);
  v182 = (char *)&v169 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_10001A9A8(&qword_1010FF400);
  v186 = *(_QWORD *)(v187 - 8);
  __chkstk_darwin(v187);
  v185 = (char *)&v169 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = sub_10001A9A8(&qword_1010FF408);
  v189 = *(_QWORD *)(v190 - 8);
  __chkstk_darwin(v190);
  v188 = (char *)&v169 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_10001A9A8(&qword_1010FF410);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v191 = (char *)&v169 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_10001A9A8(&qword_1010FF418);
  v195 = *(_QWORD *)(v196 - 8);
  __chkstk_darwin(v196);
  v192 = (char *)&v169 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_10001A9A8(&qword_1010FF420);
  v198 = *(_QWORD *)(v199 - 8);
  __chkstk_darwin(v199);
  v197 = (char *)&v169 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v173 = *(_QWORD *)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v175 = (uint64_t)&v169 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = v21;
  __chkstk_darwin(v20);
  v176 = (char *)&v169 - v22;
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v23);
  v204 = (char *)&v169 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v206 = type metadata accessor for MACAddress(0);
  v213 = *(_QWORD *)(v206 - 8);
  v25 = __chkstk_darwin(v206);
  v172 = (char *)&v169 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = v26;
  __chkstk_darwin(v25);
  v205 = (char *)&v169 - v27;
  v28 = type metadata accessor for WildModeAssociationRecord(0);
  v207 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v201 = (void (*)(char *, uint64_t, uint64_t))((char *)&v169 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = __chkstk_darwin(v29);
  v200 = (uint64_t)&v169 - v32;
  v208 = v33;
  __chkstk_darwin(v31);
  v35 = (char *)&v169 - v34;
  v36 = sub_10001A9A8(&qword_1010FF428);
  v203 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v38 = (char *)&v169 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v39);
  v41 = (char *)&v169 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = swift_allocObject(&unk_10107ECD8, 24, 7);
  *(_QWORD *)(v42 + 16) = a9;
  v43 = swift_allocObject(&unk_10107ED00, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_10001D1F0;
  *(_QWORD *)(v43 + 24) = v42;
  v214 = v43;
  v44 = a1;
  sub_10000F9B8(a1 + *(int *)(v28 + 56), (uint64_t)v41, &qword_101115E60);
  v45 = type metadata accessor for AccessoryMetadata(0);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v41, 1, v45);
  v177 = a9;
  _Block_copy(a9);
  v215 = v42;
  swift_retain();
  sub_100004048((uint64_t)v41, &qword_101115E60);
  if ((_DWORD)a1 != 1)
  {
    sub_10005972C(v44, (uint64_t)v35, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)(v35, v28);
    v65 = sub_1000193A4(&qword_1010FF4A8, &qword_1010FF428, (const char *)&protocol conformance descriptor for Just<A>);
    v66 = Publisher.eraseToAnyPublisher()(v36, v65);
    (*(void (**)(char *, uint64_t))(v203 + 8))(v38, v36);
    v67 = v44;
LABEL_33:
    v218 = v66;
    sub_10005972C(v67, (uint64_t)v35, type metadata accessor for WildModeAssociationRecord);
    v156 = *(unsigned __int8 *)(v207 + 80);
    v157 = (v156 + 80) & ~v156;
    v158 = (_QWORD *)swift_allocObject(&unk_10107ED78, v157 + v208, v156 | 7);
    v159 = v216;
    v160 = v217;
    v158[2] = v216;
    v158[3] = v160;
    v161 = v210;
    v162 = v211;
    v158[4] = v209;
    v158[5] = v161;
    v163 = v212;
    v158[6] = v162;
    v158[7] = v163;
    v164 = v214;
    v158[8] = sub_10058A1B0;
    v158[9] = v164;
    sub_1000126EC((uint64_t)v35, (uint64_t)v158 + v157, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain(v162);
    swift_bridgeObjectRetain(v163);
    swift_retain();
    swift_retain();
    swift_retain();
    v165 = v160;
    v166 = sub_10001A9A8(&qword_1010FF498);
    v167 = sub_1000193A4(&qword_1010FF4A0, &qword_1010FF498, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_10058A268, v158, v166, v167);
    swift_release();
    swift_release();
    swift_beginAccess(v159 + 32, &v218, 33, 0);
    AnyCancellable.store(in:)(v159 + 32);
    swift_endAccess(&v218);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  v202 = (int *)v28;
  v170 = v35;
  v203 = v44;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v46 = type metadata accessor for Logger(0);
  sub_10001A9E8(v46, (uint64_t)qword_1011B7148);
  v47 = v203;
  v48 = v200;
  v49 = sub_10005972C(v203, v200, type metadata accessor for WildModeAssociationRecord);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter(v50);
  v52 = os_log_type_enabled(v50, v51);
  v53 = v217;
  v54 = (uint64_t)v204;
  if (v52)
  {
    v55 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = v46;
    v57 = swift_slowAlloc(32, -1);
    v218 = v57;
    *(_DWORD *)v55 = 136446210;
    v58 = type metadata accessor for UUID(0);
    v59 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v60 = v58;
    v53 = v217;
    v61 = dispatch thunk of CustomStringConvertible.description.getter(v60, v59);
    v219 = (id)sub_100016940(v61, v62, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, v220, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v48, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Record %{public}s is missing metadata. Attempting to fetch again...", v55, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    v63 = v57;
    v46 = v56;
    v54 = (uint64_t)v204;
    swift_slowDealloc(v63, -1, -1);
    v64 = v55;
    v47 = v203;
    swift_slowDealloc(v64, -1, -1);
  }
  else
  {
    sub_1000126B0(v48, type metadata accessor for WildModeAssociationRecord);
  }

  v68 = (uint64_t)v201;
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  sub_10001A9E8(v46, (uint64_t)qword_1010FF230);
  v69 = sub_10005972C(v47, v68, type metadata accessor for WildModeAssociationRecord);
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.default.getter(v70);
  if (!os_log_type_enabled(v70, v71))
  {
    sub_1000126B0(v68, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  v72 = swift_slowAlloc(22, -1);
  v73 = swift_slowAlloc(64, -1);
  v218 = v73;
  *(_DWORD *)v72 = 136315394;
  v219 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v218);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, v220, v72 + 4, v72 + 12);
  *(_WORD *)(v72 + 12) = 2082;
  v74 = (_BYTE *)(v68 + v202[22]);
  if ((v74[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v68 + v202[21]) & 1) != 0)
      goto LABEL_19;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v68 + v202[21]) & 1) == 0)
  {
LABEL_16:
    v75 = *(_BYTE *)(v68 + v202[13]);
    goto LABEL_20;
  }
  if (*v74 != 1)
  {
LABEL_19:
    v75 = 6;
    goto LABEL_20;
  }
  v75 = 5;
LABEL_20:
  v76 = sub_1005632A4(v75);
  v219 = (id)sub_100016940(v76, v77, &v218);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, v220, v72 + 14, v72 + 22);
  swift_bridgeObjectRelease();
  sub_1000126B0(v68, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v70, v71, "%s Advertisement type: %{public}s", (uint8_t *)v72, 0x16u);
  swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v73, -1, -1);
  swift_slowDealloc(v72, -1, -1);

  v53 = v217;
LABEL_21:
  sub_1001DBC34(v54);
  v78 = v213;
  v79 = v206;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v54, 1, v206) != 1)
  {
    v201 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 32);
    v201(v205, v54, v79);
    LODWORD(v177) = *(unsigned __int8 *)(v47 + v202[13]);
    if ((_DWORD)v177 == 3)
      v90 = 180.0;
    else
      v90 = 60.0;
    v204 = (char *)swift_allocBox(v202);
    sub_10005972C(v47, v91, type metadata accessor for WildModeAssociationRecord);
    v92 = objc_msgSend(v53, "trackingIdentifier");
    v93 = objc_msgSend(v92, "isPosh");

    if ((v93 & 1) != 0)
    {
      v94 = objc_msgSend(v53, "trackingIdentifier");
      v95 = objc_msgSend(v94, "networkID");

      v96 = 2 * (v95 == 2);
      if (v95 == 1)
        v96 = 1;
    }
    else
    {
      v96 = 3;
    }
    LODWORD(v200) = v96;
    v97 = type metadata accessor for SharedBeaconRecord(0);
    v98 = (uint64_t)v176;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56))(v176, 1, 1, v97);
    v99 = *(_BYTE *)(v47 + v202[21]) & 1;
    v100 = v213;
    v101 = v172;
    (*(void (**)(char *, char *, uint64_t))(v213 + 16))(v172, v205, v79);
    v102 = v175;
    sub_10000F9B8(v98, v175, (uint64_t *)&unk_1010EE180);
    v103 = *(unsigned __int8 *)(v100 + 80);
    v104 = (v103 + 24) & ~v103;
    v105 = v104 + v171;
    v106 = *(unsigned __int8 *)(v173 + 80);
    v107 = (v106 + v104 + v171 + 1) & ~v106;
    v108 = v107 + v174;
    v109 = swift_allocObject(&unk_10107ED28, v107 + v174 + 1, v103 | v106 | 7);
    v110 = v79;
    v111 = v216;
    *(_QWORD *)(v109 + 16) = v216;
    v201((char *)(v109 + v104), (uint64_t)v101, v110);
    *(_BYTE *)(v109 + v105) = (_BYTE)v177;
    sub_10058A200(v102, v109 + v107);
    *(_BYTE *)(v109 + v108) = v99;
    v112 = sub_10001A9A8(&qword_1010F3978);
    swift_allocObject(v112, *(unsigned int *)(v112 + 48), *(unsigned __int16 *)(v112 + 52));
    swift_retain();
    v218 = Future.init(_:)(sub_10058A248, v109, v113);
    v114 = sub_1000193A4((unint64_t *)&unk_10111C230, &qword_1010F3978, (const char *)&protocol conformance descriptor for Future<A, B>);
    v115 = Publisher.eraseToAnyPublisher()(v112, v114);
    v201 = (void (*)(char *, uint64_t, uint64_t))v115;
    swift_release();
    sub_100004048(v98, (uint64_t *)&unk_1010EE180);
    v218 = v115;
    v219 = *(id *)(v111 + 24);
    v116 = v219;
    v117 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v118 = (uint64_t)v178;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v178, 1, 1, v117);
    v177 = (void (**)(id, void *))v116;
    v119 = sub_10001A9A8(&qword_1010FF438);
    v120 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v121 = sub_1000193A4((unint64_t *)&unk_10111C240, &qword_1010FF438, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v122 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v123 = v179;
    Publisher.receive<A>(on:options:)(&v219, v118, v119, v120, v121, v122);
    sub_100004048(v118, &qword_1010EECC8);

    v124 = swift_allocObject(&unk_10107ED50, 33, 7);
    v125 = v204;
    *(_QWORD *)(v124 + 16) = v204;
    *(_QWORD *)(v124 + 24) = v111;
    *(_BYTE *)(v124 + 32) = v200;
    swift_retain();
    v126 = v125;
    v127 = swift_retain();
    v128 = static Subscribers.Demand.unlimited.getter(v127);
    v129 = sub_10001A9A8(&qword_1010FF440);
    v130 = sub_10001A9A8((uint64_t *)&unk_10111C130);
    v131 = sub_1000193A4(&qword_1010FF448, &qword_1010FF3F0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v132 = sub_1000193A4(&qword_1010FF450, (uint64_t *)&unk_10111C130, (const char *)&protocol conformance descriptor for Future<A, B>);
    v133 = v182;
    v134 = v181;
    v135 = v129;
    v67 = v203;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v128, sub_10058A250, v124, v181, v135, v130, v131, v132);
    swift_release();
    (*(void (**)(char *, uint64_t))(v180 + 8))(v123, v134);
    v136 = sub_1000193A4(&qword_1010FF458, &qword_1010FF3F8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v137 = v185;
    v138 = v184;
    Publisher.timeout(_:queue:customError:)(v177, sub_10058C860, 0, v184, v136, v90);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v133, v138);
    v139 = sub_10001A9A8(&qword_1010F37F0);
    v140 = sub_1000193A4(&qword_1010FF460, &qword_1010FF400, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v141 = v188;
    v142 = v187;
    Publisher.map<A>(_:)(sub_100568814, 0, v187, v139, v140);
    (*(void (**)(char *, uint64_t))(v186 + 8))(v137, v142);
    v143 = sub_10001A9A8(&qword_1010FF468);
    v144 = sub_1000193A4(&qword_1010FF470, &qword_1010FF408, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v145 = sub_1000193A4(&qword_1010FF478, &qword_1010FF468, (const char *)&protocol conformance descriptor for Just<A>);
    v146 = v191;
    v147 = v190;
    Publisher.catch<A>(_:)(sub_100568818, 0, v190, v143, v144, v145);
    (*(void (**)(char *, uint64_t))(v189 + 8))(v141, v147);
    v148 = sub_1000193A4(&qword_1010FF480, &qword_1010FF410, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    v149 = v192;
    v150 = v194;
    Publisher.map<A>(_:)(sub_10058A25C, v126, v194, v202, v148);
    swift_release();
    (*(void (**)(char *, uint64_t))(v193 + 8))(v146, v150);
    v151 = sub_1000193A4(&qword_1010FF488, &qword_1010FF418, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v152 = v197;
    v153 = v196;
    Publisher.replaceError(with:)(v67, v196, v151);
    (*(void (**)(char *, uint64_t))(v195 + 8))(v149, v153);
    v154 = sub_1000193A4(&qword_1010FF490, &qword_1010FF420, (const char *)&protocol conformance descriptor for Publishers.ReplaceError<A>);
    v155 = v199;
    v66 = Publisher.eraseToAnyPublisher()(v199, v154);
    swift_release();
    (*(void (**)(char *, uint64_t))(v198 + 8))(v152, v155);
    (*(void (**)(char *, uint64_t))(v213 + 8))(v205, v206);
    swift_release();
    v35 = v170;
    goto LABEL_33;
  }
  v80 = sub_100004048(v54, (uint64_t *)&unk_1010F9890);
  v81 = Logger.logObject.getter(v80);
  v82 = static os_log_type_t.error.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(12, -1);
    v84 = swift_slowAlloc(32, -1);
    v218 = v84;
    *(_DWORD *)v83 = 136315138;
    v219 = (id)sub_100016940(0xD000000000000068, 0x8000000100EDB300, &v218);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v219, v220, v83 + 4, v83 + 12);
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "%s unexpected advertisement type!", v83, 0xCu);
    swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v83, -1, -1);
  }

  v85 = sub_10058A1B8();
  v86 = swift_allocError(&type metadata for UTError, v85, 0, 0);
  *v87 = 1;
  v88 = v177;
  _Block_copy(v177);
  v89 = (void *)_convertErrorToNSError(_:)(v86);
  v88[2](v88, v89);

  _Block_release(v88);
  swift_errorRelease(v86);
  swift_release();
  return swift_release();
}

void sub_100587264(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(id, void *))
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void (**v36)(id, void *);
  void (**v37)(id, void *);
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  os_log_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (**v78)(id, void *);
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void *v91;
  void (**v92)(id, void *);
  uint64_t v93;
  char v94[80];
  uint64_t v95;
  uint64_t v96[2];

  v84 = a6;
  v83 = a5;
  v82 = a4;
  v91 = a3;
  v93 = type metadata accessor for WildModeTrackingLocation(0);
  v12 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v14 = (uint64_t *)((char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v88 = type metadata accessor for MACAddress(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v89 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v16);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for WildModeAssociationRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v86 = (os_log_t)((char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  v24 = (char *)&v79 - v23;
  v92 = a8;
  _Block_copy(a8);
  v90 = a1;
  v85 = a7;
  sub_100570340(a1, a2, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v25 = sub_100004048((uint64_t)v18, &qword_101102FB0);
    v26 = static os_log_type_t.error.getter(v25);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, qword_1011B7DD8, "No wildModeAssociationRecord found", 34, 2, _swiftEmptyArrayStorage);
    type metadata accessor for TrackingAvoidanceError(0);
    v28 = v27;
    v95 = 3;
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    inited = swift_initStackObject(v29, v94);
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(inited + 40) = v31;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000027;
    *(_QWORD *)(inited + 56) = 0x8000000100EDB2D0;
    v32 = sub_1006B8B10(inited);
    v33 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v96, &v95, v32, v28, v33);
    v34 = (void *)v96[0];
    v35 = (void *)_convertErrorToNSError(_:)(v96[0]);
    v36 = v92;
    v92[2](v92, v35);

    v37 = v36;
    goto LABEL_27;
  }
  sub_1000126EC((uint64_t)v18, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  v38 = type metadata accessor for Logger(0);
  sub_10001A9E8(v38, (uint64_t)qword_1010FF230);
  v39 = v86;
  sub_10005972C((uint64_t)v24, (uint64_t)v86, type metadata accessor for WildModeAssociationRecord);
  v40 = v87;
  v41 = v89;
  v42 = v88;
  v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 16))(v89, v90, v88);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  v46 = v45;
  if (os_log_type_enabled(v44, v45))
  {
    v47 = swift_slowAlloc(22, -1);
    v81 = swift_slowAlloc(64, -1);
    v96[0] = v81;
    *(_DWORD *)v47 = 136315394;
    v79 = v47 + 4;
    v48 = type metadata accessor for UUID(0);
    v49 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v80 = v46;
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
    v95 = sub_100016940(v50, v51, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v79, v47 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v39, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v47 + 12) = 2080;
    v52 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v86 = v44;
    v53 = v24;
    v54 = v89;
    v55 = dispatch thunk of CustomStringConvertible.description.getter(v42, v52);
    v95 = sub_100016940(v55, v56, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease();
    v57 = v54;
    v24 = v53;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v57, v42);
    v58 = v86;
    _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v80, "update: found UT record UUID %s address %s.", (uint8_t *)v47, 0x16u);
    v59 = v81;
    swift_arrayDestroy(v81, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {
    sub_1000126B0((uint64_t)v39, type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);

  }
  v60 = objc_msgSend(v91, "observedLocations");
  v61 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
  v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, v61);

  if (!((unint64_t)v62 >> 62))
  {
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v63)
      goto LABEL_12;
LABEL_25:
    swift_bridgeObjectRelease();
    v65 = _swiftEmptyArrayStorage;
LABEL_26:
    v78 = v92;
    _Block_copy(v92);
    sub_100585E0C((uint64_t)v24, v91, v90, v82, v83, v84, (uint64_t)v65, v85, v78);
    _Block_release(v78);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
    v37 = v78;
LABEL_27:
    _Block_release(v37);
    return;
  }
  if (v62 < 0)
    v77 = v62;
  else
    v77 = v62 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v62);
  v63 = _CocoaArrayWrapper.endIndex.getter(v77);
  swift_bridgeObjectRelease();
  if (!v63)
    goto LABEL_25;
LABEL_12:
  v96[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_10009AED0(0, v63 & ~(v63 >> 63), 0);
  if ((v63 & 0x8000000000000000) == 0)
  {
    v89 = v24;
    v64 = 0;
    v65 = (_QWORD *)v96[0];
    do
    {
      if ((v62 & 0xC000000000000001) != 0)
        v66 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v64, v62);
      else
        v66 = *(id *)(v62 + 8 * v64 + 32);
      v67 = v66;
      objc_msgSend(v66, "latitude");
      v69 = v68;
      objc_msgSend(v67, "longitude");
      v71 = v70;
      objc_msgSend(v67, "horizontalAccuracy");
      v73 = v72;
      v74 = objc_msgSend(v67, "timestamp");
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v74);

      *v14 = v69;
      v14[1] = v71;
      v14[2] = v73;
      v96[0] = (uint64_t)v65;
      v76 = v65[2];
      v75 = v65[3];
      if (v76 >= v75 >> 1)
      {
        sub_10009AED0(v75 > 1, v76 + 1, 1);
        v65 = (_QWORD *)v96[0];
      }
      ++v64;
      v65[2] = v76 + 1;
      sub_1000126EC((uint64_t)v14, (uint64_t)v65+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v76, type metadata accessor for WildModeTrackingLocation);
    }
    while (v63 != v64);
    swift_bridgeObjectRelease();
    v24 = v89;
    goto LABEL_26;
  }
  __break(1u);
}

void sub_100587A90(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint8_t *v50;
  void *v51;
  id v52;
  char *v53;
  uint8_t *v54;
  char v55;
  void (*v56)(uint8_t *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t inited;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  void (**v84)(id, void *);
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  id v91;
  void *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  const char *v102;
  id v103;
  id v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  _DWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  char *v119;
  uint64_t v120;
  id v121;
  unsigned int v122;
  id v123;
  NSString v124;
  unsigned int v125;
  uint64_t v126;
  double v127;
  double v128;
  double v129;
  double v130;
  unsigned int v131;
  void *v132;
  id v133;
  void *v134;
  void *v135;
  id v136;
  unsigned int v137;
  void *v138;
  id v139;
  unsigned int v140;
  id v141;
  unsigned int v142;
  id v143;
  unsigned int v144;
  uint64_t v145;
  char v146;
  char v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  NSObject *v155;
  NSObject *v156;
  os_log_type_t v157;
  uint64_t v158;
  id v159;
  unsigned int v160;
  id v161;
  unsigned __int8 v162;
  unsigned __int8 v163;
  id v164;
  unsigned __int8 v165;
  id v166;
  id v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  NSObject *v175;
  os_log_type_t v176;
  uint8_t *v177;
  uint64_t v178;
  unint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  uint8_t *v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  void (*v195)(char *, uint64_t);
  uint8_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  void *v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unint64_t v214;
  uint64_t v215;
  void *v216;
  unint64_t v217;
  uint64_t v218;
  void *v219;
  void *v220;
  void *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (**v226)(id, void *);
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  uint8_t *v254;
  uint64_t v255;
  char *v256;
  void (**v257)(_QWORD, _QWORD);
  __int128 v258;
  void *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263[13];
  uint64_t v264;
  char v265[80];
  uint64_t v266;
  uint64_t v267;

  v259 = a1;
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v247 = (char *)&v230 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v7);
  v236 = (char *)&v230 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v238 = type metadata accessor for SharedBeaconRecord(0);
  v235 = *(_QWORD *)(v238 - 8);
  v9 = __chkstk_darwin(v238);
  v234 = (char *)&v230 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v253 = (char *)&v230 - v12;
  __chkstk_darwin(v11);
  v237 = (char *)&v230 - v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v14);
  v241 = (char *)&v230 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1011091A0);
  __chkstk_darwin(v16);
  v245 = (char *)&v230 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v243 = *(_QWORD *)(v18 - 8);
  v244 = v18;
  __chkstk_darwin(v18);
  v246 = (char *)&v230 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v21 = __chkstk_darwin(v20);
  v232 = (char *)&v230 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v239 = (char *)&v230 - v24;
  __chkstk_darwin(v23);
  v248 = (char *)&v230 - v25;
  v252 = type metadata accessor for MACAddress(0);
  v250 = *(_QWORD *)(v252 - 8);
  v26 = __chkstk_darwin(v252);
  v242 = (char *)&v230 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v233 = (char *)&v230 - v29;
  v30 = __chkstk_darwin(v28);
  v240 = (char *)&v230 - v31;
  __chkstk_darwin(v30);
  v249 = (uint64_t)&v230 - v32;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v33);
  v35 = (char *)&v230 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = __chkstk_darwin(v36);
  v254 = (uint8_t *)&v230 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38);
  v256 = (char *)&v230 - v40;
  _Block_copy(a3);
  _Block_copy(a3);
  v257 = (void (**)(_QWORD, _QWORD))a3;
  v41 = _Block_copy(a3);
  LODWORD(v258) = static os_log_type_t.default.getter(v41);
  if (qword_1010EA270 != -1)
    goto LABEL_79;
  while (1)
  {
    v42 = qword_1011B7D50;
    v255 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v43 = swift_allocObject(v255, 112, 7);
    *(_OWORD *)(v43 + 16) = xmmword_100E22B10;
    v263[0] = *(_QWORD *)a2;
    v44 = sub_10001A9A8(&qword_1010FF3D8);
    v45 = String.init<A>(describing:)(v263, v44);
    v46 = a2;
    v48 = v47;
    *(_QWORD *)(v43 + 56) = &type metadata for String;
    v49 = sub_10001AA00();
    *(_QWORD *)(v43 + 32) = v45;
    *(_QWORD *)(v43 + 40) = v48;
    *(_QWORD *)(v43 + 96) = &type metadata for String;
    *(_QWORD *)(v43 + 104) = v49;
    v50 = (uint8_t *)v49;
    *(_QWORD *)(v43 + 64) = v49;
    *(_QWORD *)(v43 + 72) = 0xD000000000000039;
    *(_QWORD *)(v43 + 80) = 0x8000000100EDAFE0;
    os_log(_:dso:log:_:_:)(v258, &_mh_execute_header, v42, "%{public}@: %{public}@", 22, 2, v43);
    swift_bridgeObjectRelease();
    v51 = v259;
    v52 = objc_msgSend(v259, "trackingIdentifier");
    v251 = v46;
    sub_100562940(v52, (uint64_t)v35);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
    {
      v254 = v50;
      sub_100004048((uint64_t)v35, (uint64_t *)&unk_1010EA690);
    }
    else
    {
      v53 = v256;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v256, v35, v36);
      v54 = v254;
      static Date.trustedNow.getter((uint64_t)v254);
      v55 = static Date.> infix(_:_:)(v53, v54);
      v56 = *(void (**)(uint8_t *, uint64_t))(v37 + 8);
      v56(v54, v36);
      if ((v55 & 1) != 0)
      {
        v254 = (uint8_t *)v36;
        v57 = v255;
        v58 = swift_allocObject(v255, 72, 7);
        v258 = xmmword_100E22B00;
        *(_OWORD *)(v58 + 16) = xmmword_100E22B00;
        v59 = objc_msgSend(v51, "trackingIdentifier");
        v60 = objc_msgSend(v59, "advertisementData");

        v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v60);
        v63 = v62;

        v64 = Data.hexString.getter(v61, v63);
        v66 = v65;
        sub_10001BC14(v61, v63);
        *(_QWORD *)(v58 + 56) = &type metadata for String;
        *(_QWORD *)(v58 + 64) = v50;
        *(_QWORD *)(v58 + 32) = v64;
        *(_QWORD *)(v58 + 40) = v66;
        v67 = String.init(format:_:)(0xD00000000000003CLL, 0x8000000100EDB1F0, v58);
        v69 = v68;
        v70 = static os_log_type_t.default.getter(v67);
        if (qword_1010EA2F8 != -1)
          swift_once(&qword_1010EA2F8, sub_100B5E19C);
        v71 = qword_1011B7DD8;
        v72 = swift_allocObject(v57, 72, 7);
        *(_OWORD *)(v72 + 16) = v258;
        *(_QWORD *)(v72 + 56) = &type metadata for String;
        *(_QWORD *)(v72 + 64) = v50;
        *(_QWORD *)(v72 + 32) = v67;
        *(_QWORD *)(v72 + 40) = v69;
        *(_QWORD *)&v73 = swift_bridgeObjectRetain(v69).n128_u64[0];
        os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v71, "%@", 2, 2, v72, v73);
        swift_bridgeObjectRelease();
        type metadata accessor for TrackingAvoidanceError(0);
        v75 = v74;
        v266 = 7;
        v76 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
        inited = swift_initStackObject(v76, &v260);
        *(_OWORD *)(inited + 16) = v258;
        *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(_QWORD *)(inited + 40) = v78;
        *(_QWORD *)(inited + 72) = &type metadata for String;
        *(_QWORD *)(inited + 48) = v67;
        *(_QWORD *)(inited + 56) = v69;
        v79 = sub_1006B8B10(inited);
        v80 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
        _BridgedStoredNSError.init(_:userInfo:)(v263, &v266, v79, v75, v80);
        v81 = (void *)v263[0];
        v82 = (void *)_convertErrorToNSError(_:)(v263[0]);
        v83 = v257;
        ((void (**)(_QWORD, void *))v257)[2](v257, v82);

        v56((uint8_t *)v256, (uint64_t)v254);
        _Block_release(v83);
        _Block_release(v83);
        v84 = (void (**)(id, void *))v83;
        goto LABEL_75;
      }
      v254 = v50;
      v56((uint8_t *)v53, v36);
    }
    v85 = objc_msgSend(v51, "observedLocations", v230, v231);
    v86 = sub_10000F4A0(0, &qword_1010FF3E0, SPObservationLocation_ptr);
    v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v85, v86);

    if ((unint64_t)v87 >> 62)
    {
      if (v87 < 0)
        v228 = v87;
      else
        v228 = v87 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v87);
      v88 = _CocoaArrayWrapper.endIndex.getter(v228);
      swift_bridgeObjectRelease();
    }
    else
    {
      v88 = *(_QWORD *)((v87 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v89 = swift_bridgeObjectRelease();
    if (!v88)
    {
      v95 = static os_log_type_t.error.getter(v89);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, qword_1011B7DD8, "There is no location", 20, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v97 = v96;
      v266 = 4;
      v98 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      v99 = swift_initStackObject(v98, &v261);
      *(_OWORD *)(v99 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v99 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(v99 + 40) = v100;
      *(_QWORD *)(v99 + 72) = &type metadata for String;
      v101 = 0xD000000000000027;
      v102 = "location was not present in the request";
      goto LABEL_70;
    }
    v90 = objc_msgSend(v51, "observedLocations");
    a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v90, v86);

    if ((unint64_t)a2 >> 62)
      break;
    v37 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a2);
    if (!v37)
      goto LABEL_22;
LABEL_14:
    *(_QWORD *)&v258 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) != 0)
      v91 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
    else
      v91 = *(id *)(a2 + 32);
    v92 = v91;
    v93 = sub_100B8C778();

    if ((v93 & 1) != 0)
    {
LABEL_17:
      v94 = swift_bridgeObjectRelease_n(a2, 2);
LABEL_67:
      v201 = static os_log_type_t.error.getter(v94);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      os_log(_:dso:log:_:_:)(v201, &_mh_execute_header, qword_1011B7DD8, "received locations within blocked regions", 41, 2, _swiftEmptyArrayStorage);
      type metadata accessor for TrackingAvoidanceError(0);
      v97 = v202;
      v266 = 11;
      v203 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      v99 = swift_initStackObject(v203, &v262);
      *(_OWORD *)(v99 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v99 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(v99 + 40) = v204;
      *(_QWORD *)(v99 + 72) = &type metadata for String;
      v101 = 0xD00000000000001CLL;
      v102 = "Locations in blocked regions";
LABEL_70:
      *(_QWORD *)(v99 + 48) = v101;
      *(_QWORD *)(v99 + 56) = (unint64_t)(v102 - 32) | 0x8000000000000000;
      v205 = sub_1006B8B10(v99);
      v206 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
      _BridgedStoredNSError.init(_:userInfo:)(v263, &v266, v205, v97, v206);
      v207 = (void *)v263[0];
      v208 = (void *)_convertErrorToNSError(_:)(v263[0]);
      v221 = v257;
      ((void (**)(_QWORD, void *))v257)[2](v257, v208);

      goto LABEL_74;
    }
    if (v37 == 1)
      goto LABEL_22;
    v256 = (char *)objc_opt_self(FMSystemInfo);
    v36 = 5;
    v230 = 0x8000000100EDB150;
    v231 = 0xD000000000000013;
    v117 = &unk_1010F4000;
    while (1)
    {
      v118 = v117;
      v119 = (_QWORD)v258
           ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v36 - 4, a2)
           : (char *)*(id *)(a2 + 8 * v36);
      v35 = v119;
      v120 = v36 - 3;
      if (__OFADD__(v36 - 4, 1))
        break;
      v121 = objc_msgSend(v256, "sharedInstance", v230, v231);
      v122 = objc_msgSend(v121, "isInternalBuild");

      if (v122)
      {
        v123 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
        v124 = String._bridgeToObjectiveC()();
        v125 = objc_msgSend(v123, "BOOLForKey:", v124);

        if (v125)
        {
          v198 = static os_log_type_t.default.getter(v126);
          v199 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
          v200 = (void *)static OS_os_log.default.getter(v199);
          os_log(_:dso:log:_:_:)(v198, &_mh_execute_header, v200, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);
          swift_bridgeObjectRelease_n(a2, 2);

          goto LABEL_67;
        }
      }
      objc_msgSend(v35, "latitude");
      v128 = v127;
      objc_msgSend(v35, "longitude");
      v130 = v129;
      if (qword_1010E9AD8 != -1)
        swift_once(&qword_1010E9AD8, sub_100264FD8);
      v131 = objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v128, v130);
      v51 = v259;
      v117 = v118;
      if (v131)
      {
        v132 = (void *)v118[214];
        if (v132)
        {
          v133 = (id)v118[214];
        }
        else
        {
          v134 = (void *)sub_100265274();
          v135 = (void *)v118[214];
          v118[214] = v134;
          v133 = v134;

          v132 = 0;
        }
        v136 = v132;
        v137 = objc_msgSend(v133, "containsCoordinate:", v128, v130);

        v117 = v118;
        if (v137)
          goto LABEL_17;
      }
      else
      {

      }
      ++v36;
      if (v120 == v37)
        goto LABEL_22;
    }
    __break(1u);
LABEL_79:
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  }
  if (a2 < 0)
    v229 = a2;
  else
    v229 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v37 = _CocoaArrayWrapper.endIndex.getter(v229);
  if (v37)
    goto LABEL_14;
LABEL_22:
  swift_bridgeObjectRelease_n(a2, 2);
  v103 = objc_msgSend(v51, "trackingIdentifier");
  v104 = objc_msgSend(v103, "data");

  v105 = (char *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v104);
  *(_QWORD *)&v258 = v106;

  if (qword_1010E9CE8 != -1)
    swift_once(&qword_1010E9CE8, sub_100563934);
  v107 = type metadata accessor for Logger(0);
  v108 = (char *)sub_10001A9E8(v107, (uint64_t)qword_1010FF230);
  v109 = v258;
  v110 = (unint64_t)v258 >> 62;
  sub_10001BBBC((uint64_t)v105, v258);
  v111 = sub_10001BBBC((uint64_t)v105, v109);
  v112 = Logger.logObject.getter(v111);
  v113 = static os_log_type_t.default.getter(v112);
  v114 = os_log_type_enabled(v112, v113);
  v256 = v108;
  if (v114)
  {
    v115 = (_DWORD *)swift_slowAlloc(22, -1);
    v231 = swift_slowAlloc(32, -1);
    v263[0] = v231;
    *v115 = 134218242;
    __asm { BR              X11 }
  }
  v116 = v258;
  sub_10001BC14((uint64_t)v105, v258);
  sub_10001BC14((uint64_t)v105, v116);

  v138 = v259;
  v139 = objc_msgSend(v259, "trackingIdentifier");
  v140 = objc_msgSend(v139, "isPosh");

  v141 = objc_msgSend(v138, "trackingIdentifier");
  v142 = objc_msgSend(v141, "networkID");

  v143 = objc_msgSend(v138, "trackingIdentifier");
  v144 = objc_msgSend(v143, "status");

  if (v142 == 1)
    v146 = 5;
  else
    v146 = 6;
  if (v140)
    v147 = v146;
  else
    v147 = (v144 >> 4) & 3;
  v148 = Logger.logObject.getter(v145);
  v149 = static os_log_type_t.default.getter(v148);
  if (os_log_type_enabled(v148, v149))
  {
    v150 = (uint8_t *)swift_slowAlloc(12, -1);
    v151 = swift_slowAlloc(32, -1);
    v231 = v110;
    v110 = v151;
    v263[0] = v151;
    *(_DWORD *)v150 = 136446210;
    v152 = sub_1005632A4(v147);
    v266 = sub_100016940(v152, v153, v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, &v267, v150 + 4, v150 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v148, v149, "UnauthorizedTrackingAdvertisementType: %{public}s", v150, 0xCu);
    swift_arrayDestroy(v110, 1, (char *)&type metadata for Any + 8);
    v154 = v110;
    LODWORD(v110) = v231;
    swift_slowDealloc(v154, -1, -1);
    swift_slowDealloc(v150, -1, -1);
  }

  if (v147 == 4)
  {
    v155 = v259;
    v156 = Logger.logObject.getter(v155);
    v157 = static os_log_type_t.error.getter(v156);
    if (os_log_type_enabled(v156, v157))
    {
      v158 = swift_slowAlloc(14, -1);
      *(_DWORD *)v158 = 67109632;
      v159 = -[NSObject trackingIdentifier](v155, "trackingIdentifier");
      v160 = objc_msgSend(v159, "isPosh");

      LODWORD(v263[0]) = v160;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v263, (char *)v263 + 4, v158 + 4, v158 + 8);

      *(_WORD *)(v158 + 8) = 256;
      v161 = -[NSObject trackingIdentifier](v155, "trackingIdentifier");
      v162 = objc_msgSend(v161, "networkID");
      v256 = v105;
      v163 = v162;

      LOBYTE(v263[0]) = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v263, (char *)v263 + 1, v158 + 10, v158 + 11);

      *(_WORD *)(v158 + 11) = 256;
      v164 = -[NSObject trackingIdentifier](v155, "trackingIdentifier");
      v165 = objc_msgSend(v164, "status");

      v105 = v256;
      LOBYTE(v263[0]) = v165;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v263, (char *)v263 + 1, v158 + 13, v158 + 14);

      _os_log_impl((void *)&_mh_execute_header, v156, v157, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v158, 0xEu);
      swift_slowDealloc(v158, -1, -1);
    }
    else
    {

      v156 = v155;
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v182 = v181;
    v266 = 6;
    v183 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v184 = swift_initStackObject(v183, v265);
    *(_OWORD *)(v184 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v184 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v184 + 40) = v185;
    *(_QWORD *)(v184 + 72) = &type metadata for String;
    *(_QWORD *)(v184 + 48) = 0xD00000000000001ALL;
    *(_QWORD *)(v184 + 56) = 0x8000000100EDB020;
    v217 = sub_1006B8B10(v184);
    v218 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v263, &v266, v217, v182, v218);
    v219 = (void *)v263[0];
    v220 = (void *)_convertErrorToNSError(_:)(v263[0]);
    v221 = v257;
    ((void (**)(_QWORD, void *))v257)[2](v257, v220);

    v222 = (uint64_t)v105;
    v223 = v258;
LABEL_73:
    sub_10001BC14(v222, v223);

LABEL_74:
    _Block_release(v221);
    _Block_release(v221);
    v84 = (void (**)(id, void *))v221;
    goto LABEL_75;
  }
  if (v147 != 6)
  {
    if (v147 == 5)
      __asm { BR              X10 }
    __asm { BR              X10 }
  }
  v166 = objc_msgSend(v259, "trackingIdentifier");
  v167 = objc_msgSend(v166, "address");

  v168 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v167);
  v170 = v169;

  sub_10001BBBC(v168, v170);
  v171 = (uint64_t)v248;
  MACAddress.init(data:type:)(v168);
  v172 = v250;
  v173 = v252;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v250 + 48))(v171, 1, v252) == 1)
  {
    sub_100004048(v171, (uint64_t *)&unk_1010F9890);
    sub_10001BBBC(v168, v170);
    v174 = sub_10001BBBC(v168, v170);
    v175 = Logger.logObject.getter(v174);
    v176 = static os_log_type_t.error.getter(v175);
    if (os_log_type_enabled(v175, v176))
    {
      v177 = (uint8_t *)swift_slowAlloc(12, -1);
      v259 = (void *)swift_slowAlloc(32, -1);
      v263[0] = (uint64_t)v259;
      *(_DWORD *)v177 = 136446210;
      v178 = Data.hexString.getter(v168, v170);
      v256 = v105;
      v266 = sub_100016940(v178, v179, v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, &v267, v177 + 4, v177 + 12);
      v105 = v256;
      swift_bridgeObjectRelease();
      sub_10001BC14(v168, v170);
      sub_10001BC14(v168, v170);
      _os_log_impl((void *)&_mh_execute_header, v175, v176, "Invalid MAC address %{public}s", v177, 0xCu);
      v180 = v259;
      swift_arrayDestroy(v259, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v180, -1, -1);
      swift_slowDealloc(v177, -1, -1);
    }
    else
    {
      sub_10001BC14(v168, v170);
      sub_10001BC14(v168, v170);
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v210 = v209;
    v266 = 3;
    v211 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    v212 = swift_initStackObject(v211, &v264);
    *(_OWORD *)(v212 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v212 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(_QWORD *)(v212 + 40) = v213;
    *(_QWORD *)(v212 + 72) = &type metadata for String;
    *(_QWORD *)(v212 + 48) = 0xD00000000000001FLL;
    *(_QWORD *)(v212 + 56) = 0x8000000100EDB040;
    v214 = sub_1006B8B10(v212);
    v215 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
    _BridgedStoredNSError.init(_:userInfo:)(v263, &v266, v214, v210, v215);
    v219 = (void *)v263[0];
    v216 = (void *)_convertErrorToNSError(_:)(v263[0]);
    v221 = v257;
    ((void (**)(_QWORD, void *))v257)[2](v257, v216);

    sub_10001BC14((uint64_t)v105, v258);
    v222 = v168;
    v223 = v170;
    goto LABEL_73;
  }
  v186 = v249;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 32))(v249, v171, v173);
  v187 = v242;
  v188 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v172 + 16))(v242, v186, v173);
  v189 = Logger.logObject.getter(v188);
  v190 = static os_log_type_t.default.getter(v189);
  if (os_log_type_enabled(v189, v190))
  {
    v191 = (uint8_t *)swift_slowAlloc(12, -1);
    v255 = swift_slowAlloc(32, -1);
    v263[0] = v255;
    v254 = v191;
    *(_DWORD *)v191 = 136446210;
    v256 = v105;
    v192 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v193 = dispatch thunk of CustomStringConvertible.description.getter(v252, v192);
    v266 = sub_100016940(v193, v194, v263);
    v105 = v256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, &v267, v191 + 4, v191 + 12);
    swift_bridgeObjectRelease();
    v195 = *(void (**)(char *, uint64_t))(v172 + 8);
    v173 = v252;
    v195(v187, v252);
    v196 = v254;
    _os_log_impl((void *)&_mh_execute_header, v189, v190, "Posh address: %{public}s", v254, 0xCu);
    v197 = v255;
    swift_arrayDestroy(v255, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v197, -1, -1);
    swift_slowDealloc(v196, -1, -1);
  }
  else
  {
    v195 = *(void (**)(char *, uint64_t))(v172 + 8);
    v195(v187, v173);
  }

  v224 = type metadata accessor for UUID(0);
  v225 = (uint64_t)v247;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v224 - 8) + 56))(v247, 1, 1, v224);
  v226 = (void (**)(id, void *))v257;
  _Block_copy(v257);
  v227 = v249;
  sub_100587264(v249, v225, v259, 0, 0, 0, v251, v226);
  _Block_release(v226);
  sub_10001BC14(v168, v170);
  sub_10001BC14((uint64_t)v105, v258);
  sub_100004048(v225, &qword_1010ED860);
  v195((char *)v227, v173);
  _Block_release(v226);
  _Block_release(v226);
  v84 = v226;
LABEL_75:
  _Block_release(v84);
}

unint64_t sub_10058A148()
{
  unint64_t result;

  result = qword_1010FF3E8;
  if (!qword_1010FF3E8)
  {
    result = swift_getWitnessTable(byte_100E438C0, &type metadata for UnauthorizedTrackingAdvertisementType);
    atomic_store(result, (unint64_t *)&qword_1010FF3E8);
  }
  return result;
}

uint64_t sub_10058A18C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10058A1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10056F6E4(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

unint64_t sub_10058A1B8()
{
  unint64_t result;

  result = qword_1010FF430;
  if (!qword_1010FF430)
  {
    result = swift_getWitnessTable(byte_100E43880, &type metadata for UTError);
    atomic_store(result, (unint64_t *)&qword_1010FF430);
  }
  return result;
}

uint64_t sub_10058A200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10058A250@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_10057177C(a1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 32), a2);
}

uint64_t sub_10058A25C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1005719D4(a1, v2, a2);
}

void sub_10058A26C()
{
  uint64_t v0;

  sub_1007AF10C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10058A284(uint64_t a1)
{
  uint64_t v1;

  return sub_10056C5C8(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_10058A290(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v10 = *v9;
  v11 = v9[1];
  v12 = (_QWORD *)swift_task_alloc(dword_1010FF4B4);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100004A74;
  return sub_10056B314(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_10058A33C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10058A368()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10058A394(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100576F70(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10058A3B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v33 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v33 + 32) & ~v33;
  v29 = (((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v4 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + v29 + 8) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v31 = v6;
  v32 = *(unsigned __int8 *)(v9 + 80);
  v10 = (v8 + v32 + v7) & ~v32;
  v30 = (*(_QWORD *)(v9 + 64) + v6 + v10) & ~v6;
  v11 = v30 + v8;
  v12 = v1;
  v13 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  v28 = v2;
  v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v14(v0 + v3, v12);
  swift_release();
  swift_release();
  v15 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v15(v0 + v7, v4);
  v16 = v0 + v10;
  v17 = (int *)type metadata accessor for SharedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v17 - 1) + 48))(v0 + v10, 1, v17))
  {
    v18 = v13;
    sub_10001BC14(*(_QWORD *)v16, *(_QWORD *)(v16 + 8));
    v14(v16 + v17[5], v12);
    v14(v16 + v17[6], v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v16 + v17[18];
    v20 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    v21 = v16 + v17[19];
    v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (!v22(v21, 1, v12))
      v14(v21, v12);
    v23 = v16 + v17[20];
    v24 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    v13 = v18;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24))
    {
      v25 = v23 + *(int *)(v24 + 20);
      if (!v22(v25, 1, v12))
        v14(v25, v12);
    }
  }
  v15(v0 + v30, v4);
  swift_bridgeObjectRelease();
  v26 = *(_QWORD *)(v0 + v13 + 8);
  if (((v26 >> 60) | 4) != 0xF)
    sub_10001BC14(*(_QWORD *)(v0 + v13), v26);
  swift_release();
  return swift_deallocObject(v0, ((((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v33 | v31 | v32 | 7);
}

uint64_t sub_10058A6BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + v6 + 8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v12 = (v10 + *(unsigned __int8 *)(v11 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (*(_QWORD *)(v11 + 64) + v8 + v12) & ~v8;
  v14 = (v13 + v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_100566DE4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v6), v1 + v9, v1 + v12, v1 + v13, *(_QWORD *)(v1 + ((v13 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v1 + ((v13 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + v14), *(_QWORD *)(v1 + v14 + 8), *(_QWORD *)(v1 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10058A7F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8) + 80);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = v0 + ((v2 + 17) & ~v2);
  v5 = swift_task_alloc(dword_1010FF564);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_100004A74;
  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 56) = v3;
  return swift_task_switch(sub_10056A1E0, 0, 0);
}

uint64_t sub_10058A878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v34 = *(unsigned __int8 *)(v2 + 80);
  v3 = (*(_QWORD *)(v2 + 64) + ((v34 + 24) & ~v34) + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 8 + v3) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v32 = *(unsigned __int8 *)(v9 + 80);
  v33 = v6;
  v10 = (v7 + v8 + v32) & ~v32;
  v29 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v6 + 8 + v29) & ~v6;
  v12 = v1;
  v30 = v11;
  v13 = v11 + v8;
  v14 = v4;
  v31 = (((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v28 = v2;
  v15 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v15(v0 + ((v34 + 24) & ~v34), v12);
  swift_release();
  v16 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v16(v0 + v7, v4);
  v17 = v0 + v10;
  v18 = (int *)type metadata accessor for SharedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v18 - 1) + 48))(v0 + v10, 1, v18))
  {
    sub_10001BC14(*(_QWORD *)v17, *(_QWORD *)(v17 + 8));
    v15(v17 + v18[5], v12);
    v15(v17 + v18[6], v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v17 + v18[18];
    v20 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
    v21 = v17 + v18[19];
    v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
    if (!v22(v21, 1, v12))
      v15(v21, v12);
    v23 = v17 + v18[20];
    v24 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24))
    {
      v25 = v23 + *(int *)(v24 + 20);
      if (!v22(v25, 1, v12))
        v15(v25, v12);
    }
  }

  v16(v0 + v30, v14);
  swift_bridgeObjectRelease();
  swift_release();
  v26 = *(_QWORD *)(v0 + v31 + 8);
  if (((v26 >> 60) | 4) != 0xF)
    sub_10001BC14(*(_QWORD *)(v0 + v31), v26);
  swift_release();
  return swift_deallocObject(v0, ((v31 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v34 | v33 | v32 | 7);
}

uint64_t sub_10058AB8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 8 + v5) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v7 + 8 + v12) & ~v7;
  v14 = (v13 + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_10056881C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), v1 + v8, v1 + v11, *(void **)(v1 + v12), v1 + v13, *(_QWORD *)(v1 + ((v13 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_BYTE *)(v1 + ((v13 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + v14), *(_QWORD *)(v1 + v15), *(_QWORD *)(v1 + v15 + 8), *(_QWORD *)(v1 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10058ACC8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v46 = *(_QWORD *)(v3 + 64);
  v47 = (v4 + 17) & ~v4;
  v5 = v0 + v47;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9 = v5 + v2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
    v8(v9, v6);
  v10 = v5 + v2[7];
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v12 = v5 + v2[10];
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v16 = v5 + v2[11];
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v44(v16, 1, v13))
    v15(v16, v13);
  v45 = v15;
  swift_bridgeObjectRelease();
  v17 = v5 + v2[14];
  v18 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
  {
    v8(v17, v6);
    sub_10001BC14(*(_QWORD *)(v17 + *(int *)(v18 + 20)), *(_QWORD *)(v17 + *(int *)(v18 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = v5 + v2[15];
  v20 = (int *)type metadata accessor for AccessoryProductInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v20 - 1) + 48))(v19, 1, v20))
  {
    v21 = v19 + v20[5];
    v22 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v19 + v20[16];
    v24 = type metadata accessor for URL(0);
    v43 = *(_QWORD *)(v24 - 8);
    v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    if (!v25(v23, 1, v24))
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v23, v24);
    v42 = v4;
    v26 = v19 + v20[17];
    if (!v25(v26, 1, v24))
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v24);
    swift_bridgeObjectRelease();
    v27 = v19 + v20[20];
    v28 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28))
    {
      v41 = v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v27 + *(int *)(v28 + 40);
      if (!v25(v29, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v29, v24);
      v30 = v27 + *(int *)(v28 + 44);
      if (!v25(v30, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v1 = v41;
    }
    swift_bridgeObjectRelease();
    v31 = (uint64_t *)(v19 + v20[23]);
    v32 = v31[1];
    v4 = v42;
    if (v32 >> 60 != 15)
      sub_10001BC14(*v31, v32);
    v33 = (uint64_t *)(v19 + v20[24]);
    v34 = v33[1];
    if (v34 >> 60 != 15)
      sub_10001BC14(*v33, v34);
    v35 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v35(v19 + v20[25], v24);
    v35(v19 + v20[26], v24);
    v35(v19 + v20[27], v24);
    v35(v19 + v20[28], v24);
    v35(v19 + v20[29], v24);
    v35(v19 + v20[30], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35(v19 + v20[37], v24);
    v35(v19 + v20[38], v24);
    v35(v19 + v20[39], v24);
    v35(v19 + v20[40], v24);
    v35(v19 + v20[41], v24);
    v35(v19 + v20[42], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v36 = v5 + v2[18];
  if (!v44(v36, 1, v13))
    v45(v36, v13);
  v37 = v5 + v2[19];
  if (!v44(v37, 1, v13))
    v45(v37, v13);
  v38 = (uint64_t *)(v5 + v2[20]);
  v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF)
    sub_10001BC14(*v38, v39);
  return swift_deallocObject(v1, v47 + v46, v4 | 7);
}

uint64_t sub_10058B2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8) + 80);
  v3 = *(_BYTE *)(v0 + 16);
  v4 = v0 + ((v2 + 17) & ~v2);
  v5 = swift_task_alloc(dword_1010FF58C);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_100004C28;
  *(_QWORD *)(v5 + 16) = v4;
  *(_BYTE *)(v5 + 56) = v3;
  return swift_task_switch(sub_100569938, 0, 0);
}

void sub_10058B328()
{
  uint64_t v0;

  sub_100569B94(*(_BYTE *)(v0 + 16));
}

void sub_10058B334()
{
  uint64_t v0;

  sub_10056A374(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10058B340(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100573EF8(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_10058B348(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100563BB4(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t sub_10058B35C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10058B394()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10058B3C0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(v1 + 16))(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10058B3F8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v46 = *(_QWORD *)(v3 + 64);
  v47 = (v4 + 16) & ~v4;
  v5 = v0 + v47;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v9 = v5 + v2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
    v8(v9, v6);
  v10 = v5 + v2[7];
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v12 = v5 + v2[10];
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  v16 = v5 + v2[11];
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v44(v16, 1, v13))
    v15(v16, v13);
  v45 = v15;
  swift_bridgeObjectRelease();
  v17 = v5 + v2[14];
  v18 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v17, 1, v18))
  {
    v8(v17, v6);
    sub_10001BC14(*(_QWORD *)(v17 + *(int *)(v18 + 20)), *(_QWORD *)(v17 + *(int *)(v18 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v19 = v5 + v2[15];
  v20 = (int *)type metadata accessor for AccessoryProductInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v20 - 1) + 48))(v19, 1, v20))
  {
    v21 = v19 + v20[5];
    v22 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v19 + v20[16];
    v24 = type metadata accessor for URL(0);
    v43 = *(_QWORD *)(v24 - 8);
    v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    if (!v25(v23, 1, v24))
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v23, v24);
    v42 = v4;
    v26 = v19 + v20[17];
    if (!v25(v26, 1, v24))
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v24);
    swift_bridgeObjectRelease();
    v27 = v19 + v20[20];
    v28 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28))
    {
      v41 = v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = v27 + *(int *)(v28 + 40);
      if (!v25(v29, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v29, v24);
      v30 = v27 + *(int *)(v28 + 44);
      if (!v25(v30, 1, v24))
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v1 = v41;
    }
    swift_bridgeObjectRelease();
    v31 = (uint64_t *)(v19 + v20[23]);
    v32 = v31[1];
    v4 = v42;
    if (v32 >> 60 != 15)
      sub_10001BC14(*v31, v32);
    v33 = (uint64_t *)(v19 + v20[24]);
    v34 = v33[1];
    if (v34 >> 60 != 15)
      sub_10001BC14(*v33, v34);
    v35 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v35(v19 + v20[25], v24);
    v35(v19 + v20[26], v24);
    v35(v19 + v20[27], v24);
    v35(v19 + v20[28], v24);
    v35(v19 + v20[29], v24);
    v35(v19 + v20[30], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35(v19 + v20[37], v24);
    v35(v19 + v20[38], v24);
    v35(v19 + v20[39], v24);
    v35(v19 + v20[40], v24);
    v35(v19 + v20[41], v24);
    v35(v19 + v20[42], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v36 = v5 + v2[18];
  if (!v44(v36, 1, v13))
    v45(v36, v13);
  v37 = v5 + v2[19];
  if (!v44(v37, 1, v13))
    v45(v37, v13);
  v38 = (uint64_t *)(v5 + v2[20]);
  v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF)
    sub_10001BC14(*v38, v39);
  swift_release();
  swift_release();
  return swift_deallocObject(v1, ((((((v46 + v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v4 | 7);
}

void sub_10058BA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1005707A8(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(void (**)(char *))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10058BA80()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10058BAB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v4 + v7 + 1) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v10 = v0 + v8;
  v11 = (int *)type metadata accessor for SharedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v11 - 1) + 48))(v0 + v8, 1, v11))
  {
    v24 = v9;
    sub_10001BC14(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    v12 = v10 + v11[5];
    v13 = type metadata accessor for UUID(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v15(v12, v13);
    v15(v10 + v11[6], v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v10 + v11[18];
    v17 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
    v18 = v10 + v11[19];
    v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    if (!v19(v18, 1, v13))
      v15(v18, v13);
    v20 = v10 + v11[20];
    v21 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    v9 = v24;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
    {
      v22 = v20 + *(int *)(v21 + 20);
      if (!v19(v22, 1, v13))
        v15(v22, v13);
    }
  }
  return swift_deallocObject(v0, v9 + v8 + 1, v3 | v7 | 7);
}

uint64_t sub_10058BCD4(void (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  Swift::UInt8 v14;

  v5 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v2 + 16);
  v11 = v2 + v6;
  v12 = v2 + v9;
  v13 = *(_BYTE *)(v2 + v9 + *(_QWORD *)(v8 + 64));
  v14 = *(_BYTE *)(v2 + v7);
  swift_retain();
  sub_100585558(v11, v14, v12, v13, v10, a1, a2);
  return swift_release();
}

uint64_t sub_10058BD98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_10058BDC8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v44 = *(_QWORD *)(v2 + 64);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v5 = v0 + v4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v4, v6);
  v9 = v0 + v4 + v1[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6))
    v8(v9, v6);
  v10 = v5 + v1[7];
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  v12 = v5 + v1[10];
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v45 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v45(v12, v13);
  v15 = v5 + v1[11];
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v43(v15, 1, v13))
    v45(v15, v13);
  swift_bridgeObjectRelease();
  v16 = v5 + v1[14];
  v17 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v8(v16, v6);
    sub_10001BC14(*(_QWORD *)(v16 + *(int *)(v17 + 20)), *(_QWORD *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v18 = v5 + v1[15];
  v19 = (int *)type metadata accessor for AccessoryProductInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v19 - 1) + 48))(v18, 1, v19))
  {
    v40 = (v3 + 80) & ~v3;
    v20 = v18 + v19[5];
    v21 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v18 + v19[16];
    v23 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v23 - 8);
    v24 = *(unsigned int (**)(void))(v42 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v22, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v22, v23);
    v41 = v3;
    v25 = v18 + v19[17];
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v24)(v25, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v23);
    swift_bridgeObjectRelease();
    v26 = v18 + v19[20];
    v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = v26 + *(int *)(v27 + 40);
      if (!v24())
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v23);
      v39 = v26 + *(int *)(v27 + 44);
      if (!v24())
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v28 = (uint64_t *)(v18 + v19[23]);
    v29 = v28[1];
    v3 = v41;
    if (v29 >> 60 != 15)
      sub_10001BC14(*v28, v29);
    v30 = (uint64_t *)(v18 + v19[24]);
    v31 = v30[1];
    v4 = v40;
    if (v31 >> 60 != 15)
      sub_10001BC14(*v30, v31);
    v32 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v32(v18 + v19[25], v23);
    v32(v18 + v19[26], v23);
    v32(v18 + v19[27], v23);
    v32(v18 + v19[28], v23);
    v32(v18 + v19[29], v23);
    v32(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32(v18 + v19[37], v23);
    v32(v18 + v19[38], v23);
    v32(v18 + v19[39], v23);
    v32(v18 + v19[40], v23);
    v32(v18 + v19[41], v23);
    v32(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v33 = v5 + v1[18];
  if (!v43(v33, 1, v13))
    v45(v33, v13);
  v34 = v5 + v1[19];
  if (!v43(v34, 1, v13))
    v45(v34, v13);
  v35 = (uint64_t *)(v5 + v1[20]);
  v36 = v35[1];
  if (((v36 >> 60) | 4) != 0xF)
    sub_10001BC14(*v35, v36);
  return swift_deallocObject(v0, v4 + v44, v3 | 7);
}

void sub_10058C3D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WildModeAssociationRecord(0) - 8) + 80);
  sub_1005723B0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(void (**)(uint64_t, void *))(v1 + 64), *(_QWORD *)(v1 + 72), v1 + ((v3 + 80) & ~v3));
}

uint64_t sub_10058C434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 9, v5);
}

uint64_t sub_10058C4A8(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100D093F0(a1, a2, v2 + v6, *(_QWORD *)v7, *(unsigned __int8 *)(v7 + 8));
}

uint64_t sub_10058C514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t storeEnumTagSinglePayload for UTError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10058C5F4 + 4 * byte_100E436EF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10058C628 + 4 * byte_100E436EA[v4]))();
}

uint64_t sub_10058C628(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10058C630(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10058C638);
  return result;
}

uint64_t sub_10058C644(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10058C64CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10058C650(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10058C658(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTError()
{
  return &type metadata for UTError;
}

uint64_t getEnumTagSinglePayload for UnauthorizedTrackingAdvertisementType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
  {
    v6 = *a1;
    if (v6 >= 4)
      v7 = v6 - 3;
    else
      v7 = 0;
    if (v7 >= 4)
      return v7 - 3;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10058C6C4 + 4 * byte_100E436F4[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for UnauthorizedTrackingAdvertisementType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFA)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10058C770 + 4 * byte_100E436FE[v5]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10058C7A4 + 4 * byte_100E436F9[v5]))();
}

uint64_t sub_10058C7A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10058C7AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10058C7B4);
  return result;
}

uint64_t sub_10058C7C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10058C7C8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10058C7CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10058C7D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10058C7E0(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

_BYTE *sub_10058C7F4(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 3;
  return result;
}

ValueMetadata *type metadata accessor for UnauthorizedTrackingAdvertisementType()
{
  return &type metadata for UnauthorizedTrackingAdvertisementType;
}

unint64_t sub_10058C818()
{
  unint64_t result;

  result = qword_1010FF5C0;
  if (!qword_1010FF5C0)
  {
    result = swift_getWitnessTable(aA_31, &type metadata for UTError);
    atomic_store(result, (unint64_t *)&qword_1010FF5C0);
  }
  return result;
}

void sub_10058C8C0()
{
  sub_10058A26C();
}

void sub_10058C8DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD v19[4];

  v2 = sub_10001A9A8(&qword_1010FF738);
  __chkstk_darwin(v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[3] = _swiftEmptyArrayStorage;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v9)
      goto LABEL_23;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    ++v10;
    if (!v17)
    {
      v10 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_23;
      v17 = *(_QWORD *)(v5 + 8 * v10);
      if (!v17)
      {
        v10 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_23;
        v17 = *(_QWORD *)(v5 + 8 * v10);
        if (!v17)
        {
          v10 = v16 + 3;
          if (v16 + 3 >= v9)
            goto LABEL_23;
          v17 = *(_QWORD *)(v5 + 8 * v10);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v17 - 1) & v17;
    v12 = __clz(__rbit64(v17)) + (v10 << 6);
LABEL_5:
    v13 = *(_QWORD *)(a1 + 48);
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v4, v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v12, v14);
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    *(_QWORD *)&v4[*(int *)(v2 + 48)] = v15;
    swift_bridgeObjectRetain_n(v15, 2);
    sub_100590818((uint64_t)v4);
    sub_1003046D4(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v9)
  {
LABEL_23:
    swift_release();
    return;
  }
  v17 = *(_QWORD *)(v5 + 8 * v18);
  if (v17)
  {
    v10 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v10 >= v9)
      goto LABEL_23;
    v17 = *(_QWORD *)(v5 + 8 * v10);
    ++v18;
    if (v17)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10058CADC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9CF8 != -1)
    swift_once(&qword_1010E9CF8, sub_10058CBB4);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7168);
  URL.appendingPathComponent(_:)(0xD000000000000012, 0x8000000100EDBAC0);
  v3 = type metadata accessor for BeaconObservationStore(0);
  v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = sub_10058D2D4((uint64_t)v2);
  qword_1011B7160 = v4;
  return result;
}

uint64_t sub_10058CBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7168);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7168);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016, 0x8000000100E438F0, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10058CC84@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL, v5);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter(v9);
  v11 = v10;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  LOBYTE(v11) = objc_msgSend(v9, "fileExistsAtPath:", v12);

  if ((v11 & 1) != 0)
  {
    v39 = a1;
    v13 = Data.init(contentsOf:options:)(v8, 0);
    if (v2)
    {
      v37 = a2;
      v38 = 0;
      v36 = static os_log_type_t.error.getter(v13);
      if (qword_1010E9D00 != -1)
        swift_once(&qword_1010E9D00, sub_10058FCCC);
      v35 = qword_1011B7180;
      v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v22 = swift_allocObject(v21, 112, 7);
      *(_OWORD *)(v22 + 16) = xmmword_100E22B10;
      v23 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v5, v23);
      v26 = v25;
      *(_QWORD *)(v22 + 56) = &type metadata for String;
      v27 = sub_10001AA00();
      *(_QWORD *)(v22 + 64) = v27;
      *(_QWORD *)(v22 + 32) = v24;
      *(_QWORD *)(v22 + 40) = v26;
      v40 = v2;
      swift_errorRetain(v2);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v29 = String.init<A>(describing:)(&v40, v28);
      *(_QWORD *)(v22 + 96) = &type metadata for String;
      *(_QWORD *)(v22 + 104) = v27;
      *(_QWORD *)(v22 + 72) = v29;
      *(_QWORD *)(v22 + 80) = v30;
      os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v35, "Error reading observations, url %@, error, %@", 45, 2, v22);
      swift_errorRelease(v2);
      swift_bridgeObjectRelease(v22);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v33 = &_swiftEmptyDictionarySingleton;
      a2 = v37;
    }
    else
    {
      v15 = v13;
      v16 = v14;
      v17 = type metadata accessor for PropertyListDecoder(0);
      swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
      v18 = PropertyListDecoder.init()();
      v19 = sub_10001A9A8(&qword_1010F7770);
      v20 = sub_1005901AC();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v19, v15, v16, v19, v20);
      v38 = 0;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_release(v18);
      sub_10001BC14(v15, v16);
      v33 = v40;
    }
    v31 = *(_QWORD *)(v39 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
    *(_QWORD *)(v39 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = v33;
    swift_bridgeObjectRetain(v33);
    result = swift_bridgeObjectRelease(v31);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v33 = &_swiftEmptyDictionarySingleton;
  }
  *a2 = v33;
  return result;
}

uint64_t sub_10058CFD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;

  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v38 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  sub_10000F4A0(0, (unint64_t *)&qword_1010F4AC0, NSFileManager_ptr);
  v14 = a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v15 = v37(v11, a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL, v5);
  URL.deletingLastPathComponent()(v15);
  v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v13, 0);
  v16(v13, v5);
  v17 = type metadata accessor for PropertyListEncoder(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = PropertyListEncoder.init()(v18);
  v39 = a2;
  v20 = sub_10001A9A8(&qword_1010F7770);
  v21 = sub_100590058();
  v22 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v39, v20, v21);
  if (v2)
  {
    v24 = swift_release(v19);
    v28 = static os_log_type_t.error.getter(v24);
    if (qword_1010E9D00 != -1)
      swift_once(&qword_1010E9D00, sub_10058FCCC);
    v29 = qword_1011B7180;
    v30 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v31 = swift_allocObject(v30, 72, 7);
    *(_OWORD *)(v31 + 16) = xmmword_100E22B00;
    v39 = v2;
    swift_errorRetain(v2);
    v32 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v33 = String.init<A>(describing:)(&v39, v32);
    v35 = v34;
    *(_QWORD *)(v31 + 56) = &type metadata for String;
    *(_QWORD *)(v31 + 64) = sub_10001AA00();
    *(_QWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 40) = v35;
    os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Error saving observations: %@", 29, 2, v31);
    swift_bridgeObjectRelease(v31);
    return swift_errorRelease(v2);
  }
  else
  {
    v25 = v22;
    v26 = v23;
    v27 = v38;
    v37(v38, v14, v5);
    Data.write(to:excludeFromBackup:options:)(v27, 1, 0, 1, v25, v26);
    v16(v27, v5);
    sub_10001BC14(v25, v26);
    return swift_release(v19);
  }
}

uint64_t sub_10058D2D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  uint64_t (*v55)(char *);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v57 = a1;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v12;
  v59 = v1;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription) = 0;
  PressuredExitTransactionManager.init()(v10);
  v56 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionQueue;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v54 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v55 = *(uint64_t (**)(char *))(v9 + 104);
  v13 = v55(v12);
  v14 = v7;
  static DispatchQoS.unspecified.getter(v13);
  v60 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v58 = v15;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v18 = v4;
  v19 = v16;
  v50 = v16;
  v51 = v17;
  v52 = v2;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v16, v17, v2, v15);
  v20 = v18;
  v21 = v53;
  v22 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000041, 0x8000000100EDBAE0, v14, v18, v53, 0);
  v23 = v59;
  v24 = v55;
  *(_QWORD *)(v59 + v56) = v22;
  *(_QWORD *)(v23 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions) = _swiftEmptyArrayStorage;
  v56 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionPublishQueue;
  v25 = v54;
  v26 = ((uint64_t (*)(char *, _QWORD, uint64_t))v24)(v21, v54, v8);
  static DispatchQoS.unspecified.getter(v26);
  v60 = _swiftEmptyArrayStorage;
  v27 = v19;
  v28 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v27, v17, v52, v58);
  v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000049, 0x8000000100EDBB30, v14, v18, v21, 0);
  v30 = v59;
  *(_QWORD *)(v59 + v56) = v29;
  v56 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
  v31 = ((uint64_t (*)(char *, uint64_t, uint64_t))v24)(v21, v25, v8);
  static DispatchQoS.unspecified.getter(v31);
  v60 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v50, v51, v28, v58);
  v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000050, 0x8000000100EDBB80, v14, v20, v21, 0);
  *(_QWORD *)(v30 + v56) = v32;
  *(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = 0;
  v33 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled;
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v34 = *(_QWORD *)(qword_1011B8588 + 48);
  v35 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v60, v35);
  swift_release(v34);
  *(_BYTE *)(v30 + v33) = (_BYTE)v60;
  v36 = v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  v37 = type metadata accessor for URL(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = v57;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v36, v57, v37);
  v40 = *(_QWORD *)(qword_1011B8588 + 48);
  v41 = swift_retain();
  v42 = AnyCurrentValuePublisher.publisher.getter(v41);
  swift_release(v40);
  v60 = (_QWORD *)v42;
  v43 = swift_allocObject(&unk_10107F6F0, 24, 7);
  swift_weakInit(v43 + 16, v30);
  v44 = sub_10001A9A8(&qword_1010F2080);
  v45 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v46 = Publisher<>.sink(receiveValue:)(sub_10058FD64, v43, v44, v45);
  swift_release(v43);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v37);
  swift_release(v60);
  v47 = *(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription);
  *(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription) = v46;
  swift_release(v47);
  return v30;
}

uint64_t sub_10058D7B4(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[5];
  uint64_t v22;
  char v23[24];

  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  a2 += 16;
  swift_beginAccess(a2, v23, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v14 = result;
    static DispatchWorkItemFlags.barrier.getter();
    v15 = swift_allocObject(&unk_10107F6F0, 24, 7);
    swift_weakInit(v15 + 16, v14);
    v16 = swift_allocObject(&unk_10107F718, 25, 7);
    *(_QWORD *)(v16 + 16) = v15;
    *(_BYTE *)(v16 + 24) = v12;
    aBlock[4] = sub_10058FD90;
    v22 = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_10107F730;
    v17 = _Block_copy(aBlock);
    v18 = swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v11, v17);
    _Block_release(v17);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    swift_release(v14);
    v19 = v22;
    swift_release(v15);
    return swift_release(v19);
  }
  return result;
}

uint64_t sub_10058D998(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10058D9F4(a2 & 1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10058D9F4(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled;
  v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled);
  v4 = static os_log_type_t.default.getter(v10);
  if (v11 != (a1 & 1))
  {
    if (qword_1010E9D00 == -1)
    {
LABEL_4:
      v12 = qword_1011B7180;
      os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7180, "Automatic time value changed. Clearing all observations.", 56, 2, _swiftEmptyArrayStorage);
      *(_BYTE *)(v1 + v2) = a1 & 1;
      sub_10058FF54((uint64_t)&_swiftEmptyDictionarySingleton);
      v14 = static os_log_type_t.default.getter(v13);
      return os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v12, "All observations removed.", 25, 2, _swiftEmptyArrayStorage);
    }
LABEL_9:
    swift_once(&qword_1010E9D00, sub_10058FCCC);
    goto LABEL_4;
  }
  if (qword_1010E9D00 != -1)
    swift_once(&qword_1010E9D00, sub_10058FCCC);
  v16 = qword_1011B7180;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 72, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v18 + 56) = &type metadata for Bool;
  *(_QWORD *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v16, "Automatic time value unchanged: %i", v19);
  return swift_bridgeObjectRelease(v18);
}

uint64_t sub_10058DC14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(char *)@<X2>, unint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t result;
  uint64_t v18;

  v10 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, a1, v10);
  if (*(_QWORD *)(v18 + 16) && (v11 = sub_100003FB0(a2), (v12 & 1) != 0))
  {
    v13 = *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease();
    v14 = sub_100508D98(v13);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v14);
    v16 = v15;
    result = swift_release(v14);
    if (a3)
    {
      swift_retain();
      v16 = (_QWORD *)sub_10008B5E0(a3, a4, (uint64_t)v16);
      result = sub_10001D8A8((uint64_t)a3, (uint64_t)a4);
    }
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v16 = _swiftEmptyArrayStorage;
  }
  *a5 = v16;
  return result;
}

void sub_10058DD3C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  v5 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
    *a2 = v10;
    swift_bridgeObjectRetain(v9);
    return;
  }
  v11 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *v8 = v11;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, _QWORD *))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    v5 = objc_autoreleasePoolPush();
    sub_10058CC84(a1, &v14);
    if (!v2)
    {
      objc_autoreleasePoolPop(v5);
      v9 = 0;
      v10 = v14;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  objc_autoreleasePoolPop(v5);
  __break(1u);
}

uint64_t sub_10058DE68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v10 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v10 - 8);
  v24 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v22 - 8);
  v14 = __chkstk_darwin(v22);
  v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  static DispatchWorkItemFlags.barrier.getter(v14);
  v17 = (_QWORD *)swift_allocObject(&unk_10107F7B8, 56, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a1;
  v17[5] = a4;
  v17[6] = a5;
  aBlock[4] = sub_1005904A8;
  v26 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107F7D0;
  v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  swift_retain();
  v19 = sub_10001D898(a4, a5);
  static DispatchQoS.unspecified.getter(v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v16, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v22);
  return swift_release(v26);
}

uint64_t sub_10058E024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t result;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  _QWORD *v103;
  _QWORD aBlock[5];
  uint64_t v105;

  v97 = a4;
  v98 = a5;
  v96 = a3;
  v73 = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  __chkstk_darwin(v6);
  v93 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for DispatchQoS(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v90 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for UUID(0);
  v88 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v87 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for BeaconObservation(0);
  v10 = *(_QWORD *)(v86 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v86);
  v85 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v12);
  v76 = (uint64_t)&v72 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v72 - v15;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  v99 = a1;
  if (v21)
  {
    v22 = v21;
  }
  else
  {
    v23 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    *v20 = v23;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
    v24 = v23;
    LOBYTE(v23) = _dispatchPreconditionTest(_:)(v20);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
    if ((v23 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    v26 = objc_autoreleasePoolPush();
    sub_10058CC84(a1, aBlock);
    objc_autoreleasePoolPop(v26);
    v22 = aBlock[0];
  }
  v27 = *(_QWORD *)(v73 + 16);
  if (v27)
  {
    v84 = *(_QWORD *)(v99 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    v28 = *(unsigned __int8 *)(v10 + 80);
    v29 = (v28 + 32) & ~v28;
    v30 = v73 + v29;
    v31 = *(_QWORD *)(v10 + 72);
    v75 = v29 + 2 * v31;
    v101 = v28 | 7;
    v79 = v29;
    v100 = v31;
    v78 = v31 + v29;
    v83 = (v28 + 24) & ~v28;
    v82 = (v11 + v83 + 7) & 0xFFFFFFFFFFFFFFF8;
    v81 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8;
    v80 = v81 + 16;
    v32 = v73;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v32);
    v77 = xmmword_100E22B00;
    v74 = xmmword_100E22B10;
    v102 = v16;
    do
    {
      sub_10012D874(v30, (uint64_t)v16);
      if (*(_QWORD *)(v22 + 16) && (v56 = sub_100003FB0((uint64_t)v16), (v57 & 1) != 0))
      {
        v58 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v56);
        swift_bridgeObjectRetain(v58);
      }
      else
      {
        v58 = sub_1006C9528((uint64_t)_swiftEmptyArrayStorage);
      }
      v59 = v101;
      v60 = v16[*(int *)(v86 + 24)];
      if (*(_QWORD *)(v58 + 16)
        && (v61 = sub_100518FF0(v16[*(int *)(v86 + 24)]), (v62 & 1) != 0)
        && (v63 = *(_QWORD *)(*(_QWORD *)(v58 + 56) + 8 * v61), *(_QWORD *)(v63 + 16)))
      {
        v64 = v79;
        v65 = v76;
        sub_10012D874(v63 + v79, v76);
        v66 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
        v67 = swift_allocObject(v66, v75, v59);
        *(_OWORD *)(v67 + 16) = v74;
        sub_10012D874((uint64_t)v102, v67 + v64);
        sub_10012D874(v65, v67 + v64 + v100);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
        aBlock[0] = v58;
        v69 = v67;
        v59 = v101;
        sub_10010A51C(v69, v60, isUniquelyReferenced_nonNull_native);
        v36 = aBlock[0];
        swift_bridgeObjectRelease();
        v70 = v65;
        v16 = v102;
        sub_10012D8F8(v70);
      }
      else
      {
        v33 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
        v34 = swift_allocObject(v33, v78, v59);
        *(_OWORD *)(v34 + 16) = v77;
        sub_10012D874((uint64_t)v16, v34 + v79);
        v35 = swift_isUniquelyReferenced_nonNull_native(v58);
        aBlock[0] = v58;
        sub_10010A51C(v34, v60, v35);
        v36 = aBlock[0];
        swift_bridgeObjectRelease();
      }
      v37 = v88;
      v38 = (uint64_t)v87;
      v39 = v16;
      v40 = v89;
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v87, v39, v89);
      swift_bridgeObjectRetain(v36);
      v41 = swift_isUniquelyReferenced_nonNull_native(v22);
      aBlock[0] = v22;
      sub_10010D4A0(v36, v38, v41);
      v22 = aBlock[0];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v40);
      v42 = v85;
      sub_10012D874((uint64_t)v102, v85);
      v43 = swift_allocObject(&unk_10107F808, v80, v59);
      *(_QWORD *)(v43 + 16) = v99;
      sub_10012D934(v42, v43 + v83);
      v44 = v97;
      *(_QWORD *)(v43 + v82) = v96;
      v45 = (uint64_t *)(v43 + v81);
      v46 = v98;
      *v45 = v44;
      v45[1] = v46;
      aBlock[4] = sub_100590588;
      v105 = v43;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016FB8;
      aBlock[3] = &unk_10107F820;
      v47 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      v48 = sub_10001D898(v44, v46);
      v49 = v90;
      static DispatchQoS.unspecified.getter(v48);
      v103 = _swiftEmptyArrayStorage;
      v50 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v51 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v52 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v53 = v93;
      v54 = v95;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v51, v52, v95, v50);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v53, v47);
      _Block_release(v47);
      v55 = v54;
      v16 = v102;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v53, v55);
      (*(void (**)(char *, uint64_t))(v91 + 8))(v49, v92);
      sub_10012D8F8((uint64_t)v16);
      swift_release(v105);
      swift_bridgeObjectRelease();
      v30 += v100;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain(v21);
  }
  swift_bridgeObjectRetain(v22);
  sub_10058FF54(v71);
  return swift_bridgeObjectRelease_n(v22, 2);
}

uint64_t sub_10058E794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;

  v9 = (_QWORD *)swift_allocObject(&unk_10107F858, 40, 7);
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  swift_retain();
  sub_10001D898(a4, a5);
  sub_10058E820(a2, (uint64_t)sub_100590610, (uint64_t)v9);
  return swift_release(v9);
}

uint64_t sub_10058E820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  void **aBlock;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  void *v64;
  uint64_t (*v65)();
  uint64_t v66;

  v43 = a2;
  v54 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v44 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v8 - 8);
  v59 = v8;
  __chkstk_darwin(v8);
  v57 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconObservation(0);
  v53 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v51 = (uint64_t)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v11;
  v12 = sub_10001A9A8(&qword_101108020);
  v56 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v56 + 64);
  __chkstk_darwin(v12);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010FF730);
  OS_dispatch_queue.sync<A>(execute:)(sub_10059064C, v3, v15);
  v16 = (char *)aBlock[2];
  v42 = v3;
  if (v16)
  {
    v41 = a3;
    v50 = *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionPublishQueue);
    v17 = *(unsigned __int8 *)(v56 + 80);
    v55 = v6;
    v18 = v5;
    v40[1] = aBlock;
    v19 = (char *)aBlock + ((v17 + 32) & ~v17);
    v48 = *(_QWORD *)(v56 + 72);
    v47 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v49 = v17;
    v46 = (v17 + 16) & ~v17;
    v45 = v46 + v13;
    v20 = v44;
    do
    {
      v47(v14, v19, v12);
      v21 = v51;
      sub_10012D874(v54, v51);
      v22 = *(unsigned __int8 *)(v53 + 80);
      v23 = (v45 + v22) & ~v22;
      v24 = swift_allocObject(&unk_10107F880, v23 + v52, v49 | v22 | 7);
      (*(void (**)(uint64_t, char *, uint64_t))(v56 + 32))(v24 + v46, v14, v12);
      sub_10012D934(v21, v24 + v23);
      v65 = sub_100590790;
      v66 = v24;
      aBlock = _NSConcreteStackBlock;
      v62 = 1107296256;
      v63 = sub_100016FB8;
      v64 = &unk_10107F898;
      v25 = _Block_copy(&aBlock);
      static DispatchQoS.unspecified.getter(v25);
      v60 = _swiftEmptyArrayStorage;
      v26 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v27 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v28 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v29 = v26;
      v30 = v57;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v27, v28, v18, v29);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v20, v25);
      _Block_release(v25);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v20, v18);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v59);
      swift_release(v66);
      v19 += v48;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    v5 = v18;
    v6 = v55;
    a3 = v41;
  }
  else
  {
    swift_bridgeObjectRelease();
    v30 = v57;
  }
  v31 = swift_allocObject(&unk_10107F8D0, 32, 7);
  *(_QWORD *)(v31 + 16) = v43;
  *(_QWORD *)(v31 + 24) = a3;
  v65 = sub_10001D858;
  v66 = v31;
  aBlock = _NSConcreteStackBlock;
  v62 = 1107296256;
  v63 = sub_100016FB8;
  v64 = &unk_10107F8E8;
  v32 = _Block_copy(&aBlock);
  v33 = swift_retain();
  static DispatchQoS.unspecified.getter(v33);
  v60 = _swiftEmptyArrayStorage;
  v34 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v35 = v30;
  v36 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v37 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v38 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v60, v36, v37, v5, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v35, v38, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v38, v5);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v35, v59);
  return swift_release(v66);
}

void sub_10058ED88(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
    swift_bridgeObjectRetain(v9);
    sub_10058C8DC(v10);
    v14 = v13;
    swift_bridgeObjectRelease();
    *a2 = v14;
    return;
  }
  v11 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *v8 = v11;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, _QWORD *))(v6 + 8))(v8, v5);
  if ((v11 & 1) != 0)
  {
    v5 = objc_autoreleasePoolPush();
    sub_10058CC84(a1, &v16);
    if (!v2)
    {
      objc_autoreleasePoolPop(v5);
      v9 = 0;
      v10 = v16;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  objc_autoreleasePoolPop(v5);
  __break(1u);
}

void sub_10058EED0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t i;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  int64_t v33;
  _QWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t (*v60)(_QWORD);
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;

  v60 = a3;
  v61 = a4;
  v7 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v57 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  if (!v13)
  {
    v14 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    *v12 = v14;
    (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
    v15 = v14;
    LOBYTE(v14) = _dispatchPreconditionTest(_:)(v12);
    (*(void (**)(_QWORD *, _QWORD *))(v10 + 8))(v12, v9);
    if ((v14 & 1) != 0)
    {
      v9 = objc_autoreleasePoolPush();
      sub_10058CC84(a1, &v63);
      if (!v4)
      {
        objc_autoreleasePoolPop(v9);
        v9 = v63;
        goto LABEL_6;
      }
    }
    else
    {
LABEL_48:
      __break(1u);
LABEL_49:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
      __break(1u);
    }
    objc_autoreleasePoolPop(v9);
    __break(1u);
    return;
  }
  v9 = *(_QWORD **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
  v63 = v9;
  v16 = v9[2];
  swift_bridgeObjectRetain(v13);
  if (!v16)
    goto LABEL_44;
  swift_bridgeObjectRetain(v9);
  v17 = sub_100003FB0(a2);
  if ((v18 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    goto LABEL_44;
  }
  v53 = v7;
  v54 = a2;
  v55 = a1;
  v19 = *(_QWORD *)(v9[7] + 8 * v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v9);
  v59 = sub_1006C9528((uint64_t)_swiftEmptyArrayStorage);
  v20 = 0;
  v21 = v19 + 64;
  v22 = 1 << *(_BYTE *)(v19 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(v19 + 64);
  v25 = (unint64_t)(v22 + 63) >> 6;
  if (!v24)
    goto LABEL_14;
LABEL_11:
  v26 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  for (i = v26 | (v20 << 6); ; i = __clz(__rbit64(v32)) + (v20 << 6))
  {
    v28 = *(_BYTE *)(*(_QWORD *)(v19 + 48) + i);
    v29 = *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * i);
    v30 = swift_bridgeObjectRetain(v29);
    v9 = sub_10058FD9C(v30, v60);
    swift_bridgeObjectRelease(v29);
    if (v9[2])
    {
      v34 = (_QWORD *)v59;
      LODWORD(v56) = swift_isUniquelyReferenced_nonNull_native(v59);
      v62 = v34;
      v36 = sub_100518FF0(v28);
      v37 = v34[2];
      v38 = (v35 & 1) == 0;
      v39 = v37 + v38;
      if (__OFADD__(v37, v38))
        goto LABEL_47;
      if (v34[3] >= v39)
      {
        if ((v56 & 1) == 0)
        {
          LODWORD(v59) = v35;
          v56 = v36;
          sub_100A9A648();
          v36 = v56;
          LOBYTE(v35) = v59;
        }
      }
      else
      {
        LODWORD(v59) = v35;
        sub_100A862FC(v39, v56);
        v40 = sub_100518FF0(v28);
        v41 = v35 & 1;
        LOBYTE(v35) = v59;
        if ((v59 & 1) != v41)
          goto LABEL_49;
        v36 = v40;
      }
      v59 = (unint64_t)v62;
      if ((v35 & 1) != 0)
      {
        v42 = v62[7];
        v43 = 8 * v36;
        swift_bridgeObjectRelease(*(_QWORD *)(v42 + 8 * v36));
        *(_QWORD *)(v42 + v43) = v9;
      }
      else
      {
        sub_100A9814C(v36, v28, (uint64_t)v9, v62);
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      if (v24)
        goto LABEL_11;
    }
    else
    {
      swift_bridgeObjectRelease(v9);
      if (v24)
        goto LABEL_11;
    }
LABEL_14:
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v20 >= v25)
      goto LABEL_41;
    v32 = *(_QWORD *)(v21 + 8 * v20);
    if (!v32)
      break;
LABEL_24:
    v24 = (v32 - 1) & v32;
  }
  v33 = v20 + 1;
  if (v20 + 1 >= v25)
    goto LABEL_41;
  v32 = *(_QWORD *)(v21 + 8 * v33);
  if (v32)
    goto LABEL_23;
  v33 = v20 + 2;
  if (v20 + 2 >= v25)
    goto LABEL_41;
  v32 = *(_QWORD *)(v21 + 8 * v33);
  if (v32)
  {
LABEL_23:
    v20 = v33;
    goto LABEL_24;
  }
  v33 = v20 + 3;
  if (v20 + 3 < v25)
  {
    v32 = *(_QWORD *)(v21 + 8 * v33);
    if (!v32)
    {
      while (1)
      {
        v20 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_46;
        if (v20 >= v25)
          goto LABEL_41;
        v32 = *(_QWORD *)(v21 + 8 * v20);
        ++v33;
        if (v32)
          goto LABEL_24;
      }
    }
    goto LABEL_23;
  }
LABEL_41:
  v45 = (uint64_t)v57;
  v44 = v58;
  swift_release(v19);
  v47 = v53;
  v46 = v54;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v45, v54, v53);
  v48 = v59;
  swift_bridgeObjectRetain(v59);
  v49 = v63;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
  v62 = v49;
  v63 = (_QWORD *)0x8000000000000000;
  sub_10010D4A0(v48, v45, isUniquelyReferenced_nonNull_native);
  v63 = v62;
  swift_bridgeObjectRelease(0x8000000000000000);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v47);
  v51 = *(_QWORD *)(v48 + 16);
  swift_bridgeObjectRelease(v48);
  if (!v51)
  {
    v52 = sub_100103D1C(v46);
    swift_bridgeObjectRelease(v52);
  }
  v9 = v63;
  sub_10058FF54((uint64_t)v63);
LABEL_44:
  swift_bridgeObjectRelease(v9);
}

uint64_t sub_10058F37C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;

  v3 = sub_10001A9A8(&qword_101108020);
  Subscription.subscriber.getter(v7, v3);
  v4 = v8;
  v5 = v9;
  sub_10001AA44(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 8))(a2, v4, v5);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
}

uint64_t sub_10058F3F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription));
  v3 = v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_transactionManager;
  v4 = type metadata accessor for PressuredExitTransactionManager(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap));
  return v0;
}

uint64_t sub_10058F4BC()
{
  uint64_t v0;

  sub_10058F3F0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10058F4E0()
{
  return type metadata accessor for BeaconObservationStore(0);
}

uint64_t type metadata accessor for BeaconObservationStore(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FF618;
  if (!qword_1010FF618)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconObservationStore);
  return result;
}

uint64_t sub_10058F524(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = "\b";
    result = type metadata accessor for PressuredExitTransactionManager(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v5[7] = "\b";
      v5[8] = &unk_100E43940;
      result = swift_updateClassMetadata2(a1, 256, 9, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10058F5E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _BYTE v19[40];

  v6 = sub_10001A9A8(&qword_101108020);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100030784(a1, (uint64_t)v19);
  v10 = swift_allocObject(&unk_10107F6F0, 24, 7);
  swift_weakInit(v10 + 16, a2);
  v11 = sub_10001A9A8(&qword_1010FF720);
  Subscription.init(subscriber:unsubscribeBlock:)(v19, sub_100590384, v10, v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  v12 = (unint64_t *)(a2 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v12, v19, 33, 0);
  v13 = *v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  *v12 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_1007CA0A8(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
    *v12 = v13;
  }
  v16 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    v13 = sub_1007CA0A8(v15 > 1, v16 + 1, 1, v13);
    *v12 = v13;
  }
  *(_QWORD *)(v13 + 16) = v16 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v7 + 32))(v13+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, v9, v6);
  return swift_endAccess(v19);
}

uint64_t sub_10058F794(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_10058F804(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10058F804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101108020);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v21[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionQueue);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_10107F768, v13 + v11, v12 | 7);
  *(_QWORD *)(v14 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_100590414;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10107F780;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release();
}

uint64_t sub_10058FA74(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD v6[5];
  _BYTE v7[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions, v7, 1, 0);
  v4 = *v3;
  v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *v3 = sub_10008BA14((uint64_t (*)(char *))sub_100590448, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_10058FAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_10001A9A8(&qword_101108020);
  v5 = sub_1000193A4(&qword_1010FF728, &qword_101108020, (const char *)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_10058FB7C()
{
  _QWORD *v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(*v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v1, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10058FBC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(*v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10058FC1C(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions, a1, 33, 0);
  return j__swift_endAccess_0;
}

uint64_t sub_10058FC64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  v3 = sub_10001A9A8(&qword_101108020);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100150D80, v5, v3);
}

uint64_t sub_10058FCCC()
{
  uint64_t result;

  sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000016, 0x8000000100EDBC90);
  qword_1011B7180 = result;
  return result;
}

uint64_t sub_10058FD40()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10058FD64(char *a1)
{
  uint64_t v1;

  return sub_10058D7B4(a1, v1);
}

uint64_t sub_10058FD6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10058FD90()
{
  uint64_t v0;

  return sub_10058D998(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

_QWORD *sub_10058FD9C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t (*v24)(_QWORD);
  _QWORD *v25;

  v5 = type metadata accessor for BeaconObservation(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v11 = (char *)&v21 - v10;
  result = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v21 = v2;
    v14 = *(_QWORD *)(v9 + 72);
    v23 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v15 = a1 + v23;
    v16 = v14;
    v17 = _swiftEmptyArrayStorage;
    v24 = a2;
    v22 = v14;
    do
    {
      sub_10012D874(v15, (uint64_t)v11);
      if ((a2(v11) & 1) != 0)
      {
        sub_10012D8F8((uint64_t)v11);
      }
      else
      {
        sub_10012D934((uint64_t)v11, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
          sub_10009AAC8(0, v17[2] + 1, 1);
        v17 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_10009AAC8(v18 > 1, v19 + 1, 1);
          v17 = v25;
        }
        v17[2] = v19 + 1;
        v20 = (uint64_t)v17 + v23 + v19 * v22;
        v16 = v22;
        sub_10012D934((uint64_t)v8, v20);
        a2 = v24;
      }
      v15 += v16;
      --v13;
    }
    while (v13);
    return v25;
  }
  return result;
}

void sub_10058FF54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  if (v7)
  {
    *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease(v7);
  }
  v8 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *v6 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v8 & 1) != 0)
  {
    v10 = objc_autoreleasePoolPush();
    sub_10058CFD0(v1, a1);
    objc_autoreleasePoolPop(v10);
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_100590058()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FF6E0;
  if (!qword_1010FF6E0)
  {
    v1 = sub_10001F784(&qword_1010F7770);
    v2[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_1005900DC();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FF6E0);
  }
  return result;
}

unint64_t sub_1005900DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FF6E8;
  if (!qword_1010FF6E8)
  {
    v1 = sub_10001F784(&qword_1010ECB08);
    v2[0] = sub_100590168();
    v2[1] = sub_100590300((unint64_t *)&qword_1010FA258, &qword_1010FA260, (uint64_t)&unk_100E4AA40, (const char *)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FF6E8);
  }
  return result;
}

unint64_t sub_100590168()
{
  unint64_t result;

  result = qword_1010FF6F0;
  if (!qword_1010FF6F0)
  {
    result = swift_getWitnessTable(byte_100E4A8A0, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1010FF6F0);
  }
  return result;
}

unint64_t sub_1005901AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FF6F8;
  if (!qword_1010FF6F8)
  {
    v1 = sub_10001F784(&qword_1010F7770);
    v2[0] = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100590230();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FF6F8);
  }
  return result;
}

unint64_t sub_100590230()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010FF700;
  if (!qword_1010FF700)
  {
    v1 = sub_10001F784(&qword_1010ECB08);
    v2[0] = sub_1005902BC();
    v2[1] = sub_100590300((unint64_t *)&qword_1010FF710, &qword_1010FF718, (uint64_t)&unk_100E4AA68, (const char *)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010FF700);
  }
  return result;
}

unint64_t sub_1005902BC()
{
  unint64_t result;

  result = qword_1010FF708;
  if (!qword_1010FF708)
  {
    result = swift_getWitnessTable(byte_100E4A8C8, &type metadata for BeaconObservation.ObservationType);
    atomic_store(result, (unint64_t *)&qword_1010FF708);
  }
  return result;
}

uint64_t sub_100590300(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_101109460);
    v10 = sub_100006204(a2, type metadata accessor for BeaconObservation, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100590384(uint64_t a1)
{
  uint64_t v1;

  return sub_10058F794(a1, v1);
}

uint64_t sub_10059039C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101108020);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100590414()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101108020) - 8) + 80);
  return sub_10058FA74(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

BOOL sub_100590448(uint64_t a1)
{
  uint64_t v1;

  return sub_10058FAF8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100590464()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1005904A8()
{
  uint64_t *v0;

  return sub_10058E024(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1005904B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for BeaconObservation(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = v6 + *(int *)(v1 + 20);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  if (*(_QWORD *)(v0 + v5))
    swift_release();
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_100590588()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for BeaconObservation(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10058E794(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1005905DC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100590610()
{
  uint64_t v0;
  void (*v1)(void);

  v1 = *(void (**)(void))(v0 + 24);
  Transaction.capture()();
  if (v1)
    v1();
}

uint64_t sub_10059064C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a1 = *v3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_1005906AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = sub_10001A9A8(&qword_101108020);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for BeaconObservation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v0 + v9, v12);
  v13 = v0 + v9 + *(int *)(v6 + 20);
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100590790()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_101108020) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeaconObservation(0) - 8) + 80);
  return sub_10058F37C(v0 + v2, v0 + ((v2 + v3 + v4) & ~v4));
}

uint64_t sub_1005907F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100590818(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010FF738);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int sub_100590880()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000002ALL, 0x8000000100EC3450);
  return Hasher._finalize()();
}

uint64_t sub_1005908D4(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000002ALL, 0x8000000100EC3450);
}

Swift::Int sub_1005908F0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD00000000000002ALL, 0x8000000100EC3450);
  return Hasher._finalize()();
}

uint64_t sub_100590940@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104AEB0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100590BAC(int a1, void *aBlock, void *a3)
{
  uint64_t v3;
  id v5;

  *(_QWORD *)(v3 + 16) = a3;
  *(_QWORD *)(v3 + 24) = _Block_copy(aBlock);
  v5 = a3;
  return swift_task_switch(sub_100590BF8, 0, 0);
}

uint64_t sub_100590BF8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v3 = (uint64_t (__cdecl *)())((char *)&dword_1010FD220 + dword_1010FD220);
  v1 = (_QWORD *)swift_task_alloc(unk_1010FD224);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_100590C70;
  return v3();
}

uint64_t sub_100590C70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100590CCC, 0, 0);
}

uint64_t sub_100590CCC()
{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  Class isa;

  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 24);

  sub_10000F4A0(0, &qword_1010FF850, SPStandaloneBeacon_ptr);
  sub_1000170AC(&qword_1010FF858, &qword_1010FF850, SPStandaloneBeacon_ptr);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100590D8C(void (*a1)(_QWORD, uint64_t))
{
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = sub_10033638C();
  v3 = swift_allocError(&type metadata for BeaconManagerCommandError, v2, 0, 0);
  *v4 = 0;
  a1(0, v3);
  return swift_errorRelease(v3);
}

uint64_t sub_100590ED8(void (*a1)(void))
{
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = sub_10033638C();
  v3 = swift_allocError(&type metadata for BeaconManagerCommandError, v2, 0, 0);
  *v4 = 0;
  a1();
  return swift_errorRelease(v3);
}

uint64_t sub_100590FF0(char *a1, uint64_t a2, uint64_t a3, const void *a4, void (*a5)(char *, uint64_t, void *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v14 = *sub_10001AA44(&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  _Block_copy(v13);
  v15 = a1;
  a5(v12, v14, v13);
  _Block_release(v13);
  _Block_release(v13);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10059143C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = v2;
  if (qword_1010E9CE0 != -1)
    swift_once(&qword_1010E9CE0, sub_100563220);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7148);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v14 = v11;
    *(_DWORD *)v10 = 136446210;
    v13 = sub_100016940(0xD000000000000035, 0x8000000100ED86B0, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1004835AC(a1, a2);
}

void sub_10059182C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSArray v5;
  uint64_t v6;
  id v7;

  sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
  if (a2)
    v6 = _convertErrorToNSError(_:)(a2);
  else
    v6 = 0;
  v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);

}

void sub_100591A28(void *a1, int a2, void *a3, void *aBlock, void (*a5)(uint64_t, unint64_t, id, void *))
{
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;

  v8 = _Block_copy(aBlock);
  v9 = a3;
  v13 = a1;
  v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v12 = v11;

  _Block_copy(v8);
  a5(v10, v12, v13, v8);
  _Block_release(v8);
  _Block_release(v8);
  sub_10001BC14(v10, v12);

}

uint64_t sub_100591CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v7 = qword_1011B7DD8;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = UUID.uuidString.getter(v9);
  v12 = v11;
  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v10;
  *(_QWORD *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "received ignore beacon for %@", 29, 2, v9);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1007928C0();
  sub_100570068(a1, a2, 0, 0);
  return swift_release();
}

uint64_t sub_1005920D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t ObjectType;

  v2 = v1;
  v3 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v4 = qword_1011B7D50;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v2);
  v7 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v8 = String.init<A>(describing:)(&ObjectType, v7);
  v10 = v9;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v11 = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  *(_QWORD *)(v6 + 96) = &type metadata for String;
  *(_QWORD *)(v6 + 104) = v11;
  *(_QWORD *)(v6 + 64) = v11;
  *(_QWORD *)(v6 + 72) = 0xD000000000000018;
  *(_QWORD *)(v6 + 80) = 0x8000000100EDC0E0;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "%{public}@: %{public}@", 22, 2, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10059235C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t ObjectType;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v9 = qword_1011B7D50;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v4);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD00000000000002CLL;
  *(_QWORD *)(v11 + 80) = 0x8000000100EDC080;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22, 2, v11);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1007928C0();
  sub_100570068(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_1005925E4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t ObjectType;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v9 = qword_1011B7D50;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v4);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD000000000000028;
  *(_QWORD *)(v11 + 80) = 0x8000000100EDC050;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22, 2, v11);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1007928C0();
  sub_10056FD90(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_1005928C8(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t ObjectType;

  v8 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v9 = qword_1011B7D50;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v4);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD00000000000002FLL;
  *(_QWORD *)(v11 + 80) = 0x8000000100EDB8D0;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22, 2, v11);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1007928C0();
  sub_10056F77C(a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_100592CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v10;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  id v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a5;
  v7 = a4;
  v8 = a2;
  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    sub_10009B1E4(0, v10, 0);
    result = sub_1003B2D14(a3);
    v13 = result;
    v15 = v14;
    v17 = v16 & 1;
    while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(_BYTE *)(a3 + 32))
    {
      if (((*(_QWORD *)(a3 + 56 + (((unint64_t)v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_13;
      if (*(_DWORD *)(a3 + 36) != (_DWORD)v15)
        goto LABEL_14;
      v18 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v13);
      v19 = sub_100C62404((uint64_t)v18);

      v21 = _swiftEmptyArrayStorage[2];
      v20 = _swiftEmptyArrayStorage[3];
      if (v21 >= v20 >> 1)
        sub_10009B1E4(v20 > 1, v21 + 1, 1);
      _swiftEmptyArrayStorage[2] = v21 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v21) = v19;
      result = sub_1003B2DB8(v13, v15, v17 & 1, a3);
      v13 = result;
      v15 = v22;
      v17 = v23 & 1;
      if (!--v10)
      {
        sub_1000FE2A4(result, v22, v23 & 1);
        v7 = a4;
        v6 = a5;
        a1 = v26;
        v8 = a2;
        v5 = v25;
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
LABEL_11:
    v24 = (char *)sub_100CA8BD8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    sub_10001AA44((_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_100309F78(a1, v8, v24, 1, v7, v6);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_100593074(uint64_t a1, uint64_t a2)
{
  Class isa;

  type metadata accessor for UUID(0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void sub_100593588(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  void *v8;
  id v9;
  id v10;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  v9 = a3;
  v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);

}

void sub_100593790(uint64_t a1, NSString a2, uint64_t a3)
{
  id v4;

  if (a2)
    a2 = String._bridgeToObjectiveC()();
  v4 = a2;
  (*(void (**)(uint64_t))(a3 + 16))(a3);

}

void sub_100593950(void *a1, char a2, void (*a3)(void *, void *))
{
  id v5;
  uint64_t v6;
  void *v7;

  if ((a2 & 1) != 0)
  {
    v7 = a1;
    swift_errorRetain(a1);
    v6 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v7, v6, &protocol self-conformance witness table for Error);
    swift_errorRetain(a1);
    a3(0, a1);
    sub_10010F93C(a1, 1);
    sub_10010F93C(a1, 1);
  }
  else
  {
    v5 = a1;
    a3(a1, 0);
    sub_10010F93C(a1, 0);
  }
}

uint64_t sub_100593C6C(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(uint64_t))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v11 = sub_10001A9A8(a4);
  __chkstk_darwin(v11);
  v13 = (uint64_t *)((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = a5(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v22 - v15;
  sub_10000F9B8(a1, (uint64_t)v13, a4);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    v23 = *v13;
    v17 = v23;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    swift_willThrowTypedImpl(&v23, v18, &protocol self-conformance witness table for Error);
    swift_errorRetain(v17);
    a2(0, v17);
    swift_errorRelease(v17);
    return swift_errorRelease(v17);
  }
  else
  {
    v20 = sub_1000126EC((uint64_t)v13, (uint64_t)v16, a5);
    v21 = (void *)a6(v20);
    a2(v21, 0);

    return sub_1000126B0((uint64_t)v16, a5);
  }
}

void sub_100593DE8(void *a1, int a2, void *a3, uint64_t a4, void *aBlock, void (*a6)(uint64_t, unint64_t, uint64_t, void *))
{
  void *v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;

  v10 = _Block_copy(aBlock);
  v11 = a3;
  v15 = a1;
  v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v14 = v13;

  _Block_copy(v10);
  a6(v12, v14, a4, v10);
  _Block_release(v10);
  _Block_release(v10);
  sub_10001BC14(v12, v14);

}

uint64_t sub_100593E94(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  return sub_100593C6C(a1, a2, a3, &qword_1010FD1A0, type metadata accessor for RawAccessoryMetadata, (uint64_t (*)(uint64_t))sub_100134998);
}

uint64_t sub_100593FAC(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3)
{
  return sub_100593C6C(a1, a2, a3, &qword_1010FD188, type metadata accessor for AccessoryMetadata, (uint64_t (*)(uint64_t))sub_100133294);
}

uint64_t sub_1005940C4(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0)
    return a3(0);
  swift_errorRetain(a1);
  a3(a1);
  return sub_10010F948(a1, 1);
}

uint64_t sub_10059421C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100594240(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1005940C4(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10059424C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FD17C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_1004A475C(v2, v3);
}

uint64_t sub_10059429C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  void (*v28)(_BYTE *, _QWORD);
  uint64_t *v29;
  uint64_t *v30;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  char v43;
  char v44;
  void (*v45)(unint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t result;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  int64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *i;
  uint64_t v81;
  _OWORD v82[2];
  _BYTE v83[32];
  __int128 v84;
  void *v85;
  _QWORD *v86;

  v3 = v2;
  v69 = a2;
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v81 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 56);
  v70 = a1 + 56;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v72 = (unint64_t)(v9 + 63) >> 6;
  v73 = a1;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  v68[1] = &type metadata for () + 1;
  v71 = xmmword_100E22B00;
  v76 = v5;
  for (i = v7; ; v7 = i)
  {
    if (v11)
    {
      v77 = v3;
      v79 = (v11 - 1) & v11;
      v17 = __clz(__rbit64(v11)) | (v12 << 6);
      goto LABEL_21;
    }
    v18 = __OFADD__(v12++, 1);
    if (v18)
      goto LABEL_51;
    if (v12 >= v72)
      return swift_release();
    v19 = *(_QWORD *)(v70 + 8 * v12);
    if (!v19)
      break;
LABEL_20:
    v77 = v3;
    v79 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_21:
    v21 = v12;
    v22 = (unsigned __int8 *)(*(_QWORD *)(v73 + 48) + 24 * v17);
    v75 = *v22;
    v23 = *((_QWORD *)v22 + 2);
    v74 = *((_QWORD *)v22 + 1);
    v24 = type metadata accessor for PropertyListEncoder(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v78 = v23;
    swift_bridgeObjectRetain(v23);
    PropertyListEncoder.init()(v25);
    if (qword_1010EA610 != -1)
      swift_once(&qword_1010EA610, sub_100DB0924);
    v26 = sub_10001A9E8(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
    v27 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
    v27(v7, v26, v5);
    v85 = &type metadata for Bool;
    LOBYTE(v84) = 1;
    v28 = (void (*)(_BYTE *, _QWORD))dispatch thunk of PropertyListEncoder.userInfo.modify(v83);
    v30 = v29;
    if (v85)
    {
      sub_10010F90C(&v84, v82);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
      v86 = (_QWORD *)*v30;
      v32 = v86;
      *v30 = 0x8000000000000000;
      v34 = sub_100518F54((uint64_t)v7);
      v35 = v32[2];
      v36 = (v33 & 1) == 0;
      v37 = v35 + v36;
      if (__OFADD__(v35, v36))
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        goto LABEL_53;
      }
      v38 = v33;
      if (v32[3] >= v37)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100A9A3CC();
      }
      else
      {
        sub_100A85F28(v37, isUniquelyReferenced_nonNull_native);
        v39 = sub_100518F54((uint64_t)i);
        if ((v38 & 1) != (v40 & 1))
          goto LABEL_54;
        v34 = v39;
      }
      v47 = v76;
      v48 = v86;
      if ((v38 & 1) != 0)
      {
        v49 = (_QWORD *)(v86[7] + 32 * v34);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
        sub_10010F90C(v82, v49);
        v50 = (uint64_t)i;
      }
      else
      {
        v86[(v34 >> 6) + 8] |= 1 << v34;
        v50 = (uint64_t)i;
        v27((char *)(v48[6] + *(_QWORD *)(v81 + 72) * v34), (uint64_t)i, v47);
        sub_10010F90C(v82, (_OWORD *)(v48[7] + 32 * v34));
        v51 = v48[2];
        v18 = __OFADD__(v51, 1);
        v52 = v51 + 1;
        if (v18)
          goto LABEL_52;
        v48[2] = v52;
        v48 = v86;
      }
      *v30 = (uint64_t)v48;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v50, v47);
      v12 = v21;
      v53 = v77;
    }
    else
    {
      sub_100004048((uint64_t)&v84, (uint64_t *)&unk_1010F6390);
      swift_bridgeObjectRetain(*v30);
      v41 = sub_100518F54((uint64_t)v7);
      v43 = v42;
      swift_bridgeObjectRelease();
      if ((v43 & 1) != 0)
      {
        v44 = swift_isUniquelyReferenced_nonNull_native(*v30);
        v86 = (_QWORD *)*v30;
        *v30 = 0x8000000000000000;
        v12 = v21;
        if ((v44 & 1) == 0)
          sub_100A9A3CC();
        v45 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
        v45(v86[6] + *(_QWORD *)(v81 + 72) * v41, v5);
        v46 = (uint64_t)v86;
        sub_10010F90C((_OWORD *)(v86[7] + 32 * v41), v82);
        sub_100105378(v41, v46);
        *v30 = v46;
        swift_bridgeObjectRelease();
      }
      else
      {
        memset(v82, 0, sizeof(v82));
        v45 = *(void (**)(unint64_t, uint64_t))(v81 + 8);
        v12 = v21;
      }
      v53 = v77;
      v45((unint64_t)i, v5);
      sub_100004048((uint64_t)v82, (uint64_t *)&unk_1010F6390);
    }
    v28(v83, 0);
    *(_QWORD *)&v84 = &off_101048010;
    v54 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v55 = sub_1001B1324();
    v56 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v84, v54, v55);
    if (v53)
    {
      v58 = swift_release();
      v59 = static os_log_type_t.error.getter(v58);
      if (qword_1010EA250 != -1)
        swift_once(&qword_1010EA250, sub_100B5D964);
      v60 = qword_1011B7D30;
      v61 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v62 = swift_allocObject(v61, 72, 7);
      *(_OWORD *)(v62 + 16) = v71;
      *(_QWORD *)&v84 = v53;
      swift_errorRetain(v53);
      v63 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v64 = String.init<A>(describing:)(&v84, v63);
      v66 = v65;
      *(_QWORD *)(v62 + 56) = &type metadata for String;
      *(_QWORD *)(v62 + 64) = sub_10001AA00();
      *(_QWORD *)(v62 + 32) = v64;
      *(_QWORD *)(v62 + 40) = v66;
      os_log(_:dso:log:_:_:)(v59, &_mh_execute_header, v60, "Failed to encode message: %@", 28, 2, v62);
      swift_bridgeObjectRelease();
      swift_errorRelease(v53);
      swift_bridgeObjectRelease();
      v3 = 0;
    }
    else
    {
      v13 = v56;
      v14 = v57;
      swift_release();
      v15 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v15);
      v68[-8] = v69;
      LOBYTE(v68[-7]) = 8;
      v68[-6] = 1;
      v68[-5] = v13;
      v68[-4] = v14;
      LOBYTE(v68[-3]) = v75;
      v16 = v78;
      v68[-2] = v74;
      v68[-1] = v16;
      static Transaction.named<A>(_:with:)("_sendUnregisterIntentMessage", 28, 2, sub_100599E84, &v68[-10]);
      v3 = 0;
      sub_10001BC14(v13, v14);
      swift_bridgeObjectRelease();
    }
    v5 = v76;
    v11 = v79;
  }
  v20 = v12 + 1;
  if (v12 + 1 >= v72)
    return swift_release();
  v19 = *(_QWORD *)(v70 + 8 * v20);
  if (v19)
    goto LABEL_19;
  v20 = v12 + 2;
  if (v12 + 2 >= v72)
    return swift_release();
  v19 = *(_QWORD *)(v70 + 8 * v20);
  if (v19)
    goto LABEL_19;
  v20 = v12 + 3;
  if (v12 + 3 >= v72)
    return swift_release();
  v19 = *(_QWORD *)(v70 + 8 * v20);
  if (v19)
    goto LABEL_19;
  v20 = v12 + 4;
  if (v12 + 4 >= v72)
    return swift_release();
  v19 = *(_QWORD *)(v70 + 8 * v20);
  if (v19)
  {
LABEL_19:
    v12 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v12 >= v72)
      return swift_release();
    v19 = *(_QWORD *)(v70 + 8 * v12);
    ++v20;
    if (v19)
      goto LABEL_20;
  }
LABEL_53:
  __break(1u);
LABEL_54:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v76);
  __break(1u);
  return result;
}

_QWORD *sub_100594A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v6 = (_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + 280);
    do
    {
      v8 = v6[3];
      v9 = v6[4];
      v10 = sub_10001AA44(v6, v8);
      v11 = sub_100854C8C((uint64_t)v10, v7, v8, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      specialized ContiguousArray._endMutation()(v13);
      v6 += 5;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_100594ADC(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  uint8_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MACAddress(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a4);
  sub_10001BBBC(a1, a2);
  MACAddress.init(data:type:)(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010F9890);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(a1, a2);
    v22 = sub_10001BBBC(a1, a2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v36 = v26;
      v34 = v11;
      *(_DWORD *)v25 = 136315138;
      v33 = v25 + 4;
      v27 = Data.hexString.getter(a1, a2);
      v35 = sub_100016940(v27, v28, &v36);
      v11 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v33, v25 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "beaconingIdentifier: invalid MAC address %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
    }

    v30 = type metadata accessor for UUID(0);
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v13, 1, 1, v30);
    sub_10000F9B8((uint64_t)v13, (uint64_t)v11, &qword_1010ED860);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v11, 1, v30) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v31 + 8))(v11, v30);
    }
    ((void (**)(_QWORD, Class))a4)[2](a4, isa);

    sub_100004048((uint64_t)v13, &qword_1010ED860);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    v29 = *sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a4);
    sub_1004C004C((uint64_t)v20, v29, (uint64_t)a4);
    _Block_release(a4);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  _Block_release(a4);
}

uint64_t sub_100594EE0(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v8 - 8);
  v54 = v8;
  __chkstk_darwin(v8);
  v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v10 - 8);
  v51 = v10;
  __chkstk_darwin(v10);
  v49 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v47 = *(_QWORD *)(v12 - 8);
  v48 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for MACAddress(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocObject(&unk_1010800D0, 24, 7);
  *(_QWORD *)(v22 + 16) = a4;
  _Block_copy(a4);
  sub_10001BBBC(a1, a2);
  MACAddress.init(data:type:)(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    v46 = v22;
    sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010F9890);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(a1, a2);
    v24 = sub_10001BBBC(a1, a2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      aBlock[0] = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = Data.hexString.getter(a1, a2);
      v55 = (_QWORD *)sub_100016940(v29, v30, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "fetchFindMyNetworkStatus: invalid MAC address %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
    }

    v32 = v46;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v34 = v47;
    v33 = v48;
    (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v48);
    v35 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v33);
    v36 = swift_allocObject(&unk_1010800F8, 32, 7);
    *(_QWORD *)(v36 + 16) = sub_10001EEDC;
    *(_QWORD *)(v36 + 24) = v32;
    aBlock[4] = (uint64_t)sub_10059A30C;
    aBlock[5] = v36;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_101080110;
    v37 = _Block_copy(aBlock);
    v38 = swift_retain();
    v39 = v49;
    static DispatchQoS.unspecified.getter(v38);
    v55 = _swiftEmptyArrayStorage;
    v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v42 = sub_10001371C();
    v43 = v52;
    v44 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v41, v42, v54, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v43, v37);
    _Block_release(v37);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    v31 = *sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a4);
    sub_1004C0814((uint64_t)v21, v31, (uint64_t)a4);
    _Block_release(a4);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
  return swift_release();
}

uint64_t sub_100595448(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, const void *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v29 = a3;
  v30 = a4;
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - v15;
  v17 = swift_allocObject(&unk_101080080, 24, 7);
  *(_QWORD *)(v17 + 16) = a6;
  _Block_copy(a6);
  sub_10001BBBC(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  v18 = *sub_10001AA44((_QWORD *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v28 = type metadata accessor for Transaction(0);
  v19 = v10;
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 40) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (char *)swift_allocObject(&unk_1010800A8, v22 + 16, v20 | 7);
  *((_QWORD *)v23 + 2) = v18;
  *((_QWORD *)v23 + 3) = sub_10001D1EC;
  *((_QWORD *)v23 + 4) = v17;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v23[v21], v14, v10);
  v24 = (uint64_t *)&v23[v22];
  v26 = v29;
  v25 = v30;
  *v24 = v29;
  v24[1] = v25;
  swift_retain();
  swift_retain();
  sub_10001BBBC(v26, v25);
  static Transaction.asyncTask(name:block:)("BeaconManagerService.connectUsingMACAndLTK", 42, 2, &unk_1010FF828, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v19);
  return swift_release();
}

uint64_t sub_1005957FC(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;

  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(v8);
  v12 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - v13;
  v15 = swift_allocObject(&unk_101080030, 24, 7);
  *(_QWORD *)(v15 + 16) = a4;
  _Block_copy(a4);
  sub_10001BBBC(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  v16 = *sub_10001AA44((_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  type metadata accessor for Transaction(0);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v14, v8);
  v17 = *(unsigned __int8 *)(v9 + 80);
  v18 = (v17 + 40) & ~v17;
  v19 = (char *)swift_allocObject(&unk_101080058, v18 + v10, v17 | 7);
  *((_QWORD *)v19 + 2) = v16;
  *((_QWORD *)v19 + 3) = sub_10001D1EC;
  *((_QWORD *)v19 + 4) = v15;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v19[v18], v12, v8);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("BeaconManagerService.disconnectFromMACAddress", 45, 2, &unk_1010FF820, v19);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  return swift_release();
}

uint64_t sub_100595B7C(uint64_t a1, unint64_t a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t aBlock[6];

  LODWORD(v47) = a3;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v54 = *(_QWORD *)(v9 - 8);
  v55 = v9;
  __chkstk_darwin(v9);
  v53 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v11 - 8);
  v52 = v11;
  __chkstk_darwin(v11);
  v50 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v16);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MACAddress(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (uint64_t *)((char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = swift_allocObject(&unk_10107FFB8, 24, 7);
  *(_QWORD *)(v23 + 16) = a5;
  _Block_copy(a5);
  sub_10001BBBC(a1, a2);
  MACAddress.init(data:type:)(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v47 = v23;
    sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F9890);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(a1, a2);
    v25 = sub_10001BBBC(a1, a2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      aBlock[0] = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = Data.hexString.getter(a1, a2);
      v56 = (_QWORD *)sub_100016940(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, aBlock, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "setFindMyNetworkStatus: invalid MAC address %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
    }

    v33 = v47;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v35 = v48;
    v34 = v49;
    (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v15, enum case for DispatchQoS.QoSClass.default(_:), v49);
    v36 = (void *)static OS_dispatch_queue.global(qos:)(v15);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v34);
    v37 = swift_allocObject(&unk_10107FFE0, 32, 7);
    *(_QWORD *)(v37 + 16) = sub_10001D1EC;
    *(_QWORD *)(v37 + 24) = v33;
    aBlock[4] = (uint64_t)sub_10059A0C4;
    aBlock[5] = v37;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_10107FFF8;
    v38 = _Block_copy(aBlock);
    v39 = swift_retain();
    v40 = v50;
    static DispatchQoS.unspecified.getter(v39);
    v56 = _swiftEmptyArrayStorage;
    v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v43 = sub_10001371C();
    v44 = v53;
    v45 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v42, v43, v55, v41);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v38);
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v44, v45);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v52);
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    v32 = *sub_10001AA44((_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    _Block_copy(a5);
    sub_1004C0D40(v22, v47 & 1, v32, a5);
    _Block_release(a5);
    (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v22, v19);
  }
  return swift_release();
}

void sub_1005960F0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  id *v18;
  BOOL v19;
  uint64_t v20;
  char v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v5 = sub_100C1B1AC(v38);
  swift_bridgeObjectRelease();
  sub_100013B60();
  v6 = sub_100013BD0();
  v7 = objc_msgSend(v6, "stringForKey:", SPSettingsServiceStateKey);

  if (!v7)
  {
    if (qword_1010E9E60 != -1)
      swift_once(&qword_1010E9E60, sub_1006C5904);
    v7 = (id)qword_1011B7490;
  }
  swift_release();
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = SPDisabledReasonNone;
    v9 = sub_1001C0B20((uint64_t)v8, v5);

    if ((v9 & 1) == 0)
      goto LABEL_14;
  }
  v10 = SPServiceStateEnabled;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  if (v11 == v14 && v13 == v15)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
LABEL_14:
      v18 = (id *)&SPOwnerDataStateNotAvailable;
      v19 = (a1 & 1) == 0;
      goto LABEL_15;
    }
  }
  if ((a1 & 1) == 0)
  {
    v18 = (id *)&SPOwnerDataStateInitializing;
    goto LABEL_25;
  }
  v20 = sub_1007FDEC4();
  if ((*(_BYTE *)(v20 + 184) & 1) != 0
    || *(_QWORD *)(v20 + 136) && (swift_retain(), v21 = sub_1003542D4(), swift_release(), (v21 & 1) != 0))
  {
    swift_release();
    v18 = (id *)&SPOwnerDataStateUpdating;
    goto LABEL_25;
  }
  v37 = sub_1002EFAD0();
  swift_release();
  v18 = (id *)&SPOwnerDataStateUpdating;
  v19 = (v37 & 1) == 0;
LABEL_15:
  if (!v19)
    v18 = (id *)&SPOwnerDataStateUpToDate;
LABEL_25:
  v22 = *v18;
  v23 = v7;
  sub_100CA7F1C(v5);
  swift_bridgeObjectRelease();
  v24 = objc_allocWithZone((Class)SPOwnerSessionState);
  type metadata accessor for SPDisabledReason(0);
  sub_100006204(&qword_1010FF800, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DD2C);
  v25 = v22;
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v27 = objc_msgSend(v24, "initWithServiceState:disabledReasons:ownerDataState:", v23, isa, v25);

  v29 = static os_log_type_t.default.getter(v28);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v30 = qword_1011B7D28;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = xmmword_100E22B00;
  v33 = objc_msgSend(v27, "description");
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 64) = sub_10001AA00();
  *(_QWORD *)(v32 + 32) = v34;
  *(_QWORD *)(v32 + 40) = v36;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "ownerSessionState(completion:) %@", 33, 2, v32);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, id))(a3 + 16))(a3, v27);

}

void sub_100596510(uint64_t a1, unint64_t a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;

  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MACAddress(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a4);
  sub_10001BBBC(a1, a2);
  MACAddress.init(data:type:)(a1);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v15 = sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F9890);
    v16 = static os_log_type_t.error.getter(v15);
    if (qword_1010EA228 != -1)
      swift_once(&qword_1010EA228, sub_100B5D7D4);
    v17 = qword_1011B7CF8;
    v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
    v20 = Data.hexString.getter(a1, a2);
    v22 = v21;
    *(_QWORD *)(v19 + 56) = &type metadata for String;
    *(_QWORD *)(v19 + 64) = sub_10001AA00();
    *(_QWORD *)(v19 + 32) = v20;
    *(_QWORD *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Unable to parse MAC address %@", 30, 2, v19);
    swift_bridgeObjectRelease();
    type metadata accessor for SPOwnerSessionError(0);
    v24 = v23;
    v30 = 5;
    v25 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v26 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)(&v31, &v30, v25, v24, v26);
    v27 = v31;
    v28 = (void *)_convertErrorToNSError(_:)(v31);
    ((void (**)(_QWORD, void *))a4)[2](a4, v28);

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v29 = *(_QWORD *)(*(_QWORD *)(*sub_10001AA44((_QWORD *)(a3+ OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a3+ OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation+ 24))+ OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_bluetoothCommunicatorCoordinator)+ 24);
    _Block_copy(a4);
    sub_100E10A34((uint64_t)v14, v29, a4);
    _Block_release(a4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  _Block_release(a4);
}

void sub_1005967DC(char **a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _BYTE *v34;
  _BYTE *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  const char *v40;
  uint64_t v41;
  const void *v42;
  char v43[8];
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char **v47;
  const void *v48;
  _QWORD *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD v55[15];

  v8 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v8);
  v52 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for OwnedBeaconGroup(0);
  v10 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100599F18(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation, (uint64_t)v55);
  v13 = sub_10001AA44(v55, v55[3]);
  if ((unint64_t)a2 >> 62)
  {
LABEL_22:
    v36 = v13;
    if (a2 < 0)
      v37 = a2;
    else
      v37 = a2 & 0xFFFFFFFFFFFFFF8;
    _Block_copy(a4);
    swift_bridgeObjectRetain(a2);
    v38 = v37;
    v13 = v36;
    v14 = _CocoaArrayWrapper.endIndex.getter(v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    v14 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    _Block_copy(a4);
  }
  v15 = _swiftEmptyArrayStorage;
  v50 = v12;
  v51 = v10;
  if (v14)
  {
    v49 = v13;
    v54 = _swiftEmptyArrayStorage;
    v13 = &v54;
    sub_10009A9F4(0, v14 & ~(v14 >> 63), 0);
    if (v14 < 0)
    {
      __break(1u);
LABEL_27:
      v39 = v48;
      _Block_release(v48);
      _Block_release(v39);
      LODWORD(v45) = 0;
      v44 = 3451;
      v43[0] = 2;
      v40 = "Negative value is not representable";
      v41 = 35;
    }
    else
    {
      v47 = a1;
      v48 = a4;
      a4 = 0;
      v15 = v54;
      v10 = a2 & 0xC000000000000001;
      a1 = &selRef_connectedServicesChanged_;
      while (1)
      {
        if ((const void *)v14 == a4)
        {
          __break(1u);
          goto LABEL_22;
        }
        if (v10)
          v16 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(a4, a2);
        else
          v16 = *(id *)(a2 + 8 * (_QWORD)a4 + 32);
        v13 = v16;
        v17 = (unint64_t)objc_msgSend(v16, "integerValue", v47);
        if ((v17 & 0x8000000000000000) != 0)
          goto LABEL_27;
        v18 = v17;
        if (v17 >= 0x100)
          break;

        v54 = v15;
        v12 = (char *)v15[2];
        v19 = v15[3];
        if ((unint64_t)v12 >= v19 >> 1)
        {
          v13 = &v54;
          sub_10009A9F4(v19 > 1, (int64_t)(v12 + 1), 1);
          v15 = v54;
        }
        a4 = (char *)a4 + 1;
        v15[2] = v12 + 1;
        v12[(_QWORD)v15 + 32] = v18;
        if ((const void *)v14 == a4)
        {
          a4 = v48;
          v20 = (uint64_t)v52;
          a1 = v47;
          v13 = v49;
          goto LABEL_17;
        }
      }
      v42 = v48;
      _Block_release(v48);
      _Block_release(v42);
      LODWORD(v45) = 0;
      v44 = 3455;
      v43[0] = 2;
      v40 = "Not enough bits to represent the passed value";
      v41 = 45;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v40, v41, 2, "Swift/Integers.swift", 20, v43[0], v44, v45);
    __break(1u);
  }
  else
  {
    v20 = (uint64_t)v52;
LABEL_17:
    v21 = *v13;
    _Block_copy(a4);
    _Block_copy(a4);
    sub_10081EDA8((uint64_t)a1, v20);
    v22 = v53;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v20, 1, v53) == 1)
    {
      sub_100004048(v20, (uint64_t *)&unk_1010FF7F0);
      v23 = sub_10028FA08();
      v24 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v23, 0, 0);
      *v25 = 1;
      v26 = (void *)_convertErrorToNSError(_:)(v24);
      (*((void (**)(const void *, void *))a4 + 2))(a4, v26);

      swift_errorRelease(v24);
    }
    else
    {
      v27 = (uint64_t)v50;
      v28 = sub_1000126EC(v20, (uint64_t)v50, type metadata accessor for OwnedBeaconGroup);
      v29 = *(_QWORD *)(v27 + *(int *)(v22 + 40));
      __chkstk_darwin(v28);
      v45 = v27;
      v46 = v15;
      swift_bridgeObjectRetain(v29);
      sub_100307440((uint64_t)_swiftEmptyArrayStorage, (void (*)(uint64_t *, _QWORD *))sub_10059A078, (uint64_t)v43, v29);
      v31 = v30;
      swift_bridgeObjectRelease();
      v32 = *(_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_classicPairingSupport);
      v33 = (void *)a4;
      v34 = (_BYTE *)(v27 + *(int *)(v22 + 28));
      _Block_copy(v33);
      v35 = v34;
      a4 = v33;
      sub_1002DC07C(v35, v31, v32, (void (**)(_QWORD, _QWORD))v33);
      _Block_release(v33);
      swift_bridgeObjectRelease();
      sub_1000126B0(v27, type metadata accessor for OwnedBeaconGroup);
    }
    _Block_release(a4);
    _Block_release(a4);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
    _Block_release(a4);
  }
}

void sub_100596C94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  Class isa;
  uint64_t ObjectType;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v5 = qword_1011B7D28;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v9 = String.init<A>(describing:)(&ObjectType, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD00000000000001ELL;
  *(_QWORD *)(v7 + 80) = 0x8000000100EDC240;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@:%{public}@", 21, 2, v7);
  swift_bridgeObjectRelease();
  v13 = *sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v14 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&ObjectType, v14);
  swift_release();
  v15 = ObjectType;
  v16 = *(_QWORD *)(v13 + 280);
  v17 = sub_100017368();
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v18 = qword_1011B7160;
  swift_retain();
  v19 = sub_1001F3840(v17, v16, v18, v15);
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v20 = sub_100594A0C(v19, v13);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100CA864C((uint64_t)v20);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
  sub_1000170AC((unint64_t *)&qword_1010F7AC0, &qword_1010F2158, SPBeacon_ptr);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();

}

uint64_t sub_100596F24(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  void (*v27)(uint64_t, _QWORD *, uint64_t);
  uint64_t ObjectType;

  v13 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v14 = os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DD8, a4, a5, 2, _swiftEmptyArrayStorage, a7);
  v15 = static os_log_type_t.default.getter(v14);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v16 = qword_1011B7D50;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v17, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v19 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v20 = String.init<A>(describing:)(&ObjectType, v19);
  v22 = v21;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v23 = sub_10001AA00();
  *(_QWORD *)(v18 + 32) = v20;
  *(_QWORD *)(v18 + 40) = v22;
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = v23;
  *(_QWORD *)(v18 + 64) = v23;
  *(_QWORD *)(v18 + 72) = 0xD000000000000039;
  *(_QWORD *)(v18 + 80) = a6;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "%{public}@: %{public}@", 22, 2, v18);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v24 = sub_1007928C0();
  v27(a1, v24, a3);
  return swift_release();
}

uint64_t sub_100597100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  uint64_t ObjectType;

  v6 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v7 = os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, qword_1011B7DD8, "withdrawn unauthorized tracking", 31, 2, _swiftEmptyArrayStorage);
  v8 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v9 = qword_1011B7D50;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD00000000000003BLL;
  *(_QWORD *)(v11 + 80) = 0x8000000100EDAF00;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22, 2, v11);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v17 = (void **)sub_1007928C0();
  sub_1005763A4(a1, v17, a3);
  return swift_release();
}

uint64_t sub_1005972DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  void *v25;
  uint64_t ObjectType;

  v25 = a1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v25 - v10;
  v12 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v13 = qword_1011B7D50;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v16 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v17 = String.init<A>(describing:)(&ObjectType, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = 0xD000000000000038;
  *(_QWORD *)(v15 + 80) = 0x8000000100EDC140;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%{public}@: %{public}@", 22, 2, v15);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1007928C0();
  sub_100562940(v25, (uint64_t)v11);
  swift_release();
  sub_10000F9B8((uint64_t)v11, (uint64_t)v8, (uint64_t *)&unk_1010EA690);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, v21) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v21);
  }
  (*(void (**)(uint64_t, Class, _QWORD))(a3 + 16))(a3, isa, 0);

  return sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_100597530(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t ObjectType;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v5 = qword_1011B7D50;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v9 = String.init<A>(describing:)(&ObjectType, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD000000000000034;
  *(_QWORD *)(v7 + 80) = 0x8000000100EDC100;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@: %{public}@", 22, 2, v7);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1007928C0();
  sub_1005750A4(a1);
  return swift_release();
}

uint64_t sub_1005976AC(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;

  v23 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = (uint64_t)a3;
  v9 = _Block_copy(a3);
  v10 = static os_log_type_t.default.getter(v9);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v11 = qword_1011B7D50;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v13 = swift_allocObject(v12, 112, 7);
  *(_OWORD *)(v13 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a2);
  v14 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v15 = String.init<A>(describing:)(&ObjectType, v14);
  v17 = v16;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  v18 = sub_10001AA00();
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  *(_QWORD *)(v13 + 96) = &type metadata for String;
  *(_QWORD *)(v13 + 104) = v18;
  *(_QWORD *)(v13 + 64) = v18;
  *(_QWORD *)(v13 + 72) = 0xD00000000000002DLL;
  *(_QWORD *)(v13 + 80) = 0x8000000100EDC0B0;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "%{public}@: %{public}@", 22, 2, v13);
  v19 = swift_bridgeObjectRelease();
  UUID.init()(v19);
  v20 = sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_10031DB90((uint64_t)v8, v23, 2, *v20, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100597874(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  id v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[5];
  _BYTE v50[48];

  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  __chkstk_darwin(v9);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v45 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (char *)&v41 - v16;
  v46 = swift_allocObject(&unk_10107FCE8, 24, 7);
  *(_QWORD *)(v46 + 16) = a3;
  _Block_copy(a3);
  _Block_copy(a3);
  v43 = a1;
  v18 = objc_msgSend(a1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  sub_10080B648((uint64_t)v17, (uint64_t)v50);
  v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v19(v17, v12);
  sub_10000F9B8((uint64_t)v50, (uint64_t)v49, (uint64_t *)&unk_1010EE310);
  v44 = v19;
  if (v49[3])
  {
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
    v21 = type metadata accessor for LocalFindableAccessoryRecord(0);
    v22 = swift_dynamicCast(v11, v49, v20, v21, 6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, v22 ^ 1u, 1, v21);
  }
  else
  {
    sub_100004048((uint64_t)v49, (uint64_t *)&unk_1010EE310);
    v21 = type metadata accessor for LocalFindableAccessoryRecord(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 1, 1, v21);
  }
  type metadata accessor for LocalFindableAccessoryRecord(0);
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v11, 1, v21);
  sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010EDC50);
  if (v23)
  {
    sub_10000F9B8((uint64_t)v50, (uint64_t)&v47, (uint64_t *)&unk_1010EE310);
    if (v48)
    {
      sub_10000F9FC(&v47, (uint64_t)v49);
      v24 = *sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
      _Block_copy(a3);
      sub_100333218((uint64_t)v49, v24, a3);
      _Block_release(a3);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
    }
    else
    {
      sub_100004048((uint64_t)&v47, (uint64_t *)&unk_1010EE310);
      type metadata accessor for SPOwnerSessionError(0);
      v36 = v35;
      *(_QWORD *)&v47 = 2;
      v37 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v38 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
      _BridgedStoredNSError.init(_:userInfo:)(v49, &v47, v37, v36, v38);
      v39 = (void *)v49[0];
      v40 = (void *)_convertErrorToNSError(_:)(v49[0]);
      ((void (**)(_QWORD, void *))a3)[2](a3, v40);

    }
    sub_100004048((uint64_t)v50, (uint64_t *)&unk_1010EE310);
  }
  else
  {
    v25 = sub_10001AA44((_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    v26 = objc_msgSend(v43, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

    v27 = swift_allocObject(&unk_10107FD10, 32, 7);
    v42 = v8;
    v28 = v46;
    *(_QWORD *)(v27 + 16) = sub_10001D1EC;
    *(_QWORD *)(v27 + 24) = v28;
    v29 = *v25;
    v30 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v8, 1, 1, v30);
    v31 = v45;
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v45, v17, v12);
    v32 = *(unsigned __int8 *)(v13 + 80);
    v33 = (v32 + 56) & ~v32;
    v34 = (char *)swift_allocObject(&unk_10107FD38, v33 + v14, v32 | 7);
    *((_QWORD *)v34 + 2) = 0;
    *((_QWORD *)v34 + 3) = 0;
    *((_QWORD *)v34 + 4) = v29;
    *((_QWORD *)v34 + 5) = sub_10015A05C;
    *((_QWORD *)v34 + 6) = v27;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v34[v33], v31, v12);
    swift_retain();
    swift_retain();
    swift_retain();
    sub_100691AC0((uint64_t)v42, (uint64_t)&unk_1010F4740, (uint64_t)v34);
    swift_release();
    swift_release();
    v44(v17, v12);
    sub_100004048((uint64_t)v50, (uint64_t *)&unk_1010EE310);
  }
  swift_release();
  _Block_release(a3);
}

void sub_100597D7C(void *a1, char *a2, const void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  id v45;
  void (*v46)(char *, uint64_t);
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  id v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t *v82;
  id v83;
  id v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  id v90;
  id v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  void (*v103)(char *, uint64_t);
  NSArray v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  void (*v115)(char *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;
  id v120;
  uint64_t v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  unint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  void *v135;
  id v136;
  id v137;
  id v138;
  id v139;
  id v140;
  id v141;
  id v142;
  id v143;
  void (*v144)(uint64_t, uint64_t);
  uint64_t v145;
  id v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  uint64_t v158;
  id v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  char *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  void **aBlock;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, void *);
  void *v186;
  uint64_t (*v187)(uint64_t, uint64_t);
  uint64_t v188;

  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v174 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for UUID(0);
  v180 = *(_QWORD *)(v178 - 8);
  v9 = __chkstk_darwin(v178);
  v175 = (uint64_t)&v174 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v174 = (uint64_t)&v174 - v12;
  v13 = __chkstk_darwin(v11);
  v176 = (char *)&v174 - v14;
  __chkstk_darwin(v13);
  v177 = (void (*)(char *, uint64_t))((char *)&v174 - v15);
  _Block_copy(a3);
  _Block_copy(a3);
  v182 = swift_allocObject(&unk_10107FBF8, 24, 7);
  *(_QWORD *)(v182 + 16) = a3;
  _Block_copy(a3);
  _Block_copy(a3);
  _Block_copy(a3);
  v181 = (void *)a3;
  v16 = _Block_copy(a3);
  v17 = static os_log_type_t.default.getter(v16);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v18 = qword_1011B7D50;
  v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v20 = swift_allocObject(v19, 152, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100E221E0;
  v179 = a2;
  aBlock = (void **)swift_getObjectType(a2);
  v21 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v22 = String.init<A>(describing:)(&aBlock, v21);
  v24 = v23;
  *(_QWORD *)(v20 + 56) = &type metadata for String;
  v25 = sub_10001AA00();
  *(_QWORD *)(v20 + 32) = v22;
  *(_QWORD *)(v20 + 40) = v24;
  *(_QWORD *)(v20 + 96) = &type metadata for String;
  *(_QWORD *)(v20 + 104) = v25;
  *(_QWORD *)(v20 + 64) = v25;
  *(_QWORD *)(v20 + 72) = 0xD000000000000016;
  *(_QWORD *)(v20 + 80) = 0x8000000100EDBF50;
  aBlock = (void **)objc_msgSend(a1, "type");
  v26 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  *(_QWORD *)(v20 + 136) = &type metadata for String;
  *(_QWORD *)(v20 + 144) = v25;
  *(_QWORD *)(v20 + 112) = v26;
  *(_QWORD *)(v20 + 120) = v27;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "%{public}@: %{public}@ - received command type - %{public}@", 59, 2, v20);
  swift_bridgeObjectRelease();
  switch((unint64_t)objc_msgSend(a1, "type"))
  {
    case 0uLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v34 = sub_10001A9A8(&qword_1011003C0);
      v35 = v180;
      v36 = *(unsigned __int8 *)(v180 + 80);
      v37 = (v36 + 32) & ~v36;
      v38 = swift_allocObject(v34, v37 + *(_QWORD *)(v180 + 72), v36 | 7);
      *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
      v39 = objc_msgSend(a1, "beaconIdentifier");
      v40 = v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v39);

      (*(void (**)(uint64_t, void (*)(char *, uint64_t), uint64_t))(v35 + 32))(v38 + v37, v40, v178);
      v41 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v8, 1, 1, v41);
      v42 = swift_allocObject(&unk_10107FCC0, 32, 7);
      v43 = v182;
      *(_QWORD *)(v42 + 16) = sub_10001D1EC;
      *(_QWORD *)(v42 + 24) = v43;
      swift_retain();
      sub_100309F78(v38, (uint64_t)v8, (char *)&_swiftEmptySetSingleton, 1, (uint64_t)sub_1002A3AD4, v42);
      swift_bridgeObjectRelease();
      swift_release();
      sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010EA690);
      goto LABEL_29;
    case 1uLL:
      v44 = sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v45 = objc_msgSend(a1, "identifier");
      v46 = v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

      v47 = objc_msgSend(a1, "beaconIdentifier");
      v48 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

      v49 = *v44;
      v51 = static os_log_type_t.default.getter(v50);
      v52 = qword_1011B7D50;
      v53 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v53 + 16) = xmmword_100E22B00;
      v54 = UUID.uuidString.getter(v53);
      *(_QWORD *)(v53 + 56) = &type metadata for String;
      *(_QWORD *)(v53 + 64) = v25;
      *(_QWORD *)(v53 + 32) = v54;
      *(_QWORD *)(v53 + 40) = v55;
      os_log(_:dso:log:_:_:)(v51, &_mh_execute_header, v52, "Command enable notify when found uuid: %@", 41, 2, v53);
      swift_bridgeObjectRelease();
      v56 = *(_QWORD *)(v49 + 48);
      v33 = v181;
      _Block_copy(v181);
      sub_100213DC8(v46, v48, v56, v33);
      goto LABEL_9;
    case 2uLL:
      v57 = sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v58 = objc_msgSend(a1, "identifier");
      v46 = v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v58);

      v59 = objc_msgSend(a1, "beaconIdentifier");
      v48 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

      v60 = *v57;
      v62 = static os_log_type_t.default.getter(v61);
      v63 = qword_1011B7D50;
      v64 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v64 + 16) = xmmword_100E22B00;
      v65 = UUID.uuidString.getter(v64);
      *(_QWORD *)(v64 + 56) = &type metadata for String;
      *(_QWORD *)(v64 + 64) = v25;
      *(_QWORD *)(v64 + 32) = v65;
      *(_QWORD *)(v64 + 40) = v66;
      os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "Command disable notify when found uuid: %@", 42, 2, v64);
      swift_bridgeObjectRelease();
      v67 = *(_QWORD *)(v60 + 48);
      v33 = v181;
      _Block_copy(v181);
      sub_1002169FC((uint64_t)v46, v48, v67, v33);
LABEL_9:
      _Block_release(v33);
      v68 = *(void (**)(uint64_t, uint64_t))(v180 + 8);
      v69 = v178;
      v68(v48, v178);
      v70 = (uint64_t)v46;
      goto LABEL_11;
    case 3uLL:
      v71 = sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v72 = objc_msgSend(a1, "identifier");
      v73 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v72);

      v74 = objc_msgSend(a1, "beaconIdentifier");
      v75 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v74);

      v76 = objc_msgSend(a1, "playSoundContext");
      v77 = *v71;
      v33 = v181;
      _Block_copy(v181);
      sub_10031DB90(v73, v75, (uint64_t)v76, v77, (uint64_t)v33);
      v68 = *(void (**)(uint64_t, uint64_t))(v180 + 8);
      v69 = v178;
      v68(v75, v178);
      v70 = v73;
LABEL_11:
      v68(v70, v69);
      goto LABEL_48;
    case 4uLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v78 = objc_msgSend(a1, "identifier");
      v79 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v78);

      v80 = objc_msgSend(a1, "beaconIdentifier");
      v81 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v80);

      sub_10031EDB4(v79, v81, (uint64_t)sub_10001D1EC, v182);
      goto LABEL_28;
    case 5uLL:
      sub_100599F18((uint64_t)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], (uint64_t)&aBlock);
      v82 = sub_10001AA44(&aBlock, (uint64_t)v186);
      v83 = objc_msgSend(a1, "beaconIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v83);

      v84 = objc_msgSend(a1, "lostModeMessage");
      if (v84)
      {
        v85 = v84;
        v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        v88 = v87;

      }
      else
      {
        v86 = 0;
        v88 = 0;
      }
      v146 = objc_msgSend(a1, "lostModePhoneNumber");
      if (v146)
      {
        v147 = v146;
        v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
        v150 = v149;

      }
      else
      {
        v148 = 0;
        v150 = 0;
      }
      v158 = v178;
      v159 = objc_msgSend(a1, "lostModeEmail");
      if (v159)
      {
        v160 = v159;
        v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v159);
        v163 = v162;

      }
      else
      {
        v161 = 0;
        v163 = 0;
      }
      v169 = *v82;
      v33 = v181;
      _Block_copy(v181);
      v172 = v169;
      v170 = v174;
      sub_100334830(v174, 1, v86, v88, v148, v150, v161, v163, v172, v33);
      goto LABEL_47;
    case 6uLL:
      sub_100599F18((uint64_t)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], (uint64_t)&aBlock);
      v89 = sub_10001AA44(&aBlock, (uint64_t)v186);
      v90 = objc_msgSend(a1, "beaconIdentifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v90);

      v91 = objc_msgSend(a1, "lostModeMessage");
      if (v91)
      {
        v92 = v91;
        v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
        v95 = v94;

      }
      else
      {
        v93 = 0;
        v95 = 0;
      }
      v151 = objc_msgSend(a1, "lostModePhoneNumber");
      if (v151)
      {
        v152 = v151;
        v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v151);
        v155 = v154;

      }
      else
      {
        v153 = 0;
        v155 = 0;
      }
      v158 = v178;
      v164 = objc_msgSend(a1, "lostModeEmail");
      if (v164)
      {
        v165 = v164;
        v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
        v168 = v167;

      }
      else
      {
        v166 = 0;
        v168 = 0;
      }
      v171 = *v89;
      v33 = v181;
      _Block_copy(v181);
      v173 = v171;
      v170 = v175;
      sub_100334830(v175, 0, v93, v95, v153, v155, v166, v168, v173, v33);
LABEL_47:
      _Block_release(v33);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v170, v158);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      goto LABEL_48;
    case 7uLL:
      v96 = sub_10001A9A8(&qword_1011003C0);
      v97 = v180;
      v98 = *(unsigned __int8 *)(v180 + 80);
      v99 = (v98 + 32) & ~v98;
      v100 = swift_allocObject(v96, v99 + *(_QWORD *)(v180 + 72), v98 | 7);
      *(_OWORD *)(v100 + 16) = xmmword_100E22B00;
      v101 = v100 + v99;
      v102 = objc_msgSend(a1, "beaconIdentifier");
      v103 = v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v102);

      (*(void (**)(uint64_t, void (*)(char *, uint64_t), uint64_t))(v97 + 32))(v101, v103, v178);
      v104.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v105 = swift_allocObject(&unk_10107FC70, 32, 7);
      v106 = v182;
      *(_QWORD *)(v105 + 16) = sub_10001D1EC;
      *(_QWORD *)(v105 + 24) = v106;
      v187 = sub_100599F6C;
      v188 = v105;
      aBlock = _NSConcreteStackBlock;
      v184 = 1107296256;
      v185 = sub_10002683C;
      v186 = &unk_10107FC88;
      v107 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v179, "enableSeparationMonitoringForBeacons:completion:", v104.super.isa, v107);
      goto LABEL_19;
    case 8uLL:
      v108 = sub_10001A9A8(&qword_1011003C0);
      v109 = v180;
      v110 = *(unsigned __int8 *)(v180 + 80);
      v111 = (v110 + 32) & ~v110;
      v112 = swift_allocObject(v108, v111 + *(_QWORD *)(v180 + 72), v110 | 7);
      *(_OWORD *)(v112 + 16) = xmmword_100E22B00;
      v113 = v112 + v111;
      v114 = objc_msgSend(a1, "beaconIdentifier");
      v115 = v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v114);

      (*(void (**)(uint64_t, void (*)(char *, uint64_t), uint64_t))(v109 + 32))(v113, v115, v178);
      v104.super.isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v116 = swift_allocObject(&unk_10107FC20, 32, 7);
      v117 = v182;
      *(_QWORD *)(v116 + 16) = sub_10001D1EC;
      *(_QWORD *)(v116 + 24) = v117;
      v187 = sub_10059A5EC;
      v188 = v116;
      aBlock = _NSConcreteStackBlock;
      v184 = 1107296256;
      v185 = sub_10002683C;
      v186 = &unk_10107FC38;
      v107 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v179, "disableSeparationMonitoringForBeacons:completion:", v104.super.isa, v107);
LABEL_19:
      _Block_release(v107);
      swift_release();

      v33 = v181;
      goto LABEL_49;
    case 9uLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v118 = objc_msgSend(a1, "identifier");
      v79 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v118);

      v119 = objc_msgSend(a1, "beaconIdentifier");
      v81 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v119);

      sub_10032103C(v79, v81, (uint64_t)sub_10001D1EC, v182);
      goto LABEL_28;
    case 0xAuLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v120 = objc_msgSend(a1, "beaconIdentifier");
      v121 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v120);

      sub_10031F7E4(v121, (uint64_t)sub_10001D1EC, v182);
      (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v121, v178);
      goto LABEL_29;
    case 0xBuLL:
      v122 = objc_msgSend(a1, "obfuscatedIdentifier");
      if (v122)
      {
        v123 = v122;
        v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v122);
        v126 = v125;

        v128 = static os_log_type_t.default.getter(v127);
        v129 = qword_1011B7D50;
        v130 = swift_allocObject(v19, 72, 7);
        *(_OWORD *)(v130 + 16) = xmmword_100E22B00;
        *(_QWORD *)(v130 + 56) = &type metadata for String;
        *(_QWORD *)(v130 + 64) = v25;
        *(_QWORD *)(v130 + 32) = v124;
        *(_QWORD *)(v130 + 40) = v126;
        *(_QWORD *)&v131 = swift_bridgeObjectRetain(v126).n128_u64[0];
        os_log(_:dso:log:_:_:)(v128, &_mh_execute_header, v129, "#Durian: Command setObfuscated identifier: %@", 45, 2, v130, v131);
        swift_bridgeObjectRelease();
        v132 = sub_10028FA08();
        v133 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v132, 0, 0);
        *v134 = 1;
        v135 = (void *)_convertErrorToNSError(_:)(v133);
        v33 = v181;
        (*((void (**)(void *, void *))v181 + 2))(v181, v135);

        swift_errorRelease(v133);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v156 = sub_100599ED4();
        v29 = swift_allocError(&type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError, v156, 0, 0);
        v30 = v29;
        *v157 = 0;
LABEL_5:
        v32 = (void *)_convertErrorToNSError(_:)(v29);
        v33 = v181;
        (*((void (**)(void *, void *))v181 + 2))(v181, v32);

        swift_errorRelease(v30);
LABEL_48:
        swift_release();
      }
LABEL_49:
      _Block_release(v33);
      _Block_release(v33);
      _Block_release(v33);
      _Block_release(v33);
      _Block_release(v33);
      return;
    case 0xCuLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v136 = objc_msgSend(a1, "identifier");
      v79 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v136);

      v137 = objc_msgSend(a1, "beaconIdentifier");
      v81 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v137);

      sub_100320DF4(v79, v81, (uint64_t)sub_10001D1EC, v182);
      goto LABEL_28;
    case 0xDuLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v138 = objc_msgSend(a1, "identifier");
      v79 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v138);

      v139 = objc_msgSend(a1, "beaconIdentifier");
      v81 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v139);

      sub_100321570(v79, v81, (uint64_t)sub_10001D1EC, v182);
      goto LABEL_28;
    case 0xEuLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v140 = objc_msgSend(a1, "identifier");
      v79 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v140);

      v141 = objc_msgSend(a1, "beaconIdentifier");
      v81 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v141);

      sub_10031A9B0(v79, v81, (uint64_t)sub_10001D1EC, v182);
      goto LABEL_28;
    case 0xFuLL:
      sub_10001AA44(&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v179[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
      v142 = objc_msgSend(a1, "identifier");
      v79 = (uint64_t)v177;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v142);

      v143 = objc_msgSend(a1, "beaconIdentifier");
      v81 = (uint64_t)v176;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v143);

      sub_10031C2A0(v79, v81, (uint64_t)sub_10001D1EC, v182);
LABEL_28:
      v144 = *(void (**)(uint64_t, uint64_t))(v180 + 8);
      v145 = v178;
      v144(v81, v178);
      v144(v79, v145);
LABEL_29:
      swift_release();
      v33 = v181;
      goto LABEL_49;
    default:
      v28 = sub_100599ED4();
      v29 = swift_allocError(&type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError, v28, 0, 0);
      v30 = v29;
      *v31 = 1;
      goto LABEL_5;
  }
}

void sub_10059904C(uint64_t a1, const void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  const void *v26;
  uint64_t ObjectType;

  v26 = a2;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = static os_log_type_t.default.getter(v5);
  if (qword_1010EA288 != -1)
    swift_once(&qword_1010EA288, sub_100B5DC14);
  v9 = qword_1011B7D68;
  v10 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a1);
  v12 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v13 = String.init<A>(describing:)(&ObjectType, v12);
  v15 = v14;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  v16 = sub_10001AA00();
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 96) = &type metadata for String;
  *(_QWORD *)(v11 + 104) = v16;
  *(_QWORD *)(v11 + 64) = v16;
  *(_QWORD *)(v11 + 72) = 0xD00000000000001FLL;
  *(_QWORD *)(v11 + 80) = 0x8000000100EDBE80;
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "%{public}@: %{public}@", 22, 2, v11);
  swift_bridgeObjectRelease();
  v17 = sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v18 = *v17;
  v19 = *(void **)(*v17 + 64);
  *v7 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v3);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_1010EA250, sub_100B5D964);
    goto LABEL_6;
  }
  type metadata accessor for Transaction(0);
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.triggerFamilyUpdated", 50, 2, sub_100599EBC, v18, &type metadata for () + 1);
  if (!*(_QWORD *)(v18 + 40))
  {
    _Block_release(v26);
    __break(1u);
    return;
  }
  v22 = swift_retain();
  v3 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA250 != -1)
    goto LABEL_10;
LABEL_6:
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, qword_1011B7D30, "Intents disabled. Not sending intents", 37, 2, _swiftEmptyArrayStorage);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B6EC(ObjectType);
  v24 = v23;
  swift_bridgeObjectRelease();
  (*((void (**)(const void *, _QWORD, double))v26 + 2))(v26, 0, v24);
  swift_release();
}

void sub_100599368(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA288 != -1)
    swift_once(&qword_1010EA288, sub_100B5DC14);
  v5 = qword_1011B7D68;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v9 = String.init<A>(describing:)(&ObjectType, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD000000000000021;
  *(_QWORD *)(v7 + 80) = 0x8000000100EDBE10;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%{public}@: %{public}@", 22, 2, v7);
  swift_bridgeObjectRelease();
  v13 = *(_QWORD *)(*sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24))+ 40);
  if (v13)
  {
    v14 = swift_retain();
    v15 = static os_log_type_t.default.getter(v14);
    if (qword_1010EA250 != -1)
      swift_once(&qword_1010EA250, sub_100B5D964);
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7D30, "Stop sending intents", 20, 2, _swiftEmptyArrayStorage);
    v16 = sub_10039C62C();
    swift_retain();
    sub_10059429C(v16, v13);
    swift_bridgeObjectRelease();
    swift_release();
    a2[2](a2, 0);
    swift_release();
  }
  else
  {
    _Block_release(a2);
    __break(1u);
  }
}

uint64_t sub_10059957C(uint64_t a1, unint64_t a2, int a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t (**v25)(uint64_t);
  _BYTE v27[4];
  int v28;

  v28 = a3;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v27[-v15];
  v17 = swift_allocObject(&unk_10107FA90, 24, 7);
  *(_QWORD *)(v17 + 16) = a4;
  _Block_copy(a4);
  sub_10001BBBC(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  v18 = swift_allocObject(&unk_10107FAB8, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10059A5E4;
  *(_QWORD *)(v18 + 24) = v17;
  v19 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, v10);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 33) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10107FAE0, v22 + 16, v20 | 7);
  v24 = v28 & 1;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_BYTE *)(v23 + 32) = v24;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v23 + v21, v14, v10);
  v25 = (uint64_t (**)(uint64_t))(v23 + v22);
  *v25 = sub_100599B54;
  v25[1] = (uint64_t (*)(uint64_t))v18;
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_1010FF7B0, v23);
  swift_release();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v16, v10);
  return swift_release();
}

uint64_t sub_1005997F0(uint64_t a1, unint64_t a2, int a3, const void *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t (**v25)(uint64_t);
  _BYTE v27[4];
  int v28;

  v28 = a3;
  v7 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v7);
  v9 = &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = &v27[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v16 = &v27[-v15];
  v17 = swift_allocObject(&unk_10107FA18, 24, 7);
  *(_QWORD *)(v17 + 16) = a4;
  _Block_copy(a4);
  sub_10001BBBC(a1, a2);
  MACAddress.init(dataRepresentation:)(a1, a2);
  v18 = swift_allocObject(&unk_10107FA40, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10059A5E4;
  *(_QWORD *)(v18 + 24) = v17;
  v19 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v9, 1, 1, v19);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v16, v10);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v21 = (v20 + 33) & ~v20;
  v22 = (v12 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10107FA68, v22 + 16, v20 | 7);
  v24 = v28 & 1;
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = 0;
  *(_BYTE *)(v23 + 32) = v24;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v23 + v21, v14, v10);
  v25 = (uint64_t (**)(uint64_t))(v23 + v22);
  *v25 = sub_100599A64;
  v25[1] = (uint64_t (*)(uint64_t))v18;
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v9, (uint64_t)&unk_1010FF7A8, v23);
  swift_release();
  swift_release();
  (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v16, v10);
  return swift_release();
}

uint64_t sub_100599A64(uint64_t a1)
{
  uint64_t v1;

  return sub_100593C6C(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010FD188, type metadata accessor for AccessoryMetadata, (uint64_t (*)(uint64_t))sub_100133294);
}

uint64_t sub_100599A98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_BYTE *)(v1 + 32);
  v9 = v1 + v5;
  v10 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010FD1BC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1004A4194(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100599B54(uint64_t a1)
{
  uint64_t v1;

  return sub_100593C6C(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), &qword_1010FD1A0, type metadata accessor for RawAccessoryMetadata, (uint64_t (*)(uint64_t))sub_100134998);
}

uint64_t sub_100599B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 33) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100599C1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = *(_BYTE *)(v1 + 32);
  v9 = v1 + v5;
  v10 = (uint64_t *)(v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010FD1C4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1004A4064(a1, v6, v7, v8, v9, v11, v12);
}

void sub_100599CD8(void *a1, char a2)
{
  uint64_t v2;

  sub_100593950(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16));
}

uint64_t sub_100599CE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100599D80(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1010FD1CC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1004A30C0(a1, v6, v7, v8, v9, v11, v12);
}

void sub_100599E3C(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_100593790(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_100599E44()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100599E68(uint64_t a1)
{
  uint64_t v1;

  return sub_10032320C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD, _QWORD))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100599E84(uint64_t a1)
{
  uint64_t v1;

  return sub_10039CF28(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100599EBC(uint64_t a1)
{
  uint64_t v1;

  return sub_100799204(a1, v1);
}

unint64_t sub_100599ED4()
{
  unint64_t result;

  result = qword_1010FF7D0;
  if (!qword_1010FF7D0)
  {
    result = swift_getWitnessTable(byte_100E62508, &type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError);
    atomic_store(result, (unint64_t *)&qword_1010FF7D0);
  }
  return result;
}

uint64_t sub_100599F18(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100599F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t))(v2 + 16))(a2);
}

uint64_t sub_100599F90()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10059A014(uint64_t a1)
{
  uint64_t v1;

  sub_10001D244(a1, *(_QWORD *)(v1 + 16), &qword_1010FF7D8, SPRawSearchResult_ptr);
}

uint64_t sub_10059A03C(uint64_t a1)
{
  uint64_t v1;

  return sub_100319B8C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD *))(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_10059A058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100155A24(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_10059A070(uint64_t a1)
{
  uint64_t v1;

  sub_100593074(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10059A078(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;

  return sub_1003220C4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_10059A090(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10059182C(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_10059A098(uint64_t a1)
{
  uint64_t v1;

  sub_1007815AC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10059A0A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10059A0C4()
{
  uint64_t v0;

  return sub_100590ED8(*(void (**)(void))(v0 + 16));
}

uint64_t sub_10059A0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10059A148()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  v7 = (_QWORD *)swift_task_alloc(dword_1010FD214);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004C28;
  return sub_10048088C(v3, v4, v5, v6);
}

uint64_t sub_10059A1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10001BC14(*(_QWORD *)(v0 + v6), *(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10059A264()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0[2];
  v5 = v0[3];
  v6 = v0[4];
  v7 = (uint64_t)v0 + v3;
  v8 = (_QWORD *)((char *)v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v9 = *v8;
  v10 = v8[1];
  v11 = (_QWORD *)swift_task_alloc(dword_1010FD21C);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_100004A74;
  return sub_100480358(v4, v5, v6, v7, v9, v10);
}

uint64_t sub_10059A30C()
{
  uint64_t v0;

  return sub_100590D8C(*(void (**)(_QWORD, uint64_t))(v0 + 16));
}

uint64_t sub_10059A314()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10059A348()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1010FF834);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_1010FF830 + dword_1010FF830))(v2, v3, v4);
}

uint64_t sub_10059A3B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_101102CCC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_101102CC8 + dword_101102CC8))(v2, v3, v4);
}

uint64_t sub_10059A434(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101102CD4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_101102CD0 + dword_101102CD0))(a1, v4, v5, v6);
}

uint64_t storeEnumTagSinglePayload for OwnerSessionEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10059A4F8 + 4 * byte_100E439E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10059A518 + 4 * byte_100E439E5[v4]))();
}

_BYTE *sub_10059A4F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10059A518(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10059A520(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10059A528(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10059A530(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10059A538(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for OwnerSessionEntitlement()
{
  return &type metadata for OwnerSessionEntitlement;
}

unint64_t sub_10059A558()
{
  unint64_t result;

  result = qword_1010FF868;
  if (!qword_1010FF868)
  {
    result = swift_getWitnessTable(byte_100E43AA0, &type metadata for OwnerSessionEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010FF868);
  }
  return result;
}

unint64_t sub_10059A5A0()
{
  unint64_t result;

  result = qword_1010FF870;
  if (!qword_1010FF870)
  {
    result = swift_getWitnessTable(byte_100E43A28, &type metadata for OwnerSessionEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010FF870);
  }
  return result;
}

uint64_t *sub_10059A6A0()
{
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  return &qword_1011B71A8;
}

_QWORD *sub_10059A6E0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  v0 = type metadata accessor for URL(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B5D484((uint64_t)v2);
  v3 = type metadata accessor for ConfigurationCoordinator(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  result = sub_10008C9E0((uint64_t)v2);
  qword_1011B71A8 = (uint64_t)result;
  return result;
}

uint64_t sub_10059A760()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x6F666E6974752FLL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

uint64_t sub_10059A83C(char *a1, char *a2)
{
  return sub_100512684(*a1, *a2);
}

Swift::Int sub_10059A848()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7354746E657665;
  else
    v2 = 0x746E657665;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10059A8C4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7354746E657665;
  else
    v2 = 0x746E657665;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10059A91C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7354746E657665;
  else
    v2 = 0x746E657665;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10059A994@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10104AEE8;
  return sub_10059BD44(v2, a1, a2);
}

void sub_10059A9A0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x746E657665;
  if (*v1)
    v2 = 0x7354746E657665;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10059A9DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x7354746E657665;
  else
    return 0x746E657665;
}

uint64_t sub_10059AA14@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104AEE8, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_10059AA74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E3B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059AA9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E3B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059AAC4(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FFA60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10059E3B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UTInfoPublishRequestBody.State.CodingKeys, &type metadata for UTInfoPublishRequestBody.State.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    v14 = (char *)v3 + *(int *)(type metadata accessor for UTInfoPublishRequestBody.State(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for Date(0);
    v16 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10059AC18(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10059AC58 + 4 * byte_100E43AF0[a1]))(0x6E6F437261435462, 0xEE0064657463656ELL);
}

unint64_t sub_10059AC58()
{
  return 0xD000000000000011;
}

uint64_t sub_10059AC74()
{
  return 0x74536E6F69746F6DLL;
}

uint64_t sub_10059AC94()
{
  return 0x7954656369766564;
}

uint64_t sub_10059ACB0()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_10059ACCC()
{
  return 0x657264644163616DLL;
}

uint64_t sub_10059ACEC()
{
  return 0x6E72657478457369;
}

uint64_t sub_10059AD0C(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  unsigned int v26;
  char v27;

  v26 = a5;
  v24 = a4;
  v9 = sub_10001A9A8(&qword_1010FFA40);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_10059E2E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys, v15, v14, v13);
  LOBYTE(v25[0]) = 0;
  v16 = a2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, v25, v9);
  if (!v5)
  {
    v17 = v24;
    LOBYTE(v25[0]) = BYTE1(v16);
    v27 = 1;
    v18 = sub_10059E32C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v9, &type metadata for UTInfoPublishRequestBody.KnownLocationMode, v18);
    LOBYTE(v25[0]) = BYTE2(v16);
    v27 = 2;
    v19 = sub_10059E370();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v9, &type metadata for UTInfoPublishRequestBody.MotionState, v19);
    LOBYTE(v25[0]) = BYTE3(v16);
    v27 = 3;
    v20 = sub_1001DBE94();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v9, &type metadata for Type18Status.DeviceType, v20);
    LOBYTE(v25[0]) = 4;
    v27 = BYTE5(v16) & 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(BYTE4(v16) | (((v16 >> 40) & 1) << 8), v25, v9);
    v25[0] = a3;
    v25[1] = v17;
    v27 = 5;
    v21 = sub_100036A58();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v27, v9, &type metadata for Data, v21);
    LOBYTE(v25[0]) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v25, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_10059AF7C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v20[3];
  char v21;
  _BYTE v22[32];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010FFA08);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10059E19C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UTInfoPublishRequestBody.Record.CodingKeys, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v20[0]) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, v20, v5);
  if (!v2)
  {
    v20[0] = v3[2];
    v21 = 1;
    v14 = sub_10001A9A8(&qword_1010FFA18);
    v15 = sub_10059E1E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v5, v14, v15);
    v16 = v3[3];
    v17 = v3[4];
    LOBYTE(v20[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, v20, v5);
    sub_10059E25C((uint64_t)(v3 + 5), (uint64_t)v22);
    sub_10059E25C((uint64_t)v22, (uint64_t)v20);
    v21 = 3;
    v18 = sub_10059E2A4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v21, v5, &type metadata for UTInfoPublishRequestBody.EventContext, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10059B12C(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v7 = sub_10001A9A8(&qword_1010FF9D8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10001AA44(a1, v11);
  v13 = sub_10059E0D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UTInfoPublishRequestBody.CodingKeys, &type metadata for UTInfoPublishRequestBody.CodingKeys, v13, v11, v12);
  v22 = a2;
  v21 = 0;
  v14 = sub_10059E114();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for UTInfoPublishRequestBody.ClientContext, v14);
  if (!v3)
  {
    v19 = a3;
    v20 = 1;
    v15 = sub_10001A9A8(&qword_1010FF9F0);
    v16 = sub_100365CCC(&qword_1010FF9F8, &qword_1010FF9F0, (uint64_t (*)(void))sub_10059E158, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10059B2A0(_QWORD *a1)
{
  return sub_10059AAC4(a1);
}

uint64_t sub_10059B2B4(char *a1, char *a2)
{
  return sub_100512724(*a1, *a2);
}

Swift::Int sub_10059B2C0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 1802661751;
  else
    v2 = 1701670760;
  String.hash(into:)(v4, v2, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10059B324(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 1802661751;
  else
    v2 = 1701670760;
  String.hash(into:)(a1, v2, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

Swift::Int sub_10059B35C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 1802661751;
  else
    v2 = 1701670760;
  String.hash(into:)(v4, v2, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10059B3BC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10104AF38;
  return sub_10059BD44(v2, a1, a2);
}

void sub_10059B3C8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1701670760;
  if (*v1)
    v2 = 1802661751;
  *a1 = v2;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_10059B3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10059EDEC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10059B43C(char *a1)
{
  sub_100512790(*a1);
}

void sub_10059B448()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10059B494()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x676E696C637963, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_10059B4F8()
{
  __asm { BR              X10 }
}

uint64_t sub_10059B534(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 0x676E696C637963, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_10059B584()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10059B5CC()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x676E696C637963, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

unint64_t sub_10059B630@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10059C050(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10059B65C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10059B68C + 4 * byte_100E43B03[*v0]))();
}

void sub_10059B68C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x676E696C637963;
  a1[1] = v1;
}

void sub_10059B6A4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x676E6976697264;
  a1[1] = v1;
}

void sub_10059B6BC(_QWORD *a1@<X8>)
{
  *a1 = 0x616E6F6974617473;
  a1[1] = 0xEA00000000007972;
}

uint64_t sub_10059B6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10059EE30();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10059B728()
{
  unsigned __int8 *v0;

  return sub_10059AC18(*v0);
}

uint64_t sub_10059B730@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10059C098(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059B754(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E2E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059B77C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E2E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059B7A4(_QWORD *a1)
{
  unsigned int *v1;

  return sub_10059AD0C(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40), *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2), *((unsigned __int8 *)v1 + 24));
}

uint64_t sub_10059B7E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10059B80C + 4 * byte_100E43B07[*v0]))(1953916001, 0xE400000000000000);
}

uint64_t sub_10059B80C()
{
  return 0x6574617473;
}

uint64_t sub_10059B820()
{
  return 0x7069726373627573;
}

uint64_t sub_10059B844()
{
  return 0x787443746E657665;
}

uint64_t sub_10059B85C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10059C3C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059B880(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E19C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059B8A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E19C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059B8D0(_QWORD *a1)
{
  return sub_10059AF7C(a1);
}

uint64_t sub_10059B910()
{
  return 0x6572616853736168;
}

uint64_t sub_10059B934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6572616853736168 && a2 == 0xEE00736D65744964)
  {
    result = swift_bridgeObjectRelease(0xEE00736D65744964);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6572616853736168, 0xEE00736D65744964, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10059B9EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059EDA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059BA14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059EDA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059BA3C(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_10001A9A8(&qword_1010FFB10);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_10059EDA8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(v7, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10059BB24()
{
  _BYTE *v0;

  if (*v0)
    return 7562345;
  else
    return 0x7443746E65696C63;
}

uint64_t sub_10059BB5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10059C58C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059BB80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E0D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059BBA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E0D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059BBD0(_QWORD *a1)
{
  uint64_t v1;

  return sub_10059B12C(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_10059BBEC(char *a1, char *a2)
{
  return sub_100513344(*a1, *a2);
}

Swift::Int sub_10059BBF8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x657669746361;
  else
    v2 = 0x7472656E69;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10059BC70(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x657669746361;
  else
    v2 = 0x7472656E69;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10059BCC4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x657669746361;
  else
    v2 = 0x7472656E69;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10059BD38@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_10104B008;
  return sub_10059BD44(v2, a1, a2);
}

uint64_t sub_10059BD44@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, char *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;
  char v8;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  if (v6 == 1)
    v8 = 1;
  else
    v8 = 2;
  if (!v6)
    v8 = 0;
  *a3 = v8;
  return result;
}

void sub_10059BD9C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7472656E69;
  if (*v1)
    v2 = 0x657669746361;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10059BDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10059F2A0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10059BE30()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1953916001;
  if (*v0 != 1)
    v1 = 0x746C75736572;
  if (*v0)
    return v1;
  else
    return 0x7069726373627573;
}

uint64_t sub_10059BE8C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10059C678(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059BEB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059ED20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059BED8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059ED20();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10059BF00@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  char v7;

  sub_10059C7D8(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_BYTE *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10059BF44()
{
  return 7562345;
}

uint64_t sub_10059BF54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    result = swift_bridgeObjectRelease(0xE300000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10059BFD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E048();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059C000(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10059E048();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_10059C028@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10059CA14(a1);
  if (!v2)
    *a2 = result;
  return result;
}

unint64_t sub_10059C050(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104AF88, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t sub_10059C098(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x6E6F437261435462 && a2 == 0xEE0064657463656ELL)
  {
    v5 = 0xEE0064657463656ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F437261435462, 0xEE0064657463656ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100EDC360;
    if (a2 == 0x8000000100EDC360)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EDC360, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x74536E6F69746F6DLL && a2 == 0xEB00000000657461)
  {
    v8 = 0xEB00000000657461;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74536E6F69746F6DLL, 0xEB00000000657461, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x7954656369766564 && a2 == 0xEA00000000006570)
  {
    v9 = 0xEA00000000006570;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954656369766564, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064)
  {
    v10 = 0xE900000000000064;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496B726F7774656ELL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v11 = 0xEA00000000007373;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x6E72657478457369 && a2 == 0xEA00000000006C61)
  {
    swift_bridgeObjectRelease(0xEA00000000006C61);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E72657478457369, 0xEA00000000006C61, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_10059C3C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1953916001 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953916001, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7069726373627573 && a2 == 0xEE0064496E6F6974)
  {
    v8 = 0xEE0064496E6F6974;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069726373627573, 0xEE0064496E6F6974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x787443746E657665 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x787443746E657665, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_10059C58C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7443746E65696C63 && a2 == 0xE900000000000078)
  {
    v5 = 0xE900000000000078;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7443746E65696C63, 0xE900000000000078, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 7562345 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(7562345, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10059C678(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x7069726373627573 && a2 == 0xEE0064496E6F6974)
  {
    v5 = 0xEE0064496E6F6974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7069726373627573, 0xEE0064496E6F6974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1953916001 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953916001, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746C75736572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746C75736572, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10059C7D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v5 = sub_10001A9A8(&qword_1010FFAF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10059ED20();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UTInfoPublishResponse.Subscription.CodingKeys, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  BYTE2(v26) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v26 + 2, v5);
  v14 = v13;
  v24 = v12;
  BYTE1(v26) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v26 + 1, v5);
  v17 = v16;
  v22 = v15;
  v25 = 2;
  v18 = sub_10059ED64();
  swift_bridgeObjectRetain(v17);
  v23 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v26, &type metadata for UTInfoPublishResponse.Result, &v25, v5, &type metadata for UTInfoPublishResponse.Result, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v17) = v26;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v19 = v23;
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v19;
  *(_BYTE *)(a2 + 32) = v17;
  return result;
}

_QWORD *sub_10059CA14(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_10001A9A8(&qword_1010FF9B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_10059E048();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UTInfoPublishResponse.CodingKeys, &type metadata for UTInfoPublishResponse.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_1010FF9C0);
    v12 = sub_100365CCC(&qword_1010FF9C8, &qword_1010FF9C0, (uint64_t (*)(void))sub_10059E08C, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

uint64_t sub_10059CB60(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v3 + 200) = a2;
  *(_QWORD *)(v3 + 208) = a3;
  *(_BYTE *)(v3 + 384) = a1;
  v4 = type metadata accessor for HashAlgorithm(0);
  *(_QWORD *)(v3 + 216) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 224) = v5;
  *(_QWORD *)(v3 + 232) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v3 + 240) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 248) = v7;
  *(_QWORD *)(v3 + 256) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeZone(0);
  *(_QWORD *)(v3 + 264) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 272) = v9;
  *(_QWORD *)(v3 + 280) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  *(_QWORD *)(v3 + 288) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v3 + 296) = v11;
  *(_QWORD *)(v3 + 304) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10059CC3C, 0, 0);
}

uint64_t sub_10059CC3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD **)(v0 + 256);
  v38 = *(_QWORD *)(v0 + 272);
  v39 = *(_QWORD *)(v0 + 264);
  v40 = *(_QWORD *)(v0 + 248);
  v41 = *(_QWORD *)(v0 + 240);
  v43 = *(_QWORD *)(v0 + 200);
  v42 = *(_BYTE *)(v0 + 384);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
  inited = swift_initStackObject(v6, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E26E00;
  *(_QWORD *)(inited + 32) = 0x747065636341;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 48) = 0xD000000000000010;
  *(_QWORD *)(inited + 56) = 0x8000000100ECC390;
  strcpy((char *)(inited + 64), "content-type");
  *(_BYTE *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  *(_QWORD *)(inited + 80) = 0xD000000000000010;
  *(_QWORD *)(inited + 88) = 0x8000000100ECC390;
  *(_QWORD *)(inited + 96) = 0xD000000000000015;
  *(_QWORD *)(inited + 104) = 0x8000000100ECC3B0;
  v8 = Date.init()(inited);
  v9 = Date.epoch.getter(v8);
  v10 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v10(v2, v4);
  *(_QWORD *)(v0 + 192) = v9;
  *(_QWORD *)(inited + 112) = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  *(_QWORD *)(inited + 120) = v11;
  *(_QWORD *)(inited + 128) = 0xD000000000000012;
  *(_QWORD *)(inited + 136) = 0x8000000100EDC340;
  v12 = static TimeZone.current.getter();
  Date.init()(v12);
  v13 = TimeZone.abbreviation(for:)(v2);
  v15 = v14;
  v10(v2, v4);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v3, v39);
  if (v15)
    v16 = v13;
  else
    v16 = 0;
  v17 = 0xE000000000000000;
  if (v15)
    v17 = v15;
  *(_QWORD *)(inited + 144) = v16;
  *(_QWORD *)(inited + 152) = v17;
  v18 = sub_1006B8DC4(inited);
  v19 = sub_100AC2EB8();
  v21 = v20;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  sub_100109D28((uint64_t)v19, v21, 0x6567412D72657355, 0xEA0000000000746ELL, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v0 + 312) = v18;
  swift_bridgeObjectRelease();
  v23 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)(v0 + 320) = JSONEncoder.init()(v24);
  *v5 = sub_1002994E8;
  v5[1] = 0;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v40 + 104))(v5, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v41);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v5);
  *(_BYTE *)(v0 + 176) = v42;
  *(_QWORD *)(v0 + 184) = v43;
  v25 = sub_10059D20C();
  v26 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 176, &type metadata for UTInfoPublishRequestBody, v25);
  *(_QWORD *)(v0 + 328) = v26;
  *(_QWORD *)(v0 + 336) = v27;
  v28 = v26;
  v29 = v27;
  v31 = *(_QWORD *)(v0 + 224);
  v30 = *(_QWORD *)(v0 + 232);
  v32 = *(_QWORD *)(v0 + 216);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v31 + 104))(v30, enum case for HashAlgorithm.sha256(_:), v32);
  v33 = Data.hash(algorithm:)(v30, v28, v29);
  v35 = v34;
  *(_QWORD *)(v0 + 344) = v33;
  *(_QWORD *)(v0 + 352) = v34;
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1011152D0 + dword_1011152D0);
  v36 = (_QWORD *)swift_task_alloc(unk_1011152D4);
  *(_QWORD *)(v0 + 360) = v36;
  *v36 = v0;
  v36[1] = sub_10059CFF8;
  return v44(v33, v35, *(_QWORD *)(v0 + 208));
}

uint64_t sub_10059CFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 360);
  *(_QWORD *)(*(_QWORD *)v2 + 368) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10059D168;
  }
  else
  {
    v7 = v4[43];
    v8 = v4[44];
    v4[47] = a1;
    sub_10001BC14(v7, v8);
    v6 = sub_10059D074;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10059D074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 312);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v11 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v11);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 232);
  v10 = v11;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0 + 8))(v10, *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
}

uint64_t sub_10059D168()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  swift_release();
  sub_10001BC14(v1, v2);
  sub_10001BC14(v4, v3);
  swift_release();
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 256);
  v8 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_10059D20C()
{
  unint64_t result;

  result = qword_1010FF888;
  if (!qword_1010FF888)
  {
    result = swift_getWitnessTable(aA_32, &type metadata for UTInfoPublishRequestBody);
    atomic_store(result, (unint64_t *)&qword_1010FF888);
  }
  return result;
}

uint64_t destroy for UTInfoPublishRequestBody.Record(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (*(_BYTE *)(a1 + 40) != 3)
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3 >> 60 != 15)
      return sub_10001BC14(*(_QWORD *)(a1 + 48), v3);
  }
  return result;
}

uint64_t initializeWithCopy for UTInfoPublishRequestBody.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  v9 = (_OWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  if (v8 == 3)
  {
    *(_OWORD *)(a1 + 40) = *v9;
    *(_OWORD *)(a1 + 49) = *(_OWORD *)((char *)v9 + 9);
  }
  else
  {
    *(_WORD *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 42) = BYTE2(v8);
    *(_BYTE *)(a1 + 43) = BYTE3(v8);
    *(_WORD *)(a1 + 44) = WORD2(v8);
    v10 = (uint64_t *)(a2 + 48);
    v11 = *(_QWORD *)(a2 + 56);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
    }
    else
    {
      v12 = *v10;
      sub_10001BBBC(*v10, *(_QWORD *)(a2 + 56));
      *(_QWORD *)(a1 + 48) = v12;
      *(_QWORD *)(a1 + 56) = v11;
    }
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  }
  return a1;
}

uint64_t assignWithCopy for UTInfoPublishRequestBody.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = (_OWORD *)(a1 + 40);
  v9 = (_OWORD *)(a2 + 40);
  v8 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) != 3)
  {
    if (v8 == 3)
    {
      sub_10059D584(a1 + 40);
      v11 = *(_OWORD *)(a2 + 49);
      *v7 = *v9;
      *(_OWORD *)(a1 + 49) = v11;
      return a1;
    }
    *(_BYTE *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
    v14 = (uint64_t *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    if (*(_QWORD *)(a1 + 56) >> 60 == 15)
    {
      if (v13 >> 60 != 15)
      {
        v15 = *v14;
        goto LABEL_12;
      }
    }
    else
    {
      if (v13 >> 60 != 15)
      {
        v16 = *v14;
        sub_10001BBBC(*v14, *(_QWORD *)(a2 + 56));
        v17 = *(_QWORD *)(a1 + 48);
        v18 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 48) = v16;
        *(_QWORD *)(a1 + 56) = v13;
        sub_10001BC14(v17, v18);
        goto LABEL_17;
      }
      sub_1000DC964(a1 + 48);
    }
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
    goto LABEL_17;
  }
  if (v8 != 3)
  {
    *(_BYTE *)(a1 + 40) = v8;
    *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
    *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
    *(_BYTE *)(a1 + 43) = *(_BYTE *)(a2 + 43);
    *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
    v12 = (_OWORD *)(a2 + 48);
    v13 = *(_QWORD *)(a2 + 56);
    if (v13 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 48) = *v12;
LABEL_17:
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      return a1;
    }
    v15 = *(_QWORD *)v12;
LABEL_12:
    sub_10001BBBC(v15, v13);
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v13;
    goto LABEL_17;
  }
  v10 = *v9;
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *v7 = v10;
  return a1;
}

uint64_t sub_10059D584(uint64_t a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(a1 + 8), v2);
  return a1;
}

__n128 initializeWithTake for TagUserStatistics(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for UTInfoPublishRequestBody.Record(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) == 3)
    goto LABEL_4;
  if (*(_QWORD *)(a2 + 40) != 3)
  {
    *(_WORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 42) = BYTE2(v6);
    *(_BYTE *)(a1 + 43) = BYTE3(v6);
    *(_WORD *)(a1 + 44) = WORD2(v6);
    v7 = (_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a1 + 56);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a2 + 56);
      if (v9 >> 60 != 15)
      {
        v10 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = *v7;
        *(_QWORD *)(a1 + 56) = v9;
        sub_10001BC14(v10, v8);
        goto LABEL_10;
      }
      sub_1000DC964(a1 + 48);
    }
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v7;
LABEL_10:
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    return a1;
  }
  sub_10059D584(a1 + 40);
LABEL_4:
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTInfoPublishRequestBody.Record(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.Record(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.Record()
{
  return &type metadata for UTInfoPublishRequestBody.Record;
}

uint64_t destroy for UTInfoPublishRequestBody.EventContext(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 >> 60 != 15)
    return sub_10001BC14(*(_QWORD *)(result + 8), v1);
  return result;
}

uint64_t initializeWithCopy for UTInfoPublishRequestBody.EventContext(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  v4 = (uint64_t *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    sub_10001BBBC(*v4, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for UTInfoPublishRequestBody.EventContext(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  v4 = (_OWORD *)(a1 + 8);
  v5 = (uint64_t *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 != 15)
  {
    if (v6 >> 60 != 15)
    {
      v8 = *v5;
      sub_10001BBBC(*v5, *(_QWORD *)(a2 + 16));
      v9 = *(_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v6;
      sub_10001BC14(v9, v10);
      goto LABEL_8;
    }
    sub_1000DC964(a1 + 8);
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
LABEL_6:
    *v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }
  v7 = *v5;
  sub_10001BBBC(*v5, *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v6;
LABEL_8:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for UTInfoPublishRequestBody.EventContext(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *v5;
      *(_QWORD *)(a1 + 16) = v7;
      sub_10001BC14(v8, v6);
      goto LABEL_6;
    }
    sub_1000DC964(a1 + 8);
  }
  *v4 = *(_OWORD *)v5;
LABEL_6:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTInfoPublishRequestBody.EventContext(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[25])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.EventContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.EventContext()
{
  return &type metadata for UTInfoPublishRequestBody.EventContext;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse()
{
  return &type metadata for UTInfoPublishResponse;
}

ValueMetadata *type metadata accessor for SubmitUTInfo()
{
  return &type metadata for SubmitUTInfo;
}

uint64_t initializeBufferWithCopyOfBuffer for UTInfoPublishRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for UTInfoPublishRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for UTInfoPublishRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody()
{
  return &type metadata for UTInfoPublishRequestBody;
}

uint64_t *sub_10059DB3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_10059DBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_10059DC20(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

_QWORD *sub_10059DC90(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_10059DD0C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10059DD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059DD84);
}

uint64_t sub_10059DD84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_10059DE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059DE0C);
}

uint64_t sub_10059DE0C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for UTInfoPublishRequestBody.State(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FF8E8, (uint64_t)&nominal type descriptor for UTInfoPublishRequestBody.State);
}

uint64_t sub_10059DE94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10059DFDC(a1, a2, a3, (uint64_t)&unk_100E43BB0, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
}

uint64_t sub_10059DEA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059DEB4);
}

uint64_t sub_10059DEB4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10059DF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059DF3C);
}

char *sub_10059DF3C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SubmitUTInfoEndpoint(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010FF978, (uint64_t)&nominal type descriptor for SubmitUTInfoEndpoint);
}

uint64_t sub_10059DFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10059DFDC(a1, a2, a3, (uint64_t)&value witness table for Builtin.NativeObject + 64, (uint64_t (*)(uint64_t))&type metadata accessor for FMNAccountType);
}

uint64_t sub_10059DFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t result;
  unint64_t v7;
  _QWORD v8[2];

  v8[0] = a4;
  result = a5(319);
  if (v7 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v8, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_10059E048()
{
  unint64_t result;

  result = qword_1010FF9B8;
  if (!qword_1010FF9B8)
  {
    result = swift_getWitnessTable(a1_17, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FF9B8);
  }
  return result;
}

unint64_t sub_10059E08C()
{
  unint64_t result;

  result = qword_1010FF9D0;
  if (!qword_1010FF9D0)
  {
    result = swift_getWitnessTable(byte_100E44458, &type metadata for UTInfoPublishResponse.Subscription);
    atomic_store(result, (unint64_t *)&qword_1010FF9D0);
  }
  return result;
}

unint64_t sub_10059E0D0()
{
  unint64_t result;

  result = qword_1010FF9E0;
  if (!qword_1010FF9E0)
  {
    result = swift_getWitnessTable(byte_100E44408, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FF9E0);
  }
  return result;
}

unint64_t sub_10059E114()
{
  unint64_t result;

  result = qword_1010FF9E8;
  if (!qword_1010FF9E8)
  {
    result = swift_getWitnessTable(byte_100E443E0, &type metadata for UTInfoPublishRequestBody.ClientContext);
    atomic_store(result, (unint64_t *)&qword_1010FF9E8);
  }
  return result;
}

unint64_t sub_10059E158()
{
  unint64_t result;

  result = qword_1010FFA00;
  if (!qword_1010FFA00)
  {
    result = swift_getWitnessTable(aI_22, &type metadata for UTInfoPublishRequestBody.Record);
    atomic_store(result, (unint64_t *)&qword_1010FFA00);
  }
  return result;
}

unint64_t sub_10059E19C()
{
  unint64_t result;

  result = qword_1010FFA10;
  if (!qword_1010FFA10)
  {
    result = swift_getWitnessTable(asc_100E44390, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFA10);
  }
  return result;
}

unint64_t sub_10059E1E0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1010FFA20;
  if (!qword_1010FFA20)
  {
    v1 = sub_10001F784(&qword_1010FFA18);
    v2 = sub_100006204(&qword_1010FFA28, type metadata accessor for UTInfoPublishRequestBody.State, (uint64_t)&unk_100E43BE8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010FFA20);
  }
  return result;
}

uint64_t sub_10059E25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010FFA30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10059E2A4()
{
  unint64_t result;

  result = qword_1010FFA38;
  if (!qword_1010FFA38)
  {
    result = swift_getWitnessTable(byte_100E43C20, &type metadata for UTInfoPublishRequestBody.EventContext);
    atomic_store(result, (unint64_t *)&qword_1010FFA38);
  }
  return result;
}

unint64_t sub_10059E2E8()
{
  unint64_t result;

  result = qword_1010FFA48;
  if (!qword_1010FFA48)
  {
    result = swift_getWitnessTable(aQ_22, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFA48);
  }
  return result;
}

unint64_t sub_10059E32C()
{
  unint64_t result;

  result = qword_1010FFA50;
  if (!qword_1010FFA50)
  {
    result = swift_getWitnessTable(byte_100E44318, &type metadata for UTInfoPublishRequestBody.KnownLocationMode);
    atomic_store(result, (unint64_t *)&qword_1010FFA50);
  }
  return result;
}

unint64_t sub_10059E370()
{
  unint64_t result;

  result = qword_1010FFA58;
  if (!qword_1010FFA58)
  {
    result = swift_getWitnessTable(byte_100E442F0, &type metadata for UTInfoPublishRequestBody.MotionState);
    atomic_store(result, (unint64_t *)&qword_1010FFA58);
  }
  return result;
}

unint64_t sub_10059E3B4()
{
  unint64_t result;

  result = qword_1010FFA68;
  if (!qword_1010FFA68)
  {
    result = swift_getWitnessTable(byte_100E442A0, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFA68);
  }
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.State.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.State.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.EventContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10059E458 + 4 * byte_100E43B10[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10059E48C + 4 * byte_100E43B0B[v4]))();
}

uint64_t sub_10059E48C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059E494(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10059E49CLL);
  return result;
}

uint64_t sub_10059E4A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10059E4B0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10059E4B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059E4BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.EventContext.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.Record.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.Record.CodingKeys;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.CodingKeys;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.CodingKeys()
{
  return &type metadata for UTInfoPublishResponse.CodingKeys;
}

uint64_t _s12searchpartyd24UTInfoPublishRequestBodyV11MotionStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10059E55C + 4 * byte_100E43B1A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10059E590 + 4 * byte_100E43B15[v4]))();
}

uint64_t sub_10059E590(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059E598(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10059E5A0);
  return result;
}

uint64_t sub_10059E5AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10059E5B4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10059E5B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059E5C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.MotionState()
{
  return &type metadata for UTInfoPublishRequestBody.MotionState;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.KnownLocationMode()
{
  return &type metadata for UTInfoPublishRequestBody.KnownLocationMode;
}

uint64_t initializeWithCopy for UTInfoPublishResponse.Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for UTInfoPublishResponse.Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for UTInfoPublishResponse.Subscription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for UTInfoPublishResponse.Subscription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishResponse.Subscription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.Subscription()
{
  return &type metadata for UTInfoPublishResponse.Subscription;
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishRequestBody.ClientContext(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10059E7D8 + 4 * byte_100E43B24[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10059E80C + 4 * byte_100E43B1F[v4]))();
}

uint64_t sub_10059E80C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059E814(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10059E81CLL);
  return result;
}

uint64_t sub_10059E828(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10059E830);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10059E834(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059E83C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.ClientContext()
{
  return &type metadata for UTInfoPublishRequestBody.ClientContext;
}

unint64_t sub_10059E85C()
{
  unint64_t result;

  result = qword_1010FFA70;
  if (!qword_1010FFA70)
  {
    result = swift_getWitnessTable(aY_41, &type metadata for UTInfoPublishRequestBody.KnownLocationMode);
    atomic_store(result, (unint64_t *)&qword_1010FFA70);
  }
  return result;
}

unint64_t sub_10059E8A4()
{
  unint64_t result;

  result = qword_1010FFA78;
  if (!qword_1010FFA78)
  {
    result = swift_getWitnessTable(byte_100E43EA8, &type metadata for UTInfoPublishRequestBody.MotionState);
    atomic_store(result, (unint64_t *)&qword_1010FFA78);
  }
  return result;
}

unint64_t sub_10059E8EC()
{
  unint64_t result;

  result = qword_1010FFA80;
  if (!qword_1010FFA80)
  {
    result = swift_getWitnessTable(asc_100E43F60, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFA80);
  }
  return result;
}

unint64_t sub_10059E934()
{
  unint64_t result;

  result = qword_1010FFA88;
  if (!qword_1010FFA88)
  {
    result = swift_getWitnessTable(aI_23, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFA88);
  }
  return result;
}

unint64_t sub_10059E97C()
{
  unint64_t result;

  result = qword_1010FFA90;
  if (!qword_1010FFA90)
  {
    result = swift_getWitnessTable(byte_100E440D0, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFA90);
  }
  return result;
}

unint64_t sub_10059E9C4()
{
  unint64_t result;

  result = qword_1010FFA98;
  if (!qword_1010FFA98)
  {
    result = swift_getWitnessTable(byte_100E44188, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFA98);
  }
  return result;
}

unint64_t sub_10059EA0C()
{
  unint64_t result;

  result = qword_1010FFAA0;
  if (!qword_1010FFAA0)
  {
    result = swift_getWitnessTable(asc_100E44278, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAA0);
  }
  return result;
}

unint64_t sub_10059EA54()
{
  unint64_t result;

  result = qword_1010FFAA8;
  if (!qword_1010FFAA8)
  {
    result = swift_getWitnessTable(byte_100E441B0, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAA8);
  }
  return result;
}

unint64_t sub_10059EA9C()
{
  unint64_t result;

  result = qword_1010FFAB0;
  if (!qword_1010FFAB0)
  {
    result = swift_getWitnessTable(byte_100E441D8, &type metadata for UTInfoPublishRequestBody.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAB0);
  }
  return result;
}

unint64_t sub_10059EAE4()
{
  unint64_t result;

  result = qword_1010FFAB8;
  if (!qword_1010FFAB8)
  {
    result = swift_getWitnessTable(byte_100E440F8, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAB8);
  }
  return result;
}

unint64_t sub_10059EB2C()
{
  unint64_t result;

  result = qword_1010FFAC0;
  if (!qword_1010FFAC0)
  {
    result = swift_getWitnessTable(byte_100E44120, &type metadata for UTInfoPublishRequestBody.EventContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAC0);
  }
  return result;
}

unint64_t sub_10059EB74()
{
  unint64_t result;

  result = qword_1010FFAC8;
  if (!qword_1010FFAC8)
  {
    result = swift_getWitnessTable(aQ_23, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAC8);
  }
  return result;
}

unint64_t sub_10059EBBC()
{
  unint64_t result;

  result = qword_1010FFAD0;
  if (!qword_1010FFAD0)
  {
    result = swift_getWitnessTable(a9_6, &type metadata for UTInfoPublishRequestBody.Record.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAD0);
  }
  return result;
}

unint64_t sub_10059EC04()
{
  unint64_t result;

  result = qword_1010FFAD8;
  if (!qword_1010FFAD8)
  {
    result = swift_getWitnessTable(asc_100E43F88, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAD8);
  }
  return result;
}

unint64_t sub_10059EC4C()
{
  unint64_t result;

  result = qword_1010FFAE0;
  if (!qword_1010FFAE0)
  {
    result = swift_getWitnessTable(byte_100E43FB0, &type metadata for UTInfoPublishRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAE0);
  }
  return result;
}

unint64_t sub_10059EC94()
{
  unint64_t result;

  result = qword_1010FFAE8;
  if (!qword_1010FFAE8)
  {
    result = swift_getWitnessTable(byte_100E43ED0, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAE8);
  }
  return result;
}

unint64_t sub_10059ECDC()
{
  unint64_t result;

  result = qword_1010FFAF0;
  if (!qword_1010FFAF0)
  {
    result = swift_getWitnessTable(byte_100E43EF8, &type metadata for UTInfoPublishResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFAF0);
  }
  return result;
}

unint64_t sub_10059ED20()
{
  unint64_t result;

  result = qword_1010FFB00;
  if (!qword_1010FFB00)
  {
    result = swift_getWitnessTable(aQ_24, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB00);
  }
  return result;
}

unint64_t sub_10059ED64()
{
  unint64_t result;

  result = qword_1010FFB08;
  if (!qword_1010FFB08)
  {
    result = swift_getWitnessTable(byte_100E44738, &type metadata for UTInfoPublishResponse.Result);
    atomic_store(result, (unint64_t *)&qword_1010FFB08);
  }
  return result;
}

unint64_t sub_10059EDA8()
{
  unint64_t result;

  result = qword_1010FFB18;
  if (!qword_1010FFB18)
  {
    result = swift_getWitnessTable(byte_100E446E8, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB18);
  }
  return result;
}

unint64_t sub_10059EDEC()
{
  unint64_t result;

  result = qword_1010FFB20;
  if (!qword_1010FFB20)
  {
    result = swift_getWitnessTable(byte_100E43D90, &type metadata for UTInfoPublishRequestBody.KnownLocationMode);
    atomic_store(result, (unint64_t *)&qword_1010FFB20);
  }
  return result;
}

unint64_t sub_10059EE30()
{
  unint64_t result;

  result = qword_1010FFB28;
  if (!qword_1010FFB28)
  {
    result = swift_getWitnessTable(asc_100E43E30, &type metadata for UTInfoPublishRequestBody.MotionState);
    atomic_store(result, (unint64_t *)&qword_1010FFB28);
  }
  return result;
}

uint64_t _s12searchpartyd21UTInfoPublishResponseV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10059EEB4 + 4 * byte_100E43B29[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10059EED4 + 4 * byte_100E43B2E[v4]))();
}

_BYTE *sub_10059EEB4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10059EED4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10059EEDC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10059EEE4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10059EEEC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10059EEF4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishRequestBody.ClientContext.CodingKeys()
{
  return &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for UTInfoPublishResponse.Subscription.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10059EF5C + 4 * byte_100E43B38[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10059EF90 + 4 * byte_100E43B33[v4]))();
}

uint64_t sub_10059EF90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059EF98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10059EFA0);
  return result;
}

uint64_t sub_10059EFAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10059EFB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10059EFB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059EFC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.Subscription.CodingKeys()
{
  return &type metadata for UTInfoPublishResponse.Subscription.CodingKeys;
}

uint64_t _s12searchpartyd24UTInfoPublishRequestBodyV17KnownLocationModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10059F028 + 4 * byte_100E43B42[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10059F05C + 4 * byte_100E43B3D[v4]))();
}

uint64_t sub_10059F05C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059F064(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10059F06CLL);
  return result;
}

uint64_t sub_10059F078(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10059F080);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10059F084(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059F08C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UTInfoPublishResponse.Result()
{
  return &type metadata for UTInfoPublishResponse.Result;
}

unint64_t sub_10059F0AC()
{
  unint64_t result;

  result = qword_1010FFB30;
  if (!qword_1010FFB30)
  {
    result = swift_getWitnessTable(a1_18, &type metadata for UTInfoPublishResponse.Result);
    atomic_store(result, (unint64_t *)&qword_1010FFB30);
  }
  return result;
}

unint64_t sub_10059F0F4()
{
  unint64_t result;

  result = qword_1010FFB38;
  if (!qword_1010FFB38)
  {
    result = swift_getWitnessTable(aY_42, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB38);
  }
  return result;
}

unint64_t sub_10059F13C()
{
  unint64_t result;

  result = qword_1010FFB40;
  if (!qword_1010FFB40)
  {
    result = swift_getWitnessTable(byte_100E446C0, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB40);
  }
  return result;
}

unint64_t sub_10059F184()
{
  unint64_t result;

  result = qword_1010FFB48;
  if (!qword_1010FFB48)
  {
    result = swift_getWitnessTable(aA_33, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB48);
  }
  return result;
}

unint64_t sub_10059F1CC()
{
  unint64_t result;

  result = qword_1010FFB50;
  if (!qword_1010FFB50)
  {
    result = swift_getWitnessTable(aI_24, &type metadata for UTInfoPublishRequestBody.ClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB50);
  }
  return result;
}

unint64_t sub_10059F214()
{
  unint64_t result;

  result = qword_1010FFB58;
  if (!qword_1010FFB58)
  {
    result = swift_getWitnessTable(byte_100E44578, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB58);
  }
  return result;
}

unint64_t sub_10059F25C()
{
  unint64_t result;

  result = qword_1010FFB60;
  if (!qword_1010FFB60)
  {
    result = swift_getWitnessTable(byte_100E445A0, &type metadata for UTInfoPublishResponse.Subscription.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010FFB60);
  }
  return result;
}

unint64_t sub_10059F2A0()
{
  unint64_t result;

  result = qword_1010FFB68;
  if (!qword_1010FFB68)
  {
    result = swift_getWitnessTable(aA_34, &type metadata for UTInfoPublishResponse.Result);
    atomic_store(result, (unint64_t *)&qword_1010FFB68);
  }
  return result;
}

uint64_t ConnectionPair.readConnection.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t ConnectionPair.writeConnection.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 24));
}

uint64_t ConnectionPair.__allocating_init(_:readonly:key:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 32, 7);
  ConnectionPair.init(_:readonly:key:)(a1, a2, a3, a4);
  return v9;
}

uint64_t ConnectionPair.init(_:readonly:key:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  unint64_t v26;
  uint64_t v27;
  void *v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;

  v48 = a4;
  v46 = a2;
  v52 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v52 - 8);
  v7 = __chkstk_darwin(v52);
  v45 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v44 - v10;
  __chkstk_darwin(v9);
  v51 = (char *)&v44 - v12;
  v13 = type metadata accessor for Connection.Location(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v44 - v18);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v49 = a1;
  v20((char *)&v44 - v18, a1, v13);
  v21 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v19, v13);
  if (v21 != enum case for Connection.Location.uri(_:))
  {
    v29 = v46;
    v30 = v47;
    v26 = v48;
    v45 = (char *)a3;
    if (v21 != enum case for Connection.Location.inMemory(_:) && v21 != enum case for Connection.Location.temporary(_:))
    {
      result = _diagnoseUnexpectedEnumCase<A>(type:)(v13, v13);
      __break(1u);
      return result;
    }
    v32 = v49;
    v20(v17, v49, v13);
    v33 = type metadata accessor for Connection(0);
    swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    v34 = Connection.init(_:readonly:)(v17, v29 & 1);
    if (v30)
    {
      sub_10001EF3C((uint64_t)v45, v26);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v32, v13);
      goto LABEL_11;
    }
    v40 = v34;
    v35 = v50;
    *(_QWORD *)(v50 + 16) = v34;
    *(_QWORD *)(v35 + 24) = v34;
    swift_retain();
LABEL_14:
    v41 = swift_retain();
    Connection.busyTimeout.setter(v41, 1.0);
    v42 = swift_release(v40);
    Connection.busyTimeout.setter(v42, 1.0);
    sub_10001EF3C((uint64_t)v45, v26);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v32, v13);
    return v35;
  }
  (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v19, v13);
  v22 = *v19;
  v23 = v19[1];
  v24 = v51;
  URL.init(fileURLWithPath:)(v22, v23);
  swift_bridgeObjectRelease(v23);
  type metadata accessor for Connection(0);
  v25 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v25(v11, v24, v52);
  v26 = v48;
  sub_10001BD08(a3, v48);
  v27 = v47;
  v28 = Connection.init(_:readonly:key:)(v11, v46 & 1, a3, v26);
  if (!v27)
  {
    v47 = v6;
    v37 = a3;
    v35 = v50;
    v38 = v51;
    *(_QWORD *)(v50 + 24) = v28;
    v39 = v45;
    v25(v45, v38, v52);
    sub_10001BD08(v37, v26);
    v40 = (uint64_t)Connection.init(_:readonly:key:)(v39, 1, v37, v26);
    v45 = (char *)v37;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v51, v52);
    *(_QWORD *)(v35 + 16) = v40;
    v32 = v49;
    goto LABEL_14;
  }
  sub_10001EF3C(a3, v26);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v49, v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v51, v52);
LABEL_11:
  v35 = v50;
  v36 = type metadata accessor for ConnectionPair();
  swift_deallocPartialClassInstance(v35, v36, 32, 7);
  return v35;
}

uint64_t type metadata accessor for ConnectionPair()
{
  return objc_opt_self(_TtC12searchpartyd14ConnectionPair);
}

uint64_t ConnectionPair.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t ConnectionPair.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t ConnectionPair.description.getter()
{
  return Connection.description.getter();
}

uint64_t sub_10059F7C4()
{
  return Connection.description.getter();
}

uint64_t sub_10059F7E8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B71B0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B71B0);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x8000000100EC5B70, 7106931, 0xE300000000000000);
}

uint64_t sub_10059F854()
{
  double v0;
  double v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_10001A9A8(&qword_1010FA2E0);
  sub_100C1BB18(v4);
  v1 = v0;
  v2 = swift_bridgeObjectRelease();
  result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)(v2, v1);
  qword_1010FFC18 = result;
  return result;
}

uint64_t sub_10059F90C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[10] = v5;
  v2[11] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  v2[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[15] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_10059F9DC, v1, 0);
}

uint64_t sub_10059F9DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 152) = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v1, v2, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 144);
  if (v7)
  {
    v17 = *(_QWORD *)(v0 + 64);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v17, v11);
    *(_QWORD *)(v0 + 40) = sub_100016940(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Initial keys downloading for circle %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
  }

  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 152);
  *(_QWORD *)(v0 + 160) = v15;
  *(_DWORD *)(v0 + 216) = *(_DWORD *)(v14 + 20);
  return swift_task_switch(sub_10059FC24, v15, 0);
}

uint64_t sub_10059FC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48) + *(int *)(v0 + 216);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 168) = v7;
  v7(v2, v6, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101080F88, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 176) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v2, v4);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 184) = v12;
  *v12 = v0;
  v12[1] = sub_10059FD08;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 104), sub_1001429AC, v10, *(_QWORD *)(v0 + 96));
}

uint64_t sub_10059FD08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_10059FD68, v1, 0);
}

uint64_t sub_10059FD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  _QWORD *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_101111440);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 136);
    sub_1000126EC(v2, v3, type metadata accessor for MemberSharingCircle);
    v4 = *(unsigned __int8 *)(v3 + *(int *)(v1 + 40));
    v5 = v4 > 4;
    v6 = (1 << v4) & 0x16;
    if (!v5 && v6 != 0)
    {
      v8 = (_QWORD *)swift_task_alloc(dword_1010FFC64);
      *(_QWORD *)(v0 + 192) = v8;
      *v8 = v0;
      v8[1] = sub_1005A0048;
      return sub_1005A1A70(*(_QWORD *)(v0 + 48), 1);
    }
    sub_1000126B0(*(_QWORD *)(v0 + 136), type metadata accessor for MemberSharingCircle);
  }
  v10 = sub_10005972C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 128), type metadata accessor for MemberSharingCircle);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 128);
  if (v13)
  {
    v24 = *(_QWORD *)(v0 + 64);
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(32, -1);
    v25 = v16;
    *(_DWORD *)v15 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v24, v17);
    *(_QWORD *)(v0 + 24) = sub_100016940(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v14, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Skip keys download for %{private,mask.hash}s.\nShare has not been accepted yet.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 128), type metadata accessor for MemberSharingCircle);
  }

  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A0048()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1005A026C;
  else
    v4 = sub_1005A00AC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_1005A00AC()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (qword_1010E9D18 != -1)
    swift_once(&qword_1010E9D18, sub_10059F854);
  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[21];
  v2 = v0[14];
  v3 = v0[11];
  v4 = v0[8];
  v5 = v0[6];
  v0[26] = qword_1010FFC18;
  v1(v3, v5 + *(int *)(v2 + 24), v4);
  v6 = sub_10001A9A8(&qword_1010FA2E0);
  v7 = sub_1000193A4(&qword_101117240, &qword_1010FA2E0, (const char *)&protocol conformance descriptor for AsyncKeyedThrottle<A>);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
  return swift_task_switch(sub_1005A017C, v8, v9);
}

uint64_t sub_1005A017C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[11];
  v2 = v0[8];
  v3 = v0[9];
  v4 = v0[7];
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)(v1, &unk_1010FFD90, 0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_1005A01F4, v4, 0);
}

uint64_t sub_1005A01F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 136), type metadata accessor for MemberSharingCircle);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A026C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A02F0()
{
  uint64_t v0;

  return sub_1005AC9B0(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t sub_1005A0300(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[10] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  v7 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[13] = v7;
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MemberSharingCircle(0);
  v2[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[16] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v2[17] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v11);
  v2[19] = swift_task_alloc(v11);
  v2[20] = swift_task_alloc(v11);
  v2[21] = swift_task_alloc(v11);
  return swift_task_switch(sub_1005A03F0, v1, 0);
}

uint64_t sub_1005A03F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 176) = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v1, v2, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 168);
  if (v7)
  {
    v17 = *(_QWORD *)(v0 + 64);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v17, v11);
    *(_QWORD *)(v0 + 40) = sub_100016940(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Download Keys for circle %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for MemberSharingCircle);
  }

  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 152);
  *(_QWORD *)(v0 + 184) = v15;
  *(_DWORD *)(v0 + 240) = *(_DWORD *)(v14 + 20);
  return swift_task_switch(sub_1005A0638, v15, 0);
}

uint64_t sub_1005A0638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_QWORD *)(v0 + 48) + *(int *)(v0 + 240);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 192) = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101080F10, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 200) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 208) = v12;
  *v12 = v0;
  v12[1] = sub_1005A0720;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 112), sub_1001429AC, v10, *(_QWORD *)(v0 + 104));
}

uint64_t sub_1005A0720()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release();
  return swift_task_switch(sub_1005A0780, v1, 0);
}

uint64_t sub_1005A0780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 128) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_101111440);
LABEL_11:
    v19 = sub_10005972C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 144);
    if (v22)
    {
      v36 = *(_QWORD *)(v0 + 64);
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(32, -1);
      v37 = v25;
      *(_DWORD *)v24 = 141558275;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      v26 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v36, v26);
      *(_QWORD *)(v0 + 24) = sub_100016940(v27, v28, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v23, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Skip keys download for %{private,mask.hash}s.\nShare has not been accepted yet.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
    }

    v29 = *(_QWORD *)(v0 + 160);
    v31 = *(_QWORD *)(v0 + 144);
    v30 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 112);
    v34 = *(_QWORD *)(v0 + 88);
    v33 = *(_QWORD *)(v0 + 96);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 160);
  sub_1000126EC(v2, v3, type metadata accessor for MemberSharingCircle);
  v4 = *(unsigned __int8 *)(v3 + *(int *)(v1 + 40));
  v5 = v4 > 4;
  v6 = (1 << v4) & 0x16;
  if (v5 || v6 == 0)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for MemberSharingCircle);
    goto LABEL_11;
  }
  if (qword_1010E9D18 != -1)
    swift_once(&qword_1010E9D18, sub_10059F854);
  v8 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 48);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 88), v12 + *(int *)(*(_QWORD *)(v0 + 120) + 24), *(_QWORD *)(v0 + 64));
  sub_10005972C(v12, v8, type metadata accessor for MemberSharingCircle);
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_101080F38, v14 + v9, v13 | 7);
  *(_QWORD *)(v0 + 216) = v15;
  *(_QWORD *)(v15 + 16) = v11;
  sub_1000126EC(v8, v15 + v14, type metadata accessor for MemberSharingCircle);
  v16 = *((unsigned int *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
        + 1);
  v35 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
      + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  v17 = (_QWORD *)swift_task_alloc(v16);
  *(_QWORD *)(v0 + 224) = v17;
  *v17 = v0;
  v17[1] = sub_1005A0B50;
  return ((uint64_t (*)(_QWORD, void *, uint64_t, uint64_t (*)(), _QWORD))v35)(*(_QWORD *)(v0 + 88), &unk_1010FFD88, v15, sub_1005A1208, 0);
}

uint64_t sub_1005A0B50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_release();
  if (v0)
    v7 = sub_1005A0C74;
  else
    v7 = sub_1005A0BE4;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_1005A0BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for MemberSharingCircle);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A0C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A0D10(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for MemberSharingCircle(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[9] = v7;
  v2[10] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[11] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v9);
  v2[13] = swift_task_alloc(v9);
  return swift_task_switch(sub_1005A0DD4, 0, 0);
}

uint64_t sub_1005A0DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + 152);
  *(_QWORD *)(v0 + 112) = v2;
  *(_DWORD *)(v0 + 152) = *(_DWORD *)(v1 + 20);
  return swift_task_switch(sub_1005A0DFC, v2, 0);
}

uint64_t sub_1005A0DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 24) + *(int *)(v0 + 152), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101080F60, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 120) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 128) = v10;
  *v10 = v0;
  v10[1] = sub_1005A0EE0;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 104), sub_1001429AC, v8, *(_QWORD *)(v0 + 88));
}

uint64_t sub_1005A0EE0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release();
  return swift_task_switch(sub_1005A0F3C, 0, 0);
}

uint64_t sub_1005A0F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  sub_10000F9B8(*(_QWORD *)(v0 + 104), v1, (uint64_t *)&unk_101111440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 96), (uint64_t *)&unk_101111440);
    v4 = sub_1000D97F8();
    v5 = swift_allocError(&type metadata for ShareKeysDownloadUseCase.Error, v4, 0, 0);
    *v6 = 1;
    swift_willThrow(v5);
    v8 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = *(_QWORD *)(v0 + 48);
    sub_100004048(v7, (uint64_t *)&unk_101111440);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    sub_1000126EC(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 48), type metadata accessor for MemberSharingCircle);
    v12 = (_QWORD *)swift_task_alloc(dword_1010FFC64);
    *(_QWORD *)(v0 + 136) = v12;
    *v12 = v0;
    v12[1] = sub_1005A1094;
    return sub_1005A1A70(*(_QWORD *)(v0 + 48), 0);
  }
}

uint64_t sub_1005A1094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1005A117C;
  else
    v3 = sub_1005A10F8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005A10F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  sub_1000126B0(v4, type metadata accessor for MemberSharingCircle);
  sub_100004048(v2, (uint64_t *)&unk_101111440);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1005A117C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 48), type metadata accessor for MemberSharingCircle);
  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 48);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1005A1208()
{
  unint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  v0 = sub_1000D97F8();
  v1 = swift_allocError(&type metadata for ShareKeysDownloadUseCase.Error, v0, 0, 0);
  *v2 = 0;
  return swift_willThrow(v1);
}

uint64_t sub_1005A1250(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[10] = v5;
  v2[11] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[12] = v6;
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  v2[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[15] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v9);
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_1005A1320, v1, 0);
}

uint64_t sub_1005A1320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 152) = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v1, v2, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 144);
  if (v7)
  {
    v17 = *(_QWORD *)(v0 + 64);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 32) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v17, v11);
    *(_QWORD *)(v0 + 40) = sub_100016940(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Force download Keys for circle %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 144), type metadata accessor for MemberSharingCircle);
  }

  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 152);
  *(_QWORD *)(v0 + 160) = v15;
  *(_DWORD *)(v0 + 200) = *(_DWORD *)(v14 + 20);
  return swift_task_switch(sub_1005A1568, v15, 0);
}

uint64_t sub_1005A1568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 48) + *(int *)(v0 + 200), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101080EE8, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 168) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 176) = v10;
  *v10 = v0;
  v10[1] = sub_1005A1648;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 104), sub_1001429AC, v8, *(_QWORD *)(v0 + 96));
}

uint64_t sub_1005A1648()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release();
  return swift_task_switch(sub_1005A16A8, v1, 0);
}

uint64_t sub_1005A16A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  _QWORD *v8;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_101111440);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 136);
    sub_1000126EC(v2, v3, type metadata accessor for MemberSharingCircle);
    v4 = *(unsigned __int8 *)(v3 + *(int *)(v1 + 40));
    v5 = v4 > 4;
    v6 = (1 << v4) & 0x16;
    if (!v5 && v6 != 0)
    {
      v8 = (_QWORD *)swift_task_alloc(dword_1010FFC64);
      *(_QWORD *)(v0 + 184) = v8;
      *v8 = v0;
      v8[1] = sub_1005A1988;
      return sub_1005A1A70(*(_QWORD *)(v0 + 48), 0);
    }
    sub_1000126B0(*(_QWORD *)(v0 + 136), type metadata accessor for MemberSharingCircle);
  }
  v10 = sub_10005972C(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 128), type metadata accessor for MemberSharingCircle);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(_QWORD *)(v0 + 128);
  if (v13)
  {
    v24 = *(_QWORD *)(v0 + 64);
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(32, -1);
    v25 = v16;
    *(_DWORD *)v15 = 141558275;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v24, v17);
    *(_QWORD *)(v0 + 24) = sub_100016940(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v14, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Skip keys download for %{private,mask.hash}s.\nShare has not been accepted yet.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 128), type metadata accessor for MemberSharingCircle);
  }

  v20 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A1988()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1005A19EC;
  else
    v4 = sub_1005A01F4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_1005A19EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 88);
  sub_1000126B0(v1, type metadata accessor for MemberSharingCircle);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A1A70(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_BYTE *)(v3 + 75) = a2;
  *(_QWORD *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = v2;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v3 + 216) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v3 + 224) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 232) = v6;
  v7 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v3 + 240) = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 248) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 256) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 264) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 272) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 280) = swift_task_alloc(v8);
  return swift_task_switch(sub_1005A1B30, v2, 0);
}

uint64_t sub_1005A1B30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[35];
  v2 = v0[25];
  v3 = type metadata accessor for Logger(0);
  v0[36] = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v2, v1, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = v0[35];
  if (v7)
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 141558275;
    v0[16] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v0[12] = sub_100016940(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Process keys downloading for circle %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[35], type metadata accessor for MemberSharingCircle);
  }

  sub_10001AA44((_QWORD *)(v0[26] + 112), *(_QWORD *)(v0[26] + 136));
  v15 = (_QWORD *)swift_task_alloc(dword_10110D134);
  v0[37] = v15;
  *v15 = v0;
  v15[1] = sub_1005A1D90;
  return sub_100908924(v0[25]);
}

uint64_t sub_1005A1D90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t);

  v3 = *(_QWORD *)(*(_QWORD *)v2 + 296);
  v4 = *(_QWORD **)v2;
  v4[38] = a1;
  v4[39] = v1;
  swift_task_dealloc(v3);
  if (v1)
    return swift_task_switch(sub_1005A1F24, v4[26], 0);
  v7 = (uint64_t (*)(uint64_t))((char *)&dword_1011135B0 + dword_1011135B0);
  v6 = (_QWORD *)swift_task_alloc(unk_1011135B4);
  v4[40] = v6;
  *v6 = v4;
  v6[1] = sub_1005A1E40;
  return v7(2);
}

uint64_t sub_1005A1E40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *v0;
  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 320));
  v3 = (_QWORD *)swift_task_alloc(dword_1010FFD44);
  *(_QWORD *)(v1 + 328) = v3;
  *v3 = v2;
  v3[1] = sub_1005A1EB0;
  return sub_1005A2C34(*(_QWORD *)(v1 + 304), *(_QWORD *)(v1 + 200), *(_BYTE *)(v1 + 75));
}

uint64_t sub_1005A1EB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 208);
    v5 = sub_1005A28E0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 208);
    swift_bridgeObjectRelease();
    v5 = sub_1005A2418;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1005A1F24()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char);
  uint64_t v47;

  v1 = v0 + 168;
  v2 = (_BYTE *)(v0 + 73);
  v3 = *(_QWORD *)(v0 + 312);
  sub_10005972C(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 272), type metadata accessor for MemberSharingCircle);
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 312);
    v8 = *(_QWORD *)(v0 + 272);
    v9 = swift_slowAlloc(32, -1);
    v45 = swift_slowAlloc(64, -1);
    v47 = v45;
    *(_DWORD *)v9 = 141558531;
    *(_QWORD *)(v0 + 104) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    *(_QWORD *)(v0 + 112) = sub_100016940(v12, v13, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    v14 = v8;
    v2 = (_BYTE *)(v0 + 73);
    sub_1000126B0(v14, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v9 + 22) = 2082;
    swift_getErrorValue(v7, v0 + 120, v0 + 40);
    v15 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    *(_QWORD *)(v0 + 136) = sub_100016940(v15, v16, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to download keys for circle: %{private,mask.hash}s,\nerror: %{public}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    v17 = v9;
    v1 = v0 + 168;
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 312);
    sub_1000126B0(*(_QWORD *)(v0 + 272), type metadata accessor for MemberSharingCircle);
    swift_errorRelease(v18);
    swift_errorRelease(v18);
  }

  v19 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 168) = v19;
  swift_errorRetain(v19);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  *(_QWORD *)(v0 + 352) = v20;
  if (!swift_dynamicCast(v2, v1, v20, &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, 6)|| *v2 != 19|| (v21 = *(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 88) = v21, swift_errorRetain(v21), (swift_dynamicCast(v0 + 74, v0 + 88, v20, &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError, 6) & 1) == 0))
  {
    v46 = (uint64_t (*)(char))((char *)&dword_1011135B0 + dword_1011135B0);
    v37 = (_QWORD *)swift_task_alloc(unk_1011135B4);
    *(_QWORD *)(v0 + 360) = v37;
    *v37 = v0;
    v37[1] = sub_1005A26C8;
    return v46(0);
  }
  v22 = *(_QWORD *)(v0 + 352);
  v23 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 80) = v23;
  swift_errorRetain(v23);
  if (!swift_dynamicCast(v0 + 64, v0 + 80, v22, &type metadata for KeyDropInterface.KeyDropError, 6))
  {
    v39 = *(_QWORD *)(v0 + 312);
LABEL_14:
    swift_errorRelease(v39);
    goto LABEL_15;
  }
  v24 = *(_QWORD *)(v0 + 312);
  if (*(_BYTE *)(v0 + 72) != 1 || *(_QWORD *)(v0 + 64) <= 5uLL)
  {
    v39 = *(_QWORD *)(v0 + 312);
    goto LABEL_14;
  }
  v25 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 240);
  v29 = *(_QWORD *)(v0 + 208);
  v28 = *(_QWORD *)(v0 + 216);
  v30 = *(_QWORD *)(v0 + 200);
  v31 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v28, 1, 1, v31);
  sub_10005972C(v30, v25, type metadata accessor for MemberSharingCircle);
  v33 = sub_100006C64(&qword_1010FFD30, v32, (uint64_t (*)(uint64_t))type metadata accessor for ShareKeysDownloadUseCase, (uint64_t)&unk_100E4488C);
  v34 = *(unsigned __int8 *)(v27 + 80);
  v35 = (v34 + 40) & ~v34;
  v36 = (_QWORD *)swift_allocObject(&unk_101080EC0, v35 + v26, v34 | 7);
  v36[2] = v29;
  v36[3] = v33;
  v36[4] = v29;
  sub_1000126EC(v25, (uint64_t)v36 + v35, type metadata accessor for MemberSharingCircle);
  swift_retain_n(v29, 2);
  sub_100691AC0(v28, (uint64_t)&unk_1010FFD78, (uint64_t)v36);
  swift_errorRelease(v24);
  swift_release();
LABEL_15:
  v40 = *(_QWORD *)(v0 + 272);
  v42 = *(_QWORD *)(v0 + 256);
  v41 = *(_QWORD *)(v0 + 264);
  v43 = *(_QWORD *)(v0 + 248);
  v44 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A2418()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_10005972C(v0[25], v0[33], type metadata accessor for MemberSharingCircle);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v12 = v0[33];
    v4 = swift_slowAlloc(22, -1);
    v5 = swift_slowAlloc(32, -1);
    v0[23] = 1752392040;
    v13 = v5;
    *(_DWORD *)v4 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v4 + 4, v4 + 12);
    *(_WORD *)(v4 + 12) = 2081;
    v6 = type metadata accessor for UUID(0);
    v7 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v8 = dispatch thunk of CustomStringConvertible.description.getter(v6, v7);
    v0[24] = sub_100016940(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v4 + 14, v4 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Done processing members for circle %{private,mask.hash}s.", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[33], type metadata accessor for MemberSharingCircle);
  }

  sub_10001AA44((_QWORD *)(v0[26] + 160), *(_QWORD *)(v0[26] + 184));
  v10 = (_QWORD *)swift_task_alloc(dword_10111A22C);
  v0[43] = v10;
  *v10 = v0;
  v10[1] = sub_1005A2638;
  return sub_100C305EC(v0[25]);
}

uint64_t sub_1005A2638()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;

  v1 = *(_QWORD **)v0;
  v9 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  v3 = v1[34];
  v2 = v1[35];
  v5 = v1[32];
  v4 = v1[33];
  v6 = v1[31];
  v7 = v1[27];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return ((uint64_t (*)(void))v9[1])();
}

uint64_t sub_1005A26C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  return swift_task_switch(sub_1005A2720, v1, 0);
}

uint64_t sub_1005A2720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 312);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = *(_QWORD *)(v0 + 352);
  swift_errorRetain(v1);
  if ((swift_dynamicCast(v0 + 64, v0 + 80, v2, &type metadata for KeyDropInterface.KeyDropError, 6) & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 312);
    if (*(_BYTE *)(v0 + 72) == 1 && *(_QWORD *)(v0 + 64) > 5uLL)
    {
      v6 = *(_QWORD *)(v0 + 256);
      v8 = *(_QWORD *)(v0 + 232);
      v7 = *(_QWORD *)(v0 + 240);
      v10 = *(_QWORD *)(v0 + 208);
      v9 = *(_QWORD *)(v0 + 216);
      v11 = *(_QWORD *)(v0 + 200);
      v12 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
      sub_10005972C(v11, v6, type metadata accessor for MemberSharingCircle);
      v14 = sub_100006C64(&qword_1010FFD30, v13, (uint64_t (*)(uint64_t))type metadata accessor for ShareKeysDownloadUseCase, (uint64_t)&unk_100E4488C);
      v15 = *(unsigned __int8 *)(v8 + 80);
      v16 = (v15 + 40) & ~v15;
      v17 = (_QWORD *)swift_allocObject(&unk_101080EC0, v16 + v7, v15 | 7);
      v17[2] = v10;
      v17[3] = v14;
      v17[4] = v10;
      sub_1000126EC(v6, (uint64_t)v17 + v16, type metadata accessor for MemberSharingCircle);
      swift_retain_n(v10, 2);
      sub_100691AC0(v9, (uint64_t)&unk_1010FFD78, (uint64_t)v17);
      swift_errorRelease(v3);
      swift_release();
      goto LABEL_10;
    }
    v5 = *(_QWORD *)(v0 + 312);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 312);
  }
  swift_errorRelease(v5);
LABEL_10:
  v18 = *(_QWORD *)(v0 + 272);
  v20 = *(_QWORD *)(v0 + 256);
  v19 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 248);
  v22 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A28E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;

  v1 = v0[42];
  v2 = v0[31];
  v3 = v0[25];
  swift_bridgeObjectRelease();
  sub_10005972C(v3, v2, type metadata accessor for MemberSharingCircle);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v0[42];
    v8 = v0[31];
    v9 = swift_slowAlloc(32, -1);
    v20 = swift_slowAlloc(64, -1);
    v21 = v20;
    *(_DWORD *)v9 = 141558531;
    v0[18] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    v0[19] = sub_100016940(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 19, v0 + 20, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v9 + 22) = 2082;
    swift_getErrorValue(v7, v0 + 20, v0 + 2);
    v14 = Error.localizedDescription.getter(v0[3], v0[4]);
    v0[22] = sub_100016940(v14, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to process circle: %{private,mask.hash}s,\nerror: %{public}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    v16 = v0[42];
    v17 = v0[31];
    swift_errorRelease(v16);
    sub_1000126B0(v17, type metadata accessor for MemberSharingCircle);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

  }
  sub_10001AA44((_QWORD *)(v0[26] + 160), *(_QWORD *)(v0[26] + 184));
  v18 = (_QWORD *)swift_task_alloc(dword_10111A22C);
  v0[43] = v18;
  *v18 = v0;
  v18[1] = sub_1005A2638;
  return sub_100C305EC(v0[25]);
}

uint64_t sub_1005A2BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1005A2BD4, a4, 0);
}

uint64_t sub_1005A2BD4()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[2] + 160), *(_QWORD *)(v0[2] + 184));
  v1 = (_QWORD *)swift_task_alloc(dword_10111A224);
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_1002AC210;
  return sub_100C2EE60(v0[3]);
}

uint64_t sub_1005A2C34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)(v4 + 728) = v3;
  *(_BYTE *)(v4 + 1348) = a3;
  *(_QWORD *)(v4 + 720) = a2;
  *(_QWORD *)(v4 + 712) = a1;
  v5 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v4 + 736) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011093D0);
  *(_QWORD *)(v4 + 744) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 752) = v7;
  *(_QWORD *)(v4 + 760) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v4 + 768) = v8;
  *(_QWORD *)(v4 + 776) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EC868);
  *(_QWORD *)(v4 + 784) = v9;
  *(_QWORD *)(v4 + 792) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MemberPeerTrust(0);
  *(_QWORD *)(v4 + 800) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 808) = v11;
  *(_QWORD *)(v4 + 816) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member(0);
  *(_QWORD *)(v4 + 824) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v4 + 832) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 840) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 848) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 856) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 864) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 872) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 880) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 888) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 896) = swift_task_alloc(v14);
  *(_QWORD *)(v4 + 904) = swift_task_alloc(v14);
  v15 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v4 + 912) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v4 + 920) = v16;
  v17 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v4 + 928) = v17;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 936) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 944) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 952) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 960) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 968) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 976) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 984) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 992) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 1000) = swift_task_alloc(v18);
  *(_QWORD *)(v4 + 1008) = swift_task_alloc(v18);
  v19 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 1016) = v19;
  v20 = *(_QWORD *)(v19 - 8);
  *(_QWORD *)(v4 + 1024) = v20;
  v21 = *(_QWORD *)(v20 + 64);
  *(_QWORD *)(v4 + 1032) = v21;
  *(_QWORD *)(v4 + 1040) = swift_task_alloc((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005A2E94, v3, 0);
}

uint64_t sub_1005A2E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 728) + 152);
  *(_QWORD *)(v0 + 1048) = v2;
  *(_DWORD *)(v0 + 1328) = *(_DWORD *)(v1 + 24);
  return swift_task_switch(sub_1005A2EBC, v2, 0);
}

uint64_t sub_1005A2EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 1048);
  v2 = *(_QWORD *)(v0 + 1040);
  v3 = *(_QWORD *)(v0 + 1032);
  v4 = *(_QWORD *)(v0 + 1024);
  v5 = *(_QWORD *)(v0 + 1016);
  v6 = *(_QWORD *)(v0 + 720) + *(int *)(v0 + 1328);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 1056) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1332) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101080D80, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 1064) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 1072) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 1080) = v13;
  v14 = sub_10001A9A8(&qword_1010EC840);
  *v13 = v0;
  v13[1] = sub_1005A2FD0;
  return unsafeBlocking<A>(_:)(v0 + 704, sub_1005AC640, v10, v14);
}

uint64_t sub_1005A2FD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1080));
  swift_release();
  return swift_task_switch(sub_1005A3034, v1, 0);
}

uint64_t sub_1005A3034()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[91];
  v0[136] = v0[88];
  return swift_task_switch(sub_1005A3050, v1, 0);
}

uint64_t sub_1005A3050()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (__cdecl *v60)();
  uint64_t v61[2];

  v1 = *(_QWORD *)(v0 + 1088);
  v2 = *(_QWORD *)(v0 + 720);
  v3 = (unint64_t *)swift_task_alloc(32);
  v3[2] = v2;
  v4 = sub_10008B49C((uint64_t (*)(char *))sub_1005AC680, v3, v1);
  *(_QWORD *)(v0 + 1096) = v4;
  swift_task_dealloc(v3);
  *(_QWORD *)(v0 + 680) = _swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 + 1104) = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + 920);
    v7 = *(_QWORD *)(v0 + 912);
    v8 = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 1336) = v8;
    *(_QWORD *)(v0 + 1112) = *(_QWORD *)(v6 + 72);
    *(_QWORD *)(v0 + 1120) = 0;
    v9 = *(_QWORD *)(v0 + 1008);
    v10 = *(_QWORD *)(v0 + 1096) + ((v8 + 32) & ~(unint64_t)v8);
    swift_bridgeObjectRetain(v4);
    sub_10005972C(v10, v9, type metadata accessor for MemberSharingCircle);
    v11 = *(_QWORD *)(v9 + *(int *)(v7 + 36));
    v12 = *(_QWORD *)(v11 + 16);
    if (!v12)
    {
      v19 = _swiftEmptyArrayStorage;
      goto LABEL_14;
    }
    v13 = *(unsigned __int8 *)(v0 + 1332);
    v14 = *(_QWORD *)(v0 + 1024);
    v15 = (v13 + 32) & ~v13;
    v16 = v13 | 7;
    v17 = sub_10001A9A8(&qword_1011003C0);
    v18 = *(_QWORD *)(v14 + 72);
    v19 = (_QWORD *)swift_allocObject(v17, v15 + v18 * v12, v16);
    result = j__malloc_size(v19);
    if (v18)
    {
      if (result - v15 == 0x8000000000000000 && v18 == -1)
      {
        __break(1u);
        goto LABEL_24;
      }
      v22 = *(unsigned __int8 *)(v0 + 1332);
      v19[2] = v12;
      v19[3] = 2 * ((result - v15) / v18);
      v23 = (char *)v19 + ((v22 + 32) & ~v22);
      swift_bridgeObjectRetain_n(v11, 2);
      v24 = sub_10050A294(v0 + 96, v23, v12, v11);
      sub_10007CC38(*(_QWORD *)(v0 + 96));
      if (v24 == v12)
      {
        swift_bridgeObjectRelease();
LABEL_14:
        *(_QWORD *)(v0 + 672) = v19;
        v52 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
        *(_QWORD *)(v0 + 1128) = v52;
        v53 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
        v54 = sub_1000193A4((unint64_t *)&qword_1010F1DF8, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for [A]);
        *v52 = v0;
        v52[1] = sub_1005A3700;
        return Sequence.asyncCompactMap<A>(_:)(&unk_1010FFD50, *(_QWORD *)(v0 + 728), v53, &type metadata for String, v54);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else if (qword_1010E9938 == -1)
  {
    goto LABEL_11;
  }
  swift_once(&qword_1010E9938, sub_1000AFBB0);
LABEL_11:
  v25 = (__int128 *)(v0 + 16);
  v26 = v0 + 352;
  v27 = *(_QWORD *)(v0 + 1000);
  v28 = *(_QWORD *)(v0 + 720);
  v29 = *(_QWORD *)(v0 + 712);
  v30 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 1144) = v30;
  *(_QWORD *)(v0 + 1152) = sub_10001A9E8(v30, (uint64_t)qword_1011B6748);
  sub_10005972C(v28, v27, type metadata accessor for MemberSharingCircle);
  swift_bridgeObjectRetain_n(v29, 4);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = *(_QWORD *)(v0 + 1016);
    v35 = *(_QWORD *)(v0 + 1000);
    v58 = *(_QWORD *)(v0 + 824);
    v36 = *(_QWORD *)(v0 + 712);
    v37 = swift_slowAlloc(62, -1);
    v59 = swift_slowAlloc(96, -1);
    v61[0] = v59;
    *(_DWORD *)v37 = 141559299;
    *(_QWORD *)(v0 + 688) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2081;
    v38 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v34, v38);
    *(_QWORD *)(v0 + 696) = sub_100016940(v39, v40, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v35, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v37 + 22) = 2080;
    swift_beginAccess(v0 + 680, v0 + 376, 0, 0);
    v41 = *(_QWORD *)(v0 + 680);
    swift_bridgeObjectRetain(v41);
    v43 = Array.description.getter(v42, &type metadata for String);
    v45 = v44;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 664) = sub_100016940(v43, v45, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v37 + 24, v37 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 32) = 2048;
    *(_QWORD *)(v0 + 656) = *(_QWORD *)(v41 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v37 + 34, v37 + 42);
    *(_WORD *)(v37 + 42) = 2080;
    swift_bridgeObjectRetain(v36);
    v47 = Array.description.getter(v46, v58);
    v49 = v48;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 648) = sub_100016940(v47, v49, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v37 + 44, v37 + 52);
    swift_bridgeObjectRelease_n(v36, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 52) = 2048;
    v25 = (__int128 *)(v0 + 16);
    v50 = *(_QWORD *)(v36 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 536) = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 544, v37 + 54, v37 + 62);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Processing circle: %{private,mask.hash}s,\nknownMembers: %s, count: %ld,\nmembers: %s, count: %ld.", (uint8_t *)v37, 0x3Eu);
    swift_arrayDestroy(v59, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    v51 = v37;
    v26 = v0 + 352;
    swift_slowDealloc(v51, -1, -1);

  }
  else
  {
    v55 = *(_QWORD *)(v0 + 1000);
    v56 = *(_QWORD *)(v0 + 712);
    swift_bridgeObjectRelease();
    sub_1000126B0(v55, type metadata accessor for MemberSharingCircle);

    swift_bridgeObjectRelease_n(v56, 3);
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v26, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v25, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_10000F9FC(v25, v0 + 176);
    sub_10001AA44((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
    v60 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBB8 + dword_1010EBBB8);
    v57 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
    *(_QWORD *)(v0 + 1160) = v57;
    *v57 = v0;
    v57[1] = sub_1005A3DF0;
    return v60();
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1005A3700(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1128);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 728);
  *(_QWORD *)(*(_QWORD *)v1 + 1136) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1005A3768, v3, 0);
}

uint64_t sub_1005A3768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t result;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *log;
  uint64_t (__cdecl *v57)();
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 1104);
  v2 = *(_QWORD *)(v0 + 1008);
  v3 = *(_QWORD *)(v0 + 1120) + 1;
  sub_100302314(*(_QWORD *)(v0 + 1136));
  sub_1000126B0(v2, type metadata accessor for MemberSharingCircle);
  if (v3 == v1)
  {
    swift_bridgeObjectRelease();
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = (__int128 *)(v0 + 16);
    v5 = v0 + 352;
    v6 = *(_QWORD *)(v0 + 1000);
    v7 = *(_QWORD *)(v0 + 720);
    v8 = *(_QWORD *)(v0 + 712);
    v9 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 1144) = v9;
    *(_QWORD *)(v0 + 1152) = sub_10001A9E8(v9, (uint64_t)qword_1011B6748);
    sub_10005972C(v7, v6, type metadata accessor for MemberSharingCircle);
    swift_bridgeObjectRetain_n(v8, 4);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      log = v11;
      v13 = *(_QWORD *)(v0 + 1016);
      v14 = *(_QWORD *)(v0 + 1000);
      v54 = *(_QWORD *)(v0 + 824);
      v15 = *(_QWORD *)(v0 + 712);
      v16 = swift_slowAlloc(62, -1);
      v55 = swift_slowAlloc(96, -1);
      v58 = v55;
      *(_DWORD *)v16 = 141559299;
      *(_QWORD *)(v0 + 688) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2081;
      v17 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
      *(_QWORD *)(v0 + 696) = sub_100016940(v18, v19, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v14, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v16 + 22) = 2080;
      swift_beginAccess(v0 + 680, v0 + 376, 0, 0);
      v20 = *(_QWORD *)(v0 + 680);
      swift_bridgeObjectRetain(v20);
      v22 = Array.description.getter(v21, &type metadata for String);
      v24 = v23;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 664) = sub_100016940(v22, v24, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v16 + 24, v16 + 32);
      v4 = (__int128 *)(v0 + 16);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 32) = 2048;
      *(_QWORD *)(v0 + 656) = *(_QWORD *)(v20 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v16 + 34, v16 + 42);
      *(_WORD *)(v16 + 42) = 2080;
      swift_bridgeObjectRetain(v15);
      v26 = Array.description.getter(v25, v54);
      v28 = v27;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 648) = sub_100016940(v26, v28, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v16 + 44, v16 + 52);
      swift_bridgeObjectRelease_n(v15, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 52) = 2048;
      v29 = *(_QWORD *)(v15 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 536) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 544, v16 + 54, v16 + 62);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, v12, "Processing circle: %{private,mask.hash}s,\nknownMembers: %s, count: %ld,\nmembers: %s, count: %ld.", (uint8_t *)v16, 0x3Eu);
      swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      v30 = v16;
      v5 = v0 + 352;
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {
      v48 = *(_QWORD *)(v0 + 1000);
      v49 = *(_QWORD *)(v0 + 712);
      swift_bridgeObjectRelease();
      sub_1000126B0(v48, type metadata accessor for MemberSharingCircle);

      swift_bridgeObjectRelease_n(v49, 3);
    }
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v5, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v4, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 40))
    {
      sub_10000F9FC(v4, v0 + 176);
      sub_10001AA44((_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 200));
      v57 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBB8 + dword_1010EBBB8);
      v50 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
      *(_QWORD *)(v0 + 1160) = v50;
      *v50 = v0;
      v50[1] = sub_1005A3DF0;
      return v57();
    }
    goto LABEL_24;
  }
  v31 = *(_QWORD *)(v0 + 1120) + 1;
  *(_QWORD *)(v0 + 1120) = v31;
  v32 = *(_QWORD *)(v0 + 1008);
  v33 = *(_QWORD *)(v0 + 912);
  sub_10005972C(*(_QWORD *)(v0 + 1096)+ ((*(unsigned __int8 *)(v0 + 1336) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1336))+ *(_QWORD *)(v0 + 1112) * v31, v32, type metadata accessor for MemberSharingCircle);
  v34 = *(_QWORD *)(v32 + *(int *)(v33 + 36));
  v35 = *(_QWORD *)(v34 + 16);
  if (!v35)
  {
    v42 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v36 = *(unsigned __int8 *)(v0 + 1332);
  v37 = *(_QWORD *)(v0 + 1024);
  v38 = (v36 + 32) & ~v36;
  v39 = v36 | 7;
  v40 = sub_10001A9A8(&qword_1011003C0);
  v41 = *(_QWORD *)(v37 + 72);
  v42 = (_QWORD *)swift_allocObject(v40, v38 + v41 * v35, v39);
  result = j__malloc_size(v42);
  if (v41)
  {
    if (result - v38 == 0x8000000000000000 && v41 == -1)
      goto LABEL_23;
    v45 = *(unsigned __int8 *)(v0 + 1332);
    v42[2] = v35;
    v42[3] = 2 * ((result - v38) / v41);
    v46 = (char *)v42 + ((v45 + 32) & ~v45);
    swift_bridgeObjectRetain_n(v34, 2);
    v47 = sub_10050A294(v0 + 96, v46, v35, v34);
    result = sub_10007CC38(*(_QWORD *)(v0 + 96));
    if (v47 == v35)
    {
      swift_bridgeObjectRelease();
LABEL_20:
      *(_QWORD *)(v0 + 672) = v42;
      v51 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
      *(_QWORD *)(v0 + 1128) = v51;
      v52 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
      v53 = sub_1000193A4((unint64_t *)&qword_1010F1DF8, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for [A]);
      *v51 = v0;
      v51[1] = sub_1005A3700;
      return Sequence.asyncCompactMap<A>(_:)(&unk_1010FFD50, *(_QWORD *)(v0 + 728), v52, &type metadata for String, v53);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1005A3DF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 728);
  *(_QWORD *)(*(_QWORD *)v1 + 1168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005A3E50, v3, 0);
}

uint64_t sub_1005A3E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (*(_QWORD *)(v0 + 1168))
  {
    v1 = *(_QWORD *)(v0 + 712);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    v2 = *(_QWORD *)(v1 + 16);
    *(_QWORD *)(v0 + 1176) = v2;
    if (v2)
    {
      v3 = *(_QWORD *)(v0 + 832);
      v4 = *(_QWORD *)(v0 + 712);
      *(_DWORD *)(v0 + 1340) = *(_DWORD *)(v3 + 80);
      swift_bridgeObjectRetain(v4);
      swift_beginAccess(v0 + 680, v0 + 328, 0, 0);
      v5 = 0;
      *(_QWORD *)(v0 + 1184) = *(_QWORD *)(v3 + 72);
      do
      {
        *(_QWORD *)(v0 + 1208) = _swiftEmptyArrayStorage;
        *(_QWORD *)(v0 + 1200) = _swiftEmptyArrayStorage;
        *(_QWORD *)(v0 + 1192) = v5;
        v6 = *(_QWORD *)(v0 + 904);
        v7 = *(_QWORD *)(v0 + 824);
        sub_10005972C(*(_QWORD *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1340) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1340))+ *(_QWORD *)(v0 + 1184) * v5, v6, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        if ((*(_BYTE *)(v6 + *(int *)(v7 + 20)) & 1) == 0)
        {
          v8 = *(_QWORD *)(v0 + 1040);
          v9 = *(_QWORD *)(v0 + 1024);
          v10 = *(_QWORD *)(v0 + 1016);
          v11 = *(_QWORD *)(v0 + 904);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v8, *(_QWORD *)(v0 + 720) + *(int *)(*(_QWORD *)(v0 + 912) + 32), v10);
          v12 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v11) = dispatch thunk of static Equatable.== infix(_:_:)(v11, v8, v10, v12);
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
          if ((v11 & 1) == 0)
            return swift_task_switch(sub_1005A429C, *(_QWORD *)(v0 + 1048), 0);
        }
        sub_1000126B0(*(_QWORD *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        v5 = *(_QWORD *)(v0 + 1192) + 1;
      }
      while (v5 != *(_QWORD *)(v0 + 1176));
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)(v0 + 1288) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1280) = _swiftEmptyArrayStorage;
    v27 = (_QWORD *)swift_task_alloc(dword_1010FFD6C);
    *(_QWORD *)(v0 + 1296) = v27;
    *v27 = v0;
    v27[1] = sub_1005A71D8;
    return sub_1005A9B20((uint64_t)_swiftEmptyArrayStorage, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 1096));
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
    if (qword_1010E9FD0 != -1)
      swift_once(&qword_1010E9FD0, sub_1008973A4);
    v14 = sub_10001A9E8(*(_QWORD *)(v0 + 1144), (uint64_t)qword_1011B7860);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No ItemSharingNotificationsService available!", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    swift_bridgeObjectRelease();
    v18 = *(_QWORD *)(v0 + 1008);
    v19 = *(_QWORD *)(v0 + 1000);
    v20 = *(_QWORD *)(v0 + 992);
    v21 = *(_QWORD *)(v0 + 984);
    v22 = *(_QWORD *)(v0 + 976);
    v23 = *(_QWORD *)(v0 + 968);
    v24 = *(_QWORD *)(v0 + 960);
    v25 = *(_QWORD *)(v0 + 952);
    v26 = *(_QWORD *)(v0 + 944);
    v28 = *(_QWORD *)(v0 + 936);
    v29 = *(_QWORD *)(v0 + 904);
    v30 = *(_QWORD *)(v0 + 896);
    v31 = *(_QWORD *)(v0 + 888);
    v32 = *(_QWORD *)(v0 + 880);
    v33 = *(_QWORD *)(v0 + 872);
    v34 = *(_QWORD *)(v0 + 864);
    v35 = *(_QWORD *)(v0 + 856);
    v36 = *(_QWORD *)(v0 + 848);
    v37 = *(_QWORD *)(v0 + 840);
    v38 = *(_QWORD *)(v0 + 816);
    v39 = *(_QWORD *)(v0 + 792);
    v40 = *(_QWORD *)(v0 + 776);
    v41 = *(_QWORD *)(v0 + 760);
    v42 = *(_QWORD *)(v0 + 736);
    swift_task_dealloc(*(_QWORD *)(v0 + 1040));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005A429C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
  v2 = *(unsigned __int8 *)(v0 + 1332);
  v3 = *(_QWORD *)(v0 + 1048);
  v4 = *(_QWORD *)(v0 + 1040);
  v5 = *(_QWORD *)(v0 + 1016);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 1032);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v4, *(_QWORD *)(v0 + 904), v5);
  v9 = swift_allocObject(&unk_101080DA8, v7, v8);
  *(_QWORD *)(v0 + 1216) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1224) = v11;
  *v11 = v0;
  v11[1] = sub_1005A438C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 792), sub_100142994, v9, *(_QWORD *)(v0 + 784));
}

uint64_t sub_1005A438C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 728);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1224));
  swift_release();
  return swift_task_switch(sub_1005A43F0, v1, 0);
}

uint64_t sub_1005A43F0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ObjectType;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unsigned __int8 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t result;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)();
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t type[8];
  uint64_t v124;

  v1 = *(_QWORD *)(v0 + 792);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 808) + 48))(v1, 1, *(_QWORD *)(v0 + 800));
  v3 = *(_QWORD *)(v0 + 720);
  if (v2 == 1)
  {
    v4 = *(_QWORD *)(v0 + 960);
    v5 = *(_QWORD *)(v0 + 712);
    sub_100004048(v1, &qword_1010EC868);
    sub_10005972C(v3, v4, type metadata accessor for MemberSharingCircle);
    swift_bridgeObjectRetain_n(v5, 4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = *(_QWORD *)(v0 + 1016);
      v10 = *(_QWORD *)(v0 + 960);
      v117 = *(_QWORD *)(v0 + 824);
      v119 = *(_QWORD *)(v0 + 1176);
      v11 = *(_QWORD *)(v0 + 712);
      v12 = swift_slowAlloc(62, -1);
      v121 = swift_slowAlloc(96, -1);
      v124 = v121;
      *(_DWORD *)v12 = 141559299;
      *(_QWORD *)(v0 + 448) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 448, v0 + 456, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(v9, v13);
      *(_QWORD *)(v0 + 456) = sub_100016940(v14, v15, &v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v12 + 22) = 2080;
      v16 = *(_QWORD *)(v0 + 680);
      swift_bridgeObjectRetain(v16);
      v18 = Array.description.getter(v17, &type metadata for String);
      v20 = v19;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 464) = sub_100016940(v18, v20, &v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 32) = 2048;
      *(_QWORD *)(v0 + 472) = *(_QWORD *)(v16 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 472, v0 + 480, v12 + 34, v12 + 42);
      *(_WORD *)(v12 + 42) = 2080;
      swift_bridgeObjectRetain(v11);
      v22 = Array.description.getter(v21, v117);
      v24 = v23;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 480) = sub_100016940(v22, v24, &v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v12 + 44, v12 + 52);
      swift_bridgeObjectRelease_n(v11, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 52) = 2048;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 488) = v119;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v12 + 54, v12 + 62);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Inconsistent participant list for shareId: %{private,mask.hash}s,\nknownMembers: %s, count: %ld,\nmembers: %s, count: %ld.", (uint8_t *)v12, 0x3Eu);
      swift_arrayDestroy(v121, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {
      v39 = *(_QWORD *)(v0 + 960);
      v40 = *(_QWORD *)(v0 + 712);
      swift_bridgeObjectRelease();
      sub_1000126B0(v39, type metadata accessor for MemberSharingCircle);

      swift_bridgeObjectRelease_n(v40, 3);
    }
    v41 = *(_QWORD *)(v0 + 952);
    v42 = *(_QWORD *)(v0 + 928);
    v43 = *(_QWORD *)(v0 + 920);
    v44 = *(_QWORD *)(v0 + 736);
    v45 = *(_QWORD *)(v0 + 728);
    v46 = *(_QWORD *)(v0 + 720);
    v47 = type metadata accessor for TaskPriority(0);
    v48 = *(_QWORD *)(v47 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v44, 1, 1, v47);
    sub_10005972C(v46, v41, type metadata accessor for MemberSharingCircle);
    v50 = sub_100006C64(&qword_1010FFD30, v49, (uint64_t (*)(uint64_t))type metadata accessor for ShareKeysDownloadUseCase, (uint64_t)&unk_100E4488C);
    v51 = *(unsigned __int8 *)(v43 + 80);
    v52 = (v51 + 40) & ~v51;
    v53 = (_QWORD *)swift_allocObject(&unk_101080DD0, v52 + v42, v51 | 7);
    v53[2] = v45;
    v53[3] = v50;
    v53[4] = v45;
    sub_1000126EC(v41, (uint64_t)v53 + v52, type metadata accessor for MemberSharingCircle);
    LODWORD(v44) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v44, 1, v47);
    v54 = swift_retain_n(v45, 2);
    v55 = *(_QWORD *)(v0 + 736);
    if ((_DWORD)v44 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 736), &qword_1010F46C0);
      v56 = 7168;
      v57 = v53[2];
      if (v57)
      {
LABEL_18:
        v58 = v53[3];
        ObjectType = swift_getObjectType(v57);
        swift_unknownObjectRetain(v57);
        v60 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v58);
        v62 = v61;
        swift_unknownObjectRelease(v57);
LABEL_24:
        v83 = swift_allocObject(&unk_101080DF8, 32, 7);
        *(_QWORD *)(v83 + 16) = &unk_1010FFD60;
        *(_QWORD *)(v83 + 24) = v53;
        if (v62 | v60)
        {
          v84 = v0 + 296;
          *(_QWORD *)(v0 + 296) = 0;
          *(_QWORD *)(v0 + 304) = 0;
          *(_QWORD *)(v0 + 312) = v60;
          *(_QWORD *)(v0 + 320) = v62;
        }
        else
        {
          v84 = 0;
        }
        v92 = *(_QWORD *)(v0 + 904);
        swift_task_create(v56, v84, (char *)&type metadata for () + 8, &unk_1010EE4A0, v83);
        swift_release();
        v81 = v92;
        goto LABEL_36;
      }
    }
    else
    {
      v82 = TaskPriority.rawValue.getter(v54);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v55, v47);
      v56 = v82 | 0x1C00;
      v57 = v53[2];
      if (v57)
        goto LABEL_18;
    }
    v60 = 0;
    v62 = 0;
    goto LABEL_24;
  }
  v25 = *(_QWORD *)(v0 + 912);
  sub_1000126EC(v1, *(_QWORD *)(v0 + 816), type metadata accessor for MemberPeerTrust);
  v26 = *(_QWORD *)(v3 + *(int *)(v25 + 36));
  if (*(_QWORD *)(v26 + 16)
    && (v27 = sub_100003FB0(*(_QWORD *)(v0 + 816) + *(int *)(*(_QWORD *)(v0 + 800) + 20)), (v28 & 1) != 0))
  {
    v29 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 56) + v27);
  }
  else
  {
    v29 = 0;
  }
  v30 = *(_QWORD *)(v0 + 904);
  v31 = (uint64_t *)(*(_QWORD *)(v0 + 816) + *(int *)(*(_QWORD *)(v0 + 800) + 32));
  v32 = *v31;
  v33 = v31[1];
  v34 = *(int *)(*(_QWORD *)(v0 + 824) + 24);
  *(_DWORD *)(v0 + 1344) = v34;
  v35 = (_QWORD *)(v30 + v34);
  v37 = *v35;
  v36 = v35[1];
  if (v32 == *v35 && v33 == v36)
  {
    if (v29 == 1)
    {
LABEL_20:
      v63 = *(_QWORD *)(v0 + 848);
      v64 = *(_QWORD *)(v0 + 840);
      sub_10005972C(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 968), type metadata accessor for MemberSharingCircle);
      sub_10005972C(v30, v63, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v65 = sub_10005972C(v30, v64, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.default.getter(v66);
      if (os_log_type_enabled(v66, v67))
      {
        v68 = *(_QWORD *)(v0 + 1016);
        v69 = *(_QWORD *)(v0 + 968);
        v70 = *(_QWORD *)(v0 + 848);
        v118 = *(_QWORD *)(v0 + 824);
        v120 = *(_QWORD *)(v0 + 840);
        v122 = *(_QWORD *)(v0 + 816);
        *(_QWORD *)type = *(_QWORD *)(v0 + 904);
        v71 = swift_slowAlloc(52, -1);
        v72 = swift_slowAlloc(96, -1);
        v124 = v72;
        *(_DWORD *)v71 = 141559043;
        *(_QWORD *)(v71 + 4) = 1752392040;
        *(_WORD *)(v71 + 12) = 2081;
        v73 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v74 = dispatch thunk of CustomStringConvertible.description.getter(v68, v73);
        *(_QWORD *)(v71 + 14) = sub_100016940(v74, v75, &v124);
        swift_bridgeObjectRelease();
        sub_1000126B0(v69, type metadata accessor for MemberSharingCircle);
        *(_WORD *)(v71 + 22) = 2160;
        *(_QWORD *)(v71 + 24) = 1752392040;
        *(_WORD *)(v71 + 32) = 2081;
        v76 = dispatch thunk of CustomStringConvertible.description.getter(v68, v73);
        *(_QWORD *)(v71 + 34) = sub_100016940(v76, v77, &v124);
        swift_bridgeObjectRelease();
        sub_1000126B0(v70, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        *(_WORD *)(v71 + 42) = 2080;
        v78 = (uint64_t *)(v120 + *(int *)(v118 + 24));
        v79 = *v78;
        v80 = v78[1];
        swift_bridgeObjectRetain(v80);
        *(_QWORD *)(v71 + 44) = sub_100016940(v79, v80, &v124);
        swift_bridgeObjectRelease();
        sub_1000126B0(v120, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nis already known by %s.", (uint8_t *)v71, 0x34u);
        swift_arrayDestroy(v72, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1, -1);
        swift_slowDealloc(v71, -1, -1);

        sub_1000126B0(v122, type metadata accessor for MemberPeerTrust);
        v81 = *(_QWORD *)type;
      }
      else
      {
        v93 = *(_QWORD *)(v0 + 968);
        v94 = *(_QWORD *)(v0 + 904);
        v95 = *(_QWORD *)(v0 + 848);
        v96 = *(_QWORD *)(v0 + 840);
        v97 = *(_QWORD *)(v0 + 816);

        sub_1000126B0(v96, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        sub_1000126B0(v95, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        sub_1000126B0(v93, type metadata accessor for MemberSharingCircle);
        sub_1000126B0(v97, type metadata accessor for MemberPeerTrust);
        v81 = v94;
      }
LABEL_36:
      sub_1000126B0(v81, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v98 = *(_QWORD *)(v0 + 1208);
      v99 = *(_QWORD *)(v0 + 1200);
      v100 = *(_QWORD *)(v0 + 1192) + 1;
      if (v100 == *(_QWORD *)(v0 + 1176))
      {
LABEL_37:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 1288) = v98;
        *(_QWORD *)(v0 + 1280) = v99;
        v101 = (_QWORD *)swift_task_alloc(dword_1010FFD6C);
        *(_QWORD *)(v0 + 1296) = v101;
        *v101 = v0;
        v101[1] = sub_1005A71D8;
        return sub_1005A9B20(v99, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 1096));
      }
      while (1)
      {
        *(_QWORD *)(v0 + 1208) = v98;
        *(_QWORD *)(v0 + 1200) = v99;
        *(_QWORD *)(v0 + 1192) = v100;
        v102 = *(_QWORD *)(v0 + 904);
        v103 = *(_QWORD *)(v0 + 824);
        sub_10005972C(*(_QWORD *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1340) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1340))+ *(_QWORD *)(v0 + 1184) * v100, v102, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        if ((*(_BYTE *)(v102 + *(int *)(v103 + 20)) & 1) == 0)
        {
          v104 = *(_QWORD *)(v0 + 1040);
          v105 = *(_QWORD *)(v0 + 1024);
          v106 = *(_QWORD *)(v0 + 1016);
          v107 = *(_QWORD *)(v0 + 904);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v104, *(_QWORD *)(v0 + 720) + *(int *)(*(_QWORD *)(v0 + 912) + 32), v106);
          v108 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          LOBYTE(v107) = dispatch thunk of static Equatable.== infix(_:_:)(v107, v104, v106, v108);
          (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v104, v106);
          if ((v107 & 1) == 0)
            break;
        }
        sub_1000126B0(*(_QWORD *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        v100 = *(_QWORD *)(v0 + 1192) + 1;
        if (v100 == *(_QWORD *)(v0 + 1176))
          goto LABEL_37;
      }
      v109 = *(_QWORD *)(v0 + 1048);
      v110 = sub_1005A429C;
      return swift_task_switch(v110, v109, 0);
    }
  }
  else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, *v35, v35[1], 0) & 1) != 0 && v29 == 1)
  {
    v30 = *(_QWORD *)(v0 + 904);
    goto LABEL_20;
  }
  v85 = *(_QWORD **)(v0 + 680);
  v86 = v85[2];
  if (!v86)
    goto LABEL_44;
  v87 = v85[4];
  v88 = v85[5];
  v89 = v87 == v37 && v88 == v36;
  if (v89 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v88, v37, v36, 0), (result & 1) != 0))
  {
LABEL_32:
    v91 = 1;
LABEL_45:
    *(_BYTE *)(v0 + 1349) = v91;
    v109 = *(_QWORD *)(v0 + 1048);
    v110 = sub_1005A4F04;
    return swift_task_switch(v110, v109, 0);
  }
  if (v86 == 1)
  {
LABEL_44:
    v91 = 0;
    goto LABEL_45;
  }
  v111 = v85 + 7;
  v112 = 1;
  while (1)
  {
    v113 = v112 + 1;
    if (__OFADD__(v112, 1))
      break;
    v114 = *(v111 - 1);
    v115 = *v111;
    if (v114 == v37 && v115 == v36)
      goto LABEL_32;
    result = _stringCompareWithSmolCheck(_:_:expecting:)(v114, v115, v37, v36, 0);
    if ((result & 1) != 0)
      goto LABEL_32;
    v91 = 0;
    ++v112;
    v111 += 2;
    if (v113 == v86)
      goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t sub_1005A4F04()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
  v2 = *(unsigned __int8 *)(v0 + 1332);
  v3 = *(_QWORD *)(v0 + 1048);
  v4 = *(_QWORD *)(v0 + 1040);
  v5 = *(_QWORD *)(v0 + 1016);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 1032) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v4, *(_QWORD *)(v0 + 720) + *(int *)(v0 + 1328), v5);
  v9 = swift_allocObject(&unk_101080E20, v7, v8);
  *(_QWORD *)(v0 + 1232) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1240) = v11;
  *v11 = v0;
  v11[1] = sub_1005A4FFC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 776), sub_100142964, v9, *(_QWORD *)(v0 + 768));
}

uint64_t sub_1005A4FFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 728);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1240));
  swift_release();
  return swift_task_switch(sub_1005A5060, v1, 0);
}

void sub_1005A5060()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  NSString v12;
  void *v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  os_log_type_t v122[8];
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v1 = *(_QWORD *)(v0 + 776);
  v2 = type metadata accessor for SharedBeaconRecord(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  v4 = *(unsigned __int8 *)(v0 + 1349);
  v5 = *(unsigned __int8 *)(v0 + 1348);
  if (v3 == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
    if (((v4 | v5) & 1) == 0)
      goto LABEL_11;
LABEL_6:
    v7 = (uint64_t *)(*(_QWORD *)(v0 + 904) + *(int *)(v0 + 1344));
    v8 = *v7;
    v9 = v7[1];
    *(_QWORD *)(v0 + 1264) = v9;
    *(_QWORD *)(v0 + 416) = v8;
    *(_QWORD *)(v0 + 424) = v9;
    *(_QWORD *)(v0 + 400) = 64;
    *(_QWORD *)(v0 + 408) = 0xE100000000000000;
    v10 = sub_1000330C8();
    swift_bridgeObjectRetain(v9);
    v11 = StringProtocol.contains<A>(_:)(v0 + 400, &type metadata for String, &type metadata for String, v10, v10);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
    {
      v13 = (void *)IDSCopyIDForEmailAddress(v12);

      if (v13)
      {
        v14 = 0;
LABEL_15:
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        v35 = v34;

        v36 = sub_1008A4F38(v14, v33, v35);
        swift_bridgeObjectRelease();
        if ((v36 & 1) != 0)
        {
          v109 = dword_10110B66C;
          swift_bridgeObjectRetain(v9);
          v110 = (_QWORD *)swift_task_alloc(v109);
          *(_QWORD *)(v0 + 1272) = v110;
          *v110 = v0;
          v110[1] = sub_1005A66D4;
          sub_10089E158(v0 + 136, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 904), v8, v9);
          return;
        }
        v15 = 0;
        goto LABEL_17;
      }
      __break(1u);
    }
    else
    {
      v13 = (void *)IDSCopyIDForPhoneNumber(v12);

      if (v13)
      {
        v14 = 1;
        goto LABEL_15;
      }
    }
    __break(1u);
    return;
  }
  v6 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 64));
  sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  if (((v4 | v5) & 1) != 0)
  {
    if (v6 != 4)
      goto LABEL_6;
  }
  else if (v6 != 4)
  {
LABEL_11:
    v16 = *(_QWORD *)(v0 + 904);
    v17 = *(_QWORD *)(v0 + 896);
    v18 = *(_QWORD *)(v0 + 888);
    sub_10005972C(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 992), type metadata accessor for MemberSharingCircle);
    sub_10005972C(v16, v17, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    v19 = sub_10005972C(v16, v18, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = *(_QWORD *)(v0 + 1016);
      v23 = *(_QWORD *)(v0 + 992);
      v117 = *(_QWORD *)(v0 + 896);
      v123 = *(_QWORD *)(v0 + 888);
      *(_QWORD *)v122 = *(_QWORD *)(v0 + 824);
      v24 = swift_slowAlloc(52, -1);
      v127 = swift_slowAlloc(96, -1);
      v129 = v127;
      *(_DWORD *)v24 = 141559043;
      *(_QWORD *)(v0 + 552) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 552, v0 + 560, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      v25 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
      *(_QWORD *)(v0 + 560) = sub_100016940(v26, v27, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v23, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v24 + 22) = 2160;
      *(_QWORD *)(v0 + 568) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 568, v0 + 576, v24 + 24, v24 + 32);
      *(_WORD *)(v24 + 32) = 2081;
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v22, v25);
      *(_QWORD *)(v0 + 576) = sub_100016940(v28, v29, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 576, v0 + 584, v24 + 34, v24 + 42);
      swift_bridgeObjectRelease();
      sub_1000126B0(v117, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      *(_WORD *)(v24 + 42) = 2080;
      v30 = (uint64_t *)(v123 + *(int *)(*(_QWORD *)v122 + 24));
      v31 = *v30;
      v32 = v30[1];
      swift_bridgeObjectRetain(v32);
      *(_QWORD *)(v0 + 584) = sub_100016940(v31, v32, &v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v24 + 44, v24 + 52);
      swift_bridgeObjectRelease();
      sub_1000126B0(v123, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nis revealed: %s.", (uint8_t *)v24, 0x34u);
      swift_arrayDestroy(v127, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v127, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      v102 = *(_QWORD *)(v0 + 896);
      v103 = *(_QWORD *)(v0 + 888);
      sub_1000126B0(*(_QWORD *)(v0 + 992), type metadata accessor for MemberSharingCircle);
      sub_1000126B0(v102, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      sub_1000126B0(v103, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    }

    v104 = (uint64_t *)(*(_QWORD *)(v0 + 904) + *(int *)(v0 + 1344));
    v105 = *v104;
    v106 = v104[1];
    *(_QWORD *)(v0 + 1248) = v106;
    v107 = dword_10110B66C;
    swift_bridgeObjectRetain(v106);
    v108 = (_QWORD *)swift_task_alloc(v107);
    *(_QWORD *)(v0 + 1256) = v108;
    *v108 = v0;
    v108[1] = sub_1005A5F88;
    sub_10089E158(v0 + 256, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 904), v105, v106);
    return;
  }
  v15 = 1;
LABEL_17:
  v128 = *(_QWORD *)(v0 + 1208);
  v37 = *(_QWORD *)(v0 + 904);
  v38 = *(_QWORD *)(v0 + 880);
  v39 = *(_QWORD *)(v0 + 872);
  sub_10005972C(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 984), type metadata accessor for MemberSharingCircle);
  sub_10005972C(v37, v38, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v40 = sub_10005972C(v37, v39, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v124 = v15;
    v115 = *(_BYTE *)(v0 + 1349);
    v43 = *(_QWORD *)(v0 + 1016);
    v44 = *(_QWORD *)(v0 + 984);
    v111 = *(_QWORD *)(v0 + 880);
    v112 = *(_QWORD *)(v0 + 824);
    v113 = *(_QWORD *)(v0 + 872);
    v118 = *(unsigned __int8 *)(v0 + 1348);
    v45 = swift_slowAlloc(70, -1);
    v120 = swift_slowAlloc(96, -1);
    v129 = v120;
    *(_DWORD *)v45 = 141559811;
    *(_QWORD *)(v0 + 608) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v45 + 4, v45 + 12);
    *(_WORD *)(v45 + 12) = 2081;
    v46 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v43, v46);
    *(_QWORD *)(v0 + 616) = sub_100016940(v47, v48, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v45 + 14, v45 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v44, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v45 + 22) = 2160;
    *(_QWORD *)(v0 + 624) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v45 + 24, v45 + 32);
    *(_WORD *)(v45 + 32) = 2081;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v43, v46);
    *(_QWORD *)(v0 + 632) = sub_100016940(v49, v50, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v45 + 34, v45 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v111, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v45 + 42) = 2080;
    v51 = (uint64_t *)(v113 + *(int *)(v112 + 24));
    v52 = *v51;
    v53 = v51[1];
    swift_bridgeObjectRetain(v53);
    *(_QWORD *)(v0 + 640) = sub_100016940(v52, v53, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v45 + 44, v45 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v113, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v45 + 52) = 1024;
    *(_DWORD *)(v0 + 1320) = (v115 & 1) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1320, v0 + 1324, v45 + 54, v45 + 58);
    *(_WORD *)(v45 + 58) = 1024;
    *(_DWORD *)(v0 + 1316) = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1316, v0 + 1320, v45 + 60, v45 + 64);
    *(_WORD *)(v45 + 64) = 1024;
    *(_DWORD *)(v0 + 1312) = v124;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1312, v0 + 1316, v45 + 66, v45 + 70);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nis revealed silently: %s - isNewRevealedMember: %{BOOL}d,\n            isInitial: %{BOOL}d, isAutomaticShare: %{BOOL}d.", (uint8_t *)v45, 0x46u);
    swift_arrayDestroy(v120, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v120, -1, -1);
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    v54 = *(_QWORD *)(v0 + 880);
    v55 = *(_QWORD *)(v0 + 872);
    sub_1000126B0(*(_QWORD *)(v0 + 984), type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v54, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v55, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  }

  v56 = *(_QWORD *)(v0 + 1200);
  v57 = *(_QWORD *)(v0 + 760);
  v58 = (uint64_t *)(*(_QWORD *)(v0 + 904) + *(int *)(v0 + 1344));
  v60 = *v58;
  v59 = v58[1];
  v61 = (_QWORD *)(v57 + *(int *)(*(_QWORD *)(v0 + 744) + 48));
  sub_10005972C(*(_QWORD *)(v0 + 816), v57, type metadata accessor for MemberPeerTrust);
  *v61 = v60;
  v61[1] = v59;
  swift_bridgeObjectRetain(v59);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v56);
  v63 = *(_QWORD *)(v0 + 1200);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v63 = sub_1007C7D7C(0, *(_QWORD *)(v63 + 16) + 1, 1, *(_QWORD *)(v0 + 1200));
  v65 = *(_QWORD *)(v63 + 16);
  v64 = *(_QWORD *)(v63 + 24);
  if (v65 >= v64 >> 1)
    v63 = sub_1007C7D7C(v64 > 1, v65 + 1, 1, v63);
  v66 = *(_QWORD *)(v0 + 976);
  v67 = *(_QWORD *)(v0 + 904);
  v68 = *(_QWORD *)(v0 + 864);
  v69 = *(_QWORD *)(v0 + 856);
  v70 = *(_QWORD *)(v0 + 760);
  v71 = *(_QWORD *)(v0 + 752);
  v72 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v63 + 16) = v65 + 1;
  sub_100005CF0(v70, v63+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v65, &qword_1011093D0);
  sub_10005972C(v72, v66, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v67, v68, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v73 = sub_10005972C(v67, v69, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter(v74);
  if (os_log_type_enabled(v74, v75))
  {
    v76 = *(_QWORD *)(v0 + 1016);
    v77 = *(_QWORD *)(v0 + 976);
    v126 = *(_QWORD *)(v0 + 904);
    v116 = *(_QWORD *)(v0 + 824);
    v119 = *(_QWORD *)(v0 + 856);
    v114 = *(_QWORD *)(v0 + 864);
    v125 = *(_QWORD *)(v0 + 816);
    v78 = swift_slowAlloc(52, -1);
    v121 = swift_slowAlloc(96, -1);
    v129 = v121;
    *(_DWORD *)v78 = 141559043;
    *(_QWORD *)(v0 + 512) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v78 + 4, v78 + 12);
    *(_WORD *)(v78 + 12) = 2081;
    v79 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v80 = dispatch thunk of CustomStringConvertible.description.getter(v76, v79);
    *(_QWORD *)(v0 + 520) = sub_100016940(v80, v81, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v78 + 14, v78 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v77, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v78 + 22) = 2160;
    *(_QWORD *)(v0 + 528) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v78 + 24, v78 + 32);
    *(_WORD *)(v78 + 32) = 2081;
    v82 = dispatch thunk of CustomStringConvertible.description.getter(v76, v79);
    *(_QWORD *)(v0 + 432) = sub_100016940(v82, v83, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v78 + 34, v78 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v114, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v78 + 42) = 2080;
    v84 = (uint64_t *)(v119 + *(int *)(v116 + 24));
    v85 = *v84;
    v86 = v84[1];
    swift_bridgeObjectRetain(v86);
    *(_QWORD *)(v0 + 544) = sub_100016940(v85, v86, &v129);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v0 + 552, v78 + 44, v78 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v119, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nneeds to update displayIdentifier: %s.", (uint8_t *)v78, 0x34u);
    swift_arrayDestroy(v121, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v121, -1, -1);
    swift_slowDealloc(v78, -1, -1);

    sub_1000126B0(v125, type metadata accessor for MemberPeerTrust);
    v87 = v126;
  }
  else
  {
    v88 = *(_QWORD *)(v0 + 976);
    v89 = *(_QWORD *)(v0 + 904);
    v90 = *(_QWORD *)(v0 + 864);
    v91 = *(_QWORD *)(v0 + 856);
    v92 = *(_QWORD *)(v0 + 816);

    sub_1000126B0(v91, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v90, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v88, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v92, type metadata accessor for MemberPeerTrust);
    v87 = v89;
  }
  sub_1000126B0(v87, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v93 = *(_QWORD *)(v0 + 1192) + 1;
  if (v93 == *(_QWORD *)(v0 + 1176))
  {
LABEL_28:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1288) = v128;
    *(_QWORD *)(v0 + 1280) = v63;
    v94 = (_QWORD *)swift_task_alloc(dword_1010FFD6C);
    *(_QWORD *)(v0 + 1296) = v94;
    *v94 = v0;
    v94[1] = sub_1005A71D8;
    sub_1005A9B20(v63, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 1096));
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 1208) = v128;
      *(_QWORD *)(v0 + 1200) = v63;
      *(_QWORD *)(v0 + 1192) = v93;
      v95 = *(_QWORD *)(v0 + 904);
      v96 = *(_QWORD *)(v0 + 824);
      sub_10005972C(*(_QWORD *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1340) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1340))+ *(_QWORD *)(v0 + 1184) * v93, v95, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      if ((*(_BYTE *)(v95 + *(int *)(v96 + 20)) & 1) == 0)
      {
        v97 = *(_QWORD *)(v0 + 1040);
        v98 = *(_QWORD *)(v0 + 1024);
        v99 = *(_QWORD *)(v0 + 1016);
        v100 = *(_QWORD *)(v0 + 904);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v97, *(_QWORD *)(v0 + 720) + *(int *)(*(_QWORD *)(v0 + 912) + 32), v99);
        v101 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LOBYTE(v100) = dispatch thunk of static Equatable.== infix(_:_:)(v100, v97, v99, v101);
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
        if ((v100 & 1) == 0)
          break;
      }
      sub_1000126B0(*(_QWORD *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v93 = *(_QWORD *)(v0 + 1192) + 1;
      if (v93 == *(_QWORD *)(v0 + 1176))
        goto LABEL_28;
    }
    swift_task_switch(sub_1005A429C, *(_QWORD *)(v0 + 1048), 0);
  }
}

uint64_t sub_1005A5F88()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 1256));
  v3 = *(_QWORD *)(v2 + 728);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_bridgeObjectRelease();
    v4 = sub_1005A747C;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = sub_1005A6010;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005A6010()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 1208);
  sub_10000F9B8(v0 + 256, v0 + 216, (uint64_t *)&unk_1011093E0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 1208);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C7F9C(0, v3[2] + 1, 1, *(_QWORD **)(v0 + 1208));
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C7F9C((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  sub_100005CF0(v0 + 216, (uint64_t)&v3[5 * v5 + 4], (uint64_t *)&unk_1011093E0);
  sub_100004048(v0 + 256, (uint64_t *)&unk_1011093E0);
  v6 = *(_QWORD *)(v0 + 1200);
  v7 = *(_QWORD *)(v0 + 760);
  v8 = (uint64_t *)(*(_QWORD *)(v0 + 904) + *(int *)(v0 + 1344));
  v9 = *v8;
  v10 = v8[1];
  v11 = (_QWORD *)(v7 + *(int *)(*(_QWORD *)(v0 + 744) + 48));
  sub_10005972C(*(_QWORD *)(v0 + 816), v7, type metadata accessor for MemberPeerTrust);
  *v11 = v9;
  v11[1] = v10;
  swift_bridgeObjectRetain(v10);
  v12 = swift_isUniquelyReferenced_nonNull_native(v6);
  v13 = *(_QWORD *)(v0 + 1200);
  if ((v12 & 1) == 0)
    v13 = sub_1007C7D7C(0, *(_QWORD *)(v13 + 16) + 1, 1, *(_QWORD *)(v0 + 1200));
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  v61 = v3;
  if (v15 >= v14 >> 1)
    v13 = sub_1007C7D7C(v14 > 1, v15 + 1, 1, v13);
  v16 = *(_QWORD *)(v0 + 976);
  v17 = *(_QWORD *)(v0 + 904);
  v18 = *(_QWORD *)(v0 + 864);
  v19 = *(_QWORD *)(v0 + 856);
  v20 = *(_QWORD *)(v0 + 760);
  v21 = *(_QWORD *)(v0 + 752);
  v22 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v13 + 16) = v15 + 1;
  sub_100005CF0(v20, v13+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v15, &qword_1011093D0);
  sub_10005972C(v22, v16, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v17, v18, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v23 = sub_10005972C(v17, v19, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = *(_QWORD *)(v0 + 1016);
    v27 = *(_QWORD *)(v0 + 976);
    v60 = *(_QWORD *)(v0 + 904);
    v56 = *(_QWORD *)(v0 + 824);
    v57 = *(_QWORD *)(v0 + 856);
    v55 = *(_QWORD *)(v0 + 864);
    v59 = *(_QWORD *)(v0 + 816);
    v28 = swift_slowAlloc(52, -1);
    v58 = swift_slowAlloc(96, -1);
    v62 = v58;
    *(_DWORD *)v28 = 141559043;
    *(_QWORD *)(v0 + 512) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2081;
    v29 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
    *(_QWORD *)(v0 + 520) = sub_100016940(v30, v31, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v27, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v28 + 22) = 2160;
    *(_QWORD *)(v0 + 528) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v28 + 24, v28 + 32);
    *(_WORD *)(v28 + 32) = 2081;
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
    *(_QWORD *)(v0 + 432) = sub_100016940(v32, v33, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v28 + 34, v28 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v55, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v28 + 42) = 2080;
    v34 = (uint64_t *)(v57 + *(int *)(v56 + 24));
    v35 = *v34;
    v36 = v34[1];
    swift_bridgeObjectRetain(v36);
    *(_QWORD *)(v0 + 544) = sub_100016940(v35, v36, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v0 + 552, v28 + 44, v28 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v57, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nneeds to update displayIdentifier: %s.", (uint8_t *)v28, 0x34u);
    swift_arrayDestroy(v58, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    sub_1000126B0(v59, type metadata accessor for MemberPeerTrust);
    v37 = v60;
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 976);
    v39 = *(_QWORD *)(v0 + 904);
    v40 = *(_QWORD *)(v0 + 864);
    v41 = *(_QWORD *)(v0 + 856);
    v42 = *(_QWORD *)(v0 + 816);

    sub_1000126B0(v41, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v40, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v38, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v42, type metadata accessor for MemberPeerTrust);
    v37 = v39;
  }
  sub_1000126B0(v37, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v43 = *(_QWORD *)(v0 + 1192) + 1;
  v44 = v61;
  if (v43 == *(_QWORD *)(v0 + 1176))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1288) = v44;
    *(_QWORD *)(v0 + 1280) = v13;
    v45 = (_QWORD *)swift_task_alloc(dword_1010FFD6C);
    *(_QWORD *)(v0 + 1296) = v45;
    *v45 = v0;
    v45[1] = sub_1005A71D8;
    return sub_1005A9B20(v13, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 1096));
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 1208) = v44;
      *(_QWORD *)(v0 + 1200) = v13;
      *(_QWORD *)(v0 + 1192) = v43;
      v47 = *(_QWORD *)(v0 + 904);
      v48 = *(_QWORD *)(v0 + 824);
      sub_10005972C(*(_QWORD *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1340) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1340))+ *(_QWORD *)(v0 + 1184) * v43, v47, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      if ((*(_BYTE *)(v47 + *(int *)(v48 + 20)) & 1) == 0)
      {
        v49 = *(_QWORD *)(v0 + 1040);
        v50 = *(_QWORD *)(v0 + 1024);
        v51 = *(_QWORD *)(v0 + 1016);
        v52 = *(_QWORD *)(v0 + 904);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v49, *(_QWORD *)(v0 + 720) + *(int *)(*(_QWORD *)(v0 + 912) + 32), v51);
        v53 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LOBYTE(v52) = dispatch thunk of static Equatable.== infix(_:_:)(v52, v49, v51, v53);
        v54 = v49;
        v44 = v61;
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v51);
        if ((v52 & 1) == 0)
          return swift_task_switch(sub_1005A429C, *(_QWORD *)(v0 + 1048), 0);
      }
      sub_1000126B0(*(_QWORD *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v43 = *(_QWORD *)(v0 + 1192) + 1;
      if (v43 == *(_QWORD *)(v0 + 1176))
        goto LABEL_13;
    }
  }
}

uint64_t sub_1005A66D4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 1272));
  v3 = *(_QWORD *)(v2 + 728);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_bridgeObjectRelease();
    v4 = sub_1005A7B4C;
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = sub_1005A675C;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005A675C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;

  v1 = *(_QWORD *)(v0 + 1208);
  sub_10000F9B8(v0 + 136, v0 + 56, (uint64_t *)&unk_1011093E0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 1208);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C7F9C(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C7F9C((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v86 = v3;
  v3[2] = v5 + 1;
  sub_100005CF0(v0 + 56, (uint64_t)&v3[5 * v5 + 4], (uint64_t *)&unk_1011093E0);
  sub_100004048(v0 + 136, (uint64_t *)&unk_1011093E0);
  v6 = *(_QWORD *)(v0 + 904);
  v7 = *(_QWORD *)(v0 + 880);
  v8 = *(_QWORD *)(v0 + 872);
  sub_10005972C(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 984), type metadata accessor for MemberSharingCircle);
  sub_10005972C(v6, v7, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v9 = sub_10005972C(v6, v8, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v78 = *(_BYTE *)(v0 + 1349);
    v12 = *(_QWORD *)(v0 + 1016);
    v13 = *(_QWORD *)(v0 + 984);
    v74 = *(_QWORD *)(v0 + 880);
    v77 = *(os_log_t *)(v0 + 872);
    v75 = *(_QWORD *)(v0 + 824);
    v81 = *(unsigned __int8 *)(v0 + 1348);
    v14 = swift_slowAlloc(70, -1);
    v82 = swift_slowAlloc(96, -1);
    v87 = v82;
    *(_DWORD *)v14 = 141559811;
    *(_QWORD *)(v0 + 608) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 616) = sub_100016940(v16, v17, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v13, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v14 + 22) = 2160;
    *(_QWORD *)(v0 + 624) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v14 + 24, v14 + 32);
    *(_WORD *)(v14 + 32) = 2081;
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 632) = sub_100016940(v18, v19, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v14 + 34, v14 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v74, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v14 + 42) = 2080;
    v20 = (uint64_t *)((char *)v77 + *(int *)(v75 + 24));
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(v0 + 640) = sub_100016940(v21, v22, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v14 + 44, v14 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v77, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v14 + 52) = 1024;
    *(_DWORD *)(v0 + 1320) = (v78 & 1) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1320, v0 + 1324, v14 + 54, v14 + 58);
    *(_WORD *)(v14 + 58) = 1024;
    *(_DWORD *)(v0 + 1316) = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1316, v0 + 1320, v14 + 60, v14 + 64);
    *(_WORD *)(v14 + 64) = 1024;
    *(_DWORD *)(v0 + 1312) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1312, v0 + 1316, v14 + 66, v14 + 70);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nis revealed silently: %s - isNewRevealedMember: %{BOOL}d,\n            isInitial: %{BOOL}d, isAutomaticShare: %{BOOL}d.", (uint8_t *)v14, 0x46u);
    swift_arrayDestroy(v82, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    v23 = *(_QWORD *)(v0 + 880);
    v24 = *(_QWORD *)(v0 + 872);
    sub_1000126B0(*(_QWORD *)(v0 + 984), type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v23, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v24, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);

  }
  v25 = *(_QWORD *)(v0 + 1200);
  v26 = *(_QWORD *)(v0 + 760);
  v27 = (uint64_t *)(*(_QWORD *)(v0 + 904) + *(int *)(v0 + 1344));
  v28 = *v27;
  v29 = v27[1];
  v30 = (_QWORD *)(v26 + *(int *)(*(_QWORD *)(v0 + 744) + 48));
  sub_10005972C(*(_QWORD *)(v0 + 816), v26, type metadata accessor for MemberPeerTrust);
  *v30 = v28;
  v30[1] = v29;
  swift_bridgeObjectRetain(v29);
  v31 = swift_isUniquelyReferenced_nonNull_native(v25);
  v32 = *(_QWORD *)(v0 + 1200);
  if ((v31 & 1) == 0)
    v32 = sub_1007C7D7C(0, *(_QWORD *)(v32 + 16) + 1, 1, *(_QWORD *)(v0 + 1200));
  v34 = *(_QWORD *)(v32 + 16);
  v33 = *(_QWORD *)(v32 + 24);
  if (v34 >= v33 >> 1)
    v32 = sub_1007C7D7C(v33 > 1, v34 + 1, 1, v32);
  v35 = *(_QWORD *)(v0 + 976);
  v36 = *(_QWORD *)(v0 + 904);
  v37 = *(_QWORD *)(v0 + 864);
  v38 = *(_QWORD *)(v0 + 856);
  v39 = *(_QWORD *)(v0 + 760);
  v40 = *(_QWORD *)(v0 + 752);
  v41 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v32 + 16) = v34 + 1;
  sub_100005CF0(v39, v32+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v34, &qword_1011093D0);
  sub_10005972C(v41, v35, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v36, v37, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v42 = sub_10005972C(v36, v38, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = *(_QWORD *)(v0 + 1016);
    v46 = *(_QWORD *)(v0 + 976);
    v85 = *(_QWORD *)(v0 + 904);
    v79 = *(_QWORD *)(v0 + 824);
    v80 = *(_QWORD *)(v0 + 856);
    v76 = *(_QWORD *)(v0 + 864);
    v84 = *(_QWORD *)(v0 + 816);
    v47 = swift_slowAlloc(52, -1);
    v83 = swift_slowAlloc(96, -1);
    v87 = v83;
    *(_DWORD *)v47 = 141559043;
    *(_QWORD *)(v0 + 512) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2081;
    v48 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v45, v48);
    *(_QWORD *)(v0 + 520) = sub_100016940(v49, v50, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v46, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v47 + 22) = 2160;
    *(_QWORD *)(v0 + 528) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v47 + 24, v47 + 32);
    *(_WORD *)(v47 + 32) = 2081;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v45, v48);
    *(_QWORD *)(v0 + 432) = sub_100016940(v51, v52, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v47 + 34, v47 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v76, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v47 + 42) = 2080;
    v53 = (uint64_t *)(v80 + *(int *)(v79 + 24));
    v54 = *v53;
    v55 = v53[1];
    swift_bridgeObjectRetain(v55);
    *(_QWORD *)(v0 + 544) = sub_100016940(v54, v55, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v0 + 552, v47 + 44, v47 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v80, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nneeds to update displayIdentifier: %s.", (uint8_t *)v47, 0x34u);
    swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    sub_1000126B0(v84, type metadata accessor for MemberPeerTrust);
    v56 = v85;
  }
  else
  {
    v57 = *(_QWORD *)(v0 + 976);
    v58 = *(_QWORD *)(v0 + 904);
    v59 = *(_QWORD *)(v0 + 864);
    v60 = *(_QWORD *)(v0 + 856);
    v61 = *(_QWORD *)(v0 + 816);

    sub_1000126B0(v60, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v59, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v57, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v61, type metadata accessor for MemberPeerTrust);
    v56 = v58;
  }
  sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v62 = *(_QWORD *)(v0 + 1192) + 1;
  v63 = v86;
  if (v62 == *(_QWORD *)(v0 + 1176))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1288) = v63;
    *(_QWORD *)(v0 + 1280) = v32;
    v64 = (_QWORD *)swift_task_alloc(dword_1010FFD6C);
    *(_QWORD *)(v0 + 1296) = v64;
    *v64 = v0;
    v64[1] = sub_1005A71D8;
    return sub_1005A9B20(v32, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 1096));
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 1208) = v63;
      *(_QWORD *)(v0 + 1200) = v32;
      *(_QWORD *)(v0 + 1192) = v62;
      v66 = *(_QWORD *)(v0 + 904);
      v67 = *(_QWORD *)(v0 + 824);
      sub_10005972C(*(_QWORD *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1340) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1340))+ *(_QWORD *)(v0 + 1184) * v62, v66, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      if ((*(_BYTE *)(v66 + *(int *)(v67 + 20)) & 1) == 0)
      {
        v68 = *(_QWORD *)(v0 + 1040);
        v69 = *(_QWORD *)(v0 + 1024);
        v70 = *(_QWORD *)(v0 + 1016);
        v71 = *(_QWORD *)(v0 + 904);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v68, *(_QWORD *)(v0 + 720) + *(int *)(*(_QWORD *)(v0 + 912) + 32), v70);
        v72 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LOBYTE(v71) = dispatch thunk of static Equatable.== infix(_:_:)(v71, v68, v70, v72);
        v73 = v68;
        v63 = v86;
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v73, v70);
        if ((v71 & 1) == 0)
          return swift_task_switch(sub_1005A429C, *(_QWORD *)(v0 + 1048), 0);
      }
      sub_1000126B0(*(_QWORD *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v62 = *(_QWORD *)(v0 + 1192) + 1;
      if (v62 == *(_QWORD *)(v0 + 1176))
        goto LABEL_16;
    }
  }
}

uint64_t sub_1005A71D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1296);
  *(_QWORD *)(*v1 + 1304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 728);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_1005A85E4;
    v6 = v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = *(_QWORD *)(v2 + 1168);
    v5 = sub_1005A7280;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1005A7280()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 728);
  sub_10089EE5C(*(_QWORD *)(v0 + 1288));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1005A72D8, v1, 0);
}

uint64_t sub_1005A72D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release(*(_QWORD *)(v0 + 1168));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 680));
  v1 = *(_QWORD *)(v0 + 1008);
  v2 = *(_QWORD *)(v0 + 1000);
  v3 = *(_QWORD *)(v0 + 992);
  v4 = *(_QWORD *)(v0 + 984);
  v5 = *(_QWORD *)(v0 + 976);
  v6 = *(_QWORD *)(v0 + 968);
  v7 = *(_QWORD *)(v0 + 960);
  v8 = *(_QWORD *)(v0 + 952);
  v9 = *(_QWORD *)(v0 + 944);
  v11 = *(_QWORD *)(v0 + 936);
  v12 = *(_QWORD *)(v0 + 904);
  v13 = *(_QWORD *)(v0 + 896);
  v14 = *(_QWORD *)(v0 + 888);
  v15 = *(_QWORD *)(v0 + 880);
  v16 = *(_QWORD *)(v0 + 872);
  v17 = *(_QWORD *)(v0 + 864);
  v18 = *(_QWORD *)(v0 + 856);
  v19 = *(_QWORD *)(v0 + 848);
  v20 = *(_QWORD *)(v0 + 840);
  v21 = *(_QWORD *)(v0 + 816);
  v22 = *(_QWORD *)(v0 + 792);
  v23 = *(_QWORD *)(v0 + 776);
  v24 = *(_QWORD *)(v0 + 760);
  v25 = *(_QWORD *)(v0 + 736);
  swift_task_dealloc(*(_QWORD *)(v0 + 1040));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A747C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;

  *(_QWORD *)(v0 + 288) = 0;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_OWORD *)(v0 + 272) = 0u;
  v1 = *(_QWORD *)(v0 + 1208);
  sub_10000F9B8(v0 + 256, v0 + 216, (uint64_t *)&unk_1011093E0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 1208);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C7F9C(0, v3[2] + 1, 1, *(_QWORD **)(v0 + 1208));
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C7F9C((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v3[2] = v5 + 1;
  sub_100005CF0(v0 + 216, (uint64_t)&v3[5 * v5 + 4], (uint64_t *)&unk_1011093E0);
  sub_100004048(v0 + 256, (uint64_t *)&unk_1011093E0);
  v6 = *(_QWORD *)(v0 + 1200);
  v7 = *(_QWORD *)(v0 + 760);
  v8 = (uint64_t *)(*(_QWORD *)(v0 + 904) + *(int *)(v0 + 1344));
  v9 = *v8;
  v10 = v8[1];
  v11 = (_QWORD *)(v7 + *(int *)(*(_QWORD *)(v0 + 744) + 48));
  sub_10005972C(*(_QWORD *)(v0 + 816), v7, type metadata accessor for MemberPeerTrust);
  *v11 = v9;
  v11[1] = v10;
  swift_bridgeObjectRetain(v10);
  v12 = swift_isUniquelyReferenced_nonNull_native(v6);
  v13 = *(_QWORD *)(v0 + 1200);
  if ((v12 & 1) == 0)
    v13 = sub_1007C7D7C(0, *(_QWORD *)(v13 + 16) + 1, 1, *(_QWORD *)(v0 + 1200));
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  v61 = v3;
  if (v15 >= v14 >> 1)
    v13 = sub_1007C7D7C(v14 > 1, v15 + 1, 1, v13);
  v16 = *(_QWORD *)(v0 + 976);
  v17 = *(_QWORD *)(v0 + 904);
  v18 = *(_QWORD *)(v0 + 864);
  v19 = *(_QWORD *)(v0 + 856);
  v20 = *(_QWORD *)(v0 + 760);
  v21 = *(_QWORD *)(v0 + 752);
  v22 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v13 + 16) = v15 + 1;
  sub_100005CF0(v20, v13+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(_QWORD *)(v21 + 72) * v15, &qword_1011093D0);
  sub_10005972C(v22, v16, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v17, v18, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v23 = sub_10005972C(v17, v19, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = *(_QWORD *)(v0 + 1016);
    v27 = *(_QWORD *)(v0 + 976);
    v60 = *(_QWORD *)(v0 + 904);
    v56 = *(_QWORD *)(v0 + 824);
    v57 = *(_QWORD *)(v0 + 856);
    v55 = *(_QWORD *)(v0 + 864);
    v59 = *(_QWORD *)(v0 + 816);
    v28 = swift_slowAlloc(52, -1);
    v58 = swift_slowAlloc(96, -1);
    v62 = v58;
    *(_DWORD *)v28 = 141559043;
    *(_QWORD *)(v0 + 512) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2081;
    v29 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
    *(_QWORD *)(v0 + 520) = sub_100016940(v30, v31, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v27, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v28 + 22) = 2160;
    *(_QWORD *)(v0 + 528) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v28 + 24, v28 + 32);
    *(_WORD *)(v28 + 32) = 2081;
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v26, v29);
    *(_QWORD *)(v0 + 432) = sub_100016940(v32, v33, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v28 + 34, v28 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v55, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v28 + 42) = 2080;
    v34 = (uint64_t *)(v57 + *(int *)(v56 + 24));
    v35 = *v34;
    v36 = v34[1];
    swift_bridgeObjectRetain(v36);
    *(_QWORD *)(v0 + 544) = sub_100016940(v35, v36, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v0 + 552, v28 + 44, v28 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v57, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nneeds to update displayIdentifier: %s.", (uint8_t *)v28, 0x34u);
    swift_arrayDestroy(v58, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    sub_1000126B0(v59, type metadata accessor for MemberPeerTrust);
    v37 = v60;
  }
  else
  {
    v38 = *(_QWORD *)(v0 + 976);
    v39 = *(_QWORD *)(v0 + 904);
    v40 = *(_QWORD *)(v0 + 864);
    v41 = *(_QWORD *)(v0 + 856);
    v42 = *(_QWORD *)(v0 + 816);

    sub_1000126B0(v41, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v40, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v38, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v42, type metadata accessor for MemberPeerTrust);
    v37 = v39;
  }
  sub_1000126B0(v37, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v43 = *(_QWORD *)(v0 + 1192) + 1;
  v44 = v61;
  if (v43 == *(_QWORD *)(v0 + 1176))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1288) = v44;
    *(_QWORD *)(v0 + 1280) = v13;
    v45 = (_QWORD *)swift_task_alloc(dword_1010FFD6C);
    *(_QWORD *)(v0 + 1296) = v45;
    *v45 = v0;
    v45[1] = sub_1005A71D8;
    return sub_1005A9B20(v13, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 1096));
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 1208) = v44;
      *(_QWORD *)(v0 + 1200) = v13;
      *(_QWORD *)(v0 + 1192) = v43;
      v47 = *(_QWORD *)(v0 + 904);
      v48 = *(_QWORD *)(v0 + 824);
      sub_10005972C(*(_QWORD *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1340) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1340))+ *(_QWORD *)(v0 + 1184) * v43, v47, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      if ((*(_BYTE *)(v47 + *(int *)(v48 + 20)) & 1) == 0)
      {
        v49 = *(_QWORD *)(v0 + 1040);
        v50 = *(_QWORD *)(v0 + 1024);
        v51 = *(_QWORD *)(v0 + 1016);
        v52 = *(_QWORD *)(v0 + 904);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v49, *(_QWORD *)(v0 + 720) + *(int *)(*(_QWORD *)(v0 + 912) + 32), v51);
        v53 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LOBYTE(v52) = dispatch thunk of static Equatable.== infix(_:_:)(v52, v49, v51, v53);
        v54 = v49;
        v44 = v61;
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v51);
        if ((v52 & 1) == 0)
          return swift_task_switch(sub_1005A429C, *(_QWORD *)(v0 + 1048), 0);
      }
      sub_1000126B0(*(_QWORD *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v43 = *(_QWORD *)(v0 + 1192) + 1;
      if (v43 == *(_QWORD *)(v0 + 1176))
        goto LABEL_13;
    }
  }
}

uint64_t sub_1005A7B4C()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  NSObject *log;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;

  *(_OWORD *)(v0 + 136) = 0u;
  *(_QWORD *)(v0 + 168) = 0;
  *(_OWORD *)(v0 + 152) = 0u;
  v1 = *(_QWORD *)(v0 + 1208);
  sub_10000F9B8(v0 + 136, v0 + 56, (uint64_t *)&unk_1011093E0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD **)(v0 + 1208);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C7F9C(0, v3[2] + 1, 1, v3);
  v5 = v3[2];
  v4 = v3[3];
  if (v5 >= v4 >> 1)
    v3 = sub_1007C7F9C((_QWORD *)(v4 > 1), v5 + 1, 1, v3);
  v87 = v3;
  v3[2] = v5 + 1;
  sub_100005CF0(v0 + 56, (uint64_t)&v3[5 * v5 + 4], (uint64_t *)&unk_1011093E0);
  sub_100004048(v0 + 136, (uint64_t *)&unk_1011093E0);
  v6 = *(_QWORD *)(v0 + 904);
  v7 = *(_QWORD *)(v0 + 880);
  v8 = *(_QWORD *)(v0 + 872);
  sub_10005972C(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 984), type metadata accessor for MemberSharingCircle);
  sub_10005972C(v6, v7, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v9 = sub_10005972C(v6, v8, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v78 = *(_BYTE *)(v0 + 1349);
    v12 = *(_QWORD *)(v0 + 1016);
    v13 = *(_QWORD *)(v0 + 984);
    v74 = *(_QWORD *)(v0 + 880);
    v76 = *(_QWORD *)(v0 + 872);
    v75 = *(_QWORD *)(v0 + 824);
    v80 = *(unsigned __int8 *)(v0 + 1348);
    log = v10;
    v14 = swift_slowAlloc(70, -1);
    v83 = swift_slowAlloc(96, -1);
    v88 = v83;
    *(_DWORD *)v14 = 141559811;
    *(_QWORD *)(v0 + 608) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 608, v0 + 616, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 616) = sub_100016940(v16, v17, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 616, v0 + 624, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v13, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v14 + 22) = 2160;
    *(_QWORD *)(v0 + 624) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v14 + 24, v14 + 32);
    *(_WORD *)(v14 + 32) = 2081;
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 632) = sub_100016940(v18, v19, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 640, v14 + 34, v14 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v74, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v14 + 42) = 2080;
    v20 = (uint64_t *)(v76 + *(int *)(v75 + 24));
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(v0 + 640) = sub_100016940(v21, v22, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 648, v14 + 44, v14 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v76, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v14 + 52) = 1024;
    *(_DWORD *)(v0 + 1320) = (v78 & 1) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1320, v0 + 1324, v14 + 54, v14 + 58);
    *(_WORD *)(v14 + 58) = 1024;
    *(_DWORD *)(v0 + 1316) = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1316, v0 + 1320, v14 + 60, v14 + 64);
    *(_WORD *)(v14 + 64) = 1024;
    *(_DWORD *)(v0 + 1312) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1312, v0 + 1316, v14 + 66, v14 + 70);
    _os_log_impl((void *)&_mh_execute_header, log, v11, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nis revealed silently: %s - isNewRevealedMember: %{BOOL}d,\n            isInitial: %{BOOL}d, isAutomaticShare: %{BOOL}d.", (uint8_t *)v14, 0x46u);
    swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    v23 = *(_QWORD *)(v0 + 880);
    v24 = *(_QWORD *)(v0 + 872);
    sub_1000126B0(*(_QWORD *)(v0 + 984), type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v23, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v24, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);

  }
  v25 = *(_QWORD *)(v0 + 1200);
  v26 = *(_QWORD *)(v0 + 760);
  v27 = (uint64_t *)(*(_QWORD *)(v0 + 904) + *(int *)(v0 + 1344));
  v28 = *v27;
  v29 = v27[1];
  v30 = (_QWORD *)(v26 + *(int *)(*(_QWORD *)(v0 + 744) + 48));
  sub_10005972C(*(_QWORD *)(v0 + 816), v26, type metadata accessor for MemberPeerTrust);
  *v30 = v28;
  v30[1] = v29;
  swift_bridgeObjectRetain(v29);
  v31 = swift_isUniquelyReferenced_nonNull_native(v25);
  v32 = *(_QWORD *)(v0 + 1200);
  if ((v31 & 1) == 0)
    v32 = sub_1007C7D7C(0, *(_QWORD *)(v32 + 16) + 1, 1, *(_QWORD *)(v0 + 1200));
  v34 = *(_QWORD *)(v32 + 16);
  v33 = *(_QWORD *)(v32 + 24);
  if (v34 >= v33 >> 1)
    v32 = sub_1007C7D7C(v33 > 1, v34 + 1, 1, v32);
  v35 = *(_QWORD *)(v0 + 976);
  v36 = *(_QWORD *)(v0 + 904);
  v37 = *(_QWORD *)(v0 + 864);
  v38 = *(_QWORD *)(v0 + 856);
  v39 = *(_QWORD *)(v0 + 760);
  v40 = *(_QWORD *)(v0 + 752);
  v41 = *(_QWORD *)(v0 + 720);
  *(_QWORD *)(v32 + 16) = v34 + 1;
  sub_100005CF0(v39, v32+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v34, &qword_1011093D0);
  sub_10005972C(v41, v35, type metadata accessor for MemberSharingCircle);
  sub_10005972C(v36, v37, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v42 = sub_10005972C(v36, v38, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  if (os_log_type_enabled(v43, v44))
  {
    v45 = *(_QWORD *)(v0 + 1016);
    v46 = *(_QWORD *)(v0 + 976);
    v86 = *(_QWORD *)(v0 + 904);
    v79 = *(_QWORD *)(v0 + 824);
    v81 = *(_QWORD *)(v0 + 856);
    v77 = *(_QWORD *)(v0 + 864);
    v85 = *(_QWORD *)(v0 + 816);
    v47 = swift_slowAlloc(52, -1);
    v84 = swift_slowAlloc(96, -1);
    v88 = v84;
    *(_DWORD *)v47 = 141559043;
    *(_QWORD *)(v0 + 512) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2081;
    v48 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v45, v48);
    *(_QWORD *)(v0 + 520) = sub_100016940(v49, v50, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v46, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v47 + 22) = 2160;
    *(_QWORD *)(v0 + 528) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v47 + 24, v47 + 32);
    *(_WORD *)(v47 + 32) = 2081;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v45, v48);
    *(_QWORD *)(v0 + 432) = sub_100016940(v51, v52, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v47 + 34, v47 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v77, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    *(_WORD *)(v47 + 42) = 2080;
    v53 = (uint64_t *)(v81 + *(int *)(v79 + 24));
    v54 = *v53;
    v55 = v53[1];
    swift_bridgeObjectRetain(v55);
    *(_QWORD *)(v0 + 544) = sub_100016940(v54, v55, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 544, v0 + 552, v47 + 44, v47 + 52);
    swift_bridgeObjectRelease();
    sub_1000126B0(v81, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s\nneeds to update displayIdentifier: %s.", (uint8_t *)v47, 0x34u);
    swift_arrayDestroy(v84, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    sub_1000126B0(v85, type metadata accessor for MemberPeerTrust);
    v56 = v86;
  }
  else
  {
    v57 = *(_QWORD *)(v0 + 976);
    v58 = *(_QWORD *)(v0 + 904);
    v59 = *(_QWORD *)(v0 + 864);
    v60 = *(_QWORD *)(v0 + 856);
    v61 = *(_QWORD *)(v0 + 816);

    sub_1000126B0(v60, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v59, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
    sub_1000126B0(v57, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v61, type metadata accessor for MemberPeerTrust);
    v56 = v58;
  }
  sub_1000126B0(v56, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
  v62 = v87;
  v63 = *(_QWORD *)(v0 + 1192) + 1;
  if (v63 == *(_QWORD *)(v0 + 1176))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1288) = v62;
    *(_QWORD *)(v0 + 1280) = v32;
    v64 = (_QWORD *)swift_task_alloc(dword_1010FFD6C);
    *(_QWORD *)(v0 + 1296) = v64;
    *v64 = v0;
    v64[1] = sub_1005A71D8;
    return sub_1005A9B20(v32, *(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 712), *(_QWORD *)(v0 + 1096));
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 1208) = v62;
      *(_QWORD *)(v0 + 1200) = v32;
      *(_QWORD *)(v0 + 1192) = v63;
      v66 = *(_QWORD *)(v0 + 904);
      v67 = *(_QWORD *)(v0 + 824);
      sub_10005972C(*(_QWORD *)(v0 + 712)+ ((*(unsigned __int8 *)(v0 + 1340) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1340))+ *(_QWORD *)(v0 + 1184) * v63, v66, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      if ((*(_BYTE *)(v66 + *(int *)(v67 + 20)) & 1) == 0)
      {
        v68 = *(_QWORD *)(v0 + 1040);
        v69 = *(_QWORD *)(v0 + 1024);
        v70 = *(_QWORD *)(v0 + 1016);
        v71 = *(_QWORD *)(v0 + 904);
        (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1056))(v68, *(_QWORD *)(v0 + 720) + *(int *)(*(_QWORD *)(v0 + 912) + 32), v70);
        v72 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        LOBYTE(v71) = dispatch thunk of static Equatable.== infix(_:_:)(v71, v68, v70, v72);
        v73 = v68;
        v62 = v87;
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v73, v70);
        if ((v71 & 1) == 0)
          return swift_task_switch(sub_1005A429C, *(_QWORD *)(v0 + 1048), 0);
      }
      sub_1000126B0(*(_QWORD *)(v0 + 904), type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
      v63 = *(_QWORD *)(v0 + 1192) + 1;
      if (v63 == *(_QWORD *)(v0 + 1176))
        goto LABEL_16;
    }
  }
}

uint64_t sub_1005A85E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *log;
  os_log_t loga;
  uint64_t v41;
  os_log_type_t type[8];
  _BOOL4 v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 1304);
  v2 = *(_QWORD *)(v0 + 936);
  v3 = *(_QWORD *)(v0 + 720);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + *(int *)(*(_QWORD *)(v0 + 912) + 36)) + 16);
  sub_10005972C(v3, *(_QWORD *)(v0 + 944), type metadata accessor for MemberSharingCircle);
  sub_10005972C(v3, v2, type metadata accessor for MemberSharingCircle);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 1304);
    log = v6;
    v9 = *(_QWORD *)(v0 + 1016);
    v10 = *(_QWORD *)(v0 + 944);
    v37 = *(_QWORD *)(v0 + 936);
    v43 = *(_QWORD *)(v0 + 1176) == v4 + 1;
    v11 = swift_slowAlloc(58, -1);
    v45 = (uint64_t *)swift_slowAlloc(8, -1);
    v49 = swift_slowAlloc(64, -1);
    v52 = v49;
    *(_DWORD *)v11 = 141559299;
    *(_QWORD *)(v0 + 600) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 600, v0 + 608, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    v12 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
    *(_QWORD *)(v0 + 592) = sub_100016940(v13, v14, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v11 + 22) = 2160;
    *(_QWORD *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v11 + 24, v11 + 32);
    *(_WORD *)(v11 + 32) = 2081;
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
    *(_QWORD *)(v0 + 496) = sub_100016940(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v11 + 34, v11 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v37, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v11 + 42) = 1024;
    *(_DWORD *)(v0 + 1324) = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1324, v0 + 1328, v11 + 44, v11 + 48);
    *(_WORD *)(v11 + 48) = 2112;
    swift_errorRetain(v8);
    v17 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 440) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v11 + 50, v11 + 58);
    *v45 = v17;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to delete previous circle for share-id: %{private,mask.hash}s,\nbeaconId: %{private,mask.hash}s,\nallMembersAccepted: %{BOOL}d. %@.", (uint8_t *)v11, 0x3Au);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v45, 1, v18);
    swift_slowDealloc(v45, -1, -1);
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v11, -1, -1);
    swift_release();

    swift_errorRelease(v8);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 1304);
    v20 = *(_QWORD *)(v0 + 944);
    v21 = *(_QWORD *)(v0 + 936);
    swift_release();
    swift_errorRelease(v19);
    sub_1000126B0(v20, type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
    swift_errorRelease(v19);
    swift_errorRelease(v19);

  }
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(v0 + 1008);
  v23 = *(_QWORD *)(v0 + 1000);
  v24 = *(_QWORD *)(v0 + 992);
  v25 = *(_QWORD *)(v0 + 984);
  v26 = *(_QWORD *)(v0 + 976);
  v27 = *(_QWORD *)(v0 + 968);
  v28 = *(_QWORD *)(v0 + 960);
  v29 = *(_QWORD *)(v0 + 952);
  v30 = *(_QWORD *)(v0 + 944);
  v32 = *(_QWORD *)(v0 + 936);
  v33 = *(_QWORD *)(v0 + 904);
  v34 = *(_QWORD *)(v0 + 896);
  v35 = *(_QWORD *)(v0 + 888);
  v36 = *(_QWORD *)(v0 + 880);
  v38 = *(_QWORD *)(v0 + 872);
  loga = *(os_log_t *)(v0 + 864);
  v41 = *(_QWORD *)(v0 + 856);
  *(_QWORD *)type = *(_QWORD *)(v0 + 848);
  v44 = *(_QWORD *)(v0 + 840);
  v46 = *(_QWORD *)(v0 + 816);
  v47 = *(_QWORD *)(v0 + 792);
  v48 = *(_QWORD *)(v0 + 776);
  v50 = *(_QWORD *)(v0 + 760);
  v51 = *(_QWORD *)(v0 + 736);
  swift_task_dealloc(*(_QWORD *)(v0 + 1040));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(loga);
  swift_task_dealloc(v41);
  swift_task_dealloc(*(_QWORD *)type);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A8B28(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2[12] = a1;
  v2[13] = v1;
  v3 = type metadata accessor for MemberSharingCircle(0);
  v2[14] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[15] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[16] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v6);
  v2[18] = swift_task_alloc(v6);
  v7 = sub_10001A9A8(&qword_1010F46C0);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005A8BC0, v1, 0);
}

uint64_t sub_1005A8BC0()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_10001AA44((_QWORD *)(v0[13] + 112), *(_QWORD *)(v0[13] + 136));
  v1 = (uint64_t **)swift_task_alloc(dword_10110D12C);
  v0[20] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1005A8C20;
  return sub_100907E38(v0[12]);
}

uint64_t sub_1005A8C20(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;

  v4 = (*v2)[20];
  v5 = *v2;
  v5[21] = a1;
  v5[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_1005A8D38, v5[13], 0);
  v7 = (uint64_t **)swift_task_alloc(dword_1010FFD44);
  v5[23] = (uint64_t)v7;
  *v7 = v5;
  v7[1] = (uint64_t *)sub_1005A8CC4;
  return sub_1005A2C34(a1, v5[12], 0);
}

uint64_t sub_1005A8CC4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 104);
    v5 = sub_1005A9254;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 104);
    swift_bridgeObjectRelease();
    v5 = sub_1005A918C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1005A8D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v1 = v0 + 40;
  v2 = *(_QWORD *)(v0 + 176);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v3 = (_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  sub_10005972C(v4, v5, type metadata accessor for MemberSharingCircle);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 136);
  if (v10)
  {
    v12 = swift_slowAlloc(32, -1);
    v37 = swift_slowAlloc(64, -1);
    v38 = v37;
    *(_DWORD *)v12 = 141558531;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = v13;
    v1 = v0 + 40;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v15, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v16, v17, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v12 + 22) = 2082;
    swift_getErrorValue(v2, v0 + 72, v0 + 16);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 88) = sub_100016940(v18, v19, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to restore keys for circle: %{private,mask.hash}s,\nerror: %{public}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v20 = v12;
    v3 = (_QWORD *)(v0 + 80);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 136), type metadata accessor for MemberSharingCircle);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  *v3 = v2;
  swift_errorRetain(v2);
  swift_errorRetain(v2);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (swift_dynamicCast(v1, v3, v21, &type metadata for KeyDropInterface.KeyDropError, 6)
    && *(_BYTE *)(v0 + 48) == 1
    && *(_QWORD *)(v0 + 40) > 5uLL)
  {
    v23 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v0 + 96);
    v26 = *(_QWORD *)(v0 + 104);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v22, 1, 1, v28);
    sub_10005972C(v27, v23, type metadata accessor for MemberSharingCircle);
    v30 = sub_100006C64(&qword_1010FFD30, v29, (uint64_t (*)(uint64_t))type metadata accessor for ShareKeysDownloadUseCase, (uint64_t)&unk_100E4488C);
    v31 = *(unsigned __int8 *)(v25 + 80);
    v32 = (v31 + 40) & ~v31;
    v33 = (_QWORD *)swift_allocObject(&unk_101080D58, v32 + v24, v31 | 7);
    v33[2] = v26;
    v33[3] = v30;
    v33[4] = v26;
    sub_1000126EC(v23, (uint64_t)v33 + v32, type metadata accessor for MemberSharingCircle);
    swift_retain_n(v26, 2);
    sub_100691AC0(v22, (uint64_t)&unk_1010FFD38, (uint64_t)v33);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_release();
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v34 = *(_QWORD *)(v0 + 144);
  v35 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A918C()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_10001AA44((_QWORD *)(v0[13] + 160), *(_QWORD *)(v0[13] + 184));
  v1 = (uint64_t **)swift_task_alloc(dword_10111A22C);
  v0[25] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1005A91EC;
  return sub_100C305EC(v0[12]);
}

uint64_t sub_1005A91EC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = *(_QWORD **)v0;
  v6 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  v3 = v1[18];
  v2 = v1[19];
  v4 = v1[17];
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return ((uint64_t (*)(void))v6[1])();
}

uint64_t sub_1005A9254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v1 = v0 + 40;
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 192);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v3 = (_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B6748);
  sub_10005972C(v4, v5, type metadata accessor for MemberSharingCircle);
  swift_errorRetain(v2);
  v7 = swift_errorRetain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 136);
  if (v10)
  {
    v12 = swift_slowAlloc(32, -1);
    v37 = swift_slowAlloc(64, -1);
    v38 = v37;
    *(_DWORD *)v12 = 141558531;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v13 = type metadata accessor for UUID(0);
    v14 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = v13;
    v1 = v0 + 40;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v15, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v16, v17, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v12 + 22) = 2082;
    swift_getErrorValue(v2, v0 + 72, v0 + 16);
    v18 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
    *(_QWORD *)(v0 + 88) = sub_100016940(v18, v19, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v12 + 24, v12 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to restore keys for circle: %{private,mask.hash}s,\nerror: %{public}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v20 = v12;
    v3 = (_QWORD *)(v0 + 80);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 136), type metadata accessor for MemberSharingCircle);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  *v3 = v2;
  swift_errorRetain(v2);
  swift_errorRetain(v2);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (swift_dynamicCast(v1, v3, v21, &type metadata for KeyDropInterface.KeyDropError, 6)
    && *(_BYTE *)(v0 + 48) == 1
    && *(_QWORD *)(v0 + 40) > 5uLL)
  {
    v23 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v0 + 96);
    v26 = *(_QWORD *)(v0 + 104);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v22, 1, 1, v28);
    sub_10005972C(v27, v23, type metadata accessor for MemberSharingCircle);
    v30 = sub_100006C64(&qword_1010FFD30, v29, (uint64_t (*)(uint64_t))type metadata accessor for ShareKeysDownloadUseCase, (uint64_t)&unk_100E4488C);
    v31 = *(unsigned __int8 *)(v25 + 80);
    v32 = (v31 + 40) & ~v31;
    v33 = (_QWORD *)swift_allocObject(&unk_101080D58, v32 + v24, v31 | 7);
    v33[2] = v26;
    v33[3] = v30;
    v33[4] = v26;
    sub_1000126EC(v23, (uint64_t)v33 + v32, type metadata accessor for MemberSharingCircle);
    swift_retain_n(v26, 2);
    sub_100691AC0(v22, (uint64_t)&unk_1010FFD38, (uint64_t)v33);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_release();
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v34 = *(_QWORD *)(v0 + 144);
  v35 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A96B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1005A96C8, a4, 0);
}

uint64_t sub_1005A96C8()
{
  _QWORD *v0;
  _QWORD *v1;

  sub_10001AA44((_QWORD *)(v0[2] + 160), *(_QWORD *)(v0[2] + 184));
  v1 = (_QWORD *)swift_task_alloc(dword_10111A224);
  v0[4] = v1;
  *v1 = v0;
  v1[1] = sub_1002A9830;
  return sub_100C2EE60(v0[3]);
}

uint64_t type metadata accessor for ShareKeysDownloadUseCase()
{
  return objc_opt_self(_TtC12searchpartyd24ShareKeysDownloadUseCase);
}

BOOL sub_1005A9748(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  _QWORD v17[2];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v17 - v9;
  v11 = type metadata accessor for MemberSharingCircle(0);
  v12 = a1 + *(int *)(v11 + 28);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, v12, v4);
  v13(v8, a2 + *(int *)(v11 + 28), v4);
  v14 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)(v10, v8, v4, v14);
  v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  return (a2 & 1) == 0;
}

uint64_t sub_1005A9880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EC868);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005A9910, 0, 0);
}

uint64_t sub_1005A9910()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 152);
  *(_QWORD *)(v0 + 88) = v1;
  return swift_task_switch(sub_1005A992C, v1, 0);
}

uint64_t sub_1005A992C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[11];
  v3 = v0[7];
  v2 = v0[8];
  v4 = v0[5];
  v5 = v0[6];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[3], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101080E98, v7 + v3, v6 | 7);
  v0[12] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[13] = v10;
  *v10 = v0;
  v10[1] = sub_1005A9A04;
  return unsafeBlocking<A>(_:)(v0[10], sub_100142994, v8, v0[9]);
}

uint64_t sub_1005A9A04()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_1005A9A60, 0, 0);
}

uint64_t sub_1005A9A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for MemberPeerTrust(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010EC868);
    v3 = 0;
    v4 = 0;
  }
  else
  {
    v5 = (uint64_t *)(v1 + *(int *)(v2 + 32));
    v3 = *v5;
    v4 = v5[1];
    swift_bridgeObjectRetain(v4);
    sub_1000126B0(v1, type metadata accessor for MemberPeerTrust);
  }
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD **)(v0 + 16);
  *v8 = v3;
  v8[1] = v4;
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005A9B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  v6 = sub_10001A9A8(&qword_1011093D0);
  v5[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[22] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[23] = swift_task_alloc(v8);
  v5[24] = swift_task_alloc(v8);
  v5[25] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_1010ED4D8);
  v5[26] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[27] = v10;
  v5[28] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v5[29] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[30] = v12;
  v5[31] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EC870);
  v5[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v5[33] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[34] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v5[35] = v16;
  v5[36] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v5[37] = v17;
  v5[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8((uint64_t *)&unk_101109120);
  v5[39] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v5[40] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[41] = swift_task_alloc(v20);
  v5[42] = swift_task_alloc(v20);
  v5[43] = swift_task_alloc(v20);
  v5[44] = swift_task_alloc(v20);
  v5[45] = swift_task_alloc(v20);
  v21 = type metadata accessor for MemberSharingCircle(0);
  v5[46] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v5[47] = v22;
  v23 = *(_QWORD *)(v22 + 64);
  v5[48] = v23;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[49] = swift_task_alloc(v24);
  v5[50] = swift_task_alloc(v24);
  v5[51] = swift_task_alloc(v24);
  v5[52] = swift_task_alloc(v24);
  v5[53] = swift_task_alloc(v24);
  v5[54] = swift_task_alloc(v24);
  return swift_task_switch(sub_1005A9D40, v4, 0);
}

uint64_t sub_1005A9D40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45[2];

  *(_QWORD *)(v0 + 80) = _swiftEmptyArrayStorage;
  v1 = (uint64_t *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 136);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 16) != *(_QWORD *)(*(_QWORD *)(v2 + *(int *)(*(_QWORD *)(v0 + 368) + 36))
                                                              + 16)
                                                  + 1)
    goto LABEL_9;
  if (qword_1010E9938 != -1)
  {
    swift_once(&qword_1010E9938, sub_1000AFBB0);
    v2 = *(_QWORD *)(v0 + 136);
  }
  v4 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 432);
  sub_10001A9E8(*(_QWORD *)(v0 + 232), (uint64_t)qword_1011B6748);
  sub_10005972C(v2, v3, type metadata accessor for MemberSharingCircle);
  v5 = sub_10005972C(v2, v4, type metadata accessor for MemberSharingCircle);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 424);
  v10 = *(_QWORD *)(v0 + 432);
  if (v8)
  {
    v11 = *(_QWORD *)(v0 + 264);
    v12 = swift_slowAlloc(42, -1);
    v44 = swift_slowAlloc(64, -1);
    v45[0] = v44;
    *(_DWORD *)v12 = 141558787;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    v13 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    *(_QWORD *)(v0 + 104) = sub_100016940(v14, v15, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for MemberSharingCircle);
    *(_WORD *)(v12 + 22) = 2160;
    *(_QWORD *)(v0 + 112) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v12 + 24, v12 + 32);
    *(_WORD *)(v12 + 32) = 2081;
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    *(_QWORD *)(v0 + 120) = sub_100016940(v16, v17, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v12 + 34, v12 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "All participant for shareId: %{private,mask.hash}s,\nbeaconId: %{private,mask.hash}s have accepted.", (uint8_t *)v12, 0x2Au);
    swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 432), type metadata accessor for MemberSharingCircle);
    sub_1000126B0(v9, type metadata accessor for MemberSharingCircle);
  }

  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v0 + 440) = v19;
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 376);
    v21 = *(_DWORD **)(v0 + 312);
    v22 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 152);
    *(_QWORD *)(v0 + 448) = v22;
    v23 = *(_DWORD *)(v20 + 80);
    *(_DWORD *)(v0 + 584) = v23;
    *(_QWORD *)(v0 + 456) = *(_QWORD *)(v20 + 72);
    *(_QWORD *)(v0 + 464) = 0;
    v24 = *(_QWORD *)(v0 + 416);
    v25 = v18 + ((v23 + 32) & ~(unint64_t)v23);
    swift_bridgeObjectRetain(v18);
    sub_10005972C(v25, v24, type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 588) = v21[12];
    *(_DWORD *)(v0 + 592) = v21[16];
    *(_DWORD *)(v0 + 596) = v21[20];
    *(_DWORD *)(v0 + 600) = v21[24];
    v26 = sub_1005AA250;
    v27 = v22;
  }
  else
  {
LABEL_9:
    v28 = *(_QWORD *)(v0 + 128);
    v29 = *(_QWORD *)(v28 + 16);
    *(_QWORD *)(v0 + 504) = v29;
    if (v29)
    {
      v30 = *(_QWORD *)(v0 + 176);
      v31 = v28 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      v32 = *(_QWORD *)(v30 + 72);
      swift_bridgeObjectRetain(v28);
      do
      {
        sub_1005AB68C(v31);
        v31 += v32;
        --v29;
      }
      while (v29);
      swift_bridgeObjectRelease();
    }
    v33 = *v1;
    v34 = *(_QWORD *)(*v1 + 16);
    if (v34)
    {
      v35 = *(_QWORD *)(v0 + 320);
      v36 = *(_QWORD *)(v0 + 328);
      v37 = (*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
      v38 = *(_QWORD *)(v35 + 72);
      swift_bridgeObjectRetain_n(v33, 2);
      sub_10000F9B8(v33 + v37, v36, (uint64_t *)&unk_101109120);
      sub_1005ABA44(v36);
      sub_100004048(v36, (uint64_t *)&unk_101109120);
      v39 = v34 - 1;
      if (v39)
      {
        v40 = v33 + v38 + v37;
        do
        {
          v41 = *(_QWORD *)(v0 + 328);
          sub_10000F9B8(v40, v41, (uint64_t *)&unk_101109120);
          sub_1005ABA44(v41);
          sub_100004048(v41, (uint64_t *)&unk_101109120);
          v40 += v38;
          --v39;
        }
        while (v39);
      }
      swift_bridgeObjectRelease_n(v33, 2);
    }
    *(_QWORD *)(v0 + 512) = 0;
    v42 = *(_QWORD *)(v0 + 368);
    v27 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 152);
    *(_QWORD *)(v0 + 520) = v27;
    *(_DWORD *)(v0 + 604) = *(_DWORD *)(v42 + 20);
    v26 = sub_1005AA838;
  }
  return swift_task_switch(v26, v27, 0);
}

uint64_t sub_1005AA250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(unsigned __int8 *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 408);
  v4 = (v1 + 24) & ~v1;
  v5 = v4 + *(_QWORD *)(v0 + 384);
  v6 = v1 | 7;
  sub_10005972C(*(_QWORD *)(v0 + 416), v3, type metadata accessor for MemberSharingCircle);
  v7 = swift_allocObject(&unk_101080E70, v5, v6);
  *(_QWORD *)(v0 + 472) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  sub_1000126EC(v3, v7 + v4, type metadata accessor for MemberSharingCircle);
  v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 480) = v9;
  *v9 = v0;
  v9[1] = sub_1005AA330;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 352), sub_100142AA0, v7, *(_QWORD *)(v0 + 312));
}

uint64_t sub_1005AA330()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 448);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 480));
  swift_release();
  return swift_task_switch(sub_1005AA390, v1, 0);
}

uint64_t sub_1005AA390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = *(int **)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = v2 + *(int *)(v0 + 592);
  v6 = v2 + *(int *)(v0 + 588);
  v7 = v1 + v3[12];
  v8 = v1 + v3[16];
  *(_QWORD *)(v0 + 488) = *(_QWORD *)(v1 + v3[20]);
  *(_QWORD *)(v0 + 496) = *(_QWORD *)(v1 + v3[24]);
  sub_1000126EC(v1, v2, type metadata accessor for MemberSharingCircle);
  sub_100005CF0(v7, v6, (uint64_t *)&unk_1010EE180);
  sub_100005CF0(v8, v5, (uint64_t *)&unk_101105880);
  return swift_task_switch(sub_1005AA44C, v4, 0);
}

uint64_t sub_1005AA44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = *(_QWORD *)(v0 + 488);
  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(int *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 344);
  v7 = *(int **)(v0 + 312);
  v8 = v4 + *(int *)(v0 + 592);
  v9 = v4 + *(int *)(v0 + 588);
  *(_QWORD *)(v4 + *(int *)(v0 + 596)) = v2;
  *(_QWORD *)(v4 + v3) = v1;
  v10 = v6 + v7[12];
  v11 = v6 + v7[16];
  v49 = v11;
  v50 = v8;
  v12 = v7[20];
  v48 = v7[24];
  sub_10005972C(v4, v6, type metadata accessor for MemberSharingCircle);
  sub_10000F9B8(v9, v10, (uint64_t *)&unk_1010EE180);
  sub_10000F9B8(v50, v11, (uint64_t *)&unk_101105880);
  *(_QWORD *)(v6 + v12) = v2;
  *(_QWORD *)(v6 + v48) = v1;
  v13 = v5 + v7[12];
  v14 = v5 + v7[16];
  v15 = v7[20];
  v16 = v7[24];
  sub_1000126EC(v6, v5, type metadata accessor for MemberSharingCircle);
  sub_100005CF0(v10, v13, (uint64_t *)&unk_1010EE180);
  sub_100005CF0(v49, v14, (uint64_t *)&unk_101105880);
  *(_QWORD *)(v5 + v15) = v2;
  *(_QWORD *)(v5 + v16) = v1;
  v17 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
    v17 = sub_1007C7D54(0, *(_QWORD *)(v17 + 16) + 1, 1, v17);
  v19 = *(_QWORD *)(v17 + 16);
  v18 = *(_QWORD *)(v17 + 24);
  if (v19 >= v18 >> 1)
    v17 = sub_1007C7D54(v18 > 1, v19 + 1, 1, v17);
  v20 = *(_QWORD *)(v0 + 440);
  v21 = *(_QWORD *)(v0 + 416);
  v22 = *(_QWORD *)(v0 + 360);
  v23 = *(_QWORD *)(v0 + 336);
  v24 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 464) + 1;
  *(_QWORD *)(v17 + 16) = v19 + 1;
  sub_100005CF0(v23, v17+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v19, (uint64_t *)&unk_101109120);
  *(_QWORD *)(v0 + 80) = v17;
  sub_100004048(v22, (uint64_t *)&unk_101109120);
  sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
  if (v25 == v20)
  {
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v0 + 128);
    v27 = *(_QWORD *)(v26 + 16);
    *(_QWORD *)(v0 + 504) = v27;
    if (v27)
    {
      v28 = *(_QWORD *)(v0 + 176);
      v29 = v26 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
      v30 = *(_QWORD *)(v28 + 72);
      swift_bridgeObjectRetain(v26);
      do
      {
        sub_1005AB68C(v29);
        v29 += v30;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
    }
    v37 = *(_QWORD *)(v0 + 80);
    v38 = *(_QWORD *)(v37 + 16);
    if (v38)
    {
      v39 = *(_QWORD *)(v0 + 320);
      v40 = *(_QWORD *)(v0 + 328);
      v41 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v42 = *(_QWORD *)(v39 + 72);
      swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 80), 2);
      sub_10000F9B8(v37 + v41, v40, (uint64_t *)&unk_101109120);
      sub_1005ABA44(v40);
      sub_100004048(v40, (uint64_t *)&unk_101109120);
      v43 = v38 - 1;
      if (v43)
      {
        v44 = v37 + v42 + v41;
        do
        {
          v45 = *(_QWORD *)(v0 + 328);
          sub_10000F9B8(v44, v45, (uint64_t *)&unk_101109120);
          sub_1005ABA44(v45);
          sub_100004048(v45, (uint64_t *)&unk_101109120);
          v44 += v42;
          --v43;
        }
        while (v43);
      }
      swift_bridgeObjectRelease_n(v37, 2);
    }
    *(_QWORD *)(v0 + 512) = 0;
    v46 = *(_QWORD *)(v0 + 368);
    v36 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 152);
    *(_QWORD *)(v0 + 520) = v36;
    *(_DWORD *)(v0 + 604) = *(_DWORD *)(v46 + 20);
    v35 = sub_1005AA838;
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 456);
    v32 = *(_QWORD *)(v0 + 464) + 1;
    *(_QWORD *)(v0 + 464) = v32;
    v33 = *(_QWORD *)(v0 + 448);
    v34 = *(_DWORD **)(v0 + 312);
    sub_10005972C(*(_QWORD *)(v0 + 152)+ ((*(unsigned __int8 *)(v0 + 584) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 584))+ v31 * v32, *(_QWORD *)(v0 + 416), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 588) = v34[12];
    *(_DWORD *)(v0 + 592) = v34[16];
    *(_DWORD *)(v0 + 596) = v34[20];
    *(_DWORD *)(v0 + 600) = v34[24];
    v35 = sub_1005AA250;
    v36 = v33;
  }
  return swift_task_switch(v35, v36, 0);
}

uint64_t sub_1005AA838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 136) + *(int *)(v0 + 604);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 528) = v7;
  v7(v2, v6, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101080E48, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 536) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v2, v4);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 544) = v12;
  *v12 = v0;
  v12[1] = sub_1005AA91C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 304), sub_1001429AC, v10, *(_QWORD *)(v0 + 296));
}

uint64_t sub_1005AA91C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 544));
  swift_release();
  return swift_task_switch(sub_1005AA980, v1, 0);
}

uint64_t sub_1005AA980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = (_QWORD *)swift_task_alloc(48);
  v5[2] = v4;
  v5[3] = v0 + 80;
  v5[4] = v2;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_1005AC7B0, v3);
  if (v1)
  {
    sub_100004048(*(_QWORD *)(v0 + 304), (uint64_t *)&unk_101111440);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v5);
    v6 = *(_QWORD *)(v0 + 424);
    v7 = *(_QWORD *)(v0 + 408);
    v8 = *(_QWORD *)(v0 + 416);
    v10 = *(_QWORD *)(v0 + 392);
    v9 = *(_QWORD *)(v0 + 400);
    v12 = *(_QWORD *)(v0 + 352);
    v11 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 344);
    v16 = *(_QWORD *)(v0 + 336);
    v17 = *(_QWORD *)(v0 + 328);
    v18 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 288);
    v20 = *(_QWORD *)(v0 + 256);
    v21 = *(_QWORD *)(v0 + 248);
    v22 = *(_QWORD *)(v0 + 224);
    v23 = *(_QWORD *)(v0 + 200);
    v24 = *(_QWORD *)(v0 + 192);
    v25 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 432));
    swift_task_dealloc(v6);
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 520);
    swift_task_dealloc(v5);
    return swift_task_switch(sub_1005AAB48, v15, 0);
  }
}

uint64_t sub_1005AAB48()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 552) = *(_QWORD *)(*(_QWORD *)(v0 + 520) + 128);
  return swift_task_switch(sub_1005AAB68, 0, 0);
}

uint64_t sub_1005AAB68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[69];
  v2 = v0[32];
  v3 = swift_task_alloc(32);
  v0[70] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[71] = v4;
  *v4 = v0;
  v4[1] = sub_1005AAC0C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_1005AAC0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 568);
  *(_QWORD *)(*v1 + 576) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1005AB4EC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 560));
    v4 = sub_1005AAC78;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1005AAC78()
{
  uint64_t v0;

  return swift_task_switch(sub_1005AAC8C, *(_QWORD *)(v0 + 160), 0);
}

uint64_t sub_1005AAC8C()
{
  uint64_t v0;
  __objc2_ivar_list **p_ivars;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  os_log_type_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;

  v82 = v0 + 64;
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 80) + 16))
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v2 = *(_QWORD *)(v0 + 400);
    v4 = *(_QWORD *)(v0 + 240);
    v3 = *(_QWORD *)(v0 + 248);
    v5 = *(_QWORD *)(v0 + 232);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
    v8 = sub_10005972C(v6, v2, type metadata accessor for MemberSharingCircle);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 400);
    if (v11)
    {
      v86 = *(_QWORD *)(v0 + 264);
      v100 = *(_QWORD *)(v0 + 248);
      v94 = *(_QWORD *)(v0 + 240);
      v97 = *(_QWORD *)(v0 + 232);
      v13 = swift_slowAlloc(32, -1);
      v14 = (_QWORD *)swift_slowAlloc(32, -1);
      v105 = v14;
      *(_DWORD *)v13 = 141558531;
      *(_QWORD *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v0 + 72, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v86, v15);
      *(_QWORD *)(v0 + 72) = sub_100016940(v16, v17, (uint64_t *)&v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v12, type metadata accessor for MemberSharingCircle);
      *(_WORD *)(v13 + 22) = 2048;
      swift_beginAccess(v0 + 80, v0 + 16, 0, 0);
      *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v13 + 24, v13 + 32);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Deleted all previous shares for beaconId: %{private,mask.hash}s,\ncount: %ld.", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      v18 = v13;
      p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
      swift_slowDealloc(v18, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v100, v97);
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 240);
      v19 = *(_QWORD *)(v0 + 248);
      v21 = *(_QWORD *)(v0 + 232);
      sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for MemberSharingCircle);

      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    }
  }
  if (p_ivars[295] != (__objc2_ivar_list *)-1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v22 = *(_QWORD *)(v0 + 392);
  v24 = *(_QWORD *)(v0 + 128);
  v23 = *(_QWORD *)(v0 + 136);
  sub_10001A9E8(*(_QWORD *)(v0 + 232), (uint64_t)qword_1011B6748);
  sub_10005972C(v23, v22, type metadata accessor for MemberSharingCircle);
  swift_bridgeObjectRetain_n(v24, 2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v78 = v27;
    v101 = *(_QWORD *)(v0 + 504);
    v28 = *(_QWORD *)(v0 + 392);
    v29 = *(_QWORD *)(v0 + 264);
    v30 = swift_slowAlloc(32, -1);
    v77 = swift_slowAlloc(64, -1);
    v104 = v77;
    *(_DWORD *)v30 = 141558531;
    *(_QWORD *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    v31 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v29, v31);
    *(_QWORD *)(v0 + 48) = sub_100016940(v32, v33, &v104);
    v76 = v0 + 56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v28, type metadata accessor for MemberSharingCircle);
    v80 = (uint8_t *)v30;
    *(_WORD *)(v30 + 22) = 2080;
    v34 = _swiftEmptyArrayStorage;
    if (v101)
    {
      v75 = v26;
      v35 = *(_QWORD *)(v0 + 504);
      v89 = *(_QWORD *)(v0 + 208);
      v91 = *(_QWORD *)(v0 + 216);
      v36 = *(_QWORD *)(v0 + 176);
      v87 = *(_QWORD *)(v0 + 168);
      v37 = *(_QWORD *)(v0 + 128);
      v105 = _swiftEmptyArrayStorage;
      sub_10009A4A4(0, v35, 0);
      v38 = 0;
      v39 = v37 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
      v84 = *(_QWORD *)(v36 + 72);
      v34 = v105;
      v93 = v0;
      do
      {
        v102 = v34;
        v95 = *(_QWORD *)(v0 + 264);
        v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
        v40 = *(_QWORD *)(v0 + 224);
        v42 = *(_QWORD *)(v0 + 192);
        v41 = *(_QWORD *)(v0 + 200);
        v43 = *(_QWORD *)(v0 + 184);
        sub_10000F9B8(v39, v41, &qword_1011093D0);
        v44 = (_QWORD *)(v40 + *(int *)(v89 + 48));
        v45 = *(int *)(v87 + 48);
        v46 = (_QWORD *)(v42 + v45);
        v47 = (_QWORD *)(v41 + v45);
        sub_10005972C(v41, v42, type metadata accessor for MemberPeerTrust);
        v48 = v47[1];
        *v46 = *v47;
        v46[1] = v48;
        v49 = v42 + *(int *)(type metadata accessor for MemberPeerTrust(0) + 20);
        v50 = v40;
        v34 = v102;
        v98(v50, v49, v95);
        sub_1000126B0(v42, type metadata accessor for MemberPeerTrust);
        v51 = (_QWORD *)(v43 + *(int *)(v87 + 48));
        sub_10005972C(v41, v43, type metadata accessor for MemberPeerTrust);
        v53 = *v47;
        v52 = v47[1];
        *v51 = *v47;
        v51[1] = v52;
        *v44 = v53;
        v44[1] = v52;
        swift_bridgeObjectRetain(v52);
        sub_1000126B0(v43, type metadata accessor for MemberPeerTrust);
        sub_100004048(v41, &qword_1011093D0);
        if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0)
        {
          sub_10009A4A4(0, v102[2] + 1, 1);
          v34 = v105;
        }
        v55 = v34[2];
        v54 = v34[3];
        v0 = v93;
        if (v55 >= v54 >> 1)
        {
          sub_10009A4A4(v54 > 1, v55 + 1, 1);
          v34 = v105;
        }
        v56 = *(_QWORD *)(v93 + 504);
        v57 = *(_QWORD *)(v93 + 224);
        ++v38;
        v34[2] = v55 + 1;
        sub_100005CF0(v57, (uint64_t)v34+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(_QWORD *)(v91 + 72) * v55, &qword_1010ED4D8);
        v39 += v84;
      }
      while (v38 != v56);
      v26 = v75;
    }
    v59 = *(_QWORD *)(v0 + 256);
    v61 = *(_QWORD *)(v0 + 128);
    v62 = Array.description.getter(v34, *(_QWORD *)(v0 + 208));
    v64 = v63;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = sub_100016940(v62, v64, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v82, v80 + 24, v80 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v61, 2);
    _os_log_impl((void *)&_mh_execute_header, v26, v78, "Update members for shareId: %{private,mask.hash}s,\nupdates: %s.", v80, 0x20u);
    swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v80, -1, -1);

  }
  else
  {
    v58 = *(_QWORD *)(v0 + 392);
    v59 = *(_QWORD *)(v0 + 256);
    v60 = *(_QWORD *)(v0 + 128);

    swift_bridgeObjectRelease_n(v60, 2);
    sub_1000126B0(v58, type metadata accessor for MemberSharingCircle);
  }
  sub_100004048(v59, &qword_1010EC870);
  v65 = *(_QWORD *)(v0 + 424);
  v66 = *(_QWORD *)(v0 + 432);
  v68 = *(_QWORD *)(v0 + 408);
  v67 = *(_QWORD *)(v0 + 416);
  v70 = *(_QWORD *)(v0 + 392);
  v69 = *(_QWORD *)(v0 + 400);
  v72 = *(_QWORD *)(v0 + 352);
  v71 = *(_QWORD *)(v0 + 360);
  v79 = *(_QWORD *)(v0 + 344);
  v81 = *(_QWORD *)(v0 + 336);
  v73 = *(_QWORD *)(v0 + 304);
  v83 = *(_QWORD *)(v0 + 328);
  v85 = *(_QWORD *)(v0 + 288);
  v88 = *(_QWORD *)(v0 + 256);
  v90 = *(_QWORD *)(v0 + 248);
  v92 = *(_QWORD *)(v0 + 224);
  v96 = *(_QWORD *)(v0 + 200);
  v99 = *(_QWORD *)(v0 + 192);
  v103 = *(_QWORD *)(v0 + 184);
  sub_100004048(v73, (uint64_t *)&unk_101111440);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v66);
  swift_task_dealloc(v65);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  swift_task_dealloc(v73);
  swift_task_dealloc(v85);
  swift_task_dealloc(v88);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v96);
  swift_task_dealloc(v99);
  swift_task_dealloc(v103);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005AB4EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 560));
  return swift_task_switch(sub_1005AB52C, v1, 0);
}

uint64_t sub_1005AB52C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 304);
  sub_100004048(*(_QWORD *)(v0 + 256), &qword_1010EC870);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 400);
  v8 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 304);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1005AB68C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = type metadata accessor for UUID(0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2);
  v45 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1011093D0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v40 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v40 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v40 - v14;
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B6748);
  v17 = *(int *)(v4 + 48);
  v18 = &v15[v17];
  v19 = (_QWORD *)(a1 + v17);
  sub_10005972C(a1, (uint64_t)v15, type metadata accessor for MemberPeerTrust);
  v20 = v19[1];
  *(_QWORD *)v18 = *v19;
  *((_QWORD *)v18 + 1) = v20;
  sub_10000F9B8((uint64_t)v15, (uint64_t)v13, &qword_1011093D0);
  sub_100005CF0((uint64_t)v15, (uint64_t)v10, &qword_1011093D0);
  swift_bridgeObjectRetain(v20);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    v25 = swift_slowAlloc(22, -1);
    v43 = v24;
    v26 = v25;
    v44 = swift_slowAlloc(32, -1);
    v50 = v44;
    *(_DWORD *)v26 = 141558275;
    v48 = 1752392040;
    v42 = &v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v26 + 4, v26 + 12);
    *(_WORD *)(v26 + 12) = 2081;
    v41 = v26 + 14;
    v27 = *(int *)(v4 + 48);
    v28 = &v7[v27];
    v29 = &v13[v27];
    sub_10005972C((uint64_t)v13, (uint64_t)v7, type metadata accessor for MemberPeerTrust);
    v30 = *((_QWORD *)v29 + 1);
    *(_QWORD *)v28 = *(_QWORD *)v29;
    *((_QWORD *)v28 + 1) = v30;
    v31 = type metadata accessor for MemberPeerTrust(0);
    v32 = v45;
    v33 = v46;
    v34 = v47;
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v45, &v7[*(int *)(v31 + 20)], v47);
    sub_1000126B0((uint64_t)v7, type metadata accessor for MemberPeerTrust);
    v35 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
    v38 = v37;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v34);
    v48 = sub_100016940(v36, v38, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v42, v41, v26 + 22);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v10, &qword_1011093D0);
    sub_100004048((uint64_t)v13, &qword_1011093D0);
    _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v43, "Data update on members process. Update %{private,mask.hash}s", (uint8_t *)v26, 0x16u);
    v39 = v44;
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    sub_100004048((uint64_t)v10, &qword_1011093D0);
    sub_100004048((uint64_t)v13, &qword_1011093D0);
  }

}

void sub_1005ABA44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  os_log_t v54;
  int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v2 = type metadata accessor for UUID(0);
  v58 = *(_QWORD *)(v2 - 8);
  v59 = v2;
  __chkstk_darwin(v2);
  v57 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (int *)sub_10001A9A8((uint64_t *)&unk_101109120);
  v5 = __chkstk_darwin(v4);
  v56 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v62 = (uint64_t)&v51 - v8;
  v9 = __chkstk_darwin(v7);
  v61 = (uint64_t)&v51 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v51 - v11;
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v13 = type metadata accessor for Logger(0);
  v60 = sub_10001A9E8(v13, (uint64_t)qword_1011B6748);
  v14 = v4[12];
  v15 = (uint64_t)&v12[v14];
  v16 = v4[16];
  v17 = (uint64_t)&v12[v16];
  v18 = v4[20];
  v19 = v4[24];
  v20 = a1 + v14;
  v21 = a1 + v16;
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for MemberSharingCircle);
  sub_10000F9B8(v20, v15, (uint64_t *)&unk_1010EE180);
  sub_10000F9B8(v21, v17, (uint64_t *)&unk_101105880);
  v22 = *(_QWORD *)(a1 + v18);
  *(_QWORD *)&v12[v18] = v22;
  v23 = *(_QWORD *)(a1 + v19);
  *(_QWORD *)&v12[v19] = v23;
  v24 = v61;
  sub_10000F9B8((uint64_t)v12, v61, (uint64_t *)&unk_101109120);
  v25 = v62;
  sub_100005CF0((uint64_t)v12, v62, (uint64_t *)&unk_101109120);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    v30 = swift_slowAlloc(22, -1);
    v55 = v29;
    v31 = v30;
    v60 = swift_slowAlloc(32, -1);
    v65 = v60;
    *(_DWORD *)v31 = 141558275;
    v63 = 1752392040;
    v53 = &v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v52 = v31 + 14;
    v32 = v4[12];
    v33 = v56;
    v54 = v27;
    v34 = v56 + v32;
    v35 = v4[16];
    v36 = v56 + v35;
    v37 = v4[20];
    v38 = v4[24];
    v39 = v24 + v32;
    v40 = v24 + v35;
    sub_10005972C(v24, v56, type metadata accessor for MemberSharingCircle);
    sub_10000F9B8(v39, v34, (uint64_t *)&unk_1010EE180);
    sub_10000F9B8(v40, v36, (uint64_t *)&unk_101105880);
    *(_QWORD *)(v33 + v37) = *(_QWORD *)(v24 + v37);
    *(_QWORD *)(v33 + v38) = *(_QWORD *)(v24 + v38);
    v41 = type metadata accessor for MemberSharingCircle(0);
    v43 = v57;
    v42 = v58;
    v44 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v33 + *(int *)(v41 + 20), v59);
    sub_1000126B0(v33, type metadata accessor for MemberSharingCircle);
    sub_100004048(v36, (uint64_t *)&unk_101105880);
    sub_100004048(v34, (uint64_t *)&unk_1010EE180);
    v45 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
    v48 = v47;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
    v63 = sub_100016940(v46, v48, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v53, v52, v31 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v62, (uint64_t *)&unk_101109120);
    sub_100004048(v24, (uint64_t *)&unk_101109120);
    v49 = v54;
    _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v55, "Data update on members process. Delete %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
    v50 = v60;
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {
    sub_100004048(v25, (uint64_t *)&unk_101109120);
    sub_100004048(v24, (uint64_t *)&unk_101109120);

  }
}

uint64_t sub_1005ABED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;

  v54 = a5;
  v8 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MemberSharingCircle(0);
  v52 = *(_QWORD *)(v11 - 8);
  v53 = v11;
  __chkstk_darwin(v11);
  v49 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 + 16);
  v55 = v10;
  if (!v13)
  {
LABEL_6:
    v18 = *a4;
    v50 = *(_QWORD *)(v18 + 16);
    if (!v50)
    {
LABEL_28:
      sub_10000F9B8(v54, (uint64_t)v10, (uint64_t *)&unk_101111440);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v10, 1, v53) == 1)
        return sub_100004048((uint64_t)v10, (uint64_t *)&unk_101111440);
      v43 = v49;
      sub_1000126EC((uint64_t)v10, v49, type metadata accessor for MemberSharingCircle);
      swift_bridgeObjectRetain(a3);
      sub_100ADD0AC(v43);
      return sub_1000126B0(v43, type metadata accessor for MemberSharingCircle);
    }
    v19 = sub_10001A9A8((uint64_t *)&unk_101109120);
    v20 = *(_QWORD *)(v19 - 8);
    v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v22 = *(_QWORD *)(v20 + 72);
    v46 = v18;
    v23 = swift_bridgeObjectRetain(v18);
    v24 = 0;
    v23.n128_u64[0] = 134218240;
    v44 = v23;
    v51 = v19;
    v45 = a3;
    v47 = v22;
    v48 = v21;
    while (1)
    {
      v25 = v21 + v22 * v24;
      sub_100AE0164(v25);
      if (v5)
        return swift_bridgeObjectRelease();
      v26 = *(_QWORD *)(v25 + *(int *)(v19 + 80));
      v27 = *(_QWORD *)(v26 + 16);
      if (v27 >= 0xA)
        break;
      if (v27)
      {
        v34 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
        v35 = v26 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
        v36 = *(_QWORD *)(v34 + 72);
        swift_bridgeObjectRetain(v26);
        do
        {
          sub_100ADECF8(v35);
          v35 += v36;
          --v27;
        }
        while (v27);
        swift_bridgeObjectRelease();
        a3 = v45;
LABEL_20:
        v19 = v51;
      }
      v37 = *(_QWORD *)(v25 + *(int *)(v19 + 96));
      v38 = *(_QWORD *)(v37 + 16);
      if (v38)
      {
        v39 = *(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8);
        v40 = v37 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
        v41 = *(_QWORD *)(v39 + 72);
        swift_bridgeObjectRetain(v37);
        do
        {
          sub_100ADF3E4(v40);
          v40 += v41;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease();
        v19 = v51;
      }
      ++v24;
      v22 = v47;
      v21 = v48;
      if (v24 == v50)
      {
        swift_bridgeObjectRelease();
        v10 = v55;
        goto LABEL_28;
      }
    }
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B6748);
    swift_bridgeObjectRetain(v26);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      *(_DWORD *)v32 = v44.n128_u32[0];
      *(_QWORD *)(v32 + 4) = 9;
      *(_WORD *)(v32 + 12) = 2048;
      *(_QWORD *)(v32 + 14) = v27;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "More than %ld shared secrets - leaving them orphaned for later cleanup. Count: %ld.", (uint8_t *)v32, 0x16u);
      v33 = v32;
      a3 = v45;
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    goto LABEL_20;
  }
  v14 = sub_10001A9A8(&qword_1011093D0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = a3 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  swift_bridgeObjectRetain(a3);
  while (1)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v16 + *(int *)(v14 + 48) + 8));
    sub_100ADE1D4(v16);
    if (v5)
      return swift_bridgeObjectRelease();
    v16 += v17;
    if (!--v13)
    {
      swift_bridgeObjectRelease();
      v10 = v55;
      goto LABEL_6;
    }
  }
}

uint64_t sub_1005AC344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t result;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v37;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(type metadata accessor for MemberSharingCircle(0) + 36);
  v9 = *(_QWORD **)(a1 + v8);
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    v32 = v8;
    v33 = a1;
    v11 = *(_QWORD *)(sub_10001A9A8(&qword_1011093D0) - 8);
    v12 = a2 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v34 = *(_QWORD *)(v11 + 72);
    v13 = type metadata accessor for MemberPeerTrust(0);
    v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v35 = v13;
    v36 = v14;
    swift_bridgeObjectRetain(v9);
    v31[1] = a2;
    v15 = swift_bridgeObjectRetain(a2);
    v16 = v9;
    while (1)
    {
      v17 = v5;
      v36(v7, v12 + *(int *)(v35 + 20), v4, v15);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      v37 = v16;
      v20 = sub_100003FB0((uint64_t)v7);
      v21 = v16[2];
      v22 = (v19 & 1) == 0;
      v23 = v21 + v22;
      if (__OFADD__(v21, v22))
        break;
      v24 = v19;
      if (v16[3] >= v23)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100A9B8E0();
      }
      else
      {
        sub_100A88E4C(v23, isUniquelyReferenced_nonNull_native);
        v25 = sub_100003FB0((uint64_t)v7);
        if ((v24 & 1) != (v26 & 1))
          goto LABEL_19;
        v20 = v25;
      }
      v5 = v17;
      v16 = v37;
      if ((v24 & 1) != 0)
      {
        *(_BYTE *)(v37[7] + v20) = 1;
      }
      else
      {
        v37[(v20 >> 6) + 8] |= 1 << v20;
        ((void (*)(unint64_t, char *, uint64_t))v36)(v16[6] + *(_QWORD *)(v17 + 72) * v20, v7, v4);
        *(_BYTE *)(v16[7] + v20) = 1;
        v27 = v16[2];
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_18;
        v16[2] = v29;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v4);
      v12 += v34;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        v8 = v32;
        a1 = v33;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + v8));
    v16 = v9;
LABEL_16:
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(a1 + v8) = v16;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1005AC5C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FFD2C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004C28;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1005A96C8, v3, 0);
}

void sub_1005AC640(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_100A818F8(*(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

BOOL sub_1005AC680(uint64_t a1)
{
  uint64_t v1;

  return sub_1005A9748(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1005AC69C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010FFD4C);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004C28;
  return sub_1005A9880(a1, a2, v2);
}

uint64_t sub_1005AC708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FFD5C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1005A2BD4, v3, 0);
}

uint64_t sub_1005AC784()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1005AC7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1005ABED4(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t **)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1005AC7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FFD74);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1005A2BD4, v3, 0);
}

uint64_t sub_1005AC860()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for MemberSharingCircle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v10(v7 + v1[7], v9);
  v10(v7 + v1[8], v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005AC93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010FFD84);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100067F58;
  return sub_1005A0D10(v3, v4);
}

uint64_t sub_1005AC9B0(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t storeEnumTagSinglePayload for ShareKeysDownloadUseCase.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1005ACA0C + 4 * byte_100E44815[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005ACA40 + 4 * asc_100E44810[v4]))();
}

uint64_t sub_1005ACA40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005ACA48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1005ACA50);
  return result;
}

uint64_t sub_1005ACA5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1005ACA64);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1005ACA68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005ACA70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareKeysDownloadUseCase.Error()
{
  return &type metadata for ShareKeysDownloadUseCase.Error;
}

unint64_t sub_1005ACA90()
{
  unint64_t result;

  result = qword_1010FFD98[0];
  if (!qword_1010FFD98[0])
  {
    result = swift_getWitnessTable(byte_100E448FC, &type metadata for ShareKeysDownloadUseCase.Error);
    atomic_store(result, qword_1010FFD98);
  }
  return result;
}

uint64_t sub_1005ACAD8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[4];

  v2 = a1[11];
  v3 = a1[12];
  result = type metadata accessor for VariableGroupingSequence(319, a1[10], v2, v3);
  if (v5 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v7[2] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_getAssociatedTypeWitness(319, v3, v2, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
    if (v6 <= 0x3F)
    {
      v7[3] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 4, v7, a1 + 13);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1005ACBA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t result;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  char v40;

  v1 = v0;
  v2 = *(_QWORD **)v0;
  v3 = *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_beginAccess(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128), &v34, 33, 0);
  v5 = v2[11];
  v4 = v2[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, v5, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(&v39, AssociatedTypeWitness, AssociatedConformanceWitness);
  result = swift_endAccess(&v34);
  if (v40)
    v9 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120));
  else
    v9 = &v39;
  v10 = *v9;
  *(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120)) = v10;
  v11 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  v12 = *(_QWORD *)(v0 + v11);
  v13 = v12 + v10;
  if (__OFADD__(v12, v10))
  {
    __break(1u);
    goto LABEL_22;
  }
  if (v13 < v12)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v39 = v3;
  v14 = v2[10];
  v15 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v15);
  RandomAccessCollection<>.indices.getter(&v34, v15, WitnessTable, &protocol witness table for Int);
  v17 = v34;
  if (v35 >= v12)
    v18 = v12;
  else
    v18 = v35;
  if (v12 >= v34)
    v19 = v18;
  else
    v19 = v34;
  if (v13 > v34)
    v17 = v13;
  if (v35 >= v13)
    v20 = v17;
  else
    v20 = v35;
  v21 = *(_QWORD *)(v1 + v11);
  v22 = 0;
  if (v21 < Array.count.getter(v3, v14))
  {
    v34 = Array.subscript.getter(v19, v20, v3, v14);
    v35 = v23;
    v36 = v24;
    v37 = v25;
    v26 = type metadata accessor for ArraySlice(0, v14);
    v27 = swift_getWitnessTable((const char *)&protocol conformance descriptor for ArraySlice<A>, v26);
    v22 = Array.init<A>(_:)(&v34, v14, v26, v27);
  }
  v34 = v19;
  v35 = v20;
  v28 = sub_10001A9A8(&qword_1010FFEA0);
  v29 = sub_1005AD798();
  v38[0] = &protocol witness table for Int;
  v38[1] = v29;
  v30 = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> Range<A>, v28, v38);
  result = Collection.count.getter(v28, v30);
  v31 = *(_QWORD *)(v1 + v11);
  v32 = __OFADD__(v31, result);
  v33 = v31 + result;
  if (!v32)
  {
    *(_QWORD *)(v1 + v11) = v33;
    return v22;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_1005ACDE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v4 = type metadata accessor for VariableGroupingSequence(0, *(_QWORD *)(*(_QWORD *)v0 + 80), v3, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  v5 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v3, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v5, AssociatedTypeWitness);
  return v0;
}

uint64_t sub_1005ACE80()
{
  uint64_t v0;

  sub_1005ACDE8();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for VariableGroupingSequence.VariableGroupingSequenceIterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VariableGroupingSequence.VariableGroupingSequenceIterator);
}

uint64_t type metadata accessor for VariableGroupingSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VariableGroupingSequence);
}

uint64_t sub_1005ACEBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 40);
    return 0;
  }
  return result;
}

uint64_t *sub_1005ACF38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_1005ACFF4(_QWORD *a1, uint64_t a2)
{
  swift_bridgeObjectRelease(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t *sub_1005AD038(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_1005AD0A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_1005AD118(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_1005AD168(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1005AD1D0(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1005AD2A4 + 4 * byte_100E44970[(v9 - 1)]))();
}

void sub_1005AD314(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_100000004;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_1005AD508(uint64_t a1)
{
  return swift_getWitnessTable(byte_100E44A68, a1);
}

uint64_t sub_1005AD518@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1005ACBA0();
  *a1 = result;
  return result;
}

uint64_t **sub_1005AD540(uint64_t *a1)
{
  uint64_t v1;

  type metadata accessor for VariableGroupingSequence.VariableGroupingSequenceIterator(0, a1[2], a1[3], a1[4]);
  return sub_1005AD754(v1);
}

uint64_t sub_1005AD578@<X0>(uint64_t *a1@<X0>, uint64_t ***a2@<X8>)
{
  uint64_t v2;
  uint64_t **v5;
  uint64_t result;

  v5 = sub_1005AD540(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(a1 - 1) + 8))(v2, a1);
  *a2 = v5;
  return result;
}

uint64_t sub_1005AD5C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

uint64_t **sub_1005AD5E8(uint64_t a1)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v19 = a1;
  v3 = *v1;
  v4 = (*v1)[11];
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(a1);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v3[12];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v8, v4, &protocol requirements base descriptor for Sequence, &associated type descriptor for Sequence.Iterator);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v12 = (char *)&v18 - v11;
  *(uint64_t **)((char *)v2 + v3[14]) = 0;
  v13 = (uint64_t)v2 + (*v2)[13];
  v14 = type metadata accessor for VariableGroupingSequence(0, v3[10], v4, v8);
  v15 = v13;
  v16 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v15, v19, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16 + *(int *)(v14 + 44), v4);
  dispatch thunk of Sequence.makeIterator()(v4, v8);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v2 + (*v2)[16], v12, AssociatedTypeWitness);
  *(uint64_t **)((char *)v2 + (*v2)[15]) = 0;
  return v2;
}

uint64_t **sub_1005AD754(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = type metadata accessor for VariableGroupingSequence.VariableGroupingSequenceIterator(0, v1[10], v1[11], v1[12]);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return sub_1005AD5E8(a1);
}

unint64_t sub_1005AD798()
{
  unint64_t result;

  result = qword_1010FFEA8;
  if (!qword_1010FFEA8)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1010FFEA8);
  }
  return result;
}

uint64_t *sub_1005AD7DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v13);
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = type metadata accessor for URL(0);
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t sub_1005AD8A0(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_1005AD8F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a2 + v7;
  v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = type metadata accessor for URL(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v11(v9, v8, v10);
  return a1;
}

_QWORD *sub_1005AD990(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *sub_1005ADA4C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *sub_1005ADAB0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for URL(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_1005ADB3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005ADB48);
}

uint64_t sub_1005ADB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_1005ADBC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005ADBD0);
}

uint64_t sub_1005ADBD0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SearchpartyAccount(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FFF08;
  if (!qword_1010FFF08)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchpartyAccount);
  return result;
}

uint64_t sub_1005ADC80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E44AB8;
  v4[1] = &unk_100E44AB8;
  v4[2] = &unk_100E44AB8;
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1005ADCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005ADD04);
}

uint64_t sub_1005ADD04(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1005ADD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005ADD8C);
}

char *sub_1005ADD8C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsLostModeEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FFFA0;
  if (!qword_1010FFFA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLostModeEndPoint);
  return result;
}

void sub_1005ADE3C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  void *v6;
  id v7;
  unsigned int v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v11);
  v5._countAndFlagsBits = 0xD000000000000013;
  v5._object = (void *)0x8000000100EDC450;
  String.append(_:)(v5);
  v4(&v11, 0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v6 = (void *)qword_1011B7C08;
  v7 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v8 = objc_msgSend(v7, "isInternalBuild");

  if (v8)
  {
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v6, "stringForKey:", v9);

    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_1005AE000(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  void (*v56)(_BYTE *, uint64_t, __n128);
  __n128 v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE v69[16];
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int64_t v89;
  void (*v90)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;

  v92 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v2 = __chkstk_darwin(v92);
  v76 = &v69[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = __chkstk_darwin(v2);
  v75 = &v69[-v5];
  v6 = __chkstk_darwin(v4);
  v74 = &v69[-v7];
  __chkstk_darwin(v6);
  v91 = &v69[-v8];
  v9 = *(_QWORD *)(a1 + 16);
  v10 = _swiftEmptyArrayStorage;
  if (!v9)
    return (uint64_t)v10;
  v94 = _swiftEmptyArrayStorage;
  sub_10001CEBC(0, v9, 0);
  result = sub_10001D620(a1);
  v13 = result;
  v14 = 0;
  v15 = a1 + 64;
  v77 = a1 + 80;
  v73 = a1;
  v70 = v9;
  v71 = v12;
  v72 = a1 + 64;
  while ((v13 & 0x8000000000000000) == 0 && (uint64_t)v13 < 1 << *(_BYTE *)(a1 + 32))
  {
    if ((*(_QWORD *)(v15 + 8 * (v13 >> 6)) & (1 << v13)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
      goto LABEL_26;
    v79 = 1 << v13;
    v80 = v13 >> 6;
    v78 = v14;
    v17 = v91;
    v18 = &v91[*(int *)(v92 + 48)];
    v19 = *(_QWORD *)(a1 + 48);
    v93 = type metadata accessor for UUID(0);
    v88 = *(_QWORD **)(v93 - 8);
    v20 = v19 + v88[9] * v13;
    v90 = (void (*)(_BYTE *, uint64_t, uint64_t))v88[2];
    v90(v17, v20, v93);
    v21 = *(_QWORD *)(a1 + 56);
    v89 = v13;
    v22 = (uint64_t *)(v21 + 104 * v13);
    v23 = *v22;
    v24 = *((_BYTE *)v22 + 8);
    LODWORD(v87) = v24;
    v26 = v22[2];
    v25 = v22[3];
    v28 = v22[4];
    v27 = v22[5];
    v30 = v22[7];
    v86 = v22[6];
    v29 = v86;
    v31 = *((_BYTE *)v22 + 64);
    v32 = *((_BYTE *)v22 + 65);
    LODWORD(v85) = v32;
    v34 = v22[9];
    v33 = v22[10];
    v83 = v22[11];
    v35 = v83;
    v84 = v33;
    LODWORD(v22) = *((unsigned __int8 *)v22 + 96);
    v82 = (int)v22;
    *(_QWORD *)v18 = v23;
    v18[8] = v24;
    *((_QWORD *)v18 + 2) = v26;
    *((_QWORD *)v18 + 3) = v25;
    *((_QWORD *)v18 + 4) = v28;
    *((_QWORD *)v18 + 5) = v27;
    *((_QWORD *)v18 + 6) = v29;
    *((_QWORD *)v18 + 7) = v30;
    v18[64] = v31;
    v18[65] = v32;
    *((_QWORD *)v18 + 9) = v34;
    *((_QWORD *)v18 + 10) = v33;
    *((_QWORD *)v18 + 11) = v35;
    v18[96] = (_BYTE)v22;
    v36 = (uint64_t)v74;
    v90(v74, (uint64_t)v91, v93);
    v37 = v36 + *(int *)(v92 + 48);
    *(_QWORD *)v37 = v23;
    *(_BYTE *)(v37 + 8) = v87;
    *(_QWORD *)(v37 + 16) = v26;
    *(_QWORD *)(v37 + 24) = v25;
    *(_QWORD *)(v37 + 32) = v28;
    *(_QWORD *)(v37 + 40) = v27;
    *(_QWORD *)(v37 + 48) = v86;
    *(_QWORD *)(v37 + 56) = v30;
    *(_BYTE *)(v37 + 64) = v31;
    *(_BYTE *)(v37 + 65) = v85;
    v38 = v84;
    *(_QWORD *)(v37 + 72) = v34;
    *(_QWORD *)(v37 + 80) = v38;
    *(_QWORD *)(v37 + 88) = v83;
    *(_BYTE *)(v37 + 96) = v82;
    v39 = v75;
    sub_100005CF0(v36, (uint64_t)v75, (uint64_t *)&unk_1011002D0);
    swift_bridgeObjectRetain_n(v30, 2);
    swift_bridgeObjectRetain_n(v34, 2);
    swift_retain_n(v23, 2);
    swift_bridgeObjectRetain_n(v26, 2);
    swift_bridgeObjectRetain_n(v25, 2);
    swift_bridgeObjectRetain_n(v28, 2);
    swift_bridgeObjectRetain_n(v27, 2);
    sub_100004048((uint64_t)v91, (uint64_t *)&unk_1011002D0);
    v40 = *(int *)(v92 + 48);
    v41 = v76;
    v42 = &v76[v40];
    v43 = &v39[v40];
    v90(v76, (uint64_t)v39, v93);
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v44 = (_QWORD *)*((_QWORD *)v43 + 2);
    v45 = *((_QWORD *)v43 + 3);
    v46 = *((_QWORD *)v43 + 4);
    v47 = *((_QWORD *)v43 + 5);
    v48 = *((_QWORD *)v43 + 6);
    v49 = *((_QWORD *)v43 + 7);
    v50 = v43[64];
    v51 = v43[65];
    v53 = *((_QWORD *)v43 + 9);
    v52 = *((_QWORD *)v43 + 10);
    v54 = *((_QWORD *)v43 + 11);
    v55 = v43[96];
    LODWORD(v90) = v43[8];
    v42[8] = (_BYTE)v90;
    *((_QWORD *)v42 + 2) = v44;
    *((_QWORD *)v42 + 3) = v45;
    *((_QWORD *)v42 + 4) = v46;
    *((_QWORD *)v42 + 5) = v47;
    v85 = v52;
    v86 = v48;
    *((_QWORD *)v42 + 6) = v48;
    *((_QWORD *)v42 + 7) = v49;
    v81 = v51;
    v82 = v50;
    v42[64] = v50;
    v42[65] = v51;
    *((_QWORD *)v42 + 9) = v53;
    *((_QWORD *)v42 + 10) = v52;
    v84 = v54;
    *((_QWORD *)v42 + 11) = v54;
    LODWORD(v83) = v55;
    v42[96] = v55;
    v56 = (void (*)(_BYTE *, uint64_t, __n128))v88[1];
    v88 = v44;
    swift_bridgeObjectRetain(v44);
    v87 = v45;
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRetain(v49);
    v57 = swift_bridgeObjectRetain(v53);
    v56(v41, v93, v57);
    sub_100004048((uint64_t)v39, (uint64_t *)&unk_1011002D0);
    v10 = v94;
    result = swift_isUniquelyReferenced_nonNull_native(v94);
    if ((result & 1) == 0)
    {
      result = sub_10001CEBC(0, v10[2] + 1, 1);
      v10 = v94;
    }
    v59 = v10[2];
    v58 = v10[3];
    if (v59 >= v58 >> 1)
    {
      result = sub_10001CEBC(v58 > 1, v59 + 1, 1);
      v10 = v94;
    }
    v10[2] = v59 + 1;
    v60 = &v10[12 * v59];
    *((_BYTE *)v60 + 32) = (_BYTE)v90;
    v61 = v87;
    v60[5] = v88;
    v60[6] = v61;
    v60[7] = v46;
    v60[8] = v47;
    v60[9] = v86;
    v60[10] = v49;
    *((_BYTE *)v60 + 88) = v82;
    *((_BYTE *)v60 + 89) = v81;
    v62 = v85;
    v60[12] = v53;
    v60[13] = v62;
    v60[14] = v84;
    *((_BYTE *)v60 + 120) = v83;
    a1 = v73;
    v13 = 1 << *(_BYTE *)(v73 + 32);
    if (v89 >= (uint64_t)v13)
      goto LABEL_27;
    v15 = v72;
    v63 = v80;
    v64 = *(_QWORD *)(v72 + 8 * v80);
    if ((v64 & v79) == 0)
      goto LABEL_28;
    LODWORD(v12) = v71;
    if (*(_DWORD *)(v73 + 36) != (_DWORD)v71)
      goto LABEL_29;
    v65 = v64 & (-2 << (v89 & 0x3F));
    if (v65)
    {
      v13 = __clz(__rbit64(v65)) | v89 & 0xFFFFFFFFFFFFFFC0;
      v16 = v70;
    }
    else
    {
      v66 = v80 + 1;
      v67 = (v13 + 63) >> 6;
      v16 = v70;
      if (v80 + 1 < v67)
      {
        v68 = *(_QWORD *)(v72 + 8 * v66);
        if (v68)
        {
LABEL_22:
          v13 = __clz(__rbit64(v68)) + (v66 << 6);
        }
        else
        {
          while (v67 - 2 != v63)
          {
            v68 = *(_QWORD *)(v77 + 8 * v63++);
            if (v68)
            {
              v66 = v63 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v14 = v78 + 1;
    if (v78 + 1 == v16)
      return (uint64_t)v10;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_1005AE5A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  _QWORD v32[2];
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int64_t v42;
  _QWORD *v43;

  v41 = sub_10001A9A8((uint64_t *)&unk_101108FD0);
  v3 = *(_QWORD *)(v41 - 8);
  v4 = __chkstk_darwin(v41);
  v37 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v40 = (char *)v32 - v6;
  v7 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
  v38 = *(_QWORD *)(v7 - 8);
  v39 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v32[1] = v1;
    v43 = _swiftEmptyArrayStorage;
    sub_10009B260(0, v10, 0);
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v36 = *(_QWORD *)(v3 + 72);
    v13 = type metadata accessor for UUID(0);
    v34 = *(_QWORD *)(v13 - 8);
    v35 = v13;
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    v14 = v40;
    v15 = (uint64_t)v37;
    do
    {
      v42 = v10;
      v16 = v41;
      v17 = *(int *)(v41 + 48);
      v18 = (uint64_t)v9;
      v19 = v39;
      v20 = *(int *)(v39 + 48);
      v21 = v35;
      v33(v14, v12, v35);
      v22 = *(void **)(v12 + v20);
      v23 = *(void **)(v12 + v17);
      v24 = *(int *)(v16 + 48);
      v25 = *(int *)(v19 + 48);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v15, v14, v21);
      *(_QWORD *)(v15 + v25) = v22;
      v9 = (char *)v18;
      *(_QWORD *)(v15 + v24) = v23;
      sub_10000F9B8(v15, v18, (uint64_t *)&unk_10110C6B0);
      v26 = v22;
      v27 = v23;
      sub_100004048(v15, (uint64_t *)&unk_101108FD0);
      v11 = v43;
      if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
      {
        sub_10009B260(0, v11[2] + 1, 1);
        v11 = v43;
      }
      v29 = v11[2];
      v28 = v11[3];
      v30 = v42;
      if (v29 >= v28 >> 1)
      {
        sub_10009B260(v28 > 1, v29 + 1, 1);
        v11 = v43;
      }
      v11[2] = v29 + 1;
      sub_100005CF0(v18, (uint64_t)v11+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72) * v29, (uint64_t *)&unk_10110C6B0);
      v12 += v36;
      v10 = v30 - 1;
    }
    while (v10);
  }
  return v11;
}

uint64_t sub_1005AE82C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B71C8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B71C8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100EDC5D0);
}

_QWORD *sub_1005AE8B0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v0);
  v5 = type metadata accessor for WorkItemQueue(0);
  v0[14] = 0;
  v0[15] = 0;
  UUID.init()(v5);
  v6 = WorkItemQueue.__allocating_init(name:identifier:)(0xD00000000000001DLL, 0x8000000100EDC6E0, v4);
  v0[16] = v6;
  UUID.init()(v6);
  v0[17] = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000027, 0x8000000100EDC700, v4);
  v0[18] = 0;
  v0[19] = _swiftEmptyDictionarySingleton;
  v7 = sub_10001A9A8(&qword_101100528);
  swift_allocObject(v7, 88, 7);
  v8 = sub_1005C10DC();
  v1[20] = v8;
  *(_OWORD *)(v1 + 21) = 0u;
  *(_OWORD *)(v1 + 23) = 0u;
  *((_BYTE *)v1 + 200) = 0;
  v9 = swift_allocObject(&unk_101081290, 24, 7);
  swift_weakInit(v9 + 16, v1);
  v10 = *(_QWORD *)(v8 + 40);
  v11 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 40) = sub_1005CD7F0;
  *(_QWORD *)(v8 + 48) = v9;
  sub_10001D8A8(v10, v11);
  return v1;
}

uint64_t sub_1005AEA00(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    type metadata accessor for Transaction(0);
    swift_retain(v3);
    static Transaction.asyncTask(name:block:)("LocationFetchService.onStopProcessing", 37, 2, &unk_101100538, v3);
    return swift_release_n(v3, 2);
  }
  return result;
}

uint64_t sub_1005AEA88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for UUID(0);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005AEAE0, 0, 0);
}

uint64_t sub_1005AEAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v3 = swift_allocObject(&unk_101081290, 24, 7);
  swift_weakInit(v3 + 16, v2);
  v4 = swift_retain(v3);
  UUID.init()(v4);
  v5 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101100548, v3, &unk_101100550, 0);
  swift_release(v3);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v5);
  swift_release(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005AEBAC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = a1;
  return swift_task_switch(sub_1005AEBC4, 0, 0);
}

uint64_t sub_1005AEBC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 48) = Strong;
  if (Strong)
    return swift_task_switch(sub_1005AEC3C, Strong, 0);
  else
    return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005AEC3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = v0[6];
  v2 = *(_QWORD *)(v1 + 144);
  v0[7] = v2;
  if (v2)
  {
    v3 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel() + 1);
    v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                           + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc(v3);
    v0[8] = v4;
    *v4 = v0;
    v4[1] = sub_1005AECE8;
    return v6();
  }
  else
  {
    *(_QWORD *)(v1 + 144) = 0;
    sub_1005B8E10();
    sub_1005BBEE4();
    return swift_task_switch(sub_100396274, 0, 0);
  }
}

uint64_t sub_1005AECE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 64));
  swift_release();
  return swift_task_switch(sub_1005AED48, v1, 0);
}

uint64_t sub_1005AED48()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 48) + 144) = 0;
  swift_release();
  sub_1005B8E10();
  sub_1005BBEE4();
  return swift_task_switch(sub_100396274, 0, 0);
}

uint64_t sub_1005AED94(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(dword_10110002C);
  v2[5] = v4;
  *v4 = v2;
  v4[1] = sub_1005AEE00;
  return sub_1005B975C();
}

uint64_t sub_1005AEE00()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  v2 = (_QWORD *)swift_task_alloc(dword_101100024);
  *(_QWORD *)(v1 + 48) = v2;
  *v2 = v4;
  v2[1] = sub_1000041DC;
  return sub_1005B8F08();
}

uint64_t sub_1005AEE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v4 = swift_allocObject(&unk_101081290, 24, 7);
  swift_weakInit(v4 + 16, v3);
  v5 = swift_allocObject(&unk_101081358, 113, 7);
  *(_QWORD *)(v5 + 16) = v4;
  v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)v2;
  *(_OWORD *)(v5 + 40) = v6;
  v8 = *(_OWORD *)(v2 + 48);
  v7 = *(_OWORD *)(v2 + 64);
  v9 = *(_OWORD *)(v2 + 73);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v5 + 97) = v9;
  *(_OWORD *)(v5 + 88) = v7;
  *(_OWORD *)(v5 + 72) = v8;
  swift_retain();
  v10 = sub_100012368((_QWORD *)v2);
  UUID.init()(v10);
  v11 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101100308, v5, &unk_101100310, 0);
  swift_release();
  dispatch thunk of WorkItemQueue.enqueue(_:)(v11);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005AEF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 160) = a1;
  *(_QWORD *)(v2 + 168) = a2;
  return swift_task_switch(sub_1005AEF94, 0, 0);
}

uint64_t sub_1005AEF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 160) + 16;
  swift_beginAccess(v1, v0 + 96, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 176) = Strong;
  if (!Strong)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = (_QWORD *)swift_task_alloc(dword_10110000C);
  *(_QWORD *)(v0 + 184) = v3;
  *v3 = v0;
  v3[1] = sub_1005AF01C;
  return sub_1005AF608();
}

uint64_t sub_1005AF01C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_task_switch(sub_1005AF070, v1, 0);
}

uint64_t sub_1005AF070()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  sub_1005AF31C();
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 120, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_1005AF164;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005AF164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005AF1C4, v3, 0);
}

uint64_t sub_1005AF1C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_QWORD *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 200);
    v3 = sub_1005AF218;
  }
  else
  {
    v3 = sub_1000122F8;
    v2 = 0;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1005AF218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 208) = v3;
  *v3 = v0;
  v3[1] = sub_1005AF288;
  return unsafeBlocking<A>(_:)(v3, sub_1005CC94C, v1, &type metadata for () + 1);
}

uint64_t sub_1005AF288()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 208));
  swift_release();
  return swift_task_switch(sub_1005AF2E0, *(_QWORD *)(v1 + 200), 0);
}

uint64_t sub_1005AF2E0()
{
  swift_release();
  return swift_task_switch(sub_10001E3C4, 0, 0);
}

void sub_1005AF31C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void **v16;
  void *v17;
  uint64_t v18;
  id v19;
  char *v20;
  id v21;
  NSObject *oslog;
  char v23[24];
  char v24[24];

  if (*(_QWORD *)(v0 + 192))
  {
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B71C8);
    oslog = Logger.logObject.getter(v2);
    v3 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Location monitor already started - no-op.", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

  }
  else
  {
    v5 = v0;
    *(_BYTE *)(v0 + 200) = 1;
    v6 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
    v7 = (char *)CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyNearestTenMeters, 0);
    v8 = &v7[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
    swift_beginAccess(&v7[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate], v24, 1, 0);
    *((_QWORD *)v8 + 1) = &off_101081240;
    swift_unknownObjectWeakAssign(v8, v5);
    CurrentLocationMonitor.startMonitor()();
    v9 = *(void **)(v5 + 192);
    *(_QWORD *)(v5 + 192) = v7;
    v10 = v7;

    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B71C8);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Location monitor started.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = (void **)&v10[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation];
    swift_beginAccess(&v10[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation], v23, 0, 0);
    v17 = *v16;
    if (*v16)
    {
      type metadata accessor for Transaction(0);
      v18 = swift_allocObject(&unk_101081808, 32, 7);
      *(_QWORD *)(v18 + 16) = v5;
      *(_QWORD *)(v18 + 24) = v17;
      v19 = v17;
      v20 = v10;
      v21 = v19;
      swift_retain();
      static Transaction.asyncTask(name:block:)("LocationFetchService.locationMonitorDidUpdate", 45, 2, &unk_101100520, v18);
      swift_release();

    }
    else
    {

    }
  }
}

uint64_t sub_1005AF608()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t Configuration;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1[16] = v0;
  v2 = type metadata accessor for Date(0);
  v1[17] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[18] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v4);
  v1[20] = swift_task_alloc(v4);
  v1[21] = swift_task_alloc(v4);
  Configuration = type metadata accessor for LocationFetchConfiguration(0);
  v1[22] = Configuration;
  v6 = (*(_QWORD *)(*(_QWORD *)(Configuration - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v6);
  v1[24] = swift_task_alloc(v6);
  v7 = type metadata accessor for UUID(0);
  v1[25] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[26] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[27] = swift_task_alloc(v9);
  v1[28] = swift_task_alloc(v9);
  v1[29] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[30] = swift_task_alloc(v10);
  v1[31] = swift_task_alloc(v10);
  return swift_task_switch(sub_1005AF730, v0, 0);
}

uint64_t sub_1005AF730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 128) + 144))
  {
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B71C8);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch task pending, not creating a new fetch task.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    v6 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 224);
    v7 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 192);
    v13 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 168);
    v14 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v17 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v0 + 256) = v17;
    v18 = sub_10001A9A8(&qword_1011002C8);
    *v17 = v0;
    v17[1] = sub_1005AF908;
    return unsafeBlocking<A>(_:)(v0 + 112, sub_10001E5EC, *(_QWORD *)(v0 + 128), v18);
  }
}

uint64_t sub_1005AF908()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_1005AF968, v1, 0);
}

uint64_t sub_1005AF968()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char isUniquelyReferenced_nonNull_native;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t i;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t j;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  Swift::UInt v87;
  Swift::Int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  char *k;
  Swift::UInt v97;
  Swift::Int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  double v107;
  double v108;
  id v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  void (*v115)(uint64_t, uint64_t);
  _QWORD *v116;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unsigned __int8 v132;
  unsigned __int8 v133;
  id v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  id v163[10];

  v1 = *(_QWORD *)(v0 + 112);
  v136 = *(_QWORD *)(v1 + 16);
  if (v136)
  {
    v138 = *(_QWORD *)(v0 + 112);
    v3 = *(unsigned __int8 *)(v1 + 32);
    v2 = (_QWORD *)(v1 + 32);
    v142 = v3;
    v5 = (_QWORD *)v2[1];
    v4 = v2[2];
    v7 = (_QWORD *)v2[3];
    v6 = (_QWORD *)v2[4];
    v8 = v2[6];
    v135 = v2;
    v9 = v2[8];
    v10 = qword_1010E9D20;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v7);
    v145 = v6;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    if (v10 != -1)
      goto LABEL_78;
LABEL_3:
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B71C8);
    *(_QWORD *)(v0 + 264) = v12;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Scheduling next fetch.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    v16 = *(_QWORD *)(v0 + 208);
    v137 = *(_QWORD *)(v0 + 176);

    v134 = (id)objc_opt_self(NSBundle);
    v17 = 0;
    v158 = v16;
    while (1)
    {
      if (v17 >= *(_QWORD *)(v138 + 16))
      {
        __break(1u);
LABEL_78:
        swift_once(&qword_1010E9D20, sub_1005AE82C);
        goto LABEL_3;
      }
      v144 = v7;
      v141 = v17;
      v21 = (unsigned __int8 *)&v135[12 * v17];
      v139 = *v21;
      v22 = *((_QWORD *)v21 + 1);
      v23 = *((_QWORD *)v21 + 2);
      v24 = *((_QWORD *)v21 + 3);
      v25 = *((_QWORD *)v21 + 4);
      v132 = v21[57];
      v133 = v21[56];
      v26 = *((_QWORD *)v21 + 8);
      *(_QWORD *)(v0 + 272) = v26;
      v27 = *((_QWORD *)v21 + 6);
      v28 = v5;
      v29 = v5[2];
      v147 = v22;
      v148 = v28;
      v30 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      v143 = v24;
      swift_bridgeObjectRetain(v24);
      v146 = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v27);
      v140 = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v148);
      v155 = v30;
      v160 = (_QWORD *)Set.init(minimumCapacity:)(v29);
      v151 = v29;
      if (v29)
      {
        v31 = 0;
        v149 = (uint64_t)v148
             + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
        v32 = *(_QWORD *)(v16 + 72);
        v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
        while (1)
        {
          v39 = *(_QWORD *)(v0 + 248);
          v40 = *(_QWORD *)(v0 + 200);
          v33(v39, v149 + v31 * v32, v40);
          v156 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
          v156(v39, 0, 1, v40);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v39, 1, v40) == 1)
            break;
          v153 = v31;
          v41 = *(_QWORD *)(v0 + 200);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(v16 + 32))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 248), v41);
          v42 = v160[5];
          swift_bridgeObjectRetain(v160);
          v43 = dispatch thunk of Hashable._rawHashValue(seed:)(v42, v41, v155);
          v44 = -1 << *((_BYTE *)v160 + 32);
          v45 = v43 & ~v44;
          if (((*(_QWORD *)((char *)v160 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v45) & 1) != 0)
          {
            v46 = ~v44;
            while (1)
            {
              v48 = *(_QWORD *)(v0 + 224);
              v47 = *(_QWORD *)(v0 + 232);
              v49 = *(_QWORD *)(v0 + 200);
              v33(v48, v160[6] + v45 * v32, v49);
              v50 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              LOBYTE(v47) = dispatch thunk of static Equatable.== infix(_:_:)(v48, v47, v49, v50);
              v38 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
              v38(v48, v49);
              if ((v47 & 1) != 0)
                break;
              v45 = (v45 + 1) & v46;
              v16 = v158;
              if (((*(_QWORD *)((char *)v160 + ((v45 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v45) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
LABEL_11:
            v35 = *(_QWORD *)(v0 + 224);
            v34 = *(_QWORD *)(v0 + 232);
            v36 = *(_QWORD *)(v0 + 200);
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v160);
            v33(v35, v34, v36);
            v163[0] = v160;
            sub_100A1CCB8(v35, v45, isUniquelyReferenced_nonNull_native);
            v160 = v163[0];
            swift_bridgeObjectRelease();
            v38 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
          }
          v31 = v153 + 1;
          v38(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 200));
          v16 = v158;
          if (v153 + 1 == v151)
            goto LABEL_21;
        }
      }
      else
      {
        v156 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
LABEL_21:
        v156(*(_QWORD *)(v0 + 248), 1, 1, *(_QWORD *)(v0 + 200));
      }
      swift_bridgeObjectRelease();
      v152 = *(_QWORD *)(v147 + 16);
      if (v152)
      {
        v150 = v147 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
        v51 = swift_bridgeObjectRetain(v147);
        v52 = 0;
        v53 = *(_QWORD *)(v16 + 72);
        v54 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v16 + 16);
        while (1)
        {
          v60 = *(_QWORD *)(v0 + 240);
          v61 = *(_QWORD *)(v0 + 200);
          v54(v60, v150 + v52 * v53, v61, v51);
          v156(v60, 0, 1, v61);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v60, 1, v61) == 1)
            break;
          v154 = v52;
          v62 = *(_QWORD *)(v0 + 200);
          (*(void (**)(_QWORD, _QWORD, uint64_t))(v16 + 32))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240), v62);
          v63 = v160[5];
          swift_bridgeObjectRetain(v160);
          v64 = dispatch thunk of Hashable._rawHashValue(seed:)(v63, v62, v155);
          v65 = -1 << *((_BYTE *)v160 + 32);
          v66 = v64 & ~v65;
          if (((*(_QWORD *)((char *)v160 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v66) & 1) != 0)
          {
            v67 = ~v65;
            while (1)
            {
              v68 = *(_QWORD *)(v0 + 216);
              v69 = *(_QWORD *)(v0 + 224);
              v70 = *(_QWORD *)(v0 + 200);
              ((void (*)(uint64_t, unint64_t, uint64_t))v54)(v69, v160[6] + v66 * v53, v70);
              v71 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              LOBYTE(v68) = dispatch thunk of static Equatable.== infix(_:_:)(v69, v68, v70, v71);
              v59 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
              v59(v69, v70);
              if ((v68 & 1) != 0)
                break;
              v66 = (v66 + 1) & v67;
              if (((*(_QWORD *)((char *)v160 + ((v66 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v66) & 1) == 0)
                goto LABEL_24;
            }
            swift_bridgeObjectRelease();
            v16 = v158;
          }
          else
          {
LABEL_24:
            v55 = *(_QWORD *)(v0 + 216);
            v56 = *(_QWORD *)(v0 + 224);
            v57 = *(_QWORD *)(v0 + 200);
            swift_bridgeObjectRelease();
            v58 = swift_isUniquelyReferenced_nonNull_native(v160);
            ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v56, v55, v57);
            v163[0] = v160;
            sub_100A1CCB8(v56, v66, v58);
            v160 = v163[0];
            swift_bridgeObjectRelease();
            v16 = v158;
            v59 = *(void (**)(uint64_t, uint64_t))(v158 + 8);
          }
          v52 = v154 + 1;
          v59(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
          if (v154 + 1 == v152)
            goto LABEL_34;
        }
      }
      else
      {
        v51 = swift_bridgeObjectRetain(v147);
LABEL_34:
        ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))v156)(*(_QWORD *)(v0 + 240), 1, 1, *(_QWORD *)(v0 + 200), v51);
      }
      swift_bridgeObjectRelease();
      v72 = v144[2];
      type metadata accessor for SPBeaconType(0);
      sub_100006204(&qword_101116A20, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_100E1DEEC);
      swift_bridgeObjectRetain(v144);
      v73 = Set.init(minimumCapacity:)(v72);
      v162 = v73;
      v74 = v144[2];
      if (v74)
      {
        for (i = 0; i != v74; ++i)
        {
          v76 = (void *)v144[i + 4];
          sub_100A0FEB0(v163, v76);

        }
        swift_bridgeObjectRelease();
        v77 = v162;
      }
      else
      {
        v77 = v73;
        swift_bridgeObjectRelease();
      }
      v78 = *(_QWORD *)(v143 + 16);
      if (v78)
      {
        swift_bridgeObjectRetain(v143);
        for (j = 0; j != v78; ++j)
        {
          v80 = *(void **)(v143 + 8 * j + 32);
          sub_100A0FEB0(v163, v80);

        }
        swift_bridgeObjectRelease();
      }
      v157 = v77;
      v81 = v145[2];
      sub_100335CC8();
      swift_bridgeObjectRetain(v145);
      v82 = Set.init(minimumCapacity:)(v81);
      v83 = (_BYTE *)v82;
      v84 = v145[2];
      if (v84)
      {
        v85 = 0;
        v86 = (char *)(v82 + 56);
        while (1)
        {
          v87 = *((unsigned __int8 *)v145 + v85++ + 32);
          Hasher.init(_seed:)(v163);
          Hasher._combine(_:)(v87);
          v88 = Hasher._finalize()();
          v89 = -1 << v83[32];
          v90 = v88 & ~v89;
          if (((*(_QWORD *)&v86[(v90 >> 3) & 0xFFFFFFFFFFFFF8] >> v90) & 1) == 0)
            goto LABEL_53;
          v91 = *((_QWORD *)v83 + 6);
          if (*(unsigned __int8 *)(v91 + v90) == (_DWORD)v87)
          {
LABEL_46:
            if (v85 == v84)
              break;
          }
          else
          {
            v92 = ~v89;
            while (1)
            {
              v90 = (v90 + 1) & v92;
              if (((*(_QWORD *)&v86[(v90 >> 3) & 0xFFFFFFFFFFFFF8] >> v90) & 1) == 0)
                break;
              if (*(unsigned __int8 *)(v91 + v90) == (_DWORD)v87)
                goto LABEL_46;
            }
LABEL_53:
            v93 = swift_isUniquelyReferenced_nonNull_native(v83);
            v163[0] = v83;
            sub_100A22C84(v87, v90, v93);
            v83 = v163[0];
            swift_bridgeObjectRelease();
            if (v85 == v84)
              break;
            v86 = v83 + 56;
          }
        }
      }
      swift_bridgeObjectRelease();
      v94 = *(_QWORD *)(v146 + 16);
      if (!v94)
        goto LABEL_67;
      swift_bridgeObjectRetain(v146);
      v95 = 0;
      for (k = v83 + 56; ; k = v83 + 56)
      {
        while (1)
        {
          v97 = *(unsigned __int8 *)(v146 + 32 + v95++);
          Hasher.init(_seed:)(v163);
          Hasher._combine(_:)(v97);
          v98 = Hasher._finalize()();
          v99 = -1 << v83[32];
          v100 = v98 & ~v99;
          if (((*(_QWORD *)&k[(v100 >> 3) & 0xFFFFFFFFFFFFF8] >> v100) & 1) == 0)
            goto LABEL_64;
          v101 = *((_QWORD *)v83 + 6);
          if (*(unsigned __int8 *)(v101 + v100) != (_DWORD)v97)
            break;
LABEL_57:
          if (v95 == v94)
            goto LABEL_66;
        }
        v102 = ~v99;
        while (1)
        {
          v100 = (v100 + 1) & v102;
          if (((*(_QWORD *)&k[(v100 >> 3) & 0xFFFFFFFFFFFFF8] >> v100) & 1) == 0)
            break;
          if (*(unsigned __int8 *)(v101 + v100) == (_DWORD)v97)
            goto LABEL_57;
        }
LABEL_64:
        v103 = swift_isUniquelyReferenced_nonNull_native(v83);
        v163[0] = v83;
        sub_100A22C84(v97, v100, v103);
        v83 = v163[0];
        swift_bridgeObjectRelease();
        if (v95 == v94)
          break;
      }
LABEL_66:
      swift_bridgeObjectRelease();
LABEL_67:
      v105 = *(_QWORD *)(v0 + 184);
      v104 = *(_QWORD *)(v0 + 192);
      v106 = v142;
      sub_100C91CF0(v142);
      v107 = *(double *)(v104 + *(int *)(v137 + 32));
      sub_1000126B0(v104, type metadata accessor for LocationFetchConfiguration);
      sub_100C91CF0(v139);
      v108 = *(double *)(v105 + *(int *)(v137 + 32));
      sub_1000126B0(v105, type metadata accessor for LocationFetchConfiguration);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v108 < v107)
        v106 = v139;
      v142 = v106;
      v5 = sub_100508DAC((uint64_t)v160);
      *(_QWORD *)(v0 + 280) = v5;
      swift_bridgeObjectRelease();
      v7 = sub_100509638(v157);
      *(_QWORD *)(v0 + 288) = v7;
      swift_bridgeObjectRelease();
      v145 = sub_10050955C((uint64_t)v83);
      *(_QWORD *)(v0 + 296) = v145;
      swift_bridgeObjectRelease();
      v109 = objc_msgSend(v134, "mainBundle");
      v110 = objc_msgSend(v109, "bundleIdentifier");

      if (v110)
      {
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v110);
        v20 = v19;

      }
      else
      {
        v18 = 0;
        v20 = 0;
      }
      v16 = v158;
      *(_QWORD *)(v0 + 304) = v20;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v141 + 1;
      if (v141 + 1 == v136)
      {
        v111 = *(_QWORD *)(v0 + 192);
        v112 = v20;
        v113 = *(_QWORD *)(v0 + 160);
        v159 = *(_QWORD *)(v0 + 144);
        v161 = *(_QWORD *)(v0 + 136);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v0 + 16) = v142;
        *(_QWORD *)(v0 + 24) = v5;
        *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
        *(_QWORD *)(v0 + 40) = v7;
        *(_QWORD *)(v0 + 48) = v145;
        *(_QWORD *)(v0 + 56) = v18;
        *(_QWORD *)(v0 + 64) = v112;
        *(_BYTE *)(v0 + 72) = v133;
        *(_BYTE *)(v0 + 73) = v132;
        *(_QWORD *)(v0 + 88) = 0;
        *(_QWORD *)(v0 + 96) = 0;
        *(_QWORD *)(v0 + 80) = v140;
        *(_BYTE *)(v0 + 104) = 1;
        static Date.trustedNow.getter(v113);
        sub_100C91CF0(v142);
        v114 = *(double *)(v111 + *(int *)(v137 + 32));
        sub_1000126B0(v111, type metadata accessor for LocationFetchConfiguration);
        Date.addingTimeInterval(_:)(v114);
        v115 = *(void (**)(uint64_t, uint64_t))(v159 + 8);
        *(_QWORD *)(v0 + 312) = v115;
        v115(v113, v161);
        v116 = (_QWORD *)swift_task_alloc(dword_101100014);
        *(_QWORD *)(v0 + 320) = v116;
        *v116 = v0;
        v116[1] = sub_1005B0748;
        return sub_1005B0998(*(_QWORD *)(v0 + 168), v0 + 16);
      }
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v118 = type metadata accessor for Logger(0);
  v119 = sub_10001A9E8(v118, (uint64_t)qword_1011B71C8);
  v120 = Logger.logObject.getter(v119);
  v121 = static os_log_type_t.default.getter(v120);
  if (os_log_type_enabled(v120, v121))
  {
    v122 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v122 = 0;
    _os_log_impl((void *)&_mh_execute_header, v120, v121, "Not scheduling next fetch. No subscriptions.", v122, 2u);
    swift_slowDealloc(v122, -1, -1);
  }

  v123 = *(_QWORD *)(v0 + 240);
  v125 = *(_QWORD *)(v0 + 224);
  v124 = *(_QWORD *)(v0 + 232);
  v126 = *(_QWORD *)(v0 + 216);
  v128 = *(_QWORD *)(v0 + 184);
  v127 = *(_QWORD *)(v0 + 192);
  v130 = *(_QWORD *)(v0 + 160);
  v129 = *(_QWORD *)(v0 + 168);
  v131 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B0748()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1005B07F0, v1, 0);
}

uint64_t sub_1005B07F0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 16))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    *(double *)(v0 + 120) = Date.timeIntervalSinceNow.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v7 + 4, v7 + 12);
    v4(v5, v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Next fetch scheduled in %f seconds.", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    v8 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    v9 = *(_QWORD *)(v0 + 152);
    v10 = *(_QWORD *)(v0 + 136);

    v8(v9, v10);
  }
  (*(void (**)(_QWORD, _QWORD))(v0 + 312))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 136));
  v11 = *(_QWORD *)(v0 + 240);
  v13 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  v14 = *(_QWORD *)(v0 + 216);
  v16 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B0998(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[8] = v7;
  v3[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005B0A20, v2, 0);
}

uint64_t sub_1005B0A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 32);
  v27 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_1010817B8, v11 + 89, v8 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v9, v1, v3);
  *(_QWORD *)(v12 + v10) = v5;
  v13 = (_OWORD *)(v12 + v11);
  v14 = *(_OWORD *)(v6 + 16);
  *v13 = *(_OWORD *)v6;
  v13[1] = v14;
  v16 = *(_OWORD *)(v6 + 48);
  v15 = *(_OWORD *)(v6 + 64);
  v17 = *(_OWORD *)(v6 + 32);
  *(_OWORD *)((char *)v13 + 73) = *(_OWORD *)(v6 + 73);
  v13[3] = v16;
  v13[4] = v15;
  v13[2] = v17;
  swift_retain();
  v18 = sub_100012368((_QWORD *)v6);
  UUID.init()(v18);
  v19 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v27, &unk_1011004E8, v12, &unk_1011004F0, 0);
  *(_QWORD *)(v0 + 80) = v19;
  v20 = *(_QWORD *)(v5 + 144);
  *(_QWORD *)(v0 + 88) = v20;
  if (v20)
  {
    v21 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel() + 1);
    v28 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                            + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
    swift_retain();
    v22 = (_QWORD *)swift_task_alloc(v21);
    *(_QWORD *)(v0 + 96) = v22;
    *v22 = v0;
    v22[1] = sub_1005B0BF4;
    return v28();
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 40);
    *(_QWORD *)(*(_QWORD *)(v0 + 32) + 144) = v19;
    v26 = swift_retain();
    dispatch thunk of WorkItemQueue.enqueue(_:)(v26);
    swift_release();
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005B0BF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_1005B0C54, v1, 0);
}

uint64_t sub_1005B0C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v2 + 144);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v2 + 144) = v4;
  swift_retain(v4);
  swift_release(v3);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v4);
  swift_release(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B0CD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 72);
  v3 = *(_QWORD *)(*v1 + 80);
  v5 = *(_QWORD *)(*v1 + 56);
  v6 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  if (v0)
  {
    v7 = sub_1005B0EE0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = type metadata accessor for WorkItemQueue.WorkItem(0);
    *(_QWORD *)(v2 + 96) = v10;
    v11 = sub_100006204(&qword_1011004F8, (uint64_t (*)(uint64_t))&type metadata accessor for WorkItemQueue.WorkItem, (uint64_t)&protocol conformance descriptor for WorkItemQueue.WorkItem);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v10, v11);
    v14 = v13;
    v7 = sub_1005B0DA4;
    v8 = v12;
    v9 = v14;
  }
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_1005B0DA4()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 104) = dispatch thunk of WorkItemQueue.WorkItem.isCancelled.getter() & 1;
  return swift_task_switch(sub_1005B0DE8, 0, 0);
}

uint64_t sub_1005B0DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_BYTE *)(v0 + 104) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + 40);
    v1 = *(_QWORD *)(v0 + 48);
    v3 = *(_QWORD *)(v0 + 32);
    v4 = swift_allocObject(&unk_1010817E0, 113, 7);
    *(_QWORD *)(v4 + 16) = v3;
    v5 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 24) = *(_OWORD *)v2;
    *(_OWORD *)(v4 + 40) = v5;
    v7 = *(_OWORD *)(v2 + 48);
    v6 = *(_OWORD *)(v2 + 64);
    v8 = *(_OWORD *)(v2 + 73);
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v4 + 97) = v8;
    *(_OWORD *)(v4 + 88) = v6;
    *(_OWORD *)(v4 + 72) = v7;
    swift_retain(v3);
    v9 = sub_100012368((_QWORD *)v2);
    UUID.init()(v9);
    v10 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101100508, v4, &unk_101100510, 0);
    dispatch thunk of WorkItemQueue.enqueue(_:)(v10);
    swift_release(v10);
  }
  v11 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B0EE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B0F20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10110001C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100030654;
  v5[16] = a2;
  v5[17] = a1;
  return swift_task_switch(sub_1005B0F9C, a1, 0);
}

uint64_t sub_1005B0F84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 128) = a1;
  *(_QWORD *)(v2 + 136) = v1;
  return swift_task_switch(sub_1005B0F9C, v1, 0);
}

uint64_t sub_1005B0F9C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = sub_10001A9A8(&qword_1011002C8);
  *v2 = v0;
  v2[1] = sub_1005B1018;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10001E5EC, *(_QWORD *)(v0 + 136), v3);
}

uint64_t sub_1005B1018()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_release();
  return swift_task_switch(sub_1005B1074, v1, 0);
}

uint64_t sub_1005B1074()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  v1 = v0[15];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v0[15]);
    v25 = v1;
    v3 = (uint64_t *)(v1 + 48);
    while (1)
    {
      v5 = v3[4];
      if (v5)
      {
        v6 = *(v3 - 1);
        v7 = *v3;
        v9 = v3[1];
        v8 = v3[2];
        v10 = v3[3];
        v11 = v3[6];
        if (v10 == 0xD000000000000017 && v5 == 0x8000000100EDC5B0)
          break;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v3[3], v3[4], 0xD000000000000017, 0x8000000100EDC5B0, 0) & 1) != 0)
          break;
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v5);
        swift_bridgeObjectRetain(v11);
        v4 = sub_100C93200(v10, v5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v4)
          break;
      }
      v3 += 12;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        v0 = v26;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease_n(v25, 2);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B71C8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Location fetch service running fetch task - fetching locations.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    sub_1005AF31C();
    v17 = (_QWORD *)swift_task_alloc(dword_10110002C);
    v26[19] = v17;
    *v17 = v26;
    v17[1] = sub_1005B1578;
    return sub_1005B975C();
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B71C8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Location fetch service fetch task running while all clients suspended - not fetching locations.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    sub_1005B8E10();
    sub_1005BBEE4();
    *(_QWORD *)(v0[17] + 144) = 0;
    swift_release();
    v24 = (_QWORD *)swift_task_alloc(dword_10110000C);
    v0[26] = v24;
    *v24 = v0;
    v24[1] = sub_1005B1AA8;
    return sub_1005AF608();
  }
}

uint64_t sub_1005B1578()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_1005B15D0, v1, 0);
}

uint64_t sub_1005B15D0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 160) = v2;
    *v2 = v0;
    v2[1] = sub_1005B16BC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B16BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B171C, v3, 0);
}

uint64_t sub_1005B171C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t (*v8)(_QWORD);

  v1 = v0[21];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
    return swift_task_switch(sub_1005B1814, v0[21], 0);
  v3 = (_QWORD *)v0[17];
  v4 = (int *)v3[14];
  v0[23] = v4;
  if (v4)
  {
    v0[24] = v3[15];
    v5 = v4[1];
    v8 = (uint64_t (*)(_QWORD))((char *)v4 + *v4);
    swift_retain();
    v6 = (_QWORD *)swift_task_alloc(v5);
    v0[25] = v6;
    *v6 = v0;
    v6[1] = sub_1005B19E0;
    return v8(v0[16]);
  }
  else
  {
    v3[18] = 0;
    swift_release();
    v7 = (_QWORD *)swift_task_alloc(dword_10110000C);
    v0[26] = v7;
    *v7 = v0;
    v7[1] = sub_1005B1AA8;
    return sub_1005AF608();
  }
}

uint64_t sub_1005B1814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 176) = v3;
  *v3 = v0;
  v3[1] = sub_1005B1884;
  return unsafeBlocking<A>(_:)(v3, sub_1005CC94C, v1, &type metadata for () + 1);
}

uint64_t sub_1005B1884()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 176));
  swift_release();
  return swift_task_switch(sub_1005B18DC, *(_QWORD *)(v1 + 168), 0);
}

uint64_t sub_1005B18DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release();
  return swift_task_switch(sub_1005B191C, v1, 0);
}

uint64_t sub_1005B191C()
{
  _QWORD *v0;
  _QWORD *v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v7)(_QWORD);

  v1 = (_QWORD *)v0[17];
  v2 = (int *)v1[14];
  v0[23] = v2;
  if (v2)
  {
    v0[24] = v1[15];
    v3 = v2[1];
    v7 = (uint64_t (*)(_QWORD))((char *)v2 + *v2);
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc(v3);
    v0[25] = v4;
    *v4 = v0;
    v4[1] = sub_1005B19E0;
    return v7(v0[16]);
  }
  else
  {
    v1[18] = 0;
    swift_release();
    v6 = (_QWORD *)swift_task_alloc(dword_10110000C);
    v0[26] = v6;
    *v6 = v0;
    v6[1] = sub_1005B1AA8;
    return sub_1005AF608();
  }
}

uint64_t sub_1005B19E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  sub_10001D8A8(v2, v1);
  return swift_task_switch(sub_1005B1A50, v3, 0);
}

uint64_t sub_1005B1A50()
{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(*(_QWORD *)(v0 + 136) + 144) = 0;
  swift_release();
  v1 = (_QWORD *)swift_task_alloc(dword_10110000C);
  *(_QWORD *)(v0 + 208) = v1;
  *v1 = v0;
  v1[1] = sub_1005B1AA8;
  return sub_1005AF608();
}

uint64_t sub_1005B1AA8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 208));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1005B1AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15[2];
  _BYTE v16[24];

  v6 = type metadata accessor for BeaconEstimatedLocation(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v16, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v11 = result;
    sub_100030784(a2, (uint64_t)v15);
    sub_10005972C(a1, (uint64_t)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeaconEstimatedLocation);
    v12 = *(unsigned __int8 *)(v7 + 80);
    v13 = (v12 + 64) & ~v12;
    v14 = swift_allocObject(&unk_1010813D0, v13 + v8, v12 | 7);
    *(_QWORD *)(v14 + 16) = v11;
    sub_10000F9FC(v15, v14 + 24);
    sub_1000126EC((uint64_t)v9, v14 + v13, type metadata accessor for BeaconEstimatedLocation);
    swift_retain();
    unsafeFromAsyncTask<A>(_:)(&type metadata for (), &unk_101100350, v14, &type metadata for () + 1);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1005B1C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[128] = a4;
  v4[127] = a3;
  v4[126] = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_101108FD0);
  v4[129] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[130] = v7;
  v4[131] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  v4[132] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BeaconEstimatedLocation(0);
  v4[133] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[134] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[135] = swift_task_alloc(v11);
  v4[136] = swift_task_alloc(v11);
  v4[137] = swift_task_alloc(v11);
  v4[138] = swift_task_alloc(v11);
  v4[139] = swift_task_alloc(v11);
  v4[140] = swift_task_alloc(v11);
  v4[141] = swift_task_alloc(v11);
  v4[142] = swift_task_alloc(v11);
  v4[143] = swift_task_alloc(v11);
  v4[144] = swift_task_alloc(v11);
  v4[145] = swift_task_alloc(v11);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[146] = swift_task_alloc(v12);
  v4[147] = swift_task_alloc(v12);
  v4[148] = swift_task_alloc(v12);
  v13 = type metadata accessor for UUID(0);
  v4[149] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[150] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v4[151] = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[152] = swift_task_alloc(v16);
  v4[153] = swift_task_alloc(v16);
  v4[154] = swift_task_alloc(v16);
  v4[155] = swift_task_alloc(v16);
  v4[156] = swift_task_alloc(v16);
  v4[157] = swift_task_alloc(v16);
  v17 = type metadata accessor for Date(0);
  v4[158] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[159] = v18;
  v4[160] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005B1E30, a2, 0);
}

uint64_t sub_1005B1E30()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 1576) = *(_BYTE *)(*(_QWORD *)(v0 + 1008) + 200);
  return swift_task_switch(sub_1005B1E50, 0, 0);
}

uint64_t sub_1005B1E50()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (*(_BYTE *)(v0 + 1576) == 1)
    return swift_task_switch(sub_1005B2210, *(_QWORD *)(v0 + 1008), 0);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v2 = *(_QWORD *)(v0 + 1016);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B71C8);
  v4 = sub_100030784(v2, v0 + 488);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 1248);
    v37 = *(_QWORD *)(v0 + 1200);
    v8 = *(_QWORD *)(v0 + 1192);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v40 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 952) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 952, v0 + 960, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 520);
    sub_10001AA44((_QWORD *)(v0 + 488), v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v11);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v8, v13);
    v16 = v15;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v7, v8);
    *(_QWORD *)(v0 + 912) = sub_100016940(v14, v16, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 912, v0 + 920, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 488));
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Ignoring beacon location updates while not processing - beacon: %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 488));
  }

  v17 = *(_QWORD *)(v0 + 1256);
  v18 = *(_QWORD *)(v0 + 1248);
  v19 = *(_QWORD *)(v0 + 1240);
  v20 = *(_QWORD *)(v0 + 1232);
  v21 = *(_QWORD *)(v0 + 1224);
  v22 = *(_QWORD *)(v0 + 1216);
  v23 = *(_QWORD *)(v0 + 1184);
  v24 = *(_QWORD *)(v0 + 1176);
  v25 = *(_QWORD *)(v0 + 1168);
  v26 = *(_QWORD *)(v0 + 1160);
  v27 = *(_QWORD *)(v0 + 1152);
  v28 = *(_QWORD *)(v0 + 1144);
  v29 = *(_QWORD *)(v0 + 1136);
  v30 = *(_QWORD *)(v0 + 1128);
  v31 = *(_QWORD *)(v0 + 1120);
  v32 = *(_QWORD *)(v0 + 1112);
  v33 = *(_QWORD *)(v0 + 1104);
  v34 = *(_QWORD *)(v0 + 1096);
  v35 = *(_QWORD *)(v0 + 1088);
  v36 = *(_QWORD *)(v0 + 1080);
  v38 = *(_QWORD *)(v0 + 1056);
  v39 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B2210()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 888, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 248, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 272))
  {
    sub_10000F9FC((__int128 *)(v0 + 248), v0 + 168);
    sub_10001AA44((_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 192));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 1288) = v2;
    *v2 = v0;
    v2[1] = sub_1005B22FC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B22FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1288);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  *(_QWORD *)(*(_QWORD *)v1 + 1296) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B235C, v3, 0);
}

uint64_t sub_1005B235C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_QWORD *)(v0 + 1296);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 168));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 1296);
    v3 = sub_1005B23B0;
  }
  else
  {
    v3 = sub_1005B2DD0;
    v2 = 0;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1005B23B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 1296);
  sub_100030784(*(_QWORD *)(v0 + 1016), v0 + 448);
  v2 = swift_allocObject(&unk_1010813F8, 64, 7);
  *(_QWORD *)(v0 + 1304) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 448), v2 + 24);
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 1312) = v4;
  *v4 = v0;
  v4[1] = sub_1005B246C;
  return unsafeBlocking<A>(_:)(v0 + 976, sub_100335F8C, v2, &type metadata for Double);
}

uint64_t sub_1005B246C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1312));
  swift_release();
  return swift_task_switch(sub_1005B24C8, *(_QWORD *)(v1 + 1296), 0);
}

uint64_t sub_1005B24C8()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 1320) = *(_QWORD *)(v0 + 976);
  return swift_task_switch(sub_1005B250C, 0, 0);
}

uint64_t sub_1005B250C()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t inited;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v1 = *(double *)(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1064);
  v3 = *(_QWORD *)(v0 + 1024);
  v4 = *(_QWORD **)(v0 + 1016);
  v5 = sub_10001A9A8(&qword_1010ED230);
  inited = swift_initStackObject(v5, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 56) = v2;
  *(_QWORD *)(inited + 64) = &off_1010634C0;
  v7 = sub_100018F08((_QWORD *)(inited + 32));
  sub_10005972C(v3, (uint64_t)v7, type metadata accessor for BeaconEstimatedLocation);
  v8 = v4[3];
  v9 = v4[4];
  sub_10001AA44(v4, v8);
  v10 = sub_100C62334(v8, v9);
  v11 = sub_100C63B1C(inited, v10, v1);
  *(_QWORD *)(v0 + 1328) = v11;
  swift_setDeallocating(inited);
  v12 = sub_10001A9A8(&qword_101100360);
  swift_arrayDestroy(inited + 32, 1, v12);
  if (v11)
  {
    v13 = *(_QWORD *)(v0 + 1280);
    v14 = *(_QWORD *)(v0 + 1272);
    v98 = *(_QWORD *)(v0 + 1264);
    v101 = *(_QWORD *)(v0 + 1200);
    v104 = *(_QWORD *)(v0 + 1192);
    v15 = *(_QWORD *)(v0 + 1184);
    v16 = *(_QWORD *)(v0 + 1064);
    v17 = *(_QWORD *)(v0 + 1024);
    v18 = *(_QWORD **)(v0 + 1016);
    v19 = objc_msgSend(v11, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

    objc_msgSend(v11, "coordinate");
    v21 = v20;
    objc_msgSend(v11, "coordinate");
    v23 = v22;
    objc_msgSend(v11, "horizontalAccuracy");
    v25 = v24;
    v26 = *(int *)(v16 + 44);
    *(_DWORD *)(v0 + 1568) = v26;
    v27 = (void *)sub_100C63E28(*(_BYTE *)(v17 + v26));
    v28 = objc_allocWithZone((Class)SPBeaconLocation);
    v29 = v27;
    isa = Date._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)(v0 + 1336) = objc_msgSend(v28, "initWithTimestamp:latitude:longitude:horizontalAccuracy:source:", isa, v29, v21, v23, v25);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v98);
    v32 = v4[3];
    v31 = v4[4];
    sub_10001AA44(v18, v32);
    (*(void (**)(uint64_t, uint64_t))(v31 + 192))(v32, v31);
    v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
    *(_QWORD *)(v0 + 1344) = v33;
    if (v33(v15, 1, v104) != 1)
    {
      v66 = *(_QWORD *)(v0 + 1256);
      v67 = *(_QWORD *)(v0 + 1192);
      v68 = *(_QWORD *)(v0 + 1184);
      v69 = *(_QWORD *)(v0 + 1008);
      v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 32);
      *(_QWORD *)(v0 + 1352) = v70;
      v70(v66, v68, v67);
      return swift_task_switch(sub_1005B314C, v69, 0);
    }
    v34 = (__int128 *)(v0 + 568);
    sub_100004048(*(_QWORD *)(v0 + 1184), &qword_1010ED860);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v35 = *(_QWORD *)(v0 + 1016);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B71C8);
    v37 = sub_100030784(v35, v0 + 528);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.info.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = *(_QWORD *)(v0 + 1248);
      v99 = *(_QWORD *)(v0 + 1200);
      v41 = *(_QWORD *)(v0 + 1192);
      v42 = swift_slowAlloc(22, -1);
      v43 = swift_slowAlloc(32, -1);
      v106 = v43;
      *(_DWORD *)v42 = 141558275;
      *(_QWORD *)(v0 + 968) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 968, v0 + 976, v42 + 4, v42 + 12);
      *(_WORD *)(v42 + 12) = 2081;
      v44 = *(_QWORD *)(v0 + 552);
      v45 = *(_QWORD *)(v0 + 560);
      sub_10001AA44((_QWORD *)(v0 + 528), v44);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v45 + 8) + 8) + 32))(v44);
      v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v41, v46);
      v49 = v48;
      v50 = v40;
      v34 = (__int128 *)(v0 + 568);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v50, v41);
      *(_QWORD *)(v0 + 960) = sub_100016940(v47, v49, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 960, v0 + 968, v42 + 14, v42 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
    }

    v72 = *(void **)(v0 + 1336);
    v73 = *(void **)(v0 + 1328);
    v74 = *(_QWORD *)(v0 + 1016);
    v75 = *(_QWORD *)(*(_QWORD *)(v0 + 1008) + 160);
    v76 = *(_BYTE *)(*(_QWORD *)(v0 + 1024) + *(int *)(v0 + 1568));
    type metadata accessor for Transaction(0);
    sub_100030784(v74, (uint64_t)v34);
    v77 = swift_allocObject(&unk_101081420, 73, 7);
    sub_10000F9FC(v34, v77 + 16);
    *(_QWORD *)(v77 + 56) = v75;
    *(_QWORD *)(v77 + 64) = v72;
    *(_BYTE *)(v77 + 72) = v76;
    v78 = v72;
    swift_retain();
    static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100370, v77);
    swift_release();

  }
  else
  {
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v51 = *(_QWORD *)(v0 + 1016);
    v52 = type metadata accessor for Logger(0);
    sub_10001A9E8(v52, (uint64_t)qword_1011B71C8);
    v53 = sub_100030784(v51, v0 + 288);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = *(_QWORD *)(v0 + 1248);
      v102 = *(_QWORD *)(v0 + 1200);
      v57 = *(_QWORD *)(v0 + 1192);
      v58 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(32, -1);
      v106 = v59;
      *(_DWORD *)v58 = 141558275;
      *(_QWORD *)(v0 + 992) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 992, v0 + 1000, v58 + 4, v58 + 12);
      *(_WORD *)(v58 + 12) = 2081;
      v61 = *(_QWORD *)(v0 + 312);
      v60 = *(_QWORD *)(v0 + 320);
      sub_10001AA44((_QWORD *)(v0 + 288), v61);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v60 + 8) + 8) + 32))(v61);
      v62 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v57, v62);
      v65 = v64;
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v56, v57);
      *(_QWORD *)(v0 + 984) = sub_100016940(v63, v65, &v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 984, v0 + 992, v58 + 14, v58 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 288));
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Could not produce filtered location for beacon %{private,mask.hash}s.", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 288));
    }

  }
  v79 = *(_QWORD *)(v0 + 1256);
  v80 = *(_QWORD *)(v0 + 1248);
  v81 = *(_QWORD *)(v0 + 1240);
  v82 = *(_QWORD *)(v0 + 1232);
  v83 = *(_QWORD *)(v0 + 1224);
  v84 = *(_QWORD *)(v0 + 1216);
  v85 = *(_QWORD *)(v0 + 1184);
  v86 = *(_QWORD *)(v0 + 1176);
  v87 = *(_QWORD *)(v0 + 1168);
  v88 = *(_QWORD *)(v0 + 1160);
  v89 = *(_QWORD *)(v0 + 1152);
  v90 = *(_QWORD *)(v0 + 1144);
  v91 = *(_QWORD *)(v0 + 1136);
  v92 = *(_QWORD *)(v0 + 1128);
  v93 = *(_QWORD *)(v0 + 1120);
  v94 = *(_QWORD *)(v0 + 1112);
  v95 = *(_QWORD *)(v0 + 1104);
  v96 = *(_QWORD *)(v0 + 1096);
  v97 = *(_QWORD *)(v0 + 1088);
  v100 = *(_QWORD *)(v0 + 1080);
  v103 = *(_QWORD *)(v0 + 1056);
  v105 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v100);
  swift_task_dealloc(v103);
  swift_task_dealloc(v105);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B2DD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v1 = *(_QWORD *)(v0 + 1016);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B71C8);
  v3 = sub_100030784(v1, v0 + 288);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 1248);
    v37 = *(_QWORD *)(v0 + 1200);
    v7 = *(_QWORD *)(v0 + 1192);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v40 = v9;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v0 + 992) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 992, v0 + 1000, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v11 = *(_QWORD *)(v0 + 312);
    v10 = *(_QWORD *)(v0 + 320);
    sub_10001AA44((_QWORD *)(v0 + 288), v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v6, v7);
    *(_QWORD *)(v0 + 984) = sub_100016940(v13, v15, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 984, v0 + 992, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 288));
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not produce filtered location for beacon %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 288));
  }

  v16 = *(_QWORD *)(v0 + 1256);
  v17 = *(_QWORD *)(v0 + 1248);
  v18 = *(_QWORD *)(v0 + 1240);
  v19 = *(_QWORD *)(v0 + 1232);
  v20 = *(_QWORD *)(v0 + 1224);
  v21 = *(_QWORD *)(v0 + 1216);
  v22 = *(_QWORD *)(v0 + 1184);
  v23 = *(_QWORD *)(v0 + 1176);
  v24 = *(_QWORD *)(v0 + 1168);
  v26 = *(_QWORD *)(v0 + 1160);
  v27 = *(_QWORD *)(v0 + 1152);
  v28 = *(_QWORD *)(v0 + 1144);
  v29 = *(_QWORD *)(v0 + 1136);
  v30 = *(_QWORD *)(v0 + 1128);
  v31 = *(_QWORD *)(v0 + 1120);
  v32 = *(_QWORD *)(v0 + 1112);
  v33 = *(_QWORD *)(v0 + 1104);
  v34 = *(_QWORD *)(v0 + 1096);
  v35 = *(_QWORD *)(v0 + 1088);
  v36 = *(_QWORD *)(v0 + 1080);
  v38 = *(_QWORD *)(v0 + 1056);
  v39 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B314C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 808, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 832))
  {
    sub_10000F9FC((__int128 *)(v0 + 808), v0 + 128);
    sub_10001AA44((_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 152));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 1360) = v2;
    *v2 = v0;
    v2[1] = sub_1005B31F0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B31F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1360);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  *(_QWORD *)(*(_QWORD *)v1 + 1368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B3250, v3, 0);
}

uint64_t sub_1005B3250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_QWORD *)(v0 + 1368);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 128));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 1368);
    v3 = sub_1005B32A4;
  }
  else
  {
    v3 = sub_1005B4070;
    v2 = 0;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1005B32A4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 1368);
  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1352);
  v3 = *(_QWORD *)(v0 + 1256);
  v4 = *(_QWORD *)(v0 + 1248);
  v5 = *(_QWORD *)(v0 + 1208);
  v6 = *(_QWORD *)(v0 + 1200);
  v7 = *(_QWORD *)(v0 + 1192);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 1376) = v8;
  v8(v4, v3, v7);
  LODWORD(v9) = *(_DWORD *)(v6 + 80);
  *(_DWORD *)(v0 + 1572) = v9;
  v9 = v9;
  v10 = (v9 + 24) & ~v9;
  v11 = swift_allocObject(&unk_101081448, v10 + v5, v9 | 7);
  *(_QWORD *)(v0 + 1384) = v11;
  *(_QWORD *)(v11 + 16) = v1;
  v2(v11 + v10, v4, v7);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 1392) = v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_101107010);
  *v13 = v0;
  v13[1] = sub_1005B33AC;
  return unsafeBlocking<A>(_:)(v0 + 88, sub_1005CCDC8, v11, v14);
}

uint64_t sub_1005B33AC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1392));
  swift_release();
  swift_release();
  return swift_task_switch(sub_1005B3418, 0, 0);
}

uint64_t sub_1005B3418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t (*v18)();
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  id v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  os_log_t log;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  os_log_type_t v121;
  uint64_t v122;

  if (!*(_QWORD *)(v0 + 112))
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1192));
    sub_100004048(v0 + 88, (uint64_t *)&unk_101107010);
    goto LABEL_38;
  }
  sub_10000F9FC((__int128 *)(v0 + 88), v0 + 688);
  v1 = *(_QWORD *)(v0 + 712);
  v2 = *(_QWORD *)(v0 + 720);
  sub_10001AA44((_QWORD *)(v0 + 688), v1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  *(_QWORD *)(v0 + 1400) = v3;
  v4 = *(_BYTE *)(v3 + 32);
  *(_BYTE *)(v0 + 1577) = v4;
  v5 = -1;
  v6 = -1 << v4;
  v7 = *(_QWORD *)(v3 + 56);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  *(_BYTE *)(v0 + 1578) = 0;
  v8 = v5 & v7;
  if (v8)
  {
    v9 = 0;
    v10 = __clz(__rbit64(v8));
    v11 = (v8 - 1) & v8;
    goto LABEL_6;
  }
  v19 = 63 - v6;
  if (v19 > 0x7F)
  {
    v20 = *(_QWORD *)(v3 + 64);
    if (v20)
    {
      v9 = 1;
LABEL_13:
      v11 = (v20 - 1) & v20;
      v10 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_6:
      *(_QWORD *)(v0 + 1416) = v11;
      *(_QWORD *)(v0 + 1408) = v9;
      v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344);
      v13 = *(_QWORD *)(v0 + 1200);
      v14 = *(_QWORD *)(v0 + 1192);
      v15 = *(_QWORD *)(v0 + 1176);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1376))(v15, *(_QWORD *)(v3 + 48) + *(_QWORD *)(v13 + 72) * v10, v14);
      v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      *(_QWORD *)(v0 + 1424) = v16;
      v16(v15, 0, 1, v14);
      if (v12(v15, 1, v14) != 1)
      {
        v17 = *(_QWORD *)(v0 + 1008);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1352))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1192));
        v18 = sub_1005B44D4;
        return swift_task_switch(v18, v17, 0);
      }
      goto LABEL_30;
    }
    if (v19 >= 0xC0)
    {
      v20 = *(_QWORD *)(v3 + 72);
      if (v20)
      {
        v9 = 2;
        goto LABEL_13;
      }
      if (v19 >= 0x100)
      {
        v20 = *(_QWORD *)(v3 + 80);
        if (v20)
        {
          v9 = 3;
          goto LABEL_13;
        }
        if (v19 >= 0x140)
        {
          v20 = *(_QWORD *)(v3 + 88);
          if (v20)
          {
            v9 = 4;
            goto LABEL_13;
          }
          v21 = 0;
          v22 = v19 >> 6;
          if (v22 <= 5)
            v22 = 5;
          v23 = v22 - 5;
          while (v23 != v21)
          {
            v20 = *(_QWORD *)(v3 + 96 + 8 * v21++);
            if (v20)
            {
              v9 = v21 + 4;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 56);
  v16(*(_QWORD *)(v0 + 1176), 1, 1, *(_QWORD *)(v0 + 1192));
LABEL_30:
  swift_release();
  *(_QWORD *)(v0 + 1472) = v16;
  if ((*(_BYTE *)(v0 + 1578) & 1) != 0)
  {
    v24 = *(_QWORD *)(v0 + 712);
    v25 = *(_QWORD *)(v0 + 720);
    sub_10001AA44((_QWORD *)(v0 + 688), v24);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
    *(_QWORD *)(v0 + 1480) = v26;
    v27 = *(_BYTE *)(v26 + 32);
    *(_BYTE *)(v0 + 1579) = v27;
    v28 = -1;
    v29 = -1 << v27;
    v30 = *(_QWORD *)(v26 + 56);
    if (-v29 < 64)
      v28 = ~(-1 << -(char)v29);
    *(_QWORD *)(v0 + 1488) = _swiftEmptyArrayStorage;
    v31 = v28 & v30;
    if (v31)
    {
      v32 = 0;
      v33 = __clz(__rbit64(v31));
      v34 = (v31 - 1) & v31;
LABEL_35:
      *(_QWORD *)(v0 + 1504) = v34;
      *(_QWORD *)(v0 + 1496) = v32;
      v35 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1472);
      v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344);
      v37 = *(_QWORD *)(v0 + 1192);
      v38 = *(_QWORD *)(v0 + 1168);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1376))(v38, *(_QWORD *)(v26 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1200) + 72) * v33, v37);
      v35(v38, 0, 1, v37);
      if (v36(v38, 1, v37) == 1)
        goto LABEL_66;
      v17 = *(_QWORD *)(v0 + 1008);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1352))(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1168), *(_QWORD *)(v0 + 1192));
      v18 = sub_1005B630C;
      return swift_task_switch(v18, v17, 0);
    }
    v71 = 63 - v29;
    if (v71 > 0x7F)
    {
      v72 = *(_QWORD *)(v26 + 64);
      if (v72)
      {
        v32 = 1;
LABEL_49:
        v34 = (v72 - 1) & v72;
        v33 = __clz(__rbit64(v72)) + (v32 << 6);
        goto LABEL_35;
      }
      if (v71 >= 0xC0)
      {
        v72 = *(_QWORD *)(v26 + 72);
        if (v72)
        {
          v32 = 2;
          goto LABEL_49;
        }
        if (v71 >= 0x100)
        {
          v72 = *(_QWORD *)(v26 + 80);
          if (v72)
          {
            v32 = 3;
            goto LABEL_49;
          }
          if (v71 >= 0x140)
          {
            v72 = *(_QWORD *)(v26 + 88);
            if (v72)
            {
              v32 = 4;
              goto LABEL_49;
            }
            v73 = 0;
            v74 = v71 >> 6;
            if (v74 <= 5)
              v74 = 5;
            v75 = v74 - 5;
            while (v75 != v73)
            {
              v72 = *(_QWORD *)(v26 + 96 + 8 * v73++);
              if (v72)
              {
                v32 = v73 + 4;
                goto LABEL_49;
              }
            }
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1192));
LABEL_66:
    swift_release();
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
    v77 = *(_QWORD *)(v0 + 1256);
    v78 = *(_QWORD *)(v0 + 1232);
    v79 = *(_QWORD *)(v0 + 1192);
    v80 = *(_QWORD *)(v0 + 1016);
    v81 = type metadata accessor for Logger(0);
    sub_10001A9E8(v81, (uint64_t)qword_1011B71C8);
    v76(v78, v77, v79);
    v82 = sub_100030784(v80, v0 + 848);
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.info.getter(v83);
    if (os_log_type_enabled(v83, v84))
    {
      v115 = *(_QWORD *)(v0 + 1248);
      v121 = v84;
      v85 = *(_QWORD *)(v0 + 1232);
      v113 = *(_QWORD *)(v0 + 1200);
      v86 = *(_QWORD *)(v0 + 1192);
      v87 = swift_slowAlloc(42, -1);
      v119 = swift_slowAlloc(64, -1);
      v122 = v119;
      *(_DWORD *)v87 = 141558787;
      *(_QWORD *)(v0 + 920) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v87 + 4, v87 + 12);
      *(_WORD *)(v87 + 12) = 2081;
      v110 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v88 = dispatch thunk of CustomStringConvertible.description.getter(v86, v110);
      *(_QWORD *)(v0 + 928) = sub_100016940(v88, v89, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease();
      v90 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
      v90(v85, v86);
      *(_WORD *)(v87 + 22) = 2160;
      *(_QWORD *)(v0 + 936) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v87 + 24, v87 + 32);
      *(_WORD *)(v87 + 32) = 2081;
      v91 = *(_QWORD *)(v0 + 872);
      v92 = *(_QWORD *)(v0 + 880);
      sub_10001AA44((_QWORD *)(v0 + 848), v91);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v92 + 8) + 8) + 32))(v91);
      v93 = dispatch thunk of CustomStringConvertible.description.getter(v86, v110);
      v95 = v94;
      v90(v115, v86);
      *(_QWORD *)(v0 + 944) = sub_100016940(v93, v95, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v87 + 34, v87 + 42);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
      _os_log_impl((void *)&_mh_execute_header, v83, v121, "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{private,mask.hash}s.", (uint8_t *)v87, 0x2Au);
      swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v87, -1, -1);

    }
    else
    {
      v90 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 8);
      v90(*(_QWORD *)(v0 + 1232), *(_QWORD *)(v0 + 1192));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));

    }
    *(_QWORD *)(v0 + 1544) = v90;
    v96 = *(void **)(v0 + 1336);
    v97 = *(_QWORD *)(v0 + 1016);
    v98 = *(_QWORD *)(v0 + 1008);
    sub_100030784(v0 + 688, v0 + 208);
    sub_100030784(v97, v0 + 768);
    v99 = (_QWORD *)swift_allocObject(&unk_101081470, 120, 7);
    *(_QWORD *)(v0 + 1552) = v99;
    v99[2] = v98;
    v99[3] = _swiftEmptyArrayStorage;
    sub_10000F9FC((__int128 *)(v0 + 208), (uint64_t)(v99 + 4));
    sub_10000F9FC((__int128 *)(v0 + 768), (uint64_t)(v99 + 9));
    v99[14] = v96;
    v100 = async function pointer to unsafeBlocking<A>(_:)[1];
    v101 = v96;
    swift_retain();
    v102 = (_QWORD *)swift_task_alloc(v100);
    *(_QWORD *)(v0 + 1560) = v102;
    *v102 = v0;
    v102[1] = sub_1005B72F8;
    return unsafeBlocking<A>(_:)(v102, sub_1005CCE18, v99, &type metadata for () + 1);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1192));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 688));
LABEL_38:
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v39 = *(_QWORD *)(v0 + 1016);
  v40 = type metadata accessor for Logger(0);
  sub_10001A9E8(v40, (uint64_t)qword_1011B71C8);
  v41 = sub_100030784(v39, v0 + 528);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.info.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = *(_QWORD *)(v0 + 1248);
    v117 = *(_QWORD *)(v0 + 1200);
    v45 = *(_QWORD *)(v0 + 1192);
    v46 = swift_slowAlloc(22, -1);
    v47 = swift_slowAlloc(32, -1);
    v122 = v47;
    *(_DWORD *)v46 = 141558275;
    *(_QWORD *)(v0 + 968) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 968, v0 + 976, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    v48 = *(_QWORD *)(v0 + 552);
    v49 = *(_QWORD *)(v0 + 560);
    sub_10001AA44((_QWORD *)(v0 + 528), v48);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v49 + 8) + 8) + 32))(v48);
    v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v45, v50);
    v53 = v52;
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v44, v45);
    *(_QWORD *)(v0 + 960) = sub_100016940(v51, v53, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 960, v0 + 968, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
  }

  v54 = *(void **)(v0 + 1336);
  v55 = *(void **)(v0 + 1328);
  v56 = *(_QWORD *)(v0 + 1016);
  v57 = *(_QWORD *)(*(_QWORD *)(v0 + 1008) + 160);
  v58 = *(_BYTE *)(*(_QWORD *)(v0 + 1024) + *(int *)(v0 + 1568));
  type metadata accessor for Transaction(0);
  sub_100030784(v56, v0 + 568);
  v59 = swift_allocObject(&unk_101081420, 73, 7);
  sub_10000F9FC((__int128 *)(v0 + 568), v59 + 16);
  *(_QWORD *)(v59 + 56) = v57;
  *(_QWORD *)(v59 + 64) = v54;
  *(_BYTE *)(v59 + 72) = v58;
  v60 = v54;
  swift_retain();
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100370, v59);
  swift_release();

  v61 = *(_QWORD *)(v0 + 1256);
  v62 = *(_QWORD *)(v0 + 1248);
  v63 = *(_QWORD *)(v0 + 1240);
  v64 = *(_QWORD *)(v0 + 1232);
  v65 = *(_QWORD *)(v0 + 1224);
  v66 = *(_QWORD *)(v0 + 1216);
  v67 = *(_QWORD *)(v0 + 1184);
  v68 = *(_QWORD *)(v0 + 1176);
  v69 = *(_QWORD *)(v0 + 1168);
  v103 = *(_QWORD *)(v0 + 1160);
  v104 = *(_QWORD *)(v0 + 1152);
  v105 = *(_QWORD *)(v0 + 1144);
  v106 = *(_QWORD *)(v0 + 1136);
  v107 = *(_QWORD *)(v0 + 1128);
  v108 = *(_QWORD *)(v0 + 1120);
  v109 = *(_QWORD *)(v0 + 1112);
  v111 = *(_QWORD *)(v0 + 1104);
  v112 = *(_QWORD *)(v0 + 1096);
  v114 = *(_QWORD *)(v0 + 1088);
  log = *(os_log_t *)(v0 + 1080);
  v118 = *(_QWORD *)(v0 + 1056);
  v120 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(log);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B4070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  *(_OWORD *)(v0 + 88) = 0u;
  *(_QWORD *)(v0 + 120) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1192));
  sub_100004048(v0 + 88, (uint64_t *)&unk_101107010);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v1 = *(_QWORD *)(v0 + 1016);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B71C8);
  v3 = sub_100030784(v1, v0 + 528);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 1248);
    v44 = *(_QWORD *)(v0 + 1200);
    v7 = *(_QWORD *)(v0 + 1192);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v47 = v9;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v0 + 968) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 968, v0 + 976, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v10 = *(_QWORD *)(v0 + 552);
    v11 = *(_QWORD *)(v0 + 560);
    sub_10001AA44((_QWORD *)(v0 + 528), v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v6, v7);
    *(_QWORD *)(v0 + 960) = sub_100016940(v13, v15, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 960, v0 + 968, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
  }

  v16 = *(void **)(v0 + 1336);
  v17 = *(void **)(v0 + 1328);
  v18 = *(_QWORD *)(v0 + 1016);
  v19 = *(_QWORD *)(*(_QWORD *)(v0 + 1008) + 160);
  v20 = *(_BYTE *)(*(_QWORD *)(v0 + 1024) + *(int *)(v0 + 1568));
  type metadata accessor for Transaction(0);
  sub_100030784(v18, v0 + 568);
  v21 = swift_allocObject(&unk_101081420, 73, 7);
  sub_10000F9FC((__int128 *)(v0 + 568), v21 + 16);
  *(_QWORD *)(v21 + 56) = v19;
  *(_QWORD *)(v21 + 64) = v16;
  *(_BYTE *)(v21 + 72) = v20;
  v22 = v16;
  swift_retain();
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100370, v21);
  swift_release();

  v23 = *(_QWORD *)(v0 + 1256);
  v24 = *(_QWORD *)(v0 + 1248);
  v25 = *(_QWORD *)(v0 + 1240);
  v26 = *(_QWORD *)(v0 + 1232);
  v27 = *(_QWORD *)(v0 + 1224);
  v28 = *(_QWORD *)(v0 + 1216);
  v29 = *(_QWORD *)(v0 + 1184);
  v30 = *(_QWORD *)(v0 + 1176);
  v31 = *(_QWORD *)(v0 + 1168);
  v33 = *(_QWORD *)(v0 + 1160);
  v34 = *(_QWORD *)(v0 + 1152);
  v35 = *(_QWORD *)(v0 + 1144);
  v36 = *(_QWORD *)(v0 + 1136);
  v37 = *(_QWORD *)(v0 + 1128);
  v38 = *(_QWORD *)(v0 + 1120);
  v39 = *(_QWORD *)(v0 + 1112);
  v40 = *(_QWORD *)(v0 + 1104);
  v41 = *(_QWORD *)(v0 + 1096);
  v42 = *(_QWORD *)(v0 + 1088);
  v43 = *(_QWORD *)(v0 + 1080);
  v45 = *(_QWORD *)(v0 + 1056);
  v46 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B44D4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 328, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 352))
  {
    sub_10000F9FC((__int128 *)(v0 + 328), v0 + 368);
    sub_10001AA44((_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 392));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 1432) = v2;
    *v2 = v0;
    v2[1] = sub_1005B4578;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B4578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1432);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  *(_QWORD *)(*(_QWORD *)v1 + 1440) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B45D8, v3, 0);
}

uint64_t sub_1005B45D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_QWORD *)(v0 + 1440);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 368));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 1440);
    v3 = sub_1005B462C;
  }
  else
  {
    v3 = sub_1005B5898;
    v2 = 0;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1005B462C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1440);
  v2 = *(unsigned __int8 *)(v0 + 1572);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1352);
  v4 = *(_QWORD *)(v0 + 1248);
  v5 = *(_QWORD *)(v0 + 1192);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 1208) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1376))(v4, *(_QWORD *)(v0 + 1240), v5);
  v9 = swift_allocObject(&unk_1010814C0, v7, v8);
  *(_QWORD *)(v0 + 1448) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v3(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1456) = v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
  *v11 = v0;
  v11[1] = sub_1005B472C;
  return unsafeBlocking<A>(_:)(v0 + 1000, sub_1005CCE40, v9, v12);
}

uint64_t sub_1005B472C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 1456));
  swift_release();
  return swift_task_switch(sub_1005B4788, *(_QWORD *)(v1 + 1440), 0);
}

uint64_t sub_1005B4788()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 1464) = *(_QWORD *)(v0 + 1000);
  return swift_task_switch(sub_1005B47CC, 0, 0);
}

uint64_t sub_1005B47CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t (*v73)(uint64_t, uint64_t);
  uint64_t result;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  void *v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)();
  unint64_t v139;
  int64_t v140;
  int64_t v141;
  uint64_t v142;
  unint64_t v143;
  int64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  NSObject *v155;
  os_log_type_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  void (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  void *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  id v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  os_log_t log;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;

  v2 = *(_QWORD **)(v0 + 1464);
  v3 = v2[2];
  if (v3)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 1072) + 80);
    v5 = (uint64_t)v2 + ((v4 + 32) & ~v4);
    sub_10005972C(v5, *(_QWORD *)(v0 + 1152), type metadata accessor for BeaconEstimatedLocation);
    swift_bridgeObjectRetain(v2);
    if (v3 != 1)
    {
      v21 = 1;
      while (1)
      {
        v84 = v2[2];
        if (v21 >= v84)
          break;
        v85 = *(_QWORD *)(v0 + 1152);
        v86 = *(_QWORD *)(v0 + 1144);
        v87 = *(_QWORD *)(v0 + 1064);
        sub_10005972C(v5 + *(_QWORD *)(*(_QWORD *)(v0 + 1072) + 72) * v21, v86, type metadata accessor for BeaconEstimatedLocation);
        if ((static Date.< infix(_:_:)(v85 + *(int *)(v87 + 40), v86 + *(int *)(v87 + 40)) & 1) != 0)
        {
          v88 = *(_QWORD *)(v0 + 1152);
          v89 = *(_QWORD *)(v0 + 1144);
          sub_1000126B0(v88, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126EC(v89, v88, type metadata accessor for BeaconEstimatedLocation);
        }
        else
        {
          sub_1000126B0(*(_QWORD *)(v0 + 1144), type metadata accessor for BeaconEstimatedLocation);
        }
        if (v3 == ++v21)
          goto LABEL_3;
      }
      __break(1u);
      goto LABEL_57;
    }
LABEL_3:
    v6 = *(_QWORD *)(v0 + 1152);
    v7 = *(_QWORD *)(v0 + 1056);
    swift_bridgeObjectRelease();
    sub_1000126EC(v6, v7, type metadata accessor for BeaconEstimatedLocation);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }
  v1 = v0 + 688;
  v9 = *(_QWORD *)(v0 + 1072);
  v10 = *(_QWORD *)(v0 + 1064);
  v11 = *(_QWORD *)(v0 + 1056);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v11, v8, 1, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v10) != 1)
  {
    v30 = *(_QWORD *)(v0 + 1160);
    v31 = *(_QWORD *)(v0 + 1136);
    v32 = *(_QWORD *)(v0 + 1128);
    v33 = *(_QWORD *)(v0 + 1064);
    v34 = *(_QWORD *)(v0 + 1024);
    sub_1000126EC(*(_QWORD *)(v0 + 1056), v30, type metadata accessor for BeaconEstimatedLocation);
    v35 = *(int *)(v33 + 28);
    v36 = *(double *)(v34 + v35);
    v37 = *(double *)(v30 + v35);
    sub_10005972C(v34, v31, type metadata accessor for BeaconEstimatedLocation);
    sub_10005972C(v30, v32, type metadata accessor for BeaconEstimatedLocation);
    v38 = *(_QWORD *)(v0 + 1160);
    v39 = *(_QWORD *)(v0 + 1136);
    v40 = *(_QWORD *)(v0 + 1128);
    v41 = *(_QWORD *)(v0 + 1120);
    v42 = *(_QWORD *)(v0 + 1112);
    if (v36 == v37)
    {
      v43 = *(_QWORD *)(v0 + 1064);
      v44 = *(_QWORD *)(v0 + 1024);
      v45 = *(double *)(v39 + *(int *)(v43 + 32));
      sub_1000126B0(*(_QWORD *)(v0 + 1136), type metadata accessor for BeaconEstimatedLocation);
      v46 = *(double *)(v40 + *(int *)(v43 + 32));
      sub_1000126B0(v40, type metadata accessor for BeaconEstimatedLocation);
      sub_10005972C(v44, v41, type metadata accessor for BeaconEstimatedLocation);
      sub_10005972C(v38, v42, type metadata accessor for BeaconEstimatedLocation);
      if (v45 == v46)
      {
        v47 = *(_QWORD *)(v0 + 1160);
        v48 = *(_QWORD *)(v0 + 1120);
        v49 = *(_QWORD *)(v0 + 1112);
        v50 = *(_QWORD *)(v0 + 1104);
        v51 = *(_QWORD *)(v0 + 1096);
        v52 = *(_QWORD *)(v0 + 1064);
        v53 = *(_QWORD *)(v0 + 1024);
        v54 = *(double *)(v48 + *(int *)(v52 + 36));
        sub_1000126B0(v48, type metadata accessor for BeaconEstimatedLocation);
        v55 = *(double *)(v49 + *(int *)(v52 + 36));
        sub_1000126B0(v49, type metadata accessor for BeaconEstimatedLocation);
        sub_10005972C(v53, v50, type metadata accessor for BeaconEstimatedLocation);
        sub_10005972C(v47, v51, type metadata accessor for BeaconEstimatedLocation);
        if (v54 == v55)
        {
          v56 = *(_QWORD *)(v0 + 1160);
          v57 = *(_QWORD *)(v0 + 1104);
          v58 = *(_QWORD *)(v0 + 1096);
          v59 = *(_QWORD *)(v0 + 1088);
          v60 = *(_QWORD *)(v0 + 1080);
          v61 = *(_QWORD *)(v0 + 1024);
          v62 = *(int *)(*(_QWORD *)(v0 + 1064) + 40);
          v63 = static Date.== infix(_:_:)(v57 + v62, v58 + v62);
          sub_1000126B0(v58, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v57, type metadata accessor for BeaconEstimatedLocation);
          sub_10005972C(v61, v59, type metadata accessor for BeaconEstimatedLocation);
          sub_10005972C(v56, v60, type metadata accessor for BeaconEstimatedLocation);
          if ((v63 & 1) != 0)
          {
            v64 = *(_QWORD *)(v0 + 1240);
            v65 = *(_QWORD *)(v0 + 1200);
            v66 = *(_QWORD *)(v0 + 1192);
            v67 = *(_QWORD *)(v0 + 1160);
            v68 = *(_QWORD *)(v0 + 1088);
            v69 = *(_QWORD *)(v0 + 1080);
            v70 = *(int *)(*(_QWORD *)(v0 + 1064) + 44);
            v71 = *(unsigned __int8 *)(v68 + v70);
            v72 = *(unsigned __int8 *)(v69 + v70);
            sub_1000126B0(v69, type metadata accessor for BeaconEstimatedLocation);
            sub_1000126B0(v68, type metadata accessor for BeaconEstimatedLocation);
            sub_1000126B0(v67, type metadata accessor for BeaconEstimatedLocation);
            v73 = *(uint64_t (**)(uint64_t, uint64_t))(v65 + 8);
            result = v73(v64, v66);
            if (v71 == v72)
            {
              v75 = *(_QWORD *)(v0 + 1416);
              v76 = *(_QWORD *)(v0 + 1408);
              *(_BYTE *)(v0 + 1578) = 1;
              if (v75)
              {
                v77 = (v75 - 1) & v75;
                v78 = __clz(__rbit64(v75)) | (v76 << 6);
                v79 = *(_QWORD *)(v0 + 1400);
                goto LABEL_21;
              }
              v140 = v76 + 1;
              if (__OFADD__(v76, 1))
              {
                __break(1u);
              }
              else
              {
                v141 = (unint64_t)((1 << *(_BYTE *)(v0 + 1577)) + 63) >> 6;
                v79 = *(_QWORD *)(v0 + 1400);
                if (v140 >= v141)
                  goto LABEL_73;
                v142 = v79 + 56;
                v143 = *(_QWORD *)(v79 + 56 + 8 * v140);
                ++v76;
                if (v143)
                {
LABEL_55:
                  v77 = (v143 - 1) & v143;
                  v78 = __clz(__rbit64(v143)) + (v76 << 6);
LABEL_21:
                  *(_QWORD *)(v0 + 1416) = v77;
                  *(_QWORD *)(v0 + 1408) = v76;
                  v80 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344);
                  v81 = *(_QWORD *)(v0 + 1200);
                  v82 = *(_QWORD *)(v0 + 1192);
                  v83 = *(_QWORD *)(v0 + 1176);
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1376))(v83, *(_QWORD *)(v79 + 48) + *(_QWORD *)(v81 + 72) * v78, v82);
                  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
                  *(_QWORD *)(v0 + 1424) = v13;
                  v13(v83, 0, 1, v82);
                  if (v80(v83, 1, v82) != 1)
                  {
                    v137 = *(_QWORD *)(v0 + 1008);
                    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1352))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1176), *(_QWORD *)(v0 + 1192));
                    v138 = sub_1005B44D4;
                    return swift_task_switch(v138, v137, 0);
                  }
                  goto LABEL_74;
                }
                v76 = v140 + 1;
                if (v140 + 1 >= v141)
                  goto LABEL_73;
                v143 = *(_QWORD *)(v142 + 8 * v76);
                if (v143)
                  goto LABEL_55;
                v76 = v140 + 2;
                if (v140 + 2 >= v141)
                  goto LABEL_73;
                v143 = *(_QWORD *)(v142 + 8 * v76);
                if (v143)
                  goto LABEL_55;
                v144 = v140 + 3;
                if (v144 >= v141)
                {
LABEL_73:
                  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 56);
                  v13(*(_QWORD *)(v0 + 1176), 1, 1, *(_QWORD *)(v0 + 1192));
LABEL_74:
                  swift_release();
                  goto LABEL_7;
                }
                v143 = *(_QWORD *)(v142 + 8 * v144);
                if (v143)
                {
                  v76 = v144;
                  goto LABEL_55;
                }
                while (1)
                {
                  v76 = v144 + 1;
                  if (__OFADD__(v144, 1))
                    break;
                  if (v76 >= v141)
                    goto LABEL_73;
                  v143 = *(_QWORD *)(v142 + 8 * v76);
                  ++v144;
                  if (v143)
                    goto LABEL_55;
                }
              }
              __break(1u);
              return result;
            }
LABEL_34:
            swift_release();
            v73(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1192));
            goto LABEL_35;
          }
LABEL_33:
          v101 = *(_QWORD *)(v0 + 1240);
          v102 = *(_QWORD *)(v0 + 1200);
          v103 = *(_QWORD *)(v0 + 1192);
          v104 = *(_QWORD *)(v0 + 1160);
          v105 = *(_QWORD *)(v0 + 1088);
          sub_1000126B0(*(_QWORD *)(v0 + 1080), type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v105, type metadata accessor for BeaconEstimatedLocation);
          sub_1000126B0(v104, type metadata accessor for BeaconEstimatedLocation);
          v73 = *(uint64_t (**)(uint64_t, uint64_t))(v102 + 8);
          v73(v101, v103);
          goto LABEL_34;
        }
LABEL_32:
        v96 = *(_QWORD *)(v0 + 1160);
        v97 = *(_QWORD *)(v0 + 1104);
        v98 = *(_QWORD *)(v0 + 1088);
        v99 = *(_QWORD *)(v0 + 1080);
        v100 = *(_QWORD *)(v0 + 1024);
        sub_1000126B0(*(_QWORD *)(v0 + 1096), type metadata accessor for BeaconEstimatedLocation);
        sub_1000126B0(v97, type metadata accessor for BeaconEstimatedLocation);
        sub_10005972C(v100, v98, type metadata accessor for BeaconEstimatedLocation);
        sub_10005972C(v96, v99, type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_33;
      }
    }
    else
    {
      v90 = *(_QWORD *)(v0 + 1024);
      sub_1000126B0(*(_QWORD *)(v0 + 1128), type metadata accessor for BeaconEstimatedLocation);
      sub_1000126B0(v39, type metadata accessor for BeaconEstimatedLocation);
      sub_10005972C(v90, v41, type metadata accessor for BeaconEstimatedLocation);
      sub_10005972C(v38, v42, type metadata accessor for BeaconEstimatedLocation);
    }
    v91 = *(_QWORD *)(v0 + 1160);
    v92 = *(_QWORD *)(v0 + 1120);
    v93 = *(_QWORD *)(v0 + 1104);
    v94 = *(_QWORD *)(v0 + 1096);
    v95 = *(_QWORD *)(v0 + 1024);
    sub_1000126B0(*(_QWORD *)(v0 + 1112), type metadata accessor for BeaconEstimatedLocation);
    sub_1000126B0(v92, type metadata accessor for BeaconEstimatedLocation);
    sub_10005972C(v95, v93, type metadata accessor for BeaconEstimatedLocation);
    sub_10005972C(v91, v94, type metadata accessor for BeaconEstimatedLocation);
    goto LABEL_32;
  }
  v12 = *(_QWORD *)(v0 + 1056);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1192));
  swift_release();
  sub_100004048(v12, (uint64_t *)&unk_1010F7810);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 1424);
LABEL_7:
  *(_QWORD *)(v0 + 1472) = v13;
  if ((*(_BYTE *)(v0 + 1578) & 1) != 0)
  {
    v14 = *(_QWORD *)(v0 + 712);
    v15 = *(_QWORD *)(v0 + 720);
    sub_10001AA44((_QWORD *)(v0 + 688), v14);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
    v2 = (_QWORD *)v16;
    *(_QWORD *)(v0 + 1480) = v16;
    v17 = *(_BYTE *)(v16 + 32);
    *(_BYTE *)(v0 + 1579) = v17;
    v18 = -1;
    v19 = -1 << v17;
    v20 = *(_QWORD *)(v16 + 56);
    if (-v19 < 64)
      v18 = ~(-1 << -(char)v19);
    v21 = (unint64_t)_swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1488) = _swiftEmptyArrayStorage;
    v22 = v18 & v20;
    if (v22)
    {
      v23 = 0;
      v24 = __clz(__rbit64(v22));
      v25 = (v22 - 1) & v22;
LABEL_12:
      *(_QWORD *)(v0 + 1504) = v25;
      *(_QWORD *)(v0 + 1496) = v23;
      v26 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1472);
      v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344);
      v28 = *(_QWORD *)(v0 + 1192);
      v29 = *(_QWORD *)(v0 + 1168);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1376))(v29, v2[6] + *(_QWORD *)(*(_QWORD *)(v0 + 1200) + 72) * v24, v28);
      v26(v29, 0, 1, v28);
      if (v27(v29, 1, v28) == 1)
        goto LABEL_82;
      v137 = *(_QWORD *)(v0 + 1008);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1352))(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1168), *(_QWORD *)(v0 + 1192));
      v138 = sub_1005B630C;
      return swift_task_switch(v138, v137, 0);
    }
    v84 = 63 - v19;
    if (v84 <= 0x7F)
      goto LABEL_81;
    v139 = *(_QWORD *)(v16 + 64);
    if (v139)
    {
      v23 = 1;
LABEL_46:
      v25 = (v139 - 1) & v139;
      v24 = __clz(__rbit64(v139)) + (v23 << 6);
      goto LABEL_12;
    }
    if (v84 < 0xC0)
    {
LABEL_81:
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1192));
LABEL_82:
      swift_release();
      if (qword_1010E9D20 != -1)
        swift_once(&qword_1010E9D20, sub_1005AE82C);
      v148 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
      v149 = *(_QWORD *)(v0 + 1256);
      v150 = *(_QWORD *)(v0 + 1232);
      v151 = *(_QWORD *)(v0 + 1192);
      v152 = *(_QWORD *)(v0 + 1016);
      v153 = type metadata accessor for Logger(0);
      sub_10001A9E8(v153, (uint64_t)qword_1011B71C8);
      v148(v150, v149, v151);
      v154 = sub_100030784(v152, v0 + 848);
      v155 = Logger.logObject.getter(v154);
      v156 = static os_log_type_t.info.getter(v155);
      if (os_log_type_enabled(v155, v156))
      {
        v196 = v1;
        v157 = *(_QWORD *)(v0 + 1248);
        typeb = v156;
        v158 = *(_QWORD *)(v0 + 1232);
        v187 = *(_QWORD *)(v0 + 1200);
        v159 = *(_QWORD *)(v0 + 1192);
        v160 = swift_slowAlloc(42, -1);
        v190 = swift_slowAlloc(64, -1);
        v197 = v190;
        *(_DWORD *)v160 = 141558787;
        *(_QWORD *)(v0 + 920) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v160 + 4, v160 + 12);
        *(_WORD *)(v160 + 12) = 2081;
        v161 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v162 = dispatch thunk of CustomStringConvertible.description.getter(v159, v161);
        *(_QWORD *)(v0 + 928) = sub_100016940(v162, v163, &v197);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v160 + 14, v160 + 22);
        swift_bridgeObjectRelease();
        v164 = *(void (**)(uint64_t, uint64_t))(v187 + 8);
        v164(v158, v159);
        *(_WORD *)(v160 + 22) = 2160;
        *(_QWORD *)(v0 + 936) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v160 + 24, v160 + 32);
        *(_WORD *)(v160 + 32) = 2081;
        v165 = *(_QWORD *)(v0 + 872);
        v166 = *(_QWORD *)(v0 + 880);
        sub_10001AA44((_QWORD *)(v0 + 848), v165);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v166 + 8) + 8) + 32))(v165);
        v167 = v161;
        v21 = (unint64_t)_swiftEmptyArrayStorage;
        v168 = dispatch thunk of CustomStringConvertible.description.getter(v159, v167);
        v170 = v169;
        v171 = v157;
        v1 = v196;
        v164(v171, v159);
        *(_QWORD *)(v0 + 944) = sub_100016940(v168, v170, &v197);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v160 + 34, v160 + 42);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
        _os_log_impl((void *)&_mh_execute_header, v155, typeb, "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{private,mask.hash}s.", (uint8_t *)v160, 0x2Au);
        swift_arrayDestroy(v190, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v190, -1, -1);
        swift_slowDealloc(v160, -1, -1);
      }
      else
      {
        v164 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 8);
        v164(*(_QWORD *)(v0 + 1232), *(_QWORD *)(v0 + 1192));
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
      }

      *(_QWORD *)(v0 + 1544) = v164;
      v172 = *(void **)(v0 + 1336);
      v173 = *(_QWORD *)(v0 + 1016);
      v174 = *(_QWORD *)(v0 + 1008);
      sub_100030784(v1, v0 + 208);
      sub_100030784(v173, v0 + 768);
      v175 = (_QWORD *)swift_allocObject(&unk_101081470, 120, 7);
      *(_QWORD *)(v0 + 1552) = v175;
      v175[2] = v174;
      v175[3] = v21;
      sub_10000F9FC((__int128 *)(v0 + 208), (uint64_t)(v175 + 4));
      sub_10000F9FC((__int128 *)(v0 + 768), (uint64_t)(v175 + 9));
      v175[14] = v172;
      v176 = async function pointer to unsafeBlocking<A>(_:)[1];
      v177 = v172;
      swift_retain();
      v178 = (_QWORD *)swift_task_alloc(v176);
      *(_QWORD *)(v0 + 1560) = v178;
      *v178 = v0;
      v178[1] = sub_1005B72F8;
      return unsafeBlocking<A>(_:)(v178, sub_1005CCE18, v175, &type metadata for () + 1);
    }
    v139 = *(_QWORD *)(v16 + 72);
    if (v139)
    {
      v23 = 2;
      goto LABEL_46;
    }
LABEL_57:
    if (v84 >= 0x100)
    {
      v139 = v2[10];
      if (v139)
      {
        v23 = 3;
        goto LABEL_46;
      }
      if (v84 >= 0x140)
      {
        v139 = v2[11];
        if (v139)
        {
          v23 = 4;
          goto LABEL_46;
        }
        v145 = 0;
        v146 = v84 >> 6;
        if (v146 <= 5)
          v146 = 5;
        v147 = v146 - 5;
        while (v147 != v145)
        {
          v139 = v2[v145++ + 12];
          if (v139)
          {
            v23 = v145 + 4;
            goto LABEL_46;
          }
        }
      }
    }
    goto LABEL_81;
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1192));
LABEL_35:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 688));
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v106 = *(_QWORD *)(v0 + 1016);
  v107 = type metadata accessor for Logger(0);
  sub_10001A9E8(v107, (uint64_t)qword_1011B71C8);
  v108 = sub_100030784(v106, v0 + 528);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.info.getter(v109);
  if (os_log_type_enabled(v109, v110))
  {
    v111 = *(_QWORD *)(v0 + 1248);
    *(_QWORD *)type = *(_QWORD *)(v0 + 1200);
    v112 = *(_QWORD *)(v0 + 1192);
    v113 = swift_slowAlloc(22, -1);
    v114 = swift_slowAlloc(32, -1);
    v197 = v114;
    *(_DWORD *)v113 = 141558275;
    *(_QWORD *)(v0 + 968) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 968, v0 + 976, v113 + 4, v113 + 12);
    *(_WORD *)(v113 + 12) = 2081;
    v115 = *(_QWORD *)(v0 + 552);
    v116 = *(_QWORD *)(v0 + 560);
    sub_10001AA44((_QWORD *)(v0 + 528), v115);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v116 + 8) + 8) + 32))(v115);
    v117 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v118 = dispatch thunk of CustomStringConvertible.description.getter(v112, v117);
    v120 = v119;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)type + 8))(v111, v112);
    *(_QWORD *)(v0 + 960) = sub_100016940(v118, v120, &v197);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 960, v0 + 968, v113 + 14, v113 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
    _os_log_impl((void *)&_mh_execute_header, v109, v110, "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.", (uint8_t *)v113, 0x16u);
    swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    swift_slowDealloc(v113, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
  }

  v121 = *(void **)(v0 + 1336);
  v122 = *(void **)(v0 + 1328);
  v123 = *(_QWORD *)(v0 + 1016);
  v124 = *(_QWORD *)(*(_QWORD *)(v0 + 1008) + 160);
  v125 = *(_BYTE *)(*(_QWORD *)(v0 + 1024) + *(int *)(v0 + 1568));
  type metadata accessor for Transaction(0);
  sub_100030784(v123, v0 + 568);
  v126 = swift_allocObject(&unk_101081420, 73, 7);
  sub_10000F9FC((__int128 *)(v0 + 568), v126 + 16);
  *(_QWORD *)(v126 + 56) = v124;
  *(_QWORD *)(v126 + 64) = v121;
  *(_BYTE *)(v126 + 72) = v125;
  v127 = v121;
  swift_retain();
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100370, v126);
  swift_release();

  v128 = *(_QWORD *)(v0 + 1256);
  v129 = *(_QWORD *)(v0 + 1248);
  v130 = *(_QWORD *)(v0 + 1240);
  v131 = *(_QWORD *)(v0 + 1232);
  v132 = *(_QWORD *)(v0 + 1224);
  v133 = *(_QWORD *)(v0 + 1216);
  v134 = *(_QWORD *)(v0 + 1184);
  v135 = *(_QWORD *)(v0 + 1176);
  v136 = *(_QWORD *)(v0 + 1168);
  v179 = *(_QWORD *)(v0 + 1160);
  v180 = *(_QWORD *)(v0 + 1152);
  v181 = *(_QWORD *)(v0 + 1144);
  v182 = *(_QWORD *)(v0 + 1136);
  v183 = *(_QWORD *)(v0 + 1128);
  v184 = *(_QWORD *)(v0 + 1120);
  v185 = *(_QWORD *)(v0 + 1112);
  v186 = *(_QWORD *)(v0 + 1104);
  v188 = *(_QWORD *)(v0 + 1096);
  v189 = *(_QWORD *)(v0 + 1088);
  log = *(os_log_t *)(v0 + 1080);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 1056);
  v195 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v179);
  swift_task_dealloc(v180);
  swift_task_dealloc(v181);
  swift_task_dealloc(v182);
  swift_task_dealloc(v183);
  swift_task_dealloc(v184);
  swift_task_dealloc(v185);
  swift_task_dealloc(v186);
  swift_task_dealloc(v188);
  swift_task_dealloc(v189);
  swift_task_dealloc(log);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v195);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B5898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  id v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  os_log_t log;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t type[8];
  os_log_type_t typea[8];
  os_log_type_t typeb;
  uint64_t v102;
  uint64_t v103;

  v1 = v0 + 688;
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1072) + 56))(*(_QWORD *)(v0 + 1056), 1, 1, *(_QWORD *)(v0 + 1064));
  v2 = *(_QWORD *)(v0 + 1056);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1240), *(_QWORD *)(v0 + 1192));
  swift_release();
  sub_100004048(v2, (uint64_t *)&unk_1010F7810);
  *(_QWORD *)(v0 + 1472) = *(_QWORD *)(v0 + 1424);
  if ((*(_BYTE *)(v0 + 1578) & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 712);
    v4 = *(_QWORD *)(v0 + 720);
    sub_10001AA44((_QWORD *)(v0 + 688), v3);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
    *(_QWORD *)(v0 + 1480) = v5;
    v6 = *(_BYTE *)(v5 + 32);
    *(_BYTE *)(v0 + 1579) = v6;
    v7 = -1;
    v8 = -1 << v6;
    v9 = *(_QWORD *)(v5 + 56);
    if (-v8 < 64)
      v7 = ~(-1 << -(char)v8);
    *(_QWORD *)(v0 + 1488) = _swiftEmptyArrayStorage;
    v10 = v7 & v9;
    if (v10)
    {
      v11 = 0;
      v12 = __clz(__rbit64(v10));
      v13 = (v10 - 1) & v10;
      goto LABEL_6;
    }
    v51 = 63 - v8;
    if (v51 > 0x7F)
    {
      v52 = *(_QWORD *)(v5 + 64);
      if (v52)
      {
        v11 = 1;
LABEL_18:
        v13 = (v52 - 1) & v52;
        v12 = __clz(__rbit64(v52)) + (v11 << 6);
LABEL_6:
        *(_QWORD *)(v0 + 1504) = v13;
        *(_QWORD *)(v0 + 1496) = v11;
        v14 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1472);
        v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344);
        v16 = *(_QWORD *)(v0 + 1192);
        v17 = *(_QWORD *)(v0 + 1168);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1376))(v17, *(_QWORD *)(v5 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1200) + 72) * v12, v16);
        v14(v17, 0, 1, v16);
        if (v15(v17, 1, v16) != 1)
        {
          v50 = *(_QWORD *)(v0 + 1008);
          (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1352))(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1168), *(_QWORD *)(v0 + 1192));
          return swift_task_switch(sub_1005B630C, v50, 0);
        }
        goto LABEL_35;
      }
      if (v51 >= 0xC0)
      {
        v52 = *(_QWORD *)(v5 + 72);
        if (v52)
        {
          v11 = 2;
          goto LABEL_18;
        }
        if (v51 >= 0x100)
        {
          v52 = *(_QWORD *)(v5 + 80);
          if (v52)
          {
            v11 = 3;
            goto LABEL_18;
          }
          if (v51 >= 0x140)
          {
            v52 = *(_QWORD *)(v5 + 88);
            if (v52)
            {
              v11 = 4;
              goto LABEL_18;
            }
            v53 = 0;
            v54 = v51 >> 6;
            if (v54 <= 5)
              v54 = 5;
            v55 = v54 - 5;
            while (v55 != v53)
            {
              v52 = *(_QWORD *)(v5 + 96 + 8 * v53++);
              if (v52)
              {
                v11 = v53 + 4;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1192));
LABEL_35:
    swift_release();
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
    v57 = *(_QWORD *)(v0 + 1256);
    v58 = *(_QWORD *)(v0 + 1232);
    v59 = *(_QWORD *)(v0 + 1192);
    v60 = *(_QWORD *)(v0 + 1016);
    v61 = type metadata accessor for Logger(0);
    sub_10001A9E8(v61, (uint64_t)qword_1011B71C8);
    v56(v58, v57, v59);
    v62 = sub_100030784(v60, v0 + 848);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.info.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      typeb = v64;
      v65 = *(_QWORD *)(v0 + 1232);
      v93 = *(_QWORD *)(v0 + 1200);
      v95 = *(_QWORD *)(v0 + 1248);
      v66 = *(_QWORD *)(v0 + 1192);
      v67 = swift_slowAlloc(42, -1);
      v98 = swift_slowAlloc(64, -1);
      v103 = v98;
      *(_DWORD *)v67 = 141558787;
      *(_QWORD *)(v0 + 920) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v67 + 4, v67 + 12);
      *(_WORD *)(v67 + 12) = 2081;
      v91 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v66, v91);
      *(_QWORD *)(v0 + 928) = sub_100016940(v68, v69, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v67 + 14, v67 + 22);
      swift_bridgeObjectRelease();
      v70 = *(void (**)(uint64_t, uint64_t))(v93 + 8);
      v70(v65, v66);
      *(_WORD *)(v67 + 22) = 2160;
      *(_QWORD *)(v0 + 936) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v67 + 24, v67 + 32);
      *(_WORD *)(v67 + 32) = 2081;
      v71 = *(_QWORD *)(v0 + 872);
      v72 = *(_QWORD *)(v0 + 880);
      sub_10001AA44((_QWORD *)(v0 + 848), v71);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v72 + 8) + 8) + 32))(v71);
      v73 = dispatch thunk of CustomStringConvertible.description.getter(v66, v91);
      v75 = v74;
      v76 = v66;
      v1 = v0 + 688;
      v70(v95, v76);
      *(_QWORD *)(v0 + 944) = sub_100016940(v73, v75, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v67 + 34, v67 + 42);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
      _os_log_impl((void *)&_mh_execute_header, v63, typeb, "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{private,mask.hash}s.", (uint8_t *)v67, 0x2Au);
      swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      v70 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 8);
      v70(*(_QWORD *)(v0 + 1232), *(_QWORD *)(v0 + 1192));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
    }

    *(_QWORD *)(v0 + 1544) = v70;
    v77 = *(void **)(v0 + 1336);
    v78 = *(_QWORD *)(v0 + 1016);
    v79 = *(_QWORD *)(v0 + 1008);
    sub_100030784(v1, v0 + 208);
    sub_100030784(v78, v0 + 768);
    v80 = (_QWORD *)swift_allocObject(&unk_101081470, 120, 7);
    *(_QWORD *)(v0 + 1552) = v80;
    v80[2] = v79;
    v80[3] = _swiftEmptyArrayStorage;
    sub_10000F9FC((__int128 *)(v0 + 208), (uint64_t)(v80 + 4));
    sub_10000F9FC((__int128 *)(v0 + 768), (uint64_t)(v80 + 9));
    v80[14] = v77;
    v81 = async function pointer to unsafeBlocking<A>(_:)[1];
    v82 = v77;
    swift_retain();
    v83 = (_QWORD *)swift_task_alloc(v81);
    *(_QWORD *)(v0 + 1560) = v83;
    *v83 = v0;
    v83[1] = sub_1005B72F8;
    return unsafeBlocking<A>(_:)(v83, sub_1005CCE18, v80, &type metadata for () + 1);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1192));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 688));
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v18 = *(_QWORD *)(v0 + 1016);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B71C8);
  v20 = sub_100030784(v18, v0 + 528);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = *(_QWORD *)(v0 + 1248);
    *(_QWORD *)type = *(_QWORD *)(v0 + 1200);
    v24 = *(_QWORD *)(v0 + 1192);
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(32, -1);
    v103 = v26;
    *(_DWORD *)v25 = 141558275;
    *(_QWORD *)(v0 + 968) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 968, v0 + 976, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2081;
    v27 = *(_QWORD *)(v0 + 552);
    v28 = *(_QWORD *)(v0 + 560);
    sub_10001AA44((_QWORD *)(v0 + 528), v27);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v27);
    v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v24, v29);
    v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)type + 8))(v23, v24);
    *(_QWORD *)(v0 + 960) = sub_100016940(v30, v32, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 960, v0 + 968, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
  }

  v33 = *(void **)(v0 + 1336);
  v34 = *(void **)(v0 + 1328);
  v35 = *(_QWORD *)(v0 + 1016);
  v36 = *(_QWORD *)(*(_QWORD *)(v0 + 1008) + 160);
  v37 = *(_BYTE *)(*(_QWORD *)(v0 + 1024) + *(int *)(v0 + 1568));
  type metadata accessor for Transaction(0);
  sub_100030784(v35, v0 + 568);
  v38 = swift_allocObject(&unk_101081420, 73, 7);
  sub_10000F9FC((__int128 *)(v0 + 568), v38 + 16);
  *(_QWORD *)(v38 + 56) = v36;
  *(_QWORD *)(v38 + 64) = v33;
  *(_BYTE *)(v38 + 72) = v37;
  v39 = v33;
  swift_retain();
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100370, v38);
  swift_release();

  v40 = *(_QWORD *)(v0 + 1256);
  v41 = *(_QWORD *)(v0 + 1248);
  v42 = *(_QWORD *)(v0 + 1240);
  v43 = *(_QWORD *)(v0 + 1232);
  v44 = *(_QWORD *)(v0 + 1224);
  v45 = *(_QWORD *)(v0 + 1216);
  v46 = *(_QWORD *)(v0 + 1184);
  v47 = *(_QWORD *)(v0 + 1176);
  v48 = *(_QWORD *)(v0 + 1168);
  v84 = *(_QWORD *)(v0 + 1160);
  v85 = *(_QWORD *)(v0 + 1152);
  v86 = *(_QWORD *)(v0 + 1144);
  v87 = *(_QWORD *)(v0 + 1136);
  v88 = *(_QWORD *)(v0 + 1128);
  v89 = *(_QWORD *)(v0 + 1120);
  v90 = *(_QWORD *)(v0 + 1112);
  v92 = *(_QWORD *)(v0 + 1104);
  v94 = *(_QWORD *)(v0 + 1096);
  log = *(os_log_t *)(v0 + 1088);
  v97 = *(_QWORD *)(v0 + 1080);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 1056);
  v102 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(log);
  swift_task_dealloc(v97);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v102);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B630C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 408, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 432))
  {
    sub_10000F9FC((__int128 *)(v0 + 408), v0 + 608);
    sub_10001AA44((_QWORD *)(v0 + 608), *(_QWORD *)(v0 + 632));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 1512) = v2;
    *v2 = v0;
    v2[1] = sub_1005B63B0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B63B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1512);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  *(_QWORD *)(*(_QWORD *)v1 + 1520) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B6410, v3, 0);
}

uint64_t sub_1005B6410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_QWORD *)(v0 + 1520);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 608));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 1520);
    v3 = sub_1005B6464;
  }
  else
  {
    v3 = sub_1005B6D20;
    v2 = 0;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1005B6464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(unsigned __int8 *)(v0 + 1572);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1352);
  v4 = *(_QWORD *)(v0 + 1248);
  v5 = *(_QWORD *)(v0 + 1192);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 1208) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1376))(v4, *(_QWORD *)(v0 + 1224), v5);
  v9 = swift_allocObject(&unk_101081498, v7, v8);
  *(_QWORD *)(v0 + 1528) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v3(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 1536) = v11;
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v11 = v0;
  v11[1] = sub_1005B6564;
  return unsafeBlocking<A>(_:)(v0 + 648, sub_1005CCE30, v9, v12);
}

uint64_t sub_1005B6564()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1536));
  swift_release();
  swift_release();
  return swift_task_switch(sub_1005B65D0, 0, 0);
}

uint64_t sub_1005B65D0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  int64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  id v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  os_log_type_t type[8];
  os_log_type_t typea;
  uint64_t v73;

  if (*(_QWORD *)(v0 + 672))
  {
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1352);
    *(_QWORD *)type = *(_QWORD *)(v0 + 1488);
    v1 = *(void **)(v0 + 1336);
    v2 = *(_QWORD *)(v0 + 1216);
    v3 = *(_QWORD *)(v0 + 1192);
    v4 = *(_QWORD *)(v0 + 1048);
    v5 = *(_QWORD *)(v0 + 1032);
    sub_10000F9FC((__int128 *)(v0 + 648), v0 + 728);
    v6 = *(_QWORD *)(v0 + 752);
    v7 = *(_QWORD *)(v0 + 760);
    sub_10001AA44((_QWORD *)(v0 + 728), v6);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 32))(v6);
    v8 = *(_QWORD *)(v0 + 752);
    v9 = *(_QWORD *)(v0 + 760);
    sub_10001AA44((_QWORD *)(v0 + 728), v8);
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 176))(v8, v9);
    v11 = *(int *)(v5 + 48);
    v12 = *(int *)(sub_10001A9A8((uint64_t *)&unk_10110C6B0) + 48);
    v69(v4, v2, v3);
    *(_QWORD *)(v4 + v12) = v10;
    *(_QWORD *)(v4 + v11) = v1;
    v13 = v1;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)type);
    v15 = *(_QWORD *)(v0 + 1488);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v15 = sub_1007CA0E4(0, *(_QWORD *)(v15 + 16) + 1, 1, *(_QWORD *)(v0 + 1488));
    v17 = *(_QWORD *)(v15 + 16);
    v16 = *(_QWORD *)(v15 + 24);
    if (v17 >= v16 >> 1)
      v15 = sub_1007CA0E4(v16 > 1, v17 + 1, 1, v15);
    v18 = *(_QWORD *)(v0 + 1224);
    v19 = *(_QWORD *)(v0 + 1200);
    v20 = *(_QWORD *)(v0 + 1192);
    v21 = *(_QWORD *)(v0 + 1048);
    v22 = *(_QWORD *)(v0 + 1040);
    *(_QWORD *)(v15 + 16) = v17 + 1;
    sub_100005CF0(v21, v15+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v17, (uint64_t *)&unk_101108FD0);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 728));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1192));
    result = sub_100004048(v0 + 648, (uint64_t *)&unk_1010EE310);
    v15 = *(_QWORD *)(v0 + 1488);
  }
  v24 = *(_QWORD *)(v0 + 1504);
  v25 = *(_QWORD *)(v0 + 1496);
  *(_QWORD *)(v0 + 1488) = v15;
  if (v24)
  {
    v26 = (v24 - 1) & v24;
    v27 = __clz(__rbit64(v24)) | (v25 << 6);
    v28 = *(_QWORD *)(v0 + 1480);
    goto LABEL_10;
  }
  v34 = v25 + 1;
  if (__OFADD__(v25, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  v35 = (unint64_t)((1 << *(_BYTE *)(v0 + 1579)) + 63) >> 6;
  v28 = *(_QWORD *)(v0 + 1480);
  if (v34 < v35)
  {
    v36 = v28 + 56;
    v37 = *(_QWORD *)(v28 + 56 + 8 * v34);
    ++v25;
    if (v37)
    {
LABEL_15:
      v26 = (v37 - 1) & v37;
      v27 = __clz(__rbit64(v37)) + (v25 << 6);
LABEL_10:
      *(_QWORD *)(v0 + 1504) = v26;
      *(_QWORD *)(v0 + 1496) = v25;
      v29 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1472);
      v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344);
      v31 = *(_QWORD *)(v0 + 1192);
      v32 = *(_QWORD *)(v0 + 1168);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1376))(v32, *(_QWORD *)(v28 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1200) + 72) * v27, v31);
      v29(v32, 0, 1, v31);
      if (v30(v32, 1, v31) != 1)
      {
        v33 = *(_QWORD *)(v0 + 1008);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1352))(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1168), *(_QWORD *)(v0 + 1192));
        return swift_task_switch(sub_1005B630C, v33, 0);
      }
      goto LABEL_27;
    }
    v25 = v34 + 1;
    if (v34 + 1 < v35)
    {
      v37 = *(_QWORD *)(v36 + 8 * v25);
      if (v37)
        goto LABEL_15;
      v25 = v34 + 2;
      if (v34 + 2 < v35)
      {
        v37 = *(_QWORD *)(v36 + 8 * v25);
        if (v37)
          goto LABEL_15;
        v38 = v34 + 3;
        if (v38 < v35)
        {
          v37 = *(_QWORD *)(v36 + 8 * v38);
          if (v37)
          {
            v25 = v38;
            goto LABEL_15;
          }
          while (1)
          {
            v25 = v38 + 1;
            if (__OFADD__(v38, 1))
              break;
            if (v25 >= v35)
              goto LABEL_26;
            v37 = *(_QWORD *)(v36 + 8 * v25);
            ++v38;
            if (v37)
              goto LABEL_15;
          }
LABEL_34:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_26:
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1192));
LABEL_27:
  swift_release();
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1256);
  v41 = *(_QWORD *)(v0 + 1232);
  v42 = *(_QWORD *)(v0 + 1192);
  v43 = *(_QWORD *)(v0 + 1016);
  v44 = type metadata accessor for Logger(0);
  sub_10001A9E8(v44, (uint64_t)qword_1011B71C8);
  v39(v41, v40, v42);
  v45 = sub_100030784(v43, v0 + 848);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.info.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v67 = *(_QWORD *)(v0 + 1248);
    typea = v47;
    v48 = *(_QWORD *)(v0 + 1232);
    v70 = *(_QWORD *)(v0 + 1200);
    v49 = *(_QWORD *)(v0 + 1192);
    v50 = swift_slowAlloc(42, -1);
    v68 = swift_slowAlloc(64, -1);
    v73 = v68;
    *(_DWORD *)v50 = 141558787;
    *(_QWORD *)(v0 + 920) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v50 + 4, v50 + 12);
    *(_WORD *)(v50 + 12) = 2081;
    v51 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v49, v51);
    *(_QWORD *)(v0 + 928) = sub_100016940(v52, v53, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease();
    v54 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
    v54(v48, v49);
    *(_WORD *)(v50 + 22) = 2160;
    *(_QWORD *)(v0 + 936) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v50 + 24, v50 + 32);
    *(_WORD *)(v50 + 32) = 2081;
    v55 = *(_QWORD *)(v0 + 872);
    v56 = *(_QWORD *)(v0 + 880);
    sub_10001AA44((_QWORD *)(v0 + 848), v55);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v56 + 8) + 8) + 32))(v55);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v49, v51);
    v59 = v58;
    v54(v67, v49);
    *(_QWORD *)(v0 + 944) = sub_100016940(v57, v59, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v50 + 34, v50 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
    _os_log_impl((void *)&_mh_execute_header, v46, typea, "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{private,mask.hash}s.", (uint8_t *)v50, 0x2Au);
    swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    v54 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 8);
    v54(*(_QWORD *)(v0 + 1232), *(_QWORD *)(v0 + 1192));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
  }

  *(_QWORD *)(v0 + 1544) = v54;
  v60 = *(void **)(v0 + 1336);
  v61 = *(_QWORD *)(v0 + 1016);
  v62 = *(_QWORD *)(v0 + 1008);
  sub_100030784(v0 + 688, v0 + 208);
  sub_100030784(v61, v0 + 768);
  v63 = (_QWORD *)swift_allocObject(&unk_101081470, 120, 7);
  *(_QWORD *)(v0 + 1552) = v63;
  v63[2] = v62;
  v63[3] = v15;
  sub_10000F9FC((__int128 *)(v0 + 208), (uint64_t)(v63 + 4));
  sub_10000F9FC((__int128 *)(v0 + 768), (uint64_t)(v63 + 9));
  v63[14] = v60;
  v64 = async function pointer to unsafeBlocking<A>(_:)[1];
  v65 = v60;
  swift_retain();
  v66 = (_QWORD *)swift_task_alloc(v64);
  *(_QWORD *)(v0 + 1560) = v66;
  *v66 = v0;
  v66[1] = sub_1005B72F8;
  return unsafeBlocking<A>(_:)(v66, sub_1005CCE18, v63, &type metadata for () + 1);
}

uint64_t sub_1005B6D20()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*isa)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  _QWORD *v46;
  os_log_t log;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t type;
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)(v0 + 680) = 0;
  *(_OWORD *)(v0 + 648) = 0u;
  *(_OWORD *)(v0 + 664) = 0u;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1200) + 8))(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1192));
  result = sub_100004048(v0 + 648, (uint64_t *)&unk_1010EE310);
  v2 = *(_QWORD *)(v0 + 1488);
  v3 = *(_QWORD *)(v0 + 1504);
  v4 = *(_QWORD *)(v0 + 1496);
  if (v3)
  {
    v5 = (v3 - 1) & v3;
    v6 = __clz(__rbit64(v3)) | (v4 << 6);
    v7 = *(_QWORD *)(v0 + 1480);
    goto LABEL_3;
  }
  v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  v14 = (unint64_t)((1 << *(_BYTE *)(v0 + 1579)) + 63) >> 6;
  v7 = *(_QWORD *)(v0 + 1480);
  if (v13 < v14)
  {
    v15 = v7 + 56;
    v16 = *(_QWORD *)(v7 + 56 + 8 * v13);
    ++v4;
    if (v16)
    {
LABEL_8:
      v5 = (v16 - 1) & v16;
      v6 = __clz(__rbit64(v16)) + (v4 << 6);
LABEL_3:
      *(_QWORD *)(v0 + 1504) = v5;
      *(_QWORD *)(v0 + 1496) = v4;
      v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1472);
      v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1344);
      v10 = *(_QWORD *)(v0 + 1192);
      v11 = *(_QWORD *)(v0 + 1168);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1376))(v11, *(_QWORD *)(v7 + 48) + *(_QWORD *)(*(_QWORD *)(v0 + 1200) + 72) * v6, v10);
      v8(v11, 0, 1, v10);
      if (v9(v11, 1, v10) != 1)
      {
        v12 = *(_QWORD *)(v0 + 1008);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1352))(*(_QWORD *)(v0 + 1224), *(_QWORD *)(v0 + 1168), *(_QWORD *)(v0 + 1192));
        return swift_task_switch(sub_1005B630C, v12, 0);
      }
      goto LABEL_20;
    }
    v4 = v13 + 1;
    if (v13 + 1 < v14)
    {
      v16 = *(_QWORD *)(v15 + 8 * v4);
      if (v16)
        goto LABEL_8;
      v4 = v13 + 2;
      if (v13 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v4);
        if (v16)
          goto LABEL_8;
        v17 = v13 + 3;
        if (v17 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * v17);
          if (v16)
          {
            v4 = v17;
            goto LABEL_8;
          }
          while (1)
          {
            v4 = v17 + 1;
            if (__OFADD__(v17, 1))
              break;
            if (v4 >= v14)
              goto LABEL_19;
            v16 = *(_QWORD *)(v15 + 8 * v4);
            ++v17;
            if (v16)
              goto LABEL_8;
          }
LABEL_27:
          __break(1u);
          return result;
        }
      }
    }
  }
LABEL_19:
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 1472))(*(_QWORD *)(v0 + 1168), 1, 1, *(_QWORD *)(v0 + 1192));
LABEL_20:
  swift_release();
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1376);
  v19 = *(_QWORD *)(v0 + 1256);
  v20 = *(_QWORD *)(v0 + 1232);
  v21 = *(_QWORD *)(v0 + 1192);
  v22 = *(_QWORD *)(v0 + 1016);
  v23 = type metadata accessor for Logger(0);
  sub_10001A9E8(v23, (uint64_t)qword_1011B71C8);
  v18(v20, v19, v21);
  v24 = sub_100030784(v22, v0 + 848);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v48 = *(_QWORD *)(v0 + 1248);
    type = v26;
    v27 = *(_QWORD *)(v0 + 1232);
    log = *(os_log_t *)(v0 + 1200);
    v51 = v2;
    v28 = *(_QWORD *)(v0 + 1192);
    v29 = swift_slowAlloc(42, -1);
    v49 = swift_slowAlloc(64, -1);
    v52 = v49;
    *(_DWORD *)v29 = 141558787;
    *(_QWORD *)(v0 + 920) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 920, v0 + 928, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2081;
    v30 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v28, v30);
    *(_QWORD *)(v0 + 928) = sub_100016940(v31, v32, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 928, v0 + 936, v29 + 14, v29 + 22);
    swift_bridgeObjectRelease();
    isa = (void (*)(uint64_t, uint64_t))log[1].isa;
    isa(v27, v28);
    *(_WORD *)(v29 + 22) = 2160;
    *(_QWORD *)(v0 + 936) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 936, v0 + 944, v29 + 24, v29 + 32);
    *(_WORD *)(v29 + 32) = 2081;
    v34 = *(_QWORD *)(v0 + 872);
    v35 = *(_QWORD *)(v0 + 880);
    sub_10001AA44((_QWORD *)(v0 + 848), v34);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v35 + 8) + 8) + 32))(v34);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v28, v30);
    v38 = v37;
    v39 = v28;
    v2 = v51;
    isa(v48, v39);
    *(_QWORD *)(v0 + 944) = sub_100016940(v36, v38, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 944, v0 + 952, v29 + 34, v29 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));
    _os_log_impl((void *)&_mh_execute_header, v25, type, "Updating location for subscribers - from beacon store update for beacongroup: %{private,mask.hash}s, beacon: %{private,mask.hash}s.", (uint8_t *)v29, 0x2Au);
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {
    isa = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1200) + 8);
    isa(*(_QWORD *)(v0 + 1232), *(_QWORD *)(v0 + 1192));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 848));

  }
  *(_QWORD *)(v0 + 1544) = isa;
  v40 = *(void **)(v0 + 1336);
  v41 = *(_QWORD *)(v0 + 1016);
  v42 = *(_QWORD *)(v0 + 1008);
  sub_100030784(v0 + 688, v0 + 208);
  sub_100030784(v41, v0 + 768);
  v43 = (_QWORD *)swift_allocObject(&unk_101081470, 120, 7);
  *(_QWORD *)(v0 + 1552) = v43;
  v43[2] = v42;
  v43[3] = v2;
  sub_10000F9FC((__int128 *)(v0 + 208), (uint64_t)(v43 + 4));
  sub_10000F9FC((__int128 *)(v0 + 768), (uint64_t)(v43 + 9));
  v43[14] = v40;
  v44 = async function pointer to unsafeBlocking<A>(_:)[1];
  v45 = v40;
  swift_retain();
  v46 = (_QWORD *)swift_task_alloc(v44);
  *(_QWORD *)(v0 + 1560) = v46;
  *v46 = v0;
  v46[1] = sub_1005B72F8;
  return unsafeBlocking<A>(_:)(v46, sub_1005CCE18, v43, &type metadata for () + 1);
}

uint64_t sub_1005B72F8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1560));
  swift_release();
  return swift_task_switch(sub_1005B7358, 0, 0);
}

uint64_t sub_1005B7358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  (*(void (**)(_QWORD, _QWORD))(v0 + 1544))(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1192));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 688));
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v1 = *(_QWORD *)(v0 + 1016);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B71C8);
  v3 = sub_100030784(v1, v0 + 528);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 1248);
    v44 = *(_QWORD *)(v0 + 1200);
    v7 = *(_QWORD *)(v0 + 1192);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(32, -1);
    v47 = v9;
    *(_DWORD *)v8 = 141558275;
    *(_QWORD *)(v0 + 968) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 968, v0 + 976, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    v10 = *(_QWORD *)(v0 + 552);
    v11 = *(_QWORD *)(v0 + 560);
    sub_10001AA44((_QWORD *)(v0 + 528), v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
    v15 = v14;
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v6, v7);
    *(_QWORD *)(v0 + 960) = sub_100016940(v13, v15, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 960, v0 + 968, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updating location for subscribers - from beacon store update for beacon %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 528));
  }

  v16 = *(void **)(v0 + 1336);
  v17 = *(void **)(v0 + 1328);
  v18 = *(_QWORD *)(v0 + 1016);
  v19 = *(_QWORD *)(*(_QWORD *)(v0 + 1008) + 160);
  v20 = *(_BYTE *)(*(_QWORD *)(v0 + 1024) + *(int *)(v0 + 1568));
  type metadata accessor for Transaction(0);
  sub_100030784(v18, v0 + 568);
  v21 = swift_allocObject(&unk_101081420, 73, 7);
  sub_10000F9FC((__int128 *)(v0 + 568), v21 + 16);
  *(_QWORD *)(v21 + 56) = v19;
  *(_QWORD *)(v21 + 64) = v16;
  *(_BYTE *)(v21 + 72) = v20;
  v22 = v16;
  swift_retain();
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100370, v21);
  swift_release();

  v23 = *(_QWORD *)(v0 + 1256);
  v24 = *(_QWORD *)(v0 + 1248);
  v25 = *(_QWORD *)(v0 + 1240);
  v26 = *(_QWORD *)(v0 + 1232);
  v27 = *(_QWORD *)(v0 + 1224);
  v28 = *(_QWORD *)(v0 + 1216);
  v29 = *(_QWORD *)(v0 + 1184);
  v30 = *(_QWORD *)(v0 + 1176);
  v31 = *(_QWORD *)(v0 + 1168);
  v33 = *(_QWORD *)(v0 + 1160);
  v34 = *(_QWORD *)(v0 + 1152);
  v35 = *(_QWORD *)(v0 + 1144);
  v36 = *(_QWORD *)(v0 + 1136);
  v37 = *(_QWORD *)(v0 + 1128);
  v38 = *(_QWORD *)(v0 + 1120);
  v39 = *(_QWORD *)(v0 + 1112);
  v40 = *(_QWORD *)(v0 + 1104);
  v41 = *(_QWORD *)(v0 + 1096);
  v42 = *(_QWORD *)(v0 + 1088);
  v43 = *(_QWORD *)(v0 + 1080);
  v45 = *(_QWORD *)(v0 + 1056);
  v46 = *(_QWORD *)(v0 + 1048);
  swift_task_dealloc(*(_QWORD *)(v0 + 1280));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B77A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;

  v9 = *(_QWORD *)(a1 + 160);
  v10 = sub_10001A9A8(&qword_1010ED2A0);
  v11 = swift_allocObject(v10, 88, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100E22B00;
  sub_100030784(a3, v11 + 32);
  v12 = a4[3];
  v13 = a4[4];
  sub_10001AA44(a4, v12);
  *(_QWORD *)(v11 + 72) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 176))(v12, v13);
  *(_QWORD *)(v11 + 80) = a5;
  v14 = *(_QWORD *)(v9 + 56);
  v15 = a5;
  v16 = sub_10001A9A8(&qword_101100380);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005CCE44, v9, v14, &type metadata for () + 1, v16);
  v17 = sub_1005AE5A4(a2);
  type metadata accessor for Transaction(0);
  v18 = swift_allocObject(&unk_1010814E8, 64, 7);
  *(_QWORD *)(v18 + 16) = v9;
  *(_QWORD *)(v18 + 24) = v20;
  *(_QWORD *)(v18 + 32) = v17;
  *(_BYTE *)(v18 + 40) = 2;
  *(_QWORD *)(v18 + 48) = v11;
  *(_QWORD *)(v18 + 56) = a2;
  swift_retain();
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(a2);
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations", 47, 2, &unk_101100390, v18);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1005B7920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4[25] = a4;
  v5 = type metadata accessor for BeaconEstimatedLocation(0);
  v4[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[27] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[28] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[29] = swift_task_alloc(v8);
  v4[30] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_101100320);
  v4[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ObservedAdvertisement.Location(0);
  v4[32] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[33] = v11;
  v4[34] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EF3F8);
  v4[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  v4[36] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v4[37] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[38] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v4[39] = v16;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[40] = swift_task_alloc(v17);
  v4[41] = swift_task_alloc(v17);
  v4[42] = swift_task_alloc(v17);
  v18 = type metadata accessor for ObservedAdvertisement(0);
  v4[43] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[44] = v19;
  v4[45] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010F0F00);
  v4[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101100330);
  v4[47] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[48] = v22;
  v4[49] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_101100338);
  v4[50] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v4[51] = v24;
  v4[52] = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_101100340);
  v4[53] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v4[54] = v26;
  v4[55] = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005B7B40, 0, 0);
}

uint64_t sub_1005B7B40()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 448) = v2;
    *v2 = v0;
    v2[1] = sub_1005B7C2C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B7C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B7C88, 0, 0);
}

uint64_t sub_1005B7C88()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 456);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 408);
    v3 = *(_QWORD *)(v0 + 416);
    v6 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 400);
    v7 = *(_QWORD *)(v0 + 376);
    v8 = *(_QWORD *)(v0 + 384);
    v9 = *(_QWORD *)(v0 + 344);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v8 + 104))(v6, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v7);
    AsyncStream.init(_:bufferingPolicy:_:)(v9, v6, sub_1005CC954, v2, v9);
    AsyncStream.makeAsyncIterator()(v5);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 464) = v10;
    *v10 = v0;
    v10[1] = sub_1005B7E54;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 368), 0, 0, *(_QWORD *)(v0 + 424));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v12 = *(_QWORD *)(v0 + 416);
    v13 = *(_QWORD *)(v0 + 392);
    v15 = *(_QWORD *)(v0 + 360);
    v14 = *(_QWORD *)(v0 + 368);
    v17 = *(_QWORD *)(v0 + 328);
    v16 = *(_QWORD *)(v0 + 336);
    v18 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 280);
    v19 = *(_QWORD *)(v0 + 288);
    v21 = *(_QWORD *)(v0 + 272);
    v22 = *(_QWORD *)(v0 + 248);
    v23 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 440));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005B7E54()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 464));
  return swift_task_switch(sub_1005B7EA8, 0, 0);
}

uint64_t sub_1005B7EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 368);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 352) + 48))(v1, 1, *(_QWORD *)(v0 + 344)) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 432) + 8))(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));
    swift_release();
    v2 = *(_QWORD *)(v0 + 416);
    v3 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 360);
    v4 = *(_QWORD *)(v0 + 368);
    v7 = *(_QWORD *)(v0 + 328);
    v6 = *(_QWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 320);
    v10 = *(_QWORD *)(v0 + 280);
    v9 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 272);
    v14 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 240);
    v16 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 440));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 200);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 360), type metadata accessor for ObservedAdvertisement);
    return swift_task_switch(sub_1005B8018, v12, 0);
  }
}

uint64_t sub_1005B8018()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 544) = *(_BYTE *)(*(_QWORD *)(v0 + 200) + 200);
  return swift_task_switch(sub_1005B8038, 0, 0);
}

uint64_t sub_1005B8038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _OWORD *v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 360);
  if ((*(_BYTE *)(v0 + 544) & 1) == 0)
  {
    sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement);
LABEL_8:
    v13 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 464) = v13;
    *v13 = v0;
    v13[1] = sub_1005B7E54;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 368), 0, 0, *(_QWORD *)(v0 + 424));
  }
  v2 = *(_QWORD *)(v0 + 280);
  sub_10000F9B8(v1 + *(int *)(*(_QWORD *)(v0 + 344) + 52), v2, &qword_1010EF3F8);
  v3 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 280);
  v7 = *(_QWORD *)(v0 + 288);
  if (v4 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 280), &qword_1010EF3F8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v5);
LABEL_6:
    v10 = *(_QWORD *)(v0 + 288);
    sub_1000126B0(*(_QWORD *)(v0 + 360), type metadata accessor for ObservedAdvertisement);
    v11 = &qword_1010ED860;
    v12 = v10;
LABEL_7:
    sub_100004048(v12, v11);
    goto LABEL_8;
  }
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 472) = v9;
  v9(v7, v8, v5);
  sub_1000126B0(v8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
    goto LABEL_6;
  v15 = *(_QWORD *)(v0 + 360);
  v16 = *(_QWORD *)(v0 + 336);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 296);
  v19 = *(_QWORD *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 264);
  v22 = *(_QWORD *)(v0 + 248);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 304) + 32);
  *(_QWORD *)(v0 + 480) = v23;
  v23(v16, v19, v18);
  sub_10000F9B8(v15 + *(int *)(v17 + 48), v22, (uint64_t *)&unk_101100320);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20) == 1)
  {
    v24 = *(_QWORD *)(v0 + 360);
    v25 = *(_QWORD *)(v0 + 248);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 296));
    sub_1000126B0(v24, type metadata accessor for ObservedAdvertisement);
    v11 = (uint64_t *)&unk_101100320;
    v12 = v25;
    goto LABEL_7;
  }
  v26 = *(_QWORD *)(v0 + 336);
  v27 = *(_QWORD *)(v0 + 296);
  v28 = *(uint64_t **)(v0 + 272);
  v29 = *(_QWORD *)(v0 + 256);
  v30 = *(_OWORD **)(v0 + 240);
  v31 = *(int **)(v0 + 208);
  v32 = sub_1000126EC(*(_QWORD *)(v0 + 248), (uint64_t)v28, type metadata accessor for ObservedAdvertisement.Location);
  UUID.init()(v32);
  v9((uint64_t)v30 + v31[6], v26, v27);
  v33 = *v28;
  v34 = v28[1];
  v35 = v28[2];
  v36 = (char *)v28 + *(int *)(v29 + 28);
  v37 = (char *)v30 + v31[10];
  v38 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(void (**)(char *, char *, uint64_t))(v39 + 16);
  v40(v37, v36, v38);
  v41 = (char *)v30 + v31[12];
  v40(v41, v36, v38);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v38);
  *v30 = xmmword_100E22FC0;
  *(_QWORD *)((char *)v30 + v31[7]) = v33;
  *(_QWORD *)((char *)v30 + v31[8]) = v34;
  *(_QWORD *)((char *)v30 + v31[9]) = v35;
  *((_BYTE *)v30 + v31[11]) = 2;
  *(_QWORD *)((char *)v30 + v31[13]) = 0;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v42 = *(_QWORD *)(v0 + 328);
  v43 = *(_QWORD *)(v0 + 336);
  v44 = *(_QWORD *)(v0 + 296);
  v45 = type metadata accessor for Logger(0);
  sub_10001A9E8(v45, (uint64_t)qword_1011B71C8);
  v46 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v9)(v42, v43, v44);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.info.getter(v47);
  v49 = os_log_type_enabled(v47, v48);
  v50 = *(_QWORD *)(v0 + 328);
  v51 = *(_QWORD *)(v0 + 296);
  v52 = *(_QWORD *)(v0 + 304);
  if (v49)
  {
    v53 = swift_slowAlloc(22, -1);
    v54 = swift_slowAlloc(32, -1);
    v59 = v54;
    *(_DWORD *)v53 = 141558275;
    *(_QWORD *)(v53 + 4) = 1752392040;
    *(_WORD *)(v53 + 12) = 2081;
    v55 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v51, v55);
    *(_QWORD *)(v53 + 14) = sub_100016940(v56, v57, &v59);
    swift_bridgeObjectRelease();
    v58 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v58(v50, v51);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Saving location for beacon - from observation store update: beacon: %{private,mask.hash}s.", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    v58 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
    v58(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 296));
  }

  *(_QWORD *)(v0 + 488) = v58;
  return swift_task_switch(sub_1005B8518, *(_QWORD *)(v0 + 200), 0);
}

uint64_t sub_1005B8518()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 496) = v2;
    *v2 = v0;
    v2[1] = sub_1005B85BC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B85BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B861C, v3, 0);
}

uint64_t sub_1005B861C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)();
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0[63];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 12);
  if (v1)
  {
    v2 = sub_1005B86A4;
  }
  else
  {
    v3 = sub_1005C4B54();
    v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0, 0);
    v0[67] = v4;
    *v5 = 1;
    swift_willThrow(v4);
    v2 = sub_1005B899C;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005B86A4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 480);
  v3 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 472))(v2, *(_QWORD *)(v0 + 336), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_101081380, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 512) = v8;
  v1(v8 + v7, v2, v4);
  return swift_task_switch(sub_1005B8738, *(_QWORD *)(v0 + 504), 0);
}

uint64_t sub_1005B8738()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[63];
  v2 = (void (*)(uint64_t))v0[64];
  v3 = v0[29];
  v5 = v0[27];
  v4 = v0[28];
  sub_10005972C(v0[30], v3, type metadata accessor for BeaconEstimatedLocation);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = (v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject(&unk_1010813A8, v8 + 16, v6 | 7);
  v0[65] = v9;
  *(_QWORD *)(v9 + 16) = v1;
  sub_1000126EC(v3, v9 + v7, type metadata accessor for BeaconEstimatedLocation);
  v10 = (void (**)(uint64_t))(v9 + v8);
  *v10 = sub_1005CC9BC;
  v10[1] = v2;
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[66] = v12;
  *v12 = v0;
  v12[1] = sub_1005B883C;
  return unsafeBlocking<A>(_:)(v12, sub_1005C4C18, v9, &type metadata for () + 1);
}

uint64_t sub_1005B883C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 528));
  swift_release();
  return swift_task_switch(sub_1005B8898, *(_QWORD *)(v1 + 504), 0);
}

uint64_t sub_1005B8898()
{
  swift_release();
  swift_release();
  return swift_task_switch(sub_1005B88DC, 0, 0);
}

uint64_t sub_1005B88DC()
{
  uint64_t *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;

  v1 = (void (*)(uint64_t, uint64_t))v0[61];
  v2 = v0[45];
  v3 = v0[42];
  v4 = v0[37];
  v5 = v0[34];
  sub_1000126B0(v0[30], type metadata accessor for BeaconEstimatedLocation);
  sub_1000126B0(v5, type metadata accessor for ObservedAdvertisement.Location);
  v1(v3, v4);
  sub_1000126B0(v2, type metadata accessor for ObservedAdvertisement);
  v6 = (uint64_t **)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[58] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_1005B7E54;
  return AsyncStream.Iterator.next(isolation:)(v0[46], 0, 0, v0[53]);
}

uint64_t sub_1005B899C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 488);
  v3 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 288);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 240);
  v17 = *(_QWORD *)(v0 + 280);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 232);
  swift_release();
  sub_1000126B0(v9, type metadata accessor for BeaconEstimatedLocation);
  sub_1000126B0(v8, type metadata accessor for ObservedAdvertisement.Location);
  v1(v6, v7);
  sub_1000126B0(v5, type metadata accessor for ObservedAdvertisement);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc(v2);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v8);
  swift_task_dealloc(v18);
  swift_task_dealloc(v9);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1005B8AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE v28[12];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = sub_10001A9A8(&qword_1010F4A20);
  v5 = __chkstk_darwin(v4);
  v7 = &v28[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v9 = &v28[-v8];
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B71C8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v15 = sub_10000F9B8(a1, (uint64_t)v9, &qword_1010F4A20);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(32, -1);
    v30 = v4;
    v20 = v19;
    v21 = swift_slowAlloc(64, -1);
    v31 = v21;
    *(_DWORD *)v20 = 141558531;
    v32 = 1752392040;
    v33 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v22 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = v18;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v10, v22);
    v32 = sub_100016940(v23, v24, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v20 + 22) = 2080;
    sub_10000F9B8((uint64_t)v9, (uint64_t)v7, &qword_1010F4A20);
    v25 = String.init<A>(describing:)(v7, v30);
    v32 = sub_100016940(v25, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v9, &qword_1010F4A20);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v29, "Done saving location for beacon (from observation store update): %{private,mask.hash}s,\nresult: %s.", (uint8_t *)v20, 0x20u);
    v27 = v31;
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
    sub_100004048((uint64_t)v9, &qword_1010F4A20);
  }

}

void sub_1005B8E10()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  v1 = v0;
  v2 = *(void **)(v0 + 192);
  if (v2)
  {
    v3 = v2;
    CurrentLocationMonitor.forceStopMonitor()();

    v2 = *(void **)(v1 + 192);
  }
  *(_QWORD *)(v1 + 192) = 0;

  *(_BYTE *)(v1 + 200) = 0;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B71C8);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Location monitor stopped.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

}

uint64_t sub_1005B8F08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[22] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[23] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[24] = v3;
  v1[25] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for BeaconIdentifier(0);
  v1[26] = v4;
  v1[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005B8F8C, v0, 0);
}

uint64_t sub_1005B8F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (__cdecl *v9)();
  uint64_t v10;

  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B71C8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 168) = sub_100016940(0xD000000000000019, 0x8000000100EDC6C0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v9 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v8 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 224) = v8;
    *v8 = v0;
    v8[1] = sub_1005B91C8;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B91C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B9228, v3, 0);
}

uint64_t sub_1005B9228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1005B9294, *(_QWORD *)(v0 + 232), 0);
  v3 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B9294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 240) = v3;
  v4 = sub_10001A9A8(&qword_1010F0B20);
  *v3 = v0;
  v3[1] = sub_1005B931C;
  return unsafeBlocking<A>(_:)(v0 + 160, sub_10001CB10, v1, v4);
}

uint64_t sub_1005B931C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 240));
  swift_release();
  return swift_task_switch(sub_1005B9374, *(_QWORD *)(v1 + 232), 0);
}

uint64_t sub_1005B9374()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[22];
  swift_release();
  v0[31] = v0[20];
  return swift_task_switch(sub_1005B93BC, v1, 0);
}

uint64_t sub_1005B93BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uid_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 256) = v2;
  if (v2)
  {
    *(_QWORD *)(v0 + 264) = 0;
    v3 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 184);
    sub_100030784(v1 + 32, v0 + 96);
    v7 = getuid();
    sub_100A06500(v7);
    v8 = *(_QWORD *)(v0 + 120);
    v9 = *(_QWORD *)(v0 + 128);
    sub_10001AA44((_QWORD *)(v0 + 96), v8);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + 32))(v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v3, v4, v6);
    v10 = *(_QWORD *)(v0 + 120);
    v11 = *(_QWORD *)(v0 + 128);
    v12 = sub_10001AA44((_QWORD *)(v0 + 96), v10);
    v13 = (_QWORD *)swift_task_alloc(dword_1011004A4);
    *(_QWORD *)(v0 + 272) = v13;
    *v13 = v0;
    v13[1] = sub_1005B94FC;
    return sub_1005C6FA4(*(_QWORD *)(v0 + 216), (uint64_t)v12, *(_QWORD *)(v0 + 176), v10, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    v15 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005B94FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;

  v1 = *(_QWORD **)v0;
  v7 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  v2 = v1[15];
  v3 = v1[16];
  v4 = sub_10001AA44(v1 + 12, v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1011004CC);
  v1[35] = v5;
  *v5 = v7;
  v5[1] = sub_1005B9594;
  return sub_1005CA5A0(v1[27], (uint64_t)v4, v1[22], v2, v3);
}

uint64_t sub_1005B9594()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  return swift_task_switch(sub_1005B95EC, v1, 0);
}

uint64_t sub_1005B95EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uid_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 216), type metadata accessor for BeaconIdentifier);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 264) + 1;
    *(_QWORD *)(v0 + 264) = v5;
    v6 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 184);
    sub_100030784(*(_QWORD *)(v0 + 248) + 40 * v5 + 32, v0 + 96);
    v10 = getuid();
    sub_100A06500(v10);
    v11 = *(_QWORD *)(v0 + 120);
    v12 = *(_QWORD *)(v0 + 128);
    sub_10001AA44((_QWORD *)(v0 + 96), v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v7, v9);
    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 128);
    v15 = sub_10001AA44((_QWORD *)(v0 + 96), v13);
    v16 = (_QWORD *)swift_task_alloc(dword_1011004A4);
    *(_QWORD *)(v0 + 272) = v16;
    *v16 = v0;
    v16[1] = sub_1005B94FC;
    return sub_1005C6FA4(*(_QWORD *)(v0 + 216), (uint64_t)v15, *(_QWORD *)(v0 + 176), v13, v14);
  }
}

uint64_t sub_1005B975C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 120) = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v1 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005B97B8, v0, 0);
}

uint64_t sub_1005B97B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (__cdecl *v14)();

  v1 = *(_QWORD *)(v0 + 120);
  if (*(_QWORD *)(v1 + 176))
  {
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B71C8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Already subscribed to device events.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 128);
    v9 = type metadata accessor for TaskPriority(0);
    *(_QWORD *)(v0 + 136) = v9;
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
    *(_QWORD *)(v0 + 144) = v10;
    v10(v8, 1, 1, v9);
    v11 = (_QWORD *)swift_allocObject(&unk_1010815D8, 40, 7);
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = v1;
    swift_retain();
    v12 = sub_100791A98(v8, (uint64_t)&unk_101100400, (uint64_t)v11);
    sub_100004048(v8, &qword_1010F46C0);
    *(_QWORD *)(v1 + 176) = v12;
    swift_release();
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
      sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
      v14 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
      v13 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
      *(_QWORD *)(v0 + 152) = v13;
      *v13 = v0;
      v13[1] = sub_1005B9A14;
      return v14();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1005B9A14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B9A74, v3, 0);
}

uint64_t sub_1005B9A74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 160);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (!*(_QWORD *)(v3 + 184))
    {
      v5 = *(_QWORD *)(v0 + 120);
      v4 = *(_QWORD *)(v0 + 128);
      (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 144))(v4, 1, 1, *(_QWORD *)(v0 + 136));
      v6 = (_QWORD *)swift_allocObject(&unk_101081600, 48, 7);
      v6[2] = 0;
      v6[3] = 0;
      v6[4] = v2;
      v6[5] = v5;
      swift_retain();
      v7 = sub_100791A98(v4, (uint64_t)&unk_101100410, (uint64_t)v6);
      sub_100004048(v4, &qword_1010F46C0);
      *(_QWORD *)(v3 + 184) = v7;
    }
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B9B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[28] = a4;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v4[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v4[30] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[31] = v7;
  v4[32] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v4[33] = v8;
  v4[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeviceEvent(0);
  v4[35] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[36] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v11);
  v4[38] = swift_task_alloc(v11);
  v4[39] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EF488);
  v4[40] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1011004B0);
  v4[41] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[42] = v14;
  v4[43] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1011004B8);
  v4[44] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[45] = v16;
  v4[46] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1011004C0);
  v4[47] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[48] = v18;
  v4[49] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005B9CE8, 0, 0);
}

uint64_t sub_1005B9CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;

  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B71C8);
  *(_QWORD *)(v0 + 400) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Location fetch service subscribing to device events.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 224);

  return swift_task_switch(sub_1005B9DD8, v6, 0);
}

uint64_t sub_1005B9DD8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 408) = v2;
    *v2 = v0;
    v2[1] = sub_1005B9EC4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005B9EC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B9F24, v3, 0);
}

uint64_t sub_1005B9F24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)();
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0[52];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
  {
    v2 = sub_1005B9FA8;
  }
  else
  {
    v3 = sub_1005C4B54();
    v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0, 0);
    v0[53] = v4;
    *v5 = 0;
    swift_willThrow(v4);
    v2 = sub_1005BA09C;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005B9FA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[52];
  v3 = v0[45];
  v2 = v0[46];
  v5 = v0[43];
  v4 = v0[44];
  v6 = v0[35];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[42] + 104))(v5, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v0[41]);
  AsyncStream.init(_:bufferingPolicy:_:)(v6, v5, sub_1005CD694, v1, v6);
  swift_release();
  AsyncStream.makeAsyncIterator()(v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v0[54] = 0;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[55] = v7;
  *v7 = v0;
  v7[1] = sub_1005BA290;
  return AsyncStream.Iterator.next(isolation:)(v0[40], 0, 0, v0[47]);
}

uint64_t sub_1005BA09C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 424);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 216) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to register for device events: %{public}@.", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 368);
  v10 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 312);
  v11 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 296);
  v13 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 272);
  v16 = *(_QWORD *)(v0 + 256);
  v17 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 392));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BA290()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 440));
  return swift_task_switch(sub_1005BA2E4, 0, 0);
}

uint64_t sub_1005BA2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 320);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 288) + 48))(v1, 1, *(_QWORD *)(v0 + 280)) == 1)
  {
    v2 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 384) + 8))(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ended stream of device events.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    goto LABEL_13;
  }
  v7 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 312);
  sub_1000126EC(v1, v6, type metadata accessor for DeviceEvent);
  v8 = sub_10005972C(v6, v7, type metadata accessor for DeviceEvent);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 304);
  if (v11)
  {
    v13 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(32, -1);
    v44 = v42;
    *(_DWORD *)v13 = 141558275;
    *(_QWORD *)(v13 + 4) = 1752392040;
    *(_WORD *)(v13 + 12) = 2081;
    v14 = type metadata accessor for UUID(0);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    *(_QWORD *)(v0 + 200) = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    *(_QWORD *)(v0 + 208) = v16;
    v17._countAndFlagsBits = 47;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v13 + 14) = sub_100016940(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), &v44);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Subscription updated device event for beacon: %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for DeviceEvent);
  }

  v19 = *(_QWORD *)(v0 + 432);
  static Task<>.checkCancellation()(v20);
  if (v19)
  {
    v22 = *(_QWORD *)(v0 + 384);
    v21 = *(_QWORD *)(v0 + 392);
    v23 = *(_QWORD *)(v0 + 376);
    sub_1000126B0(*(_QWORD *)(v0 + 312), type metadata accessor for DeviceEvent);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    swift_errorRetain(v19);
    v24 = swift_errorRetain(v19);
    v3 = Logger.logObject.getter(v24);
    v25 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138543362;
      swift_errorRetain(v19);
      v28 = _swift_stdlib_bridgeErrorToNSError(v19);
      *(_QWORD *)(v0 + 216) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v26 + 4, v26 + 12);
      *v27 = v28;
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v3, v25, "Failed to register for device events: %{public}@.", v26, 0xCu);
      v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease(v19);
LABEL_14:
      v33 = *(_QWORD *)(v0 + 368);
      v34 = *(_QWORD *)(v0 + 344);
      v36 = *(_QWORD *)(v0 + 312);
      v35 = *(_QWORD *)(v0 + 320);
      v38 = *(_QWORD *)(v0 + 296);
      v37 = *(_QWORD *)(v0 + 304);
      v39 = *(_QWORD *)(v0 + 272);
      v40 = *(_QWORD *)(v0 + 256);
      v41 = *(_QWORD *)(v0 + 232);
      swift_task_dealloc(*(_QWORD *)(v0 + 392));
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v39);
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      v32 = *(uint64_t (**)(void))(v0 + 8);
      return v32();
    }
    swift_errorRelease(v19);
    swift_errorRelease(v19);
    swift_errorRelease(v19);
LABEL_13:

    goto LABEL_14;
  }
  sub_10005972C(*(_QWORD *)(v0 + 312) + *(int *)(*(_QWORD *)(v0 + 280) + 36), *(_QWORD *)(v0 + 272), type metadata accessor for BeaconIdentifier);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v43 = (uint64_t (*)(void))((char *)&dword_1010EBC30 + dword_1010EBC30);
    v31 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 448) = v31;
    *v31 = v0;
    v31[1] = sub_1005BA810;
    v32 = v43;
    return v32();
  }
  __break(1u);
  return result;
}

uint64_t sub_1005BA810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005BA86C, 0, 0);
}

uint64_t sub_1005BA86C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 456))
  {
    v2 = *(_QWORD *)(v0 + 264);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 496) = *(_DWORD *)(v2 + 20);
    return swift_task_switch(sub_1005BABC4, *(_QWORD *)(v0 + 456), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_1005C4B54();
    v5 = swift_allocError(&type metadata for LocationFetchService.Error, v4, 0, 0);
    *v6 = 2;
    swift_willThrow(v5);
    sub_10005972C(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296), type metadata accessor for DeviceEvent);
    swift_errorRetain(v5);
    v7 = swift_errorRetain(v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 312);
    v12 = *(_QWORD *)(v0 + 296);
    if (v10)
    {
      v26 = *(_QWORD *)(v0 + 272);
      v13 = swift_slowAlloc(32, -1);
      v25 = v11;
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      v15 = swift_slowAlloc(32, -1);
      v27 = v15;
      *(_DWORD *)v13 = 138543875;
      swift_errorRetain(v5);
      v16 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v13 + 4) = v16;
      *v14 = v16;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      *(_WORD *)(v13 + 12) = 2160;
      *(_QWORD *)(v13 + 14) = 1752392040;
      *(_WORD *)(v13 + 22) = 2081;
      v17 = type metadata accessor for UUID(0);
      v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
      *(_QWORD *)(v13 + 24) = sub_100016940(v19, v20, &v27);
      swift_bridgeObjectRelease();
      sub_1000126B0(v12, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No beacon found to update device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v14, 1, v21);
      swift_slowDealloc(v14, -1, -1);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v5);
      sub_1000126B0(v26, type metadata accessor for BeaconIdentifier);
      v22 = v25;
    }
    else
    {
      v23 = *(_QWORD *)(v0 + 272);

      sub_1000126B0(v12, type metadata accessor for DeviceEvent);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      sub_1000126B0(v23, type metadata accessor for BeaconIdentifier);
      v22 = v11;
    }
    sub_1000126B0(v22, type metadata accessor for DeviceEvent);
    *(_QWORD *)(v0 + 432) = 0;
    v24 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 440) = v24;
    *v24 = v0;
    v24[1] = sub_1005BA290;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 320), 0, 0, *(_QWORD *)(v0 + 376));
  }
}

uint64_t sub_1005BABC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(int *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = (_QWORD *)swift_task_alloc(dword_10110CD9C);
  *(_QWORD *)(v0 + 464) = v3;
  *v3 = v0;
  v3[1] = sub_1005BAC2C;
  return sub_1008FBBC8(*(_QWORD *)(v0 + 232), v2 + v1);
}

uint64_t sub_1005BAC2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 464);
  *(_QWORD *)(*(_QWORD *)v1 + 472) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1005BB034;
  else
    v3 = sub_1005BAC90;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1005BAC90()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0[29];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[31] + 48))(v1, 1, v0[30]) == 1)
  {
    swift_release();
    sub_100004048(v1, (uint64_t *)&unk_1010EDC50);
    v2 = sub_1005C4B54();
    v3 = swift_allocError(&type metadata for LocationFetchService.Error, v2, 0, 0);
    *v4 = 2;
    swift_willThrow(v3);
    sub_10005972C(v0[39], v0[37], type metadata accessor for DeviceEvent);
    swift_errorRetain(v3);
    v5 = swift_errorRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = v0[39];
    v10 = v0[37];
    if (v8)
    {
      v26 = v0[34];
      v11 = swift_slowAlloc(32, -1);
      v25 = v9;
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      v13 = swift_slowAlloc(32, -1);
      v27 = v13;
      *(_DWORD *)v11 = 138543875;
      swift_errorRetain(v3);
      v14 = _swift_stdlib_bridgeErrorToNSError(v3);
      *(_QWORD *)(v11 + 4) = v14;
      *v12 = v14;
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      *(_WORD *)(v11 + 12) = 2160;
      *(_QWORD *)(v11 + 14) = 1752392040;
      *(_WORD *)(v11 + 22) = 2081;
      v15 = type metadata accessor for UUID(0);
      v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      *(_QWORD *)(v11 + 24) = sub_100016940(v17, v18, &v27);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for DeviceEvent);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No beacon found to update device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v12, 1, v19);
      swift_slowDealloc(v12, -1, -1);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v3);
      sub_1000126B0(v26, type metadata accessor for BeaconIdentifier);
      v20 = v25;
    }
    else
    {
      v23 = v0[34];

      sub_1000126B0(v10, type metadata accessor for DeviceEvent);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      sub_1000126B0(v23, type metadata accessor for BeaconIdentifier);
      v20 = v9;
    }
    sub_1000126B0(v20, type metadata accessor for DeviceEvent);
    v0[54] = 0;
    v24 = (uint64_t **)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[55] = (uint64_t)v24;
    *v24 = v0;
    v24[1] = (uint64_t *)sub_1005BA290;
    return AsyncStream.Iterator.next(isolation:)(v0[40], 0, 0, v0[47]);
  }
  else
  {
    sub_1000126EC(v1, v0[32], type metadata accessor for LocalFindableAccessoryRecord);
    v21 = (uint64_t **)swift_task_alloc(dword_10110044C);
    v0[60] = (uint64_t)v21;
    *v21 = v0;
    v21[1] = (uint64_t *)sub_1005BB318;
    return sub_1005C50B4(v0[34], v0[32], v0[28]);
  }
}

uint64_t sub_1005BB034()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  swift_release();
  v1 = v0[59];
  sub_10005972C(v0[39], v0[37], type metadata accessor for DeviceEvent);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = v0[39];
  v7 = v0[37];
  if (v5)
  {
    v22 = v0[34];
    v8 = swift_slowAlloc(32, -1);
    v21 = v6;
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v23 = v10;
    *(_DWORD *)v8 = 138543875;
    swift_errorRetain(v1);
    v11 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v8 + 4) = v11;
    *v9 = v11;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v8 + 12) = 2160;
    *(_QWORD *)(v8 + 14) = 1752392040;
    *(_WORD *)(v8 + 22) = 2081;
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    *(_QWORD *)(v8 + 24) = sub_100016940(v14, v15, &v23);
    swift_bridgeObjectRelease();
    sub_1000126B0(v7, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "No beacon found to update device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v8, 0x20u);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v16);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v1);
    sub_1000126B0(v22, type metadata accessor for BeaconIdentifier);
    v17 = v21;
  }
  else
  {
    v18 = v0[34];

    sub_1000126B0(v7, type metadata accessor for DeviceEvent);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_1000126B0(v18, type metadata accessor for BeaconIdentifier);
    v17 = v6;
  }
  sub_1000126B0(v17, type metadata accessor for DeviceEvent);
  v0[54] = 0;
  v19 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[55] = v19;
  *v19 = v0;
  v19[1] = sub_1005BA290;
  return AsyncStream.Iterator.next(isolation:)(v0[40], 0, 0, v0[47]);
}

uint64_t sub_1005BB318()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc((*v0)[60]);
  v2 = (uint64_t **)swift_task_alloc(dword_101100454);
  v1[61] = (uint64_t)v2;
  *v2 = v4;
  v2[1] = (uint64_t *)sub_1005BB388;
  return sub_1005C8ED4(v1[34], v1[32], v1[28]);
}

uint64_t sub_1005BB388()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 488));
  return swift_task_switch(sub_1005BB3DC, 0, 0);
}

uint64_t sub_1005BB3DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[39];
  v2 = v0[34];
  v3 = v0[32];
  swift_release();
  sub_1000126B0(v3, type metadata accessor for LocalFindableAccessoryRecord);
  sub_1000126B0(v2, type metadata accessor for BeaconIdentifier);
  sub_1000126B0(v1, type metadata accessor for DeviceEvent);
  v0[54] = v0[59];
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[55] = v4;
  *v4 = v0;
  v4[1] = sub_1005BA290;
  return AsyncStream.Iterator.next(isolation:)(v0[40], 0, 0, v0[47]);
}

uint64_t sub_1005BB490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5[14] = a4;
  v5[15] = a5;
  v7 = type metadata accessor for BeaconIdentifier(0);
  v5[16] = v7;
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v5[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v5[19] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[20] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[21] = swift_task_alloc(v11);
  v5[22] = swift_task_alloc(v11);
  v12 = type metadata accessor for CloudStorageStore.State(0);
  v5[23] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[24] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[25] = swift_task_alloc(v14);
  v5[26] = swift_task_alloc(v14);
  v15 = sub_10001A9A8((uint64_t *)&unk_101100420);
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1011088A0);
  v5[28] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[29] = v17;
  v5[30] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_101100430);
  v5[31] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v5[32] = v19;
  v5[33] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_101100438);
  v5[34] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v5[35] = v21;
  v5[36] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005BB62C, a4, 0);
}

uint64_t sub_1005BB62C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 112) + 128);
  *(_QWORD *)(v0 + 296) = v1;
  return swift_task_switch(sub_1005BB648, v1, 0);
}

uint64_t sub_1005BB648()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[37];
  v3 = v0[29];
  v2 = v0[30];
  v4 = v0[28];
  v5 = v0[23];
  v6 = swift_allocObject(&unk_101081628, 24, 7);
  swift_weakInit(v6 + 16, v1);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v4);
  AsyncStream.init(_:bufferingPolicy:_:)(v5, v2, sub_1005CD3D8, v6, v5);
  swift_release();
  return swift_task_switch(sub_1005BB710, 0, 0);
}

uint64_t sub_1005BB710()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[32];
  v1 = v0[33];
  v3 = v0[31];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[38] = 0;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[39] = v4;
  *v4 = v0;
  v4[1] = sub_1005BB7A0;
  return AsyncStream.Iterator.next(isolation:)(v0[27], 0, 0, v0[34]);
}

uint64_t sub_1005BB7A0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  return swift_task_switch(sub_1005BB7F4, 0, 0);
}

uint64_t sub_1005BB7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uid_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 48))(v1, 1, *(_QWORD *)(v0 + 184)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 288);
    v3 = *(_QWORD *)(v0 + 264);
    v4 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 208);
    v8 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 144);
    v60 = *(_QWORD *)(v0 + 136);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(v2, *(_QWORD *)(v0 + 272));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v60);
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v11 = *(_QWORD *)(v0 + 304);
  v12 = sub_1000126EC(v1, *(_QWORD *)(v0 + 208), type metadata accessor for CloudStorageStore.State);
  static Task<>.checkCancellation()(v12);
  *(_QWORD *)(v0 + 320) = v11;
  if (v11)
  {
    v14 = *(_QWORD *)(v0 + 280);
    v13 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 264);
    v15 = *(_QWORD *)(v0 + 272);
    v17 = *(_QWORD *)(v0 + 240);
    v19 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 216);
    v20 = *(_QWORD *)(v0 + 200);
    v57 = *(_QWORD *)(v0 + 176);
    v58 = *(_QWORD *)(v0 + 168);
    v59 = *(_QWORD *)(v0 + 144);
    v61 = *(_QWORD *)(v0 + 136);
    sub_1000126B0(v19, type metadata accessor for CloudStorageStore.State);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_task_dealloc(v13);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 184);
  sub_10005972C(*(_QWORD *)(v0 + 208), v22, type metadata accessor for CloudStorageStore.State);
  if (swift_getEnumCaseMultiPayload(v22, v23))
  {
    v24 = *(_QWORD *)(v0 + 200);
    sub_1000126B0(*(_QWORD *)(v0 + 208), type metadata accessor for CloudStorageStore.State);
    sub_1000126B0(v24, type metadata accessor for CloudStorageStore.State);
LABEL_14:
    *(_QWORD *)(v0 + 304) = *(_QWORD *)(v0 + 320);
    v49 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 312) = v49;
    *v49 = v0;
    v49[1] = sub_1005BB7A0;
    return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 216), 0, 0, *(_QWORD *)(v0 + 272));
  }
  v25 = *(_QWORD *)(v0 + 152);
  v26 = *(_QWORD *)(v0 + 160);
  v27 = *(_QWORD *)(v0 + 144);
  sub_10000F9FC(*(__int128 **)(v0 + 200), v0 + 16);
  sub_100030784(v0 + 16, v0 + 56);
  v28 = sub_10001A9A8(&qword_101100440);
  v29 = swift_dynamicCast(v27, v0 + 56, v28, v25, 6);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v26 + 56);
  if ((v29 & 1) == 0)
  {
    v47 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 144);
    v30(v48, 1, 1, *(_QWORD *)(v0 + 152));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    sub_1000126B0(v47, type metadata accessor for CloudStorageStore.State);
    sub_100004048(v48, (uint64_t *)&unk_1010EDC50);
    goto LABEL_14;
  }
  v31 = *(_QWORD *)(v0 + 176);
  v32 = *(_QWORD *)(v0 + 144);
  v30(v32, 0, 1, *(_QWORD *)(v0 + 152));
  sub_1000126EC(v32, v31, type metadata accessor for LocalFindableAccessoryRecord);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v33 = *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 176);
  v35 = type metadata accessor for Logger(0);
  sub_10001A9E8(v35, (uint64_t)qword_1011B71C8);
  v36 = sub_10005972C(v34, v33, type metadata accessor for LocalFindableAccessoryRecord);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v0 + 168);
  if (v39)
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(32, -1);
    v62 = v42;
    *(_DWORD *)v41 = 141558275;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v41 + 4, v41 + 12);
    *(_WORD *)(v41 + 12) = 2081;
    v43 = type metadata accessor for UUID(0);
    v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    *(_QWORD *)(v0 + 104) = sub_100016940(v45, v46, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v40, type metadata accessor for LocalFindableAccessoryRecord);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Updating events for local findable record modified %{private,mask.hash}s.", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for LocalFindableAccessoryRecord);
  }

  v50 = *(_QWORD *)(v0 + 176);
  v52 = *(_QWORD *)(v0 + 128);
  v51 = *(_QWORD *)(v0 + 136);
  v53 = getuid();
  sub_100A06500(v53);
  v54 = v51 + *(int *)(v52 + 20);
  v55 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v54, v50, v55);
  v56 = (_QWORD *)swift_task_alloc(dword_10110044C);
  *(_QWORD *)(v0 + 328) = v56;
  *v56 = v0;
  v56[1] = sub_1005BBD6C;
  return sub_1005C50B4(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 120));
}

uint64_t sub_1005BBD6C()
{
  uint64_t **v0;
  uint64_t *v1;
  uint64_t **v2;
  uint64_t *v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc((*v0)[41]);
  v2 = (uint64_t **)swift_task_alloc(dword_101100454);
  v1[42] = (uint64_t)v2;
  *v2 = v4;
  v2[1] = (uint64_t *)sub_1005BBDDC;
  return sub_1005C8ED4(v1[17], v1[22], v1[15]);
}

uint64_t sub_1005BBDDC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  return swift_task_switch(sub_1005BBE30, 0, 0);
}

uint64_t sub_1005BBE30()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[26];
  v2 = v0[22];
  sub_1000126B0(v0[17], type metadata accessor for BeaconIdentifier);
  sub_1000126B0(v2, type metadata accessor for LocalFindableAccessoryRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  sub_1000126B0(v1, type metadata accessor for CloudStorageStore.State);
  v0[38] = v0[40];
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[39] = v3;
  *v3 = v0;
  v3[1] = sub_1005BB7A0;
  return AsyncStream.Iterator.next(isolation:)(v0[27], 0, 0, v0[34]);
}

uint64_t sub_1005BBEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v1 = v0;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B71C8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v10 = v7;
    *(_DWORD *)v6 = 136446210;
    v9 = sub_100016940(0xD00000000000001FLL, 0x8000000100EDC6A0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  if (*(_QWORD *)(v1 + 176))
  {
    swift_retain();
    sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    Task.cancel()();
    swift_release();
  }
  *(_QWORD *)(v1 + 176) = 0;
  swift_release();
  if (*(_QWORD *)(v1 + 184))
  {
    swift_retain();
    sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    Task.cancel()();
    swift_release();
  }
  *(_QWORD *)(v1 + 184) = 0;
  return swift_release();
}

uint64_t sub_1005BC100(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v7 + 56) = a6;
  *(_QWORD *)(v7 + 64) = a7;
  *(_QWORD *)(v7 + 48) = a5;
  *(double *)(v7 + 40) = a1;
  v8 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v7 + 72) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 80) = v9;
  *(_QWORD *)(v7 + 88) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005BC168, 0, 0);
}

uint64_t sub_1005BC168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.seconds(_:)(*(double *)(v0 + 40));
  v3 = v2;
  ContinuousClock.init()(v1);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_101117148 + dword_101117148);
  v4 = (_QWORD *)swift_task_alloc(unk_10111714C);
  *(_QWORD *)(v0 + 96) = v4;
  *v4 = v0;
  v4[1] = sub_1005BC1FC;
  return v6(v1, v3, 0, 0, 1);
}

uint64_t sub_1005BC1FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[10] + 8))(v2[11], v2[9]);
  if (v0)
    v4 = sub_1005BC390;
  else
    v4 = sub_1005BC270;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1005BC270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 112) = Strong;
  if (Strong)
  {
    v3 = *(_QWORD **)(v0 + 64);
    v4 = v3[3];
    v5 = v3[4];
    v6 = sub_10001AA44(v3, v4);
    v7 = (_QWORD *)swift_task_alloc(dword_1011004A4);
    *(_QWORD *)(v0 + 120) = v7;
    *v7 = v0;
    v7[1] = sub_1005BC338;
    return sub_1005C6FA4(*(_QWORD *)(v0 + 56), (uint64_t)v6, Strong, v4, v5);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005BC338()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 112);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_release(v2);
  swift_task_dealloc(*(_QWORD *)(v1 + 88));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1005BC390()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1005BC3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  id v16;
  Class isa;
  NSDate v18;
  uint64_t v19;
  NSString v20;
  id v21;
  uint64_t v23;

  v4 = v3;
  v7 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DeviceEvent(0);
  sub_10000F9B8(a1 + *(int *)(v14 + 32), (uint64_t)v9, &qword_1010EF480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004048((uint64_t)v9, &qword_1010EF480);
    v15 = 0;
  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v13, type metadata accessor for DeviceEvent.AttachmentInfo);
    v16 = objc_allocWithZone((Class)SPAttachmentInfo);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v15 = objc_msgSend(v16, "initWithAttachedToDevice:", isa);

    sub_1000126B0((uint64_t)v13, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  v18.super.isa = Date._bridgeToObjectiveC()().super.isa;
  v19 = qword_100E44CA0[*(char *)(a1 + 9)];
  if (a3)
  {
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    v20 = 0;
  }
  v21 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)), "initWithTimestamp:source:attachmentInfo:serialNumber:", v18.super.isa, v19, v15, v20);

  sub_1000126B0(a1, type metadata accessor for DeviceEvent);
  return v21;
}

uint64_t sub_1005BC5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  v4 = type metadata accessor for BeaconIdentifier(0);
  v3[22] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v5);
  v3[24] = swift_task_alloc(v5);
  v6 = sub_10001A9A8(&qword_1010EF480);
  v3[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1011003F0);
  v3[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v3[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[28] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v10);
  v3[30] = swift_task_alloc(v10);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED860);
  v3[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF488);
  v3[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DeviceEvent(0);
  v3[34] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[35] = v15;
  v3[36] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005BC744, v2, 0);
}

uint64_t sub_1005BC744()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 296) = v2;
    *v2 = v0;
    v2[1] = sub_1005BC830;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005BC830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005BC890, v3, 0);
}

uint64_t sub_1005BC890()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 304))
  {
    v2 = *(_QWORD *)(v0 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
    v4 = (_QWORD *)swift_task_alloc(dword_10111BB34);
    *(_QWORD *)(v0 + 312) = v4;
    *v4 = v0;
    v4[1] = sub_1005BCCB0;
    return sub_100C65BE4(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 160), 8, *(_QWORD *)(v0 + 256));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v6 = sub_1005C4B54();
    v7 = swift_allocError(&type metadata for LocationFetchService.Error, v6, 0, 0);
    *v8 = 0;
    swift_willThrow(v7);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v9 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 160);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B71C8);
    sub_10005972C(v10, v9, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v7);
    v12 = swift_errorRetain(v7);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 184);
    if (v15)
    {
      v17 = swift_slowAlloc(32, -1);
      v33 = (uint64_t *)swift_slowAlloc(8, -1);
      v34 = swift_slowAlloc(32, -1);
      v35 = v34;
      *(_DWORD *)v17 = 141558531;
      *(_QWORD *)(v0 + 120) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2081;
      v18 = type metadata accessor for UUID(0);
      v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
      *(_QWORD *)(v0 + 128) = sub_100016940(v20, v21, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v17 + 22) = 2114;
      swift_errorRetain(v7);
      v22 = _swift_stdlib_bridgeErrorToNSError(v7);
      *(_QWORD *)(v0 + 136) = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v17 + 24, v17 + 32);
      *v33 = v22;
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No device event for this device found. Beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v17, 0x20u);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v33, 1, v23);
      swift_slowDealloc(v33, -1, -1);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(v7);
    }
    else
    {
      swift_errorRelease(v7);
      sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
      swift_errorRelease(v7);
      swift_errorRelease(v7);

    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 272));
    v24 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 264);
    v27 = *(_QWORD *)(v0 + 240);
    v26 = *(_QWORD *)(v0 + 248);
    v28 = *(_QWORD *)(v0 + 232);
    v30 = *(_QWORD *)(v0 + 200);
    v29 = *(_QWORD *)(v0 + 208);
    v32 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 192);
    swift_task_dealloc(*(_QWORD *)(v0 + 288));
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005BCCB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 256);
  v5 = *(_QWORD *)(v2 + 168);
  sub_100004048(v4, &qword_1010ED860);
  swift_release();
  if (v0)
    v6 = sub_1005BD0E0;
  else
    v6 = sub_1005BCD3C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1005BCD3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    v5 = *(_QWORD *)(v0 + 288);
    sub_1000126EC(v3, v5, type metadata accessor for DeviceEvent);
    if (*(_BYTE *)(v5 + 9) == 5)
    {
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      v6 = *(_QWORD *)(v0 + 272);
      v7 = *(_QWORD *)(v0 + 248);
      v8 = *(_QWORD *)(v0 + 216);
      v9 = *(_QWORD *)(v0 + 224);
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v10 = sub_100C1AE9C(*(_QWORD *)(v0 + 144));
      swift_bridgeObjectRelease();
      Date.addingTimeInterval(_:)((double)v10);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
      {
        v11 = *(_QWORD *)(v0 + 240);
        v12 = *(_QWORD *)(v0 + 248);
        v13 = *(_QWORD *)(v0 + 216);
        v14 = *(_QWORD *)(v0 + 224);
        static Date.trustedNow.getter(v11);
        v15 = Date.timeIntervalSince(_:)(v11);
        v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
        v16(v11, v13);
        v16(v12, v13);
        if (v15 <= 0.0)
        {
          v17 = *(_QWORD *)(v0 + 288);
          v18 = *(int **)(v0 + 272);
          v40 = *(_QWORD *)(v0 + 240);
          v41 = *(_QWORD *)(v0 + 280);
          v19 = *(_QWORD *)(v0 + 224);
          v20 = *(_QWORD *)(v0 + 208);
          v38 = *(_QWORD *)(v0 + 232);
          v39 = *(_QWORD *)(v0 + 216);
          v22 = *(_QWORD *)(v0 + 192);
          v21 = *(_QWORD *)(v0 + 200);
          v23 = *(_QWORD *)(v0 + 152);
          (*(void (**)(void))(v19 + 16))();
          sub_10000F9B8(v17 + v18[7], v20, &qword_1011003F0);
          sub_10000F9B8(v17 + v18[8], v21, &qword_1010EF480);
          sub_10005972C(v17 + v18[9], v22, type metadata accessor for BeaconIdentifier);
          static Date.trustedNow.getter(v38);
          sub_1000126B0(v17, type metadata accessor for DeviceEvent);
          *(_QWORD *)v23 = 0;
          *(_WORD *)(v23 + 8) = 513;
          v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
          v24(v23 + *(int *)(v6 + 24), v40, v39);
          sub_100005CF0(v20, v23 + v18[7], &qword_1011003F0);
          sub_100005CF0(v21, v23 + v18[8], &qword_1010EF480);
          sub_1000126EC(v22, v23 + v18[9], type metadata accessor for BeaconIdentifier);
          v24(v23 + v18[10], v38, v39);
          (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v41 + 56))(v23, 0, 1, v18);
          goto LABEL_12;
        }
LABEL_11:
        v25 = *(_QWORD *)(v0 + 280);
        v26 = *(_QWORD *)(v0 + 272);
        v27 = *(_QWORD *)(v0 + 152);
        sub_1000126EC(*(_QWORD *)(v0 + 288), v27, type metadata accessor for DeviceEvent);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, v26);
        goto LABEL_12;
      }
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 56))(*(_QWORD *)(v0 + 248), 1, 1, *(_QWORD *)(v0 + 216));
    }
    sub_100004048(*(_QWORD *)(v0 + 248), (uint64_t *)&unk_1010EA690);
    goto LABEL_11;
  }
  v4 = *(_QWORD *)(v0 + 152);
  sub_100004048(v3, &qword_1010EF488);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v4, 1, 1, v1);
LABEL_12:
  v28 = *(_QWORD *)(v0 + 256);
  v29 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 240);
  v30 = *(_QWORD *)(v0 + 248);
  v32 = *(_QWORD *)(v0 + 232);
  v34 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 208);
  v36 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v29);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BD0E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 320);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B71C8);
  sub_10005972C(v3, v2, type metadata accessor for BeaconIdentifier);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 184);
  if (v8)
  {
    v10 = swift_slowAlloc(32, -1);
    v27 = (uint64_t *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(32, -1);
    v29 = v28;
    *(_DWORD *)v10 = 141558531;
    *(_QWORD *)(v0 + 120) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 128) = sub_100016940(v13, v14, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v10 + 22) = 2114;
    swift_errorRetain(v1);
    v15 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 136) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v10 + 24, v10 + 32);
    *v27 = v15;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "No device event for this device found. Beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v10, 0x20u);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v27, 1, v16);
    swift_slowDealloc(v27, -1, -1);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    sub_1000126B0(v9, type metadata accessor for BeaconIdentifier);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 56))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 272));
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 264);
  v20 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 232);
  v23 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 184);
  v24 = *(_QWORD *)(v0 + 192);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BD44C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3[30] = a2;
  v3[31] = v2;
  v3[29] = a1;
  v4 = type metadata accessor for BeaconIdentifier(0);
  v3[32] = v4;
  v3[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1011003D0);
  v3[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011003D8);
  v3[35] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[36] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[37] = swift_task_alloc(v8);
  v3[38] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v3[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[40] = swift_task_alloc(v10);
  v3[41] = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  v3[42] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[43] = v12;
  v3[44] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005BD58C, v2, 0);
}

uint64_t sub_1005BD58C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 360) = v2;
    *v2 = v0;
    v2[1] = sub_1005BD678;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005BD678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005BD6D8, v3, 0);
}

uint64_t sub_1005BD6D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 368);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_1005BDAA0, *(_QWORD *)(v0 + 368), 0);
  v3 = sub_1005C4B54();
  v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0, 0);
  *v5 = 1;
  swift_willThrow(v4);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v6 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 240);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B71C8);
  sub_10005972C(v7, v6, type metadata accessor for BeaconIdentifier);
  swift_errorRetain(v4);
  v9 = swift_errorRetain(v4);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v30 = *(_QWORD *)(v0 + 336);
    v12 = *(_QWORD *)(v0 + 264);
    v13 = swift_slowAlloc(32, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v31 = swift_slowAlloc(32, -1);
    v32 = v31;
    *(_DWORD *)v13 = 141558531;
    *(_QWORD *)(v0 + 200) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v30, v15);
    *(_QWORD *)(v0 + 224) = sub_100016940(v16, v17, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v12, type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v13 + 22) = 2114;
    swift_errorRetain(v4);
    v18 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v0 + 208) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v13 + 24, v13 + 32);
    *v14 = v18;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "No connected device event for this device found. Beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v13, 0x20u);
    v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v19);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v4);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 264);
    swift_errorRelease(v4);
    sub_1000126B0(v20, type metadata accessor for BeaconIdentifier);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  v21 = *(_QWORD *)(v0 + 232);
  v22 = type metadata accessor for DeviceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 328);
  v26 = *(_QWORD *)(v0 + 304);
  v25 = *(_QWORD *)(v0 + 312);
  v27 = *(_QWORD *)(v0 + 296);
  v29 = *(_QWORD *)(v0 + 264);
  v28 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v24);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BDAA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 376) = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  *v3 = v0;
  v3[1] = sub_1005BDB28;
  return unsafeBlocking<A>(_:)(v0 + 216, sub_1005CD268, v1, v4);
}

uint64_t sub_1005BDB28()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 376));
  swift_release();
  return swift_task_switch(sub_1005BDB80, *(_QWORD *)(v1 + 368), 0);
}

uint64_t sub_1005BDB80()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[31];
  swift_release();
  v0[48] = v0[27];
  return swift_task_switch(sub_1005BDBC8, v1, 0);
}

uint64_t sub_1005BDBC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t (__cdecl *v26)();

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (v2)
  {
    sub_10005972C(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), *(_QWORD *)(v0 + 312), type metadata accessor for OwnedBeaconRecord);
    v5 = 0;
  }
  else
  {
    v5 = 1;
  }
  v6 = *(_QWORD *)(v0 + 312);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 312);
  if (v7 == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 312), (uint64_t *)&unk_1010F47C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
LABEL_7:
    v15 = *(_QWORD *)(v0 + 232);
    sub_100004048(*(_QWORD *)(v0 + 328), &qword_1010ED860);
    v16 = type metadata accessor for DeviceEvent(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    v17 = *(_QWORD *)(v0 + 320);
    v18 = *(_QWORD *)(v0 + 328);
    v20 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 312);
    v21 = *(_QWORD *)(v0 + 296);
    v23 = *(_QWORD *)(v0 + 264);
    v22 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v18);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = v11 + *(int *)(v3 + 20);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  *(_QWORD *)(v0 + 392) = v13;
  v13(v10, v12, v8);
  sub_1000126B0(v11, type metadata accessor for OwnedBeaconRecord);
  v14 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56);
  *(_QWORD *)(v0 + 400) = v14;
  v14(v10, 0, 1, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
    goto LABEL_7;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 32))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 336));
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v26 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v25 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 408) = v25;
    *v25 = v0;
    v25[1] = sub_1005BDE5C;
    return v26();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005BDE5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005BDEBC, v3, 0);
}

uint64_t sub_1005BDEBC()
{
  uint64_t v0;
  _QWORD *v1;
  void (*v2)(uint64_t, _QWORD, uint64_t, uint64_t);
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 416))
  {
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 392);
    v2 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 400);
    v4 = *(_QWORD *)(v0 + 352);
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 320);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3(v6, v4, v5);
    v2(v6, 0, 1, v5);
    v7 = (_QWORD *)swift_task_alloc(dword_10111BAEC);
    *(_QWORD *)(v0 + 424) = v7;
    *v7 = v0;
    v7[1] = sub_1005BE2EC;
    return sub_100C65D6C(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 320));
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 344);
    v9 = *(_QWORD *)(v0 + 352);
    v11 = *(_QWORD *)(v0 + 336);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v12 = sub_1005C4B54();
    v13 = swift_allocError(&type metadata for LocationFetchService.Error, v12, 0, 0);
    *v14 = 0;
    swift_willThrow(v13);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v15 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 240);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B71C8);
    sub_10005972C(v16, v15, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v13);
    v18 = swift_errorRetain(v13);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v39 = *(_QWORD *)(v0 + 336);
      v21 = *(_QWORD *)(v0 + 264);
      v22 = swift_slowAlloc(32, -1);
      v23 = (uint64_t *)swift_slowAlloc(8, -1);
      v40 = swift_slowAlloc(32, -1);
      v41 = v40;
      *(_DWORD *)v22 = 141558531;
      *(_QWORD *)(v0 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v39, v24);
      *(_QWORD *)(v0 + 224) = sub_100016940(v25, v26, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v21, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v22 + 22) = 2114;
      swift_errorRetain(v13);
      v27 = _swift_stdlib_bridgeErrorToNSError(v13);
      *(_QWORD *)(v0 + 208) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v22 + 24, v22 + 32);
      *v23 = v27;
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No connected device event for this device found. Beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v22, 0x20u);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v23, 1, v28);
      swift_slowDealloc(v23, -1, -1);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v22, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 264);
      swift_errorRelease(v13);
      sub_1000126B0(v29, type metadata accessor for BeaconIdentifier);
      swift_errorRelease(v13);
      swift_errorRelease(v13);

    }
    v30 = *(_QWORD *)(v0 + 232);
    v31 = type metadata accessor for DeviceEvent(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
    v32 = *(_QWORD *)(v0 + 320);
    v33 = *(_QWORD *)(v0 + 328);
    v35 = *(_QWORD *)(v0 + 304);
    v34 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 296);
    v38 = *(_QWORD *)(v0 + 264);
    v37 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 352));
    swift_task_dealloc(v33);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005BE2EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 424);
  v3[54] = a1;
  v3[55] = v1;
  swift_task_dealloc(v4);
  v5 = v3[40];
  v6 = v3[31];
  sub_100004048(v5, &qword_1010ED860);
  swift_release();
  if (v1)
    v7 = sub_1005BE95C;
  else
    v7 = sub_1005BE380;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1005BE380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;

  v1 = *(_QWORD *)(v0 + 432);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 440);
    v3 = *(_QWORD *)(v0 + 280);
    v4 = *(_QWORD *)(v0 + 272) + *(int *)(v3 + 48);
    v5 = sub_10001A9A8((uint64_t *)&unk_1011003E0);
    v6 = sub_1007F4054(v4, v4 + *(int *)(v5 + 48), v1);
    v8 = *(_QWORD *)(v0 + 344);
    v7 = *(_QWORD *)(v0 + 352);
    v9 = *(_QWORD *)(v0 + 336);
    if (v2)
    {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      swift_bridgeObjectRelease();
      if (qword_1010E9D20 != -1)
        swift_once(&qword_1010E9D20, sub_1005AE82C);
      v10 = *(_QWORD *)(v0 + 264);
      v11 = *(_QWORD *)(v0 + 240);
      v12 = type metadata accessor for Logger(0);
      sub_10001A9E8(v12, (uint64_t)qword_1011B71C8);
      sub_10005972C(v11, v10, type metadata accessor for BeaconIdentifier);
      swift_errorRetain(v2);
      v13 = swift_errorRetain(v2);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v58 = *(_QWORD *)(v0 + 336);
        v16 = *(_QWORD *)(v0 + 264);
        v17 = swift_slowAlloc(32, -1);
        v18 = (uint64_t *)swift_slowAlloc(8, -1);
        v62 = swift_slowAlloc(32, -1);
        v64 = v62;
        *(_DWORD *)v17 = 141558531;
        *(_QWORD *)(v0 + 200) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v17 + 4, v17 + 12);
        *(_WORD *)(v17 + 12) = 2081;
        v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of CustomStringConvertible.description.getter(v58, v19);
        *(_QWORD *)(v0 + 224) = sub_100016940(v20, v21, &v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v17 + 14, v17 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
        *(_WORD *)(v17 + 22) = 2114;
        swift_errorRetain(v2);
        v22 = _swift_stdlib_bridgeErrorToNSError(v2);
        *(_QWORD *)(v0 + 208) = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v17 + 24, v17 + 32);
        *v18 = v22;
        swift_errorRelease(v2);
        swift_errorRelease(v2);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "No connected device event for this device found. Beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v17, 0x20u);
        v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v18, 1, v23);
        swift_slowDealloc(v18, -1, -1);
        swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v17, -1, -1);

        swift_errorRelease(v2);
      }
      else
      {
        v46 = *(_QWORD *)(v0 + 264);
        swift_errorRelease(v2);
        sub_1000126B0(v46, type metadata accessor for BeaconIdentifier);
        swift_errorRelease(v2);
        swift_errorRelease(v2);

      }
      v47 = *(_QWORD *)(v0 + 232);
      v48 = type metadata accessor for DeviceEvent(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 1, 1, v48);
    }
    else
    {
      v29 = *(_BYTE **)(v0 + 304);
      v30 = *(_QWORD *)(v0 + 288);
      v60 = *(_QWORD *)(v0 + 280);
      v63 = *(_BYTE **)(v0 + 296);
      v31 = *(_BYTE **)(v0 + 272);
      v32 = (uint64_t)&v29[*(int *)(v3 + 48)];
      v33 = v32 + *(int *)(v5 + 48);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      swift_bridgeObjectRelease();
      *v31 = v6 & 1;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v60);
      v34 = (uint64_t)&v31[*(int *)(v3 + 48)];
      LODWORD(v30) = *v31;
      *v29 = v30;
      v35 = v34 + *(int *)(v5 + 48);
      sub_1000126EC(v34, v32, type metadata accessor for DeviceEvent);
      v36 = type metadata accessor for Date(0);
      v37 = *(_QWORD *)(v36 - 8);
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32);
      v59(v33, v35, v36);
      v38 = (uint64_t)&v63[*(int *)(v3 + 48)];
      *v63 = v30;
      v39 = v38 + *(int *)(v5 + 48);
      v61 = v32;
      sub_10005972C(v32, v38, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v39, v33, v36);
      v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v40(v39, v36);
      sub_1000126B0(v38, type metadata accessor for DeviceEvent);
      v41 = *(_QWORD *)(v0 + 232);
      if ((_DWORD)v30 == 1)
      {
        v42 = *(_BYTE **)(v0 + 296);
        v43 = (uint64_t)&v42[*(int *)(v3 + 48)];
        *v42 = 1;
        v44 = v43 + *(int *)(v5 + 48);
        sub_1000126EC(v61, v43, type metadata accessor for DeviceEvent);
        v59(v44, v33, v36);
        sub_1000126EC(v43, v41, type metadata accessor for DeviceEvent);
        v45 = type metadata accessor for DeviceEvent(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v41, 0, 1, v45);
        v40(v44, v36);
      }
      else
      {
        sub_100004048(*(_QWORD *)(v0 + 304), &qword_1011003D8);
        v49 = type metadata accessor for DeviceEvent(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v41, 1, 1, v49);
      }
    }
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 280);
    v25 = *(_QWORD *)(v0 + 288);
    v26 = *(_QWORD *)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v26, 1, 1, v24);
    sub_100004048(v26, &qword_1011003D0);
    v28 = type metadata accessor for DeviceEvent(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  }
  v50 = *(_QWORD *)(v0 + 320);
  v51 = *(_QWORD *)(v0 + 328);
  v53 = *(_QWORD *)(v0 + 304);
  v52 = *(_QWORD *)(v0 + 312);
  v54 = *(_QWORD *)(v0 + 296);
  v56 = *(_QWORD *)(v0 + 264);
  v55 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v51);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BE95C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 344) + 8))(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 336));
  v1 = *(_QWORD *)(v0 + 440);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B71C8);
  sub_10005972C(v3, v2, type metadata accessor for BeaconIdentifier);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v27 = *(_QWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 264);
    v9 = swift_slowAlloc(32, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v28 = swift_slowAlloc(32, -1);
    v29 = v28;
    *(_DWORD *)v9 = 141558531;
    *(_QWORD *)(v0 + 200) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v27, v11);
    *(_QWORD *)(v0 + 224) = sub_100016940(v12, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v9 + 22) = 2114;
    swift_errorRetain(v1);
    v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 208) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v9 + 24, v9 + 32);
    *v10 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "No connected device event for this device found. Beacon: %{private,mask.hash}s, error: %{public}@.", (uint8_t *)v9, 0x20u);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v10, 1, v15);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 264);
    swift_errorRelease(v1);
    sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v17 = *(_QWORD *)(v0 + 232);
  v18 = type metadata accessor for DeviceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 328);
  v22 = *(_QWORD *)(v0 + 304);
  v21 = *(_QWORD *)(v0 + 312);
  v23 = *(_QWORD *)(v0 + 296);
  v25 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 352));
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BECC8()
{
  uint64_t v0;

  sub_10001D8A8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_1005BED34()
{
  uint64_t v0;

  sub_1005BECC8();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocationFetchService()
{
  return objc_opt_self(_TtC12searchpartyd20LocationFetchService);
}

uint64_t sub_1005BED6C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2[48] = a1;
  v2[49] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[50] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[51] = v4;
  v2[52] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconEstimatedLocation(0);
  v2[53] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[54] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[55] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[56] = swift_task_alloc(v8);
  v2[57] = swift_task_alloc(v8);
  v9 = type metadata accessor for Date(0);
  v2[58] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[59] = v10;
  v2[60] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005BEE30, 0, 0);
}

uint64_t sub_1005BEE30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 384) + 16;
  swift_beginAccess(v1, v0 + 296, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 488) = Strong;
  if (Strong)
    return swift_task_switch(sub_1005BEEDC, Strong, 0);
  v4 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 416);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BEEDC()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 648) = *(_BYTE *)(*(_QWORD *)(v0 + 488) + 200);
  return swift_task_switch(sub_1005BEEFC, 0, 0);
}

uint64_t sub_1005BEEFC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(_BYTE *)(v0 + 648) == 1)
  {
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v1 = *(void **)(v0 + 392);
    v2 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 496) = sub_10001A9E8(v2, (uint64_t)qword_1011B71C8);
    v3 = v1;
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = *(_QWORD *)(v0 + 392);
      v7 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v28 = v27;
      *(_DWORD *)v7 = 136446466;
      if (v6)
        v8 = 0x61636F6C20736168;
      else
        v8 = 7104878;
      if (v6)
        v9 = 0xEC0000006E6F6974;
      else
        v9 = 0xE300000000000000;
      *(_QWORD *)(v0 + 368) = sub_100016940(v8, v9, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v7 + 4, v7 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2048;
      if (v6)
      {
        v11 = *(_QWORD *)(v0 + 472);
        v10 = *(_QWORD *)(v0 + 480);
        v12 = *(_QWORD *)(v0 + 464);
        v13 = objc_msgSend(v3, "timestamp");
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v13);

        v15 = Date.timeIntervalSinceNow.getter(v14);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      }
      else
      {
        v15 = 1.0;
      }
      *(double *)(v0 + 376) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v7 + 14, v7 + 22);

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Location monitor did update location: %{public}s,age: %f.", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

    }
    v21 = *(_QWORD *)(v0 + 488);
    if (*(_QWORD *)(v0 + 392))
    {
      v22 = v3;
      return swift_task_switch(sub_1005BF2B0, v21, 0);
    }
    goto LABEL_23;
  }
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B71C8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (!os_log_type_enabled(v18, v19))
  {

LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  v20 = (uint8_t *)swift_slowAlloc(2, -1);
  *(_WORD *)v20 = 0;
  _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ignoring location updates while not processing.", v20, 2u);
  swift_slowDealloc(v20, -1, -1);
  swift_release();

LABEL_24:
  v24 = *(_QWORD *)(v0 + 448);
  v25 = *(_QWORD *)(v0 + 456);
  v26 = *(_QWORD *)(v0 + 416);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BF2B0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 320, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 504) = v2;
    *v2 = v0;
    v2[1] = sub_1005BF39C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005BF39C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 504);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 512) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005BF3FC, v3, 0);
}

uint64_t sub_1005BF3FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v1 = v0[64];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7);
  if (v1)
  {
    v2 = v0[64];
    v3 = sub_1005BF488;
  }
  else
  {
    v4 = sub_1005C4B54();
    v5 = swift_allocError(&type metadata for LocationFetchService.Error, v4, 0, 0);
    v0[71] = v5;
    *v6 = 1;
    swift_willThrow(v5);
    v3 = sub_1005BF69C;
    v2 = 0;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_1005BF488()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[64];
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[65] = v3;
  v4 = sub_10001A9A8(&qword_1010F0B20);
  v0[66] = v4;
  *v3 = v0;
  v3[1] = sub_1005BF514;
  return unsafeBlocking<A>(_:)(v0 + 44, sub_10001CB10, v1, v4);
}

uint64_t sub_1005BF514()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 520));
  swift_release();
  return swift_task_switch(sub_1005BF570, *(_QWORD *)(v1 + 512), 0);
}

uint64_t sub_1005BF570()
{
  uint64_t v0;

  swift_release();
  *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 352);
  return swift_task_switch(sub_1005BF5B4, 0, 0);
}

uint64_t sub_1005BF5B4()
{
  _QWORD *v0;
  _QWORD *v1;
  unint64_t v2;

  v0[43] = v0[67];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[68] = v1;
  v2 = sub_10001D5D4();
  *v1 = v0;
  v1[1] = sub_1005BF624;
  return Sequence.asyncFilter(_:)(&unk_1011002B8, v0[61], v0[66], v2);
}

uint64_t sub_1005BF624(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 544);
  *(_QWORD *)(v3 + 552) = a1;
  *(_QWORD *)(v3 + 560) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
    v5 = sub_1005C07B8;
  else
    v5 = sub_1005BF708;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1005BF69C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 488));

  v3 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 416);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BF708()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  char *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char *v19;
  id v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0[69];
  v2 = *(_QWORD *)(v1 + 16);
  v0[72] = v2;
  if (v2)
  {
    v4 = v0[58];
    v3 = v0[59];
    v6 = v0[52];
    v5 = (int *)v0[53];
    v0[74] = 0;
    v7 = (char *)v0[57];
    v37 = v3;
    v38 = v0[51];
    v8 = (void *)v0[49];
    v39 = v0[50];
    v9 = sub_100030784(v1 + 32, (uint64_t)(v0 + 32));
    UUID.init()(v9);
    v11 = v0[35];
    v10 = v0[36];
    sub_10001AA44(v0 + 32, v11);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 32))(v11);
    objc_msgSend(v8, "coordinate");
    v13 = v12;
    objc_msgSend(v8, "coordinate");
    v15 = v14;
    objc_msgSend(v8, "horizontalAccuracy");
    v17 = v16;
    v18 = objc_msgSend(v8, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v19 = &v7[v5[12]];
    v20 = objc_msgSend(v8, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v19, 0, 1, v4);
    *(_OWORD *)v7 = xmmword_100E22FC0;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(&v7[v5[5]], v6, v39);
    *(_QWORD *)&v7[v5[7]] = v13;
    *(_QWORD *)&v7[v5[8]] = v15;
    *(_QWORD *)&v7[v5[9]] = v17;
    v7[v5[11]] = 2;
    *(_QWORD *)&v7[v5[13]] = 0;
    v21 = sub_100030784((uint64_t)(v0 + 32), (uint64_t)(v0 + 2));
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = v0[52];
      v40 = v0[51];
      v25 = v0[50];
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v41 = v27;
      *(_DWORD *)v26 = 141558275;
      *(_QWORD *)(v26 + 4) = 1752392040;
      *(_WORD *)(v26 + 12) = 2081;
      v29 = v0[5];
      v28 = v0[6];
      sub_10001AA44(v0 + 2, v29);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v28 + 8) + 8) + 32))(v29);
      v30 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v25, v30);
      v33 = v32;
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v24, v25);
      *(_QWORD *)(v26 + 14) = sub_100016940(v31, v33, &v41);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Saving location for connected beacons - from location monitor update:beacon: %{private,mask.hash}s.", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    }

    v34 = v0[61];
    v35 = sub_1005BFEDC;
  }
  else
  {
    swift_bridgeObjectRelease();
    v34 = v0[61];
    v35 = sub_1005BFA84;
  }
  return swift_task_switch(v35, v34, 0);
}

uint64_t sub_1005BFA84()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 584) = v2;
  v3 = sub_10001A9A8(&qword_1011002C8);
  *v2 = v0;
  v2[1] = sub_1005BFB00;
  return unsafeBlocking<A>(_:)(v0 + 360, sub_10001E5EC, *(_QWORD *)(v0 + 488), v3);
}

uint64_t sub_1005BFB00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 488);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 584));
  swift_release();
  return swift_task_switch(sub_1005BFB60, v1, 0);
}

uint64_t sub_1005BFB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 360);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v23 + 560);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 360));
    v22 = v1;
    v4 = (uint64_t *)(v1 + 48);
    do
    {
      v6 = v4[4];
      if (v6)
      {
        v8 = *(v4 - 1);
        v7 = *v4;
        v9 = v4[1];
        v24 = v4[2];
        v10 = v4[3];
        v11 = v4[6];
        if (v10 == 0xD000000000000017 && v6 == 0x8000000100EDC5B0
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v4[3], v6, 0xD000000000000017, 0x8000000100EDC5B0, 0) & 1) != 0)
        {
LABEL_15:
          swift_bridgeObjectRelease_n(v22, 2);
          v20 = sub_1005BFE70;
          return swift_task_switch(v20, 0, 0);
        }
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v6);
        swift_bridgeObjectRetain(v11);
        v12 = sub_100C93200(v10, v6);
        if (v3)
        {
          swift_errorRetain(v3);
          v13 = swift_errorRetain(v3);
          v14 = Logger.logObject.getter(v13);
          v15 = static os_log_type_t.fault.getter(v14);
          if (os_log_type_enabled(v14, v15))
          {
            v16 = swift_slowAlloc(12, -1);
            v17 = (uint64_t *)swift_slowAlloc(8, -1);
            *(_DWORD *)v16 = 138543362;
            swift_errorRetain(v3);
            v18 = _swift_stdlib_bridgeErrorToNSError(v3);
            *(_QWORD *)(v16 + 4) = v18;
            *v17 = v18;
            swift_errorRelease(v3);
            swift_errorRelease(v3);
            _os_log_impl((void *)&_mh_execute_header, v14, v15, "RunningBoardProcess threw an error: %{public}@", (uint8_t *)v16, 0xCu);
            v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
            swift_arrayDestroy(v17, 1, v19);
            swift_slowDealloc(v17, -1, -1);
            swift_slowDealloc(v16, -1, -1);

            swift_errorRelease(v3);
          }
          else
          {
            swift_errorRelease(v3);
            swift_errorRelease(v3);
            swift_errorRelease(v3);

          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          v5 = v12;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v5)
            goto LABEL_15;
        }
        v3 = 0;
      }
      v4 += 12;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v20 = sub_1005C06C8;
  return swift_task_switch(v20, 0, 0);
}

uint64_t sub_1005BFE70()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 488));

  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 416);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005BFEDC()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC((__int128 *)(v0 + 176), v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 600) = v2;
    *v2 = v0;
    v2[1] = sub_1005BFF80;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005BFF80(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 608) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005BFFE0, v3, 0);
}

uint64_t sub_1005BFFE0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v2)();
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;

  v1 = v0 + 27;
  if (v0[76])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = sub_1005C0078;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = sub_1005C4B54();
    v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0, 0);
    v0[80] = v4;
    *v5 = 1;
    swift_willThrow(v4);
    swift_bridgeObjectRelease();
    v2 = sub_1005C063C;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1005C0078()
{
  uint64_t v0;
  uint64_t v1;

  sub_100030784(v0 + 256, v0 + 96);
  v1 = swift_allocObject(&unk_1010812E0, 56, 7);
  *(_QWORD *)(v0 + 616) = v1;
  sub_10000F9FC((__int128 *)(v0 + 96), v1 + 16);
  return swift_task_switch(sub_1005C00E0, *(_QWORD *)(v0 + 608), 0);
}

uint64_t sub_1005C00E0()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  uint64_t v11;
  _QWORD *v12;

  v1 = (void (*)(uint64_t))v0[77];
  v2 = v0[76];
  v3 = v0[56];
  v5 = v0[54];
  v4 = v0[55];
  sub_10005972C(v0[57], v3, type metadata accessor for BeaconEstimatedLocation);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = (v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = swift_allocObject(&unk_101081308, v8 + 16, v6 | 7);
  v0[78] = v9;
  *(_QWORD *)(v9 + 16) = v2;
  sub_1000126EC(v3, v9 + v7, type metadata accessor for BeaconEstimatedLocation);
  v10 = (void (**)(uint64_t))(v9 + v8);
  *v10 = sub_1005C4C0C;
  v10[1] = v1;
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[79] = v12;
  *v12 = v0;
  v12[1] = sub_1005C01E8;
  return unsafeBlocking<A>(_:)(v12, sub_1005C4C18, v9, &type metadata for () + 1);
}

uint64_t sub_1005C01E8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 632));
  swift_release();
  return swift_task_switch(sub_1005C0244, *(_QWORD *)(v1 + 608), 0);
}

uint64_t sub_1005C0244()
{
  swift_release();
  swift_release();
  return swift_task_switch(sub_1005C028C, 0, 0);
}

uint64_t sub_1005C028C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0[72];
  v2 = v0[74] + 1;
  sub_1000126B0(v0[57], type metadata accessor for BeaconEstimatedLocation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v3 = v0[61];
    v4 = sub_1005BFA84;
  }
  else
  {
    v5 = v0[74] + 1;
    v0[74] = v5;
    v6 = v0[59];
    v37 = v0[58];
    v7 = (char *)v0[57];
    v9 = v0[52];
    v8 = (int *)v0[53];
    v38 = v0[51];
    v10 = (void *)v0[49];
    v39 = v0[50];
    v11 = sub_100030784(v0[69] + 40 * v5 + 32, (uint64_t)(v0 + 32));
    UUID.init()(v11);
    v13 = v0[35];
    v12 = v0[36];
    sub_10001AA44(v0 + 32, v13);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) + 32))(v13);
    objc_msgSend(v10, "coordinate");
    v15 = v14;
    objc_msgSend(v10, "coordinate");
    v17 = v16;
    objc_msgSend(v10, "horizontalAccuracy");
    v19 = v18;
    v20 = objc_msgSend(v10, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v20);

    v21 = &v7[v8[12]];
    v22 = objc_msgSend(v10, "timestamp");
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v22);

    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v21, 0, 1, v37);
    *(_OWORD *)v7 = xmmword_100E22FC0;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(&v7[v8[5]], v9, v39);
    *(_QWORD *)&v7[v8[7]] = v15;
    *(_QWORD *)&v7[v8[8]] = v17;
    *(_QWORD *)&v7[v8[9]] = v19;
    v7[v8[11]] = 2;
    *(_QWORD *)&v7[v8[13]] = 0;
    v23 = sub_100030784((uint64_t)(v0 + 32), (uint64_t)(v0 + 2));
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = v0[52];
      v40 = v0[51];
      v27 = v0[50];
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      v41 = v29;
      *(_DWORD *)v28 = 141558275;
      *(_QWORD *)(v28 + 4) = 1752392040;
      *(_WORD *)(v28 + 12) = 2081;
      v31 = v0[5];
      v30 = v0[6];
      sub_10001AA44(v0 + 2, v31);
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v30 + 8) + 8) + 32))(v31);
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v27, v32);
      v35 = v34;
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v26, v27);
      *(_QWORD *)(v28 + 14) = sub_100016940(v33, v35, &v41);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Saving location for connected beacons - from location monitor update:beacon: %{private,mask.hash}s.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    }

    v3 = v0[61];
    v4 = sub_1005BFEDC;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_1005C063C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(void **)(v0 + 392);
  swift_release();

  sub_1000126B0(v1, type metadata accessor for BeaconEstimatedLocation);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 256));
  v4 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 416);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C06C8(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "                    No more running clients. Pausing location updates.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v1 + 488);

  return swift_task_switch(sub_1005C0778, v5, 0);
}

uint64_t sub_1005C0778()
{
  sub_1005B8E10();
  sub_1005BBEE4();
  return swift_task_switch(sub_1005CD9B0, 0, 0);
}

uint64_t sub_1005C07B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 392);
  swift_release(*(_QWORD *)(v0 + 488));

  v3 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 416);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C0824(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[15] = a1;
  v2[16] = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1011002E0);
  v2[17] = v4;
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[20] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[21] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v8);
  v2[23] = swift_task_alloc(v8);
  return swift_task_switch(sub_1005C08C4, a2, 0);
}

uint64_t sub_1005C08C4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_1005C09B0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005C09B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005C0A10, v3, 0);
}

uint64_t sub_1005C0A10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 200))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1005C0ADC, 0, 0);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 176);
    v4 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v6 = sub_1005C4B54();
    v7 = swift_allocError(&type metadata for LocationFetchService.Error, v6, 0, 0);
    *v8 = 1;
    swift_willThrow(v7);
    swift_task_dealloc(v4);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_1005C0ADC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)(v0 + 120);
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 8) + 8) + 32))(v2);
  return swift_task_switch(sub_1005C0B48, *(_QWORD *)(v0 + 200), 0);
}

uint64_t sub_1005C0B48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0[25];
  v2 = v0[22];
  v4 = v0[20];
  v3 = v0[21];
  v5 = v0[19];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[23], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = v7 + v3;
  v9 = swift_allocObject(&unk_101081330, v7 + v3 + 1, v6 | 7);
  v0[26] = v9;
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v2, v5);
  *(_BYTE *)(v9 + v8) = 1;
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[27] = v11;
  *v11 = v0;
  v11[1] = sub_1005C0C34;
  return unsafeBlocking<A>(_:)(v0[18], sub_1005CC898, v9, v0[17]);
}

uint64_t sub_1005C0C34()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 216));
  swift_release();
  return swift_task_switch(sub_1005C0C8C, *(_QWORD *)(v1 + 200), 0);
}

uint64_t sub_1005C0C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(unsigned __int8 **)(v0 + 144);
  v6 = *v5;
  sub_100004048((uint64_t)&v5[*(int *)(*(_QWORD *)(v0 + 136) + 48)], (uint64_t *)&unk_1010EA690);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

void sub_1005C0D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F4A20);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v31 - v12;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B71C8);
  sub_100030784(a2, (uint64_t)v38);
  v15 = sub_10000F9B8(a1, (uint64_t)v13, &qword_1010F4A20);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(32, -1);
    v33 = v8;
    v20 = v19;
    v21 = swift_slowAlloc(64, -1);
    v35 = v21;
    *(_DWORD *)v20 = 141558531;
    v36 = 1752392040;
    v37 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v32 = v20 + 14;
    v34 = v18;
    v23 = v39;
    v22 = v40;
    sub_10001AA44(v38, v39);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v22 + 8) + 8) + 32))(v23);
    v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v4, v24);
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v36 = sub_100016940(v25, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v32, v20 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
    *(_WORD *)(v20 + 22) = 2080;
    sub_10000F9B8((uint64_t)v13, (uint64_t)v11, &qword_1010F4A20);
    v28 = String.init<A>(describing:)(v11, v33);
    v36 = sub_100016940(v28, v29, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 24, v20 + 32);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v13, &qword_1010F4A20);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v34, "Done saving location for connected beacon: %{private,mask.hash}s, result: %s.", (uint8_t *)v20, 0x20u);
    v30 = v35;
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
    sub_100004048((uint64_t)v13, &qword_1010F4A20);
  }

}

uint64_t sub_1005C108C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101100284);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_1005BED6C(v2, v3);
}

uint64_t sub_1005C10DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for UUID(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[5] = 0;
  v0[6] = 0;
  v4 = sub_10001A9A8(&qword_1010FAAF0);
  v5 = swift_allocObject(v4, 20, 7);
  *(_DWORD *)(v5 + 16) = 0;
  v0[7] = v5;
  type metadata accessor for WorkItemQueue(0);
  v6 = swift_retain();
  UUID.init()(v6);
  v7 = WorkItemQueue.__allocating_init(identifier:)(v3);
  v0[8] = v7;
  UUID.init()(v7);
  v0[9] = WorkItemQueue.__allocating_init(identifier:)(v3);
  v0[10] = _swiftEmptyDictionarySingleton;
  v8 = swift_release();
  return sub_100B1AC90(v8);
}

uint64_t sub_1005C11B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  *(_BYTE *)(v4 + 284) = a4;
  *(_QWORD *)(v4 + 152) = a2;
  *(_QWORD *)(v4 + 160) = a3;
  *(_QWORD *)(v4 + 144) = a1;
  v7 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v4 + 168) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 176) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 184) = v9;
  v10 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v4 + 192) = v10;
  *(_QWORD *)(v4 + 200) = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)swift_task_alloc(dword_1011003AC);
  *(_QWORD *)(v4 + 208) = v11;
  *v11 = v4;
  v11[1] = sub_1005C1260;
  return sub_1005C1AE8(a1, a2);
}

uint64_t sub_1005C1260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005C12BC, 0, 0);
}

uint64_t sub_1005C12BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  void (*v30)(uint64_t, unint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  _QWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *log;
  os_log_t loga;
  os_log_type_t v57;
  char v58;
  uint64_t v59;

  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(void **)(v0 + 160);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B71C8);
  sub_100030784(v1, v0 + 16);
  v5 = v3;
  swift_bridgeObjectRetain_n(v2, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 216);
  if (v8)
  {
    v57 = v7;
    v10 = *(_QWORD *)(v0 + 200);
    v50 = *(_QWORD *)(v0 + 184);
    log = v6;
    v11 = *(_QWORD *)(v0 + 176);
    v12 = *(void **)(v0 + 160);
    v51 = *(_BYTE *)(v0 + 284);
    v13 = swift_slowAlloc(62, -1);
    v53 = swift_slowAlloc(64, -1);
    v59 = v53;
    *(_DWORD *)v13 = 141559299;
    *(_QWORD *)(v0 + 96) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v15 = *(_QWORD *)(v0 + 40);
    v14 = *(_QWORD *)(v0 + 48);
    sub_10001AA44((_QWORD *)(v0 + 16), v15);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 8) + 32))(v15);
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v11, v16);
    v19 = v18;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v10, v11);
    *(_QWORD *)(v0 + 104) = sub_100016940(v17, v19, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    *(_WORD *)(v13 + 22) = 2048;
    v20 = *(_QWORD *)(v9 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 112) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 32) = 2049;
    objc_msgSend(v12, "latitude");
    *(_QWORD *)(v0 + 120) = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v13 + 34, v13 + 42);

    *(_WORD *)(v13 + 42) = 2049;
    objc_msgSend(v12, "longitude");
    *(_QWORD *)(v0 + 128) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v13 + 44, v13 + 52);

    *(_WORD *)(v13 + 52) = 2080;
    v23 = sub_1002E3DF8(v51);
    *(_QWORD *)(v0 + 136) = sub_100016940(v23, v24, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v13 + 54, v13 + 62);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v57, "Update location for beacon: %{private,mask.hash}s,\nclientBeaconIdentifiers %ld,\nLoc: lat: %{private}f, lon: %{private}f source: %s.", (uint8_t *)v13, 0x3Eu);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    v25 = *(void **)(v0 + 160);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_bridgeObjectRelease();

  }
  v26 = *(_QWORD *)(v0 + 216);
  v27 = *(_QWORD *)(v26 + 16);
  *(_QWORD *)(v0 + 224) = v27;
  v28 = *(_QWORD *)(v0 + 184);
  if (v27)
  {
    v29 = *(_DWORD *)(v28 + 80);
    *(_DWORD *)(v0 + 280) = v29;
    *(_QWORD *)(v0 + 232) = *(_QWORD *)(v28 + 72);
    v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v28 + 16);
    *(_QWORD *)(v0 + 240) = v30;
    *(_QWORD *)(v0 + 248) = 0;
    v31 = *(_QWORD *)(v0 + 168);
    v32 = *(_QWORD *)(v0 + 176);
    v30(v31, v26 + ((v29 + 32) & ~(unint64_t)v29), v32);
    v33 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56);
    *(_QWORD *)(v0 + 256) = v33;
    v33(v31, 0, 1, v32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v31, 1, v32) != 1)
    {
      v34 = *(unsigned __int8 *)(v0 + 280);
      v52 = *(_QWORD *)(v0 + 200);
      v35 = *(_QWORD *)(v0 + 176);
      v58 = *(_BYTE *)(v0 + 284);
      loga = *(os_log_t *)(v0 + 160);
      v36 = *(_QWORD *)(v0 + 144);
      v54 = *(_QWORD *)(v0 + 152);
      v37 = (v34 + 24) & ~v34;
      v38 = (*(_QWORD *)(v0 + 192) + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
      v39 = (v38 + 47) & 0xFFFFFFFFFFFFFFF8;
      v40 = v34 | 7;
      v41 = *(void (**)(void))(*(_QWORD *)(v0 + 184) + 32);
      v41();
      sub_100030784(v36, v0 + 56);
      v42 = swift_allocObject(&unk_101081560, v39 + 9, v40);
      *(_QWORD *)(v0 + 264) = v42;
      *(_QWORD *)(v42 + 16) = v54;
      ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v42 + v37, v52, v35);
      sub_10000F9FC((__int128 *)(v0 + 56), v42 + v38);
      v43 = v42 + v39;
      *(_QWORD *)v43 = loga;
      *(_BYTE *)(v43 + 8) = v58;
      v44 = async function pointer to unsafeBlocking<A>(_:)[1];
      v45 = loga;
      swift_retain();
      v46 = (_QWORD *)swift_task_alloc(v44);
      *(_QWORD *)(v0 + 272) = v46;
      *v46 = v0;
      v46[1] = sub_1005C186C;
      return unsafeBlocking<A>(_:)(v46, sub_1005CD184, v42, &type metadata for () + 1);
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v28 + 56))(*(_QWORD *)(v0 + 168), 1, 1, *(_QWORD *)(v0 + 176));
  }
  v48 = *(_QWORD *)(v0 + 200);
  v49 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C186C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_release();
  return swift_task_switch(sub_1005C18C8, 0, 0);
}

uint64_t sub_1005C18C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  char v25;

  v1 = *(_QWORD *)(v0 + 248) + 1;
  if (v1 == *(_QWORD *)(v0 + 224))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 256))(*(_QWORD *)(v0 + 168), 1, 1, *(_QWORD *)(v0 + 176));
LABEL_4:
    v6 = *(_QWORD *)(v0 + 200);
    v7 = *(_QWORD *)(v0 + 168);
    swift_bridgeObjectRelease();
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 248) = v1;
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 168);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 240))(v4, *(_QWORD *)(v0 + 216)+ ((*(unsigned __int8 *)(v0 + 280) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 280))+ *(_QWORD *)(v0 + 232) * v1, v2);
  v5 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
  *(_QWORD *)(v0 + 256) = v5;
  v5(v4, 0, 1, v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
    goto LABEL_4;
  v9 = *(unsigned __int8 *)(v0 + 280);
  v10 = *(_QWORD *)(v0 + 176);
  v25 = *(_BYTE *)(v0 + 284);
  v24 = *(void **)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 152);
  v12 = (v9 + 24) & ~v9;
  v13 = (*(_QWORD *)(v0 + 192) + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 47) & 0xFFFFFFFFFFFFFFF8;
  v15 = v9 | 7;
  v16 = *(void (**)(void))(*(_QWORD *)(v0 + 184) + 32);
  v16();
  sub_100030784(v11, v0 + 56);
  v17 = swift_allocObject(&unk_101081560, v14 + 9, v15);
  *(_QWORD *)(v0 + 264) = v17;
  *(_QWORD *)(v17 + 16) = v23;
  ((void (*)(uint64_t, uint64_t, uint64_t))v16)(v17 + v12, v22, v10);
  sub_10000F9FC((__int128 *)(v0 + 56), v17 + v13);
  v18 = v17 + v14;
  *(_QWORD *)v18 = v24;
  *(_BYTE *)(v18 + 8) = v25;
  v19 = async function pointer to unsafeBlocking<A>(_:)[1];
  v20 = v24;
  swift_retain();
  v21 = (_QWORD *)swift_task_alloc(v19);
  *(_QWORD *)(v0 + 272) = v21;
  *v21 = v0;
  v21[1] = sub_1005C186C;
  return unsafeBlocking<A>(_:)(v21, sub_1005CD184, v17, &type metadata for () + 1);
}

uint64_t sub_1005C1AE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005C1B48, 0, 0);
}

uint64_t sub_1005C1B48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD **)(v0 + 16);
  v3 = sub_10001A9A8(&qword_1011003C0);
  v4 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v0 + 56) = v4;
  v5 = *(_DWORD *)(v1 + 80);
  *(_DWORD *)(v0 + 80) = v5;
  v6 = swift_allocObject(v3, ((v5 + 32) & ~(unint64_t)v5) + v4, v5 | 7);
  *(_QWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  v7 = v2[3];
  v8 = v2[4];
  sub_10001AA44(v2, v7);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v8 + 8) + 8) + 32))(v7);
  v9 = v2[3];
  v10 = v2[4];
  sub_10001AA44(v2, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v9, v10) & 1) != 0)
  {
    v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1011003C8 + dword_1011003C8);
    v11 = (_QWORD *)swift_task_alloc(unk_1011003CC);
    *(_QWORD *)(v0 + 72) = v11;
    *v11 = v0;
    v11[1] = sub_1005C1C8C;
    return v13(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
  }
}

uint64_t sub_1005C1C8C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_1005C1CE0, 0, 0);
}

uint64_t sub_1005C1CE0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  if (v3 >= v2 >> 1)
    v1 = sub_1007C84F8(v2 > 1, v3 + 1, 1, *(_QWORD *)(v0 + 64));
  v4 = *(unsigned __int8 *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = v3 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32))(v1 + ((v4 + 32) & ~v4) + v6 * v3, v5, v7);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1005C1D78(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;

  v10 = sub_10001A9A8(&qword_1011003B0);
  v11 = sub_10001A9A8((uint64_t *)&unk_101108FD0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v10, v15 + v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  v17 = v16 + v15;
  v18 = *(int *)(v11 + 48);
  v19 = *(int *)(sub_10001A9A8((uint64_t *)&unk_10110C6B0) + 48);
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, a2, v20);
  v21 = a3[3];
  v22 = a3[4];
  sub_10001AA44(a3, v21);
  *(_QWORD *)(v17 + v19) = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 176))(v21, v22);
  *(_QWORD *)(v17 + v18) = a4;
  v23 = *(_QWORD *)(a1 + 56);
  v24 = a4;
  v25 = sub_10001A9A8(&qword_101100380);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005CCE44, a1, v23, &type metadata for () + 1, v25);
  v26 = sub_1005AE5A4(v16);
  type metadata accessor for Transaction(0);
  v27 = swift_allocObject(&unk_101081588, 64, 7);
  *(_QWORD *)(v27 + 16) = a1;
  *(_QWORD *)(v27 + 24) = v29;
  *(_QWORD *)(v27 + 32) = v26;
  *(_BYTE *)(v27 + 40) = a5;
  *(_QWORD *)(v27 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v27 + 56) = v16;
  swift_retain();
  swift_bridgeObjectRetain(v16);
  static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations", 47, 2, &unk_1011003B8, v27);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1005C1F58(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2[15] = a1;
  v2[16] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[19] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v6);
  v2[21] = swift_task_alloc(v6);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v2[22] = v7;
  v2[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005C1FF4, 0, 0);
}

uint64_t sub_1005C1FF4()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_1005C20E0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005C20E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005C213C, 0, 0);
}

uint64_t sub_1005C213C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD **)(v0 + 128);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v2 = v1[3];
  v3 = v1[4];
  sub_10001AA44(v1, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v3) & 1) != 0)
  {
    if (*(_QWORD *)(v0 + 200))
    {
      v4 = v1[3];
      v5 = v1[4];
      sub_10001AA44(*(_QWORD **)(v0 + 128), v4);
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
      v7 = *(void (**)(uint64_t, uint64_t))(v6 + 32);
      swift_retain();
      v7(v4, v6);
      return swift_task_switch(sub_1005C2294, *(_QWORD *)(v0 + 200), 0);
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 144) + 56))(*(_QWORD *)(v0 + 184), 1, 1, *(_QWORD *)(v0 + 136));
    sub_100004048(*(_QWORD *)(v0 + 184), &qword_1010ED860);
  }
  v9 = *(_QWORD **)(v0 + 128);
  v10 = v9[3];
  v11 = v9[4];
  sub_10001AA44(v9, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
  swift_release();
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v13);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C2294()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = v0[25];
  v2 = v0[20];
  v4 = v0[18];
  v3 = v0[19];
  v5 = v0[17];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[21], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010815B0, v7 + v3, v6 | 7);
  v0[26] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[27] = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[28] = v11;
  *v11 = v0;
  v11[1] = sub_1005C2370;
  return unsafeBlocking<A>(_:)(v0[23], sub_1005CD228, v8, v0[22]);
}

uint64_t sub_1005C2370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_1005C2400, 0, 0);
}

uint64_t sub_1005C2400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010ED860);
    v3 = *(_QWORD **)(v0 + 128);
    v4 = v3[3];
    v5 = v3[4];
    sub_10001AA44(v3, v4);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) + 32))(v4);
    swift_release();
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
    v7 = *(_QWORD *)(v0 + 120);
    swift_release();
    v6(v7, v1, v2);
  }
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C24DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 + 40) = a5;
  *(_QWORD *)(v6 + 48) = a6;
  *(_BYTE *)(v6 + 64) = a4;
  *(_QWORD *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = a3;
  *(_QWORD *)(v6 + 16) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1005C2540, 0, 0);
}

uint64_t sub_1005C2540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_BYTE *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 24);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v7 = swift_allocObject(&unk_101081510, 56, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v3;
  *(_QWORD *)(v7 + 40) = v4;
  *(_QWORD *)(v7 + 48) = v2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  v8 = swift_bridgeObjectRetain(v2);
  UUID.init()(v8);
  v9 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_1011003A0, v7, &unk_10110F2A0, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v9);
  swift_release(v9);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C2634(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v5 + 56) = a4;
  *(_QWORD *)(v5 + 64) = a5;
  *(_BYTE *)(v5 + 193) = a3;
  *(_QWORD *)(v5 + 40) = a1;
  *(_QWORD *)(v5 + 48) = a2;
  v6 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  *(_QWORD *)(v5 + 72) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 80) = v7;
  v8 = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v5 + 88) = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 96) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 104) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 112) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 120) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 128) = swift_task_alloc(v9);
  *(_QWORD *)(v5 + 136) = swift_task_alloc(v9);
  return swift_task_switch(sub_1005C26E4, 0, 0);
}

void sub_1005C26E4()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  Class isa;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  uint64_t v101;
  char v102;
  void (*v103)(void);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;

  v77 = v0 + 4;
  v1 = v0[5];
  v2 = *(_BYTE *)(v1 + 32);
  *((_BYTE *)v0 + 194) = v2;
  v3 = 1 << v2;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 64);
  swift_bridgeObjectRetain(v1);
  v6 = 0;
  v78 = v0;
  v87 = 0;
  if (!v5)
    goto LABEL_6;
LABEL_5:
  v7 = __clz(__rbit64(v5));
  v8 = (v5 - 1) & v5;
  v9 = v7 | (v6 << 6);
  v10 = v0[5];
  while (1)
  {
    v79 = v8;
    v80 = v6;
    v0[18] = v6;
    v0[19] = v8;
    v16 = v0[17];
    v105 = v0[16];
    v89 = v0[15];
    v17 = v0[9];
    v92 = *((_BYTE *)v0 + 193);
    v83 = v0[14];
    v84 = v0[7];
    v82 = v0[6];
    v18 = *(_QWORD *)(v10 + 48);
    v19 = type metadata accessor for UUID(0);
    v20 = *(_QWORD *)(v19 - 8);
    v103 = *(void (**)(void))(v20 + 16);
    v104 = v19;
    ((void (*)(uint64_t, unint64_t, uint64_t))v103)(v16, v18 + *(_QWORD *)(v20 + 72) * v9, v19);
    v21 = *(_QWORD *)(v10 + 56);
    v22 = v17;
    v23 = (uint64_t *)(v21 + 104 * v9);
    v24 = v16 + *(int *)(v17 + 48);
    v108 = *v23;
    v25 = *((_BYTE *)v23 + 8);
    v26 = v23[3];
    v109 = v23[2];
    v27 = v23[4];
    v28 = v23[5];
    v30 = v23[6];
    v29 = v23[7];
    v31 = *((_BYTE *)v23 + 64);
    v100 = v31;
    v32 = *((_BYTE *)v23 + 65);
    v99 = v32;
    v33 = v23[9];
    v97 = v23[11];
    v98 = v23[10];
    v96 = *((_BYTE *)v23 + 96);
    *(_QWORD *)v24 = *v23;
    *(_BYTE *)(v24 + 8) = v25;
    v34 = v25;
    v102 = v25;
    *(_QWORD *)(v24 + 16) = v109;
    *(_QWORD *)(v24 + 24) = v26;
    *(_QWORD *)(v24 + 32) = v27;
    *(_QWORD *)(v24 + 40) = v28;
    v35 = v27;
    v95 = v27;
    *(_QWORD *)(v24 + 48) = v30;
    *(_QWORD *)(v24 + 56) = v29;
    v36 = v30;
    v101 = v30;
    v37 = v29;
    v86 = v29;
    *(_BYTE *)(v24 + 64) = v31;
    *(_BYTE *)(v24 + 65) = v32;
    *(_QWORD *)(v24 + 72) = v33;
    *(_QWORD *)(v24 + 80) = v98;
    v81 = v33;
    *(_QWORD *)(v24 + 88) = v97;
    *(_BYTE *)(v24 + 96) = v96;
    v38 = v105 + *(int *)(v22 + 48);
    (*(void (**)(void))(v20 + 32))();
    *(_QWORD *)v38 = v108;
    *(_BYTE *)(v38 + 8) = v34;
    *(_QWORD *)(v38 + 16) = v109;
    *(_QWORD *)(v38 + 24) = v26;
    *(_QWORD *)(v38 + 32) = v35;
    *(_QWORD *)(v38 + 40) = v28;
    *(_QWORD *)(v38 + 48) = v36;
    *(_QWORD *)(v38 + 56) = v37;
    *(_BYTE *)(v38 + 64) = v100;
    *(_BYTE *)(v38 + 65) = v99;
    *(_QWORD *)(v38 + 72) = v33;
    *(_QWORD *)(v38 + 80) = v98;
    *(_QWORD *)(v38 + 88) = v97;
    *(_BYTE *)(v38 + 96) = v96;
    v39 = v89 + *(int *)(v22 + 48);
    v103();
    *(_QWORD *)v39 = v108;
    *(_BYTE *)(v39 + 8) = v102;
    *(_QWORD *)(v39 + 16) = v109;
    *(_QWORD *)(v39 + 24) = v26;
    *(_QWORD *)(v39 + 32) = v95;
    *(_QWORD *)(v39 + 40) = v28;
    *(_QWORD *)(v39 + 48) = v101;
    *(_QWORD *)(v39 + 56) = v86;
    *(_BYTE *)(v39 + 64) = v100;
    *(_BYTE *)(v39 + 65) = v99;
    *(_QWORD *)(v39 + 72) = v81;
    *(_QWORD *)(v39 + 80) = v98;
    *(_QWORD *)(v39 + 88) = v97;
    *(_BYTE *)(v39 + 96) = v96;
    v40 = swift_task_alloc(32);
    *(_QWORD *)(v40 + 16) = v89;
    *(_BYTE *)(v40 + 24) = v92;
    swift_bridgeObjectRetain_n(v86, 3);
    swift_bridgeObjectRetain_n(v81, 3);
    swift_retain_n(v108, 3);
    swift_bridgeObjectRetain_n(v109, 3);
    swift_bridgeObjectRetain_n(v26, 3);
    swift_bridgeObjectRetain_n(v95, 3);
    swift_bridgeObjectRetain_n(v28, 3);
    swift_bridgeObjectRetain(v82);
    v41 = v87;
    v88 = sub_10008BA38((uint64_t (*)(char *))sub_1005CCF88, v40, v82);
    swift_task_dealloc(v40);
    sub_100004048(v89, (uint64_t *)&unk_1011002D0);
    v42 = v83 + *(int *)(v22 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v83, v105, v104);
    *(_QWORD *)v42 = v108;
    *(_BYTE *)(v42 + 8) = v102;
    *(_QWORD *)(v42 + 16) = v109;
    *(_QWORD *)(v42 + 24) = v26;
    *(_QWORD *)(v42 + 32) = v95;
    *(_QWORD *)(v42 + 40) = v28;
    *(_QWORD *)(v42 + 48) = v101;
    *(_QWORD *)(v42 + 56) = v86;
    *(_BYTE *)(v42 + 64) = v100;
    *(_BYTE *)(v42 + 65) = v99;
    *(_QWORD *)(v42 + 72) = v81;
    *(_QWORD *)(v42 + 80) = v98;
    *(_QWORD *)(v42 + 88) = v97;
    *(_BYTE *)(v42 + 96) = v96;
    v43 = swift_task_alloc(32);
    *(_QWORD *)(v43 + 16) = v83;
    *(_BYTE *)(v43 + 24) = v92;
    swift_retain();
    swift_bridgeObjectRetain(v109);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v95);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v84);
    v44 = sub_10008BC68((uint64_t)sub_1005CCFA8, v43, v84);
    swift_task_dealloc(v43);
    sub_100004048(v83, (uint64_t *)&unk_1011002D0);
    v45 = *(_QWORD *)(v88 + 16);
    swift_bridgeObjectRelease();
    if (v45 || *(_QWORD *)(v44 + 16))
      break;
    v0 = v78;
    sub_100004048(v78[16], (uint64_t *)&unk_1011002D0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v5 = v79;
    v6 = v80;
    v87 = v41;
    if (v79)
      goto LABEL_5;
LABEL_6:
    v11 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return;
    }
    v12 = (unint64_t)((1 << *((_BYTE *)v0 + 194)) + 63) >> 6;
    v10 = v0[5];
    if (v11 >= v12)
      goto LABEL_28;
    v13 = v10 + 64;
    v14 = *(_QWORD *)(v10 + 64 + 8 * v11);
    ++v6;
    if (!v14)
    {
      v6 = v11 + 1;
      if (v11 + 1 >= v12)
        goto LABEL_28;
      v14 = *(_QWORD *)(v13 + 8 * v6);
      if (!v14)
      {
        v6 = v11 + 2;
        if (v11 + 2 >= v12)
          goto LABEL_28;
        v14 = *(_QWORD *)(v13 + 8 * v6);
        if (!v14)
        {
          v15 = v11 + 3;
          if (v15 >= v12)
          {
LABEL_28:
            v72 = v0[16];
            v71 = v0[17];
            v74 = v0[14];
            v73 = v0[15];
            v76 = v0[12];
            v75 = v0[13];
            swift_release();
            swift_task_dealloc(v71);
            swift_task_dealloc(v72);
            swift_task_dealloc(v73);
            swift_task_dealloc(v74);
            swift_task_dealloc(v75);
            swift_task_dealloc(v76);
            ((void (*)(void))v0[1])();
            return;
          }
          v14 = *(_QWORD *)(v13 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              v6 = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_30;
              if (v6 >= v12)
                goto LABEL_28;
              v14 = *(_QWORD *)(v13 + 8 * v6);
              ++v15;
              if (v14)
                goto LABEL_19;
            }
          }
          v6 = v15;
        }
      }
    }
LABEL_19:
    v8 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v6 << 6);
  }
  v46 = v78[13];
  v90 = v78[16];
  v93 = v78[12];
  v85 = v78[9];
  v106 = v78[8];
  v47 = v46 + *(int *)(v85 + 48);
  ((void (*)(uint64_t))v103)(v46);
  *(_QWORD *)v47 = v108;
  *(_BYTE *)(v47 + 8) = v102;
  *(_QWORD *)(v47 + 16) = v109;
  *(_QWORD *)(v47 + 24) = v26;
  *(_QWORD *)(v47 + 32) = v95;
  *(_QWORD *)(v47 + 40) = v28;
  *(_QWORD *)(v47 + 48) = v101;
  *(_QWORD *)(v47 + 56) = v86;
  *(_BYTE *)(v47 + 64) = v100;
  *(_BYTE *)(v47 + 65) = v99;
  *(_QWORD *)(v47 + 72) = v81;
  *(_QWORD *)(v47 + 80) = v98;
  *(_QWORD *)(v47 + 88) = v97;
  *(_BYTE *)(v47 + 96) = v96;
  v48 = swift_task_alloc(32);
  *(_QWORD *)(v48 + 16) = v46;
  swift_retain();
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v81);
  v107 = sub_1005CC534(v106, (uint64_t (*)(char *, uint64_t, _QWORD, _QWORD))sub_1005CD040, v48);
  swift_task_dealloc(v48);
  sub_100004048(v46, (uint64_t *)&unk_1011002D0);
  v49 = v93 + *(int *)(v85 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v93, v90, v104);
  *(_QWORD *)v49 = v108;
  *(_BYTE *)(v49 + 8) = v102;
  *(_QWORD *)(v49 + 16) = v109;
  *(_QWORD *)(v49 + 24) = v26;
  *(_QWORD *)(v49 + 32) = v95;
  *(_QWORD *)(v49 + 40) = v28;
  *(_QWORD *)(v49 + 48) = v101;
  *(_QWORD *)(v49 + 56) = v86;
  *(_BYTE *)(v49 + 64) = v100;
  *(_BYTE *)(v49 + 65) = v99;
  *(_QWORD *)(v49 + 72) = v81;
  *(_QWORD *)(v49 + 80) = v98;
  *(_QWORD *)(v49 + 88) = v97;
  *(_BYTE *)(v49 + 96) = v96;
  v50 = swift_task_alloc(32);
  *(_QWORD *)(v50 + 16) = v93;
  swift_retain();
  swift_bridgeObjectRetain(v109);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v86);
  swift_bridgeObjectRetain(v81);
  v51 = sub_1005CC6CC(v44, (uint64_t (*)(char *, _QWORD *, _QWORD, _QWORD))sub_1005CD048, v50);
  swift_task_dealloc(v50);
  sub_100004048(v93, (uint64_t *)&unk_1011002D0);
  swift_bridgeObjectRelease();
  sub_100304A70((uint64_t)v51);
  v52 = v107[2];
  if (v52)
  {
    sub_10001A9A8(&qword_1011116B0);
    v53 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v52);
  }
  else
  {
    v53 = _swiftEmptyDictionarySingleton;
  }
  v78[4] = v53;
  swift_bridgeObjectRetain(v107);
  sub_1005C4C1C(v54, 1, v77);
  v78[20] = v41;
  v55 = v78[13];
  v56 = v78[11];
  v91 = v78[16];
  v94 = v78[10];
  v57 = v78[9];
  swift_bridgeObjectRelease();
  v58 = objc_allocWithZone((Class)SPLocationFetchResult);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  v60 = objc_msgSend(v58, "initWithResults:", isa);
  v78[21] = v60;

  v61 = *(int *)(v57 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v103)(v55, v91, v104);
  v62 = *(unsigned __int8 *)(v94 + 80);
  v63 = (v62 + 16) & ~v62;
  v64 = v55 + v61;
  *(_QWORD *)v64 = v108;
  *(_BYTE *)(v64 + 8) = v102;
  *(_QWORD *)(v64 + 16) = v109;
  *(_QWORD *)(v64 + 24) = v26;
  *(_QWORD *)(v64 + 32) = v95;
  *(_QWORD *)(v64 + 40) = v28;
  *(_QWORD *)(v64 + 48) = v101;
  *(_QWORD *)(v64 + 56) = v86;
  *(_BYTE *)(v64 + 64) = v100;
  *(_BYTE *)(v64 + 65) = v99;
  *(_QWORD *)(v64 + 72) = v81;
  *(_QWORD *)(v64 + 80) = v98;
  *(_QWORD *)(v64 + 88) = v97;
  *(_BYTE *)(v64 + 96) = v96;
  v65 = (v56 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
  v66 = swift_allocObject(&unk_101081538, v65 + 8, v62 | 7);
  v78[22] = v66;
  sub_100005CF0(v55, v66 + v63, (uint64_t *)&unk_1011002D0);
  *(_QWORD *)(v66 + v65) = v60;
  v67 = async function pointer to unsafeBlocking<A>(_:)[1];
  v68 = v60;
  v69 = (_QWORD *)swift_task_alloc(v67);
  v78[23] = v69;
  v70 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v69 = v78;
  v69[1] = sub_1005C3148;
  unsafeBlocking<A>(_:)(v78 + 24, sub_1005CD124, v66, v70);
}

uint64_t sub_1005C3148()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_1005C31A4, 0, 0);
}

uint64_t sub_1005C31A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  Class isa;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  char v100;
  void (*v101)(void);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v74 = v0 + 4;
  v73 = v0 + 24;
  v1 = v0[16];

  result = sub_100004048(v1, (uint64_t *)&unk_1011002D0);
  v3 = v0[19];
  v4 = v0[18];
  v75 = v0;
  v85 = v0[20];
  if (!v3)
    goto LABEL_3;
LABEL_2:
  v5 = __clz(__rbit64(v3));
  v6 = (v3 - 1) & v3;
  v7 = v5 | (v4 << 6);
  v8 = v0[5];
  while (1)
  {
    v76 = v6;
    v77 = v4;
    v0[18] = v4;
    v0[19] = v6;
    v14 = v0[17];
    v103 = v0[16];
    v87 = v0[15];
    v15 = v0[9];
    v90 = *((_BYTE *)v0 + 193);
    v82 = v0[14];
    v83 = v0[7];
    v81 = v0[6];
    v16 = *(_QWORD *)(v8 + 48);
    v17 = type metadata accessor for UUID(0);
    v18 = *(_QWORD *)(v17 - 8);
    v101 = *(void (**)(void))(v18 + 16);
    v102 = v17;
    ((void (*)(uint64_t, unint64_t, uint64_t))v101)(v14, v16 + *(_QWORD *)(v18 + 72) * v7, v17);
    v19 = v15;
    v20 = *(_QWORD *)(v8 + 56) + 104 * v7;
    v21 = v14 + *(int *)(v15 + 48);
    v107 = *(_QWORD *)v20;
    v22 = *(_BYTE *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 24);
    v108 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 32);
    v25 = *(_QWORD *)(v20 + 40);
    v27 = *(_QWORD *)(v20 + 48);
    v26 = *(_QWORD *)(v20 + 56);
    v98 = *(_BYTE *)(v20 + 64);
    v28 = *(_BYTE *)(v20 + 65);
    v97 = v28;
    v29 = *(_QWORD *)(v20 + 72);
    v95 = *(_QWORD *)(v20 + 88);
    v96 = *(_QWORD *)(v20 + 80);
    v94 = *(_BYTE *)(v20 + 96);
    *(_QWORD *)v21 = *(_QWORD *)v20;
    *(_BYTE *)(v21 + 8) = v22;
    v30 = v22;
    v100 = v22;
    *(_QWORD *)(v21 + 16) = v108;
    *(_QWORD *)(v21 + 24) = v23;
    *(_QWORD *)(v21 + 32) = v24;
    *(_QWORD *)(v21 + 40) = v25;
    v31 = v24;
    v93 = v24;
    *(_QWORD *)(v21 + 48) = v27;
    *(_QWORD *)(v21 + 56) = v26;
    v32 = v27;
    v99 = v27;
    v33 = v26;
    v78 = v26;
    v79 = v29;
    *(_BYTE *)(v21 + 64) = v98;
    *(_BYTE *)(v21 + 65) = v28;
    *(_QWORD *)(v21 + 72) = v29;
    *(_QWORD *)(v21 + 80) = v96;
    *(_QWORD *)(v21 + 88) = v95;
    *(_BYTE *)(v21 + 96) = v94;
    v34 = v19;
    v80 = v19;
    v35 = v103 + *(int *)(v19 + 48);
    (*(void (**)(void))(v18 + 32))();
    *(_QWORD *)v35 = v107;
    *(_BYTE *)(v35 + 8) = v30;
    *(_QWORD *)(v35 + 16) = v108;
    *(_QWORD *)(v35 + 24) = v23;
    *(_QWORD *)(v35 + 32) = v31;
    *(_QWORD *)(v35 + 40) = v25;
    *(_QWORD *)(v35 + 48) = v32;
    *(_QWORD *)(v35 + 56) = v33;
    *(_BYTE *)(v35 + 64) = v98;
    *(_BYTE *)(v35 + 65) = v97;
    *(_QWORD *)(v35 + 72) = v29;
    *(_QWORD *)(v35 + 80) = v96;
    *(_QWORD *)(v35 + 88) = v95;
    *(_BYTE *)(v35 + 96) = v94;
    v36 = v87 + *(int *)(v34 + 48);
    v101();
    *(_QWORD *)v36 = v107;
    *(_BYTE *)(v36 + 8) = v100;
    *(_QWORD *)(v36 + 16) = v108;
    *(_QWORD *)(v36 + 24) = v23;
    *(_QWORD *)(v36 + 32) = v93;
    *(_QWORD *)(v36 + 40) = v25;
    *(_QWORD *)(v36 + 48) = v99;
    *(_QWORD *)(v36 + 56) = v78;
    *(_BYTE *)(v36 + 64) = v98;
    *(_BYTE *)(v36 + 65) = v97;
    *(_QWORD *)(v36 + 72) = v79;
    *(_QWORD *)(v36 + 80) = v96;
    *(_QWORD *)(v36 + 88) = v95;
    *(_BYTE *)(v36 + 96) = v94;
    v37 = swift_task_alloc(32);
    *(_QWORD *)(v37 + 16) = v87;
    *(_BYTE *)(v37 + 24) = v90;
    swift_bridgeObjectRetain_n(v78, 3);
    swift_bridgeObjectRetain_n(v79, 3);
    swift_retain_n(v107, 3);
    swift_bridgeObjectRetain_n(v108, 3);
    swift_bridgeObjectRetain_n(v23, 3);
    swift_bridgeObjectRetain_n(v93, 3);
    swift_bridgeObjectRetain_n(v25, 3);
    swift_bridgeObjectRetain(v81);
    v38 = v85;
    v86 = sub_10008BA38((uint64_t (*)(char *))sub_1005CCF88, v37, v81);
    swift_task_dealloc(v37);
    sub_100004048(v87, (uint64_t *)&unk_1011002D0);
    v39 = v82 + *(int *)(v80 + 48);
    ((void (*)(uint64_t, uint64_t, uint64_t))v101)(v82, v103, v102);
    *(_QWORD *)v39 = v107;
    *(_BYTE *)(v39 + 8) = v100;
    *(_QWORD *)(v39 + 16) = v108;
    *(_QWORD *)(v39 + 24) = v23;
    *(_QWORD *)(v39 + 32) = v93;
    *(_QWORD *)(v39 + 40) = v25;
    *(_QWORD *)(v39 + 48) = v99;
    *(_QWORD *)(v39 + 56) = v78;
    *(_BYTE *)(v39 + 64) = v98;
    *(_BYTE *)(v39 + 65) = v97;
    *(_QWORD *)(v39 + 72) = v79;
    *(_QWORD *)(v39 + 80) = v96;
    *(_QWORD *)(v39 + 88) = v95;
    *(_BYTE *)(v39 + 96) = v94;
    v40 = swift_task_alloc(32);
    *(_QWORD *)(v40 + 16) = v82;
    *(_BYTE *)(v40 + 24) = v90;
    swift_retain();
    swift_bridgeObjectRetain(v108);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v83);
    v41 = sub_10008BC68((uint64_t)sub_1005CCFA8, v40, v83);
    swift_task_dealloc(v40);
    sub_100004048(v82, (uint64_t *)&unk_1011002D0);
    v42 = *(_QWORD *)(v86 + 16);
    swift_bridgeObjectRelease();
    if (v42 || *(_QWORD *)(v41 + 16))
      break;
    v0 = v75;
    sub_100004048(v75[16], (uint64_t *)&unk_1011002D0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_release();
    v3 = v76;
    v4 = v77;
    v85 = v38;
    if (v76)
      goto LABEL_2;
LABEL_3:
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    v10 = (unint64_t)((1 << *((_BYTE *)v0 + 194)) + 63) >> 6;
    v8 = v0[5];
    if (v9 >= v10)
      goto LABEL_27;
    v11 = v8 + 64;
    v12 = *(_QWORD *)(v8 + 64 + 8 * v9);
    ++v4;
    if (!v12)
    {
      v4 = v9 + 1;
      if (v9 + 1 >= v10)
        goto LABEL_27;
      v12 = *(_QWORD *)(v11 + 8 * v4);
      if (!v12)
      {
        v4 = v9 + 2;
        if (v9 + 2 >= v10)
          goto LABEL_27;
        v12 = *(_QWORD *)(v11 + 8 * v4);
        if (!v12)
        {
          v13 = v9 + 3;
          if (v13 >= v10)
          {
LABEL_27:
            v68 = v0[16];
            v67 = v0[17];
            v70 = v0[14];
            v69 = v0[15];
            v72 = v0[12];
            v71 = v0[13];
            swift_release();
            swift_task_dealloc(v67);
            swift_task_dealloc(v68);
            swift_task_dealloc(v69);
            swift_task_dealloc(v70);
            swift_task_dealloc(v71);
            swift_task_dealloc(v72);
            return ((uint64_t (*)(void))v0[1])();
          }
          v12 = *(_QWORD *)(v11 + 8 * v13);
          if (!v12)
          {
            while (1)
            {
              v4 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_29;
              if (v4 >= v10)
                goto LABEL_27;
              v12 = *(_QWORD *)(v11 + 8 * v4);
              ++v13;
              if (v12)
                goto LABEL_16;
            }
          }
          v4 = v13;
        }
      }
    }
LABEL_16:
    v6 = (v12 - 1) & v12;
    v7 = __clz(__rbit64(v12)) + (v4 << 6);
  }
  v43 = v75[13];
  v88 = v75[16];
  v91 = v75[12];
  v84 = v75[9];
  v104 = v75[8];
  v44 = v43 + *(int *)(v84 + 48);
  ((void (*)(uint64_t))v101)(v43);
  *(_QWORD *)v44 = v107;
  *(_BYTE *)(v44 + 8) = v100;
  *(_QWORD *)(v44 + 16) = v108;
  *(_QWORD *)(v44 + 24) = v23;
  *(_QWORD *)(v44 + 32) = v93;
  *(_QWORD *)(v44 + 40) = v25;
  *(_QWORD *)(v44 + 48) = v99;
  *(_QWORD *)(v44 + 56) = v78;
  *(_BYTE *)(v44 + 64) = v98;
  *(_BYTE *)(v44 + 65) = v97;
  *(_QWORD *)(v44 + 72) = v79;
  *(_QWORD *)(v44 + 80) = v96;
  *(_QWORD *)(v44 + 88) = v95;
  *(_BYTE *)(v44 + 96) = v94;
  v45 = swift_task_alloc(32);
  *(_QWORD *)(v45 + 16) = v43;
  swift_retain();
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  v105 = sub_1005CC534(v104, (uint64_t (*)(char *, uint64_t, _QWORD, _QWORD))sub_1005CD040, v45);
  swift_task_dealloc(v45);
  sub_100004048(v43, (uint64_t *)&unk_1011002D0);
  v46 = v91 + *(int *)(v84 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v101)(v91, v88, v102);
  *(_QWORD *)v46 = v107;
  *(_BYTE *)(v46 + 8) = v100;
  *(_QWORD *)(v46 + 16) = v108;
  *(_QWORD *)(v46 + 24) = v23;
  *(_QWORD *)(v46 + 32) = v93;
  *(_QWORD *)(v46 + 40) = v25;
  *(_QWORD *)(v46 + 48) = v99;
  *(_QWORD *)(v46 + 56) = v78;
  *(_BYTE *)(v46 + 64) = v98;
  *(_BYTE *)(v46 + 65) = v97;
  *(_QWORD *)(v46 + 72) = v79;
  *(_QWORD *)(v46 + 80) = v96;
  *(_QWORD *)(v46 + 88) = v95;
  *(_BYTE *)(v46 + 96) = v94;
  v47 = swift_task_alloc(32);
  *(_QWORD *)(v47 + 16) = v91;
  swift_retain();
  swift_bridgeObjectRetain(v108);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v93);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v78);
  swift_bridgeObjectRetain(v79);
  v48 = sub_1005CC6CC(v41, (uint64_t (*)(char *, _QWORD *, _QWORD, _QWORD))sub_1005CD048, v47);
  swift_task_dealloc(v47);
  sub_100004048(v91, (uint64_t *)&unk_1011002D0);
  swift_bridgeObjectRelease();
  sub_100304A70((uint64_t)v48);
  v49 = v105[2];
  if (v49)
  {
    sub_10001A9A8(&qword_1011116B0);
    v50 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v49);
  }
  else
  {
    v50 = _swiftEmptyDictionarySingleton;
  }
  v75[4] = v50;
  swift_bridgeObjectRetain(v105);
  sub_1005C4C1C(v51, 1, v74);
  v75[20] = v38;
  if (v38)
    return swift_unexpectedError(v38, "Swift/Dictionary.swift", 22, 1, 489);
  v89 = v75[16];
  v52 = v75[13];
  v106 = v75[11];
  v53 = v75[9];
  v92 = v75[10];
  swift_bridgeObjectRelease();
  v54 = objc_allocWithZone((Class)SPLocationFetchResult);
  sub_10000F4A0(0, (unint64_t *)&qword_1010F7700, SPBeaconLocation_ptr);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_release();
  v56 = objc_msgSend(v54, "initWithResults:", isa);
  v75[21] = v56;

  v57 = *(int *)(v53 + 48);
  ((void (*)(uint64_t, uint64_t, uint64_t))v101)(v52, v89, v102);
  v58 = *(unsigned __int8 *)(v92 + 80);
  v59 = (v58 + 16) & ~v58;
  v60 = v52 + v57;
  *(_QWORD *)v60 = v107;
  *(_BYTE *)(v60 + 8) = v100;
  *(_QWORD *)(v60 + 16) = v108;
  *(_QWORD *)(v60 + 24) = v23;
  *(_QWORD *)(v60 + 32) = v93;
  *(_QWORD *)(v60 + 40) = v25;
  *(_QWORD *)(v60 + 48) = v99;
  *(_QWORD *)(v60 + 56) = v78;
  *(_BYTE *)(v60 + 64) = v98;
  *(_BYTE *)(v60 + 65) = v97;
  *(_QWORD *)(v60 + 72) = v79;
  *(_QWORD *)(v60 + 80) = v96;
  *(_QWORD *)(v60 + 88) = v95;
  *(_BYTE *)(v60 + 96) = v94;
  v61 = (v106 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  v62 = swift_allocObject(&unk_101081538, v61 + 8, v58 | 7);
  v75[22] = v62;
  sub_100005CF0(v52, v62 + v59, (uint64_t *)&unk_1011002D0);
  *(_QWORD *)(v62 + v61) = v56;
  v63 = async function pointer to unsafeBlocking<A>(_:)[1];
  v64 = v56;
  v65 = (_QWORD *)swift_task_alloc(v63);
  v75[23] = v65;
  v66 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v65 = v75;
  v65[1] = sub_1005C3148;
  return unsafeBlocking<A>(_:)(v73, sub_1005CD124, v62, v66);
}

uint64_t sub_1005C3BFC(uint64_t a1, uint64_t a2, _BOOL8 a3)
{
  uint64_t v5;

  sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v5 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
  return sub_100C92048(a1, *(_QWORD *)(a1 + *(int *)(v5 + 48)), a3) & 1;
}

id sub_1005C3C9C(char *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  os_log_t v83;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  char *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  void (*v91)(_QWORD, _QWORD, _QWORD);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, os_log_t, uint64_t);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  os_log_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107[2];

  v105 = a4;
  v100 = a1;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v88 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v12 = __chkstk_darwin(v11);
  v87 = (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v103 = (uint64_t)&v87 - v15;
  v16 = __chkstk_darwin(v14);
  v104 = (os_log_t)((char *)&v87 - v17);
  __chkstk_darwin(v16);
  v19 = (char *)&v87 - v18;
  v20 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
  v21 = __chkstk_darwin(v20);
  v98 = (char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v102 = (uint64_t)&v87 - v24;
  v25 = __chkstk_darwin(v23);
  v101 = ((char *)&v87 - v26);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v87 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v87 - v31;
  v96 = (void (*)(char *, os_log_t, uint64_t))v30;
  v33 = *(int *)(v30 + 48);
  v99 = v9;
  v34 = a2;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v35((char *)&v87 - v31, v34, v8);
  v97 = v33;
  *(_QWORD *)&v32[v33] = a3;
  v36 = qword_1010E9D20;
  v94 = a3;
  if (v36 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v37 = type metadata accessor for Logger(0);
  v93 = sub_10001A9E8(v37, (uint64_t)qword_1011B71C8);
  v38 = *(int *)(v11 + 48);
  v39 = &v19[v38];
  v40 = a5 + v38;
  v35(v19, a5, v8);
  *(_QWORD *)v39 = *(_QWORD *)v40;
  v41 = *(_BYTE *)(v40 + 8);
  v42 = *(void (**)(char *, uint64_t))(v40 + 24);
  v89 = *(_QWORD *)(v40 + 16);
  v43 = v89;
  v90 = v42;
  v44 = *(_QWORD *)(v40 + 40);
  v91 = *(void (**)(_QWORD, _QWORD, _QWORD))(v40 + 32);
  v45 = v91;
  v92 = v44;
  v46 = *(_QWORD *)(v40 + 48);
  v47 = *(_QWORD *)(v40 + 56);
  v48 = *(_BYTE *)(v40 + 64);
  v49 = *(_BYTE *)(v40 + 65);
  v50 = *(_QWORD *)(v40 + 72);
  v51 = *(_BYTE *)(v40 + 96);
  v39[8] = v41;
  *((_QWORD *)v39 + 2) = v43;
  *((_QWORD *)v39 + 3) = v42;
  *((_QWORD *)v39 + 4) = v45;
  *((_QWORD *)v39 + 5) = v44;
  *((_QWORD *)v39 + 6) = v46;
  *((_QWORD *)v39 + 7) = v47;
  v39[64] = v48;
  v39[65] = v49;
  *((_QWORD *)v39 + 9) = v50;
  *((_OWORD *)v39 + 5) = *(_OWORD *)(v40 + 80);
  v39[96] = v51;
  sub_10000F9B8((uint64_t)v19, (uint64_t)v104, (uint64_t *)&unk_1011002D0);
  v52 = (uint64_t)v19;
  v53 = v103;
  sub_100005CF0(v52, v103, (uint64_t *)&unk_1011002D0);
  v54 = *((int *)v96 + 12);
  v95 = v8;
  v96 = (void (*)(char *, os_log_t, uint64_t))v35;
  v35(v29, (uint64_t)v32, v8);
  v55 = v94;
  *(_QWORD *)&v29[v54] = v94;
  v56 = (uint64_t)v101;
  sub_10000F9B8((uint64_t)v29, (uint64_t)v101, (uint64_t *)&unk_10110C6B0);
  v57 = v102;
  sub_100005CF0((uint64_t)v29, v102, (uint64_t *)&unk_10110C6B0);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v50);
  v58 = v105;
  v59 = v55;
  v105 = v58;
  swift_retain();
  swift_bridgeObjectRetain(v89);
  swift_bridgeObjectRetain(v90);
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v92);
  v61 = Logger.logObject.getter(v60);
  v62 = static os_log_type_t.info.getter(v61);
  v63 = v62;
  v64 = v32;
  if (os_log_type_enabled(v61, v62))
  {
    v65 = swift_slowAlloc(62, -1);
    v66 = swift_slowAlloc(64, -1);
    v93 = v66;
    *(_DWORD *)v65 = 141559299;
    v106 = 1752392040;
    v107[0] = v66;
    v94 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 4, v65 + 12);
    *(_WORD *)(v65 + 12) = 2081;
    LODWORD(v92) = v63;
    v67 = v87;
    v68 = v104;
    v69 = v95;
    v96(v87, v104, v95);
    v70 = v99;
    v91 = *(void (**)(_QWORD, _QWORD, _QWORD))(v99 + 32);
    v71 = v88;
    v91(v88, v67, v69);
    sub_100004048((uint64_t)v68, (uint64_t *)&unk_1011002D0);
    v72 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v73 = dispatch thunk of CustomStringConvertible.description.getter(v69, v72);
    v75 = v74;
    v104 = v61;
    v90 = *(void (**)(char *, uint64_t))(v70 + 8);
    v90(v71, v69);
    v106 = sub_100016940(v73, v75, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v103, (uint64_t *)&unk_1011002D0);
    *(_WORD *)(v65 + 22) = 2160;
    v106 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 24, v65 + 32);
    *(_WORD *)(v65 + 32) = 2081;
    v76 = v98;
    v77 = (uint64_t)v101;
    v96(v98, v101, v69);
    v91(v71, v76, v69);
    v78 = dispatch thunk of CustomStringConvertible.description.getter(v69, v72);
    v80 = v79;
    v90(v71, v69);
    v106 = sub_100016940(v78, v80, v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 34, v65 + 42);
    swift_bridgeObjectRelease();
    sub_100004048(v102, (uint64_t *)&unk_10110C6B0);
    sub_100004048(v77, (uint64_t *)&unk_10110C6B0);
    *(_WORD *)(v65 + 42) = 2049;
    objc_msgSend(v105, "latitude");
    v106 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 44, v65 + 52);

    *(_WORD *)(v65 + 52) = 2049;
    objc_msgSend(v105, "longitude");
    v106 = v82;
    v64 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107, v65 + 54, v65 + 62);

    v83 = v104;
    _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v92, "Received location update for subscription: %{private,mask.hash}s, beaconID: %{private,mask.hash}s.\nLoc: lat: %{private}f, lon: %{private}f.", (uint8_t *)v65, 0x3Eu);
    v84 = v93;
    swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v65, -1, -1);

  }
  else
  {
    sub_100004048((uint64_t)v104, (uint64_t *)&unk_1011002D0);
    sub_100004048(v53, (uint64_t *)&unk_1011002D0);
    sub_100004048(v57, (uint64_t *)&unk_10110C6B0);
    sub_100004048(v56, (uint64_t *)&unk_10110C6B0);

    v69 = v95;
    v76 = v98;
    v70 = v99;
  }
  v85 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
  v85(v76, v64, v69);

  v85(v100, v76, v69);
  return v105;
}

id sub_1005C441C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  os_log_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[3];
  uint64_t v79;
  uint64_t v80;

  v75 = a4;
  v72 = a1;
  v73 = (_QWORD *)a2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v69 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v10 = __chkstk_darwin(v9);
  v67 = (os_log_t)((char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = __chkstk_darwin(v10);
  v71 = (uint64_t)&v64 - v13;
  v14 = __chkstk_darwin(v12);
  v74 = (uint64_t)&v64 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v64 - v16;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v18 = type metadata accessor for Logger(0);
  v70 = sub_10001A9E8(v18, (uint64_t)qword_1011B71C8);
  v19 = *(int *)(v9 + 48);
  v20 = &v17[v19];
  v21 = a5 + v19;
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v65(v17, a5, v6);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v22 = *(_BYTE *)(v21 + 8);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = *(_QWORD *)(v21 + 24);
  v66 = v7;
  v26 = *(_QWORD *)(v21 + 32);
  v25 = *(_QWORD *)(v21 + 40);
  v27 = *(_QWORD *)(v21 + 48);
  v28 = *(_QWORD *)(v21 + 56);
  v29 = *(_BYTE *)(v21 + 64);
  v30 = *(_BYTE *)(v21 + 65);
  v68 = v6;
  v31 = *(_QWORD *)(v21 + 72);
  v32 = *(_BYTE *)(v21 + 96);
  v20[8] = v22;
  *((_QWORD *)v20 + 2) = v23;
  *((_QWORD *)v20 + 3) = v24;
  *((_QWORD *)v20 + 4) = v26;
  *((_QWORD *)v20 + 5) = v25;
  *((_QWORD *)v20 + 6) = v27;
  *((_QWORD *)v20 + 7) = v28;
  v20[64] = v29;
  v20[65] = v30;
  *((_QWORD *)v20 + 9) = v31;
  *((_OWORD *)v20 + 5) = *(_OWORD *)(v21 + 80);
  v20[96] = v32;
  sub_10000F9B8((uint64_t)v17, v74, (uint64_t *)&unk_1011002D0);
  v33 = v71;
  sub_100005CF0((uint64_t)v17, v71, (uint64_t *)&unk_1011002D0);
  v34 = v73;
  sub_100030784((uint64_t)v73, (uint64_t)v78);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  v75 = v75;
  swift_retain();
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v25);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter(v36);
  v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    v39 = swift_slowAlloc(62, -1);
    v40 = swift_slowAlloc(64, -1);
    v70 = v40;
    *(_DWORD *)v39 = 141559299;
    v76 = 1752392040;
    v77 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 4, v39 + 12);
    *(_WORD *)(v39 + 12) = 2081;
    v64 = v39 + 14;
    v42 = v67;
    v41 = v68;
    v43 = v74;
    v65((char *)v67, v74, v68);
    v44 = v66;
    v45 = v69;
    (*(void (**)(char *, os_log_t, uint64_t))(v66 + 32))(v69, v42, v41);
    sub_100004048(v43, (uint64_t *)&unk_1011002D0);
    v46 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v74) = v38;
    v47 = v46;
    v67 = v36;
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v41, v46);
    v50 = v49;
    v51 = *(void (**)(char *, uint64_t))(v44 + 8);
    v51(v45, v41);
    v76 = sub_100016940(v48, v50, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v64, v39 + 22);
    swift_bridgeObjectRelease();
    sub_100004048(v33, (uint64_t *)&unk_1011002D0);
    *(_WORD *)(v39 + 22) = 2160;
    v76 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 24, v39 + 32);
    *(_WORD *)(v39 + 32) = 2081;
    v52 = v79;
    v53 = v80;
    sub_10001AA44(v78, v79);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v53);
    v54 = dispatch thunk of CustomStringConvertible.description.getter(v41, v47);
    v56 = v55;
    v51(v45, v41);
    v76 = sub_100016940(v54, v56, &v77);
    v34 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 34, v39 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v78);
    *(_WORD *)(v39 + 42) = 2049;
    objc_msgSend(v75, "latitude");
    v76 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 44, v39 + 52);

    *(_WORD *)(v39 + 52) = 2049;
    objc_msgSend(v75, "longitude");
    v76 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v39 + 54, v39 + 62);

    v59 = v67;
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v74, "Received location update for subscription: %{private,mask.hash}s, beaconGroupID: %{private,mask.hash}s.\nLoc: lat: %{private}f, lon: %{private}f.", (uint8_t *)v39, 0x3Eu);
    v60 = v70;
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {
    sub_100004048(v74, (uint64_t *)&unk_1011002D0);
    sub_100004048(v33, (uint64_t *)&unk_1011002D0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v78);

  }
  v61 = v34[3];
  v62 = v34[4];
  sub_10001AA44(v34, v61);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v61, v62);
  return v75;
}

BOOL sub_1005C4A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  id v18;
  uint64_t v20;
  id v21;

  v4 = sub_10001A9A8((uint64_t *)&unk_1011002D0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(int *)(v5 + 48);
  v9 = &v7[v8];
  v10 = a1 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v7, a1, v11);
  *(_QWORD *)v9 = *(_QWORD *)v10;
  v13 = *(_BYTE *)(v10 + 64);
  v14 = *(_BYTE *)(v10 + 65);
  v15 = *(_QWORD *)(v10 + 72);
  v16 = *(_BYTE *)(v10 + 96);
  v9[8] = *(_BYTE *)(v10 + 8);
  v17 = *(_OWORD *)(v10 + 32);
  *((_OWORD *)v9 + 1) = *(_OWORD *)(v10 + 16);
  *((_OWORD *)v9 + 2) = v17;
  *((_OWORD *)v9 + 3) = *(_OWORD *)(v10 + 48);
  v9[64] = v13;
  v9[65] = v14;
  *((_QWORD *)v9 + 9) = v15;
  *((_OWORD *)v9 + 5) = *(_OWORD *)(v10 + 80);
  v9[96] = v16;
  swift_retain();
  XPCSession.proxy.getter(&v21);
  swift_release();
  v18 = v21;
  if (v21)
  {
    objc_msgSend(v21, "receivedUpdatedLocation:", a2);
    swift_unknownObjectRelease(v18);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
  return v18 == 0;
}

unint64_t sub_1005C4B54()
{
  unint64_t result;

  result = qword_1011002A0;
  if (!qword_1011002A0)
  {
    result = swift_getWitnessTable(aA_35, &type metadata for LocationFetchService.Error);
    atomic_store(result, (unint64_t *)&qword_1011002A0);
  }
  return result;
}

uint64_t sub_1005C4B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1011002B4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100067F58;
  return sub_1005C0824(a1, v1);
}

uint64_t sub_1005C4BE8()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1005C4C0C(uint64_t a1)
{
  uint64_t v1;

  sub_1005C0D2C(a1, v1 + 16);
}

uint64_t sub_1005C4C1C(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(unint64_t, char *, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101108FE0);
  v12 = __chkstk_darwin(v11);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease();
  LODWORD(v58) = a2;
  v55 = v3;
  v17 = *(int *)(v12 + 48);
  v54 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v54;
  v60 = *(_QWORD *)(v13 + 72);
  v57 = a1;
  swift_bridgeObjectRetain(a1);
  sub_10000F9B8(v18, (uint64_t)v15, &qword_101108FE0);
  v56 = v8;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  v61 = v7;
  v62 = v19;
  v19((unint64_t)v10, v15, v7);
  v59 = v17;
  v20 = *(void **)&v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = sub_100003FB0((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v8 = v22;
  if (v21[3] >= v26)
  {
    if ((v58 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_100A9BF6C();
      if ((v8 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v33 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v34 = v33[6];
    v58 = *(_QWORD *)(v56 + 72);
    v8 = v61;
    v62(v34 + v58 * v23, v10, v61);
    *(_QWORD *)(v33[7] + 8 * v23) = v20;
    v35 = v33[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v33[2] = v37;
    v38 = v16 - 1;
    if (v16 == 1)
      return swift_bridgeObjectRelease_n(v57, 2);
    v39 = v57 + v60 + v54;
    while (1)
    {
      sub_10000F9B8(v39, (uint64_t)v15, &qword_101108FE0);
      v62((unint64_t)v10, v15, v8);
      v20 = *(void **)&v15[v59];
      v40 = (_QWORD *)*a3;
      v42 = sub_100003FB0((uint64_t)v10);
      v43 = v40[2];
      v44 = (v41 & 1) == 0;
      v45 = v43 + v44;
      if (__OFADD__(v43, v44))
        break;
      v8 = v41;
      if (v40[3] < v45)
      {
        sub_100A8994C(v45, 1);
        v46 = sub_100003FB0((uint64_t)v10);
        if ((v8 & 1) != (v47 & 1))
          goto LABEL_26;
        v42 = v46;
      }
      if ((v8 & 1) != 0)
        goto LABEL_10;
      v48 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      v8 = v61;
      v62(v48[6] + v58 * v42, v10, v61);
      *(_QWORD *)(v48[7] + 8 * v42) = v20;
      v49 = v48[2];
      v36 = __OFADD__(v49, 1);
      v50 = v49 + 1;
      if (v36)
        goto LABEL_25;
      v48[2] = v50;
      v39 += v60;
      if (!--v38)
        return swift_bridgeObjectRelease_n(v57, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_100A8994C(v26, v58 & 1);
  v27 = sub_100003FB0((uint64_t)v10);
  if ((v8 & 1) == (v28 & 1))
  {
    v23 = v27;
    if ((v8 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v30 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v30);
    v65 = v30;
    swift_errorRetain(v30);
    v31 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v32 = swift_dynamicCast(v31, &v65, v31, &type metadata for _MergeError, 0);
    v8 = v61;
    if ((v32 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v8);
      swift_bridgeObjectRelease();
      return swift_errorRelease(v65);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v61);
  __break(1u);
LABEL_27:
  v63 = 0;
  v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v51._object = (void *)0x8000000100EDC680;
  v51._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v51);
  _print_unlocked<A, B>(_:_:)(v10, &v63, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v52._countAndFlagsBits = 39;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v63, v64, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_1005C50B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v3[42] = a1;
  v3[43] = a3;
  v6 = type metadata accessor for String.Encoding(0);
  v3[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v3[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3[46] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[47] = v9;
  v3[48] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EF480);
  v3[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconIdentifier(0);
  v3[50] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[51] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v3[52] = v13;
  v3[53] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F46C0);
  v3[54] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v3[55] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[56] = v16;
  v3[57] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Date(0);
  v3[58] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[59] = v18;
  v3[60] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3[61] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF488) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[62] = swift_task_alloc(v20);
  v21 = swift_task_alloc(v20);
  v3[63] = v21;
  v22 = type metadata accessor for DeviceEvent(0);
  v3[64] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v3[65] = v23;
  v24 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[66] = swift_task_alloc(v24);
  v3[67] = swift_task_alloc(v24);
  v3[68] = swift_task_alloc(v24);
  v3[69] = swift_task_alloc(v24);
  v3[70] = swift_task_alloc(v24);
  v3[71] = swift_task_alloc(v24);
  v3[72] = swift_task_alloc(v24);
  v3[5] = v8;
  v3[6] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v25 = sub_100018F08(v3 + 2);
  v3[73] = v25;
  sub_10005972C(a2, (uint64_t)v25, type metadata accessor for LocalFindableAccessoryRecord);
  v26 = (_QWORD *)swift_task_alloc(dword_10110003C);
  v3[74] = v26;
  *v26 = v3;
  v26[1] = sub_1005C5378;
  return sub_1005BD44C(v21, a1);
}

uint64_t sub_1005C5378()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 344);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 592));
  return swift_task_switch(sub_1005C53D0, v1, 0);
}

uint64_t sub_1005C53D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  __n128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  void (*v63)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char isUniquelyReferenced_nonNull_native;
  void (*v97)(uint64_t, uint64_t);
  void (*v98)(uint64_t, _QWORD *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_log_type_t v106;
  uint64_t v107;
  os_log_t log;
  NSObject *loga;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115[3];

  v2 = *(_QWORD *)(v0 + 504);
  v1 = *(_QWORD *)(v0 + 512);
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 520) + 48);
  *(_QWORD *)(v0 + 600) = v3;
  if (v3(v2, 1, v1) == 1)
  {
    sub_100004048(v2, &qword_1010EF488);
    v4 = (_QWORD *)swift_task_alloc(dword_101100034);
    *(_QWORD *)(v0 + 608) = v4;
    *v4 = v0;
    v4[1] = sub_1005C5EC8;
    return sub_1005BC5C0(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 336));
  }
  v6 = v0 + 16;
  v7 = (_QWORD *)(v0 + 176);
  sub_1000126EC(v2, *(_QWORD *)(v0 + 568), type metadata accessor for DeviceEvent);
  v8 = *(_QWORD *)(v0 + 576);
  sub_1000126EC(*(_QWORD *)(v0 + 568), v8, type metadata accessor for DeviceEvent);
  if (*(_BYTE *)(v8 + 9) == 5)
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v9 = *(_QWORD *)(v0 + 488);
    v10 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 472);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v12 = sub_100C1AE9C(*(_QWORD *)(v0 + 312));
    swift_bridgeObjectRelease();
    Date.addingTimeInterval(_:)((double)v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    v7 = (_QWORD *)(v0 + 176);
    if (v13 != 1)
    {
      v14 = *(_QWORD *)(v0 + 480);
      v15 = *(_QWORD *)(v0 + 488);
      v16 = *(_QWORD *)(v0 + 464);
      v17 = *(_QWORD *)(v0 + 472);
      static Date.trustedNow.getter(v14);
      v18 = Date.timeIntervalSince(_:)(v14);
      v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v19(v14, v16);
      v19(v15, v16);
      if (v18 > 0.0)
      {
        v111 = v8;
        log = (os_log_t)(v0 + 216);
        v20 = *(_QWORD *)(v0 + 336) + *(int *)(*(_QWORD *)(v0 + 400) + 20);
        v21 = (_QWORD *)(*(_QWORD *)(v0 + 344) + 152);
        v22 = swift_beginAccess(v21, v0 + 240, 0, 0);
        if (*(_QWORD *)(*v21 + 16))
        {
          swift_bridgeObjectRetain(*v21);
          sub_100003FB0(v20);
          if ((v23 & 1) != 0)
          {
            swift_retain();
            swift_bridgeObjectRelease();
            sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            Task.cancel()();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v107 = *(_QWORD *)(v0 + 448);
        v83 = *(_QWORD *)(v0 + 432);
        v103 = *(_QWORD *)(v0 + 456);
        v105 = *(_QWORD *)(v0 + 440);
        v84 = *(_QWORD *)(v0 + 416);
        v85 = *(_QWORD *)(v0 + 424);
        v86 = *(_QWORD *)(v0 + 408);
        v87 = *(_QWORD *)(v0 + 336);
        v88 = *(_QWORD *)(v0 + 344);
        (*(void (**)(__n128))(v107 + 16))(v22);
        v89 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v83, 1, 1, v89);
        v90 = swift_allocObject(&unk_101081290, 24, 7);
        swift_weakInit(v90 + 16, v88);
        sub_10005972C(v87, v85, type metadata accessor for BeaconIdentifier);
        v6 = v0 + 16;
        sub_100030784(v0 + 16, v0 + 96);
        v91 = *(unsigned __int8 *)(v86 + 80);
        v92 = (v91 + 48) & ~v91;
        v93 = (v84 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
        v94 = swift_allocObject(&unk_1010816C8, v93 + 40, v91 | 7);
        *(_QWORD *)(v94 + 16) = 0;
        *(_QWORD *)(v94 + 24) = 0;
        *(double *)(v94 + 32) = v18;
        *(_QWORD *)(v94 + 40) = v90;
        sub_1000126EC(v85, v94 + v92, type metadata accessor for BeaconIdentifier);
        sub_10000F9FC((__int128 *)(v0 + 96), v94 + v93);
        v95 = sub_100626BC4(v83, (uint64_t)&unk_101100498, v94);
        swift_beginAccess(v21, log, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
        v115[0] = *v21;
        *v21 = 0x8000000000000000;
        sub_10010D4BC(v95, v103, isUniquelyReferenced_nonNull_native);
        *v21 = v115[0];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v103, v105);
        swift_endAccess(log);
        v8 = v111;
        v7 = (_QWORD *)(v0 + 176);
      }
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 472) + 56))(*(_QWORD *)(v0 + 488), 1, 1, *(_QWORD *)(v0 + 464));
  }
  sub_100004048(*(_QWORD *)(v0 + 488), (uint64_t *)&unk_1010EA690);
LABEL_13:
  v113 = v0 + 136;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v24 = *(_QWORD *)(v0 + 576);
  v25 = *(_QWORD *)(v0 + 552);
  v26 = *(_QWORD *)(v0 + 544);
  v27 = *(_QWORD *)(v0 + 536);
  v28 = type metadata accessor for Logger(0);
  sub_10001A9E8(v28, (uint64_t)qword_1011B71C8);
  sub_100030784(v6, (uint64_t)v7);
  sub_10005972C(v24, v25, type metadata accessor for DeviceEvent);
  sub_10005972C(v24, v26, type metadata accessor for DeviceEvent);
  v29 = sub_10005972C(v24, v27, type metadata accessor for DeviceEvent);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v33 = *(_QWORD *)(v0 + 552);
  v34 = *(_QWORD *)(v0 + 544);
  v35 = *(_QWORD *)(v0 + 536);
  if (v32)
  {
    v106 = v31;
    loga = v30;
    v110 = v6;
    v112 = v8;
    v99 = *(_QWORD *)(v0 + 544);
    v100 = *(_QWORD *)(v0 + 512);
    v36 = *(_QWORD *)(v0 + 456);
    v101 = *(_QWORD *)(v0 + 464);
    v37 = v7;
    v39 = *(_QWORD *)(v0 + 440);
    v38 = *(_QWORD *)(v0 + 448);
    v102 = *(_QWORD *)(v0 + 392);
    v40 = swift_slowAlloc(58, -1);
    v104 = swift_slowAlloc(96, -1);
    v115[0] = v104;
    *(_DWORD *)v40 = 141559299;
    *(_QWORD *)(v0 + 264) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2081;
    v41 = sub_10001AA44(v37, *(_QWORD *)(v0 + 200));
    v98 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v38 + 16);
    v98(v36, v41, v39);
    v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v39, v42);
    v45 = v44;
    v97 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v97(v36, v39);
    *(_QWORD *)(v0 + 280) = sub_100016940(v43, v45, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
    *(_WORD *)(v40 + 22) = 1026;
    LODWORD(v45) = *(unsigned __int8 *)(v33 + 9);
    sub_1000126B0(v33, type metadata accessor for DeviceEvent);
    *(_DWORD *)(v0 + 632) = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 636, v40 + 24, v40 + 28);
    *(_WORD *)(v40 + 28) = 2082;
    v46 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v101, v46);
    *(_QWORD *)(v0 + 288) = sub_100016940(v47, v48, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v40 + 30, v40 + 38);
    swift_bridgeObjectRelease();
    sub_1000126B0(v99, type metadata accessor for DeviceEvent);
    *(_WORD *)(v40 + 38) = 2160;
    *(_QWORD *)(v0 + 296) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v40 + 40, v40 + 48);
    *(_WORD *)(v40 + 48) = 2081;
    sub_10000F9B8(v35 + *(int *)(v100 + 32), v102, &qword_1010EF480);
    v49 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v102, 1, v49) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 392), &qword_1010EF480);
      v50 = 0xE400000000000000;
      v51 = 1701736302;
    }
    else
    {
      v52 = *(_QWORD *)(v0 + 456);
      v53 = *(_QWORD *)(v0 + 440);
      v54 = *(_QWORD *)(v0 + 392);
      v98(v52, (_QWORD *)v54, v53);
      v55 = sub_1000126B0(v54, type metadata accessor for DeviceEvent.AttachmentInfo);
      v51 = UUID.uuidString.getter(v55);
      v50 = v56;
      v97(v52, v53);
    }
    v8 = v112;
    v57 = *(_QWORD *)(v0 + 536);
    *(_QWORD *)(v0 + 304) = sub_100016940(v51, v50, v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v40 + 50, v40 + 58);
    swift_bridgeObjectRelease();
    sub_1000126B0(v57, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, loga, v106, "Update device event; beacon: %{private,mask.hash}s source: %{public}u, timestamp: %{public}s, attached to: %{private,mask.hash}s.",
      (uint8_t *)v40,
      0x3Au);
    swift_arrayDestroy(v104, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    v6 = v110;
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 552), type metadata accessor for DeviceEvent);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    sub_1000126B0(v34, type metadata accessor for DeviceEvent);
    sub_1000126B0(v35, type metadata accessor for DeviceEvent);

  }
  v58 = *(_QWORD *)(v0 + 368);
  v59 = *(_QWORD *)(v0 + 376);
  v60 = *(_QWORD *)(v0 + 360);
  sub_100030784(v6, v113);
  v61 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v62 = swift_dynamicCast(v60, v113, v61, v58, 6);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56);
  if (v62)
  {
    v64 = *(_QWORD *)(v0 + 384);
    v66 = *(_QWORD *)(v0 + 360);
    v65 = *(_QWORD *)(v0 + 368);
    v67 = *(_QWORD *)(v0 + 352);
    v63(v66, 0, 1, v65);
    sub_1000126EC(v66, v64, type metadata accessor for LocalFindableAccessoryRecord);
    v68 = (uint64_t *)(v64 + *(int *)(v65 + 28));
    v69 = *v68;
    v70 = v68[1];
    v71 = sub_10001BBBC(*v68, v70);
    static String.Encoding.utf8.getter(v71);
    v72 = String.init(data:encoding:)(v69, v70, v67);
    if (!v73)
      v72 = Data.hexString.getter(v69, v70);
    v74 = v72;
    v75 = v73;
    sub_10001BC14(v69, v70);
    sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for LocalFindableAccessoryRecord);
  }
  else
  {
    v76 = *(_QWORD *)(v0 + 360);
    v63(v76, 1, 1, *(_QWORD *)(v0 + 368));
    sub_100004048(v76, (uint64_t *)&unk_1010EDC50);
    v74 = 0;
    v75 = 0;
  }
  v77 = *(_QWORD *)(v0 + 576);
  v78 = *(_QWORD *)(v0 + 528);
  v79 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + 160);
  sub_10000F4A0(0, (unint64_t *)&qword_101100478, SPDeviceEvent_ptr);
  sub_10005972C(v77, v78, type metadata accessor for DeviceEvent);
  v80 = sub_1005BC3C4(v78, v74, v75);
  *(_QWORD *)(v0 + 616) = v80;
  v81 = 0x10F0F0F0F040200uLL >> (8 * *(_BYTE *)(v8 + 9));
  v114 = (char *)&dword_101100480 + dword_101100480;
  v82 = (_QWORD *)swift_task_alloc(unk_101100484);
  *(_QWORD *)(v0 + 624) = v82;
  *v82 = v0;
  v82[1] = sub_1005C6DF8;
  return ((uint64_t (*)(id, _QWORD, unint64_t, uint64_t))v114)(v80, *(_QWORD *)(v0 + 584), v81, v79);
}

uint64_t sub_1005C5EC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 344);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  return swift_task_switch(sub_1005C5F20, v1, 0);
}

uint64_t sub_1005C5F20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  __n128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  void (*v84)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char isUniquelyReferenced_nonNull_native;
  void (*v118)(uint64_t, uint64_t);
  void (*v119)(uint64_t, _QWORD *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  os_log_type_t v130;
  uint64_t v131;
  os_log_t v132;
  os_log_t v133;
  os_log_t v134;
  NSObject *v135;
  uint64_t *v136;
  uint64_t v137;
  NSObject *loga;
  os_log_t logb;
  os_log_t log;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149[3];

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 496);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0 + 600))(v2, 1, *(_QWORD *)(v0 + 512)) == 1)
  {
    sub_100004048(v2, &qword_1010EF488);
    v3 = sub_1005C4B54();
    v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0, 0);
    *v5 = 3;
    swift_willThrow(v4);
    swift_errorRetain(v4);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B71C8);
    sub_100030784(v0 + 16, v0 + 56);
    swift_errorRetain(v4);
    v7 = swift_errorRetain(v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      loga = v8;
      v10 = *(_QWORD *)(v0 + 456);
      v132 = *(os_log_t *)(v0 + 448);
      v11 = *(_QWORD *)(v0 + 440);
      v12 = swift_slowAlloc(32, -1);
      v136 = (uint64_t *)swift_slowAlloc(8, -1);
      v141 = swift_slowAlloc(32, -1);
      v149[0] = v141;
      *(_DWORD *)v12 = 138543875;
      swift_errorRetain(v4);
      v13 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(_QWORD *)(v0 + 328) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v12 + 4, v12 + 12);
      *v136 = v13;
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      *(_WORD *)(v12 + 12) = 2160;
      *(_QWORD *)(v0 + 320) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      v14 = sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      ((void (*)(uint64_t, _QWORD *, uint64_t))v132[2].isa)(v10, v14, v11);
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
      v18 = v17;
      ((void (*)(uint64_t, uint64_t))v132[1].isa)(v10, v11);
      *(_QWORD *)(v0 + 272) = sub_100016940(v16, v18, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
      _os_log_impl((void *)&_mh_execute_header, loga, v9, "Failed to send the attach event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v136, 1, v19);
      swift_slowDealloc(v136, -1, -1);
      swift_arrayDestroy(v141, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(v4);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));

    }
    swift_errorRelease(v4);
    v36 = *(_QWORD *)(v0 + 576);
    v37 = *(_QWORD *)(v0 + 568);
    v38 = *(_QWORD *)(v0 + 560);
    v39 = *(_QWORD *)(v0 + 552);
    v40 = *(_QWORD *)(v0 + 544);
    v41 = *(_QWORD *)(v0 + 536);
    v42 = *(_QWORD *)(v0 + 528);
    v44 = *(_QWORD *)(v0 + 496);
    v43 = *(_QWORD *)(v0 + 504);
    v123 = *(_QWORD *)(v0 + 488);
    v126 = *(_QWORD *)(v0 + 480);
    v129 = *(_QWORD *)(v0 + 456);
    v134 = *(os_log_t *)(v0 + 432);
    v137 = *(_QWORD *)(v0 + 424);
    logb = *(os_log_t *)(v0 + 392);
    v143 = *(_QWORD *)(v0 + 384);
    v144 = *(_QWORD *)(v0 + 360);
    v146 = *(_QWORD *)(v0 + 352);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v134);
    swift_task_dealloc(v137);
    swift_task_dealloc(logb);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v20 = (_QWORD *)(v0 + 176);
  sub_1000126EC(v2, *(_QWORD *)(v0 + 560), type metadata accessor for DeviceEvent);
  v21 = *(_QWORD *)(v0 + 576);
  sub_1000126EC(*(_QWORD *)(v0 + 560), v21, type metadata accessor for DeviceEvent);
  v142 = v21;
  if (*(_BYTE *)(v21 + 9) == 5)
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v22 = *(_QWORD *)(v0 + 488);
    v23 = *(_QWORD *)(v0 + 464);
    v24 = *(_QWORD *)(v0 + 472);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v25 = sub_100C1AE9C(*(_QWORD *)(v0 + 312));
    swift_bridgeObjectRelease();
    Date.addingTimeInterval(_:)((double)v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v22, 0, 1, v23);
    v20 = (_QWORD *)(v0 + 176);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) != 1)
    {
      v26 = *(_QWORD *)(v0 + 480);
      v27 = *(_QWORD *)(v0 + 488);
      v28 = *(_QWORD *)(v0 + 464);
      v29 = *(_QWORD *)(v0 + 472);
      static Date.trustedNow.getter(v26);
      v30 = Date.timeIntervalSince(_:)(v26);
      v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v31(v26, v28);
      v31(v27, v28);
      if (v30 > 0.0)
      {
        v133 = (os_log_t)(v0 + 216);
        v32 = *(_QWORD *)(v0 + 336) + *(int *)(*(_QWORD *)(v0 + 400) + 20);
        v33 = (_QWORD *)(*(_QWORD *)(v0 + 344) + 152);
        v34 = swift_beginAccess(v33, v0 + 240, 0, 0);
        if (*(_QWORD *)(*v33 + 16))
        {
          swift_bridgeObjectRetain(*v33);
          sub_100003FB0(v32);
          if ((v35 & 1) != 0)
          {
            swift_retain();
            swift_bridgeObjectRelease();
            sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            Task.cancel()();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v131 = *(_QWORD *)(v0 + 448);
        v104 = *(_QWORD *)(v0 + 432);
        v125 = *(_QWORD *)(v0 + 456);
        v128 = *(_QWORD *)(v0 + 440);
        v105 = *(_QWORD *)(v0 + 416);
        v106 = *(_QWORD *)(v0 + 424);
        v107 = *(_QWORD *)(v0 + 408);
        v108 = *(_QWORD *)(v0 + 336);
        v109 = *(_QWORD *)(v0 + 344);
        (*(void (**)(__n128))(v131 + 16))(v34);
        v110 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v104, 1, 1, v110);
        v111 = swift_allocObject(&unk_101081290, 24, 7);
        swift_weakInit(v111 + 16, v109);
        sub_10005972C(v108, v106, type metadata accessor for BeaconIdentifier);
        v1 = v0 + 16;
        sub_100030784(v0 + 16, v0 + 96);
        v112 = *(unsigned __int8 *)(v107 + 80);
        v113 = (v112 + 48) & ~v112;
        v114 = (v105 + v113 + 7) & 0xFFFFFFFFFFFFFFF8;
        v115 = swift_allocObject(&unk_1010816C8, v114 + 40, v112 | 7);
        *(_QWORD *)(v115 + 16) = 0;
        *(_QWORD *)(v115 + 24) = 0;
        *(double *)(v115 + 32) = v30;
        *(_QWORD *)(v115 + 40) = v111;
        sub_1000126EC(v106, v115 + v113, type metadata accessor for BeaconIdentifier);
        sub_10000F9FC((__int128 *)(v0 + 96), v115 + v114);
        v116 = sub_100626BC4(v104, (uint64_t)&unk_101100498, v115);
        swift_beginAccess(v33, v133, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v33);
        v149[0] = *v33;
        *v33 = 0x8000000000000000;
        sub_10010D4BC(v116, v125, isUniquelyReferenced_nonNull_native);
        *v33 = v149[0];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v125, v128);
        swift_endAccess(v133);
        v20 = (_QWORD *)(v0 + 176);
      }
      goto LABEL_18;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 472) + 56))(*(_QWORD *)(v0 + 488), 1, 1, *(_QWORD *)(v0 + 464));
  }
  sub_100004048(*(_QWORD *)(v0 + 488), (uint64_t *)&unk_1010EA690);
LABEL_18:
  log = (os_log_t)(v0 + 136);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v46 = *(_QWORD *)(v0 + 576);
  v47 = *(_QWORD *)(v0 + 552);
  v48 = *(_QWORD *)(v0 + 544);
  v49 = *(_QWORD *)(v0 + 536);
  v50 = type metadata accessor for Logger(0);
  sub_10001A9E8(v50, (uint64_t)qword_1011B71C8);
  sub_100030784(v1, (uint64_t)v20);
  sub_10005972C(v46, v47, type metadata accessor for DeviceEvent);
  sub_10005972C(v46, v48, type metadata accessor for DeviceEvent);
  v51 = sub_10005972C(v46, v49, type metadata accessor for DeviceEvent);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  v54 = os_log_type_enabled(v52, v53);
  v55 = *(_QWORD *)(v0 + 552);
  v56 = *(_QWORD *)(v0 + 544);
  v57 = *(_QWORD *)(v0 + 536);
  if (v54)
  {
    v130 = v53;
    v135 = v52;
    v147 = v1;
    v121 = *(_QWORD *)(v0 + 512);
    v58 = *(_QWORD *)(v0 + 456);
    v122 = *(_QWORD *)(v0 + 464);
    v59 = *(_QWORD *)(v0 + 440);
    v60 = *(_QWORD *)(v0 + 448);
    v124 = *(_QWORD *)(v0 + 392);
    v120 = *(_QWORD *)(v0 + 544);
    v61 = swift_slowAlloc(58, -1);
    v127 = swift_slowAlloc(96, -1);
    v149[0] = v127;
    *(_DWORD *)v61 = 141559299;
    *(_QWORD *)(v0 + 264) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v61 + 4, v61 + 12);
    *(_WORD *)(v61 + 12) = 2081;
    v62 = sub_10001AA44(v20, *(_QWORD *)(v0 + 200));
    v119 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v60 + 16);
    v119(v58, v62, v59);
    v63 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v64 = dispatch thunk of CustomStringConvertible.description.getter(v59, v63);
    v145 = v57;
    v66 = v65;
    v118 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v118(v58, v59);
    *(_QWORD *)(v0 + 280) = sub_100016940(v64, v66, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v61 + 14, v61 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    *(_WORD *)(v61 + 22) = 1026;
    LODWORD(v66) = *(unsigned __int8 *)(v55 + 9);
    sub_1000126B0(v55, type metadata accessor for DeviceEvent);
    *(_DWORD *)(v0 + 632) = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 632, v0 + 636, v61 + 24, v61 + 28);
    *(_WORD *)(v61 + 28) = 2082;
    v67 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v68 = dispatch thunk of CustomStringConvertible.description.getter(v122, v67);
    *(_QWORD *)(v0 + 288) = sub_100016940(v68, v69, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v61 + 30, v61 + 38);
    swift_bridgeObjectRelease();
    sub_1000126B0(v120, type metadata accessor for DeviceEvent);
    *(_WORD *)(v61 + 38) = 2160;
    *(_QWORD *)(v0 + 296) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v61 + 40, v61 + 48);
    *(_WORD *)(v61 + 48) = 2081;
    sub_10000F9B8(v145 + *(int *)(v121 + 32), v124, &qword_1010EF480);
    v70 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 48))(v124, 1, v70) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 392), &qword_1010EF480);
      v71 = 0xE400000000000000;
      v72 = 1701736302;
    }
    else
    {
      v73 = *(_QWORD *)(v0 + 456);
      v74 = *(_QWORD *)(v0 + 440);
      v75 = *(_QWORD *)(v0 + 392);
      v119(v73, (_QWORD *)v75, v74);
      v76 = sub_1000126B0(v75, type metadata accessor for DeviceEvent.AttachmentInfo);
      v72 = UUID.uuidString.getter(v76);
      v71 = v77;
      v118(v73, v74);
    }
    v78 = *(_QWORD *)(v0 + 536);
    *(_QWORD *)(v0 + 304) = sub_100016940(v72, v71, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v61 + 50, v61 + 58);
    swift_bridgeObjectRelease();
    sub_1000126B0(v78, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, v135, v130, "Update device event; beacon: %{private,mask.hash}s source: %{public}u, timestamp: %{public}s, attached to: %{private,mask.hash}s.",
      (uint8_t *)v61,
      0x3Au);
    swift_arrayDestroy(v127, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v127, -1, -1);
    swift_slowDealloc(v61, -1, -1);

    v1 = v147;
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 552), type metadata accessor for DeviceEvent);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    sub_1000126B0(v56, type metadata accessor for DeviceEvent);
    sub_1000126B0(v57, type metadata accessor for DeviceEvent);

  }
  v79 = *(_QWORD *)(v0 + 368);
  v80 = *(_QWORD *)(v0 + 376);
  v81 = *(_QWORD *)(v0 + 360);
  sub_100030784(v1, (uint64_t)log);
  v82 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v83 = swift_dynamicCast(v81, log, v82, v79, 6);
  v84 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 56);
  if (v83)
  {
    v85 = *(_QWORD *)(v0 + 384);
    v87 = *(_QWORD *)(v0 + 360);
    v86 = *(_QWORD *)(v0 + 368);
    v88 = *(_QWORD *)(v0 + 352);
    v84(v87, 0, 1, v86);
    sub_1000126EC(v87, v85, type metadata accessor for LocalFindableAccessoryRecord);
    v89 = (uint64_t *)(v85 + *(int *)(v86 + 28));
    v90 = *v89;
    v91 = v89[1];
    v92 = sub_10001BBBC(*v89, v91);
    static String.Encoding.utf8.getter(v92);
    v93 = String.init(data:encoding:)(v90, v91, v88);
    if (!v94)
      v93 = Data.hexString.getter(v90, v91);
    v95 = v93;
    v96 = v94;
    sub_10001BC14(v90, v91);
    sub_1000126B0(*(_QWORD *)(v0 + 384), type metadata accessor for LocalFindableAccessoryRecord);
  }
  else
  {
    v97 = *(_QWORD *)(v0 + 360);
    v84(v97, 1, 1, *(_QWORD *)(v0 + 368));
    sub_100004048(v97, (uint64_t *)&unk_1010EDC50);
    v95 = 0;
    v96 = 0;
  }
  v98 = *(_QWORD *)(v0 + 576);
  v99 = *(_QWORD *)(v0 + 528);
  v100 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + 160);
  sub_10000F4A0(0, (unint64_t *)&qword_101100478, SPDeviceEvent_ptr);
  sub_10005972C(v98, v99, type metadata accessor for DeviceEvent);
  v101 = sub_1005BC3C4(v99, v95, v96);
  *(_QWORD *)(v0 + 616) = v101;
  v102 = 0x10F0F0F0F040200uLL >> (8 * *(_BYTE *)(v142 + 9));
  v148 = (char *)&dword_101100480 + dword_101100480;
  v103 = (_QWORD *)swift_task_alloc(unk_101100484);
  *(_QWORD *)(v0 + 624) = v103;
  *v103 = v0;
  v103[1] = sub_1005C6DF8;
  return ((uint64_t (*)(id, _QWORD, unint64_t, uint64_t))v148)(v101, *(_QWORD *)(v0 + 584), v102, v100);
}

uint64_t sub_1005C6DF8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(*(_QWORD *)v0 + 616);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 344);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 624));

  return swift_task_switch(sub_1005C6E58, v2, 0);
}

uint64_t sub_1005C6E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000126B0(*(_QWORD *)(v0 + 576), type metadata accessor for DeviceEvent);
  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 552);
  v5 = *(_QWORD *)(v0 + 544);
  v6 = *(_QWORD *)(v0 + 536);
  v7 = *(_QWORD *)(v0 + 528);
  v8 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 496);
  v11 = *(_QWORD *)(v0 + 488);
  v12 = *(_QWORD *)(v0 + 480);
  v13 = *(_QWORD *)(v0 + 456);
  v14 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 424);
  v16 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 384);
  v18 = *(_QWORD *)(v0 + 360);
  v19 = *(_QWORD *)(v0 + 352);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C6FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;

  v5[44] = a4;
  v5[45] = a5;
  v5[42] = a1;
  v5[43] = a3;
  v9 = type metadata accessor for String.Encoding(0);
  v5[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v5[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v5[48] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[49] = v12;
  v5[50] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF480);
  v5[51] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for BeaconIdentifier(0);
  v5[52] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v5[53] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v5[54] = v16;
  v5[55] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F46C0);
  v5[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v5[57] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v5[58] = v19;
  v5[59] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date(0);
  v5[60] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v5[61] = v21;
  v5[62] = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5[63] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF488) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[64] = swift_task_alloc(v23);
  v24 = swift_task_alloc(v23);
  v5[65] = v24;
  v25 = type metadata accessor for DeviceEvent(0);
  v5[66] = v25;
  v26 = *(_QWORD *)(v25 - 8);
  v5[67] = v26;
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[68] = swift_task_alloc(v27);
  v5[69] = swift_task_alloc(v27);
  v5[70] = swift_task_alloc(v27);
  v5[71] = swift_task_alloc(v27);
  v5[72] = swift_task_alloc(v27);
  v5[73] = swift_task_alloc(v27);
  v5[74] = swift_task_alloc(v27);
  v5[5] = a4;
  v5[6] = a5;
  v5[75] = sub_100018F08(v5 + 2);
  (*(void (**)(void))(*(_QWORD *)(a4 - 8) + 16))();
  v28 = (_QWORD *)swift_task_alloc(dword_10110003C);
  v5[76] = v28;
  *v28 = v5;
  v28[1] = sub_1005C7250;
  return sub_1005BD44C(v24, a1);
}

uint64_t sub_1005C7250()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 344);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  return swift_task_switch(sub_1005C72A8, v1, 0);
}

uint64_t sub_1005C72A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int (*v3)(uint64_t, uint64_t, uint64_t);
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  __n128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void (*v64)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint64_t v109;
  os_log_t log;
  NSObject *loga;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117[2];

  v1 = *(_QWORD *)(v0 + 528);
  v2 = *(_QWORD *)(v0 + 520);
  v3 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 536) + 48);
  *(_QWORD *)(v0 + 616) = v3;
  if (v3(v2, 1, v1) == 1)
  {
    sub_100004048(v2, &qword_1010EF488);
    v4 = (_QWORD *)swift_task_alloc(dword_101100034);
    *(_QWORD *)(v0 + 624) = v4;
    *v4 = v0;
    v4[1] = sub_1005C7DBC;
    return sub_1005BC5C0(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 336));
  }
  v6 = v0 + 16;
  v7 = (_QWORD *)(v0 + 176);
  sub_1000126EC(v2, *(_QWORD *)(v0 + 584), type metadata accessor for DeviceEvent);
  v8 = *(_QWORD *)(v0 + 592);
  sub_1000126EC(*(_QWORD *)(v0 + 584), v8, type metadata accessor for DeviceEvent);
  if (*(_BYTE *)(v8 + 9) == 5)
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v9 = *(_QWORD *)(v0 + 504);
    v10 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 488);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v12 = sub_100C1AE9C(*(_QWORD *)(v0 + 312));
    swift_bridgeObjectRelease();
    Date.addingTimeInterval(_:)((double)v12);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    v7 = (_QWORD *)(v0 + 176);
    if (v13 != 1)
    {
      v14 = *(_QWORD *)(v0 + 496);
      v15 = *(_QWORD *)(v0 + 504);
      v16 = *(_QWORD *)(v0 + 480);
      v17 = *(_QWORD *)(v0 + 488);
      static Date.trustedNow.getter(v14);
      v18 = Date.timeIntervalSince(_:)(v14);
      v19 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v19(v14, v16);
      v19(v15, v16);
      if (v18 > 0.0)
      {
        v113 = v8;
        log = (os_log_t)(v0 + 216);
        v20 = *(_QWORD *)(v0 + 336) + *(int *)(*(_QWORD *)(v0 + 416) + 20);
        v21 = (_QWORD *)(*(_QWORD *)(v0 + 344) + 152);
        v22 = swift_beginAccess(v21, v0 + 240, 0, 0);
        if (*(_QWORD *)(*v21 + 16))
        {
          swift_bridgeObjectRetain(*v21);
          sub_100003FB0(v20);
          if ((v23 & 1) != 0)
          {
            swift_retain();
            swift_bridgeObjectRelease();
            sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            Task.cancel()();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v109 = *(_QWORD *)(v0 + 464);
        v84 = *(_QWORD *)(v0 + 448);
        v105 = *(_QWORD *)(v0 + 472);
        v107 = *(_QWORD *)(v0 + 456);
        v85 = *(_QWORD *)(v0 + 432);
        v86 = *(_QWORD *)(v0 + 440);
        v87 = *(_QWORD *)(v0 + 424);
        v88 = *(_QWORD *)(v0 + 336);
        v89 = *(_QWORD *)(v0 + 344);
        (*(void (**)(__n128))(v109 + 16))(v22);
        v90 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v84, 1, 1, v90);
        v91 = swift_allocObject(&unk_101081290, 24, 7);
        swift_weakInit(v91 + 16, v89);
        sub_10005972C(v88, v86, type metadata accessor for BeaconIdentifier);
        v6 = v0 + 16;
        sub_100030784(v0 + 16, v0 + 96);
        v92 = *(unsigned __int8 *)(v87 + 80);
        v93 = (v92 + 48) & ~v92;
        v94 = (v85 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
        v95 = swift_allocObject(&unk_1010816F0, v94 + 40, v92 | 7);
        *(_QWORD *)(v95 + 16) = 0;
        *(_QWORD *)(v95 + 24) = 0;
        *(double *)(v95 + 32) = v18;
        *(_QWORD *)(v95 + 40) = v91;
        sub_1000126EC(v86, v95 + v93, type metadata accessor for BeaconIdentifier);
        sub_10000F9FC((__int128 *)(v0 + 96), v95 + v94);
        v96 = sub_100626BC4(v84, (uint64_t)&unk_1011004A8, v95);
        swift_beginAccess(v21, log, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
        v117[0] = *v21;
        *v21 = 0x8000000000000000;
        sub_10010D4BC(v96, v105, isUniquelyReferenced_nonNull_native);
        *v21 = v117[0];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v105, v107);
        swift_endAccess(log);
        v8 = v113;
        v7 = (_QWORD *)(v0 + 176);
      }
      goto LABEL_13;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 488) + 56))(*(_QWORD *)(v0 + 504), 1, 1, *(_QWORD *)(v0 + 480));
  }
  sub_100004048(*(_QWORD *)(v0 + 504), (uint64_t *)&unk_1010EA690);
LABEL_13:
  v115 = v0 + 136;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v24 = *(_QWORD *)(v0 + 592);
  v25 = *(_QWORD *)(v0 + 568);
  v26 = *(_QWORD *)(v0 + 560);
  v27 = *(_QWORD *)(v0 + 552);
  v28 = type metadata accessor for Logger(0);
  sub_10001A9E8(v28, (uint64_t)qword_1011B71C8);
  sub_100030784(v6, (uint64_t)v7);
  sub_10005972C(v24, v25, type metadata accessor for DeviceEvent);
  sub_10005972C(v24, v26, type metadata accessor for DeviceEvent);
  v29 = sub_10005972C(v24, v27, type metadata accessor for DeviceEvent);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v32 = os_log_type_enabled(v30, v31);
  v33 = *(_QWORD *)(v0 + 568);
  v34 = *(_QWORD *)(v0 + 560);
  v35 = *(_QWORD *)(v0 + 552);
  if (v32)
  {
    v108 = v31;
    loga = v30;
    v112 = v6;
    v114 = v8;
    v100 = *(_QWORD *)(v0 + 560);
    v101 = *(_QWORD *)(v0 + 528);
    v36 = *(_QWORD *)(v0 + 472);
    v102 = *(_QWORD *)(v0 + 480);
    v98 = *(_QWORD *)(v0 + 464);
    v103 = *(_QWORD *)(v0 + 552);
    v37 = *(_QWORD *)(v0 + 456);
    v104 = *(_QWORD *)(v0 + 408);
    v38 = v7;
    v39 = *(_QWORD *)(v0 + 352);
    v40 = *(_QWORD *)(v0 + 360);
    v41 = swift_slowAlloc(58, -1);
    v106 = swift_slowAlloc(96, -1);
    v117[0] = v106;
    *(_DWORD *)v41 = 141559299;
    *(_QWORD *)(v0 + 264) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v41 + 4, v41 + 12);
    *(_WORD *)(v41 + 12) = 2081;
    sub_10001AA44(v38, *(_QWORD *)(v0 + 200));
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v40 + 8) + 8) + 32))(v39);
    v42 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v37, v42);
    v45 = v44;
    v99 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
    v99(v36, v37);
    *(_QWORD *)(v0 + 280) = sub_100016940(v43, v45, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
    *(_WORD *)(v41 + 22) = 1026;
    v46 = *(unsigned __int8 *)(v33 + 9);
    sub_1000126B0(v33, type metadata accessor for DeviceEvent);
    *(_DWORD *)(v0 + 648) = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 652, v41 + 24, v41 + 28);
    *(_WORD *)(v41 + 28) = 2082;
    v47 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v102, v47);
    *(_QWORD *)(v0 + 288) = sub_100016940(v48, v49, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v41 + 30, v41 + 38);
    swift_bridgeObjectRelease();
    sub_1000126B0(v100, type metadata accessor for DeviceEvent);
    *(_WORD *)(v41 + 38) = 2160;
    *(_QWORD *)(v0 + 296) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v41 + 40, v41 + 48);
    *(_WORD *)(v41 + 48) = 2081;
    sub_10000F9B8(v103 + *(int *)(v101 + 32), v104, &qword_1010EF480);
    v50 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v104, 1, v50) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 408), &qword_1010EF480);
      v51 = 0xE400000000000000;
      v52 = 1701736302;
    }
    else
    {
      v53 = *(_QWORD *)(v0 + 472);
      v54 = *(_QWORD *)(v0 + 456);
      v55 = *(_QWORD *)(v0 + 408);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 16))(v53, v55, v54);
      v56 = sub_1000126B0(v55, type metadata accessor for DeviceEvent.AttachmentInfo);
      v52 = UUID.uuidString.getter(v56);
      v51 = v57;
      v99(v53, v54);
    }
    v8 = v114;
    v58 = *(_QWORD *)(v0 + 552);
    *(_QWORD *)(v0 + 304) = sub_100016940(v52, v51, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v41 + 50, v41 + 58);
    swift_bridgeObjectRelease();
    sub_1000126B0(v58, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, loga, v108, "Update device event; beacon: %{private,mask.hash}s source: %{public}u, timestamp: %{public}s, attached to: %{private,mask.hash}s.",
      (uint8_t *)v41,
      0x3Au);
    swift_arrayDestroy(v106, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    v6 = v112;
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for DeviceEvent);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    sub_1000126B0(v34, type metadata accessor for DeviceEvent);
    sub_1000126B0(v35, type metadata accessor for DeviceEvent);

  }
  v59 = *(_QWORD *)(v0 + 384);
  v60 = *(_QWORD *)(v0 + 392);
  v61 = *(_QWORD *)(v0 + 376);
  sub_100030784(v6, v115);
  v62 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v63 = swift_dynamicCast(v61, v115, v62, v59, 6);
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56);
  if (v63)
  {
    v65 = *(_QWORD *)(v0 + 400);
    v67 = *(_QWORD *)(v0 + 376);
    v66 = *(_QWORD *)(v0 + 384);
    v68 = *(_QWORD *)(v0 + 368);
    v64(v67, 0, 1, v66);
    sub_1000126EC(v67, v65, type metadata accessor for LocalFindableAccessoryRecord);
    v69 = (uint64_t *)(v65 + *(int *)(v66 + 28));
    v70 = *v69;
    v71 = v69[1];
    v72 = sub_10001BBBC(*v69, v71);
    static String.Encoding.utf8.getter(v72);
    v73 = String.init(data:encoding:)(v70, v71, v68);
    if (!v74)
      v73 = Data.hexString.getter(v70, v71);
    v75 = v73;
    v76 = v74;
    sub_10001BC14(v70, v71);
    sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for LocalFindableAccessoryRecord);
  }
  else
  {
    v77 = *(_QWORD *)(v0 + 376);
    v64(v77, 1, 1, *(_QWORD *)(v0 + 384));
    sub_100004048(v77, (uint64_t *)&unk_1010EDC50);
    v75 = 0;
    v76 = 0;
  }
  v78 = *(_QWORD *)(v0 + 592);
  v79 = *(_QWORD *)(v0 + 544);
  v80 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + 160);
  sub_10000F4A0(0, (unint64_t *)&qword_101100478, SPDeviceEvent_ptr);
  sub_10005972C(v78, v79, type metadata accessor for DeviceEvent);
  v81 = sub_1005BC3C4(v79, v75, v76);
  *(_QWORD *)(v0 + 632) = v81;
  v82 = 0x10F0F0F0F040200uLL >> (8 * *(_BYTE *)(v8 + 9));
  v116 = (char *)&dword_10110C680 + dword_10110C680;
  v83 = (_QWORD *)swift_task_alloc(unk_10110C684);
  *(_QWORD *)(v0 + 640) = v83;
  *v83 = v0;
  v83[1] = sub_1005C8D24;
  return ((uint64_t (*)(id, _QWORD, unint64_t, uint64_t, _QWORD, _QWORD))v116)(v81, *(_QWORD *)(v0 + 600), v82, v80, *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
}

uint64_t sub_1005C7DBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 344);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 624));
  return swift_task_switch(sub_1005C7E14, v1, 0);
}

uint64_t sub_1005C7E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  _QWORD *v32;
  __n128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  os_log_type_t v134;
  uint64_t v135;
  os_log_t logb;
  os_log_t log;
  os_log_t logc;
  NSObject *loga;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152[2];

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 512);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0 + 616))(v2, 1, *(_QWORD *)(v0 + 528)) == 1)
  {
    sub_100004048(v2, &qword_1010EF488);
    v3 = sub_1005C4B54();
    v4 = swift_allocError(&type metadata for LocationFetchService.Error, v3, 0, 0);
    *v5 = 3;
    swift_willThrow(v4);
    swift_errorRetain(v4);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B71C8);
    sub_100030784(v0 + 16, v0 + 56);
    swift_errorRetain(v4);
    v7 = swift_errorRetain(v4);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = *(_QWORD *)(v0 + 472);
      v142 = *(_QWORD *)(v0 + 464);
      v128 = *(_QWORD *)(v0 + 360);
      v132 = *(_QWORD *)(v0 + 352);
      logb = *(os_log_t *)(v0 + 456);
      v11 = swift_slowAlloc(32, -1);
      v140 = (uint64_t *)swift_slowAlloc(8, -1);
      v144 = swift_slowAlloc(32, -1);
      v152[0] = v144;
      *(_DWORD *)v11 = 138543875;
      swift_errorRetain(v4);
      v12 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(_QWORD *)(v0 + 328) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v11 + 4, v11 + 12);
      *v140 = v12;
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      *(_WORD *)(v11 + 12) = 2160;
      *(_QWORD *)(v0 + 320) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v11 + 14, v11 + 22);
      *(_WORD *)(v11 + 22) = 2081;
      sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
      (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v128 + 8) + 8) + 32))(v132);
      v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v14 = dispatch thunk of CustomStringConvertible.description.getter(logb, v13);
      v16 = v15;
      (*(void (**)(uint64_t, os_log_t))(v142 + 8))(v10, logb);
      *(_QWORD *)(v0 + 272) = sub_100016940(v14, v16, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v11 + 24, v11 + 32);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to send the attach event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v140, 1, v17);
      swift_slowDealloc(v140, -1, -1);
      swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v144, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v4);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));

    }
    swift_errorRelease(v4);
    v35 = *(_QWORD *)(v0 + 592);
    v36 = *(_QWORD *)(v0 + 584);
    v37 = *(_QWORD *)(v0 + 576);
    v38 = *(_QWORD *)(v0 + 568);
    v39 = *(_QWORD *)(v0 + 560);
    v40 = *(_QWORD *)(v0 + 552);
    v41 = *(_QWORD *)(v0 + 544);
    v42 = *(_QWORD *)(v0 + 520);
    v43 = *(_QWORD *)(v0 + 512);
    v125 = *(_QWORD *)(v0 + 504);
    v129 = *(_QWORD *)(v0 + 496);
    v133 = *(_QWORD *)(v0 + 472);
    logc = *(os_log_t *)(v0 + 448);
    v141 = *(_QWORD *)(v0 + 440);
    v143 = *(_QWORD *)(v0 + 408);
    v146 = *(_QWORD *)(v0 + 400);
    v147 = *(_QWORD *)(v0 + 376);
    v149 = *(_QWORD *)(v0 + 368);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v125);
    swift_task_dealloc(v129);
    swift_task_dealloc(v133);
    swift_task_dealloc(logc);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v149);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v18 = (_QWORD *)(v0 + 176);
  sub_1000126EC(v2, *(_QWORD *)(v0 + 576), type metadata accessor for DeviceEvent);
  v19 = *(_QWORD *)(v0 + 592);
  sub_1000126EC(*(_QWORD *)(v0 + 576), v19, type metadata accessor for DeviceEvent);
  v145 = v19;
  if (*(_BYTE *)(v19 + 9) == 5)
  {
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v20 = *(_QWORD *)(v0 + 504);
    v21 = *(_QWORD *)(v0 + 480);
    v22 = *(_QWORD *)(v0 + 488);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v23 = sub_100C1AE9C(*(_QWORD *)(v0 + 312));
    swift_bridgeObjectRelease();
    Date.addingTimeInterval(_:)((double)v23);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v20, 0, 1, v21);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21);
    v18 = (_QWORD *)(v0 + 176);
    if (v24 != 1)
    {
      v25 = *(_QWORD *)(v0 + 496);
      v26 = *(_QWORD *)(v0 + 504);
      v27 = *(_QWORD *)(v0 + 480);
      v28 = *(_QWORD *)(v0 + 488);
      static Date.trustedNow.getter(v25);
      v29 = Date.timeIntervalSince(_:)(v25);
      v30 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v30(v25, v27);
      v30(v26, v27);
      if (v29 > 0.0)
      {
        log = (os_log_t)(v0 + 216);
        v31 = *(_QWORD *)(v0 + 336) + *(int *)(*(_QWORD *)(v0 + 416) + 20);
        v32 = (_QWORD *)(*(_QWORD *)(v0 + 344) + 152);
        v33 = swift_beginAccess(v32, v0 + 240, 0, 0);
        if (*(_QWORD *)(*v32 + 16))
        {
          swift_bridgeObjectRetain(*v32);
          sub_100003FB0(v31);
          if ((v34 & 1) != 0)
          {
            swift_retain();
            swift_bridgeObjectRelease();
            sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            Task.cancel()();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
        }
        v135 = *(_QWORD *)(v0 + 464);
        v106 = *(_QWORD *)(v0 + 448);
        v127 = *(_QWORD *)(v0 + 472);
        v131 = *(_QWORD *)(v0 + 456);
        v107 = *(_QWORD *)(v0 + 432);
        v108 = *(_QWORD *)(v0 + 440);
        v109 = *(_QWORD *)(v0 + 424);
        v110 = *(_QWORD *)(v0 + 336);
        v111 = *(_QWORD *)(v0 + 344);
        (*(void (**)(__n128))(v135 + 16))(v33);
        v112 = type metadata accessor for TaskPriority(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v106, 1, 1, v112);
        v113 = swift_allocObject(&unk_101081290, 24, 7);
        swift_weakInit(v113 + 16, v111);
        sub_10005972C(v110, v108, type metadata accessor for BeaconIdentifier);
        v1 = v0 + 16;
        sub_100030784(v0 + 16, v0 + 96);
        v114 = *(unsigned __int8 *)(v109 + 80);
        v115 = (v114 + 48) & ~v114;
        v116 = (v107 + v115 + 7) & 0xFFFFFFFFFFFFFFF8;
        v117 = swift_allocObject(&unk_1010816F0, v116 + 40, v114 | 7);
        *(_QWORD *)(v117 + 16) = 0;
        *(_QWORD *)(v117 + 24) = 0;
        *(double *)(v117 + 32) = v29;
        *(_QWORD *)(v117 + 40) = v113;
        sub_1000126EC(v108, v117 + v115, type metadata accessor for BeaconIdentifier);
        sub_10000F9FC((__int128 *)(v0 + 96), v117 + v116);
        v118 = sub_100626BC4(v106, (uint64_t)&unk_1011004A8, v117);
        swift_beginAccess(v32, log, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
        v152[0] = *v32;
        *v32 = 0x8000000000000000;
        sub_10010D4BC(v118, v127, isUniquelyReferenced_nonNull_native);
        *v32 = v152[0];
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v127, v131);
        swift_endAccess(log);
        v18 = (_QWORD *)(v0 + 176);
      }
      goto LABEL_18;
    }
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 488) + 56))(*(_QWORD *)(v0 + 504), 1, 1, *(_QWORD *)(v0 + 480));
  }
  sub_100004048(*(_QWORD *)(v0 + 504), (uint64_t *)&unk_1010EA690);
LABEL_18:
  v45 = v0 + 136;
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v46 = *(_QWORD *)(v0 + 592);
  v47 = *(_QWORD *)(v0 + 568);
  v48 = *(_QWORD *)(v0 + 560);
  v49 = *(_QWORD *)(v0 + 552);
  v50 = type metadata accessor for Logger(0);
  sub_10001A9E8(v50, (uint64_t)qword_1011B71C8);
  sub_100030784(v1, (uint64_t)v18);
  sub_10005972C(v46, v47, type metadata accessor for DeviceEvent);
  sub_10005972C(v46, v48, type metadata accessor for DeviceEvent);
  v51 = sub_10005972C(v46, v49, type metadata accessor for DeviceEvent);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  v54 = os_log_type_enabled(v52, v53);
  v55 = *(_QWORD *)(v0 + 568);
  v56 = *(_QWORD *)(v0 + 560);
  v57 = *(_QWORD *)(v0 + 552);
  if (v54)
  {
    v134 = v53;
    loga = v52;
    v150 = v1;
    v123 = *(_QWORD *)(v0 + 528);
    v58 = *(_QWORD *)(v0 + 472);
    v124 = *(_QWORD *)(v0 + 480);
    v120 = *(_QWORD *)(v0 + 464);
    v59 = v18;
    v60 = *(_QWORD *)(v0 + 456);
    v126 = *(_QWORD *)(v0 + 408);
    v61 = *(_QWORD *)(v0 + 352);
    v62 = *(_QWORD *)(v0 + 360);
    v122 = *(_QWORD *)(v0 + 560);
    v63 = swift_slowAlloc(58, -1);
    v130 = swift_slowAlloc(96, -1);
    v152[0] = v130;
    *(_DWORD *)v63 = 141559299;
    *(_QWORD *)(v0 + 264) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v63 + 4, v63 + 12);
    *(_WORD *)(v63 + 12) = 2081;
    v148 = v57;
    sub_10001AA44(v59, *(_QWORD *)(v0 + 200));
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v62 + 8) + 8) + 32))(v61);
    v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v65 = dispatch thunk of CustomStringConvertible.description.getter(v60, v64);
    v67 = v66;
    v121 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
    v121(v58, v60);
    *(_QWORD *)(v0 + 280) = sub_100016940(v65, v67, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v63 + 14, v63 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
    *(_WORD *)(v63 + 22) = 1026;
    v68 = *(unsigned __int8 *)(v55 + 9);
    sub_1000126B0(v55, type metadata accessor for DeviceEvent);
    *(_DWORD *)(v0 + 648) = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 652, v63 + 24, v63 + 28);
    *(_WORD *)(v63 + 28) = 2082;
    v69 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v70 = dispatch thunk of CustomStringConvertible.description.getter(v124, v69);
    *(_QWORD *)(v0 + 288) = sub_100016940(v70, v71, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v63 + 30, v63 + 38);
    swift_bridgeObjectRelease();
    sub_1000126B0(v122, type metadata accessor for DeviceEvent);
    *(_WORD *)(v63 + 38) = 2160;
    *(_QWORD *)(v0 + 296) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v63 + 40, v63 + 48);
    *(_WORD *)(v63 + 48) = 2081;
    sub_10000F9B8(v148 + *(int *)(v123 + 32), v126, &qword_1010EF480);
    v72 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 48))(v126, 1, v72) == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 408), &qword_1010EF480);
      v73 = 0xE400000000000000;
      v74 = 1701736302;
    }
    else
    {
      v75 = *(_QWORD *)(v0 + 472);
      v76 = *(_QWORD *)(v0 + 456);
      v77 = *(_QWORD *)(v0 + 408);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 464) + 16))(v75, v77, v76);
      v78 = sub_1000126B0(v77, type metadata accessor for DeviceEvent.AttachmentInfo);
      v74 = UUID.uuidString.getter(v78);
      v73 = v79;
      v121(v75, v76);
    }
    v45 = v0 + 136;
    v80 = *(_QWORD *)(v0 + 552);
    *(_QWORD *)(v0 + 304) = sub_100016940(v74, v73, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v63 + 50, v63 + 58);
    swift_bridgeObjectRelease();
    sub_1000126B0(v80, type metadata accessor for DeviceEvent);
    _os_log_impl((void *)&_mh_execute_header, loga, v134, "Update device event; beacon: %{private,mask.hash}s source: %{public}u, timestamp: %{public}s, attached to: %{private,mask.hash}s.",
      (uint8_t *)v63,
      0x3Au);
    swift_arrayDestroy(v130, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v130, -1, -1);
    swift_slowDealloc(v63, -1, -1);

    v1 = v150;
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 568), type metadata accessor for DeviceEvent);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
    sub_1000126B0(v56, type metadata accessor for DeviceEvent);
    sub_1000126B0(v57, type metadata accessor for DeviceEvent);

  }
  v81 = *(_QWORD *)(v0 + 384);
  v82 = *(_QWORD *)(v0 + 392);
  v83 = *(_QWORD *)(v0 + 376);
  sub_100030784(v1, v45);
  v84 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v85 = swift_dynamicCast(v83, v45, v84, v81, 6);
  v86 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56);
  if (v85)
  {
    v87 = *(_QWORD *)(v0 + 400);
    v89 = *(_QWORD *)(v0 + 376);
    v88 = *(_QWORD *)(v0 + 384);
    v90 = *(_QWORD *)(v0 + 368);
    v86(v89, 0, 1, v88);
    sub_1000126EC(v89, v87, type metadata accessor for LocalFindableAccessoryRecord);
    v91 = (uint64_t *)(v87 + *(int *)(v88 + 28));
    v92 = *v91;
    v93 = v91[1];
    v94 = sub_10001BBBC(*v91, v93);
    static String.Encoding.utf8.getter(v94);
    v95 = String.init(data:encoding:)(v92, v93, v90);
    if (!v96)
      v95 = Data.hexString.getter(v92, v93);
    v97 = v95;
    v98 = v96;
    sub_10001BC14(v92, v93);
    sub_1000126B0(*(_QWORD *)(v0 + 400), type metadata accessor for LocalFindableAccessoryRecord);
  }
  else
  {
    v99 = *(_QWORD *)(v0 + 376);
    v86(v99, 1, 1, *(_QWORD *)(v0 + 384));
    sub_100004048(v99, (uint64_t *)&unk_1010EDC50);
    v97 = 0;
    v98 = 0;
  }
  v100 = *(_QWORD *)(v0 + 592);
  v101 = *(_QWORD *)(v0 + 544);
  v102 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + 160);
  sub_10000F4A0(0, (unint64_t *)&qword_101100478, SPDeviceEvent_ptr);
  sub_10005972C(v100, v101, type metadata accessor for DeviceEvent);
  v103 = sub_1005BC3C4(v101, v97, v98);
  *(_QWORD *)(v0 + 632) = v103;
  v104 = 0x10F0F0F0F040200uLL >> (8 * *(_BYTE *)(v145 + 9));
  v151 = (char *)&dword_10110C680 + dword_10110C680;
  v105 = (_QWORD *)swift_task_alloc(unk_10110C684);
  *(_QWORD *)(v0 + 640) = v105;
  *v105 = v0;
  v105[1] = sub_1005C8D24;
  return ((uint64_t (*)(id, _QWORD, unint64_t, uint64_t, _QWORD, _QWORD))v151)(v103, *(_QWORD *)(v0 + 600), v104, v102, *(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 360));
}

uint64_t sub_1005C8D24()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(*(_QWORD *)v0 + 632);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 344);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 640));

  return swift_task_switch(sub_1005C8D84, v2, 0);
}

uint64_t sub_1005C8D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_1000126B0(*(_QWORD *)(v0 + 592), type metadata accessor for DeviceEvent);
  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 584);
  v3 = *(_QWORD *)(v0 + 576);
  v4 = *(_QWORD *)(v0 + 568);
  v5 = *(_QWORD *)(v0 + 560);
  v6 = *(_QWORD *)(v0 + 552);
  v7 = *(_QWORD *)(v0 + 544);
  v8 = *(_QWORD *)(v0 + 520);
  v10 = *(_QWORD *)(v0 + 512);
  v11 = *(_QWORD *)(v0 + 504);
  v12 = *(_QWORD *)(v0 + 496);
  v13 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 440);
  v16 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 400);
  v18 = *(_QWORD *)(v0 + 376);
  v19 = *(_QWORD *)(v0 + 368);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C8ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3[44] = a1;
  v3[45] = a3;
  v6 = type metadata accessor for BeaconIdentifier(0);
  v3[46] = v6;
  v3[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v3[48] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[49] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v3[50] = v9;
  v3[51] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  v3[52] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconEstimatedLocation(0);
  v3[53] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[54] = v12;
  v3[55] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1011003F0);
  v3[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DeviceEvent.Location(0);
  v3[57] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[58] = v15;
  v3[59] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010ED860);
  v3[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010EF488);
  v3[61] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DeviceEvent(0);
  v3[62] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v3[63] = v19;
  v3[64] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3[6] = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
  v20 = sub_100018F08(v3 + 2);
  sub_10005972C(a2, (uint64_t)v20, type metadata accessor for LocalFindableAccessoryRecord);
  return swift_task_switch(sub_1005C90C0, a3, 0);
}

uint64_t sub_1005C90C0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 296, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 520) = v2;
    *v2 = v0;
    v2[1] = sub_1005C91AC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005C91AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005C920C, v3, 0);
}

uint64_t sub_1005C920C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 528))
  {
    v2 = *(_QWORD *)(v0 + 480);
    v3 = *(_QWORD *)(v0 + 384);
    v4 = *(_QWORD *)(v0 + 392);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    v5 = (_QWORD *)swift_task_alloc(dword_10111BB34);
    *(_QWORD *)(v0 + 536) = v5;
    *v5 = v0;
    v5[1] = sub_1005C9618;
    return sub_100C65BE4(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 352), 8, *(_QWORD *)(v0 + 480));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_1005C4B54();
    v8 = swift_allocError(&type metadata for LocationFetchService.Error, v7, 0, 0);
    *v9 = 0;
    swift_willThrow(v8);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v10 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 352);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B71C8);
    sub_10005972C(v11, v10, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v8);
    v13 = swift_errorRetain(v8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v35 = *(_QWORD *)(v0 + 384);
      v34 = *(_QWORD *)(v0 + 376);
      v16 = swift_slowAlloc(32, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(32, -1);
      v36 = v18;
      *(_DWORD *)v16 = 138543875;
      swift_errorRetain(v8);
      v19 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 328) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v16 + 4, v16 + 12);
      *v17 = v19;
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      *(_WORD *)(v16 + 12) = 2160;
      *(_QWORD *)(v0 + 320) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v16 + 14, v16 + 22);
      *(_WORD *)(v16 + 22) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v35, v20);
      *(_QWORD *)(v0 + 344) = sub_100016940(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v16 + 24, v16 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v23);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 376);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      sub_1000126B0(v24, type metadata accessor for BeaconIdentifier);

    }
    v25 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 488);
    v28 = *(_QWORD *)(v0 + 472);
    v30 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 448);
    v32 = *(_QWORD *)(v0 + 408);
    v31 = *(_QWORD *)(v0 + 416);
    v33 = *(_QWORD *)(v0 + 376);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005C9618()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 480);
  v5 = *(_QWORD *)(v2 + 360);
  sub_100004048(v4, &qword_1010ED860);
  swift_release();
  if (v0)
    v6 = sub_1005C995C;
  else
    v6 = sub_1005C96A4;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1005C96A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  id v26;
  id v27;
  Class isa;
  _QWORD *v29;
  uint64_t (__cdecl *v30)();

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 488);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 504) + 48))(v2, 1, v1) == 1)
  {
    v3 = &qword_1010EF488;
LABEL_5:
    sub_100004048(v2, v3);
    v10 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 488);
    v13 = *(_QWORD *)(v0 + 472);
    v15 = *(_QWORD *)(v0 + 440);
    v14 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 416);
    v18 = *(_QWORD *)(v0 + 376);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 448);
  sub_1000126EC(v2, v4, type metadata accessor for DeviceEvent);
  sub_10000F9B8(v4 + *(int *)(v1 + 28), v7, &qword_1011003F0);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  v9 = *(_QWORD *)(v0 + 512);
  if (v8 == 1)
  {
    v2 = *(_QWORD *)(v0 + 448);
    sub_1000126B0(*(_QWORD *)(v0 + 512), type metadata accessor for DeviceEvent);
    v3 = &qword_1011003F0;
    goto LABEL_5;
  }
  sub_1000126EC(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 472), type metadata accessor for DeviceEvent.Location);
  v20 = 0x10F0F0F0F040200uLL >> (8 * *(_BYTE *)(v9 + 9));
  *(_BYTE *)(v0 + 608) = v20;
  v21 = *(double **)(v0 + 472);
  *(_DWORD *)(v0 + 600) = *(_DWORD *)(*(_QWORD *)(v0 + 456) + 28);
  v22 = *v21;
  v23 = v21[1];
  v24 = v21[2];
  v25 = (void *)sub_100C63E28(v20);
  v26 = objc_allocWithZone((Class)SPBeaconLocation);
  v27 = v25;
  isa = Date._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 552) = objc_msgSend(v26, "initWithTimestamp:latitude:longitude:horizontalAccuracy:source:", isa, v27, v22, v23, v24);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC((__int128 *)(v0 + 176), v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
    v30 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v29 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 560) = v29;
    *v29 = v0;
    v29[1] = sub_1005C9CBC;
    return v30();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005C995C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 544);
  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 352);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B71C8);
  sub_10005972C(v3, v2, type metadata accessor for BeaconIdentifier);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v28 = *(_QWORD *)(v0 + 384);
    v27 = *(_QWORD *)(v0 + 376);
    v8 = swift_slowAlloc(32, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v29 = v10;
    *(_DWORD *)v8 = 138543875;
    swift_errorRetain(v1);
    v11 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 328) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v8 + 4, v8 + 12);
    *v9 = v11;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v8 + 12) = 2160;
    *(_QWORD *)(v0 + 320) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v8 + 14, v8 + 22);
    *(_WORD *)(v8 + 22) = 2081;
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v28, v12);
    *(_QWORD *)(v0 + 344) = sub_100016940(v13, v14, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v27, type metadata accessor for BeaconIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v8, 0x20u);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v15);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 376);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);

  }
  v17 = *(_QWORD *)(v0 + 512);
  v19 = *(_QWORD *)(v0 + 480);
  v18 = *(_QWORD *)(v0 + 488);
  v20 = *(_QWORD *)(v0 + 472);
  v22 = *(_QWORD *)(v0 + 440);
  v21 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 408);
  v23 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C9CBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005C9D1C, v3, 0);
}

uint64_t sub_1005C9D1C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (_QWORD *)(v0 + 216);
  if (*(_QWORD *)(v0 + 568))
  {
    v2 = *(_QWORD *)(v0 + 368);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 604) = *(_DWORD *)(v2 + 20);
    return swift_task_switch(sub_1005CA128, *(_QWORD *)(v0 + 568), 0);
  }
  else
  {
    v4 = *(void **)(v0 + 552);
    v5 = *(_QWORD *)(v0 + 512);
    v6 = *(_QWORD *)(v0 + 472);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_1005C4B54();
    v8 = swift_allocError(&type metadata for LocationFetchService.Error, v7, 0, 0);
    *v9 = 1;
    swift_willThrow(v8);

    sub_1000126B0(v6, type metadata accessor for DeviceEvent.Location);
    sub_1000126B0(v5, type metadata accessor for DeviceEvent);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v10 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 352);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B71C8);
    sub_10005972C(v11, v10, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v8);
    v13 = swift_errorRetain(v8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v35 = *(_QWORD *)(v0 + 384);
      v34 = *(_QWORD *)(v0 + 376);
      v16 = swift_slowAlloc(32, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(32, -1);
      v36 = v18;
      *(_DWORD *)v16 = 138543875;
      swift_errorRetain(v8);
      v19 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 328) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v16 + 4, v16 + 12);
      *v17 = v19;
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      *(_WORD *)(v16 + 12) = 2160;
      *(_QWORD *)(v0 + 320) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v16 + 14, v16 + 22);
      *(_WORD *)(v16 + 22) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v35, v20);
      *(_QWORD *)(v0 + 344) = sub_100016940(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v16 + 24, v16 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v23);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 376);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      sub_1000126B0(v24, type metadata accessor for BeaconIdentifier);

    }
    v25 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 488);
    v28 = *(_QWORD *)(v0 + 472);
    v30 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 448);
    v32 = *(_QWORD *)(v0 + 408);
    v31 = *(_QWORD *)(v0 + 416);
    v33 = *(_QWORD *)(v0 + 376);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005CA128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 392);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 352) + *(int *)(v0 + 604), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101081650, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 576) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 584) = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
  *v10 = v0;
  v10[1] = sub_1005CA224;
  return unsafeBlocking<A>(_:)(v0 + 336, sub_1005CCE40, v8, v11);
}

uint64_t sub_1005CA224()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 584));
  swift_release();
  return swift_task_switch(sub_1005CA280, *(_QWORD *)(v1 + 568), 0);
}

uint64_t sub_1005CA280()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[45];
  swift_release();
  v0[74] = v0[42];
  return swift_task_switch(sub_1005CA2C8, v1, 0);
}

uint64_t sub_1005CA2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(v0 + 424);
  v1 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 416);
  sub_100A79444(*(_QWORD *)(v0 + 592), v3);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = *(void **)(v0 + 552);
    v5 = *(_BYTE *)(v0 + 608);
    v6 = *(_QWORD *)(v0 + 512);
    v7 = *(_QWORD *)(v0 + 472);
    v8 = *(_QWORD *)(v0 + 360);
    sub_100004048(*(_QWORD *)(v0 + 416), (uint64_t *)&unk_1010F7810);
    v9 = *(_QWORD *)(v8 + 160);
    type metadata accessor for Transaction(0);
    sub_100030784(v0 + 16, v0 + 96);
    v10 = swift_allocObject(&unk_101081678, 73, 7);
    sub_10000F9FC((__int128 *)(v0 + 96), v10 + 16);
    *(_QWORD *)(v10 + 56) = v9;
    *(_QWORD *)(v10 + 64) = v4;
    *(_BYTE *)(v10 + 72) = v5;
    v11 = v4;
    swift_retain();
    static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100460, v10);
    swift_release();

  }
  else
  {
    v12 = *(_QWORD *)(v0 + 440);
    v13 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 472) + *(int *)(v0 + 600);
    sub_1000126EC(*(_QWORD *)(v0 + 416), v12, type metadata accessor for BeaconEstimatedLocation);
    v15 = static Date.> infix(_:_:)(v14, v12 + *(int *)(v13 + 40));
    v16 = *(void **)(v0 + 552);
    if ((v15 & 1) != 0)
    {
      v17 = *(_BYTE *)(v0 + 608);
      v6 = *(_QWORD *)(v0 + 512);
      v7 = *(_QWORD *)(v0 + 472);
      v18 = *(_QWORD *)(v0 + 440);
      v19 = *(_QWORD *)(*(_QWORD *)(v0 + 360) + 160);
      type metadata accessor for Transaction(0);
      sub_100030784(v0 + 16, v0 + 256);
      v20 = swift_allocObject(&unk_1010816A0, 73, 7);
      sub_10000F9FC((__int128 *)(v0 + 256), v20 + 16);
      *(_QWORD *)(v20 + 56) = v19;
      *(_QWORD *)(v20 + 64) = v16;
      *(_BYTE *)(v20 + 72) = v17;
      v21 = v16;
      swift_retain();
      static Transaction.asyncTask(name:block:)("LocationFetchServiceConnections.updateLocations:beacon:", 55, 2, &unk_101100468, v20);
      swift_release();

      v22 = v18;
    }
    else
    {
      v6 = *(_QWORD *)(v0 + 512);
      v7 = *(_QWORD *)(v0 + 472);
      v23 = *(_QWORD *)(v0 + 440);

      v22 = v23;
    }
    sub_1000126B0(v22, type metadata accessor for BeaconEstimatedLocation);
  }
  sub_1000126B0(v7, type metadata accessor for DeviceEvent.Location);
  sub_1000126B0(v6, type metadata accessor for DeviceEvent);
  v24 = *(_QWORD *)(v0 + 512);
  v26 = *(_QWORD *)(v0 + 480);
  v25 = *(_QWORD *)(v0 + 488);
  v27 = *(_QWORD *)(v0 + 472);
  v29 = *(_QWORD *)(v0 + 440);
  v28 = *(_QWORD *)(v0 + 448);
  v31 = *(_QWORD *)(v0 + 408);
  v30 = *(_QWORD *)(v0 + 416);
  v32 = *(_QWORD *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005CA5A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v5[44] = a1;
  v5[45] = a3;
  v10 = type metadata accessor for BeaconIdentifier(0);
  v5[46] = v10;
  v5[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v5[48] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[49] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v5[50] = v13;
  v5[51] = swift_task_alloc((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F7810);
  v5[52] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BeaconEstimatedLocation(0);
  v5[53] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[54] = v16;
  v5[55] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1011003F0);
  v5[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DeviceEvent.Location(0);
  v5[57] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v5[58] = v19;
  v5[59] = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1010ED860);
  v5[60] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010EF488);
  v5[61] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DeviceEvent(0);
  v5[62] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v5[63] = v23;
  v5[64] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[5] = a4;
  v5[6] = a5;
  v24 = sub_100018F08(v5 + 2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v24, a2, a4);
  return swift_task_switch(sub_1005CA774, a3, 0);
}

uint64_t sub_1005CA774()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 296, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 56);
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 520) = v2;
    *v2 = v0;
    v2[1] = sub_1005CA860;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005CA860(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005CA8C0, v3, 0);
}

uint64_t sub_1005CA8C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 528))
  {
    v2 = *(_QWORD *)(v0 + 480);
    v3 = *(_QWORD *)(v0 + 384);
    v4 = *(_QWORD *)(v0 + 392);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v2, 1, 1, v3);
    v5 = (_QWORD *)swift_task_alloc(dword_10111BB34);
    *(_QWORD *)(v0 + 536) = v5;
    *v5 = v0;
    v5[1] = sub_1005CACCC;
    return sub_100C65BE4(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 352), 8, *(_QWORD *)(v0 + 480));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_1005C4B54();
    v8 = swift_allocError(&type metadata for LocationFetchService.Error, v7, 0, 0);
    *v9 = 0;
    swift_willThrow(v8);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v10 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 352);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B71C8);
    sub_10005972C(v11, v10, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v8);
    v13 = swift_errorRetain(v8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v35 = *(_QWORD *)(v0 + 384);
      v34 = *(_QWORD *)(v0 + 376);
      v16 = swift_slowAlloc(32, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(32, -1);
      v36 = v18;
      *(_DWORD *)v16 = 138543875;
      swift_errorRetain(v8);
      v19 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 328) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v16 + 4, v16 + 12);
      *v17 = v19;
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      *(_WORD *)(v16 + 12) = 2160;
      *(_QWORD *)(v0 + 320) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v16 + 14, v16 + 22);
      *(_WORD *)(v16 + 22) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v35, v20);
      *(_QWORD *)(v0 + 344) = sub_100016940(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v16 + 24, v16 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v23);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 376);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      sub_1000126B0(v24, type metadata accessor for BeaconIdentifier);

    }
    v25 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 488);
    v28 = *(_QWORD *)(v0 + 472);
    v30 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 448);
    v32 = *(_QWORD *)(v0 + 408);
    v31 = *(_QWORD *)(v0 + 416);
    v33 = *(_QWORD *)(v0 + 376);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1005CACCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 536);
  *(_QWORD *)(*v1 + 544) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 480);
  v5 = *(_QWORD *)(v2 + 360);
  sub_100004048(v4, &qword_1010ED860);
  swift_release();
  if (v0)
    v6 = sub_1005CD9B4;
  else
    v6 = sub_1005CAD58;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1005CAD58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  id v26;
  id v27;
  Class isa;
  _QWORD *v29;
  uint64_t (__cdecl *v30)();

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 488);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 504) + 48))(v2, 1, v1) == 1)
  {
    v3 = &qword_1010EF488;
LABEL_5:
    sub_100004048(v2, v3);
    v10 = *(_QWORD *)(v0 + 512);
    v12 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 488);
    v13 = *(_QWORD *)(v0 + 472);
    v15 = *(_QWORD *)(v0 + 440);
    v14 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 416);
    v18 = *(_QWORD *)(v0 + 376);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 512);
  v5 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 448);
  sub_1000126EC(v2, v4, type metadata accessor for DeviceEvent);
  sub_10000F9B8(v4 + *(int *)(v1 + 28), v7, &qword_1011003F0);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  v9 = *(_QWORD *)(v0 + 512);
  if (v8 == 1)
  {
    v2 = *(_QWORD *)(v0 + 448);
    sub_1000126B0(*(_QWORD *)(v0 + 512), type metadata accessor for DeviceEvent);
    v3 = &qword_1011003F0;
    goto LABEL_5;
  }
  sub_1000126EC(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 472), type metadata accessor for DeviceEvent.Location);
  v20 = 0x10F0F0F0F040200uLL >> (8 * *(_BYTE *)(v9 + 9));
  *(_BYTE *)(v0 + 608) = v20;
  v21 = *(double **)(v0 + 472);
  *(_DWORD *)(v0 + 600) = *(_DWORD *)(*(_QWORD *)(v0 + 456) + 28);
  v22 = *v21;
  v23 = v21[1];
  v24 = v21[2];
  v25 = (void *)sub_100C63E28(v20);
  v26 = objc_allocWithZone((Class)SPBeaconLocation);
  v27 = v25;
  isa = Date._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)(v0 + 552) = objc_msgSend(v26, "initWithTimestamp:latitude:longitude:horizontalAccuracy:source:", isa, v27, v22, v23, v24);

  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 176, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC((__int128 *)(v0 + 176), v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
    v30 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v29 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 560) = v29;
    *v29 = v0;
    v29[1] = sub_1005CB010;
    return v30();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005CB010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005CB070, v3, 0);
}

uint64_t sub_1005CB070()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = (_QWORD *)(v0 + 216);
  if (*(_QWORD *)(v0 + 568))
  {
    v2 = *(_QWORD *)(v0 + 368);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 604) = *(_DWORD *)(v2 + 20);
    return swift_task_switch(sub_1005CB47C, *(_QWORD *)(v0 + 568), 0);
  }
  else
  {
    v4 = *(void **)(v0 + 552);
    v5 = *(_QWORD *)(v0 + 512);
    v6 = *(_QWORD *)(v0 + 472);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_1005C4B54();
    v8 = swift_allocError(&type metadata for LocationFetchService.Error, v7, 0, 0);
    *v9 = 1;
    swift_willThrow(v8);

    sub_1000126B0(v6, type metadata accessor for DeviceEvent.Location);
    sub_1000126B0(v5, type metadata accessor for DeviceEvent);
    if (qword_1010E9D20 != -1)
      swift_once(&qword_1010E9D20, sub_1005AE82C);
    v10 = *(_QWORD *)(v0 + 376);
    v11 = *(_QWORD *)(v0 + 352);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B71C8);
    sub_10005972C(v11, v10, type metadata accessor for BeaconIdentifier);
    swift_errorRetain(v8);
    v13 = swift_errorRetain(v8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v35 = *(_QWORD *)(v0 + 384);
      v34 = *(_QWORD *)(v0 + 376);
      v16 = swift_slowAlloc(32, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(32, -1);
      v36 = v18;
      *(_DWORD *)v16 = 138543875;
      swift_errorRetain(v8);
      v19 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 328) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v16 + 4, v16 + 12);
      *v17 = v19;
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      *(_WORD *)(v16 + 12) = 2160;
      *(_QWORD *)(v0 + 320) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v16 + 14, v16 + 22);
      *(_WORD *)(v16 + 22) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v35, v20);
      *(_QWORD *)(v0 + 344) = sub_100016940(v21, v22, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v16 + 24, v16 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to send the updated location from a device event: %{public}@for beacon: %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v23);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v8);
    }
    else
    {
      v24 = *(_QWORD *)(v0 + 376);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      sub_1000126B0(v24, type metadata accessor for BeaconIdentifier);

    }
    v25 = *(_QWORD *)(v0 + 512);
    v27 = *(_QWORD *)(v0 + 480);
    v26 = *(_QWORD *)(v0 + 488);
    v28 = *(_QWORD *)(v0 + 472);
    v30 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 448);
    v32 = *(_QWORD *)(v0 + 408);
    v31 = *(_QWORD *)(v0 + 416);
    v33 = *(_QWORD *)(v0 + 376);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

